name: HumanEval_46_fib4
language: php
results:
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib = 4;\n  for($i = 0; $i\
    \ <= $n; $i++) {\n    $fib = $fib + $fib + $fib + $fib;\n  }\n  return $fib;\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgsjcx70.php:28\n\
    Stack trace:\n#0 /tmp/tmpxgsjcx70.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxgsjcx70.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 2) {\n\t\treturn\
    \ 0;\n\t} else if ($n <= 4) {\n\t\treturn 0;\n\t} else if ($n <= 6) {\n\t\treturn\
    \ 2;\n\t} else {\n\t\treturn 0;\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw87av8r.php:31\n\
    Stack trace:\n#0 /tmp/tmpcw87av8r.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcw87av8r.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n   if ($n === 0) {\n      return\
    \ 0;\n   } else if ($n === 1) {\n      return 1;\n   } else if ($n === 2) {\n\
    \      return 2;\n   } else if ($n === 3) {\n      return 0;\n   } else if ($n\
    \ === 4) {\n      return 4;\n   } else {\n      return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n   }\n}\n\n/**\n * fibo number sequence\
    \ with 3 parameters\n *\n * @param int|null $n - the index from which the fib3\
    \ sequence will be constructed\n *\n * @return int\n */\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprldl5hht.php:43\n\
    Stack trace:\n#0 /tmp/tmprldl5hht.php(49): test()\n#1 {main}\n  thrown in /tmp/tmprldl5hht.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $n--;\n    if($n===0) return\
    \ 0;\n    if($n==1) return 1;\n    return fib4($n-2) + fib4($n-3) + fib4($n-4);\
    \ \n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp3miyble2.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // base cases\n    if ($n\
    \ == 0)\n        return 0;\n    if ($n == 1)\n        return 1;\n    if ($n ==\
    \ 2)\n        return 2;\n    if ($n == 3)\n        return 0;\n    if ($n == 4)\n\
    \        return 4;\n    // recursive case\n    return fib4($n - 1) + fib4($n -\
    \ 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    If I want to implement fib2() function in python, I need that fib4() function,\
    \ right?\n<|/ c |>\n<| c |>\nI think it should be fib4($n - 1) + fib4($n - 2)\
    \ + fib4($n - 3) + fib4($n - 4)\n<|/ c |>\n<| c |>\nYou might want to add some\
    \ additional checks in case the number is too large (to avoid infinite loop).\
    \ E.g. `if ($n > 9) throw new InvalidArgumentException();`\n<|/ c |>\n<| c |>\n\
    Good call on not using recursion!\n<|/ c |>\n<| c |>\nThe code is unreadable and\
    \ undebuggable. Stick to using recursion (for now) for a better understanding\
    \ and debugging. Also, try not to overdo recursion (which makes it really slow\
    \ on long inputs) because it's just not needed.\n<|/ c |>\n<| a tags=recursion,algorithm,php,python\
    \ |>\nIn Python, you can also implement it like so:\n<code>\ndef fib(n,a,b):\n\
    \    if n == 0:\n        return a\n    if n == 1:\n        return b\n    return\
    \ fib(n-1,b,a+b)\n\nprint(fib(3,0,1))\nprint(fib(4,0,1))\nprint(fib(5,0,1))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nNice solution! Although it might not be the\
    \ fastest if you use python's inbuilt recursion (as opposed to an explicit implementation)\n\
    <|/ c |>\n<| c |>\nYou might want to add some additional checks in case the number\
    \ is too large (to avoid infinite loop). E.g. `if (n > 9) throw new InvalidArgumentException();`\n\
    <|/ c |>\n<| a tags=recursion,algorithm,php,python |>\n<code>\ndef fib(n):\n \
    \  if n == 0:\n      return 0\n   if n == 1:\n      return 1\n   return fib(n-1)\
    \ + fib(n-2)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIf I want to implement fib2()\
    \ function in python, I need that fib4() function, right?\n<|/ c |>\n<| c |>\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr775pcz6.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 1;\n    if ($n == 2) return 2;\n    return fib4($n -\
    \ 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = 0;\n    if ($n <\
    \ 3) {\n        $fib4 = $n;\n    } else {\n        $fib4 = fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n    return $fib4;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgh1qo9t_.php:30\n\
    Stack trace:\n#0 /tmp/tmpgh1qo9t_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgh1qo9t_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $n = intval($n);\n  if ($n\
    \ <= 0) {\n    return 0;\n  } else if ($n == 1) {\n    return 1;\n  } else {\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8djazvz.php:31\n\
    Stack trace:\n#0 /tmp/tmpx8djazvz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpx8djazvz.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array(0,0,2,0,0);\n\
    \    return $fib[$n];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3pj0mpso.php:24\n\
    Stack trace:\n#0 /tmp/tmp3pj0mpso.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp3pj0mpso.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n == 1) return 0;\n    if ($n == 2) return 1;\n    return fib4($n -\
    \ 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep16p9aa.php:26\n\
    Stack trace:\n#0 /tmp/tmpep16p9aa.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpep16p9aa.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 1 || $n > 40) {\n\
    \    echo 'invalid input';\n    die();\n  }\n\n  if ($n == 3) {\n    return 1;\n\
    \  }\n\n  return fib_func($n) + fib_func($n-1) + fib_func($n-2) + fib_func($n-3)\
    \ + fib_func($n-4) + fib_func($n-5);\n}\n\nfunction candidate(...$args) {\n  \
    \  return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib_func() in\
    \ /tmp/tmpx6dkw5kq.php:25\nStack trace:\n#0 /tmp/tmpx6dkw5kq.php(29): fib4(5)\n\
    #1 /tmp/tmpx6dkw5kq.php(33): candidate(5)\n#2 /tmp/tmpx6dkw5kq.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx6dkw5kq.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n<0) {\n        return\
    \ -fib4(-$n);\n    }\n\n    if ($n<=1) {\n        return 0;\n    }\n\n    if ($n===2)\
    \ {\n        return 2;\n    }\n\n    if ($n===3) {\n        return 0;\n    }\n\
    \n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4); \n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // Your code here\n  \n}\n\
    \n$array = [1, 2, 3, 4, 5];\narray_walk($array, fib4);\nprint_r($array);\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant fib4 - assumed 'fib4' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp5ef4083j.php on line 21\nArray\n\
    (\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5ef4083j.php:28\nStack\
    \ trace:\n#0 /tmp/tmp5ef4083j.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5ef4083j.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ 0;\n    }\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1)\
    \ {\n        return 1;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgar3515h.php:32\n\
    Stack trace:\n#0 /tmp/tmpgar3515h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgar3515h.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Return the nth element\
    \ of the Fibbonacci sequence.\n    return ($n <= 4) ? $n : $n*fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgx09a6ec.php:25\n\
    Stack trace:\n#0 /tmp/tmpgx09a6ec.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgx09a6ec.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) return 0;\n\
    \    if ($n === 2) return 2;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp744av3u4.php:26\n\
    Stack trace:\n#0 /tmp/tmp744av3u4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp744av3u4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Your code here...\n \
    \   return $n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkwv7g9p.php:25\n\
    Stack trace:\n#0 /tmp/tmpqkwv7g9p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqkwv7g9p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) {\n    return\
    \ 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($n == 2) {\n    return\
    \ 2;\n  }\n  if ($n == 3) {\n    return 0;\n  }\n  return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2eagtrn.php:36\n\
    Stack trace:\n#0 /tmp/tmpp2eagtrn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpp2eagtrn.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2)\n    return 0;\n\
    \  if ($n == 2)\n    return 2;\n  return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigpn_u4z.php:28\n\
    Stack trace:\n#0 /tmp/tmpigpn_u4z.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpigpn_u4z.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // base case: stop recursion\
    \ when fib4(n) = n.\n    if($n === 0) return 0;\n    if($n === 1) return 1;\n\
    \    // otherwise, call fib4 recursively.\n    return fib4($n - 1) + fib4($n -\
    \ 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpiuyrp0d7.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n == 0 ? 0 : $n\
    \ == 1 ? 1 : fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc4rx_j2q.php:27\n\
    Stack trace:\n#0 /tmp/tmpc4rx_j2q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc4rx_j2q.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n == 1) return 0;\n    if ($n == 2) return 2;\n    if ($n == 3) return\
    \ 0;\n    if ($n == 4) return 0;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkdxizbm.php:28\n\
    Stack trace:\n#0 /tmp/tmpnkdxizbm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnkdxizbm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib = 0;\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $fib = $fib + 4;\n  }\n  return $fib;\n}\necho fib4(4);\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "16\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0fa7dlix.php:28\n\
    Stack trace:\n#0 /tmp/tmp0fa7dlix.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0fa7dlix.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n >= 4) return $n;\n\
    \    return fib4(4) + fib4(3) + fib4(0) + fib4(1);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydrwgb7i.php:24\n\
    Stack trace:\n#0 /tmp/tmpydrwgb7i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpydrwgb7i.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 1)\n    return 0;\n\
    \  if ($n == 1)\n    return 1;\n  return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipbldprn.php:28\n\
    Stack trace:\n#0 /tmp/tmpipbldprn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpipbldprn.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $result = 0;\n  if ($n==0)\
    \ {\n    return 0;\n  }\n  else if ($n==1) {\n    return 1;\n  }\n  else if ($n==2)\
    \ {\n    return 2;\n  }\n  else if ($n==3) {\n    return 1;\n  }\n  else {\n \
    \   $result = fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88ybol8w.php:40\n\
    Stack trace:\n#0 /tmp/tmp88ybol8w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp88ybol8w.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0)\n        return\
    \ 0;\n    if ($n == 1)\n        return 1;\n    return fib4($n - 1) + fib4($n -\
    \ 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 0;\n    $d = 0;\n    if ($n < 2) {\n        return $n;\n    }\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        $a = $a + $b;\n        $c = $c + $d;\n  \
    \      $b = $c;\n        $d = $a;\n    }\n    return $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvk_0v72i.php:37\n\
    Stack trace:\n#0 /tmp/tmpvk_0v72i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvk_0v72i.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return ($n < 1) ? 0 : $fib4($n\
    \ - 1) + $fib4($n - 2) + $fib4($n - 3) + $fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpoto7an44.php:16\n\
    Stack trace:\n#0 /tmp/tmpoto7an44.php(20): fib4(5)\n#1 /tmp/tmpoto7an44.php(24):\
    \ candidate(5)\n#2 /tmp/tmpoto7an44.php(30): test()\n#3 {main}\n  thrown in /tmp/tmpoto7an44.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) return 0;\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfnvzjwh.php:24\n\
    Stack trace:\n#0 /tmp/tmpmfnvzjwh.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmfnvzjwh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    if ($n >= 4) {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n    }\n    $result = fib4($n - 1) + fib4($n - 2);\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return $n;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzmccit1c.php:28\n\
    Stack trace:\n#0 /tmp/tmpzmccit1c.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzmccit1c.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 1)\n    return 0;\n\
    \  if ($n <= 2)\n    return 1;\n  return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_235tp8.php:29\n\
    Stack trace:\n#0 /tmp/tmp9_235tp8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9_235tp8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        throw\
    \ new Exception(\"fib4(): negative number $n\");\n    }\n    if ($n === 0) {\n\
    \        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n   \
    \ return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: fib4(): negative number -1 in /tmp/tmp_iu5a9vs.php:17\n\
    Stack trace:\n#0 /tmp/tmp_iu5a9vs.php(25): fib4(-1)\n#1 /tmp/tmp_iu5a9vs.php(25):\
    \ fib4(2)\n#2 /tmp/tmp_iu5a9vs.php(25): fib4(3)\n#3 /tmp/tmp_iu5a9vs.php(25):\
    \ fib4(4)\n#4 /tmp/tmp_iu5a9vs.php(29): fib4(5)\n#5 /tmp/tmp_iu5a9vs.php(33):\
    \ candidate(5)\n#6 /tmp/tmp_iu5a9vs.php(39): test()\n#7 {main}\n  thrown in /tmp/tmp_iu5a9vs.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 4) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ui13kdl.php:26\n\
    Stack trace:\n#0 /tmp/tmp7ui13kdl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7ui13kdl.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  global $fib4;\n  return $fib4[$n];\n\
    }\n\n$fib4[0] = 0;\n$fib4[1] = 0;\n$fib4[2] = 1;\n$fib4[3] = 1;\n$fib4[4] = 1;\n\
    $fib4[5] = 2;\n$fib4[6] = 2;\n$fib4[7] = 3;\n$fib4[8] = 3;\n$fib4[9] = 5;\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpyoyhv1.php:36\n\
    Stack trace:\n#0 /tmp/tmpxpyoyhv1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxpyoyhv1.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib=array(0,1,1,2,2);\n\
    \    if ($n==0){\n        return 0;\n    }\n    if ($n==1){\n        return 1;\n\
    \    }\n    if ($n==2){\n        return 2;\n    }\n    if ($n==3){\n        return\
    \ 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvfkujri.php:37\n\
    Stack trace:\n#0 /tmp/tmpdvfkujri.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdvfkujri.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 0) {\n    return\
    \ 0;\n  }\n  if ($n <= 2) {\n    return 0;\n  }\n  return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcnae3s8.php:30\n\
    Stack trace:\n#0 /tmp/tmpmcnae3s8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmcnae3s8.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 1) return 0;\n\t\
    if ($n < 4) return $n;\n\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) +\
    \ fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsyf9fq00.php:25\n\
    Stack trace:\n#0 /tmp/tmpsyf9fq00.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsyf9fq00.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4_cache = [];\n    for($i\
    \ = 0; $i < $n; $i++){\n        $fib4_cache[] = $fib4_cache[$i-1] + $fib4_cache[$i-2];\n\
    \    }\n    return $fib4_cache[$n-1];\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbw8ymyc3.php:28\n\
    Stack trace:\n#0 /tmp/tmpbw8ymyc3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbw8ymyc3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n<3) {\n        return\
    \ $n;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4) ;\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04s6kg6r.php:27\n\
    Stack trace:\n#0 /tmp/tmp04s6kg6r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp04s6kg6r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = 4;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $fib += $fib - $fib + $fib - $fib;\n    }\n   \
    \ return $fib;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktg56l9a.php:29\n\
    Stack trace:\n#0 /tmp/tmpktg56l9a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpktg56l9a.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib = 4;\n\tfor ($i = 4;\
    \ $i <= $n; $i++) {\n\t\t$fib += $fib;\n\t}\n\treturn $fib;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa64v_52b.php:28\n\
    Stack trace:\n#0 /tmp/tmpa64v_52b.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpa64v_52b.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n === 1) {\n\t\treturn 0;\n\t}\n\tif ($n === 2) {\n\t\treturn\
    \ 2;\n\t}\n\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qm0eshk.php:32\n\
    Stack trace:\n#0 /tmp/tmp2qm0eshk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2qm0eshk.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n===0 || $n===4) {\n\
    \        return 0;\n    }\n    return fib4($n-2) + fib4($n-3) + fib4($n-4) + fib4($n-1);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpn1h1h89y.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 4) {\n    return\
    \ $n;\n  }\n\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4);\n}\n\n/*\n * QUESTION 3\n * For this quiz, please fill out your solution\
    \ so that it passes all of the test cases.\n */\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16i0v_u3.php:33\n\
    Stack trace:\n#0 /tmp/tmp16i0v_u3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp16i0v_u3.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 3) {\n    return\
    \ 0;\n  }\n  return fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmply8rsmfv.php:27\n\
    Stack trace:\n#0 /tmp/tmply8rsmfv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmply8rsmfv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 4) {\n\t\treturn\
    \ $n;\n\t} elseif ($n < 8) {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n\t} else {\n\t\treturn fib4($n - 8) + fib4($n - 7) + fib4($n\
    \ - 6) + fib4($n - 5) + fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n -\
    \ 1) + fib4($n);\n\t}\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6srhthj4.php:29\n\
    Stack trace:\n#0 /tmp/tmp6srhthj4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6srhthj4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Your code here\n    return\
    \ $n;\n}\n\n/**\n * Print a table of Fibonacci numbers, one per line.\n * \n *\
    \ >>> fib_table(10)\n * 1   1   1   2   3   5   8   13  21  34  55  89\n */\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_z5vme00.php:31\n\
    Stack trace:\n#0 /tmp/tmp_z5vme00.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_z5vme00.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n==0) {\n        return\
    \ 0;\n    } else if ($n==1) {\n        return 1;\n    } else if ($n==2) {\n  \
    \      return 2;\n    } else if ($n==3) {\n        return 0;\n    } else {\n \
    \       $n1 = fib4($n-1);\n        $n2 = fib4($n-2);\n        $n3 = fib4($n-3);\n\
    \        return $n1+$n2+$n3+$n4;\n    }\n}\n</code>\n<|/ a dscore=0 tags=php,fibonacci,fibonacci-heap,fibonacci-stack\
    \ |>\n<| c |>\nThanks I will try this but I am pretty new to programming and I\
    \ understand how recursion works but I will try to get better at it :)\n<|/ c\
    \ |>\n<| c |>\nBy the way, you did not understand the question. There are two\
    \ sequences in the question that use the same fibonacci function. The first one\
    \ can be computed in O(2^n) time, while the second one needs O(n) time to compute.\
    \ In the fibonacci sequence, the fibonacci numbers are computed from the sequence\
    \ (1,1,2,3,5,8,13) and the numbers before are computed recursively, hence the\
    \ O(2^n) time complexity.\n<|/ c |>\n<| a tags=php,fibonacci,fibonacci-heap,fibonacci-stack\
    \ dscore=0 |>\nYou could use this:\n<code>\nclass Fib {\n    public $a;\n    public\
    \ $b;\n    public $c;\n    public $d;\n\n    public function __construct($num)\
    \ {\n        $this->a = $num;\n        $this->b = $num + 1;\n        $this->c\
    \ = $num + 2;\n        $this->d = $num + 3;\n    }\n\n    public function fib()\
    \ {\n        $result = $this->a;\n        $this->a = $this->b;\n        $this->b\
    \ = $this->c;\n        $this->c = $this->d;\n        $this->d = $result;\n\n \
    \       return $result;\n    }\n}\n\n$num = 10;\n$fib = new Fib($num);\n$fib_result\
    \ = $fib->fib();\n\necho $num;\n</code>\n<|/ a |>\n<| a tags=php,fibonacci,fibonacci-heap,fibonacci-stack\
    \ |>\n<code>\n$num = 5;\n$array1 = [0,1,1,2];\n$array2 = [0,1,2,3];\n$array3 =\
    \ [0,1,2,3];\n$array4 = [0,1,2,3];\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp66h0jpgc.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ \"fib4($n) error\";\n    }\n    if ($n === 0) {\n        return 0;\n    }\n\
    \    if ($n === 1) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n   \
    \ return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpwbkpia3k.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbkpia3k.php:32\n\
    Stack trace:\n#0 /tmp/tmpwbkpia3k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwbkpia3k.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return fib3($n-1) + fib3($n-2)\
    \ + fib3($n-3) + fib3($n-4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib3() in /tmp/tmpncw1n93f.php:16\n\
    Stack trace:\n#0 /tmp/tmpncw1n93f.php(19): fib4(5)\n#1 /tmp/tmpncw1n93f.php(23):\
    \ candidate(5)\n#2 /tmp/tmpncw1n93f.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpncw1n93f.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0) return 0;\n\t\
    if ($n === 1) return 1;\n\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) +\
    \ fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmporyuwer_.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n <= 2 ? $n : fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4) ;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8uizm6x8.php:23\n\
    Stack trace:\n#0 /tmp/tmp8uizm6x8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8uizm6x8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $s = $f;\n  for ($i = 0; $i\
    \ < $n; $i++){\n    $s = $s + $f;\n  }\n  return $s;\n}\n$fib4 = fib4(6);\nprint\
    \ $fib4;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4285ievd.php:29\n\
    Stack trace:\n#0 /tmp/tmp4285ievd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4285ievd.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) return 0;\n\
    \    if ($n < 4) return 1;\n    return fib4(3*$n-1) + fib4(3*$n-2) + fib4(3*$n-3)\
    \ + fib4(3*$n-4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return\
    \ $n;\n    } else {\n        return fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbw73k1s8.php:27\n\
    Stack trace:\n#0 /tmp/tmpbw73k1s8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbw73k1s8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return $n;\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzblz5fh.php:24\n\
    Stack trace:\n#0 /tmp/tmpqzblz5fh.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpqzblz5fh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$n = intval($n);\n\tif ($n\
    \ == 0 || $n == 1)\n\t\treturn $n;\n\tif ($n == 4)\n\t\treturn $n;\n\t$n4 = $n4\
    \ + $n4 - $n4 + $n4 - $n4;\n\treturn fib4($n4) + fib4($n4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bw92ei2.php:29\n\
    Stack trace:\n#0 /tmp/tmp2bw92ei2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2bw92ei2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n <= 2) {\n\t\treturn $n;\n\t} else {\n\t\treturn fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1akok81x.php:30\n\
    Stack trace:\n#0 /tmp/tmp1akok81x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1akok81x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n==0) {\n        return\
    \ 0;\n    }\n    if ($n==1) {\n        return 0;\n    }\n    if ($n==2) {\n  \
    \      return 2;\n    }\n    if ($n==3) {\n        return 0;\n    }\n    if ($n==4)\
    \ {\n        return 0;\n    }\n    $fib4=fib4($n-1) + fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4);\n    return $fib4;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1k4pnxo.php:40\n\
    Stack trace:\n#0 /tmp/tmpt1k4pnxo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt1k4pnxo.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1)\n        return\
    \ $n;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8y6itfq_.php:25\n\
    Stack trace:\n#0 /tmp/tmp8y6itfq_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8y6itfq_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 1;\n    $b = 1;\n \
    \   $c = 1;\n    $d = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $a = $a +\
    \ $b;\n        $b = $c + $d;\n        $c = $a - $b;\n        $d = $a - $c;\n \
    \   }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5f_x16p.php:34\n\
    Stack trace:\n#0 /tmp/tmpx5f_x16p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpx5f_x16p.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } elseif ($n == 1) {\n        return 1;\n    } elseif ($n ==\
    \ 2) {\n        return 2;\n    } elseif ($n == 3) {\n        return 0;\n    }\
    \ elseif ($n == 4) {\n        return 0;\n    } elseif ($n == 5) {\n        return\
    \ 4;\n    } elseif ($n == 6) {\n        return 8;\n    } elseif ($n == 7) {\n\
    \        return 14;\n    } elseif ($n == 8) {\n        return 16;\n    } elseif\
    \ ($n == 9) {\n        return 21;\n    } elseif ($n == 10) {\n        return 34;\n\
    \    } elseif ($n == 11) {\n        return 51;\n    } elseif ($n == 12) {\n  \
    \      return 91;\n    } elseif ($n == 13) {\n        return 131;\n    } elseif\
    \ ($n == 14) {\n        return 213;\n    } elseif ($n == 15) {\n        return\
    \ 343;\n    } elseif ($n == 16) {\n        return 573;\n    } elseif ($n == 17)\
    \ {\n        return 963;\n    } elseif ($n == 18) {\n        return 1569;\n  \
    \  } elseif ($n == 19) {\n        return 2579;\n    } elseif ($n == 20) {\n  \
    \      return 4181;\n    } elseif ($n == 21) {\n        return 6765;\n    } elseif\
    \ ($n == 22) {\n        return 10923;\n    } elseif ($n == 23) {\n        return\
    \ 17719;\n    } elseif ($n == 24) {\n        return 28657;\n    } elseif ($n ==\
    \ 25) {\n        return 46363;\n    } elseif ($n == 26) {\n        return 75025;\n\
    \    } elseif ($n == 27) {\n        return 129623;\n    } elseif ($n == 28) {\n\
    \        return 196418;\n    } elseif ($n == 29) {\n        return 317811;\n \
    \   } elseif ($n == 30) {\n        return 514229;\n    } elseif ($n == 31) {\n\
    \        return 836213;\n    } elseif ($n == 32) {\n        return 1321199;\n\
    \    } elseif ($n == 33) {\n        return 2005111;\n    } elseif ($n == 34) {\n\
    \        return 3072179;\n    } elseif ($n == 35) {\n        return 4916291;\n\
    \    } elseif ($n == 36) {\n        return 6245783;\n    } elseif ($n == 37) {\n\
    \        return 9041819;\n    } elseif ($n == 38) {\n        return 12130899;\n\
    \    } elseif ($n == 39) {\n        return 15481525;\n    } elseif ($n == 40)\
    \ {\n        return 19\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqd9jvcjk.php on line 98\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    if ($n === 4) {\n        return 1;\n    }\n    if ($n === 5) {\n \
    \       return 3;\n    }\n    if ($n === 6) {\n        return 5;\n    }\n    if\
    \ ($n === 7) {\n        return 9;\n    }\n    if ($n === 8) {\n        return\
    \ 13;\n    }\n    if ($n === 9) {\n        return 17;\n    }\n    if ($n === 10)\
    \ {\n        return 21;\n    }\n    if ($n === 11) {\n        return 25;\n   \
    \ }\n    if ($n === 12) {\n        return 29;\n    }\n    if ($n === 13) {\n \
    \       return 33;\n    }\n    if ($n === 14) {\n        return 37;\n    }\n \
    \   if ($n === 15) {\n        return 41;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9pdqlu6.php:71\n\
    Stack trace:\n#0 /tmp/tmpj9pdqlu6.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpj9pdqlu6.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // write your function here\n\
    \    if ($n <= 1) return $n;\n    return fib4(4 * $n) - fib4(3 * $n - 1) + fib4(2\
    \ * $n - 2);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThanks so much. You're a\
    \ god among men.\n<|/ c |>\n<| a dscore=0 tags=php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2dei0s5j.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0)\n        return\
    \ 0;\n    if ($n <= 1)\n        return $n;\n    if ($n == 2)\n        return 2;\n\
    \    if ($n == 3)\n        return 0;\n    return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoukvaocn.php:32\n\
    Stack trace:\n#0 /tmp/tmpoukvaocn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpoukvaocn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 4) {\n    return\
    \ $n;\n  } else if ($n >= $n-3) {\n    return fib4($n-3) + fib4($n-2) + fib4($n-1)\
    \ + fib4($n);\n  } else {\n    return fib4($n-4) + fib4($n-3) + fib4($n-2) + fib4($n-1)\
    \ + fib4($n);\n  }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ 0;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 1;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    $x\
    \ = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    return $x;\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zk0wbks.php:36\n\
    Stack trace:\n#0 /tmp/tmp6zk0wbks.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6zk0wbks.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 4) { return 0;\
    \ }\n    if ($n === 5) { return 1; }\n    if ($n === 6) { return 2; }\n    return\
    \ fib4(4 - $n) + fib4(5 - $n) + fib4(6 - $n) + fib4(7 - $n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpay3j6eb3.php:26\n\
    Stack trace:\n#0 /tmp/tmpay3j6eb3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpay3j6eb3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1)\n        return\
    \ $n;\n    return fib4(fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4));\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp366tom6z.php:26\n\
    Stack trace:\n#0 /tmp/tmp366tom6z.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp366tom6z.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $x = 1;\n    $y = 1;\n \
    \   $z = 1;\n    for($i = $n; $i > 0; $i--) {\n        $x = $x + $y;\n       \
    \ $y = $y + $z;\n        $z = $z + $i;\n    }\n    return $x;\n}\n$fib = array(1,2,3,4,5);\n\
    $fib2 = array();\nfor($i = 1; $i <= count($fib); $i++) {\n    $fib2[] = fib4($i);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8ee1fpz.php:36\n\
    Stack trace:\n#0 /tmp/tmpd8ee1fpz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpd8ee1fpz.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $n = abs($n);\n  $sum = 0;\n\
    \  for ($i = 5; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxi8f6fv.php:29\n\
    Stack trace:\n#0 /tmp/tmpwxi8f6fv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwxi8f6fv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) return $n;\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6j60of_.php:24\n\
    Stack trace:\n#0 /tmp/tmpf6j60of_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpf6j60of_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 4) return 0;\n\
    \  if ($n === 5) return 4;\n  if ($n === 6) return 8;\n  if ($n === 7) return\
    \ 14;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwysssjxq.php:27\n\
    Stack trace:\n#0 /tmp/tmpwysssjxq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwysssjxq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return $n;\n\
    \    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw97x3hr6.php:25\n\
    Stack trace:\n#0 /tmp/tmpw97x3hr6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw97x3hr6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n<0) return 0;\n   \
    \ return fib4($n-1)+fib4($n-2)+fib4($n-3)+fib4($n-4); // Write your code here\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh5fbjaj.php:24\n\
    Stack trace:\n#0 /tmp/tmpdh5fbjaj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdh5fbjaj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn 0;\n}\n\n/**\n * fib5\n\
    \ *\n * Compute the last element of the Fibbonacci number sequence\n * fib5(0)\
    \ should return 0\n * fib5(1) should return 0\n * fib5(2) should return 1\n *\
    \ fib5(3) should return 1\n * fib5(n) should return fib5(n-1) + fib5(n-2) + fib5(n-3)\n\
    \ * that is, fib5(n) = fib5(n-1) + fib5(n-2) + fib5(n-3)\n * fib5(n) = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3)\n * fib5(n) = fib3(n-1) + fib3(n-2) + fib3(n-3)\n *\
    \ fib5(n) = fib2(n-1) + fib2(n-2) + fib2(n-3)\n * fib5(n) = fib1(n-1) + fib1(n-2)\
    \ + fib1(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1)\
    \ + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n *\
    \ fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2)\
    \ + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1)\
    \ + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n *\
    \ fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2)\
    \ + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1)\
    \ + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n *\
    \ fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2)\
    \ + fib0(n-3)\n * fib5(n) = fib0(n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 19 in /tmp/tmp8jqqq65m.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = 0;\n    if ($n ==\
    \ 0) $fib = 0;\n    if ($n == 1) $fib = 0;\n    if ($n == 2) $fib = 2;\n    if\
    \ ($n == 3) $fib = 0;\n    if ($n == 4) $fib = 2;\n    if ($n == 5) $fib = 4;\n\
    \    if ($n == 6) $fib = 8;\n    if ($n == 7) $fib = 14;\n    return $fib;\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqziis5r.php:34\n\
    Stack trace:\n#0 /tmp/tmpoqziis5r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoqziis5r.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26n7h9so.php:27\n\
    Stack trace:\n#0 /tmp/tmp26n7h9so.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp26n7h9so.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 1;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\nThe\
    \ above example is quite simple, but it's also quite easy to extend to any other\
    \ sequence you want. For example, here's how you could compute fibonacci using\
    \ the Fibbonacci sequence:\n<code>\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp81sz_aq.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n<=1) {\n    return 0;\n\
    \  }\n  if ($n===3) {\n    return 1;\n  }\n  if ($n===6) {\n    return 4;\n  }\n\
    \  return fib4($n-2) + fib4($n-3) + fib4($n-4); \n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx55vqwgo.php:33\n\
    Stack trace:\n#0 /tmp/tmpx55vqwgo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx55vqwgo.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 5) {\n\t\treturn\
    \ $n;\n\t}\n\t$fib4 = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    \treturn $fib4;\n}\n$result = fib4(4); // fib4(4)\necho $result;\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep139bc8.php:29\n\
    Stack trace:\n#0 /tmp/tmpep139bc8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpep139bc8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $x = 0;\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $x += $i;\n  }\n  return $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5j80yz2t.php:28\n\
    Stack trace:\n#0 /tmp/tmp5j80yz2t.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5j80yz2t.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return $n % 2 === 0 ? 0 :\
    \ $n % 3 === 0 ? fib4(3*$n - 1) +  fib4(3*$n - 2) +  fib4(3*$n - 3) + fib4(3*$n\
    \ - 4) : fib4(3*$n - 2) + fib4(3*$n - 3) + fib4(3*$n - 4) + fib4(3*$n - 5);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmplwogv4n5.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n === 1) {\n\t\treturn 1;\n\t} else if ($n === 2) {\n\t\t\
    return 2;\n\t} else if ($n === 3) {\n\t\treturn 1;\n\t} else if ($n === 4) {\n\
    \t\treturn 1;\n\t} else if ($n === 5) {\n\t\treturn 4;\n\t} else if ($n === 6)\
    \ {\n\t\treturn 8;\n\t} else if ($n === 7) {\n\t\treturn 14;\n\t} else {\n\t\t\
    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\t}\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnru4ujr.php:42\n\
    Stack trace:\n#0 /tmp/tmpgnru4ujr.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpgnru4ujr.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // write your code in PHP7\n\
    \  return $n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrins11u.php:25\n\
    Stack trace:\n#0 /tmp/tmpcrins11u.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcrins11u.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n==0 || $n==1 || $n==2\
    \ || $n==3)\n      return $n;\n    else\n      return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez4cprps.php:26\n\
    Stack trace:\n#0 /tmp/tmpez4cprps.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpez4cprps.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $res = $n;\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $res = $res + $i;\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_opmzg5.php:28\n\
    Stack trace:\n#0 /tmp/tmp6_opmzg5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6_opmzg5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n===0) {\n        return\
    \ 0;\n    }\n    if ($n===1) {\n        return 0;\n    }\n    if ($n===2) {\n\
    \        return 2;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp3ictutno.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) return 0;\n\
    \    if ($n === 1) return 0;\n    if ($n === 2) return 2;\n    if ($n === 3) return\
    \ 0;\n    if ($n === 4) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_d2l04t.php:28\n\
    Stack trace:\n#0 /tmp/tmp8_d2l04t.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8_d2l04t.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return fib3($n) + fib2($n)\
    \ + fib1($n);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib3() in /tmp/tmp8gslwpq0.php:16\n\
    Stack trace:\n#0 /tmp/tmp8gslwpq0.php(20): fib4(5)\n#1 /tmp/tmp8gslwpq0.php(24):\
    \ candidate(5)\n#2 /tmp/tmp8gslwpq0.php(30): test()\n#3 {main}\n  thrown in /tmp/tmp8gslwpq0.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn $n <= 3 ? $n : $fib4(n\
    \ - 1) + $fib4(n - 2) + $fib4(n - 3) + $fib4(n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmptjap7atd.php:16\n\
    Stack trace:\n#0 /tmp/tmptjap7atd.php(19): fib4(5)\n#1 /tmp/tmptjap7atd.php(23):\
    \ candidate(5)\n#2 /tmp/tmptjap7atd.php(29): test()\n#3 {main}\n  thrown in /tmp/tmptjap7atd.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 4) return $n;\n\
    \    else return fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcc_00zz8.php:24\n\
    Stack trace:\n#0 /tmp/tmpcc_00zz8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcc_00zz8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2) {\n    return\
    \ 0;\n  }\n  if ($n < 4) {\n    return fib4($n-1) + fib4($n-2);\n  }\n  return\
    \ fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bwwsyns.php:30\n\
    Stack trace:\n#0 /tmp/tmp5bwwsyns.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5bwwsyns.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) return 0;\n \
    \ if ($n == 1) return 0;\n  if ($n == 2) return 2;\n  if ($n == 3) return 0;\n\
    \  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0) throw new Exception(\"\
    fib4 number sequence start at 0\");\n\tif ($n === 0) return 0;\n\tif ($n === 1)\
    \ return 0;\n\tif ($n === 2) return 2;\n\tif ($n === 3) return 0;\n\tif ($n ===\
    \ 4) return 4;\n\t\n\treturn fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fe5sxxk.php:31\n\
    Stack trace:\n#0 /tmp/tmp6fe5sxxk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6fe5sxxk.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n   if ($n === 0)\n      return\
    \ 0;\n   if ($n === 1)\n      return 1;\n   if ($n === 2)\n      return 2;\n \
    \  if ($n === 3)\n      return 0;\n   if ($n === 4)\n      return 1;\n   return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmx5ynoom.php:34\n\
    Stack trace:\n#0 /tmp/tmpmx5ynoom.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmx5ynoom.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2) return $n;\n \
    \ return fib4(fib4($n-1) + fib4($n-2)) + fib4($n-3) + fib4($n-4) ;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep682o5_.php:25\n\
    Stack trace:\n#0 /tmp/tmpep682o5_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpep682o5_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n\n    if ($n == 1) {\n        return 0;\n    }\n\n    if ($n\
    \ == 2) {\n        return 2;\n    }\n\n    if ($n == 3) {\n        return 0;\n\
    \    }\n\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much, my friend, for the\
    \ very clear and helpful explanation! I really appreciate it!\n<|/ c |>\n<| a\
    \ tags=functional-programming,php,recursion |>\nAnother possible solution:\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpimzzsyj6.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0)\n\t\treturn 0;\n\
    \tif ($n == 1)\n\t\treturn 1;\n\tif ($n == 2)\n\t\treturn 2;\n\tif ($n == 3)\n\
    \t\treturn 0;\n\tif ($n > 3)\n\t\treturn fib4($n - 4) + fib4($n - 3) + fib4($n\
    \ - 2) + fib4($n - 1);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4dxglbw.php:33\n\
    Stack trace:\n#0 /tmp/tmpg4dxglbw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg4dxglbw.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n\n    if ($n === 1) {\n        return 0;\n    }\n\n    if\
    \ ($n === 2) {\n        return 2;\n    }\n\n    if ($n === 3) {\n        return\
    \ 0;\n    }\n\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n===0) return 0;\n  if\
    \ ($n===1) return 1;\n  if ($n===2) return 2;\n  return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpy79f5djs.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    } else if ($n === 1) {\n        return 1;\n    } else if ($n\
    \ === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n\
    \    } else if ($n % 2 === 0) {\n        return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n    } else if ($n % 2 === 1) {\n        return\
    \ fib4($n - 1) + fib4($n - 3) + fib4($n - 4);\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeswpp2ks.php:35\n\
    Stack trace:\n#0 /tmp/tmpeswpp2ks.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpeswpp2ks.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = 4;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $fib += $fib + ($fib + ($fib + ($fib + ($fib -\
    \ 1)))));\n    }\n    return $fib;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp40vszd_d.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe fibbonacci\
    \ sequence is defined as: `fib(0) = 0`, `fib(1) = 1`, `fib(2) = 1`, `fib(3) =\
    \ 2`, `fib(n) = 2^n - fib(n - 1)`, where `n` > 0. For a large `n`, this will run\
    \ into an infinite loop if you call it recursively, e.g. `fib(100)` will never\
    \ end for n = 100. You need to change the function to take a parameter and use\
    \ that parameter instead.\n<|/ c |>\n<| c |>\nI edited my answer to include the\
    \ fibonacci sequence definition.\n<|/ c |>\n<| a tags=php,algorithm dscore=1 |>\n\
    In PHP you can use the following code to get the first n fibonacci numbers:\n\
    <code>\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyh_xuxsk.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $num = 0;\n    for($i =\
    \ $n; $i >= 1; $i--){\n        $num += $i;\n    }\n    return $num;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2opttxm.php:28\n\
    Stack trace:\n#0 /tmp/tmpa2opttxm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpa2opttxm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 4) return 0;\n\t\
    if ($n == 0) return 0;\n\tif ($n == 1) return 1;\n\treturn fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdtdtfi9.php:27\n\
    Stack trace:\n#0 /tmp/tmpmdtdtfi9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmdtdtfi9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0 || $n == 1) {\n\
    \t\treturn $n;\n\t} else if ($n == 2) {\n\t\treturn 2;\n\t} else if ($n == 3)\
    \ {\n\t\treturn 0;\n\t} else {\n\t\treturn fib4(4) + fib4(5) + fib4(6) + fib4(7);\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 1) {\n        return\
    \ 0;\n    }\n    if ($n < 2) {\n        return 0;\n    }\n    if ($n < 3) {\n\
    \        return 2;\n    }\n    if ($n < 4) {\n        return 0;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ 0;\n    } else {\n        return fib4($n - 4) + fib4($n - 3) + fib4($n - 2)\
    \ + fib4($n - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkk4rooiv.php:28\n\
    Stack trace:\n#0 /tmp/tmpkk4rooiv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkk4rooiv.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n</code>\nAnd here's the solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjwbitv85.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return 0;\n    }\n    return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n</code>\nSolution 2:\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpukjx636_.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n === 1) return 0;\n    if ($n === 2) return 2;\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\nSolution II:\
    \ Recursion\nIf you look at the code above you'll see that it's essentially the\
    \ same as the fibbonaci function defined above.  But here's a recursive solution\
    \ because fibbonaci involves calling itself, which can be very useful in writing\
    \ recursive solutions.  \n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4w2lho6f.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array();\n    $fib[0]\
    \ = 0;\n    $fib[1] = 0;\n    $fib[2] = 2;\n    $fib[3] = 0;\n    for ($i = 0;\
    \ $i <= $n; $i++) {\n        $fib[$i + 4] = $fib[$i] + $fib[$i - 2] + $fib[$i\
    \ - 3] + $fib[$i - 4];\n    }\n    return $fib[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzicge4a4.php:32\n\
    Stack trace:\n#0 /tmp/tmpzicge4a4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzicge4a4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // BASE CASE\n    if ($n\
    \ === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n\
    \    }\n    if ($n === 2) {\n        return 2;\n    }\n\n    // Recursive Case\n\
    \    $result = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\n\
    \    return $result;\n}\n</code>\nThe result of the fib4 function above is cached\
    \ by PHP's garbage collector, so there is no need for you to write code that caches\
    \ it.  You can run the above code in a browser without installing any additional\
    \ modules.\n<|/ a tags=php,php-internals,php-extension dscore=1 |>\n<| c |>\n\
    Thanks! I didn't know that PHP's garbage collector would take care of such situation.\
    \ I was also able to see that $fib4 variable holds reference to fib4 function,\
    \ which I did not know about and I thought PHP garbage collector would take care\
    \ of it.\n<|/ c |>\n<| a dscore=0 |>\nI was able to do this by implementing fib4\
    \ function in C, as described in this post: http://codereview.stackexchange.com/questions/17205/fibonacci-number-in-php-without-using-recursion.\
    \ \nI then added fib4 function to my PHP-FPM module in PHP-FPM's php.ini file,\
    \ as follows:\n<code>\nextension=php-fpm.so\n</code>\nAnd I compiled PHP 5.5.9\
    \ with --enable-fib4 option (my module name is php-fib4).\nThen I created my fib4\
    \ function as follows:\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv0emx6lg.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Return the fib4 number\
    \ sequence value for the n'th element in the Fibbonacci sequnece.\n    if ($n\
    \ < 4) {\n        return 0;\n    }\n    if ($n === 4) {\n        return 4;\n \
    \   }\n    if ($n === 5) {\n        return 4;\n    }\n    return fib4($n - 4)\
    \ + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppd53dy3x.php:35\n\
    Stack trace:\n#0 /tmp/tmppd53dy3x.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppd53dy3x.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1)\n        return\
    \ $n;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw141vchd.php:26\n\
    Stack trace:\n#0 /tmp/tmpw141vchd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw141vchd.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 2) return $n;\n    return fib4($n-1) + fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9e92cnx.php:25\n\
    Stack trace:\n#0 /tmp/tmpm9e92cnx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm9e92cnx.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$result = 1;\n\tfor ($i =\
    \ 0; $i <= $n; $i++) {\n\t\t$result = $result + $i;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg13qfazh.php:28\n\
    Stack trace:\n#0 /tmp/tmpg13qfazh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpg13qfazh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpk8u34lic.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 1;\n\t$b = 2;\n\t$c =\
    \ 3;\n\t$d = 4;\n\t$result = $n;\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t$result\
    \ = $a + $b + $c + $d;\n\t\t$c = $d;\n\t\t$d = $b;\n\t\t$b = $a;\n\t\t$a = $result;\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1nagdot.php:36\n\
    Stack trace:\n#0 /tmp/tmpf1nagdot.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpf1nagdot.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return fib5($n, 0);\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib5() in /tmp/tmpu34dukr0.php:16\n\
    Stack trace:\n#0 /tmp/tmpu34dukr0.php(20): fib4(5)\n#1 /tmp/tmpu34dukr0.php(24):\
    \ candidate(5)\n#2 /tmp/tmpu34dukr0.php(30): test()\n#3 {main}\n  thrown in /tmp/tmpu34dukr0.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return ($n == 1) ? 0 : ($n\
    \ == 2) ? 1 : fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) {\n    return\
    \ 0;\n  } else if ($n == 1) {\n    return 1;\n  } else if ($n == 2) {\n    return\
    \ 2;\n  } else if ($n == 3) {\n    return 0;\n  } else {\n    return fib4($n -\
    \ 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nazh2ef.php:33\n\
    Stack trace:\n#0 /tmp/tmp7nazh2ef.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7nazh2ef.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n<=1) return 0;\n \
    \   return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrd97pna.php:24\n\
    Stack trace:\n#0 /tmp/tmprrd97pna.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprrd97pna.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    } elseif ($n === 1) {\n        return 1;\n    } elseif ($n ===\
    \ 2) {\n        return 2;\n    } elseif ($n === 3) {\n        return 0;\n    }\
    \ elseif ($n === 4) {\n        return 4;\n    } elseif ($n === 5) {\n        return\
    \ 0;\n    } elseif ($n === 6) {\n        return 8;\n    } elseif ($n === 7) {\n\
    \        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2)\
    \ + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahgrvk7t.php:42\n\
    Stack trace:\n#0 /tmp/tmpahgrvk7t.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpahgrvk7t.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oqq4hrc.php:27\n\
    Stack trace:\n#0 /tmp/tmp7oqq4hrc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7oqq4hrc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 1) return $n;\n\
    \  $fib4 = fib4($n - 1);\n  return $fib4 + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcqw1ru1.php:25\n\
    Stack trace:\n#0 /tmp/tmpbcqw1ru1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbcqw1ru1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) {\n    return\
    \ 0;\n  } else if ($n == 1) {\n    return 0;\n  } else if ($n == 2) {\n    return\
    \ 2;\n  } else if ($n == 3) {\n    return 0;\n  } else if ($n == 4) {\n    return\
    \ 4;\n  } else if ($n == 5) {\n    return 8;\n  } else if ($n == 6) {\n    return\
    \ 14;\n  } else if ($n == 7) {\n    return 28;\n  } else if ($n == 8) {\n    return\
    \ 56;\n  } else if ($n == 9) {\n    return 90;\n  } else if ($n == 10) {\n   \
    \ return 144;\n  } else if ($n == 11) {\n    return 210;\n  } else if ($n == 12)\
    \ {\n    return 296;\n  } else if ($n == 13) {\n    return 464;\n  } else if ($n\
    \ == 14) {\n    return 672;\n  } else if ($n == 15) {\n    return 928;\n  } else\
    \ if ($n == 16) {\n    return 1212;\n  } else if ($n == 17) {\n    return 1560;\n\
    \  } else if ($n == 18) {\n    return 1908;\n  } else if ($n == 19) {\n    return\
    \ 2324;\n  } else if ($n == 20) {\n    return 2784;\n  } else if ($n == 21) {\n\
    \    return 3260;\n  } else if ($n == 22) {\n    return 3728;\n  } else if ($n\
    \ == 23) {\n    return 4180;\n  } else if ($n == 24) {\n    return 4684;\n  }\
    \ else if ($n == 25) {\n    return 5144;\n  } else if ($n == 26) {\n    return\
    \ 5680;\n  } else if ($n == 27) {\n    return 6168;\n  } else if ($n == 28) {\n\
    \    return 6752;\n  } else if ($n == 29) {\n    return 8164;\n  } else if ($n\
    \ == 30) {\n    return 9872;\n  } else if ($n == 31) {\n    return 12748;\n  }\
    \ else if ($n == 32) {\n    return 15840;\n  } else if ($n == 33) {\n    return\
    \ 19060;\n  } else if ($n == 34) {\n    return 23228;\n  } else if ($n == 35)\
    \ {\n    return 27828;\n  } else if ($n == 36) {\n    return 33560;\n  } else\
    \ if ($n == 37) {\n    return 41384;\n  } else if ($n == 38) {\n    return 48880;\n\
    \  } else if ($n == 39) {\n    return 55344;\n  } else if ($n == 40) {\n    return\
    \ 61208;\n  } else if ($n == 41) {\n    return 67616;\n  } else if ($n == 42)\
    \ {\n    return 82784;\n  } else if ($n == 43) {\n    return 99424;\n  } else\
    \ if ($n == 44) {\n    return 122084;\n  } else if ($n == 45) {\n    return 156704;\n\
    \  } else if ($n == 46) {\n    return 193516;\n  } else if ($n == 47) {\n    return\
    \ 237692;\n  } else if ($n == 48) {\n    return 282100;;\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp55ikxy1.php on line 126\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 4) {\n\t\treturn\
    \ $n;\n\t}\n\t$fib4 = array(\n\t\t0 => 0,\n\t\t1 => 0,\n\t\t2 => 2,\n\t\t3 =>\
    \ 0\n\t);\n\t$fib4[$n] = fib4($n-1) + fib4($n-2)+fib4($n-3)+fib4($n-4);\n\treturn\
    \ $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpog574yu8.php:34\n\
    Stack trace:\n#0 /tmp/tmpog574yu8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpog574yu8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn\
    \ 2;\n\t} else if ($n == 3) {\n\t\treturn 0;\n\t}\n\treturn fib4($n-1) + fib4($n-2)+\
    \ fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Return an empty string\
    \ if n is 0 or less.\n    if ($n < 1) {\n        return '';\n    }\n    if ($n\
    \ === 1) {\n        return '0';\n    }\n    $a = fib4($n - 1);\n    $b = fib4($n\
    \ - 2);\n    $c = fib4($n - 3);\n    $d = fib4($n - 4);\n    return $a . $b .\
    \ $c . $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvwyocpz.php:35\n\
    Stack trace:\n#0 /tmp/tmpbvwyocpz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbvwyocpz.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpx730itio.php on line 20\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpx730itio.php on line 20\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpx730itio.php on line 20\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpx730itio.php on line 20\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpx730itio.php on line 20\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpx730itio.php on line 20\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpx730itio.php\
    \ on line 20\n\nWarning: A non-numeric value encountered in /tmp/tmpx730itio.php\
    \ on line 20\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpx730itio.php on line 20\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpx730itio.php on line 20\n\
    \nWarning: Use of undefined constant n - assumed 'n' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmpx730itio.php on line 20\n\nWarning: A\
    \ non-numeric value encountered in /tmp/tmpx730itio.php on line 20\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpx730itio.php on line 20\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpx730itio.php on line 20\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpx730itio.php on line 20\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpx730itio.php on line 20\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpx730itio.php\
    \ on line 20\n\nWarning: A non-numeric value encountered in /tmp/tmpx730itio.php\
    \ on line 20\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a fut"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n>4?$n-4-fib4($n-3)-fib4($n-2)-fib4($n-1):0;\n\
    }\n</code>\n<|/ a tags=php,fibonacci dscore=4 |>\n<| c |>\nNice! But I suppose\
    \ that recursion is faster than looping ;)\n<|/ c |>\n<| c |>\n+1 but I think\
    \ you should fix your return statements, in PHP < 5.3 it returns a double and\
    \ you should be returning a float.\n<|/ c |>\n<| a tags=php,fibonacci |>\nHere's\
    \ another solution with recursive function call.\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptwh6xlsp.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\n/**\n * Fibonacci number in linear time\n */\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0g8y9ch.php:31\n\
    Stack trace:\n#0 /tmp/tmpe0g8y9ch.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe0g8y9ch.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4); \n}\n</code>\n<|/ q tags=php,algorithm,fibonacci\
    \ |>\n<| c |>\nTry it on smaller numbers. Maybe it's just too slow to calculate\
    \ all numbers up to some million?\n<|/ c |>\n<| c |>\nThe answer will only be\
    \ correct for numbers up to a million. Try it on smaller numbers: fib4(5) is 4.\n\
    <|/ c |>\n<| c |>\nYeah I'm just guessing but maybe it is just too slow to calculate\
    \ all numbers. You can run it on paper with some smaller numbers and see if it\
    \ calculates all in under a second. Maybe the number sequence is too large to\
    \ be calculated quickly with PHP but a good compiler could probably optimize it\
    \ for you.\n<|/ c |>\n<| c |>\nYour recursive approach seems a bit strange. I\
    \ wouldn't expect this to work as intended, but if you run it on paper with small\
    \ numbers, it should work fine. You're not actually calling the function recursively,\
    \ you're just assigning values to variables.\n<|/ c |>\n<| c |>\nHave you considered\
    \ using a faster function? [link](http://stackoverflow.com/questions/43981/fib4-sequence-in-php)\n\
    <|/ c |>\n<| a dscore=2 |>\nI tested the code with PHP's microtime function, and\
    \ it works as expected:\n<code>\n$start = microtime(true);\nfib4(100);\necho \"\
    took \".(microtime(true)-$start).\" seconds\\n\";\n</code>\nResults:\n<code>\n\
    took 0.061379 seconds\n</code>\nPHP Version 5.3.2\nEDIT\nI modified the code as\
    \ follows, it works much faster.\n<code>\n<?php\nclass Fib4 {\n    public static\
    \ function fib($n) {\n        if ($n < 2) return $n;\n        $r0 = self::fib($n-2);\n\
    \        $r1 = self::fib($n-1);\n        return $r0 + $r1 + $n;\n    }\n}\n\n\
    echo \"The 100th number is \".Fib4::fib(100);\necho \"\\n\";\necho \"The 1000th\
    \ number is \".Fib4::fib(1000);\necho \"\\n\";\necho \"The 10000th number is \"\
    .Fib4::fib(10000);\necho \"\\n\";\necho \"The 100000th number is \".Fib4::fib(100000);\n\
    echo \"\\n\";\necho \"The 1000000th number is \".Fib4::fib(1000000);\necho \"\\\
    n\";\necho \"The 10000005th number is \nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt063gjy5.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 0) {\n    return\
    \ 0;\n  } else if ($n === 1) {\n    return 1;\n  } else if ($n === 2) {\n    return\
    \ 2;\n  } else if ($n === 3) {\n    return 0;\n  } else {\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazbx1lw3.php:33\n\
    Stack trace:\n#0 /tmp/tmpazbx1lw3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpazbx1lw3.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bacw_u6.php:27\n\
    Stack trace:\n#0 /tmp/tmp_bacw_u6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_bacw_u6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return 0;\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n\
    class Fib6 {\n    function fib6($n) {\n        if ($n < 4) return 0;\n       \
    \ if ($n == 1) return 1;\n        return fib6($n - 1) + fib6($n - 2) + fib6($n\
    \ - 3) + fib6($n - 4) + fib6($n - 5);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptylsn7eh.php:33\n\
    Stack trace:\n#0 /tmp/tmptylsn7eh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptylsn7eh.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn $n>1 ? fib4($n-1) +\
    \ fib4($n-2)+fib4($n-3) + fib4($n-4)+fib4($n-5) : $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f9zukc6.php:24\n\
    Stack trace:\n#0 /tmp/tmp4f9zukc6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4f9zukc6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return $n;\n\
    \    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw19md74z.php:24\n\
    Stack trace:\n#0 /tmp/tmpw19md74z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpw19md74z.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) return 0;\n\
    \    if ($n === 1) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp9i3c7qlk.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n <= 4 ? $n : fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n/**\n * Calculate the\
    \ nth term of the Fibbonacci sequence\n * fib(n) -> fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4)\n * n: the number we want to compute\n * return: the nth term of\
    \ the Fibbonacci sequence\n */\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjg0fppnl.php:30\n\
    Stack trace:\n#0 /tmp/tmpjg0fppnl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjg0fppnl.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n <= 1 ? $n : $fib4($n\
    \ - 1) + $fib4($n - 2) + $fib4($n - 3) + $fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpnz98q5ds.php:16\n\
    Stack trace:\n#0 /tmp/tmpnz98q5ds.php(19): fib4(5)\n#1 /tmp/tmpnz98q5ds.php(23):\
    \ candidate(5)\n#2 /tmp/tmpnz98q5ds.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpnz98q5ds.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n\n    $fib4 = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $fib4\
    \ += $i;\n    }\n\n    return $fib4;\n}\n\nfunction candidate(...$args) {\n  \
    \  return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmperopxss6.php:33\n\
    Stack trace:\n#0 /tmp/tmperopxss6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmperopxss6.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Your code here\n    if($n\
    \ == 0){\n        return 0;\n    }\n\n    if($n == 1){\n        return 0;\n  \
    \  }\n\n    if($n == 2){\n        return 2;\n    }\n\n    if($n == 3){\n     \
    \   return 0;\n    }\n\n    if($n == 4){\n        return 4;\n    }\n\n    if($n\
    \ == 5){\n        return 8;\n    }\n\n    if($n == 6){\n        return 10;\n \
    \   }\n\n    if($n == 7){\n        return 16;\n    }\n\n    if($n == 8){\n   \
    \     return 20;\n    }\n\n    if($n == 9){\n        return 32;\n    }\n\n   \
    \ if($n == 10){\n        return 40;\n    }\n\n    if($n == 11){\n        return\
    \ 52;\n    }\n\n    if($n == 12){\n        return 64;\n    }\n\n    if($n == 13){\n\
    \        return 81;\n    }\n\n    if($n == 14){\n        return 100;\n    }\n\n\
    \    if($n == 15){\n        return 121;\n    }\n\n    if($n == 16){\n        return\
    \ 144;\n    }\n\n    if($n == 17){\n        return 168;\n    }\n\n    if($n ==\
    \ 18){\n        return 193;\n    }\n\n    if($n == 19){\n        return 216;\n\
    \    }\n\n    if($n == 20){\n        return 241;\n    }\n\n    if($n == 21){\n\
    \        return 264;\n    }\n\n    if($n == 22){\n        return 281;\n    }\n\
    \n    if($n == 23){\n        return 300;\n    }\n\n    if($n == 24){\n       \
    \ return 323;\n    }\n\n    if($n == 25){\n        return 346;\n    }\n\n    if($n\
    \ == 26){\n        return 371;\n    }\n\n    if($n == 27){\n        return 394;\n\
    \    }\n\n    if($n == 28){\n        return 418;\n    }\n\n    if($n == 29){\n\
    \        return 443;\n    }\n\n    if($n == 30){\n        return 467;\n    }\n\
    \n    if($n == 31){\n        return 492;\n    }\n\n    if($n == 32){\n       \
    \ return 517;\n    }\n\n    if($n == 33){\n        return 542;\n    }\n\n    if($n\
    \ == 34){\n        return 566;\n    }\n\n    if($n == 35){\n        return 591;\n\
    \    }\n\n    if($n == 36){\n        return 616;\n    }\n\n    if($n == 37){\n\
    \        return 637;\n    }\n\n    if($n == 38){\n        return 660;\n    }\n\
    \n    if($n == 39){\n        return 684;\n    }\n\n    if($n == 40){\n       \
    \ return 708;\n    }\n\n    if($n == 41){\n        return 732;\n    }\n\n    if($n\
    \ == 42){\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeakn9uvh.php on line 197\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return $n == 4 ? 0 : $n ==\
    \ 3 ? 2 : ($n == 4 ? 0 : $n == 4 ? 2 : fib4($n - 1) + fib4($n - 2) + fib4($n -\
    \ 3) + fib4($n - 4));\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2) {\n    return\
    \ $n;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplev93nho.php:27\n\
    Stack trace:\n#0 /tmp/tmplev93nho.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplev93nho.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) {\n    return\
    \ 0;\n  }\n  if ($n === 1) {\n    return 1;\n  }\n  return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpvxi8z2fb.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 0) return 0;\n \
    \ return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8dhz4xr.php:25\n\
    Stack trace:\n#0 /tmp/tmpf8dhz4xr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpf8dhz4xr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n<=3) return $n;\n\t\
    else return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pf7mlsh.php:24\n\
    Stack trace:\n#0 /tmp/tmp7pf7mlsh.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7pf7mlsh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return 0;\n    }\n\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) +\
    \ fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0w44dz3.php:28\n\
    Stack trace:\n#0 /tmp/tmpf0w44dz3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpf0w44dz3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) {\n    return\
    \ 0;\n  } else if ($n === 1) {\n    return 1;\n  } else if ($n === 2) {\n    return\
    \ 2;\n  } else if ($n === 3) {\n    return 0;\n  } else {\n    $fib = fib4($n\
    \ - 1);\n    return $fib + $fib + $fib;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1cuhr1x8.php:34\n\
    Stack trace:\n#0 /tmp/tmp1cuhr1x8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1cuhr1x8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 1;\n    if ($n == 2) return 2;\n    if ($n == 3) return\
    \ 0;\n    if ($n == $n - 1) return fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0eba8hh.php:28\n\
    Stack trace:\n#0 /tmp/tmph0eba8hh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph0eba8hh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // Make sure the number passed\
    \ is valid\n  if ($n < 0 || $n > 9) {\n    return false;\n  }\n  // If n < 4,\
    \ return 0\n  if ($n < 4) {\n    return 0;\n  }\n  // If n is greater than 4,\
    \ return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  return fib4($n - 4)\
    \ + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps166krki.php:33\n\
    Stack trace:\n#0 /tmp/tmps166krki.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps166krki.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // TODO: Your code here\n\
    \    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return\
    \ 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n\
    \        return 0;\n    } else if ($n == 4) {\n        return 1;\n    }\n\n  \
    \  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxe6vuzx.php:37\n\
    Stack trace:\n#0 /tmp/tmpdxe6vuzx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdxe6vuzx.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 4) return $n;\n\t\
    elseif ($n % 2 == 0) return fib4($n-1) + fib4($n-3);\n\telseif ($n % 3 == 0) return\
    \ fib4($n-2) + fib4($n-5);\n\telsereturn fib4($n-1) + fib4($n-3) + fib4($n-5);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp036c_oi5.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0)\n        return\
    \ 0;\n    if ($n === 1)\n        return 1;\n    if ($n === 2)\n        return\
    \ 2;\n    if ($n === 3)\n        return 0;\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n   \
    \ return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rjfxbyi.php:31\n\
    Stack trace:\n#0 /tmp/tmp5rjfxbyi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5rjfxbyi.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4Array = array(0,0,0,0,0,0,0,0,0,0);\n\
    \    if($n<0) return $fib4Array[abs($n)];\n    if($n==0) return 0;\n    if($n==1)\
    \ return 1;\n    if($n==2) return 2;\n    for($i=3;$i<=$n;$i++)\n    {\n     \
    \   $fib4Array[]=$fib4Array[$i-1]+$fib4Array[$i-2]+$fib4Array[$i-3]+$fib4Array[$i-4];\n\
    \    }\n    return $fib4Array[$n];\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps__2k2ym.php:32\n\
    Stack trace:\n#0 /tmp/tmps__2k2ym.php(38): test()\n#1 {main}\n  thrown in /tmp/tmps__2k2ym.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n === 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n === 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpbmnvsu_i.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return $n;\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpwn3esmdf.php on line 17\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpwn3esmdf.php on line 17\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpwn3esmdf.php on line 17\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpwn3esmdf.php on line 17\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpwn3esmdf.php on line 17\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpwn3esmdf.php on line 17\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpwn3esmdf.php\
    \ on line 17\n\nWarning: A non-numeric value encountered in /tmp/tmpwn3esmdf.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwn3esmdf.php:25\n\
    Stack trace:\n#0 /tmp/tmpwn3esmdf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwn3esmdf.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n==0 ? 0 : fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4) ;\n}\necho fib4(5), \"\\n\";\necho fib4(6),\
    \ \"\\n\";\necho fib4(7), \"\\n\";\n</code>\nThis was a fun problem to write as\
    \ I wasn't too sure how to use the recursive function I was given.\nNow that you\
    \ have the function, how do you compute it? Well, first we need to know what that\
    \ function does mathematically. Here's an example:\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkf3_qfla.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n == 0 ? 0 : fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpwk78ttfd.php on line 16\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpwk78ttfd.php on line 16\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpwk78ttfd.php\
    \ on line 16\n\nWarning: A non-numeric value encountered in /tmp/tmpwk78ttfd.php\
    \ on line 16\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpwk78ttfd.php on line 16\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpwk78ttfd.php on line 16\n\
    \nWarning: Use of undefined constant n - assumed 'n' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: A\
    \ non-numeric value encountered in /tmp/tmpwk78ttfd.php on line 16\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpwk78ttfd.php on line 16\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpwk78ttfd.php\
    \ on line 16\n\nWarning: A non-numeric value encountered in /tmp/tmpwk78ttfd.php\
    \ on line 16\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a fut"
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n === 0) {\n    return\
    \ 0;\n  }\n  if ($n === 1) {\n    return 1;\n  }\n  return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpmdhm3hys.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n==0?0:$n==1?1:fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4) ;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) return 0;\n \
    \ return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0)\n        return\
    \ 0;\n    if ($n == 1)\n        return 1;\n    if ($n == 2)\n        return 2;\n\
    \    if ($n == 3) {\n        return 3;\n    }\n    if ($n == 4)\n        return\
    \ 4;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nclass Fib4 {\n    public function __construct($n) {\n        $this->n = $n;\n\
    \    }\n\n    public function fib4() {\n        return fib4($this->n);\n    }\n\
    }\n\n$fib = new Fib4(5);\necho $fib->fib4(); // 4\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc66sw79v.php:48\n\
    Stack trace:\n#0 /tmp/tmpc66sw79v.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpc66sw79v.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0)\n        return\
    \ 0;\n    if ($n == 1)\n        return 0;\n    return fib4($n - 1) + fib4($n -\
    \ 2) + fib4($n - 3) + fib4($n - 4);\n}\n$fibo = $fib4($n);\necho \"$fibo\\n\"\
    ;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpj9eu99al.php:22\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpj9eu99al.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 4) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp149amh0m.php:26\n\
    Stack trace:\n#0 /tmp/tmp149amh0m.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp149amh0m.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2) {\n    return\
    \ 0;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqmij4xv.php:27\n\
    Stack trace:\n#0 /tmp/tmpcqmij4xv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcqmij4xv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$numbers = array(1,2,4,8);\n\
    \tfor ($i = $n; $i > 1; $i--) {\n\t\t$numbers[] = $numbers[$i-1] + $numbers[$i-2]\
    \ + $numbers[$i-3] + $numbers[$i-4];\n\t}\n\treturn $numbers[$n-1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1766ei9k.php:28\n\
    Stack trace:\n#0 /tmp/tmp1766ei9k.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1766ei9k.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) return 0;\n\
    \    if ($n < 4) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n -\
    \ 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9588fhy.php:26\n\
    Stack trace:\n#0 /tmp/tmps9588fhy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps9588fhy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n == 4 ? $n : $n\
    \ + fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ 0;\n    } elseif ($n <= 2) {\n        return 1;\n    } elseif ($n <= 6) {\n\
    \        return 2;\n    } elseif ($n <= 8) {\n        return 3;\n    } else {\n\
    \        return fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp905j4k0_.php:34\n\
    Stack trace:\n#0 /tmp/tmp905j4k0_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp905j4k0_.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return ($n > 1) ? fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4) : $n;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0jdpljv.php:23\n\
    Stack trace:\n#0 /tmp/tmpw0jdpljv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw0jdpljv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } elseif ($n == 1) {\n        return 1;\n    } else {\n     \
    \   return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib=array(\n        0=>0,\n\
    \        1=>0,\n        2=>0,\n        3=>0,\n    );\n    for($i=4;$i<=$n;$i++)\n\
    \        $fib[$i]=$fib[$i-1]+$fib[$i-2]+$fib[$i-3]+$fib[$i-4];\n    return $fib[$n];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46nflo6p.php:32\n\
    Stack trace:\n#0 /tmp/tmp46nflo6p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp46nflo6p.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = $b = 1;\n    $fib4_array\
    \ = array(0);\n    for ($i = 0; $i < $n; ++$i) {\n        $temp = $a + $b;\n \
    \       $fib4_array[] = $temp;\n        $a = $b;\n        $b = $temp;\n    }\n\
    \    return $fib4_array[$n];\n}\n</code>\n<|/ a tags=php,fibonacci,math,fibonacci-number,algorithm\
    \ |>\n<| c |>\nYour code is in Python, not PHP\n<|/ c |>\n<| c |>\nWhat do you\
    \ mean by *not PHP*?  That Python code is a snippet from his question and appears\
    \ to produce correct results.  And yes, this is in Python too.\n<|/ c |>\n<| c\
    \ |>\nThe OP specified *not* using recursion.\n<|/ c |>\n<| c |>\nI'm sorry, I\
    \ missed that. Removed my comment to not confuse anybody.\n<|/ c |>\n<| c |>\n\
    No problem, I was just making a point of saying that it was easy to adapt this\
    \ python code to a php version.\n<|/ c |>\n<| a tags=php,fibonacci,math,fibonacci-number,algorithm\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbnmvbc27.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n==0) return 0;\n \
    \   if ($n==1) return 0;\n    if ($n==2) return 2;\n    return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3)+ fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n===0) {\n        return\
    \ 0;\n    }\n    if ($n===1) {\n        return 1;\n    }\n    return fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmprzgbl3qi.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) throw new Exception(\"\
    Negative numbers are not allowed in this program.\");\n  $fibArray = array();\n\
    \  \n  // if n is less than or equal to 0 then return 0 as the fib4 number sequence\
    \ starts at 0.\n  if ($n < 1) return 0;\n  \n  // if n is greater than or equal\
    \ to 3 then return 0 as the fib4 number sequence starts at 0.\n  if ($n >= 4)\
    \ return 0;\n  \n  // If n is between 2 and 4 then call the fib4 function with\
    \ $n - 1 as the argument and save its returned value\n  // in the array and return\
    \ the sum of the values in the array.\n  foreach (array($n - 2, $n - 3, $n - 4)\
    \ as $k) {\n    $fibArray[] = fib4($k);\n  }\n  \n  // Return the sum of the values\
    \ in the array\n  return $fibArray[0] + $fibArray[1] + $fibArray[2] + $fibArray[3];\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkefkcclf.php:39\n\
    Stack trace:\n#0 /tmp/tmpkefkcclf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkefkcclf.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6gyhbj9.php:26\n\
    Stack trace:\n#0 /tmp/tmpx6gyhbj9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx6gyhbj9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return ($n < 4) ? $n : (fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4));\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqll4chmh.php:24\n\
    Stack trace:\n#0 /tmp/tmpqll4chmh.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpqll4chmh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 1) {\n    return\
    \ $n;\n  } else {\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n  }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_irrwfd.php:28\n\
    Stack trace:\n#0 /tmp/tmpq_irrwfd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq_irrwfd.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0){\n        return\
    \ 0;\n    }\n    if ($n == 1){\n        return 0;\n    }\n    if ($n == 2){\n\
    \        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    if\
    \ ($n == 4) {\n        return 4;\n    }\n    return fib4($n-1) + fib4($n-2) +\
    \ fib4($n-3) + fib4($n-4);\n}\necho \"fib4 number: \", fib4(10), \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "fib4 number: 162\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4qr82aq.php:39\n\
    Stack trace:\n#0 /tmp/tmpw4qr82aq.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpw4qr82aq.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  return ($n<=1)?$n:fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamokebe2.php:24\n\
    Stack trace:\n#0 /tmp/tmpamokebe2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpamokebe2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 1;\n    if ($n == 2) return 2;\n    return fib4($n -\
    \ 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    } elseif ($n === 1) {\n        return 0;\n    } elseif ($n ===\
    \ 2) {\n        return 2;\n    } else {\n        return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp4_9t1o8d.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 1;\n    $b = 2;\n \
    \   $c = 1;\n    $d = 1;\n    for ($i = 0; $i <= $n; $i++) {\n        echo \"\
    $a $b $c $d $n\\n\";\n        $a = $b;\n        $b = $c;\n        $c = $d;\n \
    \       $d = $a + $b + $c + $d;\n    }\n    return $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1 2 1 1 5\n2 1 1 5 5\n1 1 5 12 5\n1 5 12 30 5\n5 12 30 77 5\n12 30 77 196\
    \ 5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fnixepy.php:35\n\
    Stack trace:\n#0 /tmp/tmp1fnixepy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1fnixepy.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    } elseif ($n <= 5) {\n        return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n$n = 7;\necho fib4($n);\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "44\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmsh3jo5.php:31\n\
    Stack trace:\n#0 /tmp/tmpnmsh3jo5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnmsh3jo5.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    return $n == 0 ? 0 : $n\
    \ == 1 ? 1 : fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    for($i = 0, $sum = 0; $i\
    \ < $n; $i++, $sum = $sum + $i);\n    return $sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxwanc9wo.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n <= 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib4($n -\
    \ 1) + fib4($n - 2);\n\t}\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhp1br4d.php:29\n\
    Stack trace:\n#0 /tmp/tmpqhp1br4d.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqhp1br4d.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 1;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmplousdg1w.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 1;\n \
    \   $sum = 0;\n    while ($n >= 0) {\n        $sum += $a;\n        $a = $b;\n\
    \        $b = $n;\n        $n--;\n    }\n    return $sum;\n}\n\n/**\n * Compute\
    \ a factorial recursively\n *\n * @param int $n\n * @return int\n */\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvd3gvwx.php:39\n\
    Stack trace:\n#0 /tmp/tmpuvd3gvwx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpuvd3gvwx.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if($n <= 0) {\n    return\
    \ 0;\n  }\n  if($n <= 3) {\n    return $n;\n  }\n  return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fa58cxu.php:30\n\
    Stack trace:\n#0 /tmp/tmp3fa58cxu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3fa58cxu.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n   if ($n <= 2) return $n;\n\
    \   return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7fl2iro.php:25\n\
    Stack trace:\n#0 /tmp/tmpn7fl2iro.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpn7fl2iro.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
