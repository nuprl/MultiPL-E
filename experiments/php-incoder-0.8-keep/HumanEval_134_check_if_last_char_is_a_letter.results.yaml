name: HumanEval_134_check_if_last_char_is_a_letter
language: php
results:
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('/\\s(?=\\\
    S)[a-zA-Z]/', $txt);\n}\n</code>\n<|/ a |>\n<| a |>\nThis question has already\
    \ been answered, but just for future reference, in case you want to use a RegEx\
    \ for this, here is an example:\n<code>\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwiw9dd7g.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('/[^a-z]+$/i',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg1qyoi3.php:20\n\
    Stack trace:\n#0 /tmp/tmpyg1qyoi3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyg1qyoi3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) == 0) {\n\
    \        return false;\n    }\n    $last_char = substr($txt, -1);\n    return\
    \ !preg_match('~[a-z]+$~i', $last_char);\n}\nfunction candidate(...$args) {\n\
    \    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_6qyio_.php:24\n\
    Stack trace:\n#0 /tmp/tmpq_6qyio_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq_6qyio_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $is_letter = preg_match('/^([a-z]+)\\\
    z/i', $txt);\n  if ($is_letter == FALSE) {\n    return FALSE;\n  }\n\n  $last_char_is_a_word\
    \ = preg_match(\n    '/([a-z]+)\\z/i',\n    $txt,\n    PREG_OFFSET_CAPTURE);\n\
    \  if ($last_char_is_a_word == FALSE) {\n    return FALSE;\n  }\n\n  $start_point\
    \ = $last_char_is_a_word['offset'][0];\n  $end_point = $last_char_is_a_word['offset'][1];\n\
    \  $last_char = $txt[$end_point-1];\n\n  return ((strlen($last_char) == 1) &&\n\
    \    ($last_char !== \"e\") &&\n    ($last_char !== \"i\") &&\n    ($last_char\
    \ !== \"o\") &&\n    ($last_char !== \"u\"));\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Only variables can be passed by reference in /tmp/tmp49ya4mml.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if ( empty($txt) ) {\n  \
    \      return false;\n    }\n    $last = substr($txt, -1, 1);\n    if ( isset($txt[$last])\
    \ ) {\n        if ( ctype_alpha($txt[$last]) ) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_i8_ilg.php:29\n\
    Stack trace:\n#0 /tmp/tmp6_i8_ilg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6_i8_ilg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (!$txt || !is_string($txt))\
    \ return false;\n    return ctype_alpha(substr($txt, -1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsq8n84di.php:21\n\
    Stack trace:\n#0 /tmp/tmpsq8n84di.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsq8n84di.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n   return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9wod0jf0.php:20\n\
    Stack trace:\n#0 /tmp/tmp9wod0jf0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9wod0jf0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  if ($txt) {\n    $txt = preg_replace('/[\\\
    s\\-_]+$/', '', $txt);\n    return preg_match('/[a-zA-Z]/', $txt);\n  }\n  return\
    \ false;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5bgpqfr.php:23\n\
    Stack trace:\n#0 /tmp/tmpf5bgpqfr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf5bgpqfr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return (preg_match(\"/^[a-z]+[a-z\
    \ ]*$/\", $txt)\n        && !preg_match(\"/^[a-z]+$/i\", $txt)\n        && !preg_match(\"\
    /^[a-z]$/i\", $txt));\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplydsy7eo.php:24\n\
    Stack trace:\n#0 /tmp/tmplydsy7eo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplydsy7eo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Your code here\n  $txt =\
    \ strtoupper($txt);\n  $words = preg_split('/\\s+/', $txt);\n  return ($words[count($words)\
    \ - 1] != '');\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcl40spr1.php:22\n\
    Stack trace:\n#0 /tmp/tmpcl40spr1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcl40spr1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match('/^[a-z]+$/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuz6yoed.php:20\n\
    Stack trace:\n#0 /tmp/tmpbuz6yoed.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbuz6yoed.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('~[^A-Za-z]+$~',\
    \ $txt);\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfqfih_b.php:19\n\
    Stack trace:\n#0 /tmp/tmpvfqfih_b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvfqfih_b.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return ($txt[strlen($txt)-1]\
    \ == \" \" && !preg_match('/([a-zA-Z])/', $txt));\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_keranj.php:21\n\
    Stack trace:\n#0 /tmp/tmpf_keranj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf_keranj.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Split string into array\
    \ using space\n    $txtArr = explode(\" \", $txt);\n    $len = strlen($txtArr[$txtArr[0]-1]);\n\
    \    return ($len > 1 && $txtArr[$txtArr[0]-1]{0} == 'a') ? false : true;\n}\n\
    </code>\n<|/ a tags=php,character,string dscore=1 |>\n<| a tags=php,character,string\
    \ |>\nA bit late, but for anyone else who stumbles on this old question:\n<code>\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl0lwjzf2.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $letter = \"[a-zA-Z]\";\n\
    \    $words = preg_split(\"/\\s+/\", $txt);\n    return !preg_match(\"/$letter\\\
    $/\", $words[count($words) - 1]);\n}\n\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpav9kvxdx.php:23\n\
    Stack trace:\n#0 /tmp/tmpav9kvxdx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpav9kvxdx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $len = mb_strlen($txt);\n \
    \ if ($len == 0) return false;\n\n  if ($txt[$len - 1] == ' ') $len--;\n\n  //\
    \ If $txt[$len - 1] is a space, last character is not a letter\n  $lastChar =\
    \ mb_substr($txt, $len, 1, null, 'UTF-8');\n  if ($lastChar == ' ' || $lastChar\
    \ == chr(32)) return false;\n\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpjk6qfmca.php:12\nStack trace:\n#0 /tmp/tmpjk6qfmca.php(25): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpjk6qfmca.php(29): candidate('apple')\n#2 /tmp/tmpjk6qfmca.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjk6qfmca.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (empty($txt)) return false;\n\
    \    $txt = strtoupper($txt);\n    $words = explode(\" \", $txt);\n    foreach\
    \ ($words as $word) {\n        if (preg_match(\"/^[A-Z]+$/\", $word)) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprn8979k9.php:29\n\
    Stack trace:\n#0 /tmp/tmprn8979k9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprn8979k9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // your code here\n    return\
    \ !preg_match(\"/[a-zA-Z]$/\", $txt);\n}\n\nfunction candidate(...$args) {\n \
    \   return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhxbjvoi.php:22\n\
    Stack trace:\n#0 /tmp/tmpbhxbjvoi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbhxbjvoi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $last_char = $txt[strlen($txt)\
    \ - 1];\n    return preg_match('/^[^a-z]$/', $last_char);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1aeaug9.php:21\n\
    Stack trace:\n#0 /tmp/tmpz1aeaug9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz1aeaug9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $txt = preg_replace('/[^a-z\
    \ ]/i', '', $txt);\n    $last_char = substr($txt, -1);\n    return ($last_char\
    \ != '' && $last_char != ' ');\n}\n\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpto59gryr.php:22\n\
    Stack trace:\n#0 /tmp/tmpto59gryr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpto59gryr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n   return preg_match('/\\A[^a-z]*[a-z]$/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5ih06ub.php:20\n\
    Stack trace:\n#0 /tmp/tmpj5ih06ub.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj5ih06ub.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (preg_match('/^[a-zA-Z]$/',\
    \ $txt)) {\n        return (true);\n    }\n    else {\n        return (false);\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxl3u54hz.php:26\n\
    Stack trace:\n#0 /tmp/tmpxl3u54hz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxl3u54hz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) > 0) {\n\
    \        // Check for the last character of the string:\n        $last_char =\
    \ substr($txt, strlen($txt) - 1, 1);\n        // Check for the last character\
    \ of the string:\n        if (preg_match('/[a-z]/', $last_char)) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j_e34cz.php:29\n\
    Stack trace:\n#0 /tmp/tmp3j_e34cz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3j_e34cz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $char = substr($txt, -1,\
    \ 1);\n    if ($char != ' ' && preg_match('/\\w/', $char)) {\n        return false;\n\
    \    } else {\n        return true;\n    }\n}\n</code>\n<|/ a tags=string,php,arrays\
    \ |>\n<| c |>\nThis will return false on \"Apple pie pie\" but probably it should\
    \ return true because the word 'pie' is not the last character of a sentence.\n\
    <|/ c |>\n<| a tags=string,php,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5o9593fk.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match(\"/^[A-Za-z]$/\"\
    , $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ren0ar6.php:20\n\
    Stack trace:\n#0 /tmp/tmp2ren0ar6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2ren0ar6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match('/[A-Za-z]$/',\
    \ $txt);\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6mtykwpl.php:19\n\
    Stack trace:\n#0 /tmp/tmp6mtykwpl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6mtykwpl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('/^[A-Za-z]$/',\
    \ $txt) && preg_match('/[^A-Za-z\\s]/', $txt);\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4lw5kf2.php:20\n\
    Stack trace:\n#0 /tmp/tmpw4lw5kf2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw4lw5kf2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Create a variable to be\
    \ returned.\n    $is_letter = False;\n    // Check the length of the string.\n\
    \    if (strlen($txt) > 0) {\n        // If any characters after the last character\n\
    \        // are letters, then True is returned.\n        $is_letter = preg_match(\"\
    /[a-z]$/\", $txt);\n    }\n    return $is_letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj0yx055.php:28\n\
    Stack trace:\n#0 /tmp/tmpqj0yx055.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqj0yx055.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n\t$is_last_letter = false;\n\t\
    \n\t// Get the last character of the string passed in\n\t$last_char = substr($txt,\
    \ -1, 1);\n\t\n\t// Check if the character is a letter\n\tif (ctype_alpha($last_char))\
    \ {\n\t\t$is_last_letter = true;\n\t}\n\t\n\t// Check if the last character is\
    \ not a word character\n\tforeach (explode(\" \", $txt) as $word) {\n\t\tif (ctype_alpha($word))\
    \ {\n\t\t\t$is_last_letter = true;\n\t\t}\n\t}\n\t\n\treturn $is_last_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9jk3w6_.php:37\n\
    Stack trace:\n#0 /tmp/tmpm9jk3w6_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpm9jk3w6_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Split the string by spaces\
    \ (\" \"), then trim the string \n  // of extra spaces on the left and right.\
    \ \n  $txt = preg_replace('/\\s+/', '', $txt);\n\n  // Split \"word\" into an\
    \ array based on the spaces. \n  // Note that the array is 0-indexed, where the\
    \ first element\n  // contains the entire string, the second element contains\n\
    \  // the first word, etc.\n  $words = explode(' ', $txt);\n\n  // Use the count()\
    \ function to see how many elements \n  // are in the $words array.\n  // If count($words)\
    \ is 1, then $words is an \n  // empty array. If count($words) is greater than\
    \ 1, \n  // then $words is a non-empty array that contains \n  // all the words\
    \ in the original string. \n  return !empty($words) && count($words) == 1;\n}\n\
    \nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2luxuo3.php:36\n\
    Stack trace:\n#0 /tmp/tmpv2luxuo3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpv2luxuo3.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n\t// Your code here\n}\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6p6do6h.php:19\n\
    Stack trace:\n#0 /tmp/tmpb6p6do6h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb6p6do6h.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $letters = str_split($txt);\n\
    \    $last = $letters[count($letters) - 1];\n    for ($i = count($letters) - 2;\
    \ $i >= 0; $i -= 1) {\n        $currLetter = $letters[$i];\n        if ($last[$i]\
    \ !== $currLetter) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vxbxucy.php:29\n\
    Stack trace:\n#0 /tmp/tmp1vxbxucy.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1vxbxucy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last_char = substr($txt, strlen($txt)\
    \ - 1);\n  return ctype_alpha($last_char);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lc94zgs.php:21\n\
    Stack trace:\n#0 /tmp/tmp8lc94zgs.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8lc94zgs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // your code here...\n}\n\
    \nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxxmgnrg.php:20\n\
    Stack trace:\n#0 /tmp/tmpjxxmgnrg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjxxmgnrg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Your code here\n    $last_char\
    \ = substr($txt, -1);\n    if (in_array($last_char, $alphabet) && strpos($txt,\
    \ ' ') === false) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmp4b_4k179.php\
    \ on line 14\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmp4b_4k179.php on line 14\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4b_4k179.php:26\nStack trace:\n#0 /tmp/tmp4b_4k179.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4b_4k179.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if ($txt != '' && $txt[strlen($txt)-1]\
    \ == '.') {\n        return check_if_last_char_is_a_word($txt);\n    }\n    $chars\
    \ = preg_split('/[\\s]+/', $txt);\n    foreach ($chars as $char) {\n        if\
    \ (!preg_match(\"/^[a-zA-Z]+$/\", $char)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefvwnyik.php:28\n\
    Stack trace:\n#0 /tmp/tmpefvwnyik.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpefvwnyik.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Initialize two flags:\
    \ one to check if the last character is\n    // an alphabetical character and\
    \ one to check if it is not a part of\n    // a word.\n    // A flag variable\
    \ is initialized to False.\n    $is_last_char = False;\n    $is_not_word = False;\n\
    \n    // Search the string from the end, counting backwards.\n    // If we reach\
    \ the beginning of the string, all characters\n    // are letters.\n    $len =\
    \ strlen($txt);\n    for ($i = $len; $i >= 0; $i--) {\n        if ($txt[$i] ==\
    \ ' ') {\n            $is_not_word = True;\n            break;\n        } else\
    \ {\n            $is_not_word = False;\n        }\n    }\n    if ($is_not_word)\
    \ {\n        $is_last_char = True;\n    }\n    return $is_last_char;\n}\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1t2qbv5d.php:45\n\
    Stack trace:\n#0 /tmp/tmp1t2qbv5d.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1t2qbv5d.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $letters = preg_split(\"\
    /\\s+/\", $txt);\n    return (count($letters) > 1 && end($letters) !== \" \");\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28qqg1rc.php:24\n\
    Stack trace:\n#0 /tmp/tmp28qqg1rc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp28qqg1rc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // your code here\n    return\
    \ strlen($txt) > 0 && preg_match('/[^a-zA-Z]+$/', $txt);\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4fkfrcu.php:21\n\
    Stack trace:\n#0 /tmp/tmpd4fkfrcu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd4fkfrcu.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n   return !preg_match('/\\b[a-z]+\\\
    b/i', $txt);\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsgei_6o.php:20\n\
    Stack trace:\n#0 /tmp/tmprsgei_6o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprsgei_6o.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Your code goes here\n  $txt\
    \ = $txt . \"\";\n  if (substr($txt, -1, 1) == 'A' && substr($txt, -1, 2) != 'E'\
    \ && substr($txt, -1, 2) != 'I' && substr($txt, -1, 2) != 'O' && substr($txt,\
    \ -1, 2) != 'U'){\n    return true;\n  }else{\n    return false;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78cuvvrg.php:26\n\
    Stack trace:\n#0 /tmp/tmp78cuvvrg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp78cuvvrg.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Remove trailing spaces from\
    \ text string and trim.\n  $txt = trim($txt);\n  $last_char = $txt[strlen($txt)\
    \ - 1];\n  // Return False if last character is alphabetical character.\n  if\
    \ (!ctype_alpha($last_char)) {\n    return false;\n  }\n  // Return True otherwise.\n\
    \  return true;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz7076qc.php:27\n\
    Stack trace:\n#0 /tmp/tmpbz7076qc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbz7076qc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $lastChar = substr($txt,\
    \ -1);\n    $lastChar = strtoupper($lastChar);\n    if ($lastChar === ' ' || $lastChar\
    \ === '-' ||\n            $lastChar === '.' || $lastChar === ',' ||\n        \
    \    $lastChar === '/' || $lastChar === '[' ||\n            $lastChar === ']'\
    \ || $lastChar === '(' ||\n            $lastChar === ')' || $lastChar === '\"\
    ' ||\n            $lastChar === '{' || $lastChar === '}' ||\n            $lastChar\
    \ === '*' || $lastChar === '+' ||\n            $lastChar === '?' || $lastChar\
    \ === ':' ||\n            $lastChar === ';' || $lastChar === '%' ||\n        \
    \    $lastChar === '&' || $lastChar === '!' ||\n            $lastChar === '@'\
    \ || $lastChar === '#' ||\n            $lastChar === '$' || $lastChar === '%'\
    \ ||\n            $lastChar === '^' || $lastChar === '&' ||\n            $lastChar\
    \ === '#' || $lastChar === '*' ||\n            $lastChar === '=' || $lastChar\
    \ === '+' ||\n            $lastChar === ',' || $lastChar === '\"' ||\n       \
    \     $lastChar === ';' || $lastChar === '\"' ||\n            $lastChar === '{'\
    \ || $lastChar === '}' ||\n            $lastChar === '(' || $lastChar === '*'\
    \ ||\n            $lastChar === '+' || $lastChar === '?' ||\n            $lastChar\
    \ === ':' || $lastChar === ';' ||\n            $lastChar === '{' || $lastChar\
    \ === '}' || \n            $lastChar === '(' || $lastChar === '+' ||\n       \
    \     $lastChar === '='|| $lastChar === ':')\n        {\n            return false;\n\
    \        }\n    else\n        {\n            return true;\n        }\n}\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58hizeg4.php:51\n\
    Stack trace:\n#0 /tmp/tmp58hizeg4.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp58hizeg4.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // check if last character\
    \ is alphabetic\n    if (!empty($txt)) {\n        $last = strtoupper(substr($txt,\
    \ -1));\n        $words = explode(\" \", $txt);\n        if (count($words)) {\n\
    \            foreach ($words as $word) {\n                if (substr($word, 0,\
    \ 1) === $last) {\n                    return false;\n                }\n    \
    \        }\n        } else {\n            return false;\n        }\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8revg16g.php:35\n\
    Stack trace:\n#0 /tmp/tmp8revg16g.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8revg16g.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return isset($txt[strlen($txt)-1])\
    \ && preg_match('/^[A-Z]+$/', $txt[strlen($txt)-1]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5x4qfkrg.php:21\n\
    Stack trace:\n#0 /tmp/tmp5x4qfkrg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5x4qfkrg.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Write your code here\n\
    }\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xb16l_i.php:19\n\
    Stack trace:\n#0 /tmp/tmp5xb16l_i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5xb16l_i.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('~^[^a-z]+$~',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nr53oub.php:20\n\
    Stack trace:\n#0 /tmp/tmp8nr53oub.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8nr53oub.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match('/^[A-Za-z]$/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw93en_6y.php:20\n\
    Stack trace:\n#0 /tmp/tmpw93en_6y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw93en_6y.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return substr($txt, -1) ==\
    \ ' ' && strlen(preg_replace('/^\\W*(\\w)$/', '$1', $txt)) == 1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparp6cke6.php:21\n\
    Stack trace:\n#0 /tmp/tmparp6cke6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmparp6cke6.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $txt = trim($txt);\n    return\
    \ !preg_match('~[\\p{L}\\p{Nd}]+$~u', $txt);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k0vedaj.php:22\n\
    Stack trace:\n#0 /tmp/tmp4k0vedaj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4k0vedaj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Get the length of the string.\n\
    \  $length = strlen($txt);\n  // Return False if the length is less than 1.\n\
    \  if ($length <= 1) {\n    return false;\n  }\n  // Return True if the last character\
    \ is a letter.\n  return $txt[($length - 1)] >= 'a' && $txt[($length - 1)] <=\
    \ 'z';\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mlqv8go.php:27\n\
    Stack trace:\n#0 /tmp/tmp0mlqv8go.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0mlqv8go.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return $txt[strlen($txt)-1]\
    \ == 'A' || $txt[strlen($txt)-1] == 'B'\n        || $txt[strlen($txt)-1] == 'C'\
    \ || $txt[strlen($txt)-1] == 'D'\n        || $txt[strlen($txt)-1] == 'E' || $txt[strlen($txt)-1]\
    \ == 'F'\n        || $txt[strlen($txt)-1] == 'G' || $txt[strlen($txt)-1] == 'H'\n\
    \        || $txt[strlen($txt)-1] == 'I' || $txt[strlen($txt)-1] == 'J'\n     \
    \   || $txt[strlen($txt)-1] == 'K' || $txt[strlen($txt)-1] == 'L'\n        ||\
    \ $txt[strlen($txt)-1] == 'M' || $txt[strlen($txt)-1] == 'N'\n        || $txt[strlen($txt)-1]\
    \ == 'O' || $txt[strlen($txt)-1] == 'P'\n        || $txt[strlen($txt)-1] == 'Q'\
    \ || $txt[strlen($txt)-1] == 'R'\n        || $txt[strlen($txt)-1] == 'S' || $txt[strlen($txt)-1]\
    \ == 'T'\n        || $txt[strlen($txt)-1] == 'U' || $txt[strlen($txt)-1] == 'V'\n\
    \        || $txt[strlen($txt)-1] == 'W' || $txt[strlen($txt)-1] == 'X'\n     \
    \   || $txt[strlen($txt)-1] == 'Y' || $txt[strlen($txt)-1] == 'Z';\n}\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rk44xg3.php:32\n\
    Stack trace:\n#0 /tmp/tmp7rk44xg3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7rk44xg3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $last = substr($txt, -1,\
    \ 1);\n    if(!ctype_alpha($last))\n        return false;\n    $last_is_word =\
    \ false;\n    for($i = 0; $i < strlen($last); $i++) {\n        $char = strtolower(substr($last,\
    \ $i, 1));\n        if(!ctype_alpha($char))\n            return false;\n     \
    \   $last_is_word = $last_is_word || is_word($char);\n    }\n    return !$last_is_word;\n\
    }\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_word() in\
    \ /tmp/tmplj32kt2l.php:20\nStack trace:\n#0 /tmp/tmplj32kt2l.php(25): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmplj32kt2l.php(29): candidate('apple')\n#2 /tmp/tmplj32kt2l.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplj32kt2l.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if ($txt === '') return false;\n\
    \    $t = substr($txt, -1, 1, strlen($txt));\n    $l = mb_substr($txt, -1, 1,\
    \ 'UTF-8');\n    return $l === mb_substr($t, 0, 1, 'UTF-8');\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: substr() expects at most 3 parameters, 4 given in /tmp/tmpza7z0vi5.php\
    \ on line 13\n\nFatal error: Uncaught Error: Call to undefined function mb_substr()\
    \ in /tmp/tmpza7z0vi5.php:14\nStack trace:\n#0 /tmp/tmpza7z0vi5.php(19): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpza7z0vi5.php(23): candidate('apple')\n#2 /tmp/tmpza7z0vi5.php(35):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpza7z0vi5.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $txt = trim($txt);\n  $txt\
    \ = str_replace(\" \", \"\",$txt);\n  for($i=strlen($txt);$i>0;$i--){\n    if(!preg_match('/^\\\
    W$/',$txt[$i-1])){\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr065_zqz.php:27\n\
    Stack trace:\n#0 /tmp/tmpr065_zqz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr065_zqz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // If the length of the string\
    \ is not equal to one\n  // or if the first character is not a letter,\n  // return\
    \ False.\n  if (strlen($txt) != 1 ||\n      !is_string($txt) ||\n      $txt[0]\
    \ !='a' ||\n      $txt[0] !='A' ||\n      $txt[0] !='e' ||\n      $txt[0] !='E'\
    \ ||\n      $txt[0] !='i' ||\n      $txt[0] !='I' ||\n      $txt[0] !='o' ||\n\
    \      $txt[0] !='O' ||\n      $txt[0] !='u' ||\n      $txt[0] !='U' ||\n    \
    \  $txt[0] !='A' ||\n      $txt[0] !='E' ||\n      $txt[0] !='I' ||\n      $txt[0]\
    \ !='O' ||\n      $txt[0] !='U'\n  ) {\n      return false;\n  }\n\n  // If the\
    \ last character is a letter, return True.\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92a9nr_w.php:46\n\
    Stack trace:\n#0 /tmp/tmp92a9nr_w.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp92a9nr_w.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $result = false;\n    $words\
    \ = explode(' ', $txt);\n    $words[count($words) - 1] = preg_replace('/[^a-z]/',\
    \ '', $words[count($words) - 1]);\n    if (count($words)) {\n        $last_word\
    \ = end($words);\n        $last_char = substr($last_word, 0, 1);\n        if ($last_char\
    \ == $last_word) {\n            $result = true;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprqndt6aj.php:34\n\
    Stack trace:\n#0 /tmp/tmprqndt6aj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprqndt6aj.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $last_char = substr($txt,\
    \ -1, 1);\n    if(strpos($txt, \" \") !== false){\n        $words = explode(\"\
    \ \", $txt);\n        $last = substr($words[count($words) - 1], 0, 1);\n     \
    \   if($last == $last_char) return true;\n        return false;\n    }else{\n\
    \        if($last_char == $txt) return true;\n        return false;\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcq2e3vs.php:34\n\
    Stack trace:\n#0 /tmp/tmpzcq2e3vs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzcq2e3vs.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $i = strlen($txt) - 1;\n\
    \    $char = substr($txt, $i, 1);\n    $word = substr($txt, 0, $i);\n    if ($char\
    \ == ' ' && ctype_space($word)) {\n        return true;\n    }\n    $lower = strtolower($char);\n\
    \    return ($lower == $char && !ctype_space($word));\n}\n</code>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpygb9_3jn.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Check if string is empty,\
    \ return False directly\n  if ($txt == \"\") {\n    return false;\n  }\n\n  //\
    \ Get the length of $txt\n  $length = strlen($txt);\n\n  // Check if $txt is a\
    \ single letter or digit\n  if ($length == 1) {\n    if (ctype_alpha($txt)) {\n\
    \      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Check\
    \ if $txt is a word\n  preg_match(\"/^\\p{L}+$/ui\", $txt, $matches);\n  if (empty($matches))\
    \ {\n    return false;\n  }\n\n  // Check if last character of a word is a letter\n\
    \  $last_char = substr($txt, $length - 1, 1);\n  if (ctype_alpha($last_char))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,regex |>\nTry this Regex:\n<code>\n/\\b[a-z]+\\b/u\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nNot that I'm aware of. Although, why would you use\
    \ a word boundary at all?\n<|/ c |>\n<| c |>\nI guess it makes sense because a\
    \ character is not followed by a space or a newline\n<|/ c |>\n<| c |>\nYou mean\
    \ a character is not followed by a space or newline or character **is** followed\
    \ by a space/newline. Having said that, `\\b` is redundant since it will not match\
    \ a space.\n<|/ c |>\n<| c |>\nYes, thanks. I meant space or character **is**\
    \ followed by a space/newline\n<|/ c |>\n<| a tags=php,regex |>\nIn order to match\
    \ words with only letters, the following regex can be used:\n<code>\n/\\b(\\w+)\\\
    b/u\n</code>\nWhere \\w is \\p{L} (and will match all unicode letters) \\p{Z}\
    \ (or \\p{Zs} for Unicode letters with diacritics) can be used:\n<code>\n/\\b(\\\
    p{L}+)\\b/u\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis matches all words\
    \ with only letters:\n<code>\npreg_match_all('/\\b([A-Za-z]+)\\b/u', $str, $matches);\n\
    </code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\nI came across this problem\
    \ and I solved it like this:\n<code>\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr332h1gu.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $len = strlen($txt);\n  $last_character\
    \ = substr($txt, $len-1, 1);\n  $words = explode(\" \", $txt);\n  return $last_character\
    \ == strtoupper($last_character) && count($words) == 1;\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7zjiw_i.php:23\n\
    Stack trace:\n#0 /tmp/tmpz7zjiw_i.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz7zjiw_i.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $len = strlen($txt);\n  \
    \  return ($txt[($len-1)] >= 'a' && $txt[($len-1)] <= 'z');\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgdz13h9.php:21\n\
    Stack trace:\n#0 /tmp/tmplgdz13h9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplgdz13h9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Split the string into\
    \ an array of words.\n    $words = explode(' ', $txt);\n    $last_word_length\
    \ = strlen($words[count($words) - 1]);\n    // If no words exist, no letters were\
    \ found.\n    if (!count($words)) {\n        return false;\n    }\n    // If only\
    \ 1 word exists, the last word length is 0.\n    if (count($words) == 1) {\n \
    \       return $last_word_length == 0;\n    }\n    // If only 2 words exist, the\
    \ last word length is 1.\n    if (count($words) == 2) {\n        return $last_word_length\
    \ == 1;\n    }\n    // If only 3 words exist, the last word length is 2.\n   \
    \ if (count($words) == 3) {\n        return $last_word_length == 2;\n    }\n \
    \   // If only 4 words exist, the last word length is 3.\n    if (count($words)\
    \ == 4) {\n        return $last_word_length == 3;\n    }\n    // If only 5 words\
    \ exist, the last word length is 4.\n    if (count($words) == 5) {\n        return\
    \ $last_word_length == 4;\n    }\n    // If only 6 words exist, the last word\
    \ length is 5.\n    if (count($words) == 6) {\n        return $last_word_length\
    \ == 5;\n    }\n    // If only 7 words exist, the last word length is 6.\n   \
    \ if (count($words) == 7) {\n        return $last_word_length == 6;\n    }\n \
    \   // If only 8 words exist, the last word length is 7.\n    if (count($words)\
    \ == 8) {\n        return $last_word_length == 7;\n    }\n    // If only 9 words\
    \ exist, the last word length is 8.\n    if (count($words) == 9) {\n        return\
    \ $last_word_length == 8;\n    }\n    // If only 10 words exist, the last word\
    \ length is 9.\n    if (count($words) == 10) {\n        return $last_word_length\
    \ == 9;\n    }\n    // If only 11 words exist, the last word length is 10.\n \
    \   if (count($words) == 11) {\n        return $last_word_length == 10;\n    }\n\
    \    // If only 12 words exist, the last word length is 11.\n    if (count($words)\
    \ == 12) {\n        return $last_word_length == 11;\n    }\n    // If only 13\
    \ words exist, the last word length is 12.\n    if (count($words) == 13) {\n \
    \       return $last_word_length == 12;\n    }\n    // If only 14 words exist,\
    \ the last word length is 13.\n    if (count($words) == 14) {\n        return\
    \ $last_word_length == 13;\n    }\n    // If only 15 words exist, the last word\
    \ length is 14.\n    if (count($words) == 15) {\n        return $last_word_length\
    \ == 14;\n    }\n    // If only 16 words exist, the last word length is 15.\n\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt3svksai.php on line 98\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Declare a Boolean variable\
    \ to hold the returned value\n  // of the function\n  $is_last_char_lt_letter\
    \ = false;\n  // Initialize two Boolean variables to hold the values of the\n\
    \  // characters at each index in the text string\n  $characters_at_start_of_text\
    \ = true;\n  $characters_at_end_of_text = true;\n  // Initialize the first character\
    \ as the value of $txt[0]\n  $first_character = $txt[0];\n  // If $txt[0] is not\
    \ a letter, return False\n  if (strpos($txt, '') !== false) {\n    // Return False\n\
    \    return false;\n  }\n  // Initialize $second_character as the value of $txt[1]\n\
    \  $second_character = $txt[1];\n  // If $txt[1] is not a letter, return False\n\
    \  if (strpos($txt, ' ') !== false) {\n    // Return False\n    return false;\n\
    \  }\n  // If the second character is a space\n  if ($second_character == ' ')\
    \ {\n    // Return False\n    return false;\n  }\n  // If the character at index\
    \ 1 is not lowercase\n  if (ctype_lower($first_character) != true) {\n    // Return\
    \ False\n    return false;\n  }\n  // If $txt[1] contains a lower case letter\n\
    \  if (ctype_lower($second_character) == true) {\n    // Return False\n    return\
    \ false;\n  }\n  // If $txt[1] is the same as the first character\n  if ($txt[1]\
    \ == $first_character) {\n    // Return False\n    return false;\n  }\n  // Initialize\
    \ $text_length as the length of $txt\n  $text_length = strlen($txt);\n  // Initialize\
    \ $pos_of_first_character as the position of\n  // the first character in the\
    \ text string\n  $pos_of_first_character = strpos($txt, $first_character);\n \
    \ // Initialize $pos_of_second_character as the position of\n  // the first character\
    \ in the text string\n  $pos_of_second_character = strpos($txt, $second_character);\n\
    \  // Initialize $pos_of_third_character as the position of\n  // the first character\
    \ in the text string\n  $pos_of_third_character = strpos($txt, $third_character);\n\
    \  // Initialize $pos_of_fourth_character as the position of\n  // the first character\
    \ in the text string\n  $pos_of_fourth_character = strpos($txt, $fourth_character);\n\
    \  // Initialize $pos_of_fifth_character as the position of\n  // the first character\
    \ in the text string\n  $pos_of_fifth_character = strpos($txt, $fifth_character);\n\
    \  // Initialize $pos_of_sixth_character as the position of\n  // the first character\
    \ in the text string\n  $pos_of_sixth_character = strpos($txt, $sixth_character);\n\
    \  // Initialize $pos_of_seventh_character as the position of\n  // the first\
    \ character in the text string\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe5l44btt.php on line 93\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace(\"/[^a-z]/i\", \"\", $txt);\n    $txt = preg_replace(\"\
    /\\s+/i\", \" \", $txt);\n    return $txt != \"\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9ujx4w1.php:23\n\
    Stack trace:\n#0 /tmp/tmpn9ujx4w1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn9ujx4w1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Your code here\n  return\
    \ $txt == '' ? false : preg_match('/^[a-zA-Z]+$/', $txt);\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeli_7t5t.php:20\n\
    Stack trace:\n#0 /tmp/tmpeli_7t5t.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpeli_7t5t.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last = substr($txt, -1);\n\
    \  $is_letter = ctype_alpha($last);\n  return !preg_match('/\\s/', $last);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThat is true but not always accurate. For\
    \ example, `check_if_last_char_is_a_letter(\"apple pi e\")` returns true since\
    \ the last character is also a letter.\n<|/ c |>\n<| c |>\nThanks John for the\
    \ feedback, I think you are correct. Updated answer accordingly. Also, updated\
    \ my answer to include PHP 5.4 `strrev()` function (`strrev_substr()` also available\
    \ in PHP 5.4).\n<|/ c |>\n<| a tags=php dscore=0 |>\nA little bit of regex and\
    \ a bit of slicing should do the trick:\n<code>\n$str = \"applepie\";\npreg_match('/^[a-z]$/i',\
    \ $str, $matches);\nif($matches[0]){\n    $str = preg_replace('/^[a-z]+/i', '',\
    \ $str);\n}\necho $str;\n</code>\nWill output: apple\n<|/ a |>\n<| a |>\n<code>\n\
    if (preg_match('/^[A-Z]+$/',$string)) {\n    //do something here\n}\n</code>\n\
    Explanation:\n/^[A-Z]+$/ tells the regex engine that the string should only consist\
    \ of upper case characters or nothing at all, no lower case letters.\n$string\
    \ tells the regex engine the string to check and be tested against the pattern.\
    \ The $string variable is passed by reference to preg_match() so modifying it\
    \ inside the function will not modify the variable outside the function unless\
    \ you declare it as a global.\n<|/ a dscore=0 tags=php |>\n<| a dscore=0 tags=php\
    \ |>\nIf you want to do it in PHP, you can use strrev() function to reverse the\
    \ string and then substr() to extract the last character:\n<code>\n<?php\necho\
    \ substr(strrev('applepie'), 0, -1);\n</code>\n<|/ a |>\n<| a |>\nI used a combination\
    \ of preg_match and preg_replace functions. \n<code>\n$str = \"applepie\";\nif\
    \ (preg_match('/^[a-z]$/i', $str)) {\n    $str = preg_replace('/^[a-z]+/i', '',\
    \ $str);\n    echo $str; \n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a tags=php\
    \ |>\n<code>\npreg_match('/^[A-Z]$/i', $str);\n</code>\nor\n<code>\npreg_match('/^[a-z]$/i',\
    \ $str);\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp13dl7l_u.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Create a boolean variable\n\
    \    $is_letter = true;\n\n    // Create a variable that holds the last character\n\
    \    $last_char = \"\";\n\n    // Loop through the string backwards\n    for ($i\
    \ = strlen($txt); $i >= 0; $i--) {\n\n        // Get the current character and\
    \ assign it to a variable\n        $current_char = $txt{$i};\n\n        // If\
    \ character is alphabetical\n        if (ctype_alpha($current_char)) {\n\n   \
    \         // If the last character was a letter\n            if ($last_char !=\
    \ \"\") {\n\n                // Set is_letter boolean variable to false\n    \
    \            $is_letter = false;\n\n                // Break the loop\n      \
    \          break;\n            }\n\n            // Set the last character to the\
    \ current character\n            $last_char = $current_char;\n        }\n    }\n\
    \n    // Return is_letter variable\n    return $is_letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvmss5ki.php:52\n\
    Stack trace:\n#0 /tmp/tmpbvmss5ki.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpbvmss5ki.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return (strlen($txt) > 0 &&\
    \ ctype_alpha($txt[strlen($txt) - 1]));\n}\nfunction candidate(...$args) {\n \
    \   return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8mbono8.php:19\n\
    Stack trace:\n#0 /tmp/tmpr8mbono8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpr8mbono8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Get the length of the\
    \ string\n    $len = strlen($txt);\n    // Set the default return value\n    $is_letter\
    \ = false;\n    // Iterate over the string backwards\n    for ($i = $len - 1;\
    \ $i >= 0; $i--) {\n        // Get the current character\n        $letter = substr($txt,\
    \ $i, 1);\n        // If the current character is a letter\n        // and it's\
    \ not part of a word\n        if ($letter && strpos($word, $letter) === false)\
    \ {\n            // Then this is the last character of the string\n          \
    \  // and it's not part of a word\n            $is_letter = true;\n          \
    \  break;\n        }\n    }\n    // Return the return value\n    return $is_letter;\n\
    }\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq66gylu_.php:37\n\
    Stack trace:\n#0 /tmp/tmpq66gylu_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpq66gylu_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('/^[a-zA-Z\
    \ ]$/', $txt) && \n         !preg_match('/[^\\s]*$/', substr($txt, -1, 1));\n\
    }\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplo324mb0.php:21\n\
    Stack trace:\n#0 /tmp/tmplo324mb0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplo324mb0.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match(\"/([a-z]|$)/i\"\
    , $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4balkysm.php:20\n\
    Stack trace:\n#0 /tmp/tmp4balkysm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4balkysm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return !preg_match('/[^a-z]+$/i',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp766dzg8w.php:20\n\
    Stack trace:\n#0 /tmp/tmp766dzg8w.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp766dzg8w.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last_char = substr($txt, -1);\n\
    \  if (ctype_alpha($last_char)) {\n    if ( ! ((substr($txt, 0, -1) == ' ') ||\
    \ ((substr($txt, 0, -1) == '.') || ((substr($txt, 0, -1) == '?') || ((substr($txt,\
    \ 0, -1) == '!'))))) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppflkg6q5.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return substr($txt, -1, 1,\
    \ strspn($txt, \" \", true)) === false;\n}\n\nfunction candidate(...$args) {\n\
    \    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: substr() expects at most 3 parameters, 4 given in /tmp/tmpw3amyv71.php\
    \ on line 12\n\nWarning: substr() expects at most 3 parameters, 4 given in /tmp/tmpw3amyv71.php\
    \ on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3amyv71.php:21\n\
    Stack trace:\n#0 /tmp/tmpw3amyv71.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw3amyv71.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last = substr($txt, -1, 1);\n\
    \  return !preg_match('/^[A-Za-z]$/', $last);\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hu49k00.php:21\n\
    Stack trace:\n#0 /tmp/tmp3hu49k00.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3hu49k00.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last_char = substr($txt, -1,\
    \ 1);\n  return $last_char >= 'a' && $last_char <= 'z';\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx202px7p.php:20\n\
    Stack trace:\n#0 /tmp/tmpx202px7p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx202px7p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if(!is_string($txt)) {\n\
    \        return false;\n    }\n\n    return preg_match('/\\w$/', $txt) && preg_match('/^\\\
    w/', $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvzamnkb4.php:24\n\
    Stack trace:\n#0 /tmp/tmpvzamnkb4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvzamnkb4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $len = strlen($txt);\n  if\
    \ ($len == 0) {\n    return false;\n  }\n  $last_char = substr($txt, $len - 1);\n\
    \  if ($last_char == ' ') {\n    $last_char = \"\";\n  }\n  $is_letter = ctype_alpha($last_char);\n\
    \  return !$is_letter;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rphe60d.php:29\n\
    Stack trace:\n#0 /tmp/tmp1rphe60d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1rphe60d.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $txt = ltrim($txt);\n  $lastchar\
    \ = substr($txt, -1, 1);\n  if($lastchar == ' ') return false;\n  $words = explode('\
    \ ', $txt);\n  $words[count($words) - 1] = preg_replace('/[^a-z]+/i', '', $words[count($words)\
    \ - 1]);\n  return $words[count($words) - 1] == $lastchar;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhn7nlc2.php:31\n\
    Stack trace:\n#0 /tmp/tmpvhn7nlc2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvhn7nlc2.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match(\"/[^a-z]+/i\"\
    , $txt, $regs) && !preg_match(\"/[a-z]+[^a-z]/i\", $txt);\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsytabsj4.php:20\n\
    Stack trace:\n#0 /tmp/tmpsytabsj4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsytabsj4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $last_char = $txt[strlen($txt)-1];\n\
    \    return ($last_char >= 'A' && $last_char <= 'Z') || ($last_char >= 'a' &&\
    \ $last_char <= 'z');\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1icb73vi.php:21\n\
    Stack trace:\n#0 /tmp/tmp1icb73vi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1icb73vi.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $letter = substr($txt, -1,\
    \ 1);\n  $words = explode(\" \", $txt);\n  $length = count($words);\n  $chars\
    \ = count($words[$length - 1]);\n  foreach($words as $key => $value) {\n    if($value[$key]\
    \ === $letter) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpg4xo_oqx.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpg4xo_oqx.php:29\nStack trace:\n#0 /tmp/tmpg4xo_oqx.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg4xo_oqx.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (empty($txt)) {\n    \
    \    return false;\n    }\n    $txt = strtolower($txt);\n    $words = explode('\
    \ ', $txt);\n    foreach ($words as $word) {\n        $word = trim($word);\n \
    \       if (preg_match('/[a-z]+$/', $word)) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzm7sm_vv.php:31\n\
    Stack trace:\n#0 /tmp/tmpzm7sm_vv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzm7sm_vv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('~[a-z]$~',\
    \ $txt);\n}\n$last_char_is_a_letter = check_if_last_char_is_a_letter($your_string_here);\n\
    $your_string_here; // => apple pie\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuik1x4mq.php:21\n\
    Stack trace:\n#0 /tmp/tmpuik1x4mq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpuik1x4mq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $last_char = substr($txt,\
    \ -1, 1);\n    if (preg_match('/[a-zA-Z]$/', $txt)) {\n        return $last_char;\n\
    \    }\n    return false;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nI think this\
    \ is more or less what I was looking for. Just a little bit of tweaking to work\
    \ with PHP 7. Thanks!\n<|/ c |>\n<| c |>\nSorry I didn't get back to you sooner.\
    \ I haven't been using PHP since I asked this question, and I really liked the\
    \ function you used. I just used it on another part of my code. Thanks again!\n\
    <|/ c |>\n<| a tags=php |>\nI believe the following function does what you want:\n\
    <code>\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0_njsl8m.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $str = explode(\" \", $txt);\n\
    \    $str[] = \"\";\n    foreach ($str as $letter) {\n        $str = substr($letter,\
    \ 0, -1);\n        if (ctype_alpha($letter)) {\n            return $letter;\n\
    \        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    The only thing that would cause problems would be if the last character was a\
    \ non-letter such as \"\xFE\", or if the last character was not a letter but was\
    \ a word such \"applepie\".  Of course, if the last character is simply a space\
    \ then it will work.  If the last character is not an alphabet character it will\
    \ fail.  It will also fail for input such as \"p\xE2\xA3 \xE2\u20AC\"\n<|/ c |>\n\
    <| c |>\nYes, this would cause problems, but the problem is that he did not specify\
    \ what to do with the non-letters nor did he specify the word separators as I\
    \ explained above. So I assumed that he does not care about it. The code I have\
    \ posted above is just an example of how to check if the last character is a letter.\
    \ He does not even need to check if it is a letter if he wants to check for non-letters.\
    \ All he needs is a function that returns either a string with or without the\
    \ last character, or false if there is no last character or if the last character\
    \ is not a letter.\n<|/ c |>\n<| a dscore=0 |>\nSince you have the last char in\
    \ a variable, there is no need to use regular expressions.\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv3z3amt_.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // If the length of the input\
    \ string is zero,\n    // return False.\n    if (strlen($txt) == 0)\n        return\
    \ false;\n\n    // Convert the input string to lowercase.\n    $txt = strtolower($txt);\n\
    \n    // Initialize $last_char to False.\n    $last_char = false;\n\n    // Loop\
    \ through each character in the input string.\n    foreach ($txt as $c) {\n  \
    \      // If the current character is the last character in the string\n     \
    \   // and is alphabetic, set $last_char to True and exit the loop.\n        if\
    \ ($c == substr($txt, 0, 1) && ctype_alpha($c))\n            $last_char = true;\n\
    \    }\n\n    // Return the value of $last_char.\n    return $last_char;\n}\n\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpk6r497kt.php\
    \ on line 24\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpk6r497kt.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6r497kt.php:41\n\
    Stack trace:\n#0 /tmp/tmpk6r497kt.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpk6r497kt.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Your code here\n}\n</code>\n\
    <|/ a |>\n<| a |>\nHere's a solution using regex:\n<code>\n$txt = \"apple pie\
    \ e apple pie e apple pie e apple pie\";\npreg_match(\"/[a-z]$/i\", $txt, $match);\n\
    echo empty($match[0]);\n</code>\nThe regular expression matches one character,\
    \ the character class is \"a-z\", which means a lowercase letter. The anchor $\
    \ means the end of the string. The i modifier makes the pattern case insensitive.\n\
    <|/ a tags=php,regex dscore=0 |>\n<| a tags=php,regex dscore=0 |>\nYou can use\
    \ preg_replace:\n<code>\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8wn16vdt.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match(\"/^([a-z])(?!.*\\\
    1)$/i\", $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppitr2crn.php:20\n\
    Stack trace:\n#0 /tmp/tmppitr2crn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppitr2crn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // If the text is empty then\
    \ return False\n    if (empty($txt)) return false;\n    // If the text is not\
    \ empty and only has one space then return False\n    if (strlen($txt) == 1 &&\
    \ strpos($txt, ' ') === false) return false;\n    // If the last character is\
    \ a letter then return True\n    return substr($txt, -1, 1) === strtoupper(substr($txt,\
    \ 0, -1));\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92yb919v.php:25\n\
    Stack trace:\n#0 /tmp/tmp92yb919v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp92yb919v.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Check to see if the last\
    \ character is a letter\n    // and if the next characters are a space.\n    return\
    \ preg_match('/^[^a-z]$/i', $txt) && strpos($txt, \" \") === false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjmlvwaw.php:23\n\
    Stack trace:\n#0 /tmp/tmpmjmlvwaw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmjmlvwaw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return (preg_match('/([a-zA-Z]+)(?=[\
    \ ])/is', $txt, $matches) == 1 && !preg_match('/([a-zA-Z0-9\\-]+)/is', $txt, $matches));\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9svykl_2.php:21\n\
    Stack trace:\n#0 /tmp/tmp9svykl_2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9svykl_2.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match('/^[a-z]+$/i',\
    \ $txt) == 1 && preg_match('/[^a-z ]$/i', $txt) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqst87usr.php:20\n\
    Stack trace:\n#0 /tmp/tmpqst87usr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqst87usr.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Write your code here...\n\
    }\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakdushz9.php:19\n\
    Stack trace:\n#0 /tmp/tmpakdushz9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpakdushz9.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $l = mb_strlen($txt);\n  $txt\
    \ = mb_substr($txt, 0, $l);\n  $l2 = mb_strlen($txt);\n  // a word is defined\
    \ as a group of character separated with space\n  if ($l2 > 1 && preg_match('/\\\
    s/', $txt)) {\n    return true;\n  }\n  // if last letter is non word char or\
    \ the first char is non word char\n  $c = mb_substr($txt, -1);\n  if ($c != '\
    \ ' && $c != '-') {\n    return true;\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmp7gbe8zqw.php:12\nStack trace:\n#0 /tmp/tmp7gbe8zqw.php(27): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmp7gbe8zqw.php(31): candidate('apple')\n#2 /tmp/tmp7gbe8zqw.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7gbe8zqw.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n\t$txt = preg_replace(\"/[^a-z]+/\"\
    , \"\", $txt);\n\treturn (substr($txt, -1, 1) == \"a\" || substr($txt, -1, 1)\
    \ == \"e\" || substr($txt, -1, 1) == \"i\" || substr($txt, -1, 1) == \"o\" ||\
    \ substr($txt, -1, 1) == \"u\");\n}\n\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6m_9z_74.php:21\n\
    Stack trace:\n#0 /tmp/tmp6m_9z_74.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6m_9z_74.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  if (! isset($txt) || empty($txt))\
    \ {\n    return false;\n  }\n  return preg_match('/[a-zA-Z ]$/', $txt);\n}\n\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwqq3q_2.php:23\n\
    Stack trace:\n#0 /tmp/tmppwqq3q_2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppwqq3q_2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $txt = trim($txt);\n    $lastchar\
    \ = substr($txt, -1);\n    if ($lastchar !== false && is_letter($lastchar)) {\n\
    \        if (strrpos($txt, ' ') === false) {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_letter() in\
    \ /tmp/tmp6eat4tmb.php:14\nStack trace:\n#0 /tmp/tmp6eat4tmb.php(23): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmp6eat4tmb.php(27): candidate('apple')\n#2 /tmp/tmp6eat4tmb.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6eat4tmb.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $check_last = $txt[strlen($txt)-1];\n\
    \  $check_first = strtoupper($txt[0]);\n  return $check_last != $check_first;\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd36peubj.php:22\n\
    Stack trace:\n#0 /tmp/tmpd36peubj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd36peubj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return substr($txt, -1) ===\
    \ ' ' && preg_match('/\\w$/', $txt);\n}\n\nfunction candidate(...$args) {\n  \
    \  return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu24xghbe.php:21\n\
    Stack trace:\n#0 /tmp/tmpu24xghbe.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu24xghbe.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match('/^[a-zA-Z]+$/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4o_2v_x.php:20\n\
    Stack trace:\n#0 /tmp/tmpa4o_2v_x.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpa4o_2v_x.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return $txt[strlen($txt)\
    \ - 1] != ' ';\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdv4zsl89.php:20\n\
    Stack trace:\n#0 /tmp/tmpdv4zsl89.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdv4zsl89.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if ($txt) {\n        $txt\
    \ = substr($txt, 0, -1);\n        $txt = strtolower($txt);\n        $words = explode(\"\
    \ \", $txt);\n        $num_words = count($words);\n        \n        for ($i =\
    \ 0; $i < $num_words; $i++) {\n            $word = strtolower($words[$i]);\n \
    \           $word = explode(\" \", $word);\n            if (end($word) == $word)\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpib5vgb51.php:33\n\
    Stack trace:\n#0 /tmp/tmpib5vgb51.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpib5vgb51.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $txt = strtoupper($txt);\n\
    \  if (strlen($txt) > 0) {\n    $last = strtoupper(substr($txt, strlen($txt) -\
    \ 1, 1));\n    if (strpos($last, ' ') === false) {\n      return true;\n    }\
    \ else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0z5k68au.php:30\n\
    Stack trace:\n#0 /tmp/tmp0z5k68au.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0z5k68au.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Your code here\n}\n\n\
    $txt = 'apple pie e ';\n$txt = strtolower($txt);\n$txt = preg_replace(\"/[^a-zA-Z]+/\"\
    , \" \", $txt);\n$txt = preg_replace('/\\s+/', ' ', $txt);\n$txt = explode(' ',\
    \ $txt);\n$txt = implode(\" \", $txt);\n$txt = strtolower($txt);\n$txt = preg_replace(\"\
    /[^a-zA-Z]+/\", \" \", $txt);\n$txt = preg_replace('/\\s+/', ' ', $txt);\n$txt\
    \ = explode(' ', $txt);\n$txt = implode(\" \", $txt);\necho $txt;\n</code>\n<|/\
    \ a |>\n<| a tags=php |>\nI agree with the previous answers regarding using a\
    \ regular expression to solve this problem. However I feel an alternative solution\
    \ would be more intuitive. Instead of having multiple arrays of strings (which\
    \ could get complicated), we can simply have an array which contains all the possible\
    \ combinations.\nLet's say we have two arrays. One contains each word from the\
    \ paragraph and the other contains the words in the paragraph which we want to\
    \ replace. Let's call the first array the source array and the second array the\
    \ target array.\nThe target array should contain only unique words so we can remove\
    \ the duplicates and make sure we don't overwrite any existing words.\nWe can\
    \ create an array of all possible combinations of the source array by using the\
    \ power set function. You can read about it here: https://php.net/manual/en/function.array-powerset.php\n\
    <code>\n<?php\n$words = ['apple', 'pie', 'e'];\n$replacements = ['', ''];\n\n\
    $replacements = array_map('strtolower', $replacements);\n$replacements = array_unique($replacements);\n\
    $replacements = array_map('strtolower', $replacements);\n\n$all_combinations =\
    \ array_reduce(array_map('array_merge', $replacements, $words), function($carry,\
    \ $item) {\n    $carry = array_merge($carry, $item);\n    return $carry;\n}, []);\n\
    \nforeach($all_combinations as $combination) {\n    $replaced = str_replace($words,\
    \ $replacements, $combination);\n    echo $replaced . \"\\n\";\n}\n</code>\nOutput:\n\
    <code>\napple pie\napple pie \napple pie e\napple pie\napple pie\napple pie e\n\
    apple pie \napple pie\napple pie \napple pie e\napple pie\napple pie \napple pie\n\
    apple pie e\napple pie \nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphkw_dcwz.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $word = substr($txt, -1,\
    \ 1);\n    if (preg_match('/[a-z]/', $word))\n        return false;\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6_y6dog.php:24\n\
    Stack trace:\n#0 /tmp/tmpg6_y6dog.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg6_y6dog.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  if (strlen($txt) == 0) {\n\
    \    return false;\n  }\n  return preg_match('/[a-z]$/i', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7v38etaw.php:23\n\
    Stack trace:\n#0 /tmp/tmp7v38etaw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7v38etaw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return $txt[strlen($txt)-1]\
    \ != ' ' && preg_match('/^[a-z]+$/i', $txt);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1eaow1k.php:20\n\
    Stack trace:\n#0 /tmp/tmpf1eaow1k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf1eaow1k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match(\"~^[A-Za-z]+$~\"\
    , $txt);\n}\n</code>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf81wwpyf.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return substr($txt, -1) !=\
    \ strrpos($txt, \" \") && $txt != \"\";\n}\n\nfunction candidate(...$args) {\n\
    \    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwrdyj09.php:20\n\
    Stack trace:\n#0 /tmp/tmprwrdyj09.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprwrdyj09.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return isset($txt[strlen($txt)-1])\n\
    \      && preg_match('/\\s[A-Z]$/i', $txt[strlen($txt)-1]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1zrv_of.php:22\n\
    Stack trace:\n#0 /tmp/tmpk1zrv_of.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpk1zrv_of.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  if ( strlen($txt) < 3 ) { return\
    \ false; }\n  $last_char = substr($txt,-1);\n  if ( is_letter($last_char) ) {\
    \ return false; }\n  $is_word = strpos( strtolower($txt), ' ' ) === false;\n \
    \ return $is_word;\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_letter() in\
    \ /tmp/tmp0408podl.php:14\nStack trace:\n#0 /tmp/tmp0408podl.php(20): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmp0408podl.php(24): candidate('apple')\n#2 /tmp/tmp0408podl.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0408podl.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return substr($txt, -1, 1)\
    \ !== ' ';\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2j00mz2y.php:19\n\
    Stack trace:\n#0 /tmp/tmp2j00mz2y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2j00mz2y.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return !preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplolj0unb.php:20\n\
    Stack trace:\n#0 /tmp/tmplolj0unb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplolj0unb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Your code here\n  $len =\
    \ strlen($txt);\n  for($i=0; $i<$len; $i++) {\n    if(!is_letter($txt[$i])) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_letter() in\
    \ /tmp/tmpzdwcg63g.php:15\nStack trace:\n#0 /tmp/tmpzdwcg63g.php(23): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpzdwcg63g.php(27): candidate('apple')\n#2 /tmp/tmpzdwcg63g.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzdwcg63g.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return substr($txt, -1, 1)\
    \ != ' '\n         && substr($txt, -1, 1) != '.'\n         && !in_array(substr($txt,\
    \ -1, 1), array(' '));\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzz8bmi3.php:21\n\
    Stack trace:\n#0 /tmp/tmpxzz8bmi3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzz8bmi3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('/\\w$/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8ckyx_0.php:20\n\
    Stack trace:\n#0 /tmp/tmpo8ckyx_0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpo8ckyx_0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n\tif (strlen($txt) == 0)\n\t\t\
    return false;\n\n\t// Check last char\n\tif (strtolower(substr($txt, -1)) != substr($txt,\
    \ -1))\n\t\treturn false;\n\n\t// Check middle chars\n\t$words = explode(\" \"\
    , $txt);\n\tforeach ($words as $word) {\n\t\tif (strtolower(substr($word, -2))\
    \ != substr($word, -2))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmput6efe15.php:34\n\
    Stack trace:\n#0 /tmp/tmput6efe15.php(46): test()\n#1 {main}\n  thrown in /tmp/tmput6efe15.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $last = $txt[strlen($txt)-1];\n\
    \    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    if (in_array($last, $alphabet))\
    \ {\n        $word_len = strlen($txt);\n        if ($word_len > 2) {\n       \
    \     return false;\n        }\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: in_array() expects parameter 2 to be array, string given in\
    \ /tmp/tmpvj4pq16v.php on line 14\n\nWarning: in_array() expects parameter 2 to\
    \ be array, string given in /tmp/tmpvj4pq16v.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvj4pq16v.php:30\nStack trace:\n#0 /tmp/tmpvj4pq16v.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvj4pq16v.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $txt = ltrim($txt); // remove\
    \ whitespace\n  $txt = ucfirst($txt); // uppercase the first char\n  $txt = substr($txt,\
    \ 0, -1); // remove the last char\n  $words = explode(\" \", $txt);\n  // if the\
    \ last char is alphabet\n  if (preg_match(\"/^[[:alpha:]]+$/\", $words[count($words)\
    \ - 1])) {\n    // return true\n    return true;\n  } else {\n    // return false\n\
    \    return false;\n  }\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3jcyzp9.php:31\n\
    Stack trace:\n#0 /tmp/tmpq3jcyzp9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpq3jcyzp9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if ($txt == '' || $txt ==\
    \ '\\n')\n        return false;\n    if (preg_match('/\\W$/', $txt)) {\n     \
    \   if (preg_match('/\\W\\W$/', $txt)) {\n            if (preg_match('/\\W\\W/u',\
    \ $txt)) {\n                return false;\n            }\n        }\n    }\n \
    \   return preg_match('/[a-z]$/i', $txt);\n}\n\nfunction candidate(...$args) {\n\
    \    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6ukn4lm.php:29\n\
    Stack trace:\n#0 /tmp/tmpl6ukn4lm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl6ukn4lm.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $words = explode(\" \", $txt);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == 0)\n          \
    \  continue;\n        $lastChar = end($word);\n        if (ctype_alpha($lastChar))\n\
    \            return false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,function,validation,forms,html dscore=0 |>\nHere is a solution\
    \ that doesn't use explode() and regular expressions:\n<code>\n<?php\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi4uc0js_.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (!$txt)\n    {\n     \
    \   return false;\n    }\n\n    // Get last character\n    $lastChar = substr($txt,\
    \ -1, 1);\n\n    // If last character is space or new line, return true\n    if\
    \ ($lastChar == ' ' || $lastChar == \"\\n\")\n    {\n        return true;\n  \
    \  }\n\n    // Otherwise, return false\n    return false;\n}\n</code>\nThe above\
    \ function checks the last character of a string and if it is a space or new line,\
    \ it returns true. Otherwise, if it is a letter, it returns false.\nIf the string\
    \ contains only letters, it returns true. The function also takes care of cases\
    \ like \"abc de f\". It returns true because of the space. Otherwise, it returns\
    \ false.\n<|/ a dscore=1 tags=php,arrays,string |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprlmwqklq.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match(\"/^([a-zA-Z]+)\\\
    s(?!\\d)/\", $txt);\n}\n</code>\nA simple PHP function which will check if a string\
    \ contains the last character of another string (here a letter), while avoiding\
    \ false positives (i.e. checking \"apple\" against \"ap\" returns true).\n<code>\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm_ylq0ki.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n\t$txt = trim($txt);\n\tif (strlen($txt)\
    \ == 0) { return false; }\n\n\t$last_char = strtolower(substr($txt, (strlen($txt)-1)));\n\
    \treturn preg_match('/^[a-z]$/i', $last_char);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dcesw3w.php:24\n\
    Stack trace:\n#0 /tmp/tmp0dcesw3w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0dcesw3w.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) <= 0) {\n\
    \        return false;\n    }\n    $lastChar = substr($txt, -1);\n    if (ctype_alpha($lastChar))\
    \ {\n        if (strpos($lastChar, \" \") === false) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltn9gqxc.php:29\n\
    Stack trace:\n#0 /tmp/tmpltn9gqxc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpltn9gqxc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last_char = get_last_char($txt);\n\
    \  // If the last character is a letter, then\n  // it cannot be a word character\
    \ (space, comma, period, etc).\n  // Otherwise, it can be considered a word character.\n\
    \  return $last_char !== false && !is_word_char($last_char);\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_last_char()\
    \ in /tmp/tmps7bmzg8v.php:12\nStack trace:\n#0 /tmp/tmps7bmzg8v.php(19): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmps7bmzg8v.php(23): candidate('apple')\n#2 /tmp/tmps7bmzg8v.php(35):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmps7bmzg8v.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $i = strlen($txt);\n  $last\
    \ = substr($txt, $i-1);\n  $letters = array('a','e','i','o','u','A','E','I','O','U');\n\
    \  $word = preg_split('/\\s+/','apple pie ');\n  foreach($words as $w) {\n   \
    \ if (preg_match('/'.$w.'$/i', $last)) {\n      echo 'True';\n    } else {\n \
    \     echo 'False';\n    }\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpi0c9axv6.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0c9axv6.php:29\n\
    Stack trace:\n#0 /tmp/tmpi0c9axv6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpi0c9axv6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) == 0)\n\
    \        return false;\n    $char = substr($txt, -1);\n    return !(strpos($word,\
    \ \" \") && in_array($char, $letters));\n}\nfunction candidate(...$args) {\n \
    \   return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1db79dt_.php:22\n\
    Stack trace:\n#0 /tmp/tmp1db79dt_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1db79dt_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return (strlen($txt)>0) ? ($txt[strlen($txt)-1]==='\
    \ ') : false;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddvm4697.php:20\n\
    Stack trace:\n#0 /tmp/tmpddvm4697.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpddvm4697.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  global $last_char;\n  // Only\
    \ true for the first char of string.\n  if(($last_char !== FALSE)\n      && ($last_char\
    \ != $txt[strlen($txt)-1]))\n  {\n    // If last char is not a letter, return\
    \ false.\n    return FALSE;\n  }\n  else\n  {\n    // If last char is letter,\
    \ set last char to last char.\n    $last_char = $txt[strlen($txt)-1];\n    return\
    \ TRUE;\n  }\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt6ayvur.php:34\n\
    Stack trace:\n#0 /tmp/tmpkt6ayvur.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkt6ayvur.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  if (strlen($txt) == 0) return\
    \ false;\n  return preg_match(\"/[a-zA-Z]+/\", $txt[strlen($txt) - 1]);\n}\n\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xqtnqur.php:21\n\
    Stack trace:\n#0 /tmp/tmp9xqtnqur.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9xqtnqur.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // We don't want to check an\
    \ empty string\n  if ($txt == \"\") {\n    return false;\n  }\n\n  // Find the\
    \ last character in the string\n  $last_char_index = strlen($txt) - 1;\n\n  //\
    \ Check if the last character is an alphabetical character\n  // and it's not\
    \ part of a word\n  $last_char_check = substr($txt, $last_char_index);\n  return\
    \ preg_match(\"/^[a-z]*$/i\", $last_char_check);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yw7xwo6.php:31\n\
    Stack trace:\n#0 /tmp/tmp3yw7xwo6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3yw7xwo6.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Your code here\n    if\
    \ (!empty($txt) && preg_match('/^([a-zA-z])[^a-zA-z]$/', $txt)) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplax3eeev.php:25\n\
    Stack trace:\n#0 /tmp/tmplax3eeev.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplax3eeev.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return strlen($txt) > 0 &&\n\
    \         preg_match(\"/[a-zA-Z]$/\", substr($txt, -1, 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbexq38vf.php:21\n\
    Stack trace:\n#0 /tmp/tmpbexq38vf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbexq38vf.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return substr($txt, -1) ==\
    \ ' ' && !is_in_word(substr($txt, 0, -1));\n}\nfunction candidate(...$args) {\n\
    \    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrmk9bm3.php:20\n\
    Stack trace:\n#0 /tmp/tmpzrmk9bm3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzrmk9bm3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (is_null($txt)) {\n  \
    \      return false;\n    }\n    $txt = trim($txt);\n    return substr($txt, -1)\
    \ != ' ' && !preg_match('/^[a-zA-Z]*$/', $txt);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9s3nr21u.php:27\n\
    Stack trace:\n#0 /tmp/tmp9s3nr21u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9s3nr21u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) > 0)\n \
    \   {\n        $last_char = substr($txt, strlen($txt) - 1, 1);\n        if (ctype_alpha($last_char))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    \nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoum28cu8.php:29\n\
    Stack trace:\n#0 /tmp/tmpoum28cu8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpoum28cu8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Your code here\n    $word\
    \ = $txt;\n    $words = explode(' ',$word);\n    $last = array_pop($words);\n\
    \    return $words[0] === $last && count($words) !== 0;\n}\necho \"The last character\
    \ is $last_char of $word and is not part of a word.\\n\";\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The last character is  of  and is not part of a word.\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpe4ncnbr5.php:25\nStack trace:\n#0 /tmp/tmpe4ncnbr5.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpe4ncnbr5.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return substr($txt, -1) ==\
    \ ' ' && !preg_match('/[^a-z]+$/', $txt);\n}\n\nfunction candidate(...$args) {\n\
    \    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj46aka98.php:21\n\
    Stack trace:\n#0 /tmp/tmpj46aka98.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj46aka98.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return (substr($txt, -1,\
    \ 1) == 'a' && preg_match('/\\W/', substr($txt, 0, -1)));\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2t1tgk1.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2t1tgk1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpg2t1tgk1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return !preg_match('/[^A-Za-z\
    \ ]$/', $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskm9su6y.php:20\n\
    Stack trace:\n#0 /tmp/tmpskm9su6y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpskm9su6y.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n   return strlen($txt) > 0 &&\
    \ substr($txt, (-1) == 'a' || substr($txt, (-1) == 'e' || substr($txt, (-1) ==\
    \ 'i' || substr($txt, (-1) == 'o' || substr($txt, (-1) == 'u') || substr($txt,\
    \ (-1) == 'y'))))\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpktgwh3od.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('/^[A-Za-z]$/',\
    \ substr($txt, -1)) == 1;\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7581n7a.php:20\n\
    Stack trace:\n#0 /tmp/tmph7581n7a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmph7581n7a.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Create an array with every\
    \ character in the string\n  // and array_slice() with -1 to discard the last\n\
    \  // element since it won't be an alphabetical character\n  // Note: This code\
    \ is more efficient than the other\n  //       code in this function.\n  $chars\
    \ = array_slice(str_split($txt), -1);\n  foreach ($chars as $char) {\n    // Check\
    \ if the character is alphabetical and\n    // not a part of a word\n    if (ctype_alpha($char)\
    \ && strpos($txt, $char) === false) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3e9bfiio.php:32\n\
    Stack trace:\n#0 /tmp/tmp3e9bfiio.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3e9bfiio.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last_char = substr($txt, -1);\n\
    \  return preg_match('/^[a-zA-Z]+$/', $last_char);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptkbt_sp5.php:21\n\
    Stack trace:\n#0 /tmp/tmptkbt_sp5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptkbt_sp5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $l = strlen($txt);\n  if ($l\
    \ < 1) {\n    return false;\n  }\n  $last = $txt[$l - 1];\n  if ($last == ' '\
    \ || $last == '-') {\n    return false;\n  }\n  $chars = str_split($last);\n \
    \ foreach ($chars as $c) {\n    if (ctype_alpha($c)) {\n      return true;\n \
    \   }\n  }\n  return false;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis is a\
    \ good idea, but unfortunately, this is still counting '-' as part of the word\
    \ (for example: it returns true for 'apple pi-e-'). Thank you, I will keep this\
    \ in mind though!\n<|/ c |>\n<| a tags=php |>\nThis one worked for me:\n<code>\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn5fldykx.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $txt = trim($txt);\n  return\
    \ preg_match('/\\p{L}$/u', $txt);\n}\n\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9q7ubdxy.php:21\n\
    Stack trace:\n#0 /tmp/tmp9q7ubdxy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9q7ubdxy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last_char = $txt{strlen($txt)\
    \ - 1}; // Get the last character\n  $is_letter = preg_match('/[a-z]+/', $last_char);\n\
    \  $is_word = $last_char !== '';\n  return $is_letter && $is_word;\n}\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps430sfd3.php:22\n\
    Stack trace:\n#0 /tmp/tmps430sfd3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmps430sfd3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // If there is a last character\
    \ and it is in the alphabet\n    if(isset($txt[strlen($txt)-1]) && in_array($txt[strlen($txt)-1],\
    \ range('a', 'z')))\n        // If there is a last character and there is no space\
    \ at the end\n        && (substr($txt, strlen($txt)-1, 1) != ' ')\n        //\
    \ If there is a last character and there is a space at the end\n        && (substr($txt,\
    \ strlen($txt)-1, 1) == ' ')\n        // If there is a last character and it is\
    \ NOT a digit\n        && preg_match('~^[^\\d]~', $txt[strlen($txt)-1]))\n   \
    \     return true;\n    else\n        return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp86wzhi75.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  preg_match('/[^a-zA-Z]$/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgilqpj9n.php:20\n\
    Stack trace:\n#0 /tmp/tmpgilqpj9n.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgilqpj9n.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match(\"/([^\\\
    s]*)([A-Za-z]*)$/\", $txt, $matches);\n}\nfunction candidate(...$args) {\n   \
    \ return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjp25q4v.php:19\n\
    Stack trace:\n#0 /tmp/tmpyjp25q4v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyjp25q4v.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) < 3) return\
    \ false;\n    $last_char = substr($txt, -1, 1);\n    $is_a_letter = preg_match('/[a-z]/',\
    \ $last_char);\n    $is_a_word = preg_match('/[^a-z]/', $last_char);\n    return\
    \ $is_a_letter && !$is_a_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphl9jpus7.php:24\n\
    Stack trace:\n#0 /tmp/tmphl9jpus7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphl9jpus7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $lastChar = substr($txt,\
    \ -1);\n    if ( is_alphabetic($lastChar) ) {\n        $txt = substr($txt, 0,\
    \ -1);\n        $char = substr($txt, -1);\n        if ( is_alphabetic($char) )\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_alphabetic()\
    \ in /tmp/tmpm_mwjtk0.php:13\nStack trace:\n#0 /tmp/tmpm_mwjtk0.php(23): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpm_mwjtk0.php(27): candidate('apple')\n#2 /tmp/tmpm_mwjtk0.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpm_mwjtk0.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Your code here!\n    if\
    \ ($txt) {\n        $letter = $txt[strlen($txt) - 1];\n        $words = explode(\"\
    \ \", $txt);\n        foreach ($words as $word) {\n            if (strlen($word)\
    \ == strlen($letter) && strpos($word, $letter) === false) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi1jlfpi.php:30\n\
    Stack trace:\n#0 /tmp/tmpxi1jlfpi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxi1jlfpi.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $strlen = strlen($txt);\n\
    \    if ($strlen > 0) {\n        $char = substr($txt, $strlen - 1, 1);\n     \
    \   if (preg_match('/\\w/', $char)) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz1y15x0.php:27\n\
    Stack trace:\n#0 /tmp/tmpsz1y15x0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsz1y15x0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $words = explode(\" \",$txt);\n\
    \    $last_word = $words[count($words)-1];\n    return preg_match(\"/^[a-z]*$/\"\
    ,$last_word);\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cgkwen5.php:22\n\
    Stack trace:\n#0 /tmp/tmp4cgkwen5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4cgkwen5.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $last = substr($txt, -1, 1,\
    \ '');\n  preg_match('/[a-z]+$/i', $last, $letters);\n  return !empty($letters);\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: substr() expects at most 3 parameters, 4 given in /tmp/tmpkjr021_0.php\
    \ on line 12\n\nWarning: substr() expects at most 3 parameters, 4 given in /tmp/tmpkjr021_0.php\
    \ on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkjr021_0.php:23\n\
    Stack trace:\n#0 /tmp/tmpkjr021_0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkjr021_0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Get last character\n  $last_char\
    \ = substr($txt, -1, 1, '');\n  // Check if last character is an alphabetical\
    \ character\n  // and is not a part of a word\n  return preg_match('/^[a-z]+$/i',\
    \ $last_char) && !preg_match('/[^\\s]+$/i', $last_char);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: substr() expects at most 3 parameters, 4 given in /tmp/tmph89bfb1n.php\
    \ on line 13\n\nWarning: substr() expects at most 3 parameters, 4 given in /tmp/tmph89bfb1n.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph89bfb1n.php:25\n\
    Stack trace:\n#0 /tmp/tmph89bfb1n.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph89bfb1n.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Your code goes here:\n\
    \    if (strlen($txt) == 0 || substr($txt, -1, 1) != \" \") {\n        return\
    \ false;\n    } else {\n        $last_char = substr($txt, -1, 1);\n        if\
    \ (ctype_alpha($last_char) == false && strlen($last_char) > 1) {\n           \
    \ return false;\n        }\n        return true;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65nxwey7.php:29\n\
    Stack trace:\n#0 /tmp/tmp65nxwey7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp65nxwey7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    return preg_match('/[a-zA-Z]+/',\
    \ substr($txt, -1));\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfrpe39w.php:20\n\
    Stack trace:\n#0 /tmp/tmpxfrpe39w.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxfrpe39w.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  if (strlen($txt) > 0){\n  \
    \  $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/i', '', $txt);\n\
    \    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = trim($txt);\n    if\
    \ (strlen($txt) == 0){\n      return false;\n    }\n    return $txt[strlen($txt)-1]\
    \ == ' ';\n  }\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4r4w723t.php:30\n\
    Stack trace:\n#0 /tmp/tmp4r4w723t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4r4w723t.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Return True if last character\
    \ is an alphabetical character\n    // and not a part of a word.\n    // $txt\
    \ must be a string, not a char.\n    // Note: words can be separated by one or\
    \ more spaces.\n    if ($txt) {\n        // Get the last character\n        $txt\
    \ = substr($txt, -1, 1);\n        // Test if last character is alphabetical\n\
    \        if (ctype_alpha($txt)) {\n            // Test for non-word characters\
    \ (space, period, etc)\n            $non_word_chars = array(' ');\n          \
    \  if (in_array($txt, $non_word_chars)) {\n                // Return False\n \
    \               return false;\n            }\n            // Return True\n   \
    \         return true;\n        }\n        // Return False\n        return false;\n\
    \    }\n    // Return False\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6i_exb_.php:41\n\
    Stack trace:\n#0 /tmp/tmpt6i_exb_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpt6i_exb_.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $txt = trim($txt);\n    if\
    \ (empty($txt)) return false;\n    $txt = strtolower($txt);\n    return substr($txt,\
    \ -1) != 'e' && substr($txt, -1) != 'i' && substr($txt, -1) != 'o' && substr($txt,\
    \ -1) != 'u';\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnli05rk4.php:24\n\
    Stack trace:\n#0 /tmp/tmpnli05rk4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnli05rk4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Remove non-word characters\
    \ from the end of the string.\n    $txt = preg_replace('/[^\\w ]+/', '', $txt);\n\
    \    $txtLength = strlen($txt);\n    // Find the length of the string.\n    $lastLetter\
    \ = substr($txt, $txtLength - 1, 1);\n    // Return True if last char is alpha.\n\
    \    return ctype_alpha($lastLetter);\n}\n\nfunction candidate(...$args) {\n \
    \   return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tyx_60d.php:26\n\
    Stack trace:\n#0 /tmp/tmp5tyx_60d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5tyx_60d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Check if the input is empty\n\
    \  if($txt == \"\") {\n    return false;\n  }\n  // Check if the last character\
    \ is an alphabetical character or not\n  $last_char = substr($txt, -1, 1);\n \
    \ if(!is_alpha($last_char)) {\n    // The last character is not an alphabetical\
    \ character\n    return false;\n  }\n  // Check if the last character is a part\
    \ of a word or not\n  $last_char_array = explode(\" \", $txt);\n  if(end($last_char_array)\
    \ == $last_char) {\n    // The last character is a part of a word\n    return\
    \ false;\n  }\n  return true;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_alpha() in\
    \ /tmp/tmpirv9u1p5.php:18\nStack trace:\n#0 /tmp/tmpirv9u1p5.php(31): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpirv9u1p5.php(35): candidate('apple')\n#2 /tmp/tmpirv9u1p5.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpirv9u1p5.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  if (!empty($txt)) {\n    $txt\
    \ = strtolower($txt);\n    $last_char = $txt[strlen($txt)-1];\n    return in_array($last_char,\
    \ $alphabet);\n  }\n  return false;\n}\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpjfr5k0q8.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfr5k0q8.php:24\n\
    Stack trace:\n#0 /tmp/tmpjfr5k0q8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjfr5k0q8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Return False if there\
    \ is no text\n    if (empty($txt)) {\n        return false;\n    }\n    // Return\
    \ True if the last character is a letter\n    // and not a part of a word\n  \
    \  if (substr($txt, -1, 1) == 'a') {\n        if (strpos($txt, ' ') === false)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpct6ypcm4.php:33\n\
    Stack trace:\n#0 /tmp/tmpct6ypcm4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpct6ypcm4.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  preg_match(\"/\\s[a-zA-Z]+$/\"\
    , $txt, $match);\n  return $match[0];\n}\n</code>\n<|/ a dscore=3 tags=string,php\
    \ |>\n<| a dscore=3 tags=string,php |>\n<code>\nif(preg_match(\"/\\s[a-zA-Z]+$/\"\
    , $string))\n</code>\nThis regex matches the last word character (\\s) followed\
    \ by an alphabet/number character and a final '$'\n<|/ a |>\n<| a tags=string,php\
    \ |>\nTry this\n<code>\n$string = \"this apple pie\";\n\nif (substr($string, -1,\
    \ 1) == ' ' && !(ctype_alnum($string[strlen($string)-1])))\n    echo \"Last character\
    \ is not a letter\";\nelse\n    echo \"Last character is a letter\";\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks, I like this answer the most because it covers\
    \ all other chars besides letters and numbers. I like the idea of using the ctype_alnum()\
    \ function. I'm glad I asked the question here because I couldn't find an answer\
    \ that matched my needs.\n<|/ c |>\n<| c |>\nIt doesn't cover all letters, just\
    \ numbers and spaces.\n<|/ c |>\n<| a tags=string,php |>\n<code>\n$string = \"\
    this apple pie\";\n\n$last_char = substr($string, -1, 1);\nif ($last_char !==\
    \ ' ' && !ctype_alnum($last_char)) {\n    echo \"Last character is not a letter\"\
    ;\n}\nelse {\n    echo \"Last character is a letter\";\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer! I used this answer, though I used the ctype_alnum()\
    \ function to solve my problem.\n<|/ c |>\n<| a tags=string,php dscore=2 |>\n\
    <code>\n$string = \"this apple pie\";\n$last_char = substr($string, -1, 1);\n\
    if($last_char !== ' ' && !ctype_alnum($last_char))\n{\n    echo \"Last character\
    \ is not a letter\";\n}\nelse\n{\n    echo \"Last character is a letter\";\n}\n\
    </code>\n<|/ a |>\n<| a tags=string,php |>\nI know it's been answered already,\
    \ but this came up when I was looking for a regex to match a line break (\\n)\
    \ in a string.\nI came up with:\n<code>\n$matches = preg_match('/([^\\n\\r])\\\
    n/m', $string, $matches);\n</code>\nThe 'm' flag allows ^ and $\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpayyr5esj.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Make sure $txt is not\
    \ empty.\n    if (!$txt || $txt == '-') {\n        return false;\n    }\n    //\
    \ Make sure $txt is either a string or an integer.\n    if (is_string($txt) ||\
    \ (is_integer($txt))) {\n        // Remove all spaces and punctuation from the\
    \ string.\n        $txt = preg_replace('/[^\\p{P}\\p{S}]/u', '', $txt);\n    \
    \    // If the last character is a letter and not a part of a word,\n        //\
    \ return true.\n        return ctype_alpha($txt) && strrpos($txt, ' ') === false;\n\
    \    }\n    // If $txt is not a string or an integer,\n    // return false.\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7k9_9q_.php:35\n\
    Stack trace:\n#0 /tmp/tmpa7k9_9q_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpa7k9_9q_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Return False if there is\
    \ no text string.\n  if (empty($txt))\n  {\n    return false;\n  }\n\n  $txt =\
    \ trim($txt);\n  $last_char = $txt[strlen($txt) - 1];\n  if (!preg_match('/^[A-za-z]+$/',\
    \ $last_char))\n  {\n    return false;\n  }\n\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotebutle.php:33\n\
    Stack trace:\n#0 /tmp/tmpotebutle.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpotebutle.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Your code here\n  $txt =\
    \ preg_replace(\"/\\s+/\", \"\", $txt);\n  if (strlen($txt) > 0 && strlen($txt)\
    \ > 1) {\n    if ($txt[strlen($txt) - 1] != ' ') {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j7pyd86.php:28\n\
    Stack trace:\n#0 /tmp/tmp3j7pyd86.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3j7pyd86.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $txt = strtoupper($txt);\n\
    \    return substr($txt, -1) != strrpos($txt, \" \") && preg_match('/[^a-zA-Z]$/',\
    \ $txt);\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnf71qiy0.php:21\n\
    Stack trace:\n#0 /tmp/tmpnf71qiy0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnf71qiy0.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  global $word;\n  return isset($word[$txt[strlen($txt)-1]])\
    \ && $word[$txt[strlen($txt)-1]]!==' ';\n}\n\nfunction candidate(...$args) {\n\
    \    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgod8jhx.php:22\n\
    Stack trace:\n#0 /tmp/tmpsgod8jhx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsgod8jhx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $last_char = $txt[strlen($txt)\
    \ - 1];\n    $is_last_char_a_letter = false;\n    // If last char is a letter\
    \ or is a space\n    if (preg_match(\"/^[A-Za-z ]+$/\", $last_char)) {\n     \
    \   $is_last_char_a_letter = true;\n    }\n    return $is_last_char_a_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdlkz354.php:26\n\
    Stack trace:\n#0 /tmp/tmpjdlkz354.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjdlkz354.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $txt2 = preg_replace(\"/[^a-zA-Z\
    \ ]/\", \"\", $txt);\n    return (substr($txt, -1) == $txt2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouevz1nb.php:22\n\
    Stack trace:\n#0 /tmp/tmpouevz1nb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpouevz1nb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) == 0) {\n\
    \        return false;\n    }\n    $last_char = get_last_char($txt);\n    if ($last_char\
    \ !== false) {\n        if (ctype_alpha($last_char)) {\n            if (strlen($txt)\
    \ == 1) {\n                return false;\n            }\n            $last_char\
    \ = get_last_char($txt);\n            if ($last_char !== false) {\n          \
    \      if (ctype_alpha($last_char)) {\n                    return false;\n   \
    \             }\n            }\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_last_char()\
    \ in /tmp/tmpkgm6gtrx.php:15\nStack trace:\n#0 /tmp/tmpkgm6gtrx.php(33): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpkgm6gtrx.php(37): candidate('apple')\n#2 /tmp/tmpkgm6gtrx.php(49):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkgm6gtrx.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // your code here\n}\n\n\
    function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgsan_v0.php:20\n\
    Stack trace:\n#0 /tmp/tmpzgsan_v0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzgsan_v0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // return true if the last\
    \ character is alphabet (A-Z)\n    // and is not part of a word\n    if (substr($txt,\
    \ -1, 1) === ' ') {\n        return false;\n    }\n    return ctype_alpha($txt);\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2w2m2dbs.php:25\n\
    Stack trace:\n#0 /tmp/tmp2w2m2dbs.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2w2m2dbs.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) == 1) {\n\
    \        return false;\n    }\n    $l = str_split($txt)[$strlen($txt) - 1];\n\
    \    if (!ctype_alpha($l)) {\n        return false;\n    }\n    if (!preg_match('/^\\\
    W/s', $txt)) {\n        return false;\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpyufbn9e8.php:15\n\
    Stack trace:\n#0 /tmp/tmpyufbn9e8.php(25): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpyufbn9e8.php(29): candidate('apple')\n#2 /tmp/tmpyufbn9e8.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyufbn9e8.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $i = strlen($txt);\n    $last\
    \ = $txt[$i-1];\n    $is_letter = ( is_letter($last) );\n    if( $is_letter )\
    \ {\n        $last_was_word_char = false;\n        $words = explode(' ', $txt);\n\
    \        foreach( $words as $word ) {\n            $word_was_word_char = false;\n\
    \            foreach( $word as $letter ) {\n                $word_was_word_char\
    \ |= ( is_letter($letter) );\n            }\n            if( $word_was_word_char\
    \ ) {\n                $last_was_word_char = true;\n            }\n        }\n\
    \        if( !$last_was_word_char ) {\n            return true;\n        } else\
    \ {\n            return false;\n        }\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_letter() in\
    \ /tmp/tmpzbgkhkd2.php:14\nStack trace:\n#0 /tmp/tmpzbgkhkd2.php(38): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpzbgkhkd2.php(42): candidate('apple')\n#2 /tmp/tmpzbgkhkd2.php(54):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbgkhkd2.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $lc = strtolower(substr($txt,\
    \ -1, 1));\n    return (\n        is_alpha($lc) &&\n        (!check_if_last_char_is_a_word($txt)\
    \ || $lc == \" \")\n    );\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_alpha() in\
    \ /tmp/tmpsrjpitdq.php:14\nStack trace:\n#0 /tmp/tmpsrjpitdq.php(20): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpsrjpitdq.php(24): candidate('apple')\n#2 /tmp/tmpsrjpitdq.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsrjpitdq.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $lastChar = substr($txt, -1,\
    \ 1);\n  $isLetter = is_alpha($lastChar);\n  $isNotWord = preg_match('/^\\S+$/',\
    \ $txt);\n  return !($isLetter && $isNotWord);\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_alpha() in\
    \ /tmp/tmpys6r8jk9.php:13\nStack trace:\n#0 /tmp/tmpys6r8jk9.php(18): check_if_last_char_is_a_letter('apple')\n\
    #1 /tmp/tmpys6r8jk9.php(22): candidate('apple')\n#2 /tmp/tmpys6r8jk9.php(34):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpys6r8jk9.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Get last character of the\
    \ given string.\n  $last_char = substr($txt, -1, 1);\n\n  // Return True if the\
    \ last character is a letter\n  // and not a part of a word.\n  return ctype_alpha($last_char)\
    \ && strrpos($txt, ' ') === false;\n}\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlkf7dc_.php:24\n\
    Stack trace:\n#0 /tmp/tmpxlkf7dc_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxlkf7dc_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Check if the length of the\
    \ given string is the same as the\n  // length of the previous string and if not\
    \ return False.\n  // If the length of the given string is the same as the length\n\
    \  // of the previous string and the previous string is not empty,\n  // then\
    \ check if the previous string only contains alphabetical\n  // characters. If\
    \ so, return True.\n  // If the length of the given string is the same as the\
    \ length\n  // of the previous string and the previous string is empty,\n  //\
    \ or if the previous string only contains alphabetical characters,\n  // return\
    \ False.\n  if (strlen($txt) != strlen($txt.' ') && !empty($txt)) {\n    return\
    \ false;\n  }\n  return preg_match('/[^a-z]/i', $txt);\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzk0bsi8q.php:33\n\
    Stack trace:\n#0 /tmp/tmpzk0bsi8q.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzk0bsi8q.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n   $last = strtolower(substr($txt,\
    \ -1));\n   $words = explode(\" \", $txt);\n   foreach ($words as $word) {\n \
    \     if (ctype_alpha($word[$word.length-1])) {\n         return False;\n    \
    \  }\n   }\n   return $last;\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpbyznsjj1.php on line 15\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpbyznsjj1.php on line 15\n\
    \nWarning: Use of undefined constant length - assumed 'length' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpbyznsjj1.php on line 15\n\n\
    Warning: A non-numeric value encountered in /tmp/tmpbyznsjj1.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbyznsjj1.php:27\nStack\
    \ trace:\n#0 /tmp/tmpbyznsjj1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbyznsjj1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) == 0) return\
    \ false;\n    $lastchar = substr($txt, -1, 1);\n    if (preg_match('/[a-z]+$/i',\
    \ $txt) && $lastchar !=  ' ') return false;\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8f_4mvzv.php:23\n\
    Stack trace:\n#0 /tmp/tmp8f_4mvzv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8f_4mvzv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if (strlen($txt) != 0) {\n\
    \        if (substr($txt, -1) == \" \") {\n            $txt = substr($txt, 0,\
    \ -1);\n        }\n        if (ctype_alpha(substr($txt, -1))) {\n            $txt\
    \ = substr($txt, 0, -1);\n        }\n        if (ctype_space(substr($txt, -1)))\
    \ {\n            $txt = substr($txt, 0, -1);\n        }\n        if (ctype_upper(substr($txt,\
    \ -1))) {\n            $txt = substr($txt, 0, -1);\n        }\n        if (ctype_lower(substr($txt,\
    \ -1))) {\n            $txt = substr($txt, 0, -1);\n        }\n    }\n    return\
    \ (strlen($txt) == 0);\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjrmdqok.php:37\n\
    Stack trace:\n#0 /tmp/tmpyjrmdqok.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyjrmdqok.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $words = explode(\" \", $txt);\n\
    \    foreach ($words as $w) {\n        $lastChar = substr($w, -1);\n        if\
    \ ($lastChar == 'a' || $lastChar == 'e' || $lastChar == 'i' || $lastChar == 'o'\
    \ || $lastChar == 'u') {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4x_6_ce.php:28\n\
    Stack trace:\n#0 /tmp/tmp_4x_6_ce.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_4x_6_ce.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Remove any trailing spaces\
    \ and line breaks.\n    $txt = preg_replace('/(\\s+|$)/', '', $txt);\n    // Return\
    \ True if the last character is a letter and is not part of a word.\n    return\
    \ (bool)preg_match('/^[A-Za-z]+$/', $txt);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn54gawe.php:23\n\
    Stack trace:\n#0 /tmp/tmppn54gawe.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppn54gawe.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  if (strlen($txt) > 0){\n  \
    \  $last_char = substr($txt, -1, 1);\n    if ( ctype_alpha($last_char) ) {\n \
    \     return FALSE;\n    } else {\n      return TRUE;\n    }\n  }\n  return FALSE;\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3nhz8eg.php:29\n\
    Stack trace:\n#0 /tmp/tmpa3nhz8eg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpa3nhz8eg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Your code here\n  if (strlen($txt)\
    \ > 0 && preg_match('/[a-z]$/i', $txt)) {\n    return true;\n  }\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjji16nu4.php:24\n\
    Stack trace:\n#0 /tmp/tmpjji16nu4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjji16nu4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  return preg_match('/[^A-Z ]$/',\
    \ $txt);\n}\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdb4dx0d.php:19\n\
    Stack trace:\n#0 /tmp/tmpqdb4dx0d.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqdb4dx0d.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Your code goes here\n\
    \    return preg_match('~\\pL$~u', $txt);\n}\n\nfunction candidate(...$args) {\n\
    \    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9raywhu3.php:21\n\
    Stack trace:\n#0 /tmp/tmp9raywhu3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9raywhu3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  // Get last character of the\
    \ string.\n  $last_char = substr($txt, -1, 1);\n  // Check if last character is\
    \ alphabetical.\n  if (!(preg_match('/([a-z]+)/i', $last_char)))\n  {\n    //\
    \ Return false.\n    return false;\n  }\n  // Return true.\n  return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThank you, I just have one problem. How do\
    \ I make my function run from my `<input>`?\n<|/ c |>\n<| c |>\nWhat do you mean?\
    \ You can call your function via `check_if_last_char_is_a_letter('apple pie e')`.\n\
    <|/ c |>\n<| c |>\nYes I can call it normally, but I wanted to be able to run\
    \ the function on `<input>`. I have been searching around and I just can't seem\
    \ to get it to work. Sorry if I sound stupid\n<|/ c |>\n<| c |>\nYou want to have\
    \ it run when you type into the `<input>` element? When you type in the `<input>`,\
    \ you want to see if it matches the pattern in the function?\n<|/ c |>\n<| c |>\n\
    Yes, exactly. Because I want it to be dynamic, I don't want to have to write a\
    \ function for every single word I might have.\n<|/ c |>\n<| a tags=html,php,javascript\
    \ |>\nYou could try using onkeydown on the input field, and have your function\
    \ run when you hit the return key. It would look something like this:\n<code>\n\
    <input name=\"textfield\" onkeydown=\"yourFunctionHere()\" />\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\nHere's an example of how it might be done. It's\
    \ not that bad once you get the hang of it.\n\n<code>\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuqmg_5cv.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    // Write your code here\n\
    \    // return true;\n    $letter = false;\n    $word = false;\n    $chars = explode(\"\
    \ \", $txt);\n    $chars[count($chars) - 1] = \"\";\n    foreach ($chars as $char)\
    \ {\n        if (preg_match(\"/^[a-z]+$/i\", $char)) {\n            if ($char\
    \ != \" \") {\n                $letter = true;\n            }\n        } else\
    \ if (preg_match(\"/^[a-z]+$/i\", $char)) {\n            if ($char != \" \") {\n\
    \                $word = true;\n            }\n        }\n    }\n    return ($letter\
    \ == true and $word == false);\n}\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtgc4waw.php:39\n\
    Stack trace:\n#0 /tmp/tmpdtgc4waw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdtgc4waw.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    $txt = strtolower($txt);\n\
    \    $last = substr($txt, strlen($txt)-1, 1);\n    return ($last=='' || in_array($last,\
    \ array('e','i','o','u','a')) );\n}\nfunction candidate(...$args) {\n    return\
    \ check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8a7g_m3.php:21\n\
    Stack trace:\n#0 /tmp/tmpl8a7g_m3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl8a7g_m3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n    if ($txt){\n        $t =\
    \ explode(\" \",$txt);\n        return end($t) != $txt;\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
    \ pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnln7ma3f.php:28\n\
    Stack trace:\n#0 /tmp/tmpnln7ma3f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnln7ma3f.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E\
    \ False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False\n// check_if_last_char_is_a_letter(\"\") \u279E False\n\
    function check_if_last_char_is_a_letter($txt) {\n  $txt = trim($txt);\n  return\
    \ end($txt) !== false && preg_match('/[^a-zA-Z]+$/', $txt);\n}\n\nfunction candidate(...$args)\
    \ {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: end() expects parameter 1 to be array, string given in /tmp/tmppahkx7ye.php\
    \ on line 13\n\nWarning: end() expects parameter 1 to be array, string given in\
    \ /tmp/tmppahkx7ye.php on line 13\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppahkx7ye.php:22\nStack trace:\n#0 /tmp/tmppahkx7ye.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmppahkx7ye.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
