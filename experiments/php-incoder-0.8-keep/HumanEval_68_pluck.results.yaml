name: HumanEval_68_pluck
language: php
results:
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!$arr || $arr.length\
    \ === 0) {\n        return [];\n    }\n    $index = null;\n    $value = $arr[0];\n\
    \    $min = $value;\n    $index_of_min = 0;\n    \n    for ($i = 0; $i < $arr.length;\
    \ $i++) {\n        if ($arr[$i] === $min) {\n            $index = $i;\n      \
    \      $index_of_min = $i;\n            continue;\n        }\n        \n     \
    \   if ($arr[$i] % 2 !== 0) {\n            $min = $arr[$i];\n            $index_of_min\
    \ = $i;\n        }\n    }\n    \n    return [\n        $value,\n        $index_of_min,\n\
    \    ];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpkfrrnxkv.php on line 28\n\
    \nWarning: Use of undefined constant length - assumed 'length' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpkfrrnxkv.php on line 36\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpkfrrnxkv.php:59\nStack\
    \ trace:\n#0 /tmp/tmpkfrrnxkv.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpkfrrnxkv.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = new StdClass();\n\
    \    $min->value = 0;\n    $min->index = 0;\n    $result = [];\n\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value->value % 2 === 0) {\n       \
    \     $cur = $value;\n            $cur->value = $key;\n            $cur->index\
    \ = $key;\n            if ($value->value < 0) {\n                $min->value =\
    \ -$value->value;\n                $min->index = -$key;\n            }\n     \
    \       else {\n                foreach ($result as $k => $v) {\n            \
    \        if ($v->value == $value->value) {\n                        $cur->index\
    \ = $k;\n                    }\n                }\n            }\n           \
    \ $result[] = $cur;\n        }\n    }\n    if (count($result) == 1) {\n      \
    \  $result[0]->index = 0;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Attempt to assign property 'value' of non-object in /tmp/tmp751leec7.php\
    \ on line 36\n\nWarning: Attempt to assign property 'index' of non-object in /tmp/tmp751leec7.php\
    \ on line 37\n\nWarning: Attempt to assign property 'value' of non-object in /tmp/tmp751leec7.php\
    \ on line 36\n\nWarning: Attempt to assign property 'index' of non-object in /tmp/tmp751leec7.php\
    \ on line 37\n\nWarning: Attempt to assign property 'index' of non-object in /tmp/tmp751leec7.php\
    \ on line 45\n\nWarning: Attempt to assign property 'value' of non-object in /tmp/tmp751leec7.php\
    \ on line 36\n\nWarning: Attempt to assign property 'index' of non-object in /tmp/tmp751leec7.php\
    \ on line 37\n\nWarning: Attempt to assign property 'index' of non-object in /tmp/tmp751leec7.php\
    \ on line 45\n\nWarning: Attempt to assign property 'index' of non-object in /tmp/tmp751leec7.php\
    \ on line 45\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp751leec7.php:62\n\
    Stack trace:\n#0 /tmp/tmp751leec7.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp751leec7.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // write your code\
    \ here\n    $min_value = $arr[0];\n    $min_index = 0;\n    foreach($arr as $key\
    \ => $value) {\n        if($value % 2 == 0) {\n            if ($min_value == $value)\
    \ {\n                $min_value = $arr[$key];\n                $min_index = $key;\n\
    \            } else {\n                if($min_value > $arr[$key]) {\n       \
    \             $min_value = $arr[$key];\n                    $min_index = $key;\n\
    \                }\n            }\n        }\n    }\n    return array($min_value,\
    \ $min_index);\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81nj8w10.php:53\n\
    Stack trace:\n#0 /tmp/tmp81nj8w10.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp81nj8w10.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    \n    $result = [];\n    $min_value = $min_node\
    \ = 0;\n    $i = $j = 0;\n    $len = count($arr);\n    while ($i < $len) {\n \
    \       if ($min_value <= $arr[$i] & 1) {\n            $result[] = [$min_value,\
    \ $min_node, $i, $j, array_slice($arr, $i, 1)];\n            $j = $i;\n      \
    \      $min_value = $arr[$i] & 1;\n            $min_node = $i;\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    \n    if (empty($result))\
    \ {\n        return [];\n    }\n    \n    sort($result);\n    \n    return $result[0];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx5o4xeb.php:62\n\
    Stack trace:\n#0 /tmp/tmppx5o4xeb.php(72): test()\n#1 {main}\n  thrown in /tmp/tmppx5o4xeb.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Your code here\n\
    \    \n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hl550z.php:37\n\
    Stack trace:\n#0 /tmp/tmp20hl550z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp20hl550z.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $ret = [];\n   \
    \ $vals = [];\n    foreach ($arr as $node) {\n        if ($vals[$node] !== 0)\
    \ {\n            $ret[] = [$vals[$node], $node];\n            $vals[$node] = 0;\n\
    \        } elseif ($node % 2 === 0) {\n            $vals[$node] = $node;\n   \
    \     }\n    }\n    return $ret;\n}\n\n/**\n * Find a cycle in a graph\n *\n *\
    \ @param  array $adjlist  Adjacency list of graph\n * @param  array $visited \
    \ Visited nodes in previous iteration\n * @param  array $prev     Visited nodes\
    \ in previous iteration\n * @return array            List of cycles, [] if no\
    \ cycles found\n */\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptkwma729.php:54\n\
    Stack trace:\n#0 /tmp/tmptkwma729.php(64): test()\n#1 {main}\n  thrown in /tmp/tmptkwma729.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $return = [];\n\
    \    $minIndex = -1;\n    $minVal = $arr[0] % 2 == 0 ? $arr[0] : 0;\n    $i =\
    \ 0;\n    foreach($arr as $e) {\n        if ($i % 2 == 0) {\n            $return[$e]\
    \ = $e;\n            $i++;\n        } else {\n            if ($e < $minVal) {\n\
    \                $return = [];\n                $minVal = $e;\n              \
    \  $minIndex = $i;\n            }\n        }\n    }\n    if ($minIndex >= 0) {\n\
    \        return [$minVal, $minIndex];\n    } else {\n        return $return;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx870s2g.php:57\n\
    Stack trace:\n#0 /tmp/tmppx870s2g.php(66): test()\n#1 {main}\n  thrown in /tmp/tmppx870s2g.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    \n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jpzlhab.php:36\n\
    Stack trace:\n#0 /tmp/tmp6jpzlhab.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6jpzlhab.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even_values = [];\n\n    // Iterate through the given array and determine\
    \ if the value is even\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 === 0) {\n            $even_values[] = $value;\n        } else {\n     \
    \       $result[] = [$value, $key];\n        }\n    }\n\n    // If the array was\
    \ empty or had no even values, return empty array\n    if (count($even_values)\
    \ === 0) {\n        return [];\n    }\n\n    // Iterate through even values and\
    \ find the smallest one\n    $key = array_search(min($even_values), $even_values);\n\
    \n    // If no even values were found, return empty array\n    if ($key === false)\
    \ {\n        return [];\n    }\n\n    // Add that index to result\n    $result[]\
    \ = [$even_values[$key], $key];\n\n    return $result;\n}\n</code>\n<|/ a tags=arrays,php,algorithm\
    \ |>\n<| c |>\nYour solution doesn't work for: echo pluck([]); echo (pluck([0]));\n\
    <|/ c |>\n<| c |>\n.Todua  That was the requirement stated in the question. The\
    \ question is how to get to that output. As I stated in the answer, you can easily\
    \ add a check if the array is empty and return the empty array instead if the\
    \ array is empty.\n<|/ c |>\n<| c |>\nThe question was 'The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],' I didn't read it in the\
    \ very first place. My bad.\n<|/ c |>\n<| c |>\n.Todua Thanks, I added a comment\
    \ about that as well.\n<|/ c |>\n<| a tags=arrays,php,algorithm |>\nAs others\
    \ have stated, your algorithm is wrong. The idea is that you have one variable\
    \ (let's call it $v) that you keep increasing. And if you reach the number that\
    \ you're looking for, you add the index $i to your result and reset $v to zero.\
    \ Here's a quick php implementation:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8f5cum5w.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    sort($arr);\n    $min_even_node = null;\n    foreach ($arr as $key => $val)\
    \ {\n        if ($val & 0x2) {\n            if ($min_even_node == null || $min_even_node\
    \ < $val) {\n                $min_even_node = $val;\n                $result[]\
    \ = $key;\n            }\n        }\n    }\n    return $result;\n}\n\n$array =\
    \ array(4, 5, 0, 3, 1, 2);\nprint_r(pluck($array));\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you for your reply, but this solution doesn't work when there are two nodes\
    \ with the same smallest even value.\n<|/ c |>\n<| c |>\nI thought that was clear\
    \ in my answer that my answer assumes that you have a tree with the nodes of the\
    \ same value sorted by value.\n<|/ c |>\n<| c |>\nHi, I have updated my answer.\
    \ Sorry for the late response and thanks for the question.\n<|/ c |>\n<| c |>\n\
    This question is pretty well answered, but it's also worth pointing out that the\
    \ question asked specifically for **one** node with the smallest even value, so\
    \ your solution fails to find the smallest even value. The question also specifically\
    \ stated that multiple nodes with the smallest even value were required. In my\
    \ solution, the function returns **all** the nodes with the smallest even value.\n\
    <|/ c |>\n<| c |>\n, I understand your point. I guess I should have mentioned\
    \ in the first paragraph that I needed all the nodes with the smallest even value\
    \ in an array. I see how it can be confusing. Thanks for the feedback.\n<|/ c\
    \ |>\n<| a dscore=0 tags=php |>\nYou can do this with recursion: first find the\
    \ smallest element in the array (call it $min), then find the smallest node in\
    \ the tree whose value is $min. You'll need to find this recursively, then you\
    \ can just use array_filter() to find the smallest value out of all the results.\n\
    <|/ a |>\n<| a tags=php dscore=0 |>\nThe approach I took was to iterate through\
    \ the array and to keep track of the smallest even values. I used a custom iterator\
    \ to solve the problem I encountered. It seems like a hack to me but it works\
    \ quite well, here's the code:\n<code>\n<?php\n\nclass RecursiveArrayIterator\
    \ extends ArrayIterator\n{\n    protected $smallest;\n\n    public function __construct(array\
    \ $arr)\n    {\n        $this->smallest = null; // Initially null\n\n        parent::__construct($arr);\n\
    \    }\n\n    public function valid()\n    {\n        if (parent::valid()) {\n\
    \            return true;\n        }\n\n        do {\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7br1_cxx.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $maxValue = $minValue\
    \ = array();\n    for($i = 0; $i < count($arr); $i++) {\n        if($arr[$i] >=\
    \ $maxValue[0]) {\n            $maxValue = $arr[$i];\n        } else if($arr[$i]\
    \ < $minValue[0]) {\n            $minValue = $arr[$i];\n        }\n    }\n   \
    \ return array($maxValue, $minValue);\n}\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2adbbxoa.php:43\n\
    Stack trace:\n#0 /tmp/tmp2adbbxoa.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2adbbxoa.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $odd_nodes = array_filter($arr,\
    \ function($v) { return ($v & 1) == 0; });\n    if (count($odd_nodes) === 0)\n\
    \        return [];\n\n    $first_odd_node = reset($odd_nodes);\n    $index =\
    \ array_search($first_odd_node, $arr);\n    return [$first_odd_node, $index];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnv0i39i.php:42\n\
    Stack trace:\n#0 /tmp/tmpfnv0i39i.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfnv0i39i.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallestEven =\
    \ null;\n    $smallestIndex = null;\n    $smallestIndexOdd = 0;\n    $evenIndexes\
    \ = [];\n    \n    foreach ($arr as $k => $val) {\n        if($val % 2 != 0) {\n\
    \            if($smallestEven == null || $smallestEven == 0) {\n             \
    \   $smallestEven = $val;\n                $smallestIndex = $k;\n            }\n\
    \            elseif($val % 2 == 0) {\n                if($smallestEven != $val)\
    \ {\n                    $evenIndexes[] = $smallestEven;\n                }\n\
    \                $smallestEven = $val;\n                $smallestIndex = $k;\n\
    \            }\n        }\n    }\n\n    array_unique($evenIndexes);\n    return\
    \ $evenIndexes[0];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnz0ufxt9.php:58\n\
    Stack trace:\n#0 /tmp/tmpnz0ufxt9.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpnz0ufxt9.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min = null;\n    for ($i = 0; $i < count($arr); $i++) {\n        if (isset($min)\
    \ && $arr[$i] === $min) {\n            $result[$i] = $min;\n        } else {\n\
    \            $min = $arr[$i];\n        }\n    }\n\n    return $result;\n}\n\n\
    $result = pluck([4,2,3]);\nvar_dump($result);\n\n$result = pluck([1,2,3]);\nvar_dump($result);\n\
    \n$result = pluck([]);\nvar_dump($result);\n\n$result = pluck([5, 3, 0, 4, 2]);\n\
    var_dump($result);\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n<| c |>\nThis\
    \ is a great solution! I was able to use this to solve a problem I was having\
    \ where a user can select a number of items from a list to be removed in a later\
    \ step. I combined this with the answers here https://stackoverflow.com/questions/1845167/how-can-i-find-the-highest-number-that-is-evenly-balanced-in-a-list-in-php\
    \ to find the highest even value in a list of items and return the position of\
    \ that item in an array.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpznqoxkg9.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   $evens_position = [];\n    $evens_position[] = 0;\n    \n    for($i=0;$i<count($arr);$i++){\n\
    \        if($arr[$i]%2==0){\n            $evens[$i] = $arr[$i];\n            $evens_position[$i]\
    \ = $i;\n        }\n    }\n    \n    $index = 0;\n    \n    while($index < count($evens)){\n\
    \        if($evens[$index] == $evens[$index+1]){\n            $index++;\n    \
    \    }\n        else{\n            $evens[$index] = $evens[$index+1];\n      \
    \      $evens_position[$index] = $evens_position[$index+1];\n            $index++;\n\
    \        }\n    }\n    \n    return $evens;\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bphy41x.php:59\n\
    Stack trace:\n#0 /tmp/tmp_bphy41x.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp_bphy41x.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evenNodes = [];\n\
    \    $evenNodesMin = [];\n    foreach ($arr as $k => $v) {\n        $evenNodes[$k]\
    \ = $v % 2 == 0 ? $v : 0;\n        if ($evenNodes[$k] > 0) {\n            $evenNodesMin[$evenNodes[$k]]\
    \ = $v;\n        }\n    }\n    ksort($evenNodesMin);\n    asort($evenNodes);\n\
    \    $k = 0;\n    foreach ($evenNodes as $value) {\n        if ($value === 0)\
    \ {\n            $returnArr[] = [$evenNodesMin[$value], $k];\n        }\n    \
    \    $k++;\n    }\n    return $returnArr;\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqlk5g4h.php:53\n\
    Stack trace:\n#0 /tmp/tmppqlk5g4h.php(63): test()\n#1 {main}\n  thrown in /tmp/tmppqlk5g4h.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach($arr as $key => $value) {\n        if($value % 2 ===\
    \ 0) {\n            $even[] = [$value, $key];\n        } else {\n            $odd[]\
    \ = [$value, $key];\n        }\n    }\n    sort($even);\n    sort($odd);\n   \
    \ if(count($even) < count($odd)) {\n        return $even;\n    }\n    return $odd;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nAh, I see what you are saying. I've edited my question\
    \ and added another example. Thanks for taking the time to answer! This is really\
    \ helpful, I'm going to give this a try right now.\n<|/ c |>\n<| c |>\nSo I edited\
    \ my answer to include a solution that works with your new example. Hopefully\
    \ this helps!\n<|/ c |>\n<| c |>\nI tried running your script with your updated\
    \ example, and I'm getting an unexpected [error in the sort() method](https://i.imgur.com/3lLp3vR.png).\
    \ Perhaps I'm missing something in my implementation?\n<|/ c |>\n<| c |>\nCan\
    \ you post the exact code you ran into when you ran it? I ran my code and it worked\
    \ fine.\n<|/ c |>\n<| c |>\nAh, I forgot that I had already run your code and\
    \ updated my question with it. I ran your code and I'm still getting an error.\
    \ I'm going to edit my question again and include my exact code so you can see\
    \ what I'm doing. Thanks for your help and patience.\n<|/ c |>\n<| a tags=php\
    \ |>\nThis works:\n<code>\n<?php\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnsubdtqz.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach($arr as $v){\n        $result[] = [$v, array_search($v, $arr)]; //\
    \ get the index and add the value\n    }\n\n    sort($result);\n    $result =\
    \ ($result[0][1] % 2 == 0) ? ($result[0][0])// if even value\n               \
    \                          : array_slice($result, 0, 1); // if odd value\n   \
    \ return $result ? [$result, $result[0][1]]\n                    : [];\n}\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxj39bi2_.php:45\n\
    Stack trace:\n#0 /tmp/tmpxj39bi2_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpxj39bi2_.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evenValues = array_filter($arr,\
    \ function ($value) use ($arr) {\n        return $value % 2 === 0;\n    });\n\
    \    if (empty($evenValues)) return [];\n    $minValue = min($evenValues);\n \
    \   $min = array_search(\n        function ($v) use ($minValue, $arr) {\n    \
    \        return $v === $minValue;\n        },\n        $evenValues);\n    return\
    \ [\n        $minValue,\n        $min,\n    ];\n}\n\n$input = [4,2,3];\n$expected\
    \ = [2,1];\n$result = pluck($input);\nprint_r(array_merge($result,$expected));\n\
    </code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nThank you very much, It works perfectly\
    \ as I wanted. Thanks Again\n<|/ c |>\n<| c |>\nYou're welcome. You have tagged\
    \ this with PHP. Do you know PHP? If so, you can modify this to fit your needs.\
    \ The code is pretty straight forward.\n<|/ c |>\n<| c |>\nYes I know. Thank you\
    \ very much for giving me your valuable time.\n<|/ c |>\n<| c |>\nCan you help\
    \ me with this one ? https://stackoverflow.com/questions/62273939/how-to-sort-an-array-that-has-an-integer-value-and-an-array-of-two-integers-by-the\n\
    <|/ c |>\n<| a tags=php |>\nYou can do it with recursion:\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvl2jgghs.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function ($item) {\n        return $item % 2 === 0;\n    });\n    if (count($evens)\
    \ > 0) {\n        $even_value = min($evens);\n        return array_filter($arr,\
    \ function ($item) use ($even_value) {\n            return $item === $even_value;\n\
    \        }, ARRAY_FILTER_USE_BOTH);\n    }\n    return [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcryisl1m.php:45\n\
    Stack trace:\n#0 /tmp/tmpcryisl1m.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpcryisl1m.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function ($v) { return $v & 1; });\n    if (count($evens) === 0) {\n       \
    \ return [];\n    }\n    $min = $evens[0];\n    $minIndex = 0;\n    foreach ($evens\
    \ as $i => $e) {\n        if ($e === $min) {\n            $minIndex = $i;\n  \
    \      }\n        if ($e < $min) {\n            $min = $e;\n        }\n    }\n\
    \    return [$min, $minIndex];\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz3bnr_ch.php:49\n\
    Stack trace:\n#0 /tmp/tmpz3bnr_ch.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpz3bnr_ch.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ === 0)\n        return [];\n    $n = count($arr);\n    $index = 0;\n    $result\
    \ = [];\n    $min_index = $n;\n    $smallest_value = 0;\n    for($i = 0; $i <\
    \ $n; $i++) {\n        if ($arr[$i] % 2 === 0) {\n            $smallest_value\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    $result[] =\
    \ $smallest_value;\n    for($i = 1; $i < $n; $i++) {\n        if ($smallest_value\
    \ !== $arr[$i]) {\n            $result[] = $arr[$i];\n            if ($arr[$i]\
    \ === $smallest_value) {\n                $index = $i;\n            } else {\n\
    \                if ($arr[$i] < $smallest_value) {\n                    $min_index\
    \ = $i;\n                }\n            }\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakgy3yru.php:61\n\
    Stack trace:\n#0 /tmp/tmpakgy3yru.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpakgy3yru.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array_filter($arr);\n\
    \    if(count($even) == 0) {\n        return [];\n    }\n    $sorted = $even;\n\
    \    sort($sorted);\n    $result = array();\n    for($i = 0; $i < count($arr);\
    \ $i++) {\n        if($sorted[$i] % 2 === 0) {\n            $result[] = $sorted[$i];\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=data-structures,php\
    \ |>\n<| a dscore=1 tags=data-structures,php |>\nThe simplest solution I can think\
    \ of is to first sort the array and then get the element at index 0. After getting\
    \ the smallest element from the array, you can run a loop to get all elements\
    \ greater than it.\nHere is the sample code. I hope this helps.\n<code>\n<?php\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6ic30m6l.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $even_value = 0;\n    $index = 0;\n    $length = count($arr);\n\
    \n    if ($length === 0) {\n        return [];\n    }\n\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 === 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $even_value = $value;\n           \
    \ $index = $key;\n        }\n    }\n\n    $index = 0;\n    foreach ($even as $key\
    \ => $value) {\n        if ($value < $even_value) {\n            $result = [$value,\
    \ $index];\n        }\n        $index++;\n    }\n\n    return $result;\n}\n\n\
    $arr = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpamhap707.php:68\nStack trace:\n#0 /tmp/tmpamhap707.php(77):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpamhap707.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evenValues = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n\n    if (!count($evenValues))\
    \ {\n        return [];\n    }\n\n    $min = min($evenValues);\n    $minIndex\
    \ = 0;\n    foreach ($evenValues as $key => $value) {\n        if ($min == $value)\
    \ {\n            $minIndex = $key;\n        }\n    }\n\n    return [$min, $minIndex];\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr =\
    \ array(4,2,3);\n$result = [];\n\nforeach($arr as $key => $value){\n    if($value\
    \ % 2 == 0){\n        $result[$value] = $key;\n    }\n}\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyci3issw.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evenNodes = array_filter($arr,\
    \ function($node) use ($arr) {\n        return $node % 2 === 0;\n    });\n   \
    \ sort($evenNodes);\n    $result = array_shift($evenNodes);\n    sort($arr);\n\
    \    sort($arr);\n    $index = array_search($result, $arr);\n    return [ $result,\
    \ $index ];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e34ol8l.php:44\n\
    Stack trace:\n#0 /tmp/tmp2e34ol8l.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2e34ol8l.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $result[0] = PHP_INT_MAX;\n    $index = 0;\n    \n    foreach ($arr as $item)\
    \ {\n        if ($item % 2 === 0) {\n            $result[1] = $index;\n      \
    \      $index++;\n        } else {\n            $result[0] = min($result[0], $item);\n\
    \            $result[1] = min($result[1], $index);\n        }\n    }\n    \n \
    \   if ($result[0] < PHP_INT_MAX) \n        $result[1] = min($result[1], $index);\
    \ \n    \n    return $result;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjm6yvyte.php:52\n\
    Stack trace:\n#0 /tmp/tmpjm6yvyte.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpjm6yvyte.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // your code is\
    \ here\n}\n<|/ file ext=.php |>\n<| c |>\nI didn't see any comments to your question.\n\
    <|/ c |>\n<| c |>\nIf you want people to see your question, please post a [Minimal,\
    \ Complete, and Verifiable example](https://stackoverflow.com/help/mcve)\n<|/\
    \ c |>\n<| c |>\nSorry for the incomplete question. I edited my question to make\
    \ it more complete.\n<|/ c |>\n<| c |>\nCan you share what you've tried so far?\n\
    <|/ c |>\n<| c |>\nI edited my question, hope it helps you\n<|/ c |>\n<| a tags=php,algorithm,sorting,tree\
    \ dscore=1 |>\nHere is one possible solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvo_ketj8.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = true;\n\
    \    $index = 0;\n    $value = min($arr);\n    $index_of_value = array();\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 != 0 && $even) {\n\
    \            $value = min($arr);\n            $index_of_value[$value] = $key;\n\
    \            $even = false;\n        }\n        if ($value % 2 == 0) {\n     \
    \       $even = true;\n        }\n    }\n    $even = true;\n    $index_of_value[$value]\
    \ = $value;\n    $index_of_value = array_flip($index_of_value);\n    $result =\
    \ array();\n    foreach ($arr as $key => $value) {\n        if ($value % 2 !=\
    \ 0 && $even) {\n            $result[] = $index_of_value[$value];\n          \
    \  $even = false;\n        }\n        if ($value % 2 == 0) {\n            $even\
    \ = true;\n        }\n    }\n    return $result;\n}\n$arr = array(4,2,3);\nprint_r(pluck($arr));\n\
    \n/*\nGiven an array representing a branch of a tree that has non-negative integer\
    \ nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node\
    \ should be the node with the smallest odd value.\nIf multiple nodes with the\
    \ same smallest odd value are found return the node that has smallest index.\n\
    The plucked node should be returned in a list, [ smalest_value, its index ],\n\
    If there are no odd values or the given array is empty, return [].\nExample 1:\n\
    Input: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest odd value, and\
    \ 2 has the smallest index.\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation:\
    \ 2 has the smallest odd value, and 2 has the smallest index. \nExample 3:\nInput:\
    \ []\nOutput: []\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation:\
    \ 0 is the smallest value, but  there are two zeros,\nso we will choose the first\
    \ zero, which has the smallest index.\nConstraints:\n * 1 <= nodes.length <= 10000\n\
    \ * 0 <= node.value\n*/\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => \n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp71ridu4y.php:92\nStack trace:\n#0 /tmp/tmp71ridu4y.php(102): test()\n\
    #1 {main}\n  thrown in /tmp/tmp71ridu4y.php on line 92\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\n      \
    \      $result[] = [$value, $key];\n    }\n\n    if (count($result) > 0) {\n \
    \       sort($result);\n        $result[0] = min($result);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmm1ji7mz.php:46\n\
    Stack trace:\n#0 /tmp/tmpmm1ji7mz.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpmm1ji7mz.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = -1;\n   \
    \ $res = array();\n    foreach($arr as $key => $value) {\n        if($value <\
    \ $min) {\n            $min = $value;\n        }\n        $res[$key] = $value;\n\
    \    }\n    foreach($res as $key => $value) {\n        if($value % 2 === 0) {\n\
    \            return $key;\n        }\n    }\n    return [];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdfwjzfb.php:48\n\
    Stack trace:\n#0 /tmp/tmpcdfwjzfb.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpcdfwjzfb.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \n    foreach ($arr as $key => $value) {\n        $result[$key] = $value % 2 ==\
    \ 0 ? $value : $key;\n    }\n    \n    foreach ($result as $key => $value) {\n\
    \        if ($result[$key] % 2 == 0) {\n            return [$result[$key], $key];\n\
    \        }\n    }\n\n    return array();\n}\n</code>\n<|/ a tags=tree,arrays,php,algorithm\
    \ |>\n<| c |>\nIt works well, thanks! Just wanted to clarify my question, the\
    \ array is sorted by value, so the function should return the lowest index node\
    \ of the array that has an even value. The array will not be sorted, the function\
    \ should find this node by searching the array for the smallest even value, and\
    \ return the index value in an array.\n<|/ c |>\n<| c |>\nYour array is unsorted,\
    \ or at least it seems that way from your examples, but I don't see how it could\
    \ be unsorted. Can you give an example of what should happen in these scenarios:\
    \ 1) input array: [0]; 2) input array: [1]; 3) input array: [2,0]; 4) input array:\
    \ [0,1,2,3];\n<|/ c |>\n<| c |>\n1) input array: [2,1,3]; 2) input array: [0,2,1,3];\
    \ 3) input array: [0,2,3]; 4) input array: [0,2,3,1]; 5) input array: [0,1,2];\
    \ 6) input array: [1,0];\n<|/ c |>\n<| c |>\nIf your array is [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\
    \ then your output should be [0,1,2,4,5,6], which is correct, right?\n<|/ c |>\n\
    <| c |>\nI added an answer below that includes an array sorted by value, and the\
    \ function should find the lowest index node of the array that has an even value.\
    \ I'll test it out, and let you know if it works, thanks for your help!\n<|/ c\
    \ |>\n<| a |>\nHere is the solution that I came up with, using array_filter with\
    \ an anonymous function. \n<code>\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo0kw0vl1.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!is_array($arr))\
    \ {\n        return [];\n    }\n    $arrLen = count($arr);\n    if ($arrLen ===\
    \ 0 || count(array_filter(array_count_values($arr), 'is_int')) === 0) {\n    \
    \    return [];\n    }\n    $map = [];\n    $minIndex = 0;\n    $minValue = array_reduce($arr,\
    \ 'min');\n    $minKey = [];\n    foreach ($arr as $value) {\n        $index =\
    \ array_search($value, $minValue);\n        $map[$value] = $index;\n        $map[$value\
    \ % 2 == 0 ? $value / 2 : $value] = $index;\n        if ($value < $minValue) {\n\
    \            $minIndex = $index;\n            $minValue = $value;\n          \
    \  $minKey = $value;\n        } elseif ($value == $minValue) {\n            $minIndex\
    \ = $index;\n            $minKey = $value;\n        }\n    }\n    return $map[$minKey];\n\
    }\n\n/* \nProblem Statement \nGiven an array of integers representing a binary\
    \ tree, find the leftmost node in that binary tree (without using extra memory).\n\
    If there is more than one such node, return the lowest value.\nExample: \nInput:\
    \ [1,null,2,null,3,null,4]\nOutput: 3\nExplanation: The leftmost node in the above\
    \ tree is 2. \nInput: [5,3,4,1,6,2]\nOutput: 1\nExplanation: The leftmost node\
    \ in the above tree is 5, because 5 has the smallest value in this tree.\nInput:\
    \ [9,10,11,8,7,6,5,4]\nOutput: 11\nExplanation: The leftmost node in the above\
    \ tree is 11, because 11 has the smallest value in this tree.\nInput: [4,2,3]\n\
    Output: 3\nExplanation: The leftmost node in the above tree is 3, because 3 has\
    \ the smallest value in this tree.\nInput: [1,2,3]\nOutput: 1\nExplanation: The\
    \ leftmost node in the above tree is 1, because 1 has the smallest value in this\
    \ tree.\nInput: [0,1,0]\nOutput: []\nExplanation: The leftmost node in the above\
    \ tree is 0, because there are no nodes in this tree.\nInput: [1,1,1]\nOutput:\
    \ []\nExplanation: The leftmost node in the above tree is 0, because there are\
    \ no nodes in this tree.\n*/\n\n/*\nGiven a binary tree, return an inorder traversal\
    \ of its nodes' values.\n\nExample 1:\nInput: root = [1,2,3]\nOutput: [1,3,2]\n\
    Explanation: The inorder traversal of nodes is:\n[1,3,2].\n\nExample 2:\nInput:\
    \ root = []\nOutput: []\nExplanation: This is an empty tree.\n*/\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp3yiu53yh.php on line 40\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp3yiu53yh.php on line 40\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp3yiu53yh.php on line\
    \ 40\n\nWarning: Illegal offset type in /tmp/tmp3yiu53yh.php on line 52\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp3yiu53yh.php:103\nStack trace:\n\
    #0 /tmp/tmp3yiu53yh.php(113): test()\n#1 {main}\n  thrown in /tmp/tmp3yiu53yh.php\
    \ on line 103\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = $max = $minIndex\
    \ = null;\n    $minIndex = $arr[0] < 0 ? null : $arr[0];\n\n    for($i = 1; $i\
    \ < count($arr); $i++) {\n        if($arr[$i] > 0) {\n            if($arr[$i]\
    \ <= $minIndex) {\n                $min = $arr[$i];\n                $minIndex\
    \ = $arr[$i];\n            }\n        } else {\n            $minIndex = max($minIndex,\
    \ $arr[$i]);\n        }\n    }\n\n    if($min === 0) {\n        $minIndex = null;\n\
    \    }\n\n    if($min > 0 && $minIndex === null) {\n        $minIndex = $arr[0];\n\
    \    }\n\n    return $minIndex === null\n        ? []\n        : [$min, $minIndex];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgrevffy.php:59\n\
    Stack trace:\n#0 /tmp/tmptgrevffy.php(69): test()\n#1 {main}\n  thrown in /tmp/tmptgrevffy.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    $min = PHP_INT_MAX;\n    $index = -1;\n    for($i = 0; $i < count($arr);\
    \ $i++) {\n        if($arr[$i] % 2 == 0) {\n            $index = $i;\n       \
    \     $min = $arr[$i];\n        } else {\n            if($min > $arr[$i]) {\n\
    \                $min = $arr[$i];\n                $index = $i;\n            }\n\
    \        }\n    }\n    $result[] = $min;\n    $result[] = $index;\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky_li9kp.php:53\n\
    Stack trace:\n#0 /tmp/tmpky_li9kp.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpky_li9kp.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    return array_reduce($arr,\
    \ 'array_filter', []);\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 2 to be a valid callback, no\
    \ array or string given in /tmp/tmp7_ayo179.php on line 28\n\nWarning: array_filter()\
    \ expects parameter 1 to be array, null given in /tmp/tmp7_ayo179.php on line\
    \ 28\n\nWarning: array_filter() expects parameter 1 to be array, null given in\
    \ /tmp/tmp7_ayo179.php on line 28\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7_ayo179.php:36\nStack trace:\n#0 /tmp/tmp7_ayo179.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7_ayo179.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $val) {\n        if($val % 2 === 0) {\n        \
    \    $result[] = [$val, $key];\n        }\n    }\n    sort($result);\n    return\
    \ array_shift($result);\n}\n\n$tests = [\n    [1,2,3,4],\n    [1,2,3],\n    [],\n\
    \    [0,5,3,0,4,2],\n    [0,0,3,0,3,0,4,2],\n];\n\nforeach ($tests as $test) {\n\
    \    echo sprintf(\"[%d]\\n\", pluck($test));\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nThe simple way to implement this is\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6680030m.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // write your code\
    \ here\n    if ($arr == [] || $arr == null) {\n        return [];\n    }\n   \
    \ $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$value] = $key;\n        }\n    }\n    $sorted_keys\
    \ = array_keys($even);\n    $sorted_values = array_values($even);\n    $min_key\
    \ = array_search($sorted_keys[0], array_keys($even));\n    $min_value = ($arr[$min_key]\
    \ % 2 == 0) ? $arr[$min_key] : 0;\n    return [$min_value, $min_key];\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kxinray.php:49\n\
    Stack trace:\n#0 /tmp/tmp8kxinray.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8kxinray.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr);\n  \
    \  $ans = $arr[0];\n    $index = 0;\n    while ($arr[$index]) {\n        $ans\
    \ = $arr[$index] + ($ans * 2);\n        $index++;\n    }\n    return $ans % 2\
    \ ? $arr : [];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_l3p_l1.php:43\n\
    Stack trace:\n#0 /tmp/tmpl_l3p_l1.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpl_l3p_l1.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $sorted_arr = sort($arr);\n    $count = 0;\n    foreach($sorted_arr as $value)\
    \ {\n        if($value % 2 == 0) {\n            if(isset($result[$count])) {\n\
    \                $result[$count][0] = $value;\n                $result[$count][1]\
    \ = $count;\n                $count++;\n            } else {\n               \
    \ $result[$count] = $value;\n                $count++;\n            }\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmptw3i3b7h.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptw3i3b7h.php:51\n\
    Stack trace:\n#0 /tmp/tmptw3i3b7h.php(61): test()\n#1 {main}\n  thrown in /tmp/tmptw3i3b7h.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    $n = array_shift($arr);\n    \n    foreach ($arr as $value) {\n        if\
    \ ($value % 2 == 0) {\n            array_push($result, $value);\n        }\n \
    \   }\n    \n    if (count($result) == 0) {\n        return array();\n    }\n\
    \    \n    $min_value = min($result);\n    $result_index = array_search($min_value,\
    \ $result);\n    array_push($result, $min_value);\n    \n    return array($min_value,\
    \ $result_index);\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp242oeu3m.php:53\n\
    Stack trace:\n#0 /tmp/tmp242oeu3m.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp242oeu3m.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = false;\n\
    \    $index = 0;\n    foreach ($arr as $i => $value) {\n        if (!$even &&\
    \ $value % 2 === 0) {\n            $even = true;\n            $index = $i;\n \
    \       }\n    }\n    if ($even) {\n        return [$arr[$index], $index];\n \
    \   } else {\n        return [];\n    }\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n\n$array = array(2, 4, 10, 1);\n$result\
    \ = array();\narray_walk($array, function($v, $k, $a) use (&$result) {\n    if\
    \ ($v !== 0){\n        $result[$v] = $v;\n    }\n});\n$count = count($result);\n\
    $sortedKeys = array_keys($result);\n\n$minKey = min($sortedKeys);\n\n$finalKey\
    \ = array_search($minKey, $sortedKeys);\n\nprint_r($result);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=0 tags=php,sorting,arrays |>\n<code>\n$arr = [2,4,10,1];\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyman80f0.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evens = array_filter($arr,\
    \ function ($x) { return ($x & 1) == 0; });\n  if (empty($evens)) {\n    return\
    \ [];\n  }\n  $result = $evens[0];\n  $indexes = array_keys($arr, $result);\n\
    \  if (count($indexes) == 0) {\n    return [];\n  }\n  sort($indexes);\n  return\
    \ [$result, $indexes[0]];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52k3jxr5.php:46\n\
    Stack trace:\n#0 /tmp/tmp52k3jxr5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp52k3jxr5.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach($arr as $value) {\n        array_push($result, $value, array_search($value,\
    \ $arr));\n    }\n    sort($result);\n    $even = null;\n    $index = null;\n\
    \    foreach($result as $value) {\n        if ($value % 2 == 0) {\n          \
    \  $even = $value;\n            $index = array_search($value, $arr);\n       \
    \ }\n    }\n    return $even ? [ $even, $index ] : [];\n}\n\n/**\n * Given an\
    \ array of integers, find the element with the maximum sum.\n * Note that you\
    \ may not necessarily need to compute the maximum sum recursively.\n * Also, the\
    \ number of calls to any function should be less than or equal to\n * the size\
    \ of the array.\n * Example 1:\n * Input: [-2, 1, -3]\n * Output: 4\n * Explanation:\
    \ The sum is 4 + 1 + 1 = 5.\n * Example 2:\n * Input: [6]\n * Output: 6\n * Explanation:\
    \ The sum is 6.\n * Example 3:\n * Input: [-2, -1, -100, 12]\n * Output: -100\n\
    \ * Explanation: The sum is 200 - 100 + 12 = -147.\n */\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0got7c7h.php:67\n\
    Stack trace:\n#0 /tmp/tmp0got7c7h.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp0got7c7h.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array();\n\
    \    foreach($arr as $k => $v) {\n        $even[$k] = $v % 2 == 0;\n    }\n  \
    \  arsort($even);\n    foreach($even as $k => $v) {\n        if($v) {\n      \
    \      $tmp = $arr[$k];\n            $arr[$k] = $k;\n            return array($tmp,\
    \ array_search($tmp, $arr));\n        }\n    }\n    return [];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqf4clpq.php:47\n\
    Stack trace:\n#0 /tmp/tmpwqf4clpq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwqf4clpq.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkp45v7ag.php:36\n\
    Stack trace:\n#0 /tmp/tmpkp45v7ag.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpkp45v7ag.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // \u9012\u5F52\n\
    \    if ($arr === [] || $arr === null) {\n        return [];\n    }\n    $odd_node\
    \ = [];\n    $even_node = [];\n    foreach ($arr as $node) {\n        // \u5224\
    \u65AD\u662F\u5426\u4E3A\u5947\u6570\n        if ($node % 2 === 0) {\n       \
    \     $even_node[] = $node;\n        } else {\n            $odd_node[] = $node;\n\
    \        }\n    }\n    if ($odd_node[0] > 0) {\n        $return = array_shift($even_node);\n\
    \    } else if ($odd_node[0] === 0) {\n        $return = array_shift($odd_node);\n\
    \    } else if ($even_node[0] > 0) {\n        $return = array_shift($odd_node);\n\
    \    } else if ($even_node[0] === 0) {\n        $return = array_shift($even_node);\n\
    \    }\n    return $return;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsxi7t5m.php:59\n\
    Stack trace:\n#0 /tmp/tmpzsxi7t5m.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpzsxi7t5m.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    $evenIndexes = array();\n    $index = 0;\n    $result[0] = min($arr);\n\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evenIndexes[$key] = $value;\n            $index = $key;\n          \
    \  $result[$key] = min($evenIndexes);\n        }\n    }\n\n    if (empty($arr))\
    \ {\n        return array();\n    }\n\n    return array($result[$index], $index);\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmpskbj7gk9.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskbj7gk9.php:55\n\
    Stack trace:\n#0 /tmp/tmpskbj7gk9.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpskbj7gk9.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min_odd_index =\
    \ null;\n    $min_even_value = null;\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $even_value = $arr[$i];\n       \
    \     if ($min_even_value == null) {\n                $min_even_value = $even_value;\n\
    \                $min_even_value_index = $i;\n            } else if ($even_value\
    \ < $min_even_value) {\n                $min_even_value = $even_value;\n     \
    \           $min_even_value_index = $i;\n            }\n        } else {\n   \
    \         if ($min_odd_index == null) {\n                $min_odd_index = $i;\n\
    \                $min_odd_value_index = $i;\n            } else if ($min_odd_index\
    \ != $i) {\n                return [$min_even_value, $min_even_value_index];\n\
    \            }\n        }\n    }\n    return [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzc8dvdq3.php:57\n\
    Stack trace:\n#0 /tmp/tmpzc8dvdq3.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpzc8dvdq3.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter(\n\
    \        array_filter($arr, 'is_int'),\n        function ($elem) {\n         \
    \   return ($elem % 2) === 0;\n        }\n    );\n    if (count($evens) === 0)\
    \ return [];\n    $idx = array_search(min($evens), $evens);\n    return [ $evens[$idx],\
    \ $idx ];\n}\n\n$result = pluck($input);\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a |>\nOne way:\n<code>\n$numbers = array(1,2,3,4,5);\n$even = array();\n\
    $index = -1;\n\nforeach($numbers as $key=>$val){\n   if($val & 1){\n      $even[]\
    \ = $val;\n      $index = $key;\n   }\n}\n\nvar_dump($index);\n</code>\n<|/ a\
    \ tags=php,arrays,algorithm dscore=0 |>\n<| a dscore=0 |>\nYou could try the following\
    \ code. \nThe goal is to find the smallest even value, which can be done by comparing\
    \ each number with its double (by shifting it by 2 places left, see below). \n\
    <code>\n<?php\n\n$array = [1,2,3,4,5,6,7,8,9];\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplye1c504.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Your code here\n\
    \    $min = array_sum($arr)/count($arr);\n    $min_idx = -1;\n    foreach ($arr\
    \ as $key => $val) {\n        if ($val == $min) {\n            if ($min_idx >\
    \ $key){\n                $min_idx = $key;\n            }\n        }\n    }\n\
    \    if ($min_idx > -1){\n        return [$arr[$min_idx], $min_idx];\n    }else{\n\
    \        return [];\n    }\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitbhibbu.php:49\n\
    Stack trace:\n#0 /tmp/tmpitbhibbu.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpitbhibbu.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arrSorted = sort($arr);\n\
    \    $max = 0;\n    $maxIndex = 0;\n    foreach ($arrSorted as $key => $value)\
    \ {\n        if ($max < $value) {\n            $max = $value;\n            $maxIndex\
    \ = $key;\n        }\n    }\n\n    if ($max === 0) {\n        return [];\n   \
    \ }\n\n    return [$max, $maxIndex];\n}\n\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpls8fmztc.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpls8fmztc.php:50\n\
    Stack trace:\n#0 /tmp/tmpls8fmztc.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpls8fmztc.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $odd_array = array();\n\
    \    $even_array = array();\n    $result = array();\n    foreach ($arr as $val)\
    \ {\n        if ($val & 1) {\n            $odd_array[] = $val;\n        } else\
    \ {\n            $even_array[] = $val;\n        }\n    }\n    $odd_min = min($odd_array);\n\
    \    $even_min = min($even_array);\n    $result_val = array();\n    foreach ($odd_array\
    \ as $index => $value) {\n        if ($value == $odd_min) {\n            $result_val[]\
    \ = $value;\n        }\n    }\n    foreach ($even_array as $index => $value) {\n\
    \        if ($value == $even_min) {\n            $result_val[] = $value;\n   \
    \     }\n    }\n    return $result_val;\n}\n\n$result = pluck($input);\nforeach\
    \ ($result as $key => $value) {\n    echo $value.' ';\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpnvc95x12.php\
    \ on line 31\n\nWarning: min(): Array must contain at least one element in /tmp/tmpnvc95x12.php\
    \ on line 38\n\nWarning: min(): Array must contain at least one element in /tmp/tmpnvc95x12.php\
    \ on line 39\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvc95x12.php:63\n\
    Stack trace:\n#0 /tmp/tmpnvc95x12.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpnvc95x12.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arrLen = count($arr);\n\
    \    $index = 0;\n    $result = array();\n    for ($i = 0; $i < $arrLen; $i++)\
    \ {\n        $value = $arr[$i];\n        if ($value % 2 == 0) {\n            if\
    \ ($arr[$i] < 0) {\n                return [];\n            }\n            $index++;\n\
    \            $result[] = $value;\n            if ($i == ($arrLen - 1)) {\n   \
    \             break;\n            }\n        }\n    }\n    if ($result == [])\
    \ {\n        return [];\n    }\n    $result[$index] = $value;\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3t22fij.php:56\n\
    Stack trace:\n#0 /tmp/tmph3t22fij.php(66): test()\n#1 {main}\n  thrown in /tmp/tmph3t22fij.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    \n    foreach ($arr as $v) {\n        $result[$v][] = $v;\n    }\n    \n\
    \    arsort($result);\n    \n    if (empty($result)) {\n        return array();\n\
    \    }\n    \n    return array_slice(array_keys($result), 0, 1);\n}\n\nclass Test\
    \ {\n    public function test() {\n        $result = pluck(new Test1());\n   \
    \     $this->assertEquals(['0', '1'], $result);\n\n        $result = pluck(new\
    \ Test2());\n        $this->assertEquals(['0', '1'], $result);\n\n        $result\
    \ = pluck(new Test3());\n        $this->assertEquals(['0', '1'], $result);\n\n\
    \        $result = pluck(new Test4());\n        $this->assertEquals(['0'], $result);\n\
    \    }\n}\n\nclass Test1 extends \\PHPUnit\\Framework\\TestCase\n{\n    public\
    \ function __construct() {\n        $this->arr = [4, 2, 3];\n    }\n\n    public\
    \ function test() {\n        $result = pluck($this->arr);\n        $this->assertEquals(['2',\
    \ '1'], $result);\n    }\n}\n\nclass Test2 extends \\PHPUnit\\Framework\\TestCase\n\
    {\n    public function __construct() {\n        $this->arr = [1, 2, 3];\n    }\n\
    \n    public function test() {\n        $result = pluck($this->arr);\n       \
    \ $this->assertEquals(['2', '1'], $result);\n    }\n}\n\nclass Test3 extends \\\
    PHPUnit\\Framework\\TestCase\n{\n    public function __construct() {\n       \
    \ $this->arr = [];\n    }\n\n    public function test() {\n        $result = pluck($this->arr);\n\
    \        $this->assertEquals([], $result);\n    }\n}\n\nclass Test4 extends \\\
    PHPUnit\\Framework\\TestCase\n{\n    public function __construct() {\n       \
    \ $this->arr = [5, 0, 3, 0, 4, 2];\n    }\n\n    public function test() {\n  \
    \      $result = pluck($this->arr);\n        $this->assertEquals(['0', '1'], $result);\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'PHPUnit\\Framework\\TestCase' not\
    \ found in /tmp/tmp4cbgeij9.php:59\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp4cbgeij9.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $counter = count($arr)\
    \ - 1;\n    $min = $arr[$counter];\n    $index = 0;\n    $evens = array();\n \
    \   foreach($arr as $val){\n        if($val % 2 == 0){\n            $evens[] =\
    \ $val;\n        }\n        if($val < $min){\n            $min = $val;\n     \
    \       $index = $counter;\n        }\n        else if($val == $min){\n      \
    \      $index = $counter;\n        }\n        else if($val > $min){\n        \
    \    $counter--;\n        }\n    }\n\n    return $evens[array_search($min, $evens)];\n\
    }\n\n$arr1 = [4, 5, 3];\n$arr2 = [1, 2, 5];\n$arr3 = [1, 3, 5];\n$arr4 = [1, 2,\
    \ 4];\n$arr5 = [4, 0, 3];\n$arr6 = [4, 2, 3];\n$arr7 = [4, 2, 6];\n$arr8 = [4,\
    \ 2, 6];\n$arr9 = [4, 2, 6];\n$arr10 = [4, 2, 6];\n$arr11 = [4, 2, 6];\n$arr12\
    \ = [4, 2, 6];\n$arr13 = [4, 2, 6];\n$arr14 = [4, 2, 6];\n$arr15 = [4, 2, 6];\n\
    $arr16 = [4, 2, 6];\n$arr17 = [4, 2, 6];\n$arr18 = [4, 2, 6];\n$arr19 = [4, 2,\
    \ 6];\n$arr20 = [4, 2, 6];\n$arr21 = [4, 2, 6];\n$arr22 = [4, 2, 6];\n$arr23 =\
    \ [4, 2, 6];\n$arr24 = [4, 2, 6];\n$arr25 = [4, 2, 6];\n$arr26 = [4, 2, 6];\n\
    $arr27 = [4, 2, 6];\n$arr28 = [4, 2, 6];\n$arr29 = [4, 2, 6];\n$arr30 = [4, 2,\
    \ 6];\n$arr31 = [4, 2, 6];\n$arr32 = [4, 2, 6];\n$arr33 = [4, 2, 6];\n$arr34 =\
    \ [4, 2, 6];\n$arr35 = [4, 2, 6];\n$arr36 = [4, 2, 6];\n$arr37 = [4, 2, 6];\n\
    $arr38 = [4, 2, 6];\n$arr39 = [4, 2, 6];\n$arr40 = [4, 2, 6];\n$arr41 = [4, 2,\
    \ 6];\n$arr42 = [4, 2, 6];\n$arr43 = [4, 2, 6];\n$arr44\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8y3p7gp2.php on line 95\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $minEval = PHP_INT_MAX;\n    $minIndex = 0;\n    foreach ($arr as $k => $v)\
    \ {\n        if ($v & 1 === 1) {\n            if ($minEval > $v) {\n         \
    \       $minEval = $v;\n                $minIndex = $k;\n            }\n     \
    \   }\n    }\n    return $minIndex ? [$minEval, $minIndex] : [];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhvgc9vq.php:47\n\
    Stack trace:\n#0 /tmp/tmplhvgc9vq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmplhvgc9vq.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array_filter($arr,\
    \ function($var) {\n        return $var % 2 === 0;\n    });\n    $smalest = array_reduce($even,\
    \ function($acc, $var) {\n        return $var < $acc ? $var : $acc;\n    });\n\
    \    $smallest = [];\n    $idx = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value == $smalest) {\n            $idx[$key] = $key;\n        }\
    \ else {\n            if (count($idx) > 0) {\n                if ($idx[$smalest]\
    \ == $idx) {\n                    $idx[$smalest] = $key;\n                } else\
    \ {\n                    $idx[$smalest] = $idx[$smalest] + 1;\n              \
    \  }\n            } else {\n                $idx[$smalest] = $key;\n         \
    \   }\n        }\n    }\n    return count($idx) > 0 ? $idx : [];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9f1ti10.php:59\n\
    Stack trace:\n#0 /tmp/tmpd9f1ti10.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpd9f1ti10.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = $max = $index\
    \ = 0;\n    foreach($arr as $key => $value) {\n        if($value == $min) {\n\
    \            $min = $key;\n            $min_index = $index;\n        }\n     \
    \   if($value < $min) {\n            $min = $value;\n            $min_index =\
    \ $index;\n        }\n        $index++;\n    }\n    return [$min, $min_index];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m4wl286.php:48\n\
    Stack trace:\n#0 /tmp/tmp5m4wl286.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5m4wl286.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arr2 = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $arr2[$key] = $value;\n        }\n    }\n    return $arr2;\n}\n\n$arr =\
    \ [4,2,3];\n$arr2 = [1,2,3];\n$arr3 = [0,5,0,3,0,4,2];\n$arr4 = [];\n$arr5 = [5,0,3,0,4,2];\n\
    $arr6 = [0,5,0,3,0,4,2];\n$arr7 = [0,5,0,3,0,4,2];\n$arr8 = [1,2,3,4,5];\n\n$arr\
    \ = [1,2,3,4,5];\n$arr2 = [1,2,3,4,5];\n$arr3 = [1,2,3,4,5];\n$arr4 = [1,2,3,4,5];\n\
    \n$arr = [4,2,3,4,5];\n$arr2 = [1];\n$arr3 = [];\n$arr4 = [4,2,3,4,5];\n$arr5\
    \ = [4,2,3,4,5];\n$arr6 = [4,2,3,4,5];\n$arr7 = [4,2,3,4,5];\n$arr8 = [1,2,3,4,5];\n\
    \n$arr = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1ogv6gv5.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $evenValues = [];\n    \n    foreach ($arr as $key => $value) {\n       \
    \ if ($value % 2 == 0) {\n            $evenValues[] = $value;\n        } \n  \
    \      if (array_search($value, $evenValues, true) !== false) {\n            $evenValues[]\
    \ = $value;\n            $result[] = $value;\n        }\n    }\n    \n    if (empty($result))\
    \ {\n        return [];\n    }\n    \n    $result = [];\n    \n    $key = array_search(min(array_values($evenValues)),\
    \ $evenValues, true);\n    $result[] = $evenValues[$key];\n    \n    return $result;\n\
    }\n\n$array = array(4, 2, 3);\nvar_dump(pluck($array)); // [2, 1]\n\n$array =\
    \ array(1,2,3);\nvar_dump(pluck($array)); // [2, 1]\n\n$array = array();\nvar_dump(pluck($array));\
    \ // []\n\n$array = array(5, 0, 3, 0, 4, 2);\nvar_dump(pluck($array)); // [0,\
    \ 1]\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 tags=arrays,php |>\n<code>\n\
    <?php\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaqgf5fbn.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Write your code\
    \ here\n    return [];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc916qmqy.php:37\n\
    Stack trace:\n#0 /tmp/tmpc916qmqy.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpc916qmqy.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 === 0) {\n            $evens[] = $value;\n        }\n        else {\n  \
    \          if (count($evens)) {\n                $result[array_search($value,\
    \ $evens)] = $key;\n            }\n        }\n    }\n    return $result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease elaborate on \"not working\".\n<|/\
    \ c |>\n<| c |>\nI have explained my test case and output also please check and\
    \ suggest if there is any way to improve it.\n<|/ c |>\n<| a tags=php,arrays,sorting,laravel\
    \ |>\nAs I understand it you want the index of the node with the smallest odd\
    \ value for each node.\nThis can be achieved with two loops nested inside each\
    \ other. One loop runs for every node and the second loop runs for every node\
    \ and checks every other node to see if it has the smallest odd value. If the\
    \ current node is the smallest odd value then that node is the index of the smallest\
    \ odd value in that node.\nFor example if the input array is this array:\n<code>\n\
    [\n    0 => [\n        'value' => 0,\n        'index' => 0\n    ],\n    1 => [\n\
    \        'value' => 1,\n        'index' => 1\n    ],\n    2 => [\n        'value'\
    \ => 3,\n        'index' => 2\n    ],\n    3 => [\n        'value' => 4,\n   \
    \     'index' => 3\n    ],\n    4 => [\n        'value' => 5,\n        'index'\
    \ => 4\n    ],\n    5 => [\n        'value' => 6,\n        'index' => 5\n    ]\n\
    ]\n</code>\nThen it will output the following array:\n<code>\n[\n    0 => [\n\
    \        'value' => 0,\n        'index' => 0\n    ],\n    1 => [\n        'value'\
    \ => 1,\n        'index' => 1\n    ],\n    2 => [\n        'value' => 3,\n   \
    \     'index' => 2\n    ],\n    3 => [\n        'value' => 4,\n        'index'\
    \ => 3\n    ],\n    4 => [\n        'value' => 5,\n        'index' => 4\n    ],\n\
    \    5 => [\n        'value' => 6,\n        'index' => 5\n    ],\n    6 => [\n\
    \        'value' => 6,\n        'index' => 6\n    ],\n    7 => [\n        'value'\
    \ => 6,\n        'index' => 7\n    ],\n    8 => [\n        'value' => 6,\n   \
    \     'index' => 8\n    ],\n    9 => [\n        'value' => 6,\n        'index'\
    \ => 9\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9b35ca8y.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $value) {\n        if (is_numeric($value)) {\n         \
    \   if ($value % 2 !== 0) {\n                $result[] = [$value, array_search($value,\
    \ $arr)];\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuscfimk3.php:44\n\
    Stack trace:\n#0 /tmp/tmpuscfimk3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpuscfimk3.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($x) { return $x % 2 === 0; });\n    return array_search(min($evens),\
    \ $evens);\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI used the Sieve of Eratosthenes\
    \ algorithm to find the prime numbers below 1000 and then removed the multiples\
    \ of each prime number from the set of numbers. Then all that was left was the\
    \ primes below 1000. Here is a code example:\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpthlztq0j.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        $currentNode\
    \ = $arr[$i];\n        if ($currentNode % 2 === 0)\n            $even[] = $currentNode;\n\
    \        else\n            $odd[] = $currentNode;\n    }\n    $smallestEven =\
    \ min(array_merge($even, $odd));\n    $smallestOdd = array_search($smallestEven,\
    \ array_reverse($even));\n    return [$smallestEven, $smallestOdd];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm07ly2or.php:47\n\
    Stack trace:\n#0 /tmp/tmpm07ly2or.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpm07ly2or.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $return = [];\n\n\
    \    foreach ($arr as $key => $value) {\n        if ($key % 2 === 0) {\n     \
    \       $return[] = [$value, $key];\n        }\n    }\n\n    return $return;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\nYou can do it in two ways:\n\
    \nIterate the array and create new array from odd indexes.\nCreate a map of odd\
    \ and even index and then sort the array by odd/even index.\n\nI think approach\
    \ 2 is better for this kind of situation.\n<code>\n$arr = [4,2,3]; \n$map = [];\
    \ // Map where odd index is key and even index is value\n\nforeach ($arr as $key\
    \ => $value) {\n    $map[$key] = $value;\n}\n\nksort($map); // Sort the map by\
    \ key and value\n$newArr = [];\n\nforeach ($map as $key => $value) {\n    $newArr[]\
    \ = $value;\n}\n\nprint_r($newArr);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\nYou can use the below code it also return an array\n<code>\n$arr = [4,2,3];\
    \ \n$newArr = [];\n\nforeach ($arr as $key => $value) {\n    $newArr[$key] = $value;\n\
    }\n\nksort($newArr); // Sort the map by key and value\n$newArr = [];\n\nforeach\
    \ ($newArr as $key => $value) {\n    $newArr[$key] = $value;\n}\n\nprint_r($newArr);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\nYou can use this code\n<code>\n\
    $arr = [4,2,3]; \n$newArr = [];\n\nforeach ($arr as $key => $value) {\n    $newArr[$key]\
    \ = $value;\n}\n\nksort($newArr); // Sort the map by key and value\n$newArr =\
    \ [];\n\nforeach ($newArr as $key => $value) {\n    $newArr[$key] = $value;\n\
    }\n\nprint_r($newArr);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n\
    <code>\n$arr = [4,2,3]; \n$newArr = [];\n\nforeach ($arr as $key => $value) {\n\
    \    $newArr[$key] = $value;\n}\n\nksort($newArr); // Sort the map by key and\
    \ value\n$newArr = [];\n\nforeach ($newArr as $key => $value) {\n    $newArr[$key]\
    \ = $value;\n}\n\nprint_r($new\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptuxcvyj3.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $minValue = PHP_INT_MAX;\n    $minIndex = 0;\n    \n    for($i = 0; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] % 2 === 0) {\n            $minValue\
    \ = min($minValue, $arr[$i]);\n            $minIndex = $i;\n        } else {\n\
    \            if ($minValue !== PHP_INT_MAX) {\n                $result[] = [$minValue,\
    \ $minIndex];\n            }\n            $minValue = PHP_INT_MAX;\n         \
    \   $minIndex = 0;\n        }\n    }\n    \n    return $result !== [] ? $result\
    \ : [];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmn1qr24.php:53\n\
    Stack trace:\n#0 /tmp/tmpsmn1qr24.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpsmn1qr24.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even_values = [];\n\
    \    $even_value_arr = [];\n    for($i = 0; $i < count($arr); $i++){\n       \
    \ if($arr[$i] % 2 == 0){\n            $even_values[] = $arr[$i];\n           \
    \ array_push($even_value_arr, $arr[$i]);\n        }\n    }\n    if(count($even_values)\
    \ == 0){\n        return [];\n    }\n    $sorted_array = array_reverse($even_values);\n\
    \    foreach($sorted_array as $val){\n        $lowest_val = min($sorted_array);\n\
    \        if($val == $lowest_val){\n            $index = 0;\n            for($i\
    \ = 0; $i < count($sorted_array); $i++){\n                if($sorted_array[$i]\
    \ == $lowest_val){\n                    $index = $i;\n                }\n    \
    \        }\n            array_push($even_value_arr, $val);\n            return\
    \ [$lowest_val, $index];\n        }\n    }\n    return [];\n}\n\n$arr = [5,0,3,0,4,2];\n\
    $result = pluck($arr);\necho '<pre> Given array is '.print_r($arr, 1).'</pre>';\n\
    echo '<pre> The minimum number is '.$result[0].', and index '.$result[1].'</pre>';\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre> Given array is Array\n(\n    [0] => 5\n    [1] => 0\n    [2] => 3\n\
    \    [3] => 0\n    [4] => 4\n    [5] => 2\n)\n</pre><pre> The minimum number is\
    \ 0, and index 3</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7s00os4x.php:66\n\
    Stack trace:\n#0 /tmp/tmp7s00os4x.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp7s00os4x.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    if (count($arr) < 1) {\n        return $result;\n    }\n    $min_value =\
    \ min($arr);\n    $i = 0;\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value <= $min_value) {\n            if ($value == 0) {\n                $result[]\
    \ = $key;\n            } else {\n                $result[] = [$value, $key];\n\
    \            }\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu28ciart.php:52\n\
    Stack trace:\n#0 /tmp/tmpu28ciart.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpu28ciart.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n\
    \    foreach($arr as $key => $val){\n        if( $val >= $min ){\n           \
    \ $min = PHP_INT_MAX;\n        }\n        else{\n            $min = min($val,\
    \ $min);\n        }\n    }\n    $result = array();\n    $result[] = $min;\n  \
    \  foreach($arr as $key => $val){\n        if( $val >= $min ){\n            $result[]\
    \ = $key;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4oyuuv9x.php:52\n\
    Stack trace:\n#0 /tmp/tmp4oyuuv9x.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp4oyuuv9x.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array_filter($arr,\
    \ function($v){ return ($v & 1) == 0;});\n    $even = array_unique($even);\n \
    \   if (count($even)) {\n        $index = array_search(min($even), $even);\n \
    \       return [min($even), $index];\n    } else {\n        return [];\n    }\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=php,algorithm |>\nWe can sort\
    \ the array according to its value, then pick one of the two highest indexes (using\
    \ min() function).\n<code>\n$input = [\n    4, 2, 3,\n    1, 2, 3\n];\n</code>\n\
    <code>\n$sorted = array_map(function($v){\n    return $v < 2 ? $v : $v - 1;\n\
    }, $input);\n$sorted = array_unique($sorted);\n$sorted = array_map(function($v){\n\
    \    return $v < 2 ? $v : $v - 1;\n}, $sorted);\n\n$min = [\n    max($sorted),\n\
    \    min(array_keys($sorted))\n];\n</code>\nResult:\n<code>\n$min is [\n    2\
    \ => 1,\n    1 => 2\n]\n</code>\n<code>\n$input = [\n    4, 2, 3, 0,\n    1, 2,\
    \ 3\n];\n</code>\n<code>\n$sorted = array_map(function($v){\n    return $v < 2\
    \ ? $v : $v - 1;\n}, $input);\n$sorted = array_unique($sorted);\n$sorted = array_map(function($v){\n\
    \    return $v < 2 ? $v : $v - 1;\n}, $sorted);\n\n$min = [\n    max($sorted),\n\
    \    min(array_keys($sorted))\n];\n</code>\nResult:\n<code>\n$min is [\n    2\
    \ => 1,\n    1 => 3\n]\n</code>\n<|/ a |>\n<| a |>\nI have found this solution\
    \ more simpler for the question.\nFirst we sort the array according to value and\
    \ store it into a separate variable\nThen we extract only the first two highest\
    \ values from that array and remove duplicates. \n<code>\n<?php\n$a = [4,2,3,0,1,2,3];\n\
    $b = aSort($a);\n$c = array_slice($b, -2);\n$d = array_unique($c);\n\n$firstTwo\
    \ = max($d);\n$index = array_search($firstTwo, $d);\n$minValue = $a[$index];\n\
    echo \"$minValue has the smallest even value. \";\necho \"Its index is $index\"\
    ;\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5p4rpv56.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = min($arr);\n\
    \    foreach ($arr as $key => $value) {\n        if ($value < $min && ($value\
    \ % 2 == 0)) {\n            return [$value, $key];\n        }\n    }\n    return\
    \ [];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"<p>Given an array\
    \ representing a branch of a tree that has non-negative integer nodes\nyour task\
    \ is to pluck one of the nodes and return it.\nThe plucked node should be the\
    \ node with the smallest even value.\nIf multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\nThe plucked node\
    \ should be returned in a list, [ smalest_value, its index ],\nIf there are no\
    \ even values or the given array is empty, return [].\nExample 1:\nGiven [4,2,3]:\n\
    $arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\nOutput: [2, 1]\nExplanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\nGiven\
    \ [1,2,3]:\n$arr = [1,2,3];\n$result = pluck($arr);\nprint_r($result);\nOutput:\
    \ [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    Example 3:\nGiven []:\n$arr = [];\n$result = pluck($arr);\nprint_r($result);\n\
    Output: []\nExplanation: As above.\nExample 4:\nGiven [5, 0, 3, 0, 4, 2]:\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\n$result = pluck($arr);\nprint_r($result);\nOutput: [0,\
    \ 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will\
    \ choose the first zero, which has the smallest index.\n</p>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<p>Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest even value.\nIf multiple nodes with\
    \ the same smallest even value are found return the node that has smallest index.\n\
    The plucked node should be returned in a list, [ smalest_value, its index ],\n\
    If there are no even values or the given array is empty, return [].\nExample 1:\n\
    Given [4,2,3]:\nArray = [4,2,3];\nArray = pluck(Array);\nprint_r(Array);\nOutput:\
    \ [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    Example 2:\nGiven [1,2,3]:\nArray = [1,2,3];\nArray = pluck(Array);\nprint_r(Array);\n\
    Output: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\nGiven []:\nArray = [];\nArray = pluck(Array);\nprint_r(Array);\n\
    Output: []\nExplanation: As above.\nExample 4:\nGiven [5, 0, 3, 0, 4, 2]:\nArray\
    \ = [5, 0, 3, 0, 4, 2];\nArray = pluck(Array);\nprint_r(Array);\nOutput: [0, 1]\n\
    Explanation: 0 is the smallest value, but  there are two zeros,\nso we will choose\
    \ the first zero, which has the smallest index.\n</p>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9grw5_jx.php:80\nStack trace:\n#0 /tmp/tmp9grw5_jx.php(90):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9grw5_jx.php on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($val) {\n        return $val % 2 === 0;\n    });\n    $evens = array_map(function($val,\
    \ $key){\n        return $val % 2;\n    }, $evens, array_keys($arr));\n\n    $min\
    \ = 0;\n    $minIndex = -1;\n\n    foreach($evens as $val) {\n        if($val\
    \ < $min) {\n            $min = $val;\n            $minIndex = $key;\n       \
    \ }\n    }\n    if ($minIndex === -1) {\n        return [];\n    }\n    return\
    \ [$min, $minIndex];\n}\n\n$arr1 = [4,2,3];\n$arr2 = [1, 2, 3];\n$arr3 = [];\n\
    $arr4 = [5, 0, 3, 0, 4, 2];\n\nvar_dump(pluck($arr1));\nvar_dump(pluck($arr2));\n\
    var_dump(pluck($arr3));\nvar_dump(pluck($arr4));\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\narray(0) {\n}\narray(0) {\n}\narray(0) {\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpuiyrz_xl.php:65\nStack trace:\n\
    #0 /tmp/tmpuiyrz_xl.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpuiyrz_xl.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr);\n  \
    \  $result = [];\n    $result[] = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        $smallest_value = $arr[$i];\n        $smallest_index = 0;\n\
    \        for ($j = $i; $j < count($arr); $j++) {\n            if ($arr[$j] % 2\
    \ === 0 && $arr[$j] < $smallest_value) {\n                $smallest_value = $arr[$j];\n\
    \                $smallest_index = $j;\n            }\n        }\n        $result[]\
    \ = $smallest_value;\n        $result[] = $smallest_index;\n    }\n    return\
    \ $result;\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\n\
    var_dump(pluck($arr));\n\n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0,\
    \ 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\n</code>\nThe output (for me) is:\n\
    <code>\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n\
    }\narray(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\n</code>\nBut I believe\
    \ there is something wrong with this solution.\n<|/ q tags=algorithm,sorting,php\
    \ |>\n<| c |>\nCan you please provide some sample inputs and outputs?\n<|/ c |>\n\
    <| c |>\nI added 2 examples to the question.\n<|/ c |>\n<| a dscore=0 tags=algorithm,sorting,php\
    \ |>\nYou don't actually need to sort the array first.  \n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzn3pooka.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $hash = [];\n  \
    \  $index = [];\n    foreach($arr as $key => $value) {\n        $index[$value]\
    \ = $key;\n    }\n    asort($index);\n    foreach($index as $key => $value) {\n\
    \        if($value % 2 === 0) {\n            if(!isset($hash[$value])) {\n   \
    \             $hash[$value] = $key;\n            }\n            else {\n     \
    \           $hash[$value] = $index;\n            }\n        }\n    }\n    return\
    \ $hash;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI think you didn't read\
    \ the last part. The array is non-negative. The task is to return the smallest\
    \ even number **and** its index.\n<|/ c |>\n<| c |>\nHi, yes, I read that. But\
    \ the explanation is vague and I'm sure you can understand that :)\n<|/ c |>\n\
    <| c |>\nYeah, I get it. Sorry. :(\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    <?php\n$array = [4,2,3];\n$i = 0;\n$largestEvenIndex = [];\n$largestEvenValue\
    \ = -1;\n$largestEven = $array[0];\nforeach($array as $key => $value) {\n    if($value\
    \ % 2 == 0) {\n        if($value > $largestEvenValue) {\n            $largestEvenIndex\
    \ = $key;\n            $largestEvenValue = $value;\n        }\n        $largestEven\
    \ = $value;\n    }\n}\necho $largestEvenIndex;\necho $largestEvenValue;\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is not correct, as the OP wants to return the\
    \ smallest even number and its index, not just its value.\n<|/ c |>\n<| c |>\n\
    He can return index with it.\n<|/ c |>\n<| c |>\nI know, but you're not returning\
    \ any value if the array is empty. I'm saying that you shouldn't rely on the OP's\
    \ code, as it doesn't make any sense to return just the index.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nThe function below finds the lowest odd number, and the index of\
    \ that number in the array. You can modify it to return the array index as well.\n\
    <code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcmavjsgc.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = array_shift($arr);\n\
    \    foreach ($arr as $val) {\n        if ($val % 2 == 0) {\n            if ($val\
    \ < $min) {\n                $min = $val;\n            }\n        } else {\n \
    \           return [$min, $arr];\n        }\n    }\n    return [];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8p0tulh.php:46\n\
    Stack trace:\n#0 /tmp/tmp_8p0tulh.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_8p0tulh.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $count = count($arr);\n\
    \    $index = 0;\n    $even = array();\n    foreach ($arr as $val) {\n       \
    \ if ($val % 2 == 0) {\n            $even[] = $val;\n        }\n    }\n    if\
    \ (empty($even)) {\n        return array();\n    }\n    $min = array_shift($even);\n\
    \    $minIndex = 0;\n    foreach ($even as $val) {\n        if ($val == $min)\
    \ {\n            $minIndex = $index;\n        }\n        $index++;\n    }\n  \
    \  return array($min, $minIndex);\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtbhydyi.php:55\n\
    Stack trace:\n#0 /tmp/tmpvtbhydyi.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpvtbhydyi.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arrLen = $arr instanceof\
    \ \\stdClass ? \\count($arr) : \\count($arr);\n    if ($arrLen <= 0) {\n     \
    \   return [];\n    }\n    $index = 0;\n    $nodes = [];\n    $smallestEven =\
    \ null;\n    $smallestIndex = -1;\n    $evenValue = null;\n    $evenValues = [];\n\
    \    for ($i = 0; $i < $arrLen; ++$i) {\n        $node = new \\stdClass();\n \
    \       $node->value = $arr[$i];\n        $node->index = $index;\n        $node->even\
    \ = \\is_int($arr[$i]) ? $arr[$i] % 2 === 1 : 0;\n        if ($node->even ===\
    \ true) {\n            $evenValues[$node->value] = $node->index;\n        }\n\
    \        if (isset($evenValues[$node->value])) {\n            $evenValue = $node->value;\n\
    \        }\n        if ($evenValue !== null && $smallestEven === null) {\n   \
    \         $smallestEven = $evenValue;\n            $smallestIndex = $evenValues[$node->value];\n\
    \        } elseif ($evenValue !== null && $smallestEven !== null && $node->index\
    \ > $evenValues[$smallestEven]) {\n            $smallestEven = $evenValue;\n \
    \           $smallestIndex = $evenValues[$node->value];\n        }\n        $nodes[]\
    \ = $node;\n        $index += $node->even;\n    }\n    return ($smallestEven !==\
    \ null) ? ([$smallestEven, $smallestIndex]) : ([]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp582ggz8g.php:67\n\
    Stack trace:\n#0 /tmp/tmp582ggz8g.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp582ggz8g.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (is_null($arr)\
    \ || count($arr) < 1)\n        return null;\n    $min = array();\n    $min_index\
    \ = 0;\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $index = $key + 1;\n            $arr[$key] = $value;\n          \
    \  if ($value < $min[$key]) {\n                $min[$key] = $value;\n        \
    \        $min_index = $index;\n            }\n        }\n    }\n    if (!empty($min))\n\
    \        return [$min[$min_index], $min_index];\n    return [];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e3016wk.php:52\n\
    Stack trace:\n#0 /tmp/tmp2e3016wk.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp2e3016wk.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if ($arr === [])\
    \ {\n        return [];\n    }\n    \n    // Get the length of $arr\n    $length\
    \ = count($arr);\n    \n    // Initialize the $min_index with the first element\
    \ of the array\n    $min_index = 0;\n    \n    // Initialize the $even_values\
    \ and $smalest_value with the first element of the array\n    $even_values = $arr[0];\n\
    \    $smalest_value = $arr[0];\n    \n    // Initialize $smalest_index with $min_index\
    \ and \n    // $current_index with $min_index + 1, and increment $current_index\
    \ \n    // by 1 every time we find a different even value.\n    // While we find\
    \ a different even value, check if the current value of $smalest_value\n    //\
    \ is smaller than the current value of $even_values. If not, we update $smalest_index\n\
    \    // and $current_index to update $smalest_value and $smalest_index with the\
    \ smallest even value.\n    // While we are still searching for the smallest even\
    \ value, update $smalest_value with $even_values\n    // and increment $even_values\
    \ by the current value of the current node.\n    // If we are at the last element\
    \ of the array, then return $smalest_value and $smalest_index\n    while ($length--)\
    \ {\n        // If there are still elements in the array, then increment $min_index\n\
    \        if ($length > 0) {\n            $min_index++;\n        }\n        \n\
    \        // Check if the current value of $smalest_value is smaller than the current\
    \ value of $even_values\n        if ($smalest_value < $even_values) {\n      \
    \      \n            // If $smalest_value is smaller than the current value of\
    \ $even_values, \n            // then we update $smalest_index and $current_index\
    \ to update $smalest_value\n            // and $smalest_index to update $smalest_value\
    \ and $smalest_index with the smallest even value.\n            $smalest_index\
    \ = $min_index;\n            $smalest_value = $even_values;\n            \n  \
    \          // Update the value of $even_values by current value of the current\
    \ node.\n            $even_values += $arr[$min_index];\n        } else {\n   \
    \         \n            // If $smalest_value is not smaller than the current value\
    \ of $even_values\n            // then we update $smalest_index and $current_index\
    \ to update $smalest_value\n            // and $smalest_index to update $smalest_value\
    \ and $smalest_index with the smallest even value.\n            $smalest_index\
    \ = $min_index;\n            $smalest_value = $even_values;\n            \n  \
    \          // Check if the current value of $smalest_value is smaller than the\
    \ current value of $even_values\n            if ($smalest_value < $even_values)\
    \ {\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2zacm_l_.php on line 93\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n     \
    \       $even[$key] = $value;\n        }\n    }\n    $min = min($even);\n    foreach\
    \ ($even as $key => $value) {\n        if ($value == $min) {\n            $min2\
    \ = $key;\n        }\n    }\n    if (empty($arr)) {\n        return [];\n    }\n\
    \    foreach ($arr as $key => $value) {\n        if ($value == $min2) {\n    \
    \        $final = $key;\n        }\n    }\n    return $final;\n}\n$arr = array(\n\
    \    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4,\
    \ 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0,\
    \ 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5,\
    \ 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n  \
    \  [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4,\
    \ 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0,\
    \ 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5,\
    \ 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n  \
    \  [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4,\
    \ 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0,\
    \ 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5,\
    \ 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n  \
    \  [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4,\
    \ 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0,\
    \ 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5,\
    \ 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n  \
    \  [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4,\
    \ 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, 5, 3, 0, 0, 4, 2],\n    [0, \nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl26v6b86.php on line 101\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    foreach ($arr as $value) {\n        $result[] = array(\"value\" => $value,\
    \ \"index\" => $value, \"even\" => ($value % 2 == 0));\n    }\n    foreach ($result\
    \ as $k => $v){\n        $result[$k]['even'] = $result[$k]['even'] || $result[$k]['even']\
    \ === FALSE;\n    }\n    usort($result, 'cmp');\n    return array_pop($result);\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp9co11w_d.php on line 35\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9co11w_d.php:43\nStack\
    \ trace:\n#0 /tmp/tmp9co11w_d.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9co11w_d.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Solution #2\n\
    \    $sorted_arr = array_multisort($arr);\n    return $sorted_arr[1];\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmz9atfu3.php:37\n\
    Stack trace:\n#0 /tmp/tmpmz9atfu3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpmz9atfu3.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    for($i = 0; $i < count($arr); $i++) {\n        if($arr[$i] % 2 === 0) {\n\
    \            $result[] = [$arr[$i], $i];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = array(1, 0, 3, 5, 0);\n\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 0\n\
    \            [1] => 4\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp49gytt1b.php:46\nStack trace:\n#0 /tmp/tmp49gytt1b.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp49gytt1b.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) {\n        return ($n % 2 === 0);\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n\n    $min_even_val = min($evens);\n    return\
    \ array_filter($arr, function($n) use ($min_even_val) {\n        return ($n %\
    \ 2 === 0) && $n === $min_even_val;\n    });\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI came up with similar solution but was worried that `array_filter` might\
    \ not be faster enough. Thanks for the insight!\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ int[] pluck(int array[]) {\n    int minElement = Integer.MAX_VALUE;\n    int\
    \ minIndex = 0;\n    for(int i = 0; i < array.length; i++) {\n        if(array[i]\
    \ < minElement) {\n            minElement = array[i];\n            minIndex =\
    \ i;\n        }\n    }\n    int evenElement = array[minIndex];\n    int[] elements\
    \ = new int[array.length - 1];\n    for(int i = 0; i < array.length - 1; i++)\
    \ {\n        if(array[i] < minElement) {\n            elements[i] = array[i];\n\
    \        } else {\n            elements[i] = evenElement;\n            break;\n\
    \        }\n    }\n    return elements;\n}\n</code>\n<|/ a tags=arrays,algorithm,php\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw4pkjtv4.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($item) {\n        return $item % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0)\n        return [];\n    $smallest = min(array_keys($evens));\n    $index\
    \ = array_search($smallest, $evens);\n    return [\n        'value' => $smallest,\n\
    \        'index' => $index,\n    ];\n}\n\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvd5cr6e.php:46\n\
    Stack trace:\n#0 /tmp/tmpsvd5cr6e.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpsvd5cr6e.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // write your code\
    \ here\n    $result = [];\n    $index = 0;\n    foreach ($arr as $key => $value)\
    \ {\n        if ((($value & 1) == 0) || ($value == 0)) {\n            $result[$value]\
    \ = $value;\n            $index = $key;\n        }\n    }\n    if (count($result)\
    \ == 0) {\n        return [];\n    }\n    $smallest = min(array_keys($result));\n\
    \    $result[$smallest]++;\n    return array_combine(array_keys($result), array_keys($result));\n\
    \    \n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlgl8eqe.php:51\n\
    Stack trace:\n#0 /tmp/tmprlgl8eqe.php(61): test()\n#1 {main}\n  thrown in /tmp/tmprlgl8eqe.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $result = [];\n  $index\
    \ = 0;\n  foreach($arr as $i => $v){\n    $result[] = [$v, $index];\n    if($i\
    \ % 2 == 0){\n      $result[$i][0] += 1;\n      $index++;\n    }\n  }\n  $min\
    \ = $index;\n  foreach($result as $k => $v){\n    if($v[0] < $min){\n      $min\
    \ = $v[0];\n    }\n  }\n  unset($result[$index]);\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ssjyvoz.php:52\n\
    Stack trace:\n#0 /tmp/tmp6ssjyvoz.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp6ssjyvoz.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    \n    // Your code\
    \ here\n    $length = count($arr);\n    $result = [];\n    \n    for($i=0; $i\
    \ < $length; $i++){\n        if($arr[$i] % 2 === 0 && $arr[$i] != 0) {\n     \
    \       $result[] = $arr[$i];\n        }\n    }\n    return $result;\n}\n\n/**\n\
    \ * Solution 2\n *\n * Time complexity:\n * O(n) where n is the length of the\
    \ input array.\n * Space complexity:\n * O(1) -- this does not require any additional\
    \ space.\n *\n * @param $arr\n *\n * @return mixed\n */\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwupjqhj.php:58\n\
    Stack trace:\n#0 /tmp/tmpdwupjqhj.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpdwupjqhj.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = $arr[0];\n\
    \    foreach($arr as $value) {\n        if($value % 2 === 0) {\n            if($value\
    \ < $result) {\n                $result = $value;\n            }\n        }\n\
    \    }\n    return [$result, array_search($result, $arr) + 1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tr3ce_r.php:44\n\
    Stack trace:\n#0 /tmp/tmp9tr3ce_r.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp9tr3ce_r.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    \n    // write your\
    \ code here\n    $result = [];\n    foreach ($arr as $item) {\n        $result[]\
    \ = [$item, array_search($item, array_keys($arr))];\n    }\n    $result = array_filter($result);\n\
    \    asort($result);\n    foreach ($result as $value) {\n        $result[] = $value[1];\n\
    \    }\n    \n    if (empty($arr)) {\n        return [];\n    }\n    \n    foreach\
    \ ($result as $key => $value) {\n        if ($value % 2 == 0) {\n            $result[$key]\
    \ = $value + 1;\n        }\n    }\n    return $result;\n}\n\n$tests = [\n    [\"\
    [4,2,3]\", 2],\n    [\"[1,2,3]\", 2],\n    [\"[]\", 0],\n    [\"[5, 0, 3, 0, 4,\
    \ 2]\", 0],\n];\n\nforeach ($tests as $test) {\n    echo sprintf('Input: %s' .\
    \ PHP_EOL, $test[0]) . PHP_EOL;\n    echo sprintf('Output: %s' . PHP_EOL, pluck($test[0]))\
    \ . PHP_EOL;\n    echo PHP_EOL;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c\
    \ |>\nYou did a good job, and thanks for taking your time to write this solution.\
    \ I think I can understand it better now, but can you point me to some material\
    \ where I can learn these kind of algorithms from scratch? I'd like to learn to\
    \ write code in a proper way, and to learn the basics of programming. Thanks\n\
    <|/ c |>\n<| c |>\nYou can read my comment under your question. I suggest you\
    \ to read algorithms and data structures.\n<|/ c |>\n<| c |>\nI realized I didn't\
    \ read the question properly. I updated my answer to match your needs.\n<|/ c\
    \ |>\n<| c |>\nThank you very much! I learned a lot about algorithms from the\
    \ answer and comments you put there!\n<|/ c |>\n<| a |>\n<code>\n<?php\n$input\
    \ = [4, 2, 3];\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt1_os37s.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array();\n\
    \    $index = 0;\n    $smallest;\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            if ($smallest == null || $value < $smallest)\
    \ {\n                $evens[] = $value;\n                $smallest = $value;\n\
    \                $index = $key;\n            }\n            if ($value == $smallest)\
    \ {\n                $index = $key;\n            }\n        }\n    }\n    return\
    \ $evens ? array($smallest, $index) : [];\n}\n$arr = [4, 2, 3, 1, 7];\n$result\
    \ = pluck($arr);\nprint_r($result);\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5rm8zyw1.php:56\nStack trace:\n#0 /tmp/tmp5rm8zyw1.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5rm8zyw1.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $smaller_even_vals = array_filter($arr, 'is_int');\n    if(count($smaller_even_vals)\
    \ < 1) {\n        return [];\n    }\n    foreach($arr as $key => $value) {\n \
    \       if($value < $smaller_even_vals[0]) {\n            $result[] = $value;\n\
    \            $smaller_even_vals = array_filter($smaller_even_vals, 'is_int');\n\
    \        }\n    }\n    array_multisort($smaller_even_vals, $arr);\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nHi, this is pretty much what\
    \ I was looking for. There is only one issue: it works but returns an array with\
    \ 0 index (index 0). How can I fix this and make it return the minimum value?\n\
    <|/ c |>\n<| c |>\nThanks for the quick answer, I did some more tests and found\
    \ out that it still returns an array with 0 index. If I change your line `$result\
    \ = array_values($result);` to `$result = $result[0];` it returns an array with\
    \ 1 index. How do I get the smallest value?\n<|/ c |>\n<| c |>\nThanks again for\
    \ the quick reply, I tested the code and it works perfectly! Thanks a lot!\n<|/\
    \ c |>\n<| a tags=php dscore=0 |>\nI hope this will work for you. it uses array_filter\
    \ and array_multisort.\n<code>\n<?php\n\n$array = array(\"6\", \"10\", \"8\",\
    \ \"15\", \"7\", \"1\", \"6\", \"15\", \"3\", \"16\", \"11\", \"14\", \"4\", \"\
    9\", \"10\");\n\n$result = array_filter($array);\n$smaller_even_vals = array_filter($result,\
    \ 'is_int');\narray_multisort($smaller_even_vals, $result);\nprint_r($result);\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuypgnrz7.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $arr = array_map(function($v)\
    \ { return is_int($v) ? $v : $v['value'];}, $arr);\n  $min  = $arr[0];\n  $index\
    \ = 0;\n  foreach($arr as $v){\n    if(is_int($v) && $v%2 == 0){\n      if($min<$v)\
    \ $min = $v;\n      $index++;\n    }\n  }\n  return [$min, $index];\n}\n</code>\n\
    <|/ a tags=php,algorithm,math,binary-search-tree |>\n<| c |>\nPlease don't post\
    \ only code as an answer, but also provide an explanation of what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually more helpful and of better quality, and are more likely to attract upvotes\n\
    <|/ c |>\n<| c |>\nHow can you get the index of the smallest even value? As far\
    \ as I understand it you need the index to get the value, but that is not available\
    \ from your answer. I guess the index is available in the first iteration though.\n\
    <|/ c |>\n<| c |>\nYes, you need the index to get the value, but the index is\
    \ available in the first iteration. Or else you'd have the wrong index on the\
    \ first iteration.\n<|/ c |>\n<| c |>\nThe index comes from the `foreach` loop\
    \ - in every iteration of the loop, the index variable gets updated. And the index\
    \ variable is available in the first iteration, because it is set in the line\
    \ just before `return`. The `foreach` loop works from left to right, and every\
    \ iteration of the loop will increment the index variable by one.\n<|/ c |>\n\
    <| a dscore=1 |>\nI wrote this in C++ and it is working fine.\n<code>\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxpwc8uik.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = null;\n \
    \   $minIndex = null;\n    $index = 0;\n\n    // O(N log N) time \n    foreach\
    \ ($arr as $val) {\n        if ($val === $min && $minIndex === null) {\n     \
    \       $minIndex = $index;\n        } elseif ($val === $min && $minIndex !==\
    \ null) {\n            $minIndex++;\n        }\n        if ($min === null) {\n\
    \            $min = $val;\n            $minIndex = 0;\n        } elseif ($val\
    \ < $min) {\n            $min = $val;\n            $minIndex = 0;\n        }\n\
    \        $index++;\n    }\n\n    if ($min === null) {\n        return [];\n  \
    \  }\n\n    return [$min, $minIndex];\n}\n\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplr6ltj4k.php:61\n\
    Stack trace:\n#0 /tmp/tmplr6ltj4k.php(71): test()\n#1 {main}\n  thrown in /tmp/tmplr6ltj4k.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest_odd_value\
    \ = 0;\n    $smallest_odd_value_index = 0;\n    $smallest_even_value = $arr[0];\n\
    \    $smallest_even_index = 0;\n\n    for($i = 1; $i < $arr.length; $i++) {\n\
    \        if($arr[$i] % 2 !== 0) {\n            if($smallest_odd_value == 0) {\n\
    \                $smallest_odd_value = $arr[$i];\n                $smallest_odd_value_index\
    \ = $i;\n            }\n            else {\n                if($smallest_odd_value\
    \ < $arr[$i]) {\n                    $smallest_odd_value = $arr[$i];\n       \
    \             $smallest_odd_value_index = $i;\n                }\n           \
    \ }\n        }\n        else {\n            if($smallest_even_value == 0) {\n\
    \                $smallest_even_value = $arr[$i];\n                $smallest_even_index\
    \ = $i;\n            }\n            else {\n                if($smallest_even_value\
    \ < $arr[$i]) {\n                    $smallest_even_value = $arr[$i];\n      \
    \              $smallest_even_index = $i;\n                }\n            }\n\
    \        }\n    }\n\n    $result = array($smallest_odd_value, $smallest_odd_value_index);\n\
    \    if($smallest_even_value != 0 && $smallest_even_index != 0) {\n        $result[]\
    \ = $smallest_even_value;\n        $result[] = $smallest_even_index;\n    }\n\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=0 tags=php,algorithm,arrays |>\n\
    <| a dscore=0 tags=php,algorithm,arrays |>\nThis solution runs in O(n) time:\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpirsywykl.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr);\n  \
    \  \n    $evens = array_filter($arr, function($v) use($arr) {\n        return\
    \ $v % 2 === 0;\n    });\n    if(count($evens) > 0)\n    {\n        return min($evens);\n\
    \    }\n    return [];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt09a4ame.php:44\n\
    Stack trace:\n#0 /tmp/tmpt09a4ame.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpt09a4ame.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $even[$key] = $value;\n        }\n    }\n    return $even;\n}\n<|/ file\
    \ ext=.php source=github filename=Solution.php |>\n<| c |>\nWhat have you tried?\
    \  Please post any code.  Do you understand what the code does?  If so, can you\
    \ devise a solution that you think will work?  If not, can you think of a way\
    \ to code the solution?\n<|/ c |>\n<| c |>\nI added some comments above, please\
    \ check it out\n<|/ c |>\n<| a tags=arrays,php dscore=0 |>\nTry this out:\n<code>\n\
    <?php\n/**\n * Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n * your task is to pluck one of the nodes and return it.\n *\
    \ The plucked node should be the node with the smallest even value.\n * If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n * The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n * If there are no even values or the given array is empty, return\
    \ [].\n * Example 1:\n * Input: [4,2,3]\n * Output: [2, 1]\n * Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n * Example 2:\n\
    \ * Input: [1,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n * Example 3:\n * Input: []\n * Output:\
    \ []\n * Example 4:\n * Input: [5, 0, 3, 0, 4, 2]\n * Output: [0, 1]\n * Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n * so we will choose the\
    \ first zero, which has the smallest index.\n * Constraints:\n * * 1 <= nodes.length\
    \ <= 10000\n * * 0 <= node.value\n */\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm1ipjaqk.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    \n    $even = array_filter($arr,\
    \ function($n){ return $n % 2 === 0; });\n    if ( !count($even) )\n        return\
    \ [];\n    \n    $even = array_keys($even);\n    \n    sort($even);\n    \n  \
    \  $smallest_value = reset($even);\n    \n    sort($arr);\n    \n    $smallest_index\
    \ = array_search(min($arr), $arr);\n    \n    return [ $smallest_value, $smallest_index\
    \ ];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_ueif2e.php:50\n\
    Stack trace:\n#0 /tmp/tmps_ueif2e.php(60): test()\n#1 {main}\n  thrown in /tmp/tmps_ueif2e.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   $evens_index = [];\n    $count = count($arr);\n\n    for($i = 0; $i < $count;\
    \ $i++) {\n        if($i % 2 == 0) {\n            $evens[] = $arr[$i];\n     \
    \       $evens_index[] = $i;\n        }\n    }\n\n    asort($evens);\n    asort($evens_index);\n\
    \n    return $evens;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n\
    <code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm7r93z3x.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $index = 0;\n  \
    \  $min = PHP_INT_MAX;\n    $plucked = [];\n\n    foreach ($arr as $key => $val)\
    \ {\n        if ($val == 0 || $val < 0) {\n            $index = 0;\n        }\n\
    \        if ($val % 2 == 0) {\n            if ($val < $min) {\n              \
    \  $min = $val;\n                $plucked = $key;\n                $index = $key;\n\
    \            }\n            $index++;\n        }\n    }\n\n    if ($min == PHP_INT_MAX)\
    \ {\n        return [];\n    }\n\n    $plucked = $plucked[$index];\n    return\
    \ [\n        (int)$min, $index\n    ];\n}\n\n$arr = [-4, -2, -3, 0, 2, 4];\nvar_dump(pluck($arr));\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(-4)\n  [1]=>\n  int(3)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpazebf5gl.php:63\nStack trace:\n#0 /tmp/tmpazebf5gl.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpazebf5gl.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  foreach ($arr as $k => $v) {\n        if ($v % 2 == 0) {\n            $even[$k]\
    \ = $v;\n        }\n    }\n    $result = min($even);\n    foreach ($even as $k\
    \ => $v) {\n        if ($v == $result) {\n            return $k;\n        }\n\
    \    }\n    return [];\n}\n\n$a = [5,0,3,0,4,2];\nvar_dump(pluck($a));\n\n$a =\
    \ [1, 2, 0, 3, 6, 8, 5];\nvar_dump(pluck($a));\n\n$a = array();\nvar_dump(pluck($a));\n\
    \n$a = array(0, 1, 0, 3, 6, 8, 5);\nvar_dump(pluck($a));\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a dscore=3 |>\nThe solution is in the comments:\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo5n6j15b.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array_filter($arr,\
    \ 'is_int');\n    if (empty($even)) return [];\n    $even = array_filter($even,\
    \ 'is_int');\n    $odd = array_filter(array_reverse($arr), 'is_int');\n    $smallest\
    \ = min($even, min($odd));\n    $smallest_key = array_search(min($even), $even);\n\
    \    $smallest_index = array_search($smallest, $even);\n    return [$smallest,\
    \ $smallest_key];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfinh111.php:43\n\
    Stack trace:\n#0 /tmp/tmpqfinh111.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqfinh111.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    foreach ($arr as $node) {\n        if (isset($result[$node % 2])) {\n   \
    \         if ($result[$node % 2]['index'] > $node) {\n                $result[$node\
    \ % 2]['index'] = $node;\n            }\n        }\n        else {\n         \
    \   $result[$node % 2] = array('value' => $node, 'index' => $node);\n        }\n\
    \    }\n    if (count($result) == 0) {\n        return [];\n    }\n    uasort($result,\
    \ function ($a, $b) {\n        return $a['value'] < $b['value'] ? -1 : $a['value']\
    \ == $b['value'] ? 0 : 1;\n    });\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0pw9k3xq.php:52\n\
    Stack trace:\n#0 /tmp/tmp0pw9k3xq.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp0pw9k3xq.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $ans = array();\n\
    \    foreach ($arr as $val) {\n        if ($val % 2 == 0) {\n            $ans[]\
    \ = $val;\n        }\n    }\n    asort($ans);\n    return $ans;\n}\n\n$arr1 =\
    \ array(4,2,3);\n$arr2 = array(1,2,3);\n$arr3 = array();\n$arr4 = array(0,0,3);\n\
    $arr5 = array(4,0,5);\n\n$arr6 = array(0,0,0);\n\n$arr7 = array(2,1,5);\n\n$arr8\
    \ = array(5);\n\n$arr9 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n\
    $arr10 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n$arr11 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n\
    $arr12 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n$arr13 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n\
    $arr14 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n$arr15 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n\
    $arr16 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n$arr17 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n\
    $arr18 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n$arr19 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n\
    $arr20 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n$arr21 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n\
    $arr22 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n$arr23 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n\
    $arr24 = array(5,4,4,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11);\n$arr25 = array(5,4,4,5,6,6,7,7,\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5h7maq_c.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = max($arr);\n\
    \    $evenIndex = array_search($min, $arr);\n    if ($evenIndex !== false) {\n\
    \        return [$min, $evenIndex];\n    }\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 === 0) {\n            $evenIndex = $key;\n       \
    \ }\n    }\n    return [$min, $evenIndex];\n}\n\n$arr = array(10,20,30,40,50,60);\n\
    \necho pluck($arr);\n</code>\n<|/ a tags=arrays,array-algorithms,php dscore=0\
    \ |>\n<| a tags=arrays,array-algorithms,php |>\nHere you go! It was fun :)\n<code>\n\
    <?php\n\n$a = array(10, 20, 30, 40, 50, 60);\n\nvar_dump($a);\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2zcaoa8m.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n\
    \    $result = array();\n    foreach ($arr as $n) {\n        if ($n % 2 == 0)\
    \ {\n            if ($n < $min) {\n                $min = $n;\n            }\n\
    \        }\n    }\n    return $min == PHP_INT_MAX ? $result : array($min, $min);\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4rvuqa1.php:44\n\
    Stack trace:\n#0 /tmp/tmpb4rvuqa1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpb4rvuqa1.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    foreach($arr as $value) {\n        $even = array();\n        for($i = 0;\
    \ $i < count($arr); $i++) {\n            $odd[$i] = ($arr[$i] + 1) % 2;\n    \
    \    }\n        $index = array_search(min($odd, true), $odd);\n        if(isset($even[$index]))\
    \ {\n            $result[] = $value;\n            return $result;\n        }\n\
    \    }\n    return $result;\n}\n\n$arr = array(0,2,3,1,5);\n$res = pluck($arr);\n\
    print_r($res);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb27ts3ae.php:51\n\
    Stack trace:\n#0 /tmp/tmpb27ts3ae.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpb27ts3ae.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    foreach($arr as $i => $item) {\n        // find min value or min index\n\
    \        $minValue = PHP_INT_MAX;\n        $minIndex = PHP_INT_MAX;\n        foreach($arr\
    \ as $k => $value) {\n            if($value >= $minValue) {\n                $minValue\
    \ = $value;\n                $minIndex = $k;\n            }\n        }\n     \
    \   $result[] = array($minValue, $minIndex);\n    }\n    return array_filter($result);\n\
    }\n$arr = [7, 5, 2, 3, 10, 6, 2, 8, 4, 1, 9, 9, 9, 7, 9];\n$result = pluck($arr);\n\
    echo '<pre>'; print_r($result); echo '</pre>';\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 9223372036854775807\n\
    \            [1] => 9223372036854775807\n        )\n\n    [1] => Array\n     \
    \   (\n            [0] => 9223372036854775807\n            [1] => 9223372036854775807\n\
    \        )\n\n    [2] => Array\n        (\n            [0] => 9223372036854775807\n\
    \            [1] => 9223372036854775807\n        )\n\n    [3] => Array\n     \
    \   (\n            [0] => 9223372036854775807\n            [1] => 9223372036854775807\n\
    \        )\n\n    [4] => Array\n        (\n            [0] => 9223372036854775807\n\
    \            [1] => 9223372036854775807\n        )\n\n    [5] => Array\n     \
    \   (\n            [0] => 9223372036854775807\n            [1] => 9223372036854775807\n\
    \        )\n\n    [6] => Array\n        (\n            [0] => 9223372036854775807\n\
    \            [1] => 9223372036854775807\n        )\n\n    [7] => Array\n     \
    \   (\n            [0] => 9223372036854775807\n            [1] => 9223372036854775807\n\
    \        )\n\n    [8] => Array\n        (\n            [0] => 9223372036854775807\n\
    \            [1] => 9223372036854775807\n        )\n\n    [9] => Array\n     \
    \   (\n            [0] => 9223372036854775807\n            [1] => 9223372036854775807\n\
    \        )\n\n    [10] => Array\n        (\n            [0] => 9223372036854775807\n\
    \            [1] => 9223372036854775807\n        )\n\n    [11] => Array\n    \
    \    (\n            [0] => 9223372036854775807\n            [1] => 9223372036854775807\n\
    \        )\n\n    [12] => Array\n        (\n            [0] => 9223372036854775807\n\
    \            [1] => 9223372036854775807\n        )\n\n    [13] => Array\n    \
    \    (\n            [0] => 9223372036854775807\n            [1] => 9223372036854775807\n\
    \        )\n\n    [14] => Array\n        (\n            [0] => 9223372036854775807\n\
    \            [1] => 9223372036854775807\n        )\n\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpp777fmkj.php:51\nStack trace:\n\
    #0 /tmp/tmpp777fmkj.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpp777fmkj.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr);\n  \
    \  $length = count($arr);\n    if ($length === 0) {\n        return [];\n    }\n\
    \    $index = 0;\n    $even = 1;\n    while ($even < $length) {\n        if ($arr[$even]\
    \ % 2 === 0) {\n            if ($arr[$even] === $arr[$index]) {\n            \
    \    $index++;\n            } else {\n                $arr[$index] = $arr[$even];\n\
    \                $index++;\n            }\n        } else {\n            if ($arr[$even]\
    \ < $arr[$index]) {\n                $arr[$index] = $arr[$even];\n           \
    \     $index++;\n            } else {\n                $even++;\n            }\n\
    \        }\n    }\n    return array_slice($arr, 0, $index);\n}\n\n<|/ file source=github\
    \ |>\n<| a |>\nThis may help you:\n<code>\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkf9lgvj7.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = $arr[0];\n\
    \    $result = [];\n    foreach ($arr as $item) {\n        if ($item % 2 === 0)\
    \ {\n            if ($item < $min) {\n                $min = $item;\n        \
    \        $result = [$item, $item];\n            }\n        } else {\n        \
    \    if ($item < $min) {\n                $result[] = $item;\n            }\n\
    \        }\n    }\n    return $result;\n}\n</code>\nThe code works with any array,\
    \ but it will return only unique numbers. If you want it to return only unique\
    \ numbers, you should use array_unique() php function or you can remove item from\
    \ the array using unset($arr[]) function.\n<|/ a tags=php,arrays,algorithm |>\n\
    <| c |>\nthank you very much, I modified your code little bit to make it work\
    \ like I wanted. \nI added array_unique() to remove duplicate items, and I added\
    \ a loop to check if the value is not already in the array.\n<|/ c |>\n<| a dscore=0\
    \ |>\nYou can try this code, it's working well for me. \n<code>\n<?php\n\n$arr\
    \ = array(4,2,3);\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_x23_olp.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  foreach ($arr as $val) {\n        if (!in_array($val & 1, $even)) {\n     \
    \       $even[] = $val;\n        }\n    }\n    $even = array_filter($even);\n\
    \    if (empty($arr) || count($even) === 0) {\n        return [];\n    }\n   \
    \ $small = min($even);\n    $even = [$small];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value === $small) {\n            $even[] = $key;\n        }\n\
    \    }\n    if (count($even) === 1) {\n        return [$even[0], key($even)];\n\
    \    }\n    $small = min($even);\n    $index = array_search($small, $even);\n\
    \    return [$small, $index];\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nthanks\
    \ for your code, but it is showing wrong output for the input [4,2,3,5,0,5,1,8,4,8,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,8,5,2,3,4,5,2,5,3,5,5,1,\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd7ol15vm.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n\
    \    $min_index = -1;\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value == 0) {\n            $result[] = $value;\n           \
    \ continue;\n        }\n        if ($value < $min && $min_index < $key) {\n  \
    \          $min = $value;\n            $min_index = $key;\n        }\n    }\n\
    \    if ($min == PHP_INT_MAX) {\n        return [];\n    }\n    return [$min,\
    \ $min_index];\n}\n\n$arr = range(1, 5);\n$arr2 = range(1, 5);\n$arr3 = range(1,\
    \ 5);\n$arr4 = range(1, 5);\nvar_dump(pluck($arr)); //array(2) { [0]=> int(2)\
    \ [1]=> int(1) }\nvar_dump(pluck($arr2)); //array(2) { [0]=> int(1) [1]=> int(2)\
    \ }\nvar_dump(pluck($arr3)); //array(2) { [0]=> int(1) [1]=> int(3) }\nvar_dump(pluck($arr4));\
    \ //array(2) { [0]=> int(1) [1]=> int(4) }\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(0)\n}\narray(2) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  int(0)\n}\narray(2) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(0)\n\
    }\narray(2) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(0)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1ikq7ljd.php:61\nStack trace:\n#0 /tmp/tmp1ikq7ljd.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1ikq7ljd.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ <= 0) return [];\n    $smaller_even_numbers = [];\n    $smallest_index = 0;\n\
    \    $smallest_index2 = 0;\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 === 0) {\n            $smallest_index = ($smallest_index > $key)\
    \ ? $smallest_index : $key;\n            $smaller_even_numbers[] = $value;\n \
    \       } else {\n            $smaller_even_numbers[] = $value;\n            if\
    \ ($smallest_index2 > $key) $smallest_index2 = $key;\n        }\n    }\n    if\
    \ (count($smaller_even_numbers) === 0) {\n        return [];\n    }\n    return\
    \ [$smaller_even_numbers[$smallest_index], $smallest_index2];\n}\n\n$result =\
    \ pluck($arr);\n\nvar_dump($result);\n</code>\n<|/ a tags=arrays,php,algorithm,sorting\
    \ |>\n<| a tags=arrays,php,algorithm,sorting |>\nYou can't do it with any built-in\
    \ functions. You need to write your own array sorting function. \nI guess the\
    \ function should look like this: \n<code>\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3dlj3yju.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $minIndex = -1;\n\
    \  $minVal = -1;\n  $even = -1;\n  foreach ($arr as $val) {\n    if ($val % 2\
    \ === 0) {\n      $even = $val;\n      $minIndex = $even;\n      $minVal = $val;\n\
    \    } else if ($val < $minVal) {\n      $minVal = $val;\n      $minIndex = $even;\n\
    \    }\n  }\n  return $minVal;\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgwdj11m.php:48\n\
    Stack trace:\n#0 /tmp/tmptgwdj11m.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptgwdj11m.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) {\n        return ($n % 2 === 0);\n    });\n    if (count($evens)\
    \ < 1)\n        return [];\n    $sorted = $evens;\n    usort($sorted, function($a,\
    \ $b) {\n        return $a - $b;\n    });\n    $min = reset($sorted);\n    $idx\
    \ = array_search($min, $sorted);\n    return [$min, $idx];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpushu4xvp.php:47\n\
    Stack trace:\n#0 /tmp/tmpushu4xvp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpushu4xvp.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = $arr[0];\n\
    \    $minIndex = 0;\n    $even = false;\n    for ($i = 0; $i < $arr.length; $i++)\
    \ {\n        if ($arr[$i] % 2 === 0) {\n            $even = true;\n        }\n\
    \        if ($even && $arr[$i] < $min) {\n            $min = $arr[$i];\n     \
    \       $minIndex = $i;\n            $even = false;\n        }\n    }\n    return\
    \ [$min, $minIndex];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmphp8kopbg.php on line 31\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmphp8kopbg.php:49\nStack\
    \ trace:\n#0 /tmp/tmphp8kopbg.php(59): test()\n#1 {main}\n  thrown in /tmp/tmphp8kopbg.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    return array_filter($arr,\n\
    \        function ($value) {\n            return ($value % 2 === 0);\n       \
    \ }\n    );\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenr8ruks.php:39\n\
    Stack trace:\n#0 /tmp/tmpenr8ruks.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpenr8ruks.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!$arr) {\n \
    \       return [];\n    }\n    $min = array_reduce($arr, function ($carry, $item)\
    \ {\n        return $carry > $item ? $carry : $item;\n    }, array_keys($arr));\n\
    \    $even = array_filter($arr, function ($item) use ($min) {\n        return\
    \ $item % 2 === 0;\n    });\n    $len = count($arr);\n    $index = 0;\n    $result\
    \ = array();\n    while ($index < $len) {\n        if (in_array($min, $even))\
    \ {\n            $result[] = array($min, $index++);\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $n = count($arr);\n\
    \    $min = 0;\n    $index = 0;\n    \n    foreach ($arr as $k) {\n        if\
    \ ($k % 2 === 0) {\n            if ($k < $min) {\n                $min = $k;\n\
    \            }\n            $index = $k;\n        }\n    }\n    \n    return [$min,\
    \ $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgm0zcxl1.php:49\n\
    Stack trace:\n#0 /tmp/tmpgm0zcxl1.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpgm0zcxl1.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ % 2 == 0) {\n            $even[$i] = $arr[$i];\n        } else {\n         \
    \   $odd[$i] = $arr[$i];\n        }\n    }\n    $result = array_values(array_intersect($even,\
    \ $odd));\n    if (count($result) == count($even)) {\n        return $result;\n\
    \    }\n    $smallest_even = min($even);\n    $smallest_odd = min($odd);\n   \
    \ $result = array_filter($result, function ($item) use ($smallest_even, $smallest_odd)\
    \ {\n        return $item == $smallest_even;\n    });\n    if (count($result)\
    \ == count($even)) {\n        return $result;\n    }\n    $smallest_value = $smallest_even;\n\
    \    $smallest_index = array_search($smallest_value, $result);\n    return [$smallest_value,\
    \ $smallest_index];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nWe can use\
    \ array_filter to filter the array and then use min() to get the smallest element.\n\
    <code>\n<?php\n\n$test = [1,2,3,4,5,6,7,8,9,10];\n\n$result = array_filter(\n\
    \    $test,\n    function($n){\n        return ($n % 2) == 0;\n    },\n    ARRAY_FILTER_USE_KEY\n\
    );\n\n$min = min($result);\n\necho \"The smallest even value is $min and its index\
    \ is: $result[array_search($min, $result)]\";\n</code>\nOutput:\nThe smallest\
    \ even value is 2 and its index is: 3\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(1, 5, 7, 9, 11, 13, 15, 17, 19);\n$odd =\
    \ array_filter($numbers, function($n) { return $n % 2; });\n$even = array_filter($numbers,\
    \ function($n) { return !($n % 2); });\n$result = array_intersect($even, $odd);\n\
    $min = $result[0];\n$index = $result[1];\necho \"Smallest even number: \" . $min\
    \ . \", index: $index\";\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n\
    <?php\n$numbers = array(1, 5, 7, 9, 11, 13, 15, 17, 19);\n$odd = array_filter($numbers,\
    \ function($n) { return $n % 2; });\n$even = array_filter($numbers, function($n)\
    \ { return !($n % 2); });\n$result = array_intersect($even, $odd);\n$min = $\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6f7y3d0w.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evens = array_filter($arr,\
    \ 'is_int');\n  if (empty($evens)) {\n    return [];\n  }\n  $sorted_evens = array_flip($evens);\n\
    \  return array_search($sorted_evens, min($sorted_evens, true));\n}\n\n/*\nGiven\
    \ an array representing a branch in a tree that has non-negative integer nodes,\n\
    your task is to pluck one of the nodes and return it.\nThe plucked node should\
    \ be the node with the smallest odd value.\nIf multiple nodes with the same smallest\
    \ odd value are found return the node that has smallest index.\nThe plucked node\
    \ should be returned in a list, [ smalest_value, its index ],\nIf there are no\
    \ odd values or the given array is empty, return [].\nExample 1:\nInput: [4,2,3]\n\
    Output: [2, 1]\nExplanation: 2 has the smallest odd value, and 2 has the smallest\
    \ index.\nExample 2:\nInput: [1,2,3]\nOutput: [1, 2]\nExplanation: 1 has the smallest\
    \ odd value, and 2 has the smallest index. \nExample 3:\nInput: []\nOutput: []\n\
    Example 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0]\nExplanation: There is no odd\
    \ value in this array, so we return an empty array.\nExample 5:\nInput: [4, 2,\
    \ 3]\nOutput: [2, 1]\nExplanation: 2 has the smallest odd value, and 2 has the\
    \ smallest index.\n*/\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93_h2o5v.php:68\n\
    Stack trace:\n#0 /tmp/tmp93_h2o5v.php(78): test()\n#1 {main}\n  thrown in /tmp/tmp93_h2o5v.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter(\n\
    \        $arr, \n        function($v) use ($arr) {\n            return $v % 2\
    \ === 0;\n        }\n    );\n\n    if (!count($evens) || count($arr) === 0) {\n\
    \        return [];\n    }\n\n    $smallest_even_val = array_reduce(\n       \
    \ $evens, \n        function($min, $v) use ($arr) {\n            return ($v ===\
    \ $min) ? $min : $v;\n        }, \n        0\n    );\n\n    foreach ($arr as $k\
    \ => $v) {\n        if ($v === $smallest_even_val) {\n            $smallest_even_val\
    \ = $k;\n            $smallest_even_val_index = array_search($v, $arr);\n    \
    \    }\n    }\n\n    return [$smallest_even_val, $smallest_even_val_index];\n\
    }\n\n$arr = [4, 2, 3];\n$expected = [2, 1];\n$actual = pluck($arr);\nassert($expected\
    \ === $actual);\n\n$arr = [1, 2, 3];\n$expected = [2, 1];\n$actual = pluck($arr);\n\
    assert($expected === $actual);\n\n$arr = [];\n$expected = [];\n$actual = pluck($arr);\n\
    assert($expected === $actual);\n\n$arr = [5, 0, 3, 0, 4, 2];\n$expected = [0,\
    \ 1];\n$actual = pluck($arr);\nassert($expected === $actual);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert($expected === $actual) failed in /tmp/tmp3vgxnjz5.php\
    \ on line 60\n\nWarning: assert(): assert($expected === $actual) failed in /tmp/tmp3vgxnjz5.php\
    \ on line 65\n\nWarning: assert(): assert($expected === $actual) failed in /tmp/tmp3vgxnjz5.php\
    \ on line 75\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vgxnjz5.php:81\n\
    Stack trace:\n#0 /tmp/tmp3vgxnjz5.php(91): test()\n#1 {main}\n  thrown in /tmp/tmp3vgxnjz5.php\
    \ on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if ($arr === null\
    \ || count($arr) === 0) {\n        return [];\n    }\n    foreach ($arr as $val)\
    \ {\n        $minIndex = 0;\n        $minVal = PHP_INT_MAX;\n        foreach ($arr\
    \ as $val2 => $i) {\n            if ($val & 1 === $val2) {\n                if\
    \ ($i < $minVal) {\n                    $minVal = $i;\n                    $minIndex\
    \ = $val2;\n                }\n            }\n        }\n        $result = [$minVal,\
    \ $minIndex];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85mlc9ty.php:55\n\
    Stack trace:\n#0 /tmp/tmp85mlc9ty.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp85mlc9ty.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $length = count($arr);\n\
    \    $count = 0;\n    $smallest = 0;\n\n    foreach($arr as $key => $value) {\n\
    \        if($value == $smallest) {\n            $smallest = ++$key;\n        }\n\
    \        if($count == 0) {\n            $smallest = ++$key;\n        }\n     \
    \   $count++;\n    }\n    if($count == 0) {\n        return [];\n    }\n    $final\
    \ = [$smallest, $count];\n    return $final;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuv83y33.php:53\n\
    Stack trace:\n#0 /tmp/tmpbuv83y33.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpbuv83y33.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    $len = $arr.length;\n    for($i = 0; $i < $len; $i++){\n  \
    \      if($arr[$i] % 2 == 0){\n            $even[] = $arr[$i];\n        }else{\n\
    \            $odd[] = $arr[$i];\n        }\n    }\n\n    $odd_count = count($odd);\n\
    \    $odd_max = max($odd);\n    $odd_min = min($odd);\n\n    if($odd_count ==\
    \ 0){\n        return [];\n    }\n    if($odd_count > $odd_max){\n        return\
    \ array_slice($arr, $odd_min, $odd_count); \n    }\n    if($odd_count == $odd_max){\n\
    \        return [$odd_min, $odd_count];\n    }\n    return [$odd_max, $odd_count];\n\
    }\n\nvar_dump(pluck([1,0,1,1,0,1]));\n</code>\n<|/ a tags=arrays,algorithm,php\
    \ |>\n<| c |>\nCan you clarify what the function is supposed to return? It's very\
    \ hard to read this code.\n<|/ c |>\n<| c |>\nHi, thanks for your answer.  I believe\
    \ it returns 2 arrays: odd and even, where odd contains all the odd numbers, and\
    \ even contains all the even numbers. I hope this helps?\n<|/ c |>\n<| c |>\n\
    I believe I figured out what you are trying to do. Please see the updated solution\n\
    <|/ c |>\n<| a dscore=1 |>\nTry this one...\n<code>\n$array1 = [4,2,3,5,3,0,5,5,3,5,3,2];\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpog9ifuiu.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arr = array_filter($arr,\
    \ function($v){\n        return $v > 0;\n    });\n    return array_search(min($arr),\
    \ $arr);\n}\n\nclass Graph{\n    public $nodes;\n    public $edges;\n\n    public\
    \ function __construct($edges = null, $nodes = null) {\n        $this->nodes =\
    \ [];\n        $this->edges = $edges;\n    }\n\n    public function getNodes()\
    \ {\n        return $this->nodes;\n    }\n\n    public function getEdges() {\n\
    \        return $this->edges;\n    }\n}\n\n$g = new Graph([\n    [ 1 => [2,3,4],\
    \ \n    2 => [5,6], \n    5 => [], \n    3 => [], \n    4 => [], \n    6 => []\
    \ \n], [ [2,5,1,4], [3,6] ]);\n$result = pluck($g->getNodes());\nvar_dump($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpegcd5s0p.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $index = [];\n    foreach($arr as $key => $value) {\n        if($value %\
    \ 2 === 0) {\n            $result[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if(count($index) === 0) {\n        return [];\n    }\n\
    \    $minIndex = array_search(min($result), $result);\n    return [ $result[$minIndex],\
    \ $index[$minIndex] ];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $smallest = null;\n    \n    foreach($arr as $node){\n        if($smallest\
    \ === null || $smallest == $node % 2){\n            $smallest = $node;\n     \
    \   }\n    }\n    \n    $result[] = $smallest;\n    $result[] = ($arr + $smallest)\
    \ % 2;\n    \n    return $result;\n}\n</cell>\n<text>\nQuestions\nWhat if the\
    \ array's length is less than 1000?\nHow can we make this algorithm more efficient?\n\
    \n\n</text>\n<text>\nTest Your Solution\n\n</text>\n<cell>\n%%writefile misc/first_even_index.jl\n\
    \n@testset \"Branch and Tree Problems - First Even Index\" begin\n    \nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp14hmoaq2.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $minKey = PHP_INT_MAX;\n\
    \    $minVal = 0;\n    $minIndex = 0;\n    foreach ($arr as $key => $value) {\n\
    \        if ($key < $minKey) {\n            $minKey = $key;\n            $minVal\
    \ = $value;\n            $minIndex = $key;\n        } elseif ($value < $minVal)\
    \ {\n            $minVal = $value;\n            $minIndex = $key;\n        }\n\
    \    }\n    return [$minVal, $minIndex];\n}\n</code>\n<|/ a tags=php |>\n<| c\
    \ |>\nOhh... I was trying to implement something similar. I didn't notice your\
    \ answer. I will try it out. Thanks for your answer.\n<|/ c |>\n<| c |>\nI was\
    \ trying to implement something similar. I didn't notice your answer. I will try\
    \ it out. Thanks for your answer.\n<|/ c |>\n<| a tags=php |>\nFor this question\
    \ you can use array_filter() function\n<code>\n<?php\n\n$array = [1, 4, 7, 3,\
    \ 8, 2, 5, 6];\n\n$result = array_filter($array, function ($a) {\n    if ($a %\
    \ 2 == 0) {\n        return $a;\n    }\n});\n\nif (count($result)) {\n    $smallestVal\
    \ = array_shift($result);\n} else {\n    $smallestVal = 0;\n}\n\necho \"Smallest\
    \ value: $smallestVal, Index: \" . array_search($smallestVal, $array);\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi0upqlf1.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    return $arr;\n};\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rgdo357.php:36\n\
    Stack trace:\n#0 /tmp/tmp3rgdo357.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3rgdo357.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    return $arr[0];\n\
    }\n\n/**\n * \u9898\u76EE\uFF1A\u7ED9\u5B9A\u4E00\u6761\u94FE\u8868\uFF0C\u4ECE\
    \u4E2D\u5220\u9664\u94FE\u8868\u4E2D\u7684\u6700\u540E\u4E00\u4E2A\u7ED3\u70B9\
    \u3002\u8FD4\u56DE\u8FD9\u6761\u94FE\u8868\u7684\u65B0\u94FE\u8868\u3002\n * \u601D\
    \u8DEF\uFF1A\n * \u9996\u5148\u53EA\u80FD\u5220\u9664\u7684\u6700\u540E\u4E00\u4E2A\
    \u7ED3\u70B9\u7684\u65F6\u5019\u53EF\u4EE5\u7528\u4E00\u4E2A\u94FE\u8868\u6765\
    \u8868\u793A\uFF0C\u8FD9\u91CC\u7684\u7ED3\u70B9\u5C31\u662F\u6700\u540E\u4E00\
    \u4E2A\u7ED3\u70B9\u3002\n * \u7136\u540E\u5229\u7528\u4E00\u8D9F\u6269\u6563\u7684\
    \u65B9\u6CD5\uFF0C\u628A\u5176\u4E2D\u7684\u6700\u540E\u4E00\u4E2A\u7ED3\u70B9\
    \u79FB\u5230\u53E6\u4E00\u4E2A\u94FE\u8868\u7684\u672B\u7AEF\uFF0C\u7136\u540E\
    \u6211\u4EEC\u5C31\u53EF\u4EE5\u5220\u9664\u8FD9\u4E2A\u94FE\u8868\u4E86\u3002\
    \n * \u65F6\u95F4\u590D\u6742\u5EA6\uFF1An \n * \u7A7A\u95F4\u590D\u6742\u5EA6\
    \uFF1AO(1) \n */\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpatwe0pvk.php:44\n\
    Stack trace:\n#0 /tmp/tmpatwe0pvk.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpatwe0pvk.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $odd = 0;\n        foreach ($arr\
    \ as $k => $v) {\n            if ($k != $key && $v & 1) {\n                $odd\
    \ = ($odd & 1) ? $odd : $k;\n            }\n        }\n        if ($odd & 1) {\n\
    \            $result[] = $key;\n        } else {\n            $result[] = $value;\n\
    \        }\n    }\n    return $result;\n}\n\n$result = pluck($input);\n$result\
    \ = array_map(function($i) {\n    return ($i % 2 === 0) ? ($i) : null;\n}, $result);\n\
    \nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzifgzq79.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Write your code\
    \ here\n    \n    if($arr === [] || $arr === NULL){\n        return [];\n    }\n\
    \    \n    $result = [];\n    \n    foreach($arr as $key => $val){\n        if($val\
    \ % 2 == 0){\n            $result[count($result)] = $val;\n        }\n    }\n\
    \    \n    usort($result, function($a, $b){\n        return $a - $b;\n    });\n\
    \    \n    return $result;\n}\n</code>\nThe output is:\n<code>\n[\n    2,\n  \
    \  1\n]\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nYou are not using bubble\
    \ sort at all in bubble sort you just compare the values one by one. But in your\
    \ case you have to compare the values of the array in bubble sort which can be\
    \ done by creating a loop and comparing values one by one.\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjqurzhwh.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr, SORT_NUMERIC);\n\
    \    $even = array_filter($arr, function($elem) { return $elem % 2 == 0; });\n\
    \    if (empty($arr) || empty($even)) {\n        return [];\n    }\n    $min =\
    \ current($even);\n    $index = array_search($min, $arr);\n    if ($index >= 0)\
    \ {\n        return [$min, $index];\n    }\n    $found = false;\n    foreach ($arr\
    \ as $key => $elem) {\n        if ($elem == $min) {\n            $found = true;\n\
    \            if ($key >= $index) {\n                $index = $key;\n         \
    \   }\n        }\n    }\n    if ($found) {\n        return [$min, $index];\n \
    \   }\n    return [];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,php\
    \ |>\n<code>\n<?php\n$array = [\n  1,4,5,8,\n  4,2,7,2,\n  1,4,3,1\n];\n$result\
    \ = array();\n\nsort($array);\n$result = array_filter($array);\necho implode(\"\
    \ \", $result);\n</code>\n<|/ a dscore=0 |>\n<| a |>\nSolution with O(n) time\
    \ and O(n) space\n<code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplwpa_j8g.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $res = array_count_values($arr);\n\
    \    arsort($res);\n    return array_keys($res);\n}\n\n$array = [4,2,3];\n$result\
    \ = pluck($array);\n\nprint_r($result);\n</code>\n<|/ a |>\n<| c |>\n`array_count_values()`\
    \ already sorts values in ascending order. `arsort()` is unnecessary.\n<|/ c |>\n\
    <| c |>\nyes, I used it just to sort the results in the right order, since in\
    \ the question, I see that the elements have to be sorted in ascending order as\
    \ well.\n<|/ c |>\n<| a dscore=0 |>\nThis answer could be rewritten with only\
    \ 1 loop and 2 if-elseif-elseif instead of 8 if-elseif-elseif, but I thought this\
    \ solution would be more readable.\n<code>\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1q77pybb.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $length = count($arr);\n\
    \    for($i = 1;$i<=$length;$i++){\n        if($arr[$i]%2==0){\n            $index\
    \ = array_search($arr[$i], $arr);\n            $arr[$i] = $arr[$index];\n    \
    \        $arr[$index] = $arr[$i];\n            $i--;\n        }\n    }\n    $result\
    \ = array_flip($arr);\n    return $result;\n}\n$arr = array(4,2,3);\n$result =\
    \ pluck($arr);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $index = [];\n    $result = [];\n    foreach($arr as $v) {\n        if($v %\
    \ 2 == 0) {\n            $even[] = $v;\n        } else {\n            $index[]\
    \ = $v;\n        }\n    }\n    sort($even);\n    sort($index);\n    foreach($even\
    \ as $k=>$v) {\n        if($index[$k] == 0) {\n            $result[] = $v;\n \
    \           $result[] = $k;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvey9poy.php:54\n\
    Stack trace:\n#0 /tmp/tmpsvey9poy.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpsvey9poy.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min_value = -1;\n\
    \    $min_index = -1;\n    $count = 1;\n    foreach ($arr as $key => $val) {\n\
    \        if ($val > $min_value) {\n            if ($min_value == 0) {\n      \
    \          $min_value = $val;\n                $min_index = $key;\n          \
    \      $count = 1;\n            } else {\n                if ($val == $min_value)\
    \ {\n                    $count++;\n                } else {\n               \
    \     $min_value = $val;\n                    $min_index = $key;\n           \
    \         $count = 1;\n                }\n            }\n        }\n    }\n  \
    \  return array($min_value, $min_index);\n}\n</code>\n<|/ a tags=php,algorithm,arrays,sorting\
    \ dscore=1 |>\n<| a tags=php,algorithm,arrays,sorting |>\nIn your case, if all\
    \ the values in array are positive, then this would be a good solution.\n<code>\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd1xezy6b.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = $value;\n        }\n    }\n    sort($result);\n\n    if (count($result)\
    \ === 0) {\n        return [];\n    }\n\n    $smallest = array_shift($result);\n\
    \    $result = array_filter($result, function ($value, $key) use ($smallest) {\n\
    \        return $value === $smallest;\n    });\n\n    return $result;\n}\n\n$arr\
    \ = array();\n$arr[] = 4;\n$arr[] = 2;\n$arr[] = 3;\n$result = pluck($arr);\n\
    print_r($result);\n</code>\nResult\n<code>\nArray\n(\n    [0] => 2\n    [1] =>\
    \ 1\n)\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the array is\
    \ empty, or contains multiple zeros, it returns the entire array\n<|/ c |>\n<|\
    \ c |>\nYes, you are right. I have updated my answer now. Thanks.\n<|/ c |>\n\
    <| c |>\nThanks for the answer, but this one just returns the first element in\
    \ the array.\n<|/ c |>\n<| c |>\nYes, I checked it now. Thanks.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nTry this :\n<code>\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqnur3ztx.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $count = 0;\n  \
    \  $temp = $arr[0];\n    $arr[0] = $arr[$count];\n    $arr[$count] = $temp;\n\
    \    $vals = array_filter($arr, function($v) use (&$count) {\n        $count++;\n\
    \        return $v % 2 === 0;\n    });\n    if (count($vals) > 0) {\n        return\
    \ $vals;\n    }\n    return [];\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvvamcz0.php:47\n\
    Stack trace:\n#0 /tmp/tmpyvvamcz0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpyvvamcz0.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $result = [];\n  $result[0]\
    \ = $arr[0];\n  foreach ($arr as $value) {\n    $index = count($result);\n   \
    \ while (true) {\n      $even = true;\n      foreach ($result as $k => $value)\
    \ {\n        if ($value % 2 !== 0) {\n          $even = false;\n          break;\n\
    \        }\n      }\n      if ($even) {\n        $result[$index] = $value;\n \
    \       break;\n      } else {\n        $index++;\n        $result[$index] = $value;\n\
    \      }\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwc5bln2.php:57\n\
    Stack trace:\n#0 /tmp/tmpfwc5bln2.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpfwc5bln2.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    for($i = 0, $l = count($arr); $i < $l; $i++) {\n        $result[] = array_search($i,\
    \ array_filter($arr, function($v) use ($i) {\n                return ($v & 1)\
    \ == 0;\n            }));\n    }\n    return count($result) == 0 ?  array() :\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0a5djrt.php:42\n\
    Stack trace:\n#0 /tmp/tmpr0a5djrt.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpr0a5djrt.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr);\n  \
    \  $odds = array_filter($arr, function ($item) { return $item % 2 === 0; });\n\
    \    $evens = array_filter($arr, function ($item) { return $item % 2 !== 0; });\n\
    \    $smallest;\n    $index;\n    foreach ($odds as $key => $odd) {\n        if\
    \ (isset($evens[$key])) {\n            if ($smallest === null || $smallest > $odd)\
    \ {\n                $smallest = $odd;\n                $index = $key;\n     \
    \       }\n        }\n    }\n    return [$smallest, $index];\n}\n</code>\n<|/\
    \ a tags=php,arrays,algorithm dscore=2 |>\n<| a |>\nI ran into this problem yesterday,\
    \ though it was in Python, here are some Python implementations.\n<code>\ndef\
    \ best_even(nodes, min_val=0):\n    \"\"\" Return the best even value in the list,\
    \ or the minimum value if there is no even value.\n\n    If a node value is below\
    \ ``min_val``, the current node's value will be returned.\n\n    Args:\n     \
    \   nodes (list of integers): List of integers representing the nodes in a binary\
    \ tree.\n        min_val (int): Minimum value that is allowed.\n\n    Returns:\n\
    \        integer: Best even value of the list.\n    \"\"\"\n    if len(nodes)\
    \ == 0:\n        return min_val\n\n    if len(nodes) == 1:\n        if nodes[0]\
    \ <= min_val:\n            return nodes[0]\n\n    return best_even(nodes[:len(nodes)//2],\
    \ min_val)\n\ndef best_odd_index(nodes, min_val=0):\n    \"\"\" Return the best\
    \ odd value in the list, or the minimum value if there is no odd value.\n\n  \
    \  If a node value is below ``min_val``, the current node's index will be returned.\n\
    \n    Args:\n        nodes (list of integers): List of integers representing the\
    \ nodes in a binary tree.\n        min_val (int): Minimum value that is allowed.\n\
    \n    Returns:\n        int: Best odd index of the list.\n    \"\"\"\n    if len(nodes)\
    \ == 0:\n        return min_val\n\n    if len(nodes) == 1:\n        if nodes[0]\
    \ <= min_val:\n            return nodes[0]\n\n    return best_odd_index(nodes[:len(nodes)//2],\
    \ min_val)\n\ndef best_even_index(nodes, min_val=0):\n    \"\"\" Return the best\
    \ even value in the list, or the minimum value if there is no even value.\n\n\
    \    If a node value is below ``min_val``, the current node's index will be returned.\n\
    \n    Args:\n        nodes (list of integers): List of integers representing the\
    \ nodes in a binary tree.\n        min_val (int): Minimum value that is allowed.\n\
    \n    Returns:\n        int: Best even index of the list.\n    \"\"\"\n    return\
    \ best_even(nodes, min_val)[0]\n</code>\n<|/ a tags=php,arrays,algorithm dscore=2\
    \ |>\n<| a tags=php,arrays,algorithm |>\nHere's my implementation in PHP:\n<code>\n\
    $arr = [1,2,3,4,5,6,7,8,\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe8qgyd3i.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arr = array_filter($arr,\
    \ function ($item) {\n        return $item > 0;\n    });\n\n    $sorted_arr =\
    \ $arr;\n    ksort($sorted_arr);\n    $even_values = array_filter($sorted_arr,\
    \ function ($item) {\n        return ($item % 2) === 0;\n    });\n    $index =\
    \ 0;\n    $even_index = 0;\n    $result = array();\n\n    foreach($sorted_arr\
    \ as $item) {\n        if ($item % 2 === 0) {\n            if ($even_index ===\
    \ 0) $result[] = $item;\n            else $result[] = $even_values[$even_index];\n\
    \            $even_index++;\n        } else {\n            $index++;\n       \
    \     $even_index = 0;\n        }\n    }\n\n    return $result;\n}\n\n/**\n *\
    \ Practice test cases here\n */\n$testcases = array(\n    array(array(1, 2, 3),\
    \ array(1)),\n    array(array(3, 2, 1), array(1)),\n    array(array(10, 8, 6,\
    \ 4, 2), array(10, 8)),\n    array(array(5, 3, 2, 1), array(2)),\n    array(array(5,\
    \ 3, 2, 1), array(3)),\n    array(array(5, 3, 2, 1), array()),\n    array(array(),\
    \ array()),\n    array(array(3, 5, 7), array(4, 2, 1)),\n    array(array(3, 1,\
    \ 4, 6), array(4, 2)),\n);\n\n$testcases = array(\n    array(\n        array(\n\
    \            array(2, 3, 0, 1),\n            array(3, 1, 4, 0, 5),\n         \
    \   array(3, 8),\n        ),\n        array(\n            array(\n           \
    \     array(4, 2, 1),\n                array(3, 1),\n                array(2,\
    \ 3),\n            ),\n        ),\n    ),\n    array(\n        array(\n      \
    \      array(3, 4, 0),\n            array(2),\n            array(3, 6),\n    \
    \    ),\n        array(\n            array(\n                array(2, 1),\n  \
    \              array(4, 0, 5),\n            ),\n        ),\n    ),\n    array(\n\
    \        array(\n            array(2, 1),\n            array(3, 6, 0),\n     \
    \   ),\n        array(\n            array(\n                array(4, 2, 1),\n\
    \                array(3, 8),\n            ),\n        ),\n    ),\n);\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79neiv96.php:117\n\
    Stack trace:\n#0 /tmp/tmp79neiv96.php(127): test()\n#1 {main}\n  thrown in /tmp/tmp79neiv96.php\
    \ on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function ($v) {\n        return $v & 1;\n    });\n    if (count($evens) > 0)\
    \ {\n        $minEven = min($evens);\n        return array_search($minEven, $evens);\n\
    \    }\n    return [];\n}\n</code>\n<|/ a dscore=0 tags=arrays,php,multidimensional-array\
    \ |>\n<| c |>\nI tried to run this code, but it is not working, please have a\
    \ look on this link https://ideone.com/j7kztF\n<|/ c |>\n<| c |>\nIt is working\
    \ for me on php5.6 https://3v4l.org/8tWbA\n<|/ c |>\n<| a dscore=0 |>\nI've written\
    \ a recursive function which iterates over the array and finds the node which\
    \ has the smallest even value and returns the value and its index. \n<code>\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgqcg85bu.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $largest = -1;\n\
    \    $smallest = -1;\n    $index = -1;\n    for($i = 0; $i < count($arr); $i++)\
    \ {\n        if($arr[$i] % 2 == 0) {\n            if($smallest == -1 || $arr[$i]\
    \ < $smallest) {\n                $smallest = $arr[$i];\n                $index\
    \ = $i;\n            }\n        } else {\n            if($largest == -1 || $arr[$i]\
    \ > $largest) {\n                $largest = $arr[$i];\n                $index\
    \ = $i;\n            }\n        }\n    }\n    return $largest;\n}\n\nclass KMP\
    \ {\n    // code from https://leetcode.com/articles/kmp-algorithm-for-pattern-search/\n\
    \    private $pattern;\n    private $patternLen;\n    private $patternFound;\n\
    \    private $patternOffset;\n    private $searchStr;\n    private $searchStrLen;\n\
    \    private $searchStrOffset;\n    private $lastCharsMatched;\n\n    function\
    \ __construct($pattern, $searchStr) {\n        $this->pattern = $pattern;\n  \
    \      $this->searchStr = $searchStr;\n        $this->patternLen = count($pattern);\n\
    \        $this->searchStrLen = strlen($searchStr);\n        $this->patternFound\
    \ = false;\n    }\n\n    private function recursiveSearch($indexStart, $indexEnd)\
    \ {\n        if($indexStart >= $this->patternLen) {\n            return $this->patternFound;\n\
    \        }\n\n        if($this->searchStrLen === 0 || $indexStart >= $this->searchStrLen)\
    \ {\n            return false;\n        }\n\n        $char = substr($this->searchStr,\
    \ $indexStart);\n        if($char !== substr($this->pattern, $indexStart, 1))\
    \ {\n            return $this->recursiveSearch($indexStart + 1, $indexEnd);\n\
    \        } else {\n            $indexStart++;\n        }\n\n        $found = true;\n\
    \        for($i = $indexStart + $this->patternLen - 1; $i >= 0 && $found; $i--)\
    \ {\n            if($char !== substr($this->pattern, $i, 1)) {\n             \
    \   $found = false;\n            } else {\n                $indexStart++;\n  \
    \          }\n        }\n\n        if($found) {\n            $this->patternFound\
    \ = true;\n            $this->patternOffset = $indexStart;\n        }\n\n    \
    \    return $this->recursiveSearch($indexStart + 1, $indexEnd);\n    }\n\n   \
    \ public function match() {\n        $this->lastCharsMatched = 0;\n        return\
    \ $this->recursiveSearch(0, $this->searchStrLen);\n    }\n\n    public function\
    \ getOffsetFor($position) {\n        if(!is_int($position) || $position < 0 ||\
    \ $position >= $this->patternLen) {\n            return -1;\n        }\n\n   \
    \     $position += $this->patternOffset;\n        while($position >= 0 && \nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8nb__v9x.php on line 111\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $v) {\n        if (is_int($v) && $v % 2\
    \ == 0) {\n            $even[] = $v;\n        }\n    }\n    if (count($even) ==\
    \ 0) {\n        return [];\n    }\n    $res = min($even);\n    $index = array_search($res,\
    \ $even);\n    if ($index === false) {\n        return [];\n    }\n    $result[]\
    \ = $res;\n    $result[] = $index;\n    return $result;\n}\n\n$res = pluck([0,2,0,3,4,5]);\n\
    echo \"<pre> $res </pre>\";\n</code>\n<|/ a dscore=3 tags=php,arrays |>\n<| a\
    \ tags=php,arrays |>\nHere is another solution that does not involve using an\
    \ auxiliary array:\n<code>\n$input = [2, 0, 3, 4, 5];\n\n$evens = [];\nforeach\
    \ ($input as $e) {\n   if ($e % 2 == 0) {\n      $evens[] = $e;\n   }\n}\n\nif\
    \ (!count($evens)) {\n   // no even numbers found\n   return;\n}\n\n$min = min($evens);\n\
    $index = array_search($min, $evens);\n\nif ($index === false) {\n   // no even\
    \ number found with the minimum value\n   return;\n}\n\necho $min, $index;\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis answer helped me solve a problem in PHP. I had\
    \ two arrays that were the same length (the number of elements) with random numbers.\
    \ I used array_search to find the minimum value in each array and that worked\
    \ well. Then I needed to find the index that had that minimum value. I used array_search\
    \ again and it worked perfectly!\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvgmw8xwa.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr);\n  \
    \  \n    foreach ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n\
    \            $smallest = $value;\n            $smallestIndex = 0;\n          \
    \  $index = -1;\n            for ($i = 0; $i < $key; $i++) {\n               \
    \ if ($arr[$i] === $smallest) {\n                    if ($i === 0) {\n       \
    \                 $smallestIndex = $index;\n                    }\n          \
    \          $index = $i;\n                }\n            }\n            $arr[$key]\
    \ = $smallest;\n            $arr[$smallestIndex] = $key;\n        }\n    }\n \
    \   return $arr;\n}\n\n$arr = [4, 2, 3, 1, 5, 6, 7];\n\n$arr = pluck($arr);\n\n\
    print_r($arr);\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| c |>\nWhile this\
    \ code may provide a solution to the question, it's better to add context as to\
    \ why/how it works. This can help future users learn, and apply that knowledge\
    \ to their own code. You are also likely to have positive feedback from users\
    \ in the form of upvotes, when the code is explained.\n<|/ c |>\n<| c |>\nI added\
    \ an explanation, hope it helps\n<|/ c |>\n<| a tags=php,arrays |>\nHere is another\
    \ solution that is not only based on sorting but also on binary search. This one\
    \ uses array_filter() and max() with array_search() to get the node with the highest\
    \ value. \n<code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvpr8w84k.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $largest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        $largest = PHP_INT_MAX;\n   \
    \     if ($value % 2 === 0) {\n            if ($value < $largest) {\n        \
    \        $largest = $value;\n            }\n        } else {\n            if ($value\
    \ > $largest) {\n                $largest = $value;\n            }\n        }\n\
    \    }\n    $index = 0;\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 === 0) {\n            if ($value < $largest) {\n                $largest\
    \ = $value;\n                $index = $key;\n            }\n        } else {\n\
    \            if ($value > $largest) {\n                $largest = $value;\n  \
    \          }\n        }\n    }\n    if (count($arr) == 0) {\n        return [];\n\
    \    }\n    return [$largest, $index];\n}\n</code>\n<|/ a |>\n<| c |>\nI think\
    \ `pluck` function will not work as expected for array like `[1,2,3,4,5,6,7,8,9,10]`\
    \ it will return `[2,1]` as index not `[2,2]`\n<|/ c |>\n<| c |>\nThe question\
    \ is clearly stated: `Your task is to pluck one of the nodes and return it.\n\
    The plucked node should be the node with the smallest even value.`\n<|/ c |>\n\
    <| a tags=php,arrays,algorithm |>\nHere is a solution in Javascript:\n<code>\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyb_ox4x1.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($key % 2 == 0) {\n      \
    \      $result[] = $value;\n        }\n    }\n    if (count($result)) {\n    \
    \    $result = min(array_keys($result, 0));\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmp70slj7qm.php\
    \ on line 35\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70slj7qm.php:45\n\
    Stack trace:\n#0 /tmp/tmp70slj7qm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp70slj7qm.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function ($val) use ($arr) {\n        return ($val % 2 === 0);\n    });\n  \
    \  $evens = array_keys($evens);\n\n    if (count($evens) == 0) {\n        return\
    \ [];\n    }\n\n    $index = array_search(min($evens), $evens);\n    $smallest\
    \ = min($arr);\n\n    return [ $smallest, $index ];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfftj7l01.php:48\n\
    Stack trace:\n#0 /tmp/tmpfftj7l01.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpfftj7l01.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ < 2) return [];\n    $evens = array_filter($arr, function($x) {\n        return\
    \ ($x & 1) == 0;\n    });\n    if (!count($evens)) return [];\n    $even = array_shift($evens);\n\
    \    $result = array_filter($arr, function($x) use ($even) {\n        if ($x &\
    \ 1) {\n            return false;\n        }\n        return ($x & $even) == 0;\n\
    \    });\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nNice solution but\
    \ my code will run on PHP 7.1 so I couldn't use arrow functions. So I used anonymous\
    \ functions to make it compatible with PHP 7.1\n<|/ c |>\n<| a dscore=0 tags=arrays,php,sorting\
    \ |>\n<code>\n$arr = array(1,5,1,4,2,5,7,8,1,3,9,2,6,9,8,4,8,4,2,1,9,7,4,8);\n\
    $evens = array();\n$even = array_shift($arr);\n$arr2 = array_filter($arr, function($x)\
    \ use ($even){\n    if($x & 1){\n        $evens[] = $x;\n    }\n    return $x\
    \ & $even;\n});\nif(count($arr2) === 0){\n    return [];\n}else{\n    return array_column($arr2,null,1);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI have solved this problem in different\
    \ way. The following code works for me. First I sort the array in ascending order\
    \ then I remove duplicate elements and after that using array_diff I can get the\
    \ difference of given array from the sorted array.\n<code>\n$array = array(4,2,3,1,8);\n\
    $array = array_sort($array);\n$array = array_diff($array, $array[0]);\n$array\
    \ = array_sort($array);\n$array = array_filter($array);\necho \"<pre>\";\nprint_r($array);\n\
    echo \"</pre>\";\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a dscore=0 |>\n\
    For this question, there is no need to sort the array first. And if the array\
    \ is sorted already, then we need to find the smallest even number in the array\
    \ and get the indexes of those values where they are present. \n<code>\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxt5misnp.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min_value = 0;\n\
    \    $result = array();\n    foreach ($arr as $key => $val) {\n        if ($val\
    \ < $min_value) {\n            $min_value = $val;\n            $result[] = $key;\n\
    \        }\n    }\n\n    if (empty($arr) || !is_array($arr)) {\n        return\
    \ array();\n    }\n\n    $min_key = array_search($min_value, $arr);\n\n    if\
    \ ($min_key === false) {\n        return array();\n    }\n\n    $result[] = $min_key;\n\
    \n    return $result;\n}\n\n$arr = array(\n    array(0, 3),\n    array(4, 0, 3,\
    \ 2),\n    array(3, 3),\n    array(4, 5, 0),\n    array(6, 7, 8, 9),\n    array(),\n\
    \    array(0)\n);\n\nprint_r(pluck($arr));\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fvfgjlp.php:68\n\
    Stack trace:\n#0 /tmp/tmp8fvfgjlp.php(78): test()\n#1 {main}\n  thrown in /tmp/tmp8fvfgjlp.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min_val = $arr[0];\n    $min_idx = -1;\n    for($i = 0; $i < count($arr);\
    \ $i++) {\n        $val = $arr[$i];\n        $idx = 0;\n        if($val % 2 ==\
    \ 0) {\n            $idx = $i;\n        }\n        if($val < $min_val) {\n   \
    \         $min_val = $val;\n            $min_idx = $idx;\n        }\n    }\n \
    \   $result[] = $min_val;\n    $result[] = $min_idx;\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy65zkjo0.php:53\n\
    Stack trace:\n#0 /tmp/tmpy65zkjo0.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpy65zkjo0.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function ($n) {\n        return $n & 1;\n    });\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min = min(array_keys($evens));\n    return [\
    \ $min, $arr[$min] ];\n}\n\n/**\n * Given a binary tree and a node value, return\
    \ true if the tree contains that node.\n * \n * Your tree will have each node\
    \ in the tree initially marked with the value null,\n * except when it is the\
    \ root node. Each node will then take the value of another node in the tree and\
    \ assign it as the node\u2019s value.\n * \n * You are allowed to change the value\
    \ of the node, but not its children.\n * \n * Given the above, your function is\
    \ called as such:\n * hasPath(root, val), where root is the root node of a binary\
    \ tree, and val is the value of a node in the tree.\n * \n * For this problem,\
    \ a path means you must follow the path to a node in the tree that has the same\
    \ value as val. For example, if the path is [5,3,7,2,6,1,4], and the value is\
    \ 6, you should follow the path to a node whose value is 6, which is in the sixth\
    \ position of the path array.\n * \n * Example 1:\n * Input: root = [5,3,7,2,6,1,4],\
    \ val = 6\n * Output: true\n * Explanation: There is a path [6] that leads to\
    \ the node with value 6.\n * \n * Example 2:\n * Input: root = [5,3,null,2,6,1,4],\
    \ val = 6\n * Output: false\n * Explanation: There is no path leading to node\
    \ with value 6.\n * \n * Example 3:\n * Input: root = [5,3,null,2,6,1,4], val\
    \ = 5\n * Output: false\n * Explanation: There is no path leading to node with\
    \ value 5.\n * \n * Example 4:\n * Input: root = [5,3,7,2,6,1,4], val = 7\n *\
    \ Output: false\n * Explanation: There is more than one node with value 7.\n */\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdi8gteeg.php:76\n\
    Stack trace:\n#0 /tmp/tmpdi8gteeg.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpdi8gteeg.php\
    \ on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n\
    \    $minIndex = -1;\n    foreach($arr as $index => $value) {\n        if ($value\
    \ % 2 == 0) {\n            if ($value < $min) {\n                $min = $value;\n\
    \                $minIndex = $index;\n            }\n        }\n    }\n    return\
    \ [$min, $minIndex];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68dobwhw.php:48\n\
    Stack trace:\n#0 /tmp/tmp68dobwhw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp68dobwhw.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach($arr as $a) {\n        if($a % 2 == 0) {\n        \
    \    $even[] = $a;\n        } else {\n            $odd[] = $a;\n        }\n  \
    \  }\n    $even = array_filter($even);\n    $odd = array_filter($odd);\n    sort($even);\n\
    \    sort($odd);\n    $even = array_values($even);\n    $odd = array_values($odd);\n\
    \    foreach($even as $key => $val) {\n        if($val == $odd[0]) {\n       \
    \     $res[] = $val;\n        }\n    }\n    if(empty($res)) {\n        $res =\
    \ [];\n    }\n    return $res;\n}\n$arr = [5, 2, 3, 0, 4, 2];\n$result = pluck($arr);\n\
    var_dump($result);\n</code>\n<|/ a |>\n<| c |>\nNice one. Good work\n<|/ c |>\n\
    <| a tags=php,arrays,algorithm dscore=2 |>\nIf you want O(N) solution then you\
    \ should use the Branch & Bound algorithm, as described in Wikipedia. Here is\
    \ an implementation in PHP which returns an array with smallest odd element and\
    \ the index as described below:\n<code>\n<?php\n\n$arr = [5, 2, 3, 0, 4, 2];\n\
    $minOdd = 0;\n$minIndex = 0;\n\nforeach ($arr as $key => $value) {\n    if ($value\
    \ % 2 != 0) {\n        if ($minOdd < $value) {\n            $minOdd = $value;\n\
    \            $minIndex = $key;\n        }\n    }\n}\n\nvar_dump($minOdd, $minIndex);\n\
    </code>\nResult\n<code>\nint(2)\nint(1)\n</code>\n<|/ a |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprnouihh6.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($node){\n        return $node%2 === 0;\n    });\n    if(empty($evens))\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_index =\
    \ array_search($min_even, $evens);\n    return [$min_even, $min_index];\n}\n\n\
    $arr = array(\n    array(1,2),\n    array(3,4),\n    array(5,6),\n);\n$result\
    \ = pluck($arr);\nvar_dump($result);\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = $arr[0];\n\
    \    $i = 0;\n    foreach ($arr as $val) {\n        $i += $val & 1;\n        if\
    \ ($val < $min) {\n            $min = $val;\n            $i = $i;\n        }\n\
    \    }\n    return [$min, $i];\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpev82xaom.php:46\n\
    Stack trace:\n#0 /tmp/tmpev82xaom.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpev82xaom.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // write your code\
    \ here\n    $return = [];\n    foreach($arr as $key => $val){\n        if($val\
    \ % 2 == 0){\n            $return[] = $val;\n            $return[] = $key;\n \
    \       }\n    }\n    return $return;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgzkj5qkx.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr);\n  \
    \  $len = count($arr);\n    $result = array();\n    for($i=0; $i < $len; $i++)\n\
    \        if($arr[$i] % 2 == 0 && $arr[$i] <= $len){\n            $result[] = $arr[$i];\n\
    \        }\n    return $result;\n}\n \nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jl7t1li.php:43\n\
    Stack trace:\n#0 /tmp/tmp8jl7t1li.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp8jl7t1li.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    for($i=0; $i<$arr.length;\
    \ $i++) {\n        if($i % 2 == 0) {\n            return $arr[$i];\n        }\n\
    \    }\n    return [];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpvz3pugnu.php on line 28\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvz3pugnu.php:40\nStack\
    \ trace:\n#0 /tmp/tmpvz3pugnu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpvz3pugnu.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // write your code\
    \ here\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3mmsih2.php:37\n\
    Stack trace:\n#0 /tmp/tmpa3mmsih2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpa3mmsih2.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    $smallest_even_value_index = 0;\n    $smallest_even_value = $arr[0];\n  \
    \  for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0 && $arr[$i]\
    \ < $smallest_even_value) {\n            $smallest_even_value_index = $i;\n  \
    \          $smallest_even_value = $arr[$i];\n        }\n    }\n    $result[0]\
    \ = $smallest_even_value;\n    $result[1] = $smallest_even_value_index;\n    return\
    \ $result;\n}\n$input1 = array(4,2,3);\n$input2 = array(1,2,3);\n$input3 = array();\n\
    $input4 = array(5,0,3,0,4,2);\n$input5 = array();\n$output1 = pluck($input1);\n\
    $output2 = pluck($input2);\n$output3 = pluck($input3);\n$output4 = pluck($input4);\n\
    $output5 = pluck($input5);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5j0gn4ol.php:57\n\
    Stack trace:\n#0 /tmp/tmp5j0gn4ol.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp5j0gn4ol.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $largest = null;\n\
    \    $index = null;\n    $even = null;\n    $min_value = PHP_INT_MAX;\n    foreach($arr\
    \ as $item) {\n        if($item % 2 === 0) {\n            $even = $item;\n   \
    \     } else {\n            $largest = $item;\n            $index = 0;\n     \
    \   }\n        if($item < $min_value) {\n            $min_value = $item;\n   \
    \     }\n        if($item > $min_value) {\n            $index = $min_value - $even;\n\
    \        }\n    }\n    if(count($arr) === 0) {\n        return [];\n    } elseif($min_value\
    \ < PHP_INT_MAX) {\n        return [$min_value, $index];\n    } else {\n     \
    \   return [];\n    }\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2v3r46k.php:59\n\
    Stack trace:\n#0 /tmp/tmpv2v3r46k.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpv2v3r46k.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    return array_filter($arr,\
    \ function($val){return !($val & 1);}, ARRAY_FILTER_USE_BOTH);\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3uhzm09b.php:36\n\
    Stack trace:\n#0 /tmp/tmp3uhzm09b.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3uhzm09b.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  foreach ($arr as $v) {\n        if ($v % 2 === 0) {\n            $even[$v]\
    \ = $v;\n        }\n    }\n    return $even;\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpho8gr04q.php:41\n\
    Stack trace:\n#0 /tmp/tmpho8gr04q.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpho8gr04q.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!$arr || count($arr)\
    \ === 0) return [];\n\n    $even_values = [];\n    foreach ($arr as $val) $even_values[$val]\
    \ = $val;\n\n    $min = INF;\n    $index = 0;\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value === 0) continue;\n        if ($value === INF) break;\n\
    \        $odd_value = $value % 2;\n        if ($odd_value === 1) {\n         \
    \   $min_val = INF;\n            $min_index = -1;\n            foreach ($even_values\
    \ as $k => $ev) {\n                if ($ev === $odd_value) {\n               \
    \     if ($min_val < $value) {\n                        $min_val = $value;\n \
    \                       $min_index = $k;\n                    }\n            \
    \    }\n            }\n            if ($min_val === INF) {\n                $min_val\
    \ = count($even_values) + 1;\n                $min_index = $key;\n           \
    \ }\n        } else {\n            $min_val = $value;\n            $min_index\
    \ = $key;\n        }\n        if ($min_val < $min) $min = $min_val;\n        if\
    \ ($min_index > $index) $min_index = $index;\n    }\n    return $arr[$min_index];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfiyv6tda.php:69\n\
    Stack trace:\n#0 /tmp/tmpfiyv6tda.php(79): test()\n#1 {main}\n  thrown in /tmp/tmpfiyv6tda.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n){\n        return $n & 1 == 0;\n    });\n    $even = array_search(min($evens),\
    \ $evens);\n    if (count($evens) == 0) {\n        return [];\n    }\n    else\
    \ {\n        return [$even, $array_search(0, $evens)];\n    }\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nIt works, I wonder if anyone knows why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nCan you post your code? I want to see what have you done.\n\
    <|/ c |>\n<| c |>\nsure, I updated the post with my code\n<|/ c |>\n<| c |>\n\
    , please check the updated code, I have updated it with your code. I think it\
    \ is because your original code was not giving me the right result for all the\
    \ test cases. I am still looking into it and will update if I get some new information.\n\
    <|/ c |>\n<| c |>\nit works! thanks a lot sir, I just want to ask why did you\
    \ use the '&'?\n<|/ c |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmple57phrw.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest = false;\n\
    \    $index = false;\n    $even = false;\n    foreach($arr as $key => $val){\n\
    \        if ($val % 2 == 0){\n            $even = true;\n        }\n        if\
    \ ($even && $smallest === false){\n            $smallest = $val;\n           \
    \ $index = $key;\n        }elseif($even && $smallest !== false && $val < $smallest){\n\
    \            $smallest = $val;\n            $index = $key;\n        }\n    }\n\
    \    if ($smallest == false){\n        $arr = array();\n    }else{\n        $arr[]\
    \ = $smallest;\n        $arr[] = $index;\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbl_20c90.php:57\n\
    Stack trace:\n#0 /tmp/tmpbl_20c90.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpbl_20c90.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $odds = array_filter(\n\
    \        $arr,\n        function ($x) {\n            return $x % 2 === 0;\n  \
    \      }\n    );\n    if (empty($odds)) {\n        return [];\n    }\n    $odd\
    \ = min(array_flip($odds));\n    $result = array();\n    $index = 0;\n    foreach\
    \ ($arr as $index => $value) {\n        if ($value % 2 === 0) {\n            $result[]\
    \ = [$value, $index];\n        }\n        if ($value === $odd) {\n           \
    \ $index++;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1\
    \ tags=php,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also\
    \ include an explanation of what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nA possible approach is to use array_filter() in conjunction with the min\
    \ function:\n<code>\n$input = [4,2,3];\n$output = array_filter($input, function($x)\
    \ {\n    return $x % 2 == 0;\n}, ARRAY_FILTER_USE_BOTH);\n\nif ($output !== [])\
    \ {\n    echo 'min is ' . min($output);\n} else {\n    echo 'No even numbers found';\n\
    }\n</code>\nOutput:\n<code>\nmin is 2\n</code>\nDemo on 3v4l.org\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you very much for your detailed answer, I am quite new to\
    \ the php language, I had tried this code but I did not know how to use that particular\
    \ function\n<|/ c |>\n<| c |>\nNo worries - I'm glad I could help. If this answer\
    \ solved your problem, please consider _accepting_ it by clicking the green checkmark\
    \ to the left of it. This will give the answerer some reputation and allow future\
    \ visitors to see that the issue is resolved. See [What should I do when someone\
    \ answers my question?](https://stackoverflow.com/help/someone-answers)\n<|/ c\
    \ |>\n<| a dscore=0 |>\nThis is my simple solution: \n<code>\n$input = [4, 2,\
    \ 3];\n\n$result = array_filter($input, function($value){\n\n    return ($value\
    \ % 2 == 0);\n\n});\n\nif (count($result) > 0) {\n    echo 'min is ' . min($result);\n\
    } else {\n    echo 'No even numbers found';\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6ttx7vvm.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    \n    foreach ($arr as $v) {\n        if($v %2 == 0 && $v != 0) {\n     \
    \       $result[] = $v;\n        }\n    }\n\n    if (count($result) == 0) {\n\
    \        return $result;\n    }\n\n    sort($result);\n\n    $min = $result[0];\n\
    \    $min_index = 0;\n\n    for ($i = 0; $i < count($result); $i++) {\n      \
    \  if($result[$i] % 2 == 0 && $result[$i] != 0) {\n            $result[$i] = $min;\n\
    \            $min_index = $i;\n        }\n    }\n\n    return array($result[$min_index],\
    \ $min_index);\n}\n\n$arr = array(0,5,2,3,0,4,2);\n$result = pluck($arr);\nvar_dump($result);\n\
    </code>\n<|/ a tags=php,algorithm,arrays |>\n<| a tags=php,algorithm,arrays dscore=0\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplok74tw4.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $length = count($arr);\n\
    \    $min = current($arr);\n    $indexes = array();\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if ($arr[$i] >= $min) {\n            $indexes[] = $i;\n   \
    \     }\n    }\n    $min_key = array_search($min, $arr);\n    return array($arr[$min_key],\
    \ $indexes);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php |>\nHere's a simple\
    \ and clear solution. Hope it helps.\n<code>\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjf1ssrln.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min = PHP_INT_MAX;\n    $index = 0;\n    foreach($arr as $value) {\n   \
    \     if($value & 1){\n            $result[] = [$value, $index];\n           \
    \ if($value < $min){\n                $min = $value;\n                $index =\
    \ 1;\n            } elseif ($value > $min){\n                $index += 1;\n  \
    \          }\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for the solution, but I prefer using array_filter and using\
    \ foreach instead of loops.\n<|/ c |>\n<| a |>\nI used this as my solution:\n\
    <code>\n$numsArray = [1,2,3,4,5,6,7,8,9,10,11];\n$evens = array_filter($numsArray,\
    \ function($value) use ($numsArray) {\n    return $value & 1 == 0;\n});\nif (empty($evens))\
    \ {\n    echo 'No even numbers in the array!';\n}else{\n    echo $evens[0];\n\
    }\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n<| c |>\nThis will give an undefined\
    \ offset 0 error if the array is empty\n<|/ c |>\n<| c |>\nYep. It will give an\
    \ error. I didn't mention it in my post. Though I added a note to the OP's post.\n\
    <|/ c |>\n<| a tags=php,arrays dscore=0 |>\nHere is another one that gives you\
    \ the index of the minimum even number in the array.  It returns an array with\
    \ two items: [0] the minimum even number found and [1] the index of that number.\
    \ \n<code>\n$numsArray = [1,2,3,4,5,6,7,8,9,10,11];\n$evens = array_filter($numsArray,\
    \ function($value) use ($numsArray){\n    return $value & 1 == 0;\n});\nif(empty($evens))\n\
    {\n    echo 'No even numbers in the array!';\n}\nelse\n{\n    echo $evens[0];\n\
    \    echo \"<br />Index is \".array_search($evens[0],$numsArray);\n}\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\n$arr = [1,2,3,4,5,6,7,8,9,10,11];\n$min_index = -1;\n\
    foreach($arr as $key => $val){\n  if($arr[$key] & 1 == 0){\n    $min_index = $key;\n\
    \    break;\n  }\n}\n\nif($min_index == -1){\n  echo \"No even numbers in the\
    \ array!\";\n}else{\n  echo $\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpczeothbh.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach($arr as $key => $value) {\n        $tmp = $value;\n        if($value\
    \ % 2 == 0) {\n            $result[] = $tmp;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvfdoeg4.php:42\n\
    Stack trace:\n#0 /tmp/tmpuvfdoeg4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpuvfdoeg4.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    $largest = 0;\n    foreach ($arr as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n        }else{\n            $odd[]\
    \ = $value;\n        }\n        if ($value > $largest) {\n            $largest\
    \ = $value;\n        }\n    }\n    if ($odd === $largest) {\n        return $even;\n\
    \    }\n    foreach ($even as $e) {\n        $index = array_search($e, $odd);\n\
    \        if ($index !== false) {\n            return [ $e, $index ];\n       \
    \ }\n    }\n    return [];\n}\n\n$result = pluck($arr);\n\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3vctveh5.php\
    \ on line 31\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp3vctveh5.php:61\nStack trace:\n#0 /tmp/tmp3vctveh5.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3vctveh5.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $ans = array();\n\
    \    foreach ($arr as $key => $value) {\n        sort($arr);\n        if ($value\
    \ % 2 == 0) {\n            $ans[] = $value;\n        }\n    }\n    usort($ans,\
    \ function($a, $b){\n        if ($a % 2 == 0 && $b % 2 != 0){\n            return\
    \ -1;\n        }else if ($b % 2 == 0 && $a % 2 != 0){\n            return 1;\n\
    \        }\n        return 0;\n    });\n    return $ans;\n}\n\n$arr = [1, 0, 2,\
    \ 0, 1, 2];\nprint_r(pluck($arr));\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nYour answer is good but you should add some explanation to your code.\
    \ Just a code dump is not really useful.\n<|/ c |>\n<| c |>\nIf two nodes have\
    \ the same value, how can we choose one node among the duplicates?\n<|/ c |>\n\
    <| c |>\nThe array is sorted so when we have an odd value we know it is the lowest\
    \ value and we can easily select it by searching for it's even index\n<|/ c |>\n\
    <| a dscore=0 |>\nThe below code works:\n<code>\n$arr = [1, 0, 2, 0, 1, 2];\n\
    usort($arr, function($a, $b){\n    if ($a % 2 == 0 && $b % 2 != 0){\n        return\
    \ -1;\n    }else if ($b % 2 == 0 && $a % 2 != 0){\n        return 1;\n    }\n\
    \    return 0;\n});\nvar_dump($arr);\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a dscore=0 tags=php,sorting,arrays |>\nThis works for me and I hope it helps\
    \ you\n<code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps_3csfdz.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ 'is_int');\n    $result = $arr;\n    if (count($evens) > 0) {\n        usort($evens,\
    \ function($a, $b) {\n            return $a % 2 > $b % 2 ? -1 : 1;\n        });\n\
    \        $result = array_intersect($evens, $arr);\n        if (count($result)\
    \ > 0) {\n            $result = array_values($result);\n        }\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcg6qc1n.php:47\n\
    Stack trace:\n#0 /tmp/tmpkcg6qc1n.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpkcg6qc1n.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $count = 0;\n  \
    \  $newArr = array();\n    foreach ($arr as $value) {\n        $count++;\n   \
    \     if ($count % 2 == 0) {\n            if ($value < $arr[$count - 1]) {\n \
    \               $newArr[] = $value;\n            }\n        }\n    }\n    if (empty($newArr))\
    \ {\n        return [];\n    }\n    $smallest = min($newArr);\n    $index = array_search($smallest,\
    \ $newArr);\n    $retVal = array($smallest, $index);\n    return $retVal;\n}\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf835rgod.php:52\n\
    Stack trace:\n#0 /tmp/tmpf835rgod.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpf835rgod.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = $max = 0;\n\
    \    $result = array();\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ < 0) {\n            continue;\n        }\n        if ($min > $value) {\n   \
    \         $min = $value;\n            $min_index = $key;\n        }\n        $max\
    \ = $value;\n        $result[$key] = $min_index;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| c |>\nI thought that too but I added\
    \ comments to the code on why it works. Am I missing something? :)\n<|/ c |>\n\
    <| c |>\nI think there would be some cases that `indexOf` would return an index\
    \ larger than the length of the array\n<|/ c |>\n<| c |>\nI added explanation\
    \ and example :)\n<|/ c |>\n<| c |>\nWhile this code may provide a solution to\
    \ the question, it's better to add context as to why/how it works. This can help\
    \ future users learn, and apply that knowledge to their own code. You are also\
    \ likely to have positive feedback from users in the form of upvotes, when the\
    \ code is explained.\n<|/ c |>\n<| a tags=algorithm,php dscore=2 |>\nYou can use\
    \ array_reduce(), but with a custom function for the callback:\n<code>\n$array\
    \ = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5];\n\n$result = array_reduce($array,\
    \ function ($min, $el) {\n  $min = ($min === 0 || $el < $min) ? $el : $min;\n\
    \  return ($min & 1 && $el % 2) != 0;\n}, 0);\n\nvar_dump($result);\n</code>\n\
    <|/ a |>\n<| a |>\nThis solution also works in PHP 7, but does not require the\
    \ array_filter() function. The custom function can be created as a regular PHP\
    \ function.\nThe $values array is passed to the function and checked for negative\
    \ values using the is_numeric function. If the array contains no negative values,\
    \ then the function returns an empty array. If the array contains negative values,\
    \ then the function returns an array of all the positive values that satisfy the\
    \ conditions below.\n\nIf the value is negative, return an empty array.\nIf the\
    \ value is even, return the value if it is the smallest value greater than zero.\n\
    If the value is odd, return the value if it is the smallest value greater than\
    \ zero.\nIf the value is 0, return an empty array.\n\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9qra5i_n.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $counter = array_count_values($arr);\n\
    \    $min = array_shift($counter);\n    $ret = [];\n    foreach($counter as $key\
    \ => $value) {\n        if($value == $min) {\n            $ret[] = $key;\n   \
    \     }\n    }\n    return $ret;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ is not optimized for big arrays. Try it on `[-2,1,2,2,2,2,2,2,2,2,3,4,4,4,4,4,4,4,4,5,5]`.\n\
    <|/ c |>\n<| a dscore=0 tags=php,algorithm |>\nO(n) time and O(n) space algorithm\
    \ (by sorting and removing duplicates):\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnhs1f6pr.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $map = array_fill(0,\
    \ 10000, 0);\n    foreach ($arr as $key => $value) {\n        $map[$value]++;\n\
    \    }\n    $res = [];\n    foreach ($map as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $res[] = $key;\n        }\n    }\n    return $res;\n\
    }\n<|/ file ext=.js dstars=0 source=github |>\n<| c |>\ncan you add some comments\
    \ to help explain the solution?\n<|/ c |>\n<| c |>\nCan you give me an example\
    \ of input? I have given you the general idea, and I believe this is enough\n\
    <|/ c |>\n<| c |>\n[4,2,3]\n<|/ c |>\n<| c |>\nOh, I see now, sorry for that\n\
    <|/ c |>\n<| a tags=javascript,php,algorithm dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfnh8f54k.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // write your code\
    \ here\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4n58_q6.php:37\n\
    Stack trace:\n#0 /tmp/tmps4n58_q6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmps4n58_q6.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $length = count($arr);\n\
    \    $result = array();\n    $max_even_val = array_shift($arr);\n    for($i=0;$i<$length;$i++)\
    \ {\n        if ($arr[$i] % 2 === 0) {\n            $even_val = array_shift($arr);\n\
    \            if ($max_even_val < $even_val) {\n                $max_even_val =\
    \ $even_val;\n            }\n        } else {\n            $result[] = array($max_even_val,$i);\n\
    \        }\n    }\n    return $result;\n}\n</cell>\n<cell>\n\"\"\"\n\nassert pluck([4,\
    \ 2, 3]) == [2, 1]\nassert pluck([1,2,3]) == [2, 1]\nassert pluck([]) == []\n\
    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\nNow let us use our\
    \ new function in our main program:\n\n\n</text>\n<cell>\ndef pick_the_smallest_even_number(numbers):\n\
    \    return min(pluck(numbers))[0]\n\nprint(pick_the_smallest_even_number([4,2,3]))\n\
    print(pick_the_smallest_even_number([1,2,3]))\nprint(pick_the_smallest_even_number([]))\n\
    print(pick_the_smallest_even_number([5,0,2,0,4,2]))\n</cell>\n<text>\nWe have\
    \ tested our code on several test cases and it seems to work correctly (except\
    \ for one case). Why is that a surprise? The reason is that this problem can be\
    \ solved much more efficiently than the one we wrote above. The efficient algorithm\
    \ takes the array and generates two lists, one with the even numbers of the input\
    \ array, and the other with the odd numbers. Then the function min, which runs\
    \ in O(n), takes the smallest element from both lists, which takes O(n) as well.\n\
    However, if we can solve this problem in O(n) by using a hash-table, that is significantly\
    \ faster than computing the array and performing two lists. But how can we do\
    \ that? Well, we can use a hash-table to map the even elements of the input array\
    \ to the corresponding odd element. Suppose the key of the hash-table is the value\
    \ of the even element, and its value is the value of the odd element. Then, the\
    \ value of the hash-table is either the key of the hash-table or the value of\
    \ the key of the hash-table. This is how we map the even element to the corresponding\
    \ odd element.\n\nWe start by creating the hash-table and filling it with empty\
    \ arrays. Then, we iterate over all the input numbers. If the number is even,\
    \ we insert its value into the hash-table. If the number is odd, we insert its\
    \ value into the hash-table. After that\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4lxng2_f.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $i = 0;\n    foreach\
    \ ($arr as $e) {\n        if ($e % 2 === 0) {\n            if ($i == 0) {\n  \
    \              $result = $e;\n                $i = 1;\n            }\n       \
    \     else if ($e < $result) {\n                $result = $e;\n              \
    \  $i++;\n            }\n        }\n    }\n    return $result;\n}\n\n$array =\
    \ [0, 4, 1, 3, 7, 5, 6, 2, 8, 9];\n$result = pluck($array);\nvar_dump($result);\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nWhile this code may solve the question, [including\
    \ an explanation](https://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply.\n<|/ c |>\n<| a |>\n<code>\n$arr = [2, 3, 4, 7, 8, 9,\
    \ 10, 11, 13];\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp03r0wei0.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array_filter($arr,\
    \ 'is_int');\n    if (empty($even)) {\n        return [];\n    }\n    $minval\
    \ = min($even);\n    $res = array_filter($even, function ($item) use ($minval)\
    \ {\n        return $item === $minval;\n    });\n    return $res && count($res)\
    \ ? array_shift($res) : [];\n}\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns true if the given string is palindrome or false if it is not palindrome.\n\
    \nA palindromic string reads the same backward as forward, for example 'level'\
    \ and 'racecar'. We say that a palindromic string is one where half the characters\
    \ are the same, that is to say that the palindrome can be found backwards and\
    \ forwards.\n\nGiven an input string and an alphabet, determine if the given string\
    \ is a palindromic string.\n\nA palindrome is a word, number, or other sequence\
    \ of characters that reads the same backward as forward.\n\nExample 1:\nInput:\n\
    \n\"abcba\"\n\"abc\"\nExample 2:\nInput:\n\n\"abc\"\n\"\"\nExample 3:\nInput:\n\
    \n\"\"\n\"abc\"\nExample 4:\nInput:\n\n\"racecar\"\n\"racecar\"\nExample 5:\n\
    Input:\n\n\"level\"\n\"level\"\nExample 6:\nInput:\n\n\"abc\"\n\"aba\"\nExample\
    \ 7:\nInput:\n\n\"\"\n\"\"\nExample 8:\nInput:\n\n\"aba\"\n\"aba\"\nExample 9:\n\
    Input:\n\n\"abaabc\"\n\"abaabc\"\nExample 10:\nInput:\n\n\"abaabc\"\n\"\"\nNotes:\n\
    \nThe input string does not contain any leading or trailing spaces.\nThe input\
    \ alphabet consists only of lowercase letters.\nAll non-alphanumeric characters\
    \ are ignored when determining if the input string is a palindrome or not.\nThe\
    \ given input string does not contain any numbers or special characters.\n\n\n\
    </text>\n<cell>\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy0l8if7n.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 === 0 ) {\n  \
    \          if (array_key_exists($value, $result)) {\n                if ($result[$value]\
    \ < $key) {\n                    $result[$value] = $key;\n                }\n\
    \            } else {\n                $result[$value] = $key;\n            }\n\
    \        }\n    }\n    return array_keys($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ok830np.php:48\n\
    Stack trace:\n#0 /tmp/tmp2ok830np.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp2ok830np.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Your code here\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxp9b7bj.php:36\n\
    Stack trace:\n#0 /tmp/tmpzxp9b7bj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpzxp9b7bj.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min_value = -1;\n\
    \    $min_index = -1;\n    $result = array();\n    foreach ($arr as $node) {\n\
    \        if ($node % 2 == 0 && $node < $min_value) {\n            $min_value =\
    \ $node;\n            $min_index = $result;\n        }\n    }\n    array_push($result,\
    \ $min_value, $min_index);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gbw36hd.php:46\n\
    Stack trace:\n#0 /tmp/tmp3gbw36hd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp3gbw36hd.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $odd = array_filter($arr,\
    \ function($num) {\n        return $num & 1;\n    });\n    if(count($odd) ===\
    \ 0) {\n        return [];\n    }\n    $min = min($odd);\n    $index = 0;\n  \
    \  foreach($odd as $key => $val) {\n        if($val === $min) {\n            $index\
    \ = $key;\n            break;\n        }\n    }\n    return [ $min, $index ];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps25k8bif.php:49\n\
    Stack trace:\n#0 /tmp/tmps25k8bif.php(59): test()\n#1 {main}\n  thrown in /tmp/tmps25k8bif.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    sort($arr, SORT_NUMERIC);\n\
    \    array_walk($arr, function (&$v) { $v = (int)($v * 2); });\n    $i = 0;\n\
    \    $arr2 = array();\n    while ($i < count($arr)) {\n        if ($arr[$i] %\
    \ 2 == 0) {\n            $arr2[] = $arr[$i];\n            $i++;\n        }\n \
    \       $i++;\n    }\n    if (count($arr2) == 0) {\n        return [];\n    }\n\
    \    $sorted = $arr2;\n    $tmp2 = [];\n    foreach ($sorted as $key => $value)\
    \ {\n        if ($key % 2 == 0) {\n            $tmp2[] = $value;\n        }\n\
    \    }\n    sort($tmp2);\n    $result = array();\n    foreach ($tmp2 as $key =>\
    \ $value) {\n        if ($key % 2 == 0) {\n            $result[] = $value;\n \
    \       }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=sorting,php,algorithm\
    \ dscore=1 |>\n<| a dscore=1 |>\nThis is a simple O(n) solution for your problem:\n\
    <code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgo2qls5_.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evenValues = $oddValues\
    \ = [];\n    foreach ($arr as $node) {\n        if ($node % 2 === 0) {\n     \
    \       $evenValues[] = $node;\n        } else {\n            $oddValues[] = $node;\n\
    \        }\n    }\n    asort($evenValues);\n    asort($oddValues);\n    $min =\
    \ array_shift($evenValues);\n    $index = array_search($min, $oddValues);\n  \
    \  return $min, $index;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nvar_dump($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4kmo8tss.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $index = [];\n    $i = 0;\n    foreach ($arr as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[$i] = $value;\n            $index[$i] = $i;\n\
    \            $i++;\n        }\n    }\n\n    $smallest = $even[0];\n    $smallestIndex\
    \ = 0;\n    for ($i = 0; $i < count($even); $i++) {\n        if ($even[$i] < $smallest)\
    \ {\n            $smallest = $even[$i];\n            $smallestIndex = $index[$i];\n\
    \        }\n    }\n\n    return [ $smallest, $smallestIndex ];\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| c |>\n`pluck` should return an array of 2 elements,\
    \ the first being an array of all the elements that were selected, and the second\
    \ being the index of the selected element\n<|/ c |>\n<| c |>\n, thank you for\
    \ pointing that out. I've modified the function in my answer to do that.\n<|/\
    \ c |>\n<| a |>\nHere is a recursive approach, no need for loops or sorting.\n\
    <code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbma84pej.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min = min($arr);\n    foreach($arr as $value) {\n        if ($value % 2\
    \ == 0 && $value < $min) {\n            $result[] = [$value, array_search($value,\
    \ $arr)];\n        } elseif ($value % 2 == 0 && $value > $min) {\n           \
    \ $result[] = [$value, array_search($value, $arr)-1];\n        } elseif ($value\
    \ == $min) {\n            $result[] = [$value, array_search($value, $arr)];\n\
    \        }\n    }\n    return empty($result) ? [] : $result;\n}\n\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\nprint_r($arr);\nprint_r(pluck($arr));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 0\n    [2] => 3\n    [3] => 0\n    [4]\
    \ => 4\n    [5] => 2\n)\nArray\n(\n    [0] => Array\n        (\n            [0]\
    \ => 0\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n     \
    \       [0] => 0\n            [1] => 1\n        )\n\n    [2] => Array\n      \
    \  (\n            [0] => 4\n            [1] => 3\n        )\n\n    [3] => Array\n\
    \        (\n            [0] => 2\n            [1] => 4\n        )\n\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpyw_x30x_.php:50\nStack trace:\n\
    #0 /tmp/tmpyw_x30x_.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpyw_x30x_.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array_filter($arr,\
    \ function($n) {\n        return ($n % 2 == 0);\n    });\n    $even = array_column($even,\
    \ 'value');\n    $even = array_filter($even, function($n) {\n        return ($n\
    \ < 0);\n    });\n    if (count($even) == 0) {\n        return [];\n    }\n  \
    \  $result = min(array_keys($even));\n    return [$result, array_search($result,\
    \ $even)];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohuf24fk.php:46\n\
    Stack trace:\n#0 /tmp/tmpohuf24fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpohuf24fk.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odds = [];\n\n    foreach ($arr as $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n        } else {\n            $odds[] = $value;\n\
    \        }\n    }\n\n    if (!$even) {\n        return [];\n    }\n\n    if (count($even)\
    \ < count($odds)) {\n        return $even;\n    }\n\n    $even_value = array_shift($even);\n\
    \    $index = 0;\n\n    while (in_array($even_value % 2, $odds)) {\n        $even_value\
    \ = $even_value + 2;\n        $index++;\n    }\n\n    return [$even_value, $index];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dj016xf.php:62\n\
    Stack trace:\n#0 /tmp/tmp6dj016xf.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp6dj016xf.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $val) {\n        $minIndex = 0;\n        $minVal\
    \ = $arr[$key];\n        foreach ($arr as $k => $v) {\n            if ($k != $key\
    \ && $v <= $minVal) {\n                if ($v % 2 == 0) {\n                  \
    \  $minIndex = $k;\n                    break;\n                }\n          \
    \  }\n        }\n        $result[] = [$minVal, $minIndex];\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfg8ec8rv.php:49\n\
    Stack trace:\n#0 /tmp/tmpfg8ec8rv.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpfg8ec8rv.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evenValues = array_filter(range(0,\
    \ count($arr)), function($v) use ($arr) { return ($arr[$v] & 1) == 0; });\n  \
    \  if (count($evenValues) === 0) return [];\n    $largestEven = array_flip($evenValues)[0];\n\
    \    $smallestEven = array_search(min($evenValues), $evenValues);\n    return\
    \ [\n        $largestEven ?? null,\n        $smallestEven,\n    ];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8m_ywolf.php:43\n\
    Stack trace:\n#0 /tmp/tmp8m_ywolf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp8m_ywolf.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
