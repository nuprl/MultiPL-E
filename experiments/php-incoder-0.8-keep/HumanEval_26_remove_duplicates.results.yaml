name: HumanEval_26_remove_duplicates
language: php
results:
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $map = array();\n    foreach($numbers as $number)\n        $map[$number]\
    \ = true;\n    return array_keys($map);\n}\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpok6rkb70.php:19\n\
    Stack trace:\n#0 /tmp/tmpok6rkb70.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpok6rkb70.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function ($item) use (&$numbers) {\n    return\
    \ !in_array($item, $numbers);\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This is what I was looking for, thanks! However I used the accepted solution since\
    \ it worked for my needs.\n<|/ c |>\n<| a |>\nThe easiest way would be to first\
    \ remove all duplicate entries and sort them by original position. Since you only\
    \ want unique entries anyway, that would be easy.\n<|/ a tags=php dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$arr = [\n    0 => 1,\n    1 => 3,\n    2 => 3,\n  \
    \  3 => 1,\n    4 => 3,\n];\n\n$result = [];\n\nforeach($arr as $key => $value)\
    \ {\n    if(in_array($value, $result)) {\n        unset($arr[$key]);\n    } else\
    \ {\n        $result[] = $value;\n    }\n}\n\nvar_dump($arr);\n</code>\n<|/ a\
    \ tags=php |>\n<| a dscore=1 |>\nThis worked for me.\n<code>\n$array = array(1,\
    \ 2, 3, 4, 4, 5);\n$array = array_count_values($array);\n$array = array_filter($array,\
    \ function ($value) {\n    return $value > 1;\n});\n</code>\n<|/ a tags=php |>\n\
    <| a tags=php |>\nI came here looking for a solution that preserved the order\
    \ of values. So this works for me:\n<code>\n$array = array(1,2,3,2,4,5);\n\n$tmp\
    \ = [];\n\nforeach ($array as $key => $value) {\n    if (in_array($value, $tmp))\
    \ {\n        unset($array[$key]);\n    } else {\n        $tmp[] = $value;\n  \
    \  }\n}\n\nprint_r($array);\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\
    \ $a = array(1,2,3,4,5,2,7,8,9,10,1,4);\nfor($i=0;$i<count($a);$i++){\n   if(in_array($a[$i],$arr)){\n\
    \    unset($a[$i]);\n}\n}\nprint_r($a);\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4w3jeo3m.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $clean = array();\n    foreach ($numbers as $key => $value) {\n     \
    \   if (in_array($value, $clean)) {\n            unset($numbers[$key]);\n    \
    \    }\n        else {\n            $clean[] = $value;\n        }\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwc6atl7.php:26\n\
    Stack trace:\n#0 /tmp/tmpvwc6atl7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvwc6atl7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  foreach ($numbers as $number) {\n    if (!array_search($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeneqrdi.php:22\n\
    Stack trace:\n#0 /tmp/tmpgeneqrdi.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgeneqrdi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $hash = [];\n\n    foreach ($numbers as $number) {\n\
    \        if (!isset($hash[$number])) {\n            $hash[$number] = true;\n \
    \           $result[] = $number;\n        }\n    }\n\n    return $result;\n}\n\
    </code>\n<|/ a tags=php,arrays,sorting dscore=2 |>\n<| c |>\nthis doesn't work\
    \ for duplicates in the beginning\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdw7ve4yr.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    foreach ($numbers as $index => $number) {\n        $new_array[] = $number;\n\
    \        $counts[$number]++;\n    }\n\n    $new_array = array_filter($new_array,\
    \ function ($number) {\n        return $number < 1;\n    });\n\n    foreach ($new_array\
    \ as $number) {\n        if (!isset($counts[$number])) {\n            $new_array[$number]\
    \ = 0;\n        }\n    }\n\n    return $new_array;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nYes, I like this solution a lot more, because it doesn't have to create\
    \ a new array in the end but can just filter the original one. But I guess that\
    \ depends on the requirements of the problem.\n<|/ c |>\n<| a |>\nThis can be\
    \ done in PHP using array_count_values(). This will give you an array in which\
    \ every element will be a key and its value the number of occurrences of the element:\n\
    <code>\n$arr = [1,2,2,2,2,3,3,4,4,5,5,5,5,6];\n$counts = array_count_values($arr);\n\
    print_r($counts);\n</code>\nThe output will be:\n<code>\nArray\n(\n    [5] =>\
    \ 3\n    [6] => 1\n    [4] => 2\n    [3] => 2\n    [2] => 4\n    [1] => 2\n)\n\
    </code>\n<|/ a dscore=4 tags=arrays,php |>\n<| c |>\nThis also works with an associative\
    \ array. For example, `array_count_values($arr);` gives the count of occurrence\
    \ of $arr[\"dog\"], $arr[\"cat\"], $arr[\"fish\"] and so on.\n<|/ c |>\n<| a dscore=4\
    \ |>\nI needed to do the same thing for a custom array where I didn't want to\
    \ use array_count_values or array_count_keys. So I built it based on looping through\
    \ an array.\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpolh2dets.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // Sorting makes sure we don't remove duplicates, but we do keep their\
    \ order.\n  natsort($numbers);\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    // If we haven't seen the number yet...\n    if (!in_array($number, $result))\
    \ {\n      // ...save it in the result.\n      $result[] = $number;\n    }\n \
    \ }\n  return $result;\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=arrays,php,duplicates\
    \ |>\nHere is another method using array_count_values().\n<code>\n$arr = [4,2,3,1,1,1];\n\
    $counts = array_count_values($arr);\n\nprint_r(array_filter($counts));\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 tags=arrays,php,duplicates |>\nMy solution is\
    \ based on this answer:\n<code>\n$numbers = array(\n  0 => '0',\n  1 => '1',\n\
    \  2 => '2',\n  3 => '3',\n  4 => '4',\n  5 => '5'\n);\n\n$newarray = array_unique(array_map(function($x){\n\
    \  return $numbers[$x];\n}, array_values($numbers)));\n</code>\nThe array_map\
    \ call will map the array $numbers into the array $newarray with key the number\
    \ value from the array $numbers and value the index value of that number in the\
    \ array.\nThe array_unique call will remove duplicates\n<|/ a |>\n<| a dscore=2\
    \ tags=arrays,php,duplicates |>\nI needed this solution for a while to remove\
    \ duplicates from database results. \nBut i also needed a way to count and filter\
    \ them. \nThis is what I did for that.\n<code>\n$unique = array_count_values($result);\
    \ //array that contains the unique elements (the keys of the array)\n$unique =\
    \ array_filter($unique); //filter the values array that has more than 1 value\n\
    $unique = array_keys($unique); //remove the keys\n$unique = array_values($unique);\
    \ //remove the values\n</code>\nIf you want a more specific example please ask\
    \ me because i could also do more complex things.\n<|/ a |>\n<| a tags=arrays,php,duplicates\
    \ |>\n<code>\n$array = array('1','2','3','4','5','6','7','8','9','10','11');\n\
    \n$array = array_unique($array);\n\nforeach($array as $value){\n  echo $value\
    \ . \" \" . count($array).\"<br>\";\n}\n\n/*Output\n1 6\n2 6\n3 6\n4 6\n5 \nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf3gj5uns.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  sort($numbers);\n  $output = [];\n  foreach ($numbers as $key => $num)\
    \ {\n    if (!isset($output[$num])) {\n      $output[$num] = $num;\n    }\n  }\n\
    \  return array_values($output);\n}\n</code>\n<|/ a dscore=2 tags=arrays,php,sorting\
    \ |>\n<| a dscore=1 |>\nThis problem seems very similar to that of finding the\
    \ kth largest element in an unsorted array. The following algorithm will return\
    \ the kth largest element in O(n) time. \n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaxn_tgpv.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $cleaned = [];\n  $seen = [];\n  foreach ($numbers as $number) {\n    if\
    \ (array_key_exists($number, $seen)) {\n      unset($seen[$number]);\n    } else\
    \ {\n      $cleaned[] = $number;\n      $seen[$number] = true;\n    }\n  }\n \
    \ return $cleaned;\n}\n\nadd_shortcode('remove_duplicates', 'remove_duplicates');\n\
    </code>\nNow you can use [remove_duplicates] in the shortcode.\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm3h7pnn5.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $key => $number) {\n    if (!array_key_exists($number,\
    \ $result)) {\n      $result[$number] = $key;\n    }\n  }\n  return array_values($result);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThank you very much for your answer. Can you please\
    \ give an example of using the array_unique method on the array of integers?\n\
    <|/ c |>\n<| a tags=arrays,php,sorting dscore=2 |>\nIf all numbers are unique,\
    \ you can use array_unique (PHP 5 and higher):\n<code>\n$numbers = array(12, 13,\
    \ 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25);\n$numbers = array_unique($numbers);\n\
    </code>\nIf your numbers are not unique, but you only want to sort them alphabetically,\
    \ you can sort the array by value:\n<code>\nsort($numbers);\n</code>\nAnd then\
    \ array_unique:\n<code>\n$numbers = array_unique($numbers);\n</code>\n<|/ a |>\n\
    <| c |>\nThank you very much for your answer. Can you please give an example of\
    \ using the array_unique method on the array of integers?\n<|/ c |>\n<| c |>\n\
    Updated answer.\n<|/ c |>\n<| a dscore=1 tags=arrays,php,sorting |>\nIf you want\
    \ to remove duplicates in ascending order then:\n<code>\n$numbers = array(12,\
    \ 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25);\n$numbers = array_unique($numbers);\n\
    sort($numbers);\n</code>\n<|/ a |>\n<| c |>\nThank you very much for your answer.\
    \ Can you please give an example of using the array_unique method on the array\
    \ of integers?\n<|/ c |>\n<| a dscore=1 |>\nThe array_unique method will do it.\
    \  You can sort it first, or just use array_unique.\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| a tags=arrays,php,sorting |>\n<code>\n<?php\n$numbers = array(12, 13,\
    \ 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25);\n$numbers = array_unique($numbers);\n\
    sort($numbers);\nprint_r($numbers);\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpww9pcqqx.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  $result = [];\n\n  foreach ($numbers\
    \ as $key => $value) {\n    if ($counts[$value] == 1) {\n      $result[] = $value;\n\
    \      unset($counts[$value]);\n    }\n  }\n\n  return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nthank you for this nice answer. this looks like it could be\
    \ the answer i am looking for. i will try it out and get back to you. thanks again!\n\
    <|/ c |>\n<| c |>\nhow would you do an alternative for just 1 occurrence of something.\
    \ for example, if you have a list of 10 numbers and you only want to keep the\
    \ numbers that appear 5 times out of the 10. how would you do it?\n<|/ c |>\n\
    <| c |>\nThe code above would work with an input like `$numbers = [1, 2, 3, 4,\
    \ 1, 1, 2, 3, 4]`. It would return `[1, 3, 4]`.\n<|/ c |>\n<| a |>\nA simple solution\
    \ would be to use a hash map to keep track of the number of times each number\
    \ is seen. You could use array_count_values to get the counts and then filter\
    \ the input array using array_filter to remove items with only a single count.\n\
    <code>\n$numbers = [1, 2, 3, 2, 4, 4, 2, 1];\n\n$counts = array_count_values($numbers);\n\
    \n$result = array_filter($numbers, function($v) use ($counts) {\n    return $counts[$v]\
    \ === 1;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n<?php \n\n$array = [1,2,2,3,4,5,2,6,5,5];\n\n$arr1 =\
    \ array_count_values($array);\n\nforeach($arr1 as $key => $value)\n{\n    if($value\
    \ == 1)\n    {\n        unset($array[$key]);\n    }\n}\n\nprint_r($array);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThe code above would work with an input like\
    \ `$array = [1, 2, 3, 4, 1, 1, 2, 3, 4]`. It would return `[1, 3, 4]`.\n<|/ c\
    \ |>\n<| c |>\nIt will also work for [1,2,2,3,4,5,2,6,5,5] array\n<|/ c |>\n<|\
    \ a dscore=0 |>\nYou can use array_count_values() function to count unique values\
    \ in your array and count the key with count equal 1\n<code>\n$input = array(1,2,2,3,4,5,2,6,5,5);\n\
    $counts = array_count_values($input);\n$result = array_filter($input, function($v)\
    \ use \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi8pak1u6.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $results = [];\n  $numbers = array_unique($numbers);\n\n  foreach ($numbers\
    \ as $number) {\n    if (!in_array($number, $results)) {\n      $results[] = $number;\n\
    \    }\n  }\n\n  return $results;\n}\n</code>\nI used the above to solve this\
    \ problem:\n<code>\n<?php\n$input = \"[10, 10, 20, 30, 40, 40, 40]\";\n$input\
    \ = explode(\",\", $input);\n$input = remove_duplicates($input);\n$input = implode(\"\
    ,\", $input);\n\necho $input;\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpijfag6f3.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    $result[$number]\
    \ = true;\n  }\n  return array_keys($result);\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsorsz9n.php:20\n\
    Stack trace:\n#0 /tmp/tmpnsorsz9n.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpnsorsz9n.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $hash = [];\n    foreach ($numbers as $number) {\n        if (!isset($hash[$number]))\
    \ {\n            $hash[$number] = 1;\n        } else {\n            $hash[$number]++;\n\
    \        }\n    }\n    return array_keys($hash);\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nWhy do you think `array_unique()` is not sufficient?\n<|/ c |>\n\
    <| c |>\nThis approach is incorrect in the case where the input contains duplicates\
    \ because of the way `array_unique()` works. See the example in the documentation.\n\
    <|/ c |>\n<| c |>\nI see. The example in the documentation you cited is misleading,\
    \ I agree.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$input = array(\n    1,2,3,4,2,3,4\n\
    );\n$output = [];\nforeach ($input as $val) {\n    if (isset($output[$val])) {\n\
    \        $output[$val]++;\n    } else {\n        $output[$val] = 1;\n    }\n}\n\
    $input = array_keys($output);\n</code>\nThis will give you:\n<code>\nArray\n(\n\
    \    [0] => 1\n    [2] => 4\n)\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis assumes\
    \ that the input array will be unique -- which is not the case here. The input\
    \ array has duplicates that should be removed.\n<|/ c |>\n<| c |>\n: I agree with\
    \ you, but this would remove duplicates as well as keep order\n<|/ c |>\n<| c\
    \ |>\nIt doesn't - that's what he said, plus the order is lost.\n<|/ c |>\n<|\
    \ c |>\nThis would only work for arrays that have a single key, as array_keys()\
    \ returns the keys as an array. For example, `[1,2,2,3]` would give `array(2,3)`.\n\
    <|/ c |>\n<| c |>\n, array_keys() returns the keys as an array, too. Try it yourself\
    \ in the console\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$input = array_count_values($input);\n\
    $input = array_keys($input);\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php\
    \ |>\nIf you don't care about the order, this will work:\n<code>\n$input = array(1,2,3,4,2,3,4);\
    \ // input\n$input = array_count_values($input); // associative array\n$input\
    \ = array_keys($input); // output\n</code>\nSee array_count_values()\n<|/ a dscore=2\
    \ \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt4j4hl8e.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(array_count_values($numbers), function ($count) {\n\
    \    return $count > 1;\n  });\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThank\
    \ you, this really helped!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n\n$list\
    \ = array( 1, 2, 3, 3, 2, 1, 4, 2, 1, 7 );\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppoljtf3g.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        $result[$number]\
    \ = 1;\n    }\n    return array_keys($result);\n}\n\n/**\n * Given a filename\
    \ string, create an array that is the contents of the file.\n * @param $filename\
    \ The filename to read.\n * @return An array of lines of the file.\n * @throws\
    \ FileNotFoundException\n */\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbsve3mf.php:27\n\
    Stack trace:\n#0 /tmp/tmptbsve3mf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptbsve3mf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $new_array = array();\n  $seen = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $seen)) {\n      $seen[] = $number;\n      $new_array[]\
    \ = $number;\n    }\n  }\n  return $new_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxtl8eew.php:25\n\
    Stack trace:\n#0 /tmp/tmpvxtl8eew.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvxtl8eew.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // Add first element to the hashset, which will force it to be the first\
    \ element in the list\n    foreach ($numbers as $number) {\n        $hash[$number]\
    \ = $number;\n    }\n\n    // Remove each element that occurs more than once.\n\
    \    // While doing this I keep track of the last element seen\n    $lastElement\
    \ = null;\n    foreach ($hash as $number => $key) {\n        if ($key != $lastElement)\
    \ {\n            echo $number, PHP_EOL;\n            $lastElement = $key;\n  \
    \      }\n    }\n\n    // Return last element (hash is not a hash)\n    return\
    \ $hash[$lastElement];\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpi6effke2.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6effke2.php:31\n\
    Stack trace:\n#0 /tmp/tmpi6effke2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi6effke2.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $sorted = sort($numbers);\n    $count = count($numbers);\n    $index\
    \ = 0;\n    for ($i = 1; $i < $count; $i++) {\n        if ($numbers[$index] ==\
    \ $sorted[$i]) {\n            $index++;\n        } else {\n            unset($numbers[$index]);\n\
    \        }\n    }\n    return $numbers;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ is not generic and assumes the input is a strictly ordered set. I think this\
    \ doesn't quite answer the question as asked.\n<|/ c |>\n<| c |>\nThanks for your\
    \ input. While I haven't tested the code, I believe it to be correct. Do you have\
    \ a counter example?\n<|/ c |>\n<| c |>\nNo, this is very clever, though I wish\
    \ it would work for a situation like `remove_duplicates([1, 2, 3, 4, 5])` since\
    \ it is supposed to keep order and remove duplicates only. Anyway, I wrote this\
    \ up in PHP just to see if I can (it turns out I can), and then realized that\
    \ in Python this would actually be the best way to do it.\n<|/ c |>\n<| c |>\n\
    Ah, I see. I've updated the answer to reflect this.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nIf you already know the array is not ordered, then you can use this function:\n\
    <code>\n$array = array(\"apple\", \"banana\", \"apple\", \"apple\", \"mango\"\
    );\n\n$noDupes = array_unique($array);\n\nvar_dump($noDupes);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis solution does not guarantee keeping order and removing\
    \ duplicates.\n<|/ c |>\n<| c |>\nIt does keep the order. array_unique only removes\
    \ duplicate values, and it returns the unique values in an array. So, the order\
    \ is preserved. It does not keep a record of which values are duplicates though.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"apple\", \"banana\"\
    , \"apple\", \"apple\", \"mango\");\n$unique = array_unique($array);\n$sorted\
    \ = array_values($unique);\nprint_r($sorted);\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis solution does not guarantee keeping order and removing duplicates.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"apple\", \"banana\", \"apple\"\
    , \"apple\", \"mango\");\nsort($array);\n$unique = array_unique\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqjggdpof.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($value) {\n    return array_count_values($numbers)\
    \ == 1;\n  });\n}\n\n/**\n * Adds the two numbers without a decimal or rounding.\n\
    \ * If only one number exists, it will round the other number's place.\n * Returns\
    \ rounded number.\n * >>> add_numbers([1.1, 2.2, 3.3, 4.4])\n * 6.0\n * >>> add_numbers([5.6,\
    \ 6.7])\n * 10.3\n * >>> add_numbers([7.0, 8.0])\n * 10.0\n * >>> add_numbers([10.0])\n\
    \ * 10.0\n * >>> add_numbers([])\n * 0.0\n * >>> add_numbers([1.1, 2.2, 3.3, 4.4,\
    \ 5.6, 6.7])\n * 10.3\n * >>> add_numbers([5.6, 6.7, 8.0, 9.0])\n * 11.3\n * >>>\
    \ add_numbers([7.0, 8.0, 10.0])\n * 12.0\n * >>> add_numbers([10.0, 10.0])\n *\
    \ 20.0\n */\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values() expects parameter 1 to be array, null given\
    \ in /tmp/tmp5r955gnh.php on line 8\n\nWarning: array_count_values() expects parameter\
    \ 1 to be array, null given in /tmp/tmp5r955gnh.php on line 8\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, null given in /tmp/tmp5r955gnh.php on line\
    \ 8\n\nWarning: array_count_values() expects parameter 1 to be array, null given\
    \ in /tmp/tmp5r955gnh.php on line 8\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5r955gnh.php:41\nStack trace:\n#0 /tmp/tmp5r955gnh.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5r955gnh.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // Create a new array and add all but the last element.\n  // If the last\
    \ element was already in the new array, skip it.\n  $last = array_pop($numbers);\n\
    \  $new = array();\n  foreach ($numbers as $number) {\n    if ($number !== $last)\
    \ {\n      $new[] = $number;\n    }\n  }\n  return $new;\n}\n</code>\nFor completeness,\
    \ here is the array_count_values version:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqgv4lvr5.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (in_array($number,\
    \ $result)) {\n            continue;\n        }\n        $result[] = $number;\n\
    \    }\n    return $result;\n}\n</code>\nFor your second question, please read\
    \ this: How do I remove special characters in a string in PHP?\n<|/ a dscore=4\
    \ |>\n<| c |>\nGood point about using array_unique. One small problem: it sorts\
    \ the array first. The sort is unnecessary for most use cases, though it might\
    \ be useful in some cases.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$new_array = array_values(array_unique($array));\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=2 |>\nThe array_unique() function\
    \ is useful when you are dealing with numeric arrays, where you know there will\
    \ only be a few duplicate values in the array, and where it makes sense to keep\
    \ them in the same relative order.\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n\
    $new = array();\n$new = array_unique($array);\n</code>\n<|/ a dscore=2 tags=arrays,php\
    \ |>\n<| a |>\nIf you don't need to preserve the order:\n<code>\n$unique = array_values(array_filter(array_unique(array_keys($arr))));\n\
    </code>\n<|/ a tags=arrays,php dscore=2 |>\n<| a dscore=1 tags=arrays,php |>\n\
    For this one:\n<code>\n$data = array(1, \"2\", 3, \"4\", \"2\", \"5\", \"2\");\n\
    </code>\nyou can use\n<code>\n$new_data = array_values(array_unique($data));\n\
    </code>\nto get this:\n<code>\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] =>\
    \ 3\n    [3] => 4\n    [4] => 5\n)\n</code>\n<|/ a |>\n<| a tags=arrays,php dscore=1\
    \ |>\nThe only way is to do it manually using the array_keys and array_values\
    \ functions. Like so:\n<code>\n$unique = array();\nforeach($array as $value){\n\
    \    if(!in_array($value, $unique))\n        $unique[] = $value;\n}\n</code>\n\
    EDIT: Removed sort from the original answer, because array_unique will do it for\
    \ you now.\n<|/ a |>\n<| c |>\n`in_array` doesn't care about order, it just checks\
    \ if the value is in the array already.\n<|/ c |>\n<| c |>\nGood call, I missed\
    \ that in the documentation. I've updated my answer.\n<|/\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpidxk7f29.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // O(n) - create a set of the numbers from our input\n  $numbers_set =\
    \ array_flip(array_map(function($num) { return $num; }, $numbers));\n\n  // O(n)\
    \ - loop through our input array\n  foreach ($numbers as $key => $number) {\n\
    \    // if our set does not contain the current number\n    if (!isset($numbers_set[$number]))\
    \ {\n      // remove it from the array\n      unset($numbers[$key]);\n    }\n\
    \  }\n\n  return $numbers;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c\
    \ |>\nThat's not really a good solution as it will produce incorrect results when\
    \ there are more than one element with the same value.\n<|/ c |>\n<| c |>\nI agree,\
    \ there are many other ways to solve this problem. This is just to demonstrate\
    \ the technique.\n<|/ c |>\n<| c |>\nI don't think this works, it won't sort correctly\
    \ if the numbers are the same, if you try it it will output the following...\n\
    \n`[3, 2, 3, 4, 1]`\n<|/ c |>\n<| c |>\nIt outputs [1, 3, 2, 4]. I'm not sure\
    \ what you're referring to by \"sort correctly\". Did you check the fiddle?\n\
    <|/ c |>\n<| c |>\nI'm sorry, I didn't see that, it works now. Thanks\n<|/ c |>\n\
    <| a |>\nYou can create a temporary array where you remove all duplicate values\
    \ and sort the new array:\n<code>\n<?php\n$numbers = array(1,2,3,4,1,3,1,2,3);\n\
    $result = array();\nforeach($numbers as $num) {\n    if(!in_array($num, $result))\
    \ {\n        $result[] = $num;\n    }\n}\nsort($result);\nprint_r($result);\n\
    </code>\nThe output is:\n<code>\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2]\
    \ => 3\n    [3] => 4\n)\n</code>\n<|/ a dscore=2 tags=php,arrays,sorting |>\n\
    <| c |>\nThis is actually the most elegant solution that I saw on SO so far. I\
    \ would say this is the most efficient in terms of memory. Thank you!\n<|/ c |>\n\
    <| c |>\nThe most important thing is that it works even when there are duplicates\
    \ in the array.\n<|/ c |>\n<| c |>\nI agree this solution is very simple and efficient\
    \ but if you have thousands of numbers and you want to sort them quickly you can\
    \ try [this method](http://stackoverflow.com/a/38321735/1545996).\n<|/\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf1nyfdv3.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $results = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $results)) {\n      $results[] = $number;\n    }\n  }\n  return $results;\n\
    }\n</code>\nPHP Arrays: Sort array based on values\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw4h8dtbg.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $seen = [];\n    $sorted = array_reverse($numbers);\n\
    \    foreach ($sorted as $item) {\n        if (in_array($item, $seen)) {\n   \
    \         continue;\n        }\n        $seen[] = $item;\n        $result[] =\
    \ $item;\n    }\n    return array_reverse($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9qrzkiyg.php:27\n\
    Stack trace:\n#0 /tmp/tmp9qrzkiyg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9qrzkiyg.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  if ($numbers == $numbers[0]) {\n    return $numbers;\n  }\n  $result =\
    \ [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number])) {\n\
    \      $result[$number] = $number;\n    } else {\n      unset($result[$number]);\n\
    \    }\n  }\n  return array_keys($result);\n}\n</code>\n<|/ a dscore=5 tags=php,arrays,sorting\
    \ |>\n<| c |>\n`function remove_duplicates($numbers) {\n    foreach ($numbers\
    \ as $i => $number) {\n        if (in_array($number, $numbers)) {\n          \
    \  unset($numbers[$i]);\n        }\n    }\n    return array_values($numbers);\n\
    }`\n<|/ c |>\n<| c |>\nWhat about this function? https://gist.github.com/JenniferAnn/7083839\n\
    <|/ c |>\n<| c |>\nI think this would actually remove duplicates, which is what\
    \ most of the answers here seem to want.\n<|/ c |>\n<| c |>\n: I think you are\
    \ right. I added an answer with a `remove_duplicates()` method that keeps order\
    \ of elements left unchanged. But it actually removes duplicates ;)\n<|/ c |>\n\
    <| c |>\nThe function can be simplified to `$numbers = array_unique(array_map(function($number)\
    \ {\n                return $number !== $number ? $number : null;\n          \
    \  }, $numbers));`\n<|/ c |>\n<| a dscore=5 tags=php,arrays,sorting |>\nSort it\
    \ and remove duplicates:\n<code>\n$numbers = array_unique($numbers);\nsort($numbers);\n\
    </code>\n<|/ a |>\n<| c |>\nThat won't work if you have, say, a date in the array\
    \ and you want the result to contain that date first.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have multiple duplicate values.\n<|/ c |>\n<| c |>\nI do\
    \ not think this works. If you have duplicate values, the whole array is considered\
    \ sorted, so it will remove one of the duplicates and put it first, which means\
    \ you will have an array of two dates that is actually the same date. Sort it\
    \ on the date first if you want distinct values on top.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$unique = array_unique($numbers);\nsort($unique);\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis also doesn't work if you have multiple duplicate\
    \ values.\n<|/ c |>\n<| c \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmtc5n9n5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  return array_filter(\n    $numbers,\n    function ($number)\
    \ use ($numbers, $seen) {\n      if (!isset($seen[$number])) {\n        $seen[$number]\
    \ = $number;\n        return true;\n      }\n      return false;\n    },\n   \
    \ ARRAY_FILTER_USE_BOTH\n  );\n}\n</code>\n<|/ a dscore=4 tags=php,arrays,duplicates\
    \ |>\n<| a tags=php,arrays,duplicates dscore=2 |>\nIn PHP 7.4+, you can use array_column(),\
    \ array_count_values(), array_filter(), and array_merge():\n<code>\n$array = [1,\
    \ 2, 2, 2, 3, 3];\n\n$result = array_merge(\n    array_filter($array, fn($x) =>\
    \ !array_key_exists($x, $result))\n);\n</code>\nOutput:\n<code>\nArray\n(\n  \
    \  [0] => 1\n    [1] => 3\n)\n</code>\n<|/ a |>\n<| a dscore=2 |>\nFor a multidimensional\
    \ array, you can do:\n<code>\n$array = array_unique( array_column( $array, 0 )\
    \ );\n</code>\n<|/ a tags=php,arrays,duplicates |>\n<| a tags=php,arrays,duplicates\
    \ |>\nYou can try this solution:\n<code>\nfunction candidate(...$args) {\n   \
    \ return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1shci03s.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  $result = [];\n  foreach ($numbers\
    \ as $number) {\n    if ($counts[$number] > 1) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI didn't\
    \ downvote you, it's great that you included code as well.\n<|/ c |>\n<| c |>\n\
    I understand this was a question about the logic behind removing duplicates, but\
    \ I don't think it's the fastest solution. Why not just use a `while`?\n<|/ c\
    \ |>\n<| c |>\nThank you for pointing out a better way. I was trying to be concise\
    \ but clearly I was wrong.\n<|/ c |>\n<| c |>\nI agree that this is probably the\
    \ simplest solution. Just remember that it is _not_ the fastest solution, since\
    \ `array_count_values()` is O(n) and `while` is O(n^2). `array_merge` and `array_unique`\
    \ require O(n) space for their temporary arrays. In reality, `while` is O(n) but\
    \ only in the best case scenario - in some cases (when there are duplicates) it\
    \ becomes O(n^2). It might be possible to use [this solution](https://stackoverflow.com/a/5949935/85964)\
    \ to speed up `array_count_values()` a bit. But I'm not sure how.\n<|/ c |>\n\
    <| c |>\nI believe this would be a solution: https://3v4l.org/LqeZc\n<|/ c |>\n\
    <| a dscore=0 |>\nYou can use the array_unique method and pass the callback function\
    \ to compare the values in the array to ensure a unique array:\n<code>\n$array1\
    \ = [1, 2, 3, 2, 4];\n$array2 = [4, 1, 6, 2];\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9riashgc.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    $last = null;\n    foreach ($numbers as $number)\
    \ {\n        if ($number != $last) {\n            $last = $number;\n         \
    \   unset($numbers[array_search($number, $numbers)]);\n        }\n    }\n    return\
    \ $numbers;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is wrong. It removes all duplicates\
    \ but keeps the original order.\n<|/ c |>\n<| a tags=arrays,php dscore=2 |>\n\
    This should do it\n<code>\n$array = array(1, 1, 2, 2, 2, 3);\n\n$count = array_count_values($array);\n\
    $result = array();\n\nforeach ($count as $key => $countValue) {\n    if ($countValue\
    \ > 1) {\n        foreach ($array as $i => $value) {\n            if ($i == $key)\
    \ {\n                continue;\n            }\n            if ($value == $key)\
    \ {\n                $result[] = $value;\n            }\n        }\n    }\n}\n\
    print_r($result);\n</code>\n<|/ a |>\n<| c |>\nI like this one but will it work\
    \ if there are multiple items with the same value?\n<|/ c |>\n<| c |>\n: Yes,\
    \ it will. Check the example I gave in the comments on the other answer\n<|/ c\
    \ |>\n<| c |>\nJust a little correction on line 4: foreach ($array as $i => $value)\
    \ should be foreach ($array as $i => $key) for the code to be correct. I didn't\
    \ notice it because I copied and pasted my code from my answer. Thanks!\n<|/ c\
    \ |>\n<| c |>\n: No problem! And thanks for pointing out my error :)\n<|/ c |>\n\
    <| a dscore=1 tags=arrays,php |>\nTry using array_count_values\n<code>\n$numbers\
    \ = array(1, 1, 2, 2, 2, 3);\n$count = array_count_values($numbers);\n$result\
    \ = array();\n\nforeach ($count as $key => $countValue) {\n    if ($countValue\
    \ > 1) {\n        foreach ($numbers as $i => $value) {\n            if ($i ==\
    \ $key) {\n                continue;\n            }\n            if ($value ==\
    \ $key) {\n                $result[] = $value;\n            }\n        }\n   \
    \ }\n}\nprint_r($result);\n</code>\nOutput\n<code>\nArray\n(\n    [0] => 1\n \
    \   [1] => 2\n    [2] => 3\n)\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n$arr1\
    \ = array(1,2,2,3,3,3,4,4,5);\n$arr2 = array_count_values($arr1);\n$arr\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph6fg4k4b.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  return array_filter($numbers,\
    \ function($value) use ($counts) {\n    return $counts[$value] == 1;\n  });\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetswjcp0.php:20\n\
    Stack trace:\n#0 /tmp/tmpetswjcp0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpetswjcp0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $nums = array_count_values($numbers);\n  $result = array();\n  foreach\
    \ ($nums as $num => $count) {\n    if ($count > 1) {\n      $result[] = $num;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis seems\
    \ like it would be a very difficult task if you wanted to do it for n or more\
    \ numbers.\n<|/ c |>\n<| a tags=php,laravel,arrays,laravel-4 dscore=0 |>\n<code>\n\
    <?php\n\n$nums = array(5, 3, 6, 2, 5, 4, 3, 6, 5, 6, 6, 4);\n\n$unique = array();\n\
    $unique = array_unique($nums);\n\nvar_dump($unique);\n</code>\n<|/ a |>\n<| a\
    \ |>\nThis will get you what you need :)\n<code>\n<?php\n$nums = array(5, 3, 6,\
    \ 2, 5, 4, 3, 6, 5, 6, 6, 4);\n$unique = array();\nfor($i = 0; $i < count($nums);\
    \ $i++){\n    if(!in_array($nums[$i], $unique)){\n        $unique[] = $nums[$i];\n\
    \    }\n}\nprint_r($unique);\n</code>\n<|/ a dscore=0 tags=php,laravel,arrays,laravel-4\
    \ |>\n<| c |>\nThis seems like it would be a very difficult task if you wanted\
    \ to do it for n or more numbers.\n<|/ c |>\n<| a |>\nOne solution is to use array_count_values.\n\
    <code>\n$data = array_count_values($data);\n$unique = array_filter($data);\n</code>\n\
    <|/ a dscore=0 tags=php,laravel,arrays,laravel-4 |>\n<| c |>\nThis seems like\
    \ it would be a very difficult task if you wanted to do it for n or more numbers.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$nums = array(5, 3, 6, 2, 5, 4, 3, 6, 5, 6,\
    \ 6, 4);\n$unique = array();\nfor($i = 0; $i < count($nums); $i++){\n    if(!in_array($nums[$i],\
    \ $unique)){\n        $unique[] = $nums[$i];\n    }\n}\nprint_r($unique);\n</code>\n\
    <|/ a tags=php,laravel,arrays,laravel-4 |>\n<| c |>\nThis seems like it would\
    \ be a very difficult task if you wanted to do it for n or more numbers.\n<|/\
    \ c |>\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppm_gvf1m.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $duplicates = [];\n  $seen = [];\n  foreach ($numbers as $number) {\n \
    \   if ($number !== $seen[$number]) {\n      $seen[$number] = $number;\n     \
    \ $duplicates[] = $number;\n    }\n  }\n  return $duplicates;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7hsrumj.php:24\n\
    Stack trace:\n#0 /tmp/tmpg7hsrumj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpg7hsrumj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $sorted = array_unique($numbers);\n  $result = array();\n  foreach ($sorted\
    \ as $n) {\n    if (!in_array($n, $result)) {\n      $result[] = $n;\n    }\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nHi Jessica,\n\
    \nThis is pretty much the method I've been using. However it seems to take more\
    \ time than using array_unique.\n\nThis was the best method I've found thus far.\n\
    \nThanks!\n<|/ c |>\n<| a tags=arrays,php |>\nIn php 8 you can use a lambda function\
    \ with array_filter. Like this:\n<code>\n$array = [1,2,2,3,4];\n$newArray = array_filter($array,\
    \ fn($element) => $element !== array_search($element, $array));\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis should be the accepted answer, because it's elegant\
    \ and simple :)\n<|/ c |>\n<| c |>\nThis is very nice, but as I understand, this\
    \ is going to make each value be an associative array with `key` `$element` so\
    \ you can't use it in foreach loop for example `$filtered = array_filter($array,\
    \ fn($element) => $element !== array_search($element, $array));\n        foreach\
    \ ($filtered as $value) {\n            $items[] = $value;\n        }`\n<|/ c |>\n\
    <| c |>\nyou can use the `create_function()` function. Like this: `$newArray =\
    \ array_filter($array, create_function('$element', 'return $element !== array_search($element,\
    \ $array);'));`\n<|/ c |>\n<| a dscore=4 |>\nI couldn't make any of the answers\
    \ work, so I wrote my own. This one works as expected. It doesn't keep order of\
    \ the original array and uses two for loops instead of one. Hope it helps someone:\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1ykrshfz.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    </code>\nThe function remove_duplicates is pretty straight forward: it takes an\
    \ array and builds a new array by iterating over each element and adding it to\
    \ a new array if the element doesn't already exist in that array.\n<|/ a tags=algorithm,php,language-agnostic\
    \ |>\n<| c |>\nNice solution, but it will not return the desired results.  Eg.\
    \  remove_duplicates([1,2,3,2,4]) should return [1,3,4], but will instead return\
    \ [1, 2] (the order of the elements left unchanged is kept).  Your solution would\
    \ return [1, 3, 2] (order maintained, no duplicates).\n<|/ c |>\n<| c |>\n: That's\
    \ a very good point -- I've modified the solution above to include a second parameter\
    \ that will preserve the order of the elements.  I wasn't aware that it was important\
    \ to preserve the original order when removing duplicates, so this solution does\
    \ preserve the order in the case where an element appears only once.\n<|/ c |>\n\
    <| a dscore=3 |>\nUse array_unique in PHP.  Example:\n<code>\n$a = array(\"apple\"\
    ,\"banana\",\"carrot\");\n$b = array_unique($a);\nprint_r($b);\n</code>\nThe above\
    \ example will produce the following output:\n<code>\nArray\n(\n    [0] => apple\n\
    \    [2] => carrot\n)\n</code>\n<|/ a tags=algorithm,php,language-agnostic |>\n\
    <| c |>\nI believe he wants to keep the order\n<|/ c |>\n<| c |>\nAh, yes, missed\
    \ that part of the requirement.  I've added a note to the question.\n<|/ c |>\n\
    <| c |>\n+1 nice solution, however it wont return his desired output `[1, 3, 4]`\n\
    <|/ c |>\n<| a tags=algorithm,php,language-agnostic |>\nAnother solution using\
    \ array_intersect_assoc function\n<code>\n$a1 = array(1,2,3);\n$a2 = array(1,2,3);\n\
    $a3 = array(1,3,4);\n\n$a1 = array_intersect_assoc($a1,$a2);\n$a2 = array_intersect_assoc($a2,$a3);\n\
    $a3 = array_intersect_assoc($a1,$a3);\n\nprint_r($a1);\nprint_r($a2);\nprint_r($a3);\n\
    </code>\noutput:\n<code>\nArray\n(\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqpim4w23.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_unique(array_filter($numbers, function($value, $key) { return\
    \ !in_array($value, $numbers); }, ARRAY_FILTER_USE_BOTH));\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpgfvewm49.php\
    \ on line 7\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmpgfvewm49.php on line 7\n\nWarning: in_array() expects parameter 2\
    \ to be array, null given in /tmp/tmpgfvewm49.php on line 7\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpgfvewm49.php on line\
    \ 7\n\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpgfvewm49.php\
    \ on line 7\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmpgfvewm49.php on line 7\n\nWarning: in_array() expects parameter 2\
    \ to be array, null given in /tmp/tmpgfvewm49.php on line 7\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpgfvewm49.php on line\
    \ 7\n\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpgfvewm49.php\
    \ on line 7\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmpgfvewm49.php on line 7\n\nWarning: in_array() expects parameter 2\
    \ to be array, null given in /tmp/tmpgfvewm49.php on line 7\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgfvewm49.php:16\nStack trace:\n#0 /tmp/tmpgfvewm49.php(19):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgfvewm49.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_count_values($numbers);\n}\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nI think you mean array_count_values, not array_count_values\n<|/\
    \ c |>\n<| c |>\nYes, I meant array_count_values.  It seems I got mixed up in\
    \ the example code I originally posted, and I typed array_count_values instead\
    \ of array_count_values, so it was giving me a syntax error.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nHere is another solution (which I believe to be more efficient):\n<code>\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpokkcfdri.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  if (empty($numbers)) {\n    return $numbers;\n  }\n  $numbers = array_values($numbers);\n\
    \  $numbers = array_diff($numbers, array_unique($numbers));\n  return $numbers;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqq0_uygm.php:20\n\
    Stack trace:\n#0 /tmp/tmpqq0_uygm.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqq0_uygm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  $counts = array_filter($counts,\
    \ static function ($x) { return $x > 1; });\n  return array_keys($counts);\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThank you for this answer. It helped me a\
    \ lot.\n<|/ c |>\n<| a dscore=5 tags=arrays,php |>\n<code>\n$a = array(1, 2, 3,\
    \ 4, 1, 2, 3, 4, 1, 2, 3, 4);\n$count = array_count_values($a);\n$a = array_filter($count,\
    \ static function ($x) use ($count) {\n    return $x > 1;\n});\n</code>\n<|/ a\
    \ |>\n<| a tags=arrays,php |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuouiwr6o.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$count = array_count_values($numbers);\n\t$new_array = array();\n\tforeach\
    \ ($count as $num => $num_in_set) {\n\t\tif ($num_in_set == 1) {\n\t\t\t$new_array[]\
    \ = $num;\n\t\t}\n\t}\n\treturn $new_array;\n}\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // Sort the array.\n    sort($numbers);\n\n    // Copy all elements once\
    \ to a new array.\n    $duplicates = $numbers;\n\n    // Count each occurrence\
    \ of each element in the input array.\n    foreach ($numbers as $key => $value)\
    \ {\n        $duplicates[$key]++;\n    }\n\n    // Remove all elements that occur\
    \ more than once.\n    $output = array_filter($duplicates, function ($count) {\n\
    \        return $count > 1;\n    });\n\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7sqtmzi.php:32\n\
    Stack trace:\n#0 /tmp/tmpo7sqtmzi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpo7sqtmzi.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    $result = array();\n    $last = array();\n    foreach\
    \ ($numbers as $number) {\n        if (!in_array($number, $last)) {\n        \
    \    $result[] = $number;\n            $last[] = $number;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvdfhutq.php:26\n\
    Stack trace:\n#0 /tmp/tmprvdfhutq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprvdfhutq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = $number;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmxhef4h.php:21\n\
    Stack trace:\n#0 /tmp/tmpcmxhef4h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcmxhef4h.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $newArray = array();\n    foreach ($numbers as $number) {\n        if\
    \ (in_array($number, $newArray)) {\n            continue;\n        }\n       \
    \ array_push($newArray, $number);\n    }\n    return $newArray;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_k_t7e2p.php:24\n\
    Stack trace:\n#0 /tmp/tmp_k_t7e2p.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_k_t7e2p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $distinct = array();\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $distinct)) {\n            $distinct[] = $num;\n        }\n    }\n    return\
    \ $distinct;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code worked for me. I had to\
    \ change the return statement to be `return array_unique($distinct);` instead\
    \ to not have duplicate values.\n<|/ c |>\n<| a tags=php,arrays dscore=2 |>\n\
    Try this:\n<code>\n$numbers = array(1,1,2,3,5,5,7,8);\n$result = array_count_values($numbers);\n\
    $result = array_filter($result,function($val){\n    return $val > 1;\n});\n\n\
    print_r($result);\n</code>\nResult:\n<code>\nArray\n(\n    [1] => 3\n)\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays |>\nThe cleanest and simplest way to do this is\
    \ to simply count the array elements:\n<code>\n$array = array(1,1,2,3,5,5,7,8);\n\
    $counts = array_count_values($array);\n</code>\nThen, you can simply filter the\
    \ array to get only the elements with more than one value:\n<code>\n$result =\
    \ array_filter($counts);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nA different\
    \ approach could be to count the occurrences and filter the array which contains\
    \ more than 1 occurrence of the value:\n<code>\n$numbers = [1,1,2,3,5,5,7,8];\n\
    $occurrences = array_count_values($numbers);\n$filtered = array_filter($occurrences,\
    \ function($value) use ($occurrences) {\n    return $value > 1;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like this approach as it is the\
    \ most concise and easy to understand\n<|/ c |>\n<| a tags=php,arrays |>\nHere's\
    \ a solution which keeps original array intact:\n<code>\n$result = array();\n\n\
    foreach ($numbers as $value) {\n    if (!in_array($value, $result)) {\n      \
    \  $result[$value] = 1;\n    } else {\n        $result[$value]++;\n    }\n}\n\n\
    print_r($result);\n</code>\nOutput:\n<code>\nArray ( [1] => 3 )\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=php,arrays dscore=1 |>\nyou can use a loop\n<code>\n\
    $numbers = array(1,1,2,3,5,5,7,8);\n$results = array();\n\nfor ($i=0;$i<count($numbers);$i++\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb375f4x6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$new = [];\n\t$seen = [];\n\tforeach ($numbers as $number) {\n\t\tif (!isset($seen[$number]))\
    \ {\n\t\t\t$new[] = $number;\n\t\t\t$seen[$number] = 1;\n\t\t}\n\t}\n\treturn\
    \ $new;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjrww_2e.php:25\n\
    Stack trace:\n#0 /tmp/tmpdjrww_2e.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdjrww_2e.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (in_array($number,\
    \ $result)) {\n            continue;\n        }\n        $result[] = $number;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtk58m2n.php:23\n\
    Stack trace:\n#0 /tmp/tmpbtk58m2n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbtk58m2n.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($n) {\n    return count($n) > 1;\n\
    \  });\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpd6k_3xe7.php on line 8\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpd6k_3xe7.php on\
    \ line 8\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpd6k_3xe7.php on line 8\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpd6k_3xe7.php on\
    \ line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6k_3xe7.php:17\n\
    Stack trace:\n#0 /tmp/tmpd6k_3xe7.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpd6k_3xe7.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $hash = [];\n  foreach ($numbers as $number) {\n    $hash[$number] = 1;\n\
    \  }\n  $result = [];\n  foreach ($hash as $number => $remove) {\n    if (!$remove)\
    \ {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0w7k566.php:25\n\
    Stack trace:\n#0 /tmp/tmpe0w7k566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpe0w7k566.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_values($numbers);\n  $count = array_count_values($numbers);\n\
    \  return array_filter(\n    array_keys($count),\n    function ($key) use ($numbers)\
    \ {\n      return $numbers[$key] > 1;\n    }\n  );\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nthanks for answering, i'll try this later today but i think i would have\
    \ to use a foreach loop to check if there are duplicates\n<|/ c |>\n<| c |>\n\
    I'm sure there is a way to do that with one line `foreach` loop, however, I think\
    \ the `array_filter` will be the most efficient solution for this. I've added\
    \ another function which might be more efficient.\n<|/ c |>\n<| c |>\nwow thanks\
    \ for this, your new function is a lot cleaner i'll test it and see if it works\
    \ and if it does i'll accept your answer\n<|/ c |>\n<| c |>\ni'm glad i could\
    \ help! I did a benchmark test, and the `array_filter` version was the slowest\
    \ by a whopping 60%, and it took about 4x longer than the `array_unique` version.\
    \ I've added a benchmark test to my answer. It's interesting that the `array_filter`\
    \ version ran much slower. Does my benchmark test work for you on your setup?\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$a = array(1,2,2,3,5,8,5,9,6,9,4,8);\n\
    $a = array_unique($a);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis isn't a complete\
    \ answer because it doesn't address OP's concern about efficiency.\n<|/ c |>\n\
    <| a dscore=4 tags=php,arrays |>\nI find this to be the most efficient solution:\n\
    <code>\narray_unique(array_diff_key($a, array_flip($a)));\n</code>\nIt creates\
    \ a new array with the values from $a that don't exist in $a. It also makes the\
    \ keys unique.\n<|/ a |>\n<| c |>\nAh this is great! I wasn't aware of `array_diff_key`\
    \ before I ran a benchmark test.\n<|/ c |>\n<| a dscore=4 |>\nA bit of a brute\
    \ force solution that doesn't use array_unique:\n<code>\n$resultArray = array();\n\
    \nforeach($a as $v)\n{\n   if($v !== $a[1])\n      $resultArray[] = $v;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcpgf22cb.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $key => $value) {\n    if (!isset($result[$value]))\
    \ {\n      $result[$value] = $key;\n    }\n  }\n  return array_values($result);\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyl61etvt.php:21\n\
    Stack trace:\n#0 /tmp/tmpyl61etvt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpyl61etvt.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  $result = [];\n  foreach ($numbers as $number) {\n    if\
    \ (! array_key_exists($number, $seen)) {\n      $result[] = $number;\n    }\n\
    \    $seen[$number] = $number;\n  }\n  return $result;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\nThe fastest way to get unique elements in an array is\
    \ to use an associative array, that maps the unique values to their indexes:\n\
    <code>\n$numbers = array(1,2,3,3,2,1,2,4,5,6,7);\n$unique = array_flip($numbers);\n\
    $result = array_keys($unique);\n</code>\nThis only works if there are no duplicates\
    \ in the input array.\n<|/ a tags=arrays,php |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI got this from here\n<code>\n$array = array(1,2,3,4,4,4,4,5,6,6,7,8,9);\n\
    $unique = array_unique($array);\n</code>\nThe output will be unique\n<code>\n\
    Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n\
    \    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    $unique = array_unique($array);\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n\
    <| c |>\nYou should add some explanation to the answer.\n<|/ c |>\n<| a dscore=0\
    \ tags=arrays,php |>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpozovvbmq.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (in_array($number,\
    \ $result)) {\n            continue 2;\n        }\n        $result[] = $number;\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis is an\
    \ example for removing duplicates and keeping the order. \n<code>\n<?php\n$numbers\
    \ = [1,2,3,4,5,5,5,6,7,8,9,10,10,10,10,10];\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpruqmnrtc.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $n) {\n    $n = intval($n);\n   \
    \ if (!isset($result[$n])) {\n      $result[$n] = 1;\n    } else {\n      $result[$n]++;\n\
    \    }\n  }\n  return array_keys($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpay499tvj.php:26\n\
    Stack trace:\n#0 /tmp/tmpay499tvj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpay499tvj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = array();\n  $uniques_sorted = array();\n  foreach ($numbers\
    \ as $key => $num) {\n    if (!isset($uniques[$num])) {\n      $uniques[$num]\
    \ = 1;\n      $uniques_sorted[$num] = $key;\n    }\n  }\n  return $uniques_sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3gkwowi.php:24\n\
    Stack trace:\n#0 /tmp/tmpn3gkwowi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn3gkwowi.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $result)) {\n      continue;\n    }\n    $result[] = $number;\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThe other answers are excellent,\
    \ but they do not take into account the order of integers in the input array.\n\
    If the input array contains duplicated integers, you should sort the array before\
    \ applying the algorithm.\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb5p7hx2o.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!isset($result[$number]))\
    \ {\n            $result[$number] = 1;\n        } else {\n            $result[$number]++;\n\
    \        }\n    }\n    return array_keys($result);\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nHow does this work? You seem to have removed the `else` clause from your\
    \ function but `!isset($result[$number])` evaluates to `true` the first time you\
    \ try to access `$result[$number]` the first time, so the `else` clause is not\
    \ being hit. How does that work?\n<|/ c |>\n<| c |>\nThe `!isset` part checks\
    \ if that key is set. If it's not, the loop will never hit `else` because `!isset`\
    \ will always return `false`. So it's impossible for the first element to be set.\n\
    <|/ c |>\n<| c |>\nAh, so `!isset()` will return `false` the first time it's called\
    \ but `true` on the following calls? That makes sense.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nI've found a workaround which might help you out :\n<code>\n<?php\n$nums\
    \ = array(1, 2, 3, 4, 3, 4, 4, 4);\n$numsCount = array_count_values($nums);\n\n\
    $numsNew = array();\nforeach($nums as $k => $v)\n{\n    if($numsCount[$v] > 1)\n\
    \        $numsNew[$k] = $v;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI think you\
    \ meant `if($numsCount[$v] > 1)` instead of `if($numsCount[$v] > 0)`\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n<?php\n    $array1 = array(1, 2, 3, 4, 4, 4, 5, 5);\n\
    \    $array2 = array(1, 2, 3, 2, 3, 3, 4, 4);\n\n    $array3 = array_intersect($array1,\
    \ $array2);\n\n    var_dump($array3);\n    var_dump($array1 === $array3);\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzv_ke304.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  sort($numbers);\n  $output = [];\n\n  $i = 0;\n  foreach ($numbers as $num)\
    \ {\n    if (!isset($output[$num])) {\n      $output[$num] = $i;\n    }\n    $i++;\n\
    \  }\n\n  return array_values($output);\n}\n</code>\n<|/ a tags=php,arrays,duplicates\
    \ |>\n<| a |>\nI think this is what you are looking for:\n<code>\n$array = [1,\
    \ 2, 3, 2, 4, 2, 6];\n\n$result = [];\n\nforeach($array as $k => $v) {\n    if(!isset($result[$v]))\
    \ {\n        $result[$v] = $k;\n    }\n}\n\n$result = array_values($result);\n\
    \nprint_r($result);\n</code>\noutput:\n<code>\nArray\n(\n    [0] => 0\n    [1]\
    \ => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n)\n</code>\n<|/\
    \ a tags=php,arrays,duplicates dscore=4 |>\n<| c |>\nThis returns an array of\
    \ keys instead of values.\n<|/ c |>\n<| a |>\nI know I'm late to this party, but\
    \ I've found it useful to have something that supports sorting and maintaining\
    \ the original order of duplicates:\n<code>\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpex4vi195.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // Use a simple array to keep track of elements we saw already.\n   \
    \ // This speeds up the next step significantly.\n    $seen = array();\n    $output\
    \ = array();\n\n    // Loop through our input array.\n    foreach ($numbers as\
    \ $key => $number) {\n        // See if this number has already been seen. If\
    \ so, remove it\n        // from our seen array and add it to a new output array.\n\
    \        if (in_array($number, $seen)) {\n            array_splice($seen, array_search($number,\
    \ $seen), 1);\n        } else {\n            $seen[] = $number;\n            $output[]\
    \ = $number;\n        }\n    }\n\n    return $output;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis solution doesn't work properly when there are duplicates in\
    \ the array - see http://stackoverflow.com/a/30594492/1267013 where there are\
    \ multiple duplicates after the removal of duplicate values.\n<|/ c |>\n<| c |>\n\
    I have updated the answer to account for this.\n<|/ c |>\n<| c |>\nThe only problem\
    \ with this solution is that it fails if you have multiple duplicates. If you\
    \ have two or more of the same value, then you end up with an empty array. `array_unique()`\
    \ is the solution\n<|/ c |>\n<| a tags=arrays,php |>\nA quick n^2 solution using\
    \ array_unique() and a loop:\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb_n8ae3c.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_filter($numbers);\n    $result = [];\n    foreach ($numbers\
    \ as $number) {\n        if (!in_array($number, $result)) {\n            $result[]\
    \ = $number;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40uhlfzs.php:23\n\
    Stack trace:\n#0 /tmp/tmp40uhlfzs.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp40uhlfzs.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $number_count = array_count_values($numbers);\n  return array_keys($number_count,\
    \ max($number_count));\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpbiu9jmkr.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbiu9jmkr.php:18\n\
    Stack trace:\n#0 /tmp/tmpbiu9jmkr.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbiu9jmkr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_unique(array_filter($numbers, function($num) {\n    return\
    \ !in_array($num, $numbers);\n  }));\n}\n\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpdvonrlrw.php\
    \ on line 8\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmpdvonrlrw.php on line 8\n\nWarning: in_array() expects parameter 2\
    \ to be array, null given in /tmp/tmpdvonrlrw.php on line 8\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpdvonrlrw.php on line\
    \ 8\n\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpdvonrlrw.php\
    \ on line 8\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmpdvonrlrw.php on line 8\n\nWarning: in_array() expects parameter 2\
    \ to be array, null given in /tmp/tmpdvonrlrw.php on line 8\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpdvonrlrw.php on line\
    \ 8\n\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpdvonrlrw.php\
    \ on line 8\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmpdvonrlrw.php on line 8\n\nWarning: in_array() expects parameter 2\
    \ to be array, null given in /tmp/tmpdvonrlrw.php on line 8\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdvonrlrw.php:19\nStack trace:\n#0 /tmp/tmpdvonrlrw.php(22):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdvonrlrw.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmjm1gzd.php:23\n\
    Stack trace:\n#0 /tmp/tmplmjm1gzd.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplmjm1gzd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = $numbers;\n  $resultLen = count($result);\n\n  // Create a map\
    \ of duplicate elements\n  $map = [];\n  for ($i = 0; $i < $resultLen; $i++) {\n\
    \    $map[$result[$i]] = $i;\n  }\n\n  // Remove duplicates\n  $result = array_values(array_flip($map));\n\
    \n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not produce the\
    \ expected result for the given example input in the original poster, which has\
    \ repeated elements. The result should be `[1,3,4]`\n<|/ c |>\n<| c |>\nI thought\
    \ the OP wanted to remove duplicates, not rearrange the order of the elements.\n\
    <|/ c |>\n<| c |>\nHe does mention what he wants done. He wants to keep the order\
    \ of elements as in the input. His code outputs the ordered elements separated\
    \ by commas, which is not what he wants. He also mentions the expected result\
    \ for input `[1,2,2,3]`, which has duplicate elements.\n<|/ c |>\n<| c |>\nYes,\
    \ that is the exact behaviour he wants. The `array_values` call removes the duplicates.\n\
    <|/ c |>\n<| c |>\nThe OP also states \"Keeps order of elements left the same\
    \ as in the input\". This code does not do that.\n<|/ c |>\n<| a dscore=0 |>\n\
    array_slice + array_merge should do it:\n<code>\n$input = array(1,2,2,3);\n$output\
    \ = array_slice(array_merge($input), 1);\n</code>\n<|/ a tags=php,arrays,duplicates\
    \ |>\n<| a tags=php,arrays,duplicates dscore=0 |>\nI made a custom function for\
    \ this. Hope this helps someone else who needs it.\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpox64dwax.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = [];\n    foreach ($numbers as $i => $n) {\n        if (!isset($uniques[$n]))\
    \ {\n            $uniques[$n] = $n;\n        }\n    }\n\n    return array_values($uniques);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nPlease [avoid link only answers](http://meta.stackoverflow.com/tags/link-only-answers/info),\
    \ especially when the link is provided as a supplemental information.\n<|/ c |>\n\
    <| a dscore=5 tags=php,algorithm |>\n<code>\n<?php\n$input = [1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3];\n$result = array_filter($input);\n$result = array_count_values($result);\n\
    print_r($result);\n</code>\n<|/ a |>\n<| c |>\nThis should be the correct answer.\
    \  It doesn't rely on any specific PHP functions.\n<|/ c |>\n<| c |>\nThis is\
    \ very elegant.\n<|/ c |>\n<| c |>\nThis is the best answer as it doesn't involve\
    \ any iterations, thus runs faster. Thanks!\n<|/ c |>\n<| a dscore=5 tags=php,algorithm\
    \ |>\nA simple array_unique would do the trick\n<code>\n$unique = array_unique($numbers);\n\
    </code>\n<|/ a |>\n<| c |>\nIt isn't a duplicate. This question asks how to remove\
    \ duplicates from a list.  array_unique will remove all the duplicates but leaves\
    \ the ordering unchanged.  In some cases, the ordering might need to be maintained.\n\
    <|/ c |>\n<| c |>\nIt may be a duplicate if the list contains duplicates and the\
    \ OP doesn't care what the duplicates are. If that is the case then the answer\
    \ above by is great.\n<|/ c |>\n<| c |>\nIn that case, the accepted answer is\
    \ the better answer.\n<|/ c |>\n<| a tags=php,algorithm dscore=5 |>\nYou can use\
    \ a combination of array functions and array_unique:\n<code>\n$numbers = [1,2,3,3,2,4];\n\
    $uniqueNumbers = array_unique(array_filter($numbers));\n</code>\n<|/ a |>\n<|\
    \ c |>\narray_unique sorts the numbers in ascending order, so this will remove\
    \ all duplicates\n<|/ c |>\n<| c |>\nIt is a simple solution, but a little bit\
    \ more efficient for big arrays as the array_unique is O(n) and the array_filter\
    \ is O(1).\n<|/ c |>\n<| c |>\nIt does not remove the duplicates, array_unique\
    \ will just skip them if they are already unique.\n<|/ c |>\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg2n7zkkb.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $counts = [];\n    foreach ($numbers as $number) {\n\
    \        $key = array_search($number, $counts);\n        if ($key === FALSE) {\n\
    \            $result[] = $number;\n        } else {\n            unset($counts[$key]);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2_5rnna.php:27\n\
    Stack trace:\n#0 /tmp/tmpm2_5rnna.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm2_5rnna.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // Use PHP's native array_unique() which preserves keys, not values\n\
    \    return array_filter($numbers, function($value) {\n        return count($numbers)\
    \ == count(array_filter($numbers, function($elem) {\n            return $elem\
    \ == $value;\n        }));\n    });\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\nJust use array_unique() and implode() to do the job:\n<code>\n<?php\n\n\
    $strings = array(\n    \"one\",\n    \"two\",\n    \"three\",\n    \"two\",\n\
    \    \"three\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n \
    \   \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n \
    \   \"ten\"\n);\n\n$unique = array_unique($strings);\n\n$result = implode(\",\"\
    , $unique);\n\necho $result;\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_nr4569i.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $output = [];\n    foreach ($numbers as $number) {\n        if (!isset($output[$number]))\
    \ {\n            $output[$number] = $number;\n        }\n    }\n\n    return array_values($output);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nAn alternative approach would\
    \ be to use array_count_values() to create an array of counts, so that you can\
    \ filter and reindex the array.\nFor example:\n<code>\n$array = [1, 2, 2, 2, 3,\
    \ 3, 4, 4, 5];\n\n$counts = array_count_values($array);\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpow3qz8b6.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $keys_hash = array();\n  foreach($numbers as $number)\
    \ {\n    if(!isset($keys_hash[$number])) {\n      $keys_hash[$number] = true;\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\n</code>\nA recursive\
    \ solution would be:\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphoudtp_1.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $n) {\n    if (!isset($result[$n]))\
    \ {\n      $result[$n] = 1;\n    } else {\n      $result[$n] += 1;\n    }\n  }\n\
    \  $result = array_keys($result);\n  sort($result);\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6z33xux_.php:26\n\
    Stack trace:\n#0 /tmp/tmp6z33xux_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6z33xux_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n\n  foreach ($numbers as $number) {\n    if\
    \ (in_array($number, $unique_numbers)) {\n      unset($unique_numbers[array_search($number,\
    \ $unique_numbers)]);\n    } else {\n      $unique_numbers[] = $number;\n    }\n\
    \  }\n\n  return $unique_numbers;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php\
    \ |>\nYou could use array_unique\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    <code>\n$array = ['1', '2', '3', '1', '2', '3', '4'];\n\n$result = array_unique(array_filter($array,\
    \ function($v) {\n    return array_search($v, $array) === FALSE;\n}));\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\nI like the array_unique idea,\
    \ but the other answers assume that duplicate values are allowed and that they\
    \ will be in consecutive order in the array. Here is a function which allows duplicate\
    \ values to be in consecutive order (i.e. [1, 2, 2, 2, 3, 3]) and will preserve\
    \ the original order of the elements (i.e. [2, 3, 1, 2]):\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpixctoai8.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  if (empty($numbers)) {\n    return array();\n  }\n\n  $unique_numbers =\
    \ array();\n  $numbers_length = count($numbers);\n  for ($i = 0; $i < $numbers_length;\
    \ $i++) {\n    if (in_array($numbers[$i], $unique_numbers)) {\n      unset($numbers[$i]);\n\
    \    }\n    else {\n      $unique_numbers[] = $numbers[$i];\n    }\n  }\n\n  return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfkmm1ao.php:32\n\
    Stack trace:\n#0 /tmp/tmpmfkmm1ao.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmfkmm1ao.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = true;\n    } else {\n      unset($result[$number]);\n\
    \    }\n  }\n  return array_keys($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  $result = array();\n  foreach ($numbers as $n) {\n\
    \    if (!in_array($n, $seen)) {\n      $seen[] = $n;\n      $result[] = $n;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array_unique($array);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nI came here because I was looking to remove duplicates\
    \ from a string, and this thread showed me array_unique() which I was already\
    \ using in my code.  However it was only removing duplicates from single characters\
    \ (not duplicates from a string).  \nI wanted to remove duplicates from multiple\
    \ characters but didn't want to use array_unique() because I wanted to keep the\
    \ character positions.  \nSo I came up with the following function which I think\
    \ works well.  \nI wanted to keep the first occurrence of any character in the\
    \ duplicates.  This can be done by using the second parameter of the function\
    \ in array_count_values() which is SORT_REGULAR.\nI also added a check to see\
    \ if the array is empty or if the array has only one value.\n<code>\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpelbe7tre.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // Sort to remove duplicates.\n    usort($numbers, function ($a, $b)\
    \ {\n        return $a > $b;\n    });\n\n    $result = [];\n    foreach ($numbers\
    \ as $number) {\n        if (!isset($result[$number])) {\n            $result[$number]\
    \ = 1;\n        } else {\n            $result[$number]++;\n        }\n    }\n\n\
    \    // Reverse sort the result, in case of descending order.\n    return array_reverse($result,\
    \ true);\n}\n\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nAs already mentioned\
    \ in comments, you can simply use array_count_values, to keep a count of how many\
    \ times each number appears in the array.\n<code>\n$array = array(1, 2, 1, 2,\
    \ 4, 6, 6, 7);\n$result = array_count_values($array);\n$result = [];\nforeach($result\
    \ as $key=>$value) {\n    $result[] = $key;\n}\nprint_r($result);\n</code>\nOutput:\n\
    <code>\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 6\n   \
    \ [4] => 7\n)\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis code returns the\
    \ input array in numeric index order, not as stated in the OP. Thus, a sort is\
    \ needed.\n<|/ c |>\n<| c |>\n, sorry I did not notice that from the question,\
    \ I've updated my answer accordingly, please have a look.\n<|/ c |>\n<| c |>\n\
    Your answer has many unnecessary lines of code. If you were to explain what each\
    \ line does, that would be very helpful.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    You can simply use array_count_values and then sort it in reverse order using\
    \ arsort\n<code>\n<?php\n\n$input = array(1,4,5,1,3,2);\n\n$result = array_count_values($input);\n\
    arsort($result);\nprint_r($result);\n</code>\nhttps://3v4l.org/5nZVH\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis code returns the input array in numeric index order, not as\
    \ stated in the OP. Thus, a sort is needed.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    Try this code\n<code>\n<?php\n$array = array(4,2,3,7,3,7,7);\n$array = array_count_values($array);\n\
    $array = array_reverse($array, true);\nprint_r($array);\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjgxzh1tj.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $result)) {\n      unset($numbers[$key]);\n    }\n    else {\n      $result[]\
    \ = $number;\n    }\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6gfu7cm.php:26\n\
    Stack trace:\n#0 /tmp/tmpu6gfu7cm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu6gfu7cm.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1kdealev.php:22\n\
    Stack trace:\n#0 /tmp/tmp1kdealev.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1kdealev.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $num) {\n    if (!in_array($num,\
    \ $result, true)) {\n      $result[] = $num;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\nUse array_count_values\
    \ to count how many times each number appears in the array and array_filter to\
    \ remove any elements that appear more than once:\n<code>\n$numbers = array_count_values($array);\n\
    $result = array_filter($numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplkyk7x4m.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $out = [];\n    foreach ($numbers as $number) {\n        if (!isset($out[$number]))\
    \ {\n            $out[$number] = true;\n        } else {\n            unset($out[$number]);\n\
    \        }\n    }\n    return array_keys($out);\n}\n</code>\n<|/ a tags=arrays,algorithm,php\
    \ dscore=1 |>\n<| a tags=arrays,algorithm,php dscore=0 |>\nTry this solution:\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8sbqnv5f.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $nums = $numbers instanceof Iterator ? $numbers : iterator_to_array($numbers);\n\
    \  foreach ($nums as $key => $num) {\n    if (!isset($result[$key])) {\n     \
    \ $result[$key] = $num;\n    }\n  }\n  return $result;\n}\n\n/**\n * Get the number\
    \ of elements in an array, or execute a callback over each one. If\n * the callback\
    \ returns a non-null value, the element will be appended to the\n * array.\n *\n\
    \ * @param array|string $array\n * @param callable|null $callback\n * @param int\
    \ $limit\n * @return int The filtered array count, if no callback given and array\
    \ is an\n *     array, or the sum of all the values returned by the callback,\
    \ if a\n *     callback is given.\n */\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught TypeError: Argument 1 passed to iterator_to_array()\
    \ must implement interface Traversable, array given in /tmp/tmp0rofwkxs.php:8\n\
    Stack trace:\n#0 /tmp/tmp0rofwkxs.php(8): iterator_to_array(Array)\n#1 /tmp/tmp0rofwkxs.php(30):\
    \ remove_duplicates(Array)\n#2 /tmp/tmp0rofwkxs.php(34): candidate(Array)\n#3\
    \ /tmp/tmp0rofwkxs.php(39): test()\n#4 {main}\n  thrown in /tmp/tmp0rofwkxs.php\
    \ on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $count = 0;\n  foreach ($numbers as $number) {\n    if\
    \ ($number != $numbers[$count]) {\n      $result[] = $number;\n      $count++;\n\
    \    }\n  }\n\n  return $result;\n}\n</code>\n<|/ a dscore=1 tags=sorting,php,arrays\
    \ |>\n<| a tags=sorting,php,arrays dscore=1 |>\nThe solution using array_count_values(),\
    \ array_filter() and array_merge():\n<code>\n$input = [1, 2, 2, 2, 3, 3, 3, 3,\
    \ 4, 4, 4];\n\n$result = array_merge(\n    array_filter(\n        array_count_values($input)\n\
    \    )\n);\n</code>\nResult:\n<code>\nArray\n(\n    [0] => 1\n    [1] => 2\n \
    \   [2] => 3\n    [3] => 4\n)\n</code>\n<|/ a |>\n<| a tags=sorting,php,arrays\
    \ |>\nTry this\n<code>\n$result = array();\nforeach($a as $i => $v){\n    if(isset($result[$v])){\n\
    \        $result[$v]++;\n    }else{\n        $result[$v] = 1;\n    }\n}\n$result\
    \ = (array_keys($result));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThis\
    \ should work for you:\n<code>\n<?php\n\n$input = [1, 2, 2, 2, 3, 3, 3, 3, 4,\
    \ 4, 4];\n\n$result = array();\n$counter = 0;\n\nforeach($input as $v) {\n   \
    \ if(!isset($result[$v])) {\n        $result[$v] = $counter;\n        $counter++;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeca0isty.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    </code>\n<|/ a tags=arrays,php dscore=2 |>\n<| c |>\n`array_count_values` does\
    \ exactly what OP needs.\n<|/ c |>\n<| c |>\nThis is much better, just replace\
    \ $numbers => $result\n<|/ c |>\n<| a |>\n<code>\n$input = [1,2,3,4,3,5];\n$output\
    \ = [];\nforeach ($input as $value) {\n  if ($value not in $output) {\n    $output[]\
    \ = $value;\n  }\n}\n</code>\n<|/ a tags=arrays,php dscore=2 |>\n<| a tags=arrays,php\
    \ |>\nA very clean and fast way:\n<code>\n$arr = [1,2,3,4,3,5];\n$result = [];\n\
    \nforeach($arr as $value){\n    $result[$value]++;\n}\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nUse array_count_values to get the count of each number.\n\
    <code>\n<?php\n    $array = array(1,2,3,4,5,6,7,8,9,10);\n    echo json_encode($array);\n\
    \n    //result [1,2,3,4,5,6,7,8,9,10]\n    $counts = array_count_values($array);\n\
    \n    $result = array();\n\n    foreach($counts as $key => $val){\n       if($val\
    \ == 1){\n         $result[] = $key;\n       }\n    }\n    echo json_encode($result);\n\
    \    //result [2,4,6]\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9sf0j79p.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $seen)) {\n      continue;\n    }\n    $seen[] = $number;\n  }\n  return array_values($seen);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYour code is great, but it is limited\
    \ to integers, as this was asked for by the OP. The `in_array()` solution by is\
    \ a lot more general though, so I'll +1 him.\n<|/ c |>\n<| c |>\nIndeed, I missed\
    \ that requirement and I added one to the answer\n<|/ c |>\n<| c |>\nThank you\
    \ for you help and efforts, unfortunately the answer by Jon was more simple, so\
    \ I marked his as the accepted one. But your answer definitely gives me some insight\
    \ how to solve this problem!\n<|/ c |>\n<| a |>\nYou can just use a simple foreach\
    \ to go through all the numbers and save each number in a new array. \n<code>\n\
    $newArray = array();\n$arr = [1,2,3,4,5,6,1,4,3,2,3,4,3,2,2,1];\nforeach($arr\
    \ as $k=>$v) {\n    if (!in_array($v, $newArray)) {\n        $newArray[] = $v;\n\
    \    }\n}\n</code>\n<|/ a tags=duplicates,php dscore=1 |>\n<| a dscore=0 tags=duplicates,php\
    \ |>\nYou can use:\n<code>\n$array = [1,2,3,4,5,6,1,4,3,2,3,4,3,2,2,1];\n\n$result\
    \ = array_count_values($array);\nforeach ($result as $value => $count) {\n   \
    \ if ($count > 1) {\n        echo 'The value ' . $value . ' appears ' . $count\
    \ . ' times<br>';\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nOP wants to keep order\
    \ of elements left the same as in the input.\n<|/ c |>\n<| a dscore=0 |>\nThere\
    \ are plenty of answers here but I think mine is a bit more elegant:\n<code>\n\
    $array = array(1,2,3,4,5,6,1,4,3,2,3,4,3,2,2,1);\n\n$array = array_filter(\n \
    \   $array,\n    function($value) use (&$array) {\n        return count(array_keys($array,\
    \ $value)) > 1;\n    }\n);\n</code>\nThis creates a filtered array that contains\
    \ only the elements that appear more than once.\n<|/ a tags=duplicates,php |>\n\
    <| a |>\nThis solution keeps the order of the input numbers, and gives you a count\
    \ for each number. \n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpazxo8c_9.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($num) { return !in_array($num, $numbers);\
    \ });\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n$arr=array(1,2,2,3,4,4,5,6);\n\
    $cnt=count($arr);\n$sum=0;\nfor($i=0;$i<$cnt;$i++){\n    if($arr[$i]==$arr[$i-1]){\n\
    \        $sum++;\n    }\n}\n$new_arr=array();\nfor($i=0;$i<$cnt;$i++){\n    if($arr[$i]==$sum){\n\
    \        $new_arr[]=$arr[$i];\n    }\n}\nprint_r($new_arr);\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_py94z5t.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $results = [];\n\n  foreach ($numbers as $number) {\n    if (!isset($results[$number]))\
    \ {\n      $results[$number] = $number;\n    }\n  }\n\n  return $results;\n}\n\
    </code>\nThis solution takes advantage of the fact that keys of associative arrays\
    \ are unique. So the result of array_count_values is a mapping of the original\
    \ number with the number of occurrences.\n<|/ a tags=php,arrays dscore=1 |>\n\
    <| c |>\nThe `array_count_values` part was the bit I was missing, I didn't think\
    \ of it. Thanks!\n<|/ c |>\n<| a dscore=0 |>\nYou can do this by creating a new\
    \ array, iterating through the old array, checking for existence of the new values,\
    \ and adding them if they aren't already in there. The keys to the new array will\
    \ be the old ones, and the values to each will be how many times they occur.\n\
    <code>\n$newArray = array();\nforeach($old as $key => $val) {\n  if(isset($newArray[$val]))\
    \ {\n    $newArray[$val]++;\n  } else {\n    $newArray[$val] = 1;\n  }\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nI did consider something like this, but I was\
    \ curious if there was a more efficient or elegant solution that I was missing.\
    \ Thanks!\n<|/ c |>\n<| a |>\nIf you only need to count the numbers, and not the\
    \ occurrences, you can do this with the array_count_values function of PHP. \n\
    <code>\n$numbers = array(\"a\", \"b\", \"c\", \"b\", \"a\", \"b\", \"c\");\n$counts\
    \ = array_count_values($numbers);\n</code>\nThe result will be an array like this\n\
    <code>\narray(2) { [\"a\"]=> int(2) [\"b\"]=> int(3) [\"c\"]=> int(2) }\n</code>\n\
    If need more information about which number has the highest amount of occurrences\
    \ you can use the function array_keys that returns the keys sorted by the values\
    \ inside the array.\n<code>\necho array_keys($counts);\n</code>\nWill result in:\n\
    <code>\nArray\n(\n    [0] => a\n    [1] => b\n    [2] => c\n)\n</code>\n<|/ a\
    \ tags=php,arrays dscore=0 |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiya538oa.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter(\n        $numbers,\n        function ($value, $position)\
    \ use ($numbers) {\n            return $position === array_search($value, $numbers);\n\
    \        }\n    );\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI appreciate this\
    \ answer because it was very straightforward and easy to understand.  If you have\
    \ a large array and want to remove duplicates, this answer should be used.  If\
    \ you don't mind losing order, then this answer should be used.  I ran into performance\
    \ issues with this answer on large arrays and the other answer above worked great.\n\
    <|/ c |>\n<| a |>\nThis answer is based on the answer by Alexander Agrekov, in\
    \ which the performance is improved by using array_values on the $numbers array.\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpso8q39a4.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis code assumes PHP >= 5.3, otherwise it\
    \ would have to be slightly modified to use `array_unique()`.\n<|/ c |>\n<| c\
    \ |>\n: You are right I forgot that. I've fixed it.\n<|/ c |>\n<| c |>\n- Your\
    \ code is incorrect -- `array_diff` returns values that exist in the first array,\
    \ but do not exist in the second array. It does not remove them. Check out the\
    \ example given by on array_diff. The code you have posted will not output an\
    \ array with the values that exist in the first array but do not exist in the\
    \ second array.\n<|/ c |>\n<| c |>\n: You're right, sorry, I haven't read the\
    \ question correctly. I thought the original question was about the difference\
    \ in PHP versions.\n<|/ c |>\n<| c |>\nThis method is way much faster than the\
    \ accepted one (tested with 10000000 iterations)\n<|/ c |>\n<| a |>\nYou can use\
    \ a combination of array_diff, array_unique, and array_flip to remove duplicate\
    \ values from a list:\n<code>\n$numbers = array_unique( array_flip( array_diff(\
    \ $numbers, array(0,1) ) ) );\n</code>\nor in one line:\n<code>\n$numbers = array_unique(\
    \ array_flip( array_diff( $numbers, array(0,1) ) ) );\n</code>\n<|/ a tags=arrays,php\
    \ dscore=5 |>\n<| c |>\nI like this one more than the accepted answer\n<|/ c |>\n\
    <| c |>\nIt's faster too.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$numbers\
    \ = array(2, 4, 7, 1, 2, 3, 5);\n$new_numbers = array();\n\nforeach ($numbers\
    \ as $number) {\n  if (isset($new_numbers[$number])) {\n    continue;\n  }\n \
    \ $new_numbers[$number] = 1;\n}\n\n$numbers = array_keys($new_numbers);\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis seems like it would be a lot more efficient if\
    \ it didn't require two extra calls to the array.\n<|/ c |>\n<| c |>\nThis would\
    \ be more efficient than a combination of array_diff and array_unique (which require\
    \ an extra loop and array_flip to do the opposite), as array_diff only iterates\
    \ over the input once.\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsx14cdpl.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  $result = array_filter($numbers, function ($n) use ($seen)\
    \ {\n    if (in_array($n, $seen)) {\n      return false;\n    }\n    $seen[] =\
    \ $n;\n    return true;\n  });\n  sort($result);\n  return $result;\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=2 |>\n<| a dscore=2 |>\nThis simple solution using\
    \ array_count_values will work as expected\n<code>\n<?php\n$data[] = [1, 2, 3,\
    \ 3, 3, 3, 4, 5];\n\n$result = [];\n\nforeach ($data as $key => $value) {\n  \
    \  $result[$value][] = $key;\n}\n\nvar_dump($result);\n</code>\nOutput\n<code>\n\
    array:5 [\n  1 => array:1 [\n    0 => 0\n  ]\n  3 => array:3 [\n    0 => 0\n \
    \   1 => 1\n    2 => 2\n  ]\n  4 => array:2 [\n    0 => 0\n    1 => 2\n  ]\n \
    \ 5 => array:1 [\n    0 => 5\n  ]\n]\n</code>\n<|/ a tags=arrays,php |>\n<| a\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4e__wog6.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  if (empty($numbers)) {\n    return array();\n  }\n\n  $seen = array();\n\
    \  foreach ($numbers as $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number]\
    \ = $number;\n    }\n  }\n\n  return array_values($seen);\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3noqt71x.php:28\n\
    Stack trace:\n#0 /tmp/tmp3noqt71x.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3noqt71x.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_count_values($numbers);\n}\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7xrlobec.php:15\n\
    Stack trace:\n#0 /tmp/tmp7xrlobec.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp7xrlobec.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = array();\n  $dupes = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $uniques)) {\n      $uniques[] = $number;\n  \
    \  } else {\n      $dupes[] = $number;\n    }\n  }\n  return array_unique($dupes);\n\
    }\n</code>\nThis algorithm is called a hash map.\n<|/ a dscore=1 |>\n<| c |>\n\
    The first example does not produce the desired result. Try this one: `print_r(remove_duplicates([1,2,3,3,2,4]));`\n\
    <|/ c |>\n<| a |>\nIf your array is sorted, you can do the following which uses\
    \ a for loop:\n<code>\nfor($i=$num[0]; $i<$num[1]; $i++) {\n    if($num[$i]!=$num[$i+1])\
    \ {\n        $num[$i+1]=$num[$i];\n    }\n}\n</code>\n<|/ a tags=arrays,php dscore=0\
    \ |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx_z4ncwe.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $new_array = array();\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $new_array)) {\n            $new_array[] = $number;\n  \
    \      }\n    }\n    return $new_array;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    Hi Jasen, thanks for your reply, although this does work, I'm really looking for\
    \ a PHP function that can achieve the same result. Thanks.\n<|/ c |>\n<| a |>\n\
    You could use array_count_values(). From the manual:\n\nReturns an associative\
    \ array with the value as key and frequency as value.\n\n<code>\n$array = array(1,\
    \ 2, 3, 4, 5, 5, 5, 7);\n$result = array_count_values($array);\n\nforeach ($result\
    \ as $value => $count)\n{\n    echo 'Value \"' . $value . '\" occurred ' . $count\
    \ . ' times.';\n}\n</code>\nOutput:\n<code>\nValue \"1\" occurred 2 times.\nValue\
    \ \"2\" occurred 1 times.\nValue \"3\" occurred 1 times.\nValue \"4\" occurred\
    \ 1 times.\nValue \"5\" occurred 3 times.\nValue \"7\" occurred 1 times.\n</code>\n\
    <|/ a dscore=3 tags=php |>\n<| c |>\nThanks, this is what I was looking for. I\
    \ guess array_count_values only exists in PHP >= 5.3\n<|/ c |>\n<| c |>\nYes,\
    \ that's right. PHP 5.3 introduced `array_count_values`, but older versions didn't.\n\
    <|/ c |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n\
    \n$result = array();\n\nforeach($numbers as $number){\n    if(isset($result[$number]))\n\
    \        $result[$number]++;\n    else\n        $result[$number] = 1;\n}\n</code>\n\
    <|/ a dscore=2 tags=php |>\n<| c |>\nHi Blake, thanks for your reply, however\
    \ this does not produce the same result as the function suggested by Arjan in\
    \ his answer. Thanks.\n<|/ c |>\n<| c |>\nNo problem! I just didn't want to add\
    \ another foreach loop to my answer. Thanks for your help.\n<|/ c |>\n<| a |>\n\
    <code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n$newArray =\
    \ array();\nforeach ($numbers as $number){\n    $newArray[$number] = $newArray[$number]+1;\n\
    }\n</code>\n<|/ a tags=\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgst5xyzy.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $number_counts = array_count_values($numbers);\n    $number_counts =\
    \ array_filter($number_counts);\n    return array_keys($number_counts);\n}\n</code>\n\
    And here is how to call it:\n<code>\n$data = array(1,1,2,4,5,5,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,12,12,13,14);\n\
    \n$resulting_array = remove_duplicates($data);\nprint_r($resulting_array);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nIf someone needs a simple way to count number of unique\
    \ elements you can use array_count_values()\n<|/ c |>\n<| c |>\n`array_count_values()`\
    \ does not work for me. I am getting only counts of 1. Did I miss something ?\n\
    <|/ c |>\n<| c |>\nThis one worked for me - https://stackoverflow.com/a/58743958/591647\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1, 2, 3);\n$count = array_count_values($array);\n\
    </code>\n$count should look like this:\n<code>\narray (\n    1 => 1,\n    2 =>\
    \ 2,\n    3 => 1,\n)\n</code>\n<|/ a tags=arrays,count,php |>\n<| c |>\nI got\
    \ `Warning: array_count_values(): The argument should be an array or an object\
    \ that implements Countable in` - php 7.1\n<|/ c |>\n<| c |>\nit works fine for\
    \ me - http://3v4l.org/8JRsS\n<|/ c |>\n<| c |>\nNot work for me. https://stackoverflow.com/a/58743958/591647\n\
    <|/ c |>\n<| c |>\nWarning: array_count_values() expects parameter 1 to be array,\
    \ object given in /Applications/MAMP/htdocs/php-tests/array-count-values.php on\
    \ line 5\n<|/ c |>\n<| a |>\nIn PHP 5.3+ (or PHP 5.2 with array_count_values()\
    \ available since PHP 5.4) you can use\n<code>\n$arr = array(1,2,3,2,1,2,1);\n\
    $cnt = count($arr);\n</code>\nThis works for arrays containing any type of value.\n\
    <|/ a dscore=5 tags=arrays,count,php |>\n<| c |>\nThis works, but you need to\
    \ add the `[]` as in `$arr = [1,2,3,2,1,2,1];`\n<|/ c |>\n<| c |>\nyes, that's\
    \ what I meant when saying \"works\". Thanks for pointing that out.\n<|/ c |>\n\
    <| c |>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6mhe4_ll.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_reduce($numbers, function($result, $number) {\n    $result[$number]\
    \ = $number;\n    return $result;\n  }, array());\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptsnbzsl2.php:19\n\
    Stack trace:\n#0 /tmp/tmptsnbzsl2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptsnbzsl2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n    $numbers,\n    function($number) {\n      return\
    \ count($numbers) == 0 || $number != $numbers[0];\n    }\n  );\n}\n</code>\n<|/\
    \ a dscore=5 tags=php,array-unique |>\n<| c |>\nThanks everyone, I used the array_unique\
    \ method from Eric, but this answer was informative and helpful.\n<|/ c |>\n<|\
    \ c |>\nThanks for this! I had a slightly different scenario in which I needed\
    \ to remove items from a database array using array_unique and my solution ended\
    \ up looking like this: \n$array = array_diff($array, array($value));\n<|/ c |>\n\
    <| c |>\n`array_unique` returns not only an array, but also an array with a different\
    \ key. You'd need to do something like this `array_values(array_unique($array));`\n\
    <|/ c |>\n<| c |>\n: This function is **deprecated**: https://secure.php.net/manual/en/function.array-unique.php\n\
    <|/ c |>\n<| c |>\nYou don't need to use array_values() because array_unique returns\
    \ and array with the original key values. See https://www.php.net/manual/en/function.array-unique.php#107895\n\
    <|/ c |>\n<| a |>\nThis isn't very fast but it keeps the original keys of the\
    \ array:\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8wh6e_9m.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  return array_filter(\n    $numbers,\n    function ($number)\
    \ use (&$seen) {\n      return !in_array($number, $seen) && $seen[] = $number;\n\
    \    }\n  );\n}\n</code>\n<|/ a |>\n<| a |>\nMy solution is to generate all possible\
    \ unique combinations and then iterate through them and eliminate from the result\
    \ if any combination has already been taken.\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv_5v49_f.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  foreach($numbers as $i => $number) {\n    $duplicated = false;\n    foreach($numbers\
    \ as $k => $number2) {\n      if($number == $number2 && !$duplicated) {\n    \
    \    unset($numbers[$k]);\n        $duplicated = true;\n      }\n    }\n  }\n\
    \  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5qxvjtj.php:25\n\
    Stack trace:\n#0 /tmp/tmpj5qxvjtj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj5qxvjtj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxn23j1h.php:23\n\
    Stack trace:\n#0 /tmp/tmpjxn23j1h.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjxn23j1h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  sort($numbers);\n\n  $result = array();\n  $seen = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number]\
    \ = true;\n      $result[] = $number;\n    }\n  }\n\n  return $result;\n}\n</code>\n\
    <|/ a dscore=0 tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\n\
    \  1, 2, 3, 5,\n  1, 2, 3, 5,\n  1, 4, 9, 10,\n);\n\n$numbers = array_unique($numbers);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThe op states he wants to preserve\
    \ order. `array_unique` will also remove duplicates.\n<|/ c |>\n<| a dscore=0\
    \ tags=arrays,php |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphn_guut6.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $uniqueNumbers = array();\n\n    foreach ($numbers as $number) {\n  \
    \      if (in_array($number, $uniqueNumbers)) {\n            array_push($uniqueNumbers,\
    \ $number);\n        }\n        else {\n            $uniqueNumbers[] = $number;\n\
    \        }\n    }\n\n    return $uniqueNumbers;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1s7b7r2.php:27\n\
    Stack trace:\n#0 /tmp/tmpg1s7b7r2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg1s7b7r2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  foreach ($numbers as $number) {\n    if (! isset($seen[$number]))\
    \ {\n      $seen[$number] = 1;\n    } else {\n      unset($seen[$number]);\n \
    \   }\n  }\n  return $seen;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhd3uigd.php:23\n\
    Stack trace:\n#0 /tmp/tmpuhd3uigd.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpuhd3uigd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // Use this to track elements we have already seen\n  $seen = [];\n  //\
    \ Use this to store the elements from the input\n  $output = [];\n  // Iterate\
    \ over the input array\n  foreach ($numbers as $number) {\n    // Check if we\
    \ have seen this element already\n    if (in_array($number, $seen)) {\n      //\
    \ If so, remove it from the output\n      $output[] = $number;\n    } else {\n\
    \      // Otherwise, add it to the output\n      $output[] = $number;\n      //\
    \ And mark as seen\n      array_push($seen, $number);\n    }\n  }\n  return $output;\n\
    }\n</code>\nYou can then use this in a function like:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4wdu4n2i.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $result)) continue;\n    $result[] = $number;\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kn07u_5.php:21\n\
    Stack trace:\n#0 /tmp/tmp8kn07u_5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8kn07u_5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter(array_count_values($numbers), function ($count) {\
    \ return $count > 1; });\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 tags=php\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5lw7hym_.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter($numbers, function ($value) use ($numbers) {\n  \
    \      return !in_array($value, $numbers);\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4y6qsat.php:18\n\
    Stack trace:\n#0 /tmp/tmpr4y6qsat.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpr4y6qsat.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $output = [];\n  $seen = [];\n\n  foreach ($numbers as $number) {\n   \
    \ // If this element has not been seen yet, add it to the output.\n    if (!in_array($number,\
    \ $seen)) {\n      $output[] = $number;\n      // And mark this element as seen.\n\
    \      $seen[] = $number;\n    }\n  }\n\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7iqc3hwx.php:29\n\
    Stack trace:\n#0 /tmp/tmp7iqc3hwx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7iqc3hwx.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = $number;\n    }\n  }\n  return array_values($result);\n\
    }\n</code>\n<|/ a tags=php,arrays,unique |>\n<| c |>\nThis is not the fastest\
    \ solution. Because it uses array_count_values()\n<|/ c |>\n<| c |>\n`array_count_values()`\
    \ uses foreach loop and inside this loop I use `isset()` which is very inefficient\
    \ for such small arrays\n<|/ c |>\n<| c |>\narray_count_values() uses foreach\
    \ loop and inside this loop I use isset()\n<|/ c |>\n<| c |>\nYou don't have to\
    \ have foreach loop and isset(), array_count_values() does it for you\n<|/ c |>\n\
    <| c |>\nIt works, but it isn't the fastest solution because of the use of array_count_values()\n\
    <|/ c |>\n<| a |>\nYou could use array_unique:\n<code>\n$numbers = array_unique($numbers);\n\
    </code>\n<|/ a dscore=5 tags=php,arrays,unique |>\n<| c |>\nBut it will remove\
    \ all the duplicate values from the array, which he didn't want\n<|/ c |>\n<|\
    \ c |>\nNot only that, he wants the original order, not just unique values. \"\
    Remove all duplicates\" is misleading.\n<|/ c |>\n<| a dscore=5 |>\nSince PHP\
    \ 7.1 there is native function array_unique\n<code>\n$unique = array_unique($numbers);\n\
    </code>\n<|/ a tags=php,arrays,unique |>\n<| c |>\narray_unique only remove duplicated\
    \ values, not preserve original order in array. array_unique and array_diff are\
    \ two ways to do this.\n<|/ c |>\n<| a dscore=5 |>\nThe fastest solution for me\
    \ was array_count_values, but to preserve the original order I had to add a little\
    \ code. Maybe it helps someone.\n<code>\n$nums = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5,\
    \ 6];\n$newNums = array_count_values($nums);\n$unique = [];\nforeach($newNums\
    \ as $key => $value) {\n    if(!isset($unique[$key])) {\n        $unique[$key]\
    \ = $value;\n    }\n}\n\n$nums = array_values($unique);\n\nprint_r($nums);\n</code>\n\
    <|/ a tags=php,arrays,unique |>\n<| c |>\nThis is amazing. Thanks for the simple\
    \ \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr0sfv2hj.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($number) {\n    return count($numbers)\
    \ == 1 || $number != $numbers[0];\n  });\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpaowf0thd.php on line 8\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpaowf0thd.php on\
    \ line 8\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpaowf0thd.php on line 8\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpaowf0thd.php on\
    \ line 8\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpaowf0thd.php on line 8\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpaowf0thd.php on\
    \ line 8\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpaowf0thd.php on line 8\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpaowf0thd.php on\
    \ line 8\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpaowf0thd.php on line 8\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpaowf0thd.php on\
    \ line 8\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpaowf0thd.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpaowf0thd.php:19\nStack trace:\n#0 /tmp/tmpaowf0thd.php(22):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaowf0thd.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $distinct = array();\n  $count = count($numbers);\n  for ($i=0; $i < $count;\
    \ $i++) {\n    if (!in_array($numbers[$i], $distinct)) {\n      $distinct[] =\
    \ $numbers[$i];\n    }\n  }\n  return $distinct;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkg9o885d.php:23\n\
    Stack trace:\n#0 /tmp/tmpkg9o885d.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkg9o885d.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  foreach($numbers as $number) {\n    if(!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis code does remove duplicate elements\
    \ from an array, even if the order of elements is not retained.\n<|/ c |>\n<|\
    \ c |>\nJust a comment to this code - it won't work on PHP version prior to 5.3.\
    \  So if someone is running PHP < 5.3 this code will not work.\n<|/ c |>\n<| c\
    \ |>\nNot to confuse with OP code. OP's code doesn't remove elements from array\
    \ but create new array which has duplicate elements and then remove duplicates.\n\
    <|/ c |>\n<| c |>\nPlease read the comments above. It will work only if you use\
    \ >= 5.3. Not all versions of PHP. Or may be you are running on 5.2 which is less\
    \ than 5.3\n<|/ c |>\n<| c |>\nFor a large array and with many duplicates, the\
    \ accepted answer will run slower. \nhttp://stackoverflow.com/a/10345947/27358\n\
    <|/ c |>\n<| a tags=php,array-difference,arrays dscore=5 |>\nA shorter version:\n\
    <code>\n$array = array(1, 2, 3, 4, 4, 4, 5, 6, 6, 7);\n$new = array_unique($array);\n\
    </code>\n<|/ a |>\n<| c |>\nThis does not keep order. `array_diff` does.\n<|/\
    \ c |>\n<| c |>\nThe question is how to remove duplicates - not necessarily in\
    \ the order of the array\n<|/ c |>\n<| c |>\narray_diff doesn't keep the order\
    \ either. http://php.net/manual/en/function.array-diff.php\n<|/ c |>\n<| c |>\n\
    This does not work for me. I get the same array but with duplicates. Maybe because\
    \ the array is large.\n<|/ c |>\n<| c |>\nThis works fine for me. It removes duplicates,\
    \ but keeps the original order. Do you have a large array?\n<|/ c |>\n<| a |>\n\
    <code>\n$new_array = array_diff(array_unique($old_array), $old_array);\n</code>\n\
    <|/ a dscore=5 tags=php,array-difference,arrays |>\n<| c |>\nThe question was\
    \ about removing duplicates. You just reversed the question.\n<|/ c |>\n<| c |>\n\
    array_diff doesn't keep the order either. http://php.net/manual/en/function.array-diff.\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu_bk2hbt.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  return array_filter($numbers, function($num) use (&$seen)\
    \ {\n    if (in_array($num, $seen)) {\n      return false;\n    }\n    $seen[]\
    \ = $num;\n    return true;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ does not do what the question asked for. It removes the dups, not keeps them\
    \ in the same order as they were in the input.\n<|/ c |>\n<| c |>\nI didn't know\
    \ it preserves the order of elements. Thanks for the information!\n<|/ c |>\n\
    <| c |>\nNo worries. I just added a comment to the question asking for clarification\
    \ (since I learned something new from this question). Hopefully it's correct.\n\
    <|/ c |>\n<| c |>\nThanks for posting this. I was working on a similar solution\
    \ and this saved me a lot of time. +1\n<|/ c |>\n<| c |>\nGreat and simple solution.\
    \ Thanks\n<|/ c |>\n<| a dscore=5 |>\nFor those of you who are using PHP >= 5.5,\
    \ you can use the array_unique function:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2quxey2p.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $key => $number) {\n        $occurrences\
    \ = 0;\n        foreach ($result as $result_key => $result_number) {\n       \
    \     if ($number == $result_number) {\n                $occurrences++;\n    \
    \        }\n        }\n        if ($occurrences > 1) {\n            $result[$key]\
    \ = $number;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThanks, I'm sure this works. I'll do some more testing when I get\
    \ time tomorrow (It's late right now)\n<|/ c |>\n<| a tags=arrays,php dscore=1\
    \ |>\nTry this code\n<code>\n    <?php\n    $arr=[1,2,2,3,4,5,5,6,7];\n    var_dump(array_unique($arr));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi0cm662v.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // Sort the numbers.\n  sort($numbers);\n  // Keep track of duplicates.\n\
    \  $dupes = array();\n  // Loop through the numbers again and keep track of duplicates.\n\
    \  for ($i = 0, $n = count($numbers); $i < $n; ++$i) {\n    if ($i && $numbers[$i\
    \ - 1] == $numbers[$i]) {\n      // Already seen this number.\n      continue;\n\
    \    }\n    if (in_array($numbers[$i], $dupes)) {\n      // Already seen this\
    \ number. Ignore it.\n      continue;\n    }\n    $dupes[] = $numbers[$i];\n \
    \ }\n  // Return sorted array with duplicate elements removed.\n  return $dupes;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ytl5iiv.php:33\n\
    Stack trace:\n#0 /tmp/tmp2ytl5iiv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2ytl5iiv.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = $number;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt53ugiwh.php:21\n\
    Stack trace:\n#0 /tmp/tmpt53ugiwh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpt53ugiwh.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_values(array_count_values($numbers));\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for your response. I'm really struggling to understand\
    \ how it would be implemented.\n<|/ c |>\n<| c |>\nI've updated my answer with\
    \ a function example.\n<|/ c |>\n<| c |>\nThanks so much! I'm sure that would\
    \ have worked for me, but I really appreciate your help :)\n<|/ c |>\n<| a |>\n\
    For anyone still struggling with this, the solution was to simply re-order the\
    \ array based on the length of the value and the length of the index before removing\
    \ the duplicates. My solution was similar to the solutions above, only this one\
    \ is built as a function and can accept an array of objects.\n<code>\n$numbers\
    \ = [\n    '1' => '3',\n    '2' => '2',\n    '3' => '4',\n    '4' => '1',\n  \
    \  '5' => '1',\n    '6' => '1',\n    '7' => '1',\n    '8' => '3',\n    '9' =>\
    \ '3',\n    '10' => '1',\n    '11' => '2',\n    '12' => '3',\n];\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkacs9jwu.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // Sort the numbers in reverse order so that duplicate numbers come after\n\
    \  // their respective non-duplicate numbers.\n  $sorted = array_reverse($numbers);\n\
    \n  // Initialize array that will hold elements removed from the list.\n  $removed\
    \ = array();\n\n  // Loop through sorted numbers, keeping track of which numbers\
    \ have\n  // already been removed.\n  for ($i = 0; $i < count($sorted); $i++)\
    \ {\n    // If this number is already in the list of removed numbers,\n    //\
    \ skip it.\n    if (in_array($sorted[$i], $removed)) {\n      continue;\n    }\n\
    \n    // Add this number to the list of removed numbers.\n    $removed[] = $sorted[$i];\n\
    \n    // If this number was the first in the list of duplicate numbers,\n    //\
    \ add it to result and continue looping.\n    if ($sorted[$i] == $i) {\n     \
    \ $result[] = $sorted[$i];\n      continue;\n    }\n\n    // Otherwise, this number\
    \ has already been encountered,\n    // so add it to the array of duplicate numbers.\n\
    \    // This also means that this number comes after all numbers\n    // that\
    \ are equal to it, and therefore it comes after all numbers\n    // not equal\
    \ to it.\n    $duplicates[] = $sorted[$i];\n  }\n\n  // Now that the loop is done,\
    \ all duplicate numbers will come last.\n  $duplicates = array_reverse($duplicates);\n\
    \n  // Return the final list of duplicate numbers.\n  return array_merge($duplicates,\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, null given\
    \ in /tmp/tmpmhkiq1rx.php on line 42\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, null given in /tmp/tmpmhkiq1rx.php on line 45\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpmhkiq1rx.php:53\nStack trace:\n\
    #0 /tmp/tmpmhkiq1rx.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmhkiq1rx.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  // Use an array instead of sort for faster lookup\n  $seen = array();\n\
    \  return array_filter(\n    $numbers,\n    function ($number) use ($seen) {\n\
    \      if (!isset($seen[$number])) {\n        $seen[$number] = true;\n       \
    \ return true;\n      }\n    }\n  );\n}\n</code>\n<|/ a |>\n<| c |>\nPlease see\
    \ my comment on the accepted answer.\n<|/ c |>\n<| c |>\nThat won't work in php7,\
    \ because you cannot use anonymous functions.\n<|/ c |>\n<| c |>\nI didn't even\
    \ know that php 7 had removed `array_filter`.  That's pretty disappointing.  I'll\
    \ edit my answer to include an alternate solution that should work in both php\
    \ 7 and 5.\n<|/ c |>\n<| a |>\nHere's a one liner using array_intersect and array_unique\n\
    <code>\n$result = array_unique( array_intersect( $numbers, array_filter($numbers)\
    \ ) );\n</code>\n<|/ a dscore=3 tags=duplicate-removal,php,arrays |>\n<| c |>\n\
    Works like a charm!\n<|/ c |>\n<| a dscore=2 tags=duplicate-removal,php,arrays\
    \ |>\nYou can loop through the array and remove duplicates by using a temporary\
    \ array as temporary storage. Something like this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmmtuvn3x.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  foreach($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nPlease use the [edit] link on your question\
    \ to add additional information. The Post Answer button should be used only for\
    \ complete answers to the question. - [From Review](/review/low-quality-posts/10563633)\n\
    <|/ c |>\n<| c |>\nYou're right that this should be posted as a new answer, but\
    \ my solution is pretty similar and I'm leaving my answer here for reference.\
    \ In addition, my answer is using O(n) space to remove duplicates, which is a\
    \ requirement of the OP's solution.\n<|/ c |>\n<| c |>\nYou should be able to\
    \ edit your original answer, not post another answer.\n<|/ c |>\n<| c |>\nYou\
    \ mean you should be able to edit the question if you have the edit privilege?\
    \ I do have edit privilege, but I only have 5 minutes to edit an answer. Once\
    \ you get there you can edit the original answer, but the edit queue is full and\
    \ I haven't added another answer yet.\n<|/ c |>\n<| c |>\nYes, you can edit your\
    \ question. You have edit privilege now. You still have to wait a few minutes\
    \ though. The queue will be cleared if you edit your original answer.\n<|/ c |>\n\
    <| a tags=php,duplicate-removal,arrays,sorting dscore=0 |>\nTry this :\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5iqa2y7u.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n\t$duplicates = [];\n\tforeach ($numbers as $number) {\n\t\tif (in_array($number,\
    \ $duplicates)) {\n\t\t\tcontinue;\n\t\t}\n\t\t$duplicates[] = $number;\n\t}\n\
    \treturn array_unique($duplicates);\n}\n</code>\nOutput:\n<code>\n$ php test.php\n\
    Array (\n    [a] => apple\n    [b] => banana\n    [c] => cake\n    [d] => dinner\n\
    \    [e] => eggs\n    [f] => fish\n    [g] => grapes\n    [h] => hello\n    [i]\
    \ => ice\n    [j] => juice\n    [k] => kiwi\n    [l] => lemon\n    [m] => milk\n\
    \    [n] => noodle\n    [o] => oil\n    [p] => peach\n    [q] => quetzal\n   \
    \ [r] => roast\n    [s] => salad\n    [t] => toast\n    [u] => water\n    [v]\
    \ => wine\n    [w] => yummy\n)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYep. I got\
    \ it now. Thanks :)\n<|/ c |>\n<| c |>\nThe OP stated \"The output array must\
    \ remain in the same order.\"\n<|/ c |>\n<| c |>\nI missed that. I will update\
    \ my answer shortly.\n<|/ c |>\n<| c |>\nThanks. I updated my answer. I think\
    \ it's much more efficient now.\n<|/ c |>\n<| c |>\nThanks. I did it with a foreach\
    \ loop. Its working now. :)\n<|/ c |>\n<| a tags=arrays,multidimensional-array,php\
    \ |>\nI think it is easier to convert your input into an array of associative\
    \ keys and values, then run array_unique() on that:\n<code>\n<?php\n$input = array(\n\
    \    'a' => array('apple'),\n    'b' => array('banana'),\n    'c' => array('cake'),\n\
    \    'd' => array('dinner'),\n    'e' => array('eggs'),\n    'f' => array('fish'),\n\
    \    'g' => array('grapes'),\n    'h' => array('hello'),\n    'i' => array('ice'),\n\
    \    'j' => array('juice'),\n    'k' => array('kiwi'),\n    'l' => array('lemon'),\n\
    \    'm' => array('milk'),\n    'n' => array('noodle'),\n    'o' => array('oil'),\n\
    \    'p' => array('peach'),\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw6rkoby2.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter($numbers, function($value) {\n        $counts = array_count_values($numbers);\n\
    \        return array_key_exists($value, $counts) ? 0 !== $counts[$value] : 1;\n\
    \    });\n}\n</code>\n<|/ a |>\n<| c |>\n`array_count_values` takes too much time\
    \ on large dataset. Even a million array is too much for a web server :)\n<|/\
    \ c |>\n<| c |>\nThat's true, but that would be the case with any solution where\
    \ you would need to filter the duplicates. If you know the number of occurrences\
    \ in advance, it might not be that big a deal. That's why I wrote a separate function\
    \ just for this.\n<|/ c |>\n<| a tags=php,arrays |>\nA simple and easy solution\
    \ is \n<code>\n$unique = array_unique($array);\n</code>\n<|/ a dscore=4 |>\n<|\
    \ c |>\nYes it works, please let me know if you have any problem with this :)\n\
    <|/ c |>\n<| a |>\nThis is an alternative to array_unique\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd16l6bh3.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  asort($numbers);\n  return array_diff(array_count_values($numbers), array_unique($numbers));\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ dscore=0 |>\nTry this:\n<code>\nforeach($array1 as $key => $val) {\n    foreach($array2\
    \ as $key1 => $val1) {\n        if($val[0] == $val1 && $val[1] == $val2)\n   \
    \         unset($array1[$key]);\n    }\n}\n</code>\n<|/ a |>\n<| a |>\nYou can\
    \ use the array_filter function like this :\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp26h7y7kb.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = $number;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgta5lvg.php:22\n\
    Stack trace:\n#0 /tmp/tmpfgta5lvg.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfgta5lvg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_unique($numbers);\n}\n\n$results = remove_duplicates($inputs);\n\
    foreach($results as $result)\n{\n  echo \"$result \";\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_unique() expects parameter 1 to be array, null given in\
    \ /tmp/tmp0xv5zgpp.php on line 7\n\nWarning: Invalid argument supplied for foreach()\
    \ in /tmp/tmp0xv5zgpp.php on line 11\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp0xv5zgpp.php:22\nStack trace:\n#0 /tmp/tmp0xv5zgpp.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0xv5zgpp.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        $found\
    \ = false;\n        foreach ($result as $result_number) {\n            if ($result_number\
    \ == $number) {\n                $found = true;\n                break;\n    \
    \        }\n        }\n        if (!$found) {\n            $result[] = $number;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07b91k_j.php:29\n\
    Stack trace:\n#0 /tmp/tmp07b91k_j.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp07b91k_j.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  $output = [];\n  foreach ($numbers as $number) {\n    if\
    \ (!isset($seen[$number])) {\n      $seen[$number] = true;\n      $output[] =\
    \ $number;\n    }\n  }\n  return $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0amk7spg.php:25\n\
    Stack trace:\n#0 /tmp/tmp0amk7spg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0amk7spg.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $seen = [];\n  foreach ($numbers as $number) {\n    if\
    \ (!isset($seen[$number])) {\n      $seen[$number] = true;\n      $result[] =\
    \ $number;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwqw19ce.php:25\n\
    Stack trace:\n#0 /tmp/tmpiwqw19ce.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpiwqw19ce.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $output = [];\n  foreach ($numbers as $key => $number) {\n    if (!isset($output[$number]))\
    \ {\n      $output[$number] = 1;\n    } else {\n      $output[$number]++;\n  \
    \  }\n  }\n  return array_keys($output);\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_6xm32f.php:25\n\
    Stack trace:\n#0 /tmp/tmp0_6xm32f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0_6xm32f.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  sort($numbers);\n  $lookup = array();\n  $results = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!array_key_exists($number, $lookup)) {\n  \
    \    $lookup[$number] = $number;\n      $results[] = $number;\n    }\n  }\n  return\
    \ $results;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjlx27c06.php:26\n\
    Stack trace:\n#0 /tmp/tmpjlx27c06.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjlx27c06.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $seen = array();\n    foreach ($numbers as $num) {\n        if (!isset($seen[$num]))\
    \ {\n            $seen[$num] = 1;\n            yield $num;\n        }\n    }\n\
    }\n</code>\n<|/ a |>\n<| a dscore=4 |>\nHere is a generator which removes duplicates:\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk57wn84s.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_count_values($numbers);\n  return array_filter($numbers,\
    \ function($count) {\n    return $count > 1;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnewb_2g.php:19\n\
    Stack trace:\n#0 /tmp/tmpsnewb_2g.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpsnewb_2g.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $seen   = [];\n  foreach ($numbers as $number) {\n   \
    \ $seen[$number] = 1;\n    $result[] = $number;\n  }\n  return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\n`[1,2,2,3,4];` should become `[1,2,3,4];` because it's removing\
    \ the repeated value at the end. But thanks for the solution!\n<|/ c |>\n<| a\
    \ tags=arrays,php |>\nIn short, here is an example code snippet that uses array_count_values()\
    \ and array_diff_key() functions:\n<code>\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpio3b6wau.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $i => $number) {\n    if ( !\
    \ isset($unique[$number]) && $number != '') {\n      $unique[$number] = $i;\n\
    \    }\n  }\n  return array_keys($unique);\n}\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamz3zpz6.php:22\n\
    Stack trace:\n#0 /tmp/tmpamz3zpz6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpamz3zpz6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $clean = array();\n  foreach ($numbers as $number) {\n    if (empty($clean)\
    \ || !in_array($number, $clean)) {\n      $clean[] = $number;\n    }\n  }\n\n\
    \  return $clean;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4spdeu6.php:24\n\
    Stack trace:\n#0 /tmp/tmpa4spdeu6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa4spdeu6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $counts = array_count_values($numbers);\n    $result = array();\n   \
    \ foreach ($counts as $value => $count) {\n        if ($count > 1) {\n       \
    \     $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$numbers\
    \ = array(1,2,3,2,4,1);\n$result = remove_duplicates($numbers);\nprint_r($result);\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpputo4n4k.php:26\nStack trace:\n#0 /tmp/tmpputo4n4k.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpputo4n4k.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers_count = array_count_values($numbers);\n    $unique = array_keys($numbers_count\
    \ - 1);\n    return $unique;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0\
    \ tags=arrays,php |>\nThis worked for me on some big array data where i had to\
    \ remove duplicated strings and keep order \n<code>\n$array = array(\"this\",\
    \ \"is\", \"a\", \"string\", \"that\", \"has\", \"to\", \"be\", \"removed\", \"\
    with\", \"a\",\"string\", \"that\", \"has\", \"to\", \"be\", \"removed\", \"with\"\
    , \"a\",\"string\", \"that\", \"has\", \"to\", \"be\", \"removed\", \"with\",\
    \ \"a\");\n\n$new_array = array();\n\nforeach($array as $value){\n\n    $new_array[$value]\
    \ = $value;\n\n}\n\n$array_key = 0;\n$array_values = array();\n\nforeach($new_array\
    \ as $key => $value){\n\n    if(!isset($array_values[$key])){\n\n        $array_values[$key]\
    \ = $key;\n\n    }else{\n\n        while(isset($array_values[$key]) && $array_values[$key]\
    \ == $array_values[$array_key]){\n\n            $array_values[$key] = $key + 1;\n\
    \            $key++;\n\n        }\n\n    }\n\n    $array_key++;\n\n}\n\nprint_r($array_values);\n\
    \necho \"<hr>\";\n\nprint_r($new_array);\n</code>\n<|/ a |>\n<| a tags=arrays,php\
    \ dscore=0 |>\nIf it can help someone. I had an array of unique strings. But sometimes\
    \ i had empty values in it.\nI solved this way:\n<code>\n$unique_strings = array_unique(\
    \ array_filter( $array ) );\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n<code>\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpboo0ubt_.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    $result = array();\n    foreach($numbers as $number)\n\
    \        $result[] = $number;\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\nAs a one liner:\n<code>\n$array = [1,3,5,6,7,8,2,3,4,6];\n\
    $array = array_filter($array, function($var){return !in_array($var, $array);},\
    \ ARRAY_FILTER_USE_BOTH);\n</code>\nThis takes an array and removes all the elements\
    \ that are in the array already.\n<|/ a dscore=2 |>\n<| c |>\nThis is actually\
    \ the easiest and most efficient answer on this thread. Thanks\n<|/ c |>\n<| a\
    \ |>\nFor a general solution that will work even with objects that do not implement\
    \ the __toString() method, the following works for me.\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplaj71nsf.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    $result[$number]\
    \ = $number;\n  }\n  return array_values($result);\n}\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays |>\n<| c |>\nThank you. I'm still new to php and coding. I will\
    \ have to try this code and see how it works!\n<|/ c |>\n<| a dscore=0 |>\nIf\
    \ your numbers are always integers, you can do:\n<code>\n$arr = array(1,2,2,3,4);\n\
    \n$result = array_count_values($arr);\n$result2 = array_filter($result, function($val)\
    \ { return $val <= 1; });\nprint_r($result2);\n</code>\nSee live demo\nOutput\n\
    <code>\nArray\n(\n    [4] => 4\n    [2] => 2\n)\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\nTry this\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq3rc15ir.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_values(array_filter(\n        $numbers,\n        function\
    \ ($value, $key) use ($numbers) {\n            return in_array($value, $numbers,\
    \ true);\n        }\n    ));\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for\
    \ this! Works great :)\n<|/ c |>\n<| a |>\nThis is a bit tricky, but you can use\
    \ the array_map function:\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvg4i1d05.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_filter($numbers);\n  sort($numbers);\n  $result = array();\n\
    \  $seen = array();\n  foreach ($numbers as $i => $number) {\n    if (!isset($seen[$number]))\
    \ {\n      $seen[$number] = 1;\n      $result[] = $number;\n    }\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,sorting,php |>\n<| a tags=algorithm,sorting,php\
    \ |>\nHere's my solution in PHP:\n<code>\nfunction candidate(...$args) {\n   \
    \ return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpigjwohd0.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $count = array();\n  foreach($numbers as $number)\n    $count[$number]\
    \ = (isset($count[$number]) ? $count[$number] + 1 : 1);\n  return array_keys($count,\
    \ max($count));\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpgx8kopji.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgx8kopji.php:20\n\
    Stack trace:\n#0 /tmp/tmpgx8kopji.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpgx8kopji.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphar8u6uv.php:22\n\
    Stack trace:\n#0 /tmp/tmphar8u6uv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphar8u6uv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $key => $number) {\n    if (!array_key_exists($number,\
    \ $uniques)) {\n      $uniques[$number] = $number;\n    }\n  }\n  return array_values($uniques);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYou might want to make that `function\
    \ remove_duplicates(array $numbers)`\n<|/ c |>\n<| c |>\nNot sure why you think\
    \ it should be `function remove_duplicates(array $numbers)`. There is no such\
    \ thing as an array value that is not a key. So if the input `[1, 2, 2, 3]` is\
    \ given this wouldn't work. Also there is no such thing as an array value that\
    \ has a key of zero.\n<|/ c |>\n<| c |>\n\"There is no such thing as an array\
    \ value that is not a key.\" You are absolutely correct. But I believe that in\
    \ most situations, the OP meant that array values have *indexes*, not keys. `[0\
    \ => 1]`, `[1 => 1]`, `[0 => 0]`. But of course, that's just me being pedantic,\
    \ and I think your answer still applies.\n<|/ c |>\n<| c |>\nThis answer is so\
    \ wrong. Read the comment in 's answer. You have not understood the question correctly.\
    \ No need for that loop and no need for that hashmap. His answer is the correct\
    \ one.\n<|/ c |>\n<| c |>\nI agree. The comments on other answers also say the\
    \ same thing. I think my answer was poorly worded so I've fixed that.\n<|/ c |>\n\
    <| a tags=php,arrays dscore=2 |>\n<code>\n$uniques = array_filter($numbers, function($num){\n\
    \    return in_array($num, $numbers);\n});\n\nprint_r($uniques);\n</code>\n<|/\
    \ a |>\n<| c |>\nHah, that's what I get for writing PHP without testing it. I\
    \ actually have a question about that. Why `in_array()`? Why not `if ($num ===\
    \ $numbers) { return true; }`?\n<|/ c |>\n<| c |>\nThat would be correct, but\
    \ he wanted to get rid of all the duplicates. I assume that he wanted to keep\
    \ the order of the elements.\n<|/ c |>\n<| c |>\nWhat is the purpose of the anonymous\
    \ function?\n<|/ c |>\n<| c |>\nIt's a closure, which is a function without being\
    \ assigned to a variable. http://php.net/manual/en/functions.anonymous.php http://en.wikipedia.org/wiki/Closure_%28computer_programming%29\n\
    <|/ \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbd06pdut.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  return array_filter($numbers,\
    \ function($value) use ($counts) {\n    return $counts[$value] > 1;\n  });\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_cirf1dn.php:19\n\
    Stack trace:\n#0 /tmp/tmp_cirf1dn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_cirf1dn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $distinct = array();\n    $counts = array();\n    $retval = array();\n\
    \n    foreach ($numbers as $key => $value) {\n        if (in_array($value, $distinct))\
    \ {\n            // We have found a duplicate, remove the entry and continue\n\
    \            unset($numbers[$key]);\n            $counts[$value]--;\n        }\
    \ else {\n            $distinct[] = $value;\n            $counts[$value] = 1;\n\
    \        }\n    }\n\n    foreach ($numbers as $key => $value) {\n        if ($counts[$value]\
    \ == 1) {\n            $retval[] = $value;\n        }\n    }\n    return $retval;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxnphqjj.php:22\n\
    Stack trace:\n#0 /tmp/tmpaxnphqjj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpaxnphqjj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  global $count;\n  $new_array = array();\n  $unique = array();\n  foreach\
    \ ($numbers as $key => $value) {\n    if (in_array($value, $unique)) {\n     \
    \ unset($numbers[$key]);\n    } else {\n      $unique[] = $value;\n    }\n  }\n\
    \  return $numbers;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3kokhoyy.php:26\n\
    Stack trace:\n#0 /tmp/tmp3kokhoyy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3kokhoyy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = $numbers;\n  foreach ($unique_numbers as $key => $value)\
    \ {\n    if ($numbers[$key] == $value)\n      unset($unique_numbers[$key]);\n\
    \  }\n\n  return $unique_numbers;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3jr5qjm.php:21\n\
    Stack trace:\n#0 /tmp/tmpy3jr5qjm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpy3jr5qjm.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_reduce($numbers, function($carry, $item) {\n    if (in_array($item,\
    \ $carry)) {\n      $carry[] = $item;\n    }\n    return $carry;\n  }, array());\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1u7kpnli.php:20\n\
    Stack trace:\n#0 /tmp/tmp1u7kpnli.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp1u7kpnli.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $new_array = array();\n  $seen = array();\n\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($seen[$number])) {\n      $new_array[] = $number;\n      $seen[$number]\
    \ = 1;\n    }\n  }\n\n  return $new_array;\n}\n</code>\n<|/ a dscore=2 tags=arrays,php\
    \ |>\n<| a |>\nHere's an example of sorting and removing duplicates using a foreach\
    \ loop.\n<code>\n<?php\n\n$numbers = array(1,2,3,2,4,5,6);\n\n$uniqueNumbers =\
    \ array();\n\nforeach ($numbers as $key => $num) {\n    $uniqueNumbers[$key] =\
    \ $num;\n}\n\nsort($uniqueNumbers);\n$uniqueNumbers = array_unique($uniqueNumbers);\n\
    \nvar_dump($uniqueNumbers);\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n<| a\
    \ tags=arrays,php dscore=0 |>\n<code>\n$numbers = array(1,2,3,4,5,2,4,5,6,3,4,3,5,4,5,6,7);\n\
    $newArray = array_count_values($numbers);\n$newArray = array_filter($newArray);\n\
    $newArray = array_keys($newArray);\n$newArray = array_values($newArray);\n</code>\n\
    <|/ a |>\n<| a dscore=0 tags=arrays,php |>\n<code>\n<?php\n\n$numbers = array(1,2,3,2,4,5,6);\n\
    \n$uniqueNumbers = array();\n\nforeach ($numbers as $key => $num) {\n    $uniqueNumbers[$key]\
    \ = $num;\n}\n\nsort($uniqueNumbers);\n$uniqueNumbers = array_unique($uniqueNumbers);\n\
    \nvar_dump($uniqueNumbers);\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiv0u0a35.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  $result = array();\n  foreach ($numbers as $n) {\n\
    \    if (in_array($n, $seen)) {\n      unset($seen[$n]);\n    } else {\n     \
    \ $seen[$n] = 1;\n      $result[] = $n;\n    }\n  }\n  return $result;\n}\n</code>\n\
    If your input is a very large array, the above algorithm might become inefficient.\
    \ If so, you can use a different algorithm that uses bitwise operations.\n<|/\
    \ a |>\n<| c |>\nI added a solution that uses bitwise operations instead of `in_array()`.\n\
    <|/ c |>\n<| c |>\nNice! I've never heard of bitwise operations before. That's\
    \ a great way to solve this problem.\n<|/ c |>\n<| a dscore=4 |>\nA PHP function\
    \ to remove duplicate elements from an array without using array_unique() and\
    \ in_array() functions:\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptlbqcc8_.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $output = [];\n\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $output)) {\n      continue;\n    }\n\n    $output[] = $number;\n  }\n\n  return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50ek0koh.php:27\n\
    Stack trace:\n#0 /tmp/tmp50ek0koh.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp50ek0koh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $distinct = array();\n  $remove = array();\n  foreach ($numbers as $num)\
    \ {\n    if (in_array($num, $distinct)) {\n      array_push($remove, $num);\n\
    \    } else {\n      $distinct[] = $num;\n    }\n  }\n  return array_values(array_diff($numbers,\
    \ $remove));\n}\n</code>\n<|/ a |>\n<| a tags=php |>\n<code>\n<?php\n\n$input\
    \ = array( 1, 2, 3, 2, 4);\n\n$output = array();\n$count = 0;\n$duplicates = 0;\n\
    foreach ( $input as $key => $value) {\n  if($value == $input[$key]){\n    $duplicates++;\n\
    \  }else{\n    $output[$key] = $value;\n    $count++;\n  }\n}\nif ($count > 1){\n\
    \  echo $duplicates;\n}else{\n  print_r($output);\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpexgaolb5.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_reduce(\n    $numbers,\n    function($carry, $number) {\n\
    \      if ($carry) {\n        foreach ($carry as $key => $value) {\n         \
    \ if ($value == $number) {\n            unset($carry[$key]);\n          }\n  \
    \      }\n      }\n      elseif ($number != 0) {\n        $carry[] = $number;\n\
    \      }\n\n      return $carry;\n    },\n    array()\n  );\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9n8l2x2.php:32\n\
    Stack trace:\n#0 /tmp/tmph9n8l2x2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph9n8l2x2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result, true)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n\
    }\n\n$results = remove_duplicates([1, 2, 3, 2, 4]);\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjkd5ohp.php:25\n\
    Stack trace:\n#0 /tmp/tmpdjkd5ohp.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdjkd5ohp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    $uniques = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $uniques)) {\n            $uniques[] = $number;\n\
    \        }\n    }\n    return $uniques;\n}\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_s9op4yo.php:23\n\
    Stack trace:\n#0 /tmp/tmp_s9op4yo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_s9op4yo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n      $numbers,\n      function ($number) {\n   \
    \     return in_array($number, array_unique($numbers));\n      }\n  );\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_unique() expects parameter 1 to be array, null given in\
    \ /tmp/tmprr49an6g.php on line 10\n\nWarning: in_array() expects parameter 2 to\
    \ be array, null given in /tmp/tmprr49an6g.php on line 10\n\nWarning: array_unique()\
    \ expects parameter 1 to be array, null given in /tmp/tmprr49an6g.php on line\
    \ 10\n\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmprr49an6g.php\
    \ on line 10\n\nWarning: array_unique() expects parameter 1 to be array, null\
    \ given in /tmp/tmprr49an6g.php on line 10\n\nWarning: in_array() expects parameter\
    \ 2 to be array, null given in /tmp/tmprr49an6g.php on line 10\n\nWarning: array_unique()\
    \ expects parameter 1 to be array, null given in /tmp/tmprr49an6g.php on line\
    \ 10\n\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmprr49an6g.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprr49an6g.php:21\n\
    Stack trace:\n#0 /tmp/tmprr49an6g.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprr49an6g.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $result)) {\n            $result[] = $num;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI realize this is an old post, but I needed\
    \ an efficient solution to a problem similar to this.  I didn't want to use the\
    \ 'array_unique' function because there were thousands of items to compare (this\
    \ was for an online checkout system where I needed to check items against other\
    \ items) and I wanted to keep each item as close to its original order as possible.\n\
    I ended up using a custom sort function with the usort() function.  I ended up\
    \ using PHP 5.6.\nThe usort() function compares two items and returns the number\
    \ of differences between them.  If there are differences, it then compares the\
    \ items in between to see if they are the same.  \nThe function below sorts two\
    \ arrays of integers.  The function compares the array items in order and returns\
    \ an array with the differences.\n<code>\nfunction candidate(...$args) {\n   \
    \ return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfhvjzkd8.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $array = array_count_values($numbers);\n  arsort($array);\n  return array_keys($array);\n\
    }\n\n$numbers = [1, 2, 3, 2, 4];\n$numbers = remove_duplicates($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a dscore=0 |>\nA function which\
    \ removes duplicate items from a given array:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps_ivxnlu.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $new_array = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $new_array)) {\n      continue;\n    }\n    $new_array[] = $number;\n  }\n \
    \ return $new_array;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qu0fzzk.php:23\n\
    Stack trace:\n#0 /tmp/tmp6qu0fzzk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6qu0fzzk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $number) {\n        if\
    \ (in_array($number, $uniques)) {\n            unset($uniques[array_search($number,\
    \ $uniques)]);\n        } else {\n            $uniques[] = $number;\n        }\n\
    \    }\n    return $uniques;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    This doesn't work if the arrays are out of order, as it will return the last duplicate\
    \ instead of the first duplicate.\n<|/ c |>\n<| c |>\n, that behavior is not defined\
    \ in the question.\n<|/ c |>\n<| a dscore=3 |>\nYou can use the following code\n\
    <code>\n<?php\n$a = array(\"1\", \"2\", \"3\", \"3\", \"4\");\n$b = array(\"2\"\
    , \"3\", \"4\", \"5\", \"6\");\n\n$arrayMerge = array_merge(array_unique($a),\
    \ array_unique($b));\nprint_r($arrayMerge);\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppp8gh89u.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n      array_count_values($numbers),\n      function\
    \ ($count) { return $count > 1; },\n      ARRAY_FILTER_USE_BOTH\n  );\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8bppbgn.php:19\n\
    Stack trace:\n#0 /tmp/tmpt8bppbgn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpt8bppbgn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_map('intval', $numbers);\n  $numbers = array_unique($numbers);\n\
    \  $numbers = array_filter($numbers, 'strlen');\n  return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu41e1q_5.php:20\n\
    Stack trace:\n#0 /tmp/tmpu41e1q_5.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpu41e1q_5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $new_numbers = [];\n  foreach($numbers as $number) {\n    if(!in_array($number,\
    \ $new_numbers)) {\n      $new_numbers[] = $number;\n    }\n  }\n  return $new_numbers;\n\
    }\n</code>\nAnd we can test it:\n<code>\n$numbers = [1,2,3,4,4,5,5,6,6];\n$new_numbers\
    \ = remove_duplicates($numbers);\n\nvar_dump($new_numbers);\n</code>\nOutput:\n\
    <code>\narray\n  0 => int 1\n  1 => int 2\n  2 => int 3\n  3 => int 4\n  4 =>\
    \ int 5\n  5 => int 6\n  6 => int 6\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n\
    Just as other answers demonstrate - use array_unique.\nBut also note that - as\
    \ explained in the PHP manual - it will reindex your array. So if you have an\
    \ associative array with numeric keys - you should use array_values on the result\
    \ of the function call to avoid reindexing.\n<|/ a dscore=5 tags=php,arrays |>\n\
    <| c |>\nThe reindex operation happens with `array_unique` if the `key` is set\
    \ to `NULL`\n<|/ c |>\n<| a |>\narray_unique() should work for your situation.\n\
    http://php.net/manual/en/function.array-unique.php\n<|/ a dscore=5 tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\nThe function array_unique is good and it works\
    \ when all you need is to remove duplicates. But if you need to keep duplicates\
    \ and reindex your array, use array_values() on your result after array_unique().\n\
    <|/ a dscore=5 |>\n<| a tags=php,arrays |>\nFor anyone using array_unique() without\
    \ array_values() this will throw an error. Try this instead:\n<code>\n$array =\
    \ array(\"A\",\"B\",\"B\",\"B\",\"A\",\"B\",\"B\",\"A\",\"B\");\n$array = array_unique($array);\n\
    $array = array_values($array);\n</code>\n<|/ a dscore=4 |>\n<| a |>\nThe array_unique\
    \ and array_values function work but will require the use of an additional variable.\
    \ \nThe reason for this is that array_unique reindexes the array as it is built,\
    \ but if you use array_values after array_unique the new array will be indexed\
    \ as 0->n whereas the original array was indexed as 0->n-1 meaning the first array\
    \ is now the second. \nSo if you have an array as such:\n<code>\n$arr = [\"a\"\
    , \"b\", \"b\", \"c\", \"b\", \"a\"];\n</code>\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprbvjwrii.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!array_key_exists($number,\
    \ $result)) {\n      $result[$number] = 1;\n    } else {\n      unset($result[$number]);\n\
    \    }\n  }\n  return array_keys($result);\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nI get the feeling you forgot about the part about the original\
    \ order mattering when the original post was written.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\nMy solution, using array_reduce():\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2ouvgy3d.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  if (empty($numbers)) {\n    return array();\n  }\n  $seen = array();\n\
    \  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($seen[$number]))\
    \ {\n      $seen[$number] = 1;\n      $result[] = $number;\n    }\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like that you're using functions\
    \ to make code more readable, though.\n<|/ c |>\n<| c |>\n, it's more readable,\
    \ yes. And you can reuse them in different parts of your code.\n<|/ c |>\n<| a\
    \ |>\nI would go with this:\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbfe9_d3n.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  $numbers = array_reverse($numbers);\n  foreach ($numbers\
    \ as $key => $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number]\
    \ = 1;\n      $numbers[$key] = $number;\n    }\n  }\n  return $numbers;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcs67oqwe.php:24\n\
    Stack trace:\n#0 /tmp/tmpcs67oqwe.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcs67oqwe.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n\n  foreach ($numbers as $index => $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n\n  return $unique;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wu46w92.php:24\n\
    Stack trace:\n#0 /tmp/tmp1wu46w92.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1wu46w92.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $counter = array();\n    foreach ($numbers as $key => $value) {\n   \
    \     if (array_key_exists($value, $counter)) {\n            unset($counter[$value]);\n\
    \        }\n        $counter[$key] = $value;\n    }\n\n    return $counter;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_00_kxp4.php:24\n\
    Stack trace:\n#0 /tmp/tmp_00_kxp4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_00_kxp4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = array();\n  $counts = array();\n\n  foreach ($numbers as $number)\
    \ {\n    if (array_key_exists($number, $uniques)) {\n      continue;\n    }\n\
    \    $uniques[$number] = $number;\n    $counts[$number] = 1;\n  }\n\n  $result\
    \ = array();\n  foreach ($numbers as $number) {\n    if (!array_key_exists($number,\
    \ $counts)) {\n      $result[] = $number;\n    }\n  }\n\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ddw2nv5.php:34\n\
    Stack trace:\n#0 /tmp/tmp7ddw2nv5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7ddw2nv5.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $return = array();\n  foreach ($numbers as $key => $number) {\n    if (array_search($number,\
    \ $return) === false) {\n      $return[] = $number;\n    }\n  }\n  return $return;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe code you have provided would remove\
    \ duplicates that are next to each other. So `[1, 2, 2, 2, 3]` would become `[1,\
    \ 2, 3]`.\n<|/ c |>\n<| c |>\nYes - which is what my code does.\n<|/ c |>\n<|\
    \ a tags=arrays,php |>\nA recursive method with array_diff_key() and array_unique()\
    \ should do the trick\n<code>\n<?php\n\n$myArray = array(1, 3, 1, 2, 2, 3, 1,\
    \ 2, 1, 2, 1, 2, 3, 3, 3, 3);\n$result = array_unique(array_diff_key($myArray,\
    \ array_flip($myArray)));\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    I have this code for you. This works with your example:\n<code>\n<?php\n\n$arr\
    \ = array(1,3,1,2,2,3,1,2,1,2,1,2,3,3,3,3);\n$result = array();\n$keys = array_unique($arr);\n\
    for($i = 0; $i < count($keys); $i++){\n    if(isset($arr[$keys[$i]])){\n     \
    \   array_push($result, $keys[$i]);\n    }\n}\n\necho \"<pre>\";\nprint_r($result);\n\
    echo \"</pre>\";\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou don't need `array_unique`\
    \ here because you already know that you only have unique elements.\n<|/ c |>\n\
    <| c |>\nIf he does not know that, he could use array_count_values.\n<|/ c |>\n\
    <| c |>\nRight, but he also needs to loop through the array anyways.\n<|/ c |>\n\
    <| c |>\nI know, that's why I wrote a comment to the OPs question. :)\n<|/ c |>\n\
    <| c |>\nYes, I know. But I thought he might have a different case. :)\n<|/ c\
    \ |>\n<| a dscore=0 tags=arrays,php |>\nYou can do this with just looping through\
    \ the array and using in_array():\n<code>\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph9d7ivwi.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $seen = [];\n  foreach ($numbers as $value) {\n    if\
    \ (!isset($seen[$value])) {\n      $seen[$value] = true;\n      $result[] = $value;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhr6kl53.php:24\n\
    Stack trace:\n#0 /tmp/tmpfhr6kl53.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfhr6kl53.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $result)) {\n      continue;\n    }\n    $result[] = $number;\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n$array = [1, 2, 2,\
    \ 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 7, 7, 8];\n$uniqueArray = array_unique($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis answer is wrong, as it assumes\
    \ the order of the items in the original array is preserved.\n<|/ c |>\n<| c |>\n\
    Ah, the order was a key issue. I'll update.\n<|/ c |>\n<| c |>\nI missed that\
    \ \"order of the items in the original array is preserved\" part.\n<|/ c |>\n\
    <| c |>\nI used the same logic in my answer. Did I miss something?\n<|/ c |>\n\
    <| c |>\nI used the same logic and didn't see it mentioned in the question. Just\
    \ had to point it out.\n<|/ c |>\n<| a tags=php,arrays |>\nJust use array_unique(),\
    \ as mentioned by other answers and in the documentation.\n<code>\n$a = [1, 3,\
    \ 5, 8, 5, 9, 10, 6, 7];\n\n$b = array_unique($a);\n\nprint_r($b);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis answer is wrong, as it assumes the order of the\
    \ items in the original array is preserved.\n<|/ c |>\n<| c |>\nThis is not only\
    \ wrong, its the wrong approach altogether.\n<|/ c |>\n<| c |>\nI think you're\
    \ trying to give a technical answer to a non-technical question, which is rarely\
    \ a good idea.\n<|/ c |>\n<| a dscore=0 tags=php,arrays |>\nTry this approach\n\
    <code>\n$array = array(1, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7,\
    \ 7, 7, 7, 7, 7);\nprint_r(array_count_values($array));\n</code>\nIt will return\
    \ the counts of each value in the array. Once you have the counts, you can then\
    \ delete the values which have a count of 1.\n<|/ a |>\n<| c |>\nThis answer is\
    \ wrong, as it assumes the order of the items in the original array is preserved.\n\
    <|/ c |>\n<| c |>\nAh, sorry, I missed that. I've updated the example to show\
    \ the correct order of the array.\n<|/ c |>\n<| a \nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_1bmttgd.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  $output = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $seen)) {\n      $output[] = $number;\n      $seen[]\
    \ = $number;\n    }\n  }\n  return $output;\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| c |>\nWhy not just use array_count_values on the input array?  Then you\
    \ don't have to loop through the array twice to get a result.\n<|/ c |>\n<| c\
    \ |>\n: Because the OP specifically asked for a solution not involving `array_count_values`.\n\
    <|/ c |>\n<| c |>\n: I guess I misread the question then.  I just read the comments\
    \ and thought he wanted the result as a one-liner.\n<|/ c |>\n<| c |>\n: It's\
    \ not that bad because I can always put it in a function and call that.\n<|/ c\
    \ |>\n<| c |>\n: It's not really a bad solution, just personal preference.\n<|/\
    \ c |>\n<| a |>\n<code>\n$arr = [1,2,2,3,4,5,6,7,7,7,8,8,9,9,9,10,11,12,12,13,13,13,14,15,15,16,17,18,19,20,20,20,21,22,23,24,25];\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphdmyh_75.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  $last = null;\n  foreach ($numbers as $number) {\n   \
    \ if ($number != $last) {\n      $unique[] = $number;\n      $last = $number;\n\
    \    }\n  }\n  return $unique;\n}\n</code>\n<|/ a tags=arrays,php dscore=5 |>\n\
    <| c |>\nThank you for your answer. Can you please explain how `$unique[] = $number;`\
    \ works in your example? I understand that it is used to add an element to `$unique`\
    \ array, but I don't understand why `$unique[] = $number;` works. Can you please\
    \ explain how it works?\n<|/ c |>\n<| c |>\n`$unique[] = $number;` means that\
    \ you add the number to the `$unique` array as an element. The brackets indicate\
    \ that you want to add an element to the array. Take a look at [PHP Arrays](https://www.php.net/manual/en/language.types.array.php)\n\
    <|/ c |>\n<| c |>\nThis answer is very useful because its very simple. Thank you\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$result = array_count_values($input);\n\
    $result = array_filter($result, function($a) {\n    return $a > 1;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThat is very clever, but a little bit verbose, compared\
    \ to the answer that was accepted. +1 from me\n<|/ c |>\n<| c |>\n, i don't think\
    \ this is verbose. the accepted answer has 7 lines, yours has 5\n<|/ c |>\n<|\
    \ c |>\nFor those who wonder how this works: It works because `$input` is an array,\
    \ so by using the function `array_count_values()` we convert it to an associative\
    \ array. The function `array_filter()` then iterates through the array, and returns\
    \ the values which are greater than 1.\n<|/ c |>\n<| c |>\nthis only removes elements\
    \ from an array. it does not rebuild a new one with the removed elements.\n<|/\
    \ c |>\n<| a tags=arrays,php |>\n<code>\narray_unique($array)\n</code>\nRemoves\
    \ duplicate values from an array.\n<|/ a dscore=4 |>\n<| c |>\nPlease read my\
    \ question before you answer. I've specified in my question that I'm looking for\
    \ a solution in which my array will be rebuilt after removing some elements. In\
    \ other words, I'm looking for a way to remove elements from an array and replace\
    \ it with something else.\n<|/ c |>\n<| a tags=arrays,php |>\nMy solution, using\
    \ array_\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvfg5kvtn.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        $result[$number]\
    \ = 1;\n    }\n    return array_filter($numbers, function($value) use ($result)\
    \ {\n        return !isset($result[$value]);\n    });\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe input array may contain objects of any type and you cannot rely on\
    \ `==` operator.\n<|/ c |>\n<| a tags=sorting,arrays,php dscore=0 |>\n<code>\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv08lnv4w.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    // Create an array with elements that occur more than once.\n    $occurs\
    \ = array_count_values($numbers);\n\n    // Remove elements that appear only once.\n\
    \    $result = array();\n    foreach ($numbers as $key => $value) {\n        if\
    \ ($occurs[$value] == 1) {\n            $result[] = $value;\n            unset($numbers[$key]);\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ dscore=2 |>\n<| a dscore=2 |>\nI recently encountered a need for this and found\
    \ that the following code can be very useful:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0g6igt54.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique($numbers);\n}\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk2sisxl9.php:16\n\
    Stack trace:\n#0 /tmp/tmpk2sisxl9.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpk2sisxl9.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  sort($numbers);\n  $result = [];\n  foreach ($numbers as $key => $value)\
    \ {\n    if (in_array($value, $result)) {\n      unset($result[$key]);\n    }\
    \ else {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmiaapbky.php:25\n\
    Stack trace:\n#0 /tmp/tmpmiaapbky.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmiaapbky.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $count = array_count_values($numbers);\n  return array_filter($numbers,\
    \ function($value) use ($count) {\n    return $count[$value] > 1;\n  });\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=arrays,php |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6mju41hg.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $done = false;\n\n    foreach ($numbers as $number)\
    \ {\n        if (in_array($number, $result)) {\n            $done = true;\n  \
    \      } else {\n            $result[] = $number;\n        }\n    }\n\n    return\
    \ $done ? $result : array_unique($result);\n}\n</code>\n<|/ a |>\n<| c |>\nI wonder\
    \ if you could get around the double looping by doing something like this: \n\
    `<?php\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp67x37khe.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n    $numbers,\n    function ($value) {\n      //\
    \ Only return true on duplicate elements.\n      return array_count_values($numbers)[$value]\
    \ > 1;\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n</code>\nThe first parameter\
    \ of array_filter() is the array you want to filter. The second parameter is a\
    \ callback that takes each element of the array and returns true or false whether\
    \ it should be kept or discarded depending on whether the count of elements that\
    \ have been seen with that value is greater than 1. \n<code>\narray_filter($numbers,\
    \ function ($value) {\n    // Only return true on duplicate elements.\n    return\
    \ array_count_values($numbers)[$value] > 1;\n}, ARRAY_FILTER_USE_BOTH);\n</code>\n\
    Using ARRAY_FILTER_USE_BOTH means that if two elements occur with the same value\
    \ the later one will be kept instead of the first one that occurred. Because of\
    \ this, any duplicate values will be treated as a single value with count of 1.\n\
    <|/ a dscore=1 tags=php,duplicate-removal,arrays,sorting,arrays |>\n<| a dscore=0\
    \ tags=php,duplicate-removal,arrays,sorting,arrays |>\nI would do it like this:\n\
    <code>\n$arr1 = array(1,2,3,4,5,6,7,8,9,10);\n$arr2 = array(1,2,3,4,5,6,7,8,9,10,11);\n\
    $arr3 = array(1,2,3,4,5,6,7,8,9,10);\n\n$arr1_unique = array_intersect($arr1,\
    \ $arr2);\n$arr2_unique = array_intersect($arr2, $arr3);\n$arr3_unique = array_intersect($arr1,\
    \ $arr3);\n\n$arr1_unique = array_unique($arr1_unique);\n$arr2_unique = array_unique($arr2_unique);\n\
    $arr3_unique = array_unique($arr3_unique);\n\n$arr1 = array_diff($arr1_unique,\
    \ $arr2_unique);\n$arr2 = array_diff($arr2_unique, $arr3_unique);\n$arr3 = array_diff($arr3_unique,\
    \ $arr1_unique);\n</code>\n<|/ a |>\n<| c |>\nThis doesn't give the correct order\
    \ of the elements\n<|/ c |>\n<| c |>\nThat's right. I didn't think of that. Thanks\
    \ :)\n<|/ c |>\n<| c |>\nThis doesn't give the correct order of the elements\n\
    <|/ c |>\n<| c |>\nI'm sorry but I cannot understand the question you are referring\
    \ to\n<|/ c |>\n<| c |>\nSorry I made a mistake I thought you wanted the result\
    \ as 1,2,3,4\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2xgcmgkg.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    $key = $number;\n\
    \    if (isset($result[$key])) {\n      unset($numbers[$key]);\n    }\n    $result[$key]\
    \ = $number;\n  }\n  return $numbers;\n}\nfunction candidate(...$args) {\n   \
    \ return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcjemnic.php:24\n\
    Stack trace:\n#0 /tmp/tmpvcjemnic.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvcjemnic.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($number) {\n    return !in_array($number,\
    \ array_slice($numbers, 0, array_search($number, $numbers)));\n  });\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpxs62fw99.php on line 8\n\nWarning: array_slice() expects parameter 1\
    \ to be array, null given in /tmp/tmpxs62fw99.php on line 8\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpxs62fw99.php on line\
    \ 8\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpxs62fw99.php on line 8\n\nWarning: array_slice() expects parameter 1\
    \ to be array, null given in /tmp/tmpxs62fw99.php on line 8\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpxs62fw99.php on line\
    \ 8\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpxs62fw99.php on line 8\n\nWarning: array_slice() expects parameter 1\
    \ to be array, null given in /tmp/tmpxs62fw99.php on line 8\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpxs62fw99.php on line\
    \ 8\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpxs62fw99.php on line 8\n\nWarning: array_slice() expects parameter 1\
    \ to be array, null given in /tmp/tmpxs62fw99.php on line 8\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpxs62fw99.php on line\
    \ 8\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpxs62fw99.php on line 8\n\nWarning: array_slice() expects parameter 1\
    \ to be array, null given in /tmp/tmpxs62fw99.php on line 8\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpxs62fw99.php on line\
    \ 8\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpxs62fw99.php on line 8\n\nWarning: array_slice() expects parameter 1\
    \ to be array, null given in /tmp/tmpxs62fw99.php on line 8\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpxs62fw99.php on line\
    \ 8\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpxs62fw99.php on line 8\n\nWarning: array_slice() expects parameter 1\
    \ to be array, null given in /tmp/tmpxs62fw99.php on line 8\n\nWarning: in_array("
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n\n  // For each number\n  foreach ($numbers as $number)\
    \ {\n    // If that number isn't already in the result, add it\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n\n  // Return an array\
    \ with the result and discard the initial array\n  return array_diff($result,\
    \ $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is another way using\
    \ array_count_values():\n<code>\n$array = array(1,2,3,4,5,1,2,3,4,5);\n\n$array\
    \ = array_count_values($array);\n\nprint_r($array);\n</code>\nOutput\n<code>\n\
    Array\n(\n    [1] => 2\n    [2] => 1\n    [3] => 3\n    [4] => 2\n    [5] => 1\n\
    )\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\nThere are some functions\
    \ to remove duplicates from an array. I think that the simplest one would be array_unique\
    \ that removes duplicates from a numeric array.\n<code>\n$a = array(1,2,4,2,4,5,6,1,1);\n\
    \nvar_dump($a);\n\nvar_dump($a = array_unique($a));\n\n$a = array(1,2,4,2,4,5,6,1,1);\n\
    var_dump($a = array_unique($a));\n\n$a = array(1,2,4,2,4,5,6,1,1);\nvar_dump($a\
    \ = array_unique($a));\n\n$a = array(1,2,4,2,4,5,6,1,1);\nvar_dump($a = array_unique($a));\n\
    \n$a = array(1,2,4,2,4,5,6,1,1);\nvar_dump($a = array_unique($a));\n\n$a = array(1,2,4,2,4,5,6,1,1);\n\
    var_dump($a = array_unique($a));\n</code>\nOutput :\n<code>\narray(9) { [0]=>\
    \ int(1) [1]=> int(2) [2]=> int(4) [3]=> int(2) [4]=> int(4) [5]=> int(5) [6]=>\
    \ int(6) [7]=> int(1) [8]=> int(1) }\n\narray(9) { [0]=> int(1) [1]=> int(2) [2]=>\
    \ int(4) [3]=> int(2) [4]=> int(4) [5]=> int(5) [6]=> int(6) [7]=> int(1) [8]=>\
    \ int(1) }\n\narray(8) { [0]=> int(1) [1]=> int(2) [2]=> int(4) [3]=> int(2) [4]=>\
    \ int(4) [5]=> int(5) [6]=> int(6) }\n\narray(8) { [0]=> int(1) [1]=> int(2) [2]=>\
    \ int(4) [3]=> int(2) [4]=> int(4) [5]=> int(5) [6]=> int(6) }\n\narray(8) { [0]=>\
    \ int(1) \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_7j7febd.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $out = [];\n    $used = [];\n    foreach ($numbers as $number) {\n  \
    \      if (! in_array($number, $used)) {\n            $out[] = $number;\n    \
    \        $used[] = $number;\n        }\n    }\n    return $out;\n}\n</code>\n\
    <|/ a tags=duplicates,php dscore=0 |>\n<| c |>\nThis doesn't answer the question,\
    \ as the question specifically asks for a *\"more efficient\"* solution.\n<|/\
    \ c |>\n<| c |>\nEfficiency should be the criterion for choosing between different\
    \ solutions.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array_count_values($array);\n\
    foreach($array as $k => $v){\n    if($v > 1){\n        unset($array[$k]);\n  \
    \  }\n}\n</code>\n<|/ a tags=duplicates,php |>\n<| c |>\nHow can this possibly\
    \ be more efficient than O(n) time complexity?\n<|/ c |>\n<| c |>\nThe complexity\
    \ is O(n) in the number of elements in the array. It's the same as your answer.\n\
    <|/ c |>\n<| c |>\nYour code unsets ALL elements that appear more than once, but\
    \ OP wants to unset the ones that only appear once. Your code would also unset\
    \ `[1, 3, 2]`.\n<|/ c |>\n<| a tags=duplicates,php |>\nTry this - \n<code>\n$input\
    \ = [1,2,3,3,4,4,5,5,5,6];\n\n$result = [];\nforeach ($input as $value) {\n  \
    \  if (!in_array($value, $result)) {\n        $result[] = $value;\n    }\n}\n\n\
    print_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question, as the question specifically asks for a *\"more efficient\"* solution.\n\
    <|/ c |>\n<| a dscore=0 |>\nI did this:\n<code>\n$input = [1,2,3,3,4,4,5,5,5,6];\n\
    $result = [];\nforeach ($input as $value) {\n    if (!in_array($value, $result))\
    \ {\n        $result[] = $value;\n    }\n}\nvar_dump($result);\n</code>\nOutput:\
    \ \n<code>\narray(6) { [0]=> int(1) [1]=> int(2) [2]=> int(3) [3]=> int(4) [4]=>\
    \ int(5) [5]=> int(6) } \n</code>\n<|/ a tags=duplicates,php |>\n<| c |>\nThis\
    \ doesn't answer the question, as the question specifically ask\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmzm6ycre.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $uniques)) {\n      unset($numbers[$number]);\n    } else {\n      $uniques[]\
    \ = $number;\n    }\n  }\n\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxzwhbou.php:27\n\
    Stack trace:\n#0 /tmp/tmpaxzwhbou.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpaxzwhbou.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $uniques)) {\n      continue;\n    }\n    $uniques[] = $number;\n  }\n  return\
    \ $uniques;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjad8yql.php:24\n\
    Stack trace:\n#0 /tmp/tmpcjad8yql.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcjad8yql.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $new_array = array();\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $new_array)) {\n      continue;\n    }\n    $new_array[] = $number;\n  }\n \
    \ return $new_array;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc15oqv0b.php:23\n\
    Stack trace:\n#0 /tmp/tmpc15oqv0b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpc15oqv0b.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $seen = [];\n  foreach ($numbers as $number) {\n    if\
    \ (!isset($seen[$number])) {\n      $seen[$number] = true;\n      $result[] =\
    \ $number;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=sorting,arrays,php\
    \ |>\n<| c |>\nYeah, and you could also have used `array_count_values` rather\
    \ than manually looping through the `$seen` array\n<|/ c |>\n<| c |>\nSure. My\
    \ example was just to demonstrate how the function might work.  It doesn't make\
    \ for short code or best practices.\n<|/ c |>\n<| a tags=sorting,arrays,php dscore=4\
    \ |>\nUse array_count_values to get the count of every element in the array, then\
    \ sort it using ksort:\n<code>\n$arr = [1,2,1,3,5,2,3,4,4,3,3];\n\n$counts = array_count_values($arr);\n\
    ksort($counts);\n\nprint_r(array_slice($counts,0,4));\n</code>\nOutput (for your\
    \ sample data):\n<code>\nArray\n(\n    [2] => 1\n    [3] => 3\n    [4] => 1\n\
    )\n</code>\nDemo on 3v4l.org\n<|/ a |>\n<| c |>\nThank you sir!  I didn't know\
    \ `array_count_values` existed but this was very helpful!\n<|/ c |>\n<| c |>\n\
    `array_count_values` comes standard with PHP 5.3, so there's no need to install\
    \ anything.\n<|/ c |>\n<| a tags=sorting,arrays,php |>\n<code>\n$array = [\n \
    \   1, 2, 3, 1, 2, 2, 4, 5, 3, \n    2, 1, 2, 2, 3, 2, 5, 2, 2, \n    3, 1, 2,\
    \ 2, 3, 2, 4, 5, 2, \n    2, 2, 2, 3, 2, 5, 2, 2, 1, \n    3, 1, 2, 2, 3, 2, 4,\
    \ 5, 2, \n    2, 2, 2, 3, 4, 4, 3, 2, 3, \n    2, 2, 2, 3, 2, 5, 2, 2, 1, \n \
    \   3, 1, 2, 2, 3, 2, 4, 5, 2, \n    2, 2, 2, 3, 4, 4, 3, 2, 3\n];\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1hragc8l.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_unique($numbers);\n  sort($numbers);\n  return $numbers;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4yb0zb3r.php:18\n\
    Stack trace:\n#0 /tmp/tmp4yb0zb3r.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp4yb0zb3r.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgb80or8p.php:24\n\
    Stack trace:\n#0 /tmp/tmpgb80or8p.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgb80or8p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n\n  // If there are less than 3 numbers, just return\
    \ the input array.\n  if (count($numbers) <= 3) return $numbers;\n\n  // Otherwise,\
    \ sort the numbers.\n  sort($numbers);\n\n  // Add all remaining elements to the\
    \ result array.\n  for ($i = 0, $count = count($numbers); $i < $count; $i++) {\n\
    \    $result[] = $numbers[$i];\n  }\n\n  // Sort the result array.\n  sort($result);\n\
    \n  return $result;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2syjz07r.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $hash = [];\n  foreach ($numbers as $number) {\n    if (!isset($hash[$number]))\
    \ {\n      $hash[$number] = 1;\n    } else {\n      unset($hash[$number]);\n \
    \   }\n  }\n  return array_values($hash);\n}\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07zjqfql.php:23\n\
    Stack trace:\n#0 /tmp/tmp07zjqfql.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp07zjqfql.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $unique_numbers = [];\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $unique_numbers)) {\n            $unique_numbers[] = $number;\n\
    \        }\n    }\n    return $unique_numbers;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfsou4314.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $value) {\n    if (!isset($result[$value]))\
    \ {\n      $result[$value] = true;\n    }\n  }\n  return array_keys($result);\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_yb8a98.php:23\n\
    Stack trace:\n#0 /tmp/tmpy_yb8a98.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpy_yb8a98.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter($numbers, function($n) {\n        return count($n)\
    \ === 1;\n    });\n}\n</code>\n<|/ a |>\n<| c |>\n+1 For not using array_reduce\
    \ - I didn't know that function.\n<|/ c |>\n<| a dscore=2 |>\nIf $numbers is sorted\
    \ and has no duplicates, then you can do this:\n<code>\n$numbers = array(1,2,3,1,2,3,1,2,1);\n\
    \n$newNumbers = array();\nfor($i=0; $i<count($numbers); $i++){\n    if($newNumbers[$i]!==$numbers[$i]){\n\
    \        $newNumbers[$i]=$numbers[$i];\n    }\n}\n</code>\n<|/ a tags=algorithm,sorting,php\
    \ |>\n<| a |>\nThe easiest way would be to use an array to store the values that\
    \ have already been seen:\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqklxz1y0.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $seen = array();\n  foreach ($numbers as $n) {\n\
    \    if (!isset($seen[$n])) {\n      $result[] = $n;\n      $seen[$n] = true;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqn9221d1.php:24\n\
    Stack trace:\n#0 /tmp/tmpqn9221d1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqn9221d1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $hash   = [];\n  $result = [];\n  foreach ($numbers as $number) {\n   \
    \ if (!array_key_exists($number, $hash)) {\n      $hash[$number] = 1;\n      array_push($result,\
    \ $number);\n    } else {\n      $hash[$number]++;\n    }\n  }\n  return $result;\n\
    }\n</code>\nThe second one is much easier:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1ypuh9rd.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    $counts = array_count_values($numbers);\n    $result = array();\n   \
    \ foreach ($numbers as $key => $value) {\n        if ($counts[$value] > 1) {\n\
    \            $result[] = $key;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xkyygwv.php:22\n\
    Stack trace:\n#0 /tmp/tmp9xkyygwv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9xkyygwv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter(\n        $numbers,\n        function ($value, $key)\
    \ {\n            return ($value === array_search($value, $numbers));\n       \
    \ },\n        ARRAY_FILTER_USE_KEY\n    );\n}\n</code>\nIf you can use array_reduce,\
    \ you could also do this:\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg0j82htw.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates($numbers)\
    \ {\n  $distinct_numbers = array_unique(array_filter($numbers, function($value)\
    \ {\n    return count($numbers) == count(array_filter($numbers, function($val)\
    \ {\n      return $val == $value;\n    }));\n  }));\n  return $distinct_numbers;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpj1b5j92p.php on line 8\n\nWarning: array_filter() expects\
    \ parameter 1 to be array, null given in /tmp/tmpj1b5j92p.php on line 10\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpj1b5j92p.php on line 10\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpj1b5j92p.php on line 8\n\n\
    Warning: array_filter() expects parameter 1 to be array, null given in /tmp/tmpj1b5j92p.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpj1b5j92p.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpj1b5j92p.php\
    \ on line 8\n\nWarning: array_filter() expects parameter 1 to be array, null given\
    \ in /tmp/tmpj1b5j92p.php on line 10\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmpj1b5j92p.php on line\
    \ 10\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpj1b5j92p.php on line 8\n\nWarning: array_filter() expects\
    \ parameter 1 to be array, null given in /tmp/tmpj1b5j92p.php on line 10\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpj1b5j92p.php on line 10\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpj1b5j92p.php on line 8\n\n\
    Warning: array_filter() expects parameter 1 to be array, null given in /tmp/tmpj1b5j92p.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpj1b5j92p.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpj1b5j92p.php\
    \ on line 8\n\nWarning: array_filter() expects parameter 1 to be array, null given\
    \ in /tmp/tmpj1b5j92p.php on line 10\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmpj1b5j92p.php o"
  stderr: ''
  exit_code: 255
  status: Exception
