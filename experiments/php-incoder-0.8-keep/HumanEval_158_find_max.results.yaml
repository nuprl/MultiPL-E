name: HumanEval_158_find_max
language: php
results:
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Initialize result with empty string.\n \
    \   $result = \"\";\n    // Initialize a variable which holds the unique count\
    \ of the result.\n    $charCount = 0;\n    // Iterate through the list of words\
    \ and keep incrementing the count\n    // of unique characters as we go. For the\
    \ longest word, just increment\n    // the result length and set the result to\
    \ the current word.\n    foreach ($words as $word) {\n        $charCount += count($word);\n\
    \        if ($charCount > strlen($result)) {\n            $result = $word;\n \
    \       }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    This is another approach.\n<code>\n<?php\n\n$input = [\n'name' =>'James',\n'lastname'\
    \ => 'Gordon',\n'nickname' =>'Sandy'\n];\n\nfunction candidate(...$args) {\n \
    \   return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppm3zb9kg.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $chars = array_map(function ($word) {\n    return\
    \ count($word);\n  }, $words);\n  array_multisort($chars, $words);\n  return $words[0];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp4te5c5qw.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp4te5c5qw.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp4te5c5qw.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4te5c5qw.php:22\nStack trace:\n#0 /tmp/tmp4te5c5qw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4te5c5qw.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = -1;\n  $res = \"\";\n  for ($i = 0; $i\
    \ < count($words); $i++) {\n    $lenght = strlen($words[$i]);\n    if ($lenght\
    \ > $max) {\n      $max = $lenght;\n      $res = $words[$i];\n    }\n  }\n  return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwo79uwfm.php:28\n\
    Stack trace:\n#0 /tmp/tmpwo79uwfm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwo79uwfm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  return $words[array_search(max(array_count_values($words)),\
    \ $words)];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnl609vnz.php:18\n\
    Stack trace:\n#0 /tmp/tmpnl609vnz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnl609vnz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // write your logic here\n    $counter = 0;\n\
    \    foreach ($words as $word) {\n        if(isset($words[$counter])) $counter++;\n\
    \    }\n    if($counter == 0) return \"\";\n    else return $words[$counter-1];\n\
    }\n\n$words = array(\n    \"name\" => \"string\",\n    \"of\" => \"string\",\n\
    \    \"game\" => \"string\",\n    \"enam\" => \"string\"\n);\n\necho find_max($words)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3q62q1ds.php:33\n\
    Stack trace:\n#0 /tmp/tmp3q62q1ds.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3q62q1ds.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $unique_chars = array_count_values($words);\n\
    \    arsort($unique_chars);\n    return key($unique_chars);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzioax2tp.php:20\n\
    Stack trace:\n#0 /tmp/tmpzioax2tp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzioax2tp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    foreach ($words as $word) {\n        if (count(array_count_values(str_split($word)))\
    \ > strlen($word)) {\n            return $word;\n        }\n    }\n    return\
    \ \"\";\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3v7d8en.php:23\n\
    Stack trace:\n#0 /tmp/tmpt3v7d8en.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt3v7d8en.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $chars = [];\n    foreach ($words as $word)\
    \ {\n        $chars[$word] = array_count_values(str_split($word));\n    }\n  \
    \  return array_search(max($chars), $chars) ?: \"\";\n}\n</code>\nDemo here\n\
    <|/ a dscore=0 tags=php,sorting,arrays |>\n<| a dscore=0 tags=php,sorting,arrays\
    \ |>\nYou can do this with array_count_values() function like this:\n<code>\n\
    <?php\n$arr = array();\n$arr[] = array(\"name\" => \"string\", \"name\" => \"\
    string\", \"name\" => \"string\", \"name\" => \"string\");\n$arr[] = array(\"\
    name\" => \"string\", \"name\" => \"string\", \"name\" => \"string\", \"name\"\
    \ => \"string\");\n$arr[] = array(\"name\" => \"string\", \"name\" => \"string\"\
    , \"name\" => \"string\", \"name\" => \"string\");\n$arr[] = array(\"name\" =>\
    \ \"string\", \"name\" => \"string\", \"name\" => \"string\", \"name\" => \"string\"\
    );\n$arr[] = array(\"name\" => \"string\", \"name\" => \"string\", \"name\" =>\
    \ \"string\", \"name\" => \"string\");\n\n$res = array_count_values(array_column($arr,0));\n\
    $max_value = max($res);\n\nforeach($res as $key=>$value){\n    if($value == $max_value){\n\
    \        echo $key.\"<br>\";\n    }\n}\n</code>\n<|/ a |>\n<| a tags=php,sorting,arrays\
    \ |>\nYou can use array_count_values() to get the number of characters in each\
    \ array (I suppose the strings you want to compare are all strings with length\
    \ 1 or more), then use max(...) to get the maximum value:\n<code>\n<?php\n$words\
    \ = array();\n$words[] = array(\"name\" => \"string\", \"name\" => \"string\"\
    , \"name\" => \"string\", \"name\" => \"string\");\n$words[] = array(\"name\"\
    \ => \"string\", \"name\" => \"string\", \"name\" => \"string\", \"name\" => \"\
    string\");\n$words[] = array(\"name\" => \"string\", \"name\" => \"string\", \"\
    name\" => \"string\", \"name\" => \"string\");\n$words[] = array(\"name\" => \"\
    string\", \"name\" => \"string\", \"name\" => \"string\", \"name\" => \"string\"\
    );\n$words[] = array(\"name\" => \"string\", \"name\" => \"string\", \"name\"\
    \ => \"string\", \"name\" => \"string\");\n\n$maxChars = max(array_count_values(array_column($words,\
    \ \"name\")));\n\n$result = array_filter($words, function($word) \nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7e4e68q6.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $length = array_reduce($words, function ($carry,\
    \ $word) {\n    return max((int)strlen($word), $carry);\n  }, 0);\n  $result =\
    \ \"\";\n  for ($i = 0; $i < $length; $i++) {\n    $result .= array_reduce($words,\
    \ function ($carry, $word) {\n      return $carry . strlen($word);\n    }, $words[0]);\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrmyzcx9.php:26\n\
    Stack trace:\n#0 /tmp/tmpwrmyzcx9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwrmyzcx9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    foreach ($words as &$word) {\n        $word\
    \ = array_count_values(str_split($word));\n        arsort($word);\n    }\n   \
    \ array_shift($words);\n    foreach ($words as $word) {\n        $key = array_search(max($word),\
    \ $word);\n        if ($key !== false) {\n            return $words[$key];\n \
    \       }\n    }\n    return \"\";\n}\n</code>\n<|/ a |>\n<| a tags=php,algorithm\
    \ dscore=2 |>\nHere is a simple solution\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbrhzlmr2.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $words = array_map('trim', $words);\n    $words[]\
    \ = \"\";\n    $counts = array_count_values($words);\n\n    $max = $counts[0];\n\
    \    foreach ($counts as $word => $count) {\n        if ($count > $max) {\n  \
    \          $max = $count;\n        }\n    }\n    return $words[$max];\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbd_rkqz.php:28\n\
    Stack trace:\n#0 /tmp/tmpdbd_rkqz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdbd_rkqz.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your code in PHP7\n    $max = 1;\n\
    \    $found = \"\";\n    foreach ($words as $word) {\n        $found = false;\n\
    \        foreach (str_split($word) as $char) {\n            if (! isset($counts[$char]))\
    \ {\n                $counts[$char] = 0;\n            }\n            $counts[$char]++;\n\
    \            if ($counts[$char] > $max) {\n                $found = true;\n  \
    \              $max = $counts[$char];\n            }\n        }\n        if (!\
    \ $found) {\n            $max = count(str_split($word));\n        }\n    }\n \
    \   $found = false;\n    foreach ($words as $word) {\n        $found = false;\n\
    \        foreach (str_split($word) as $char) {\n            if ($counts[$char]\
    \ > $counts[$found]) {\n                $found = $char;\n            }\n     \
    \   }\n        if (! $found) {\n            $found = find_max($words);\n     \
    \   }\n    }\n    return $found;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your\
    \ answer! I tested it, but I do not understand the solution. I found this page\
    \ https://oeis.org/A002924 and it gives different results. I edited my post with\
    \ the code I tested.\n<|/ c |>\n<| c |>\nThanks for your edit. I got it! I think\
    \ your solution will be the best one and will be accepted.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nOeis.org says that, for large alphabets, it would be better to use the Knuth-Morris-Pratt\
    \ algorithm to find the word with maximum uniqueness. Here's a Python implementation\
    \ of Knuth-Morris-Pratt that I think works well:\n<code>\nimport operator\n\n\
    def kmp(strs, target, n):\n    \"\"\"\n    Find the first index i of strs[0..n-1]\
    \ where strs[i] contains target\n\n    Example input:\n        ['Hello', 'Hi',\
    \ 'There', 'World']\n        'Hello'\n        4\n\n    Example input:\n      \
    \  ['Hi', 'There', 'World']\n        'Hello'\n        0\n    \"\"\"\n    # base\
    \ case: all strings are exhausted\n    if n == 0:\n        return 0\n\n    # fill\
    \ a map of substring lengths to start indices\n    map = [-1] * len(strs)\n  \
    \  map[0] = 0\n    idx = 1\n    for s in strs:\n        while idx < n and strs[idx]\
    \ == s:\n            map[idx] = idx\n            idx += 1\n        if idx == n:\n\
    \            idx = len(strs)\n\n    return min(map(operator.indexOf, strs, target))\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6xxac7gy.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Return empty string when there are no elements\n\
    \    if (empty($words)) {\n        return \"\";\n    }\n\n    // Count unique\
    \ characters\n    $counts = array_count_values($words);\n\n    // Sort characters\
    \ by number of occurrence\n    arsort($counts);\n\n    // Return the element with\
    \ maximum number of characters\n    return reset($counts);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm61qcl9x.php:30\n\
    Stack trace:\n#0 /tmp/tmpm61qcl9x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpm61qcl9x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pj0byu8.php:17\n\
    Stack trace:\n#0 /tmp/tmp2pj0byu8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2pj0byu8.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $curr = \"\";\n  foreach ($words\
    \ as $word) {\n    $unique = array_count_values(str_split($word));\n    if ($unique[$max]\
    \ > $unique[$curr])\n      $max = $curr;\n    else\n      $curr = $word;\n  }\n\
    \  return $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp333q6dqr.php:26\n\
    Stack trace:\n#0 /tmp/tmp333q6dqr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp333q6dqr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $result = \"\";\n  $size = count($words);\n \
    \ for ($i = 0; $i < $size; $i++) {\n    // Initialize count to 0.\n    $count\
    \ = 0;\n    foreach ($words as $w) {\n      // If this word contains unique character,\
    \ increase count.\n      if (strpos($w, $words[$i]) !== false) {\n        $count++;\n\
    \      }\n    }\n    if ($count > count($result)) {\n      $result = $words[$i];\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpqu52_c1v.php on line 21\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpqu52_c1v.php\
    \ on line 21\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpqu52_c1v.php on line 21\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqu52_c1v.php:32\nStack trace:\n#0 /tmp/tmpqu52_c1v.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqu52_c1v.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = null;\n    $word = $words[0];\n    $count\
    \ = 1;\n    $len = strlen($word);\n    foreach($words as $w){\n        $len =\
    \ strlen($w);\n        $count = max((int)$count, ($len == $len ? 0 : ($len < $len\
    \ ? 1 : 2)));\n        if($count > 0){\n            if($max === null){\n     \
    \           $max = $w;\n            }else{\n                if($max < $w){\n \
    \                   $max = $w;\n                }\n            }\n        }\n\
    \    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppee5n7b0.php:35\n\
    Stack trace:\n#0 /tmp/tmppee5n7b0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppee5n7b0.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  sort($words);\n  $max_count = count($words) -\
    \ 1;\n  $max_count = 0;\n  foreach($words as $word) {\n    $word_count = str_word_count($word);\n\
    \    if($word_count > $max_count) {\n      $max_count = $word_count;\n      $max_word\
    \ = $word;\n    }\n  }\n  return $max_word;\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphl0qp0e2.php:27\n\
    Stack trace:\n#0 /tmp/tmphl0qp0e2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphl0qp0e2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $words = array_count_values($words);\n    arsort($words);\n\
    \    foreach($words as $word) {\n        if($word == 1)\n            return $word;\n\
    \    }\n    return \"\";\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp121v6qkz.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // your code goes here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbwo030v.php:17\n\
    Stack trace:\n#0 /tmp/tmpwbwo030v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwbwo030v.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_count = 0;\n  $max_word = \"\";\n  foreach\
    \ ($words as $word) {\n    $count = array_count_values(str_split($word));\n  \
    \  if ($count[$max_count] < $max_count) {\n      $max_count = $count[$max_count];\n\
    \      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvz3v4yg6.php:27\n\
    Stack trace:\n#0 /tmp/tmpvz3v4yg6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvz3v4yg6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  return $words[array_search(max(array_count_values($words)),\
    \ array_count_values($words))];\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbylqtwg.php:17\n\
    Stack trace:\n#0 /tmp/tmpcbylqtwg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcbylqtwg.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your code in PHP. \n    $max = 0;\n\
    \    foreach ($words as $word) {\n        $maxs = array_count_values(str_split($word));\n\
    \        $max = max($max, $maxs['a'] + $maxs['b'] + $maxs['c']);\n    }\n    return\
    \ $words[$max];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08bjskb1.php:24\n\
    Stack trace:\n#0 /tmp/tmp08bjskb1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp08bjskb1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $unique = array_count_values($words);\n   \
    \ $max = [];\n    $first = [];\n    $index = 0;\n\n    foreach($unique as $word\
    \ => $count) {\n        if ($count > $max[$index]) {\n            $max[$index]\
    \ = $count;\n            $first[$index] = $word;\n            $index++;\n    \
    \    }\n    }\n\n    if($max[0] == $max[1]) {\n        return $first[0];\n   \
    \ } else {\n        return '';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw5a4ihx.php:34\n\
    Stack trace:\n#0 /tmp/tmpiw5a4ihx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpiw5a4ihx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    return \"\";\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58v2faus.php:17\n\
    Stack trace:\n#0 /tmp/tmp58v2faus.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp58v2faus.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $str = implode('', $words);\n  if($str!='') {\n\
    \    $chars = count_chars($str, 1);\n    return $chars['a'] > $chars['z'] ? $words[0]\
    \ : $words[1];\n  }\n  return '';\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61opdnal.php:22\n\
    Stack trace:\n#0 /tmp/tmp61opdnal.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp61opdnal.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your solution here\n    $uniques =\
    \ array_count_values($words);\n    $count = max( $uniques );\n    \n    return\
    \ $count;\n}\n\n$words = $_POST['words'];\n\n$wordCount = count_chars($words);\n\
    \nforeach($words as $word){\n  $words[$word] = find_max($word);\n}\n\nprint_r($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpwrcw0cvs.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrcw0cvs.php:31\n\
    Stack trace:\n#0 /tmp/tmpwrcw0cvs.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwrcw0cvs.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = \"\";\n    $chars = array();\n  \
    \  foreach ($words as $word) {\n        $chars = array_count_values(str_split($word));\n\
    \        $char = array_keys($chars)[0];\n        $char = substr($char, 0, 1);\n\
    \        if($char && !isset($chars[$char])) {\n            $result = $word;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=algorithm,php |>\n\
    <| c |>\nI guess you didn't understand my question. I know this algorithm works\
    \ well, however I need a function which does it without looping over the words\
    \ and just using some functions in PHP. I already know about `array_count_values`\
    \ and `array_keys`, however I cannot figure out a way to do it.\n<|/ c |>\n<|\
    \ c |>\nYou want to do the work without looping over the words. In that case,\
    \ the answer to your question is impossible. You need to loop over the words.\
    \ I hope that my answer helped you understanding the nature of the problem. If\
    \ you have any additional questions, please let me know.\n<|/ c |>\n<| c |>\n\
    Thanks so much for helping! I guess my question was a bit inaccurate, since I\
    \ stated in my question that I did not want to loop over the words. But it turns\
    \ out that your answer does indeed do what I wanted it to.\n<|/ c |>\n<| c |>\n\
    I guess you missed the point. You want to find the max word without looping over\
    \ the words. You want to write your own custom function (like `find_max`) to do\
    \ so. Your answer uses looping over the words, but there is no need for looping\
    \ over the words because you use your custom function `find_max` to do the work.\
    \ If you want to avoid looping over the words, please let me know what you need\
    \ and I'll be happy to help you.\n<|/ c |>\n<| c |>\nOh I see. Yeah I guess I\
    \ just wanted to avoid looping over it but that doesn't mean that I can't use\
    \ looping. I was just wondering if it was possible to do what I was asking without\
    \ using loops.\n<|/ c |>\n<| a |>\nThis code will work for you,\n<code>\n<?php\
    \ \n\n$word = \"AaaaBbbb\";\n$letters = array();\n$count = count(str_split($word));\n\
    \nfor($i=0; $i<$count; $i++) { \n    $letters[] = $letter = substr($word, $i,\
    \ 1); \n} \n$letters = array_count_values($letters); \n$max_letter = array_keys($letters)[0];\
    \ \necho \"Maximum Word \nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1d5irjro.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $words = array_count_values($words);\n  arsort($words);\n\
    \  return reset($words);\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h6bqurl.php:20\n\
    Stack trace:\n#0 /tmp/tmp_h6bqurl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_h6bqurl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code goes here\n    foreach($words\
    \ as $word){\n        $max = 1;\n        $res = '';\n        foreach($word as\
    \ $letter){\n            $count =  array_count_values(str_split($letter));\n \
    \           if(!isset($count[$letter])){\n                $count[$letter] = 1;\n\
    \            }else{\n                $count[$letter] += 1;\n            }\n  \
    \          if($count[$letter] > $max){\n                $max = $count[$letter];\n\
    \                $res = $letter;\n            }\n        }\n        if($res !=\
    \ $letter){\n            return $res;\n        }\n    }\n    return '';\n}\n\n\
    $array = array(\n    array('name', 'of', 'string'),\n    array('name', 'enam',\
    \ 'game'),\n    array('aaaaaaa', 'bb' ,'cc')\n);\n\nprint_r(find_max($array));\n\
    </code>\n<|/ a |>\n<| c |>\nBut it returns an empty string when the array is empty.\
    \ Try using `$array = array(\n    array('', 'of', 'string'),\n    array('', 'enam',\
    \ 'game'),\n    array('aaaaaaa', 'bb' ,'cc')\n);`\n<|/ c |>\n<| c |>\nThanks again!\
    \ It works better now.\n<|/ c |>\n<| c |>\nThis doesn't handle the case where\
    \ more than one word has the maximum number of characters. To handle the case\
    \ where multiple words also have the same number of characters, you can use a\
    \ custom sort function. [Example here](https://3v4l.org/VKF3e)\n<|/ c |>\n<| c\
    \ |>\n, thanks for your comment, i have updated the answer to fix the issue you\
    \ mentioned.\n<|/ c |>\n<| a dscore=1 |>\nThis problem can be solved with array_count_values\
    \ and array_multisort. array_count_values will count the characters in each word\
    \ in the given array. The sorting part is done with array_multisort. The main\
    \ idea is to get the count of each word in the array and sort them based on the\
    \ count.\n<code>\n<?php\n    $arr = array(\"name\",\"name\",\"name\");\n    array_multisort(array_count_values($arr),\
    \ $arr);\n    print_r($arr);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprfo650qk.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $result = \"\";\n  foreach ($words as $word)\
    \ {\n    $unique_char_num = array_count_values($word);\n    if ($unique_char_num[0]\
    \ > $unique_char_num[1]) {\n      $result = $word;\n    }\n  }\n  return $result;\n\
    }\n\n$names = ['aaaaaaa', 'aa', 'bb', 'bb', 'bb', 'cc', 'cc', 'dd', 'dd', 'ee',\
    \ 'ee', 'ee'];\n$names = find_max($names);\nvar_dump($names);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values() expects parameter 1 to be array, string\
    \ given in /tmp/tmp6ny54qpg.php on line 12\n\nWarning: array_count_values() expects\
    \ parameter 1 to be array, string given in /tmp/tmp6ny54qpg.php on line 12\n\n\
    Warning: array_count_values() expects parameter 1 to be array, string given in\
    \ /tmp/tmp6ny54qpg.php on line 12\n\nWarning: array_count_values() expects parameter\
    \ 1 to be array, string given in /tmp/tmp6ny54qpg.php on line 12\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, string given in /tmp/tmp6ny54qpg.php on line\
    \ 12\n\nWarning: array_count_values() expects parameter 1 to be array, string\
    \ given in /tmp/tmp6ny54qpg.php on line 12\n\nWarning: array_count_values() expects\
    \ parameter 1 to be array, string given in /tmp/tmp6ny54qpg.php on line 12\n\n\
    Warning: array_count_values() expects parameter 1 to be array, string given in\
    \ /tmp/tmp6ny54qpg.php on line 12\n\nWarning: array_count_values() expects parameter\
    \ 1 to be array, string given in /tmp/tmp6ny54qpg.php on line 12\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, string given in /tmp/tmp6ny54qpg.php on line\
    \ 12\n\nWarning: array_count_values() expects parameter 1 to be array, string\
    \ given in /tmp/tmp6ny54qpg.php on line 12\n\nWarning: array_count_values() expects\
    \ parameter 1 to be array, string given in /tmp/tmp6ny54qpg.php on line 12\nstring(0)\
    \ \"\"\n\nWarning: array_count_values() expects parameter 1 to be array, string\
    \ given in /tmp/tmp6ny54qpg.php on line 12\n\nWarning: array_count_values() expects\
    \ parameter 1 to be array, string given in /tmp/tmp6ny54qpg.php on line 12\n\n\
    Warning: array_count_values() expects parameter 1 to be array, string given in\
    \ /tmp/tmp6ny54qpg.php on line 12\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6ny54qpg.php:28\nStack trace:\n#0 /tmp/tmp6ny54qpg.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6ny54qpg.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $words = array_count_values($words);\n  $max_val\
    \ = 0;\n  $max_word = \"\";\n  foreach ($words as $word => $count) {\n    if ($count\
    \ > $max_val) $max_val = $count;\n    if ($count == $max_val) $max_word = $word;\n\
    \  }\n  return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvg5g98dp.php:25\n\
    Stack trace:\n#0 /tmp/tmpvg5g98dp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvg5g98dp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $len = count($words);\n    if ($len === 0)\
    \ {\n        return \"\";\n    }\n    $sorted = array_count_values($words);\n\
    \    $max = 0;\n    $maxWord = \"\";\n    $maxCount = 0;\n    foreach ($sorted\
    \ as $k => $v) {\n        if ($v > $maxCount) {\n            $maxCount = $v;\n\
    \            $maxWord = $k;\n        }\n    }\n    return $words[$maxWord];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nFor your solution you need to sort the array before\
    \ applying the array_count_values() function\n<|/ c |>\n<| a tags=php,arrays,max\
    \ |>\nTry this out\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnb8nkf9c.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write code here\n    $highest=0;\n    $highest_char=null;\n\
    \    $highest_num=0;\n    $highest_string=null;\n    foreach($words as $word){\n\
    \        $char_count=count($word);\n        if($highest_num<$char_count){\n  \
    \          $highest_num=$char_count;\n            $highest_char=$word[0];\n  \
    \          $highest_string=$word;\n        }\n        else{\n            if($highest_num==$char_count){\n\
    \                if(strcmp($highest_string,$word)>0){\n                    $highest_string=$word;\n\
    \                    $highest_char=$word[0];\n                }\n            }\n\
    \        }\n    }\n    return $highest_string;\n}\nprint_r(find_max($_POST['users']));\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpzofqxeqr.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpzofqxeqr.php on line 16\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpzofqxeqr.php\
    \ on line 16\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpzofqxeqr.php on line 16\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpzofqxeqr.php:39\nStack trace:\n#0 /tmp/tmpzofqxeqr.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzofqxeqr.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Solution here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t3nnk2m.php:17\n\
    Stack trace:\n#0 /tmp/tmp_t3nnk2m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_t3nnk2m.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_chars = 0;\n    $max_word = \"\";\n\n\
    \    foreach ($words as $word) {\n        $unique_chars = count($word);\n\n  \
    \      if ($unique_chars > $max_chars) {\n            $max_chars = $unique_chars;\n\
    \            $max_word = $word;\n        } else if ($unique_chars == $max_chars)\
    \ {\n            if (strlen($word) < strlen($max_word)) {\n                $max_word\
    \ = $word;\n            }\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp7rujfyya.php on line 14\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp7rujfyya.php\
    \ on line 14\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp7rujfyya.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7rujfyya.php:33\nStack trace:\n#0 /tmp/tmp7rujfyya.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7rujfyya.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $words = array_map('strtolower', $words);\n\
    \    $unique_char_count = array();\n    $unique_char = array();\n    foreach($words\
    \ as $word) {\n        $char_count = count($word);\n        for($i = 0; $i < $char_count;\
    \ $i++) {\n            $unique_char[$i] = $word[$i];\n            $unique_char_count[$i]\
    \ = $unique_char_count[$i] + $char_count;\n        }\n    }\n\n    return $unique_char_count\
    \ > array_keys($unique_char_count) ? $unique_char : '';\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmptubmkf78.php on line 14\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmptubmkf78.php\
    \ on line 14\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptubmkf78.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptubmkf78.php:28\nStack trace:\n#0 /tmp/tmptubmkf78.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptubmkf78.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Return the string with maximum number of\
    \ unique characters\n    // If multiple strings have maximum number of unique\
    \ characters,\n    // return the one which comes first in lexicographical order.\n\
    \    $max_count = 0;\n    $max_word = '';\n    $words = array_unique($words);\n\
    \    arsort($words);\n    foreach ($words as $word) {\n        $word_count = count($word);\n\
    \        if ($word_count > $max_count) {\n            $max_count = $word_count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp7ud_52qa.php on line 18\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp7ud_52qa.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp7ud_52qa.php on line 18\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp7ud_52qa.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp7ud_52qa.php on line 18\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp7ud_52qa.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ud_52qa.php:33\n\
    Stack trace:\n#0 /tmp/tmp7ud_52qa.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7ud_52qa.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n   $max = \"\";\n   $count = [];\n   foreach ($words\
    \ as $word) {\n      if (!isset($count[$word])) {\n         $count[$word] = 0;\n\
    \      }\n      $count[$word] += 1;\n      if ($count[$word] > 1) {\n        \
    \ $max = $word;\n         break;\n      }\n   }\n   return $max;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fesm4j6.php:29\n\
    Stack trace:\n#0 /tmp/tmp7fesm4j6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7fesm4j6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $words = array_unique(array_filter($words, 'is_string'));\n\
    \  if (count($words) === 0) {\n    return '';\n  }\n  return $words[count($words)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg163sptk.php:23\n\
    Stack trace:\n#0 /tmp/tmpg163sptk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpg163sptk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_string = \"\";\n  $max_chars = 0;\n  for\
    \ ($i = 0; $i < sizeof($words); $i++) {\n    $string = $words[$i];\n    $chars\
    \ = count($string);\n    if ($chars > $max_chars) {\n      $max_string = $string;\n\
    \      $max_chars = $chars;\n    }\n  }\n  return $max_string;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpphniy0bq.php on line 14\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpphniy0bq.php\
    \ on line 14\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpphniy0bq.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpphniy0bq.php:27\nStack trace:\n#0 /tmp/tmpphniy0bq.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpphniy0bq.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // write your code in PHP\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf19hl_b2.php:18\n\
    Stack trace:\n#0 /tmp/tmpf19hl_b2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpf19hl_b2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    \n    $max = \"\";\n    $maxCount = 0;\n  \
    \  $first = true;\n    \n    foreach ($words as $word) {\n        \n        //\
    \ Count characters\n        $charCount = 0;\n        \n        // Count word characters\
    \ - to check if word length is maximum\n        $wordCount = 0;\n        \n  \
    \      $chars = strlen($word);\n        \n        // Check for duplicates\n  \
    \      foreach ($words as $word2) {\n            \n            if ($word2 != $word)\
    \ {\n                $charsTemp = strlen($word2);\n                $charCount\
    \ += $charsTemp;\n            }\n        }\n        \n        if ($charCount >\
    \ $maxCount) {\n            $maxCount = $charCount;\n            $max = $word;\n\
    \        }\n        \n        // Check if this is the first character of the word\n\
    \        if ($charCount == 0) {\n            $first = true;\n        }\n     \
    \   \n        // Check if this is the last character of the word\n        if ($charCount\
    \ == $chars) {\n            $first = false;\n        }\n        \n        // If\
    \ this is the first character of the word\n        if ($first) {\n           \
    \ $firstChar = $word[0];\n        }\n        \n        // If this is the last\
    \ character of the word\n        if ($last) {\n            $lastChar = $word[$chars\
    \ - 1];\n        }\n        \n        $wordCount++;\n    }\n    \n    // If character\
    \ count is the same, compare the strings\n    if ($maxCount == $charCount) {\n\
    \        \n        // Find which string is lexicographically smaller\n       \
    \ if ($firstChar < $lastChar) {\n            return $first;\n        }\n     \
    \   \n        return $last;\n    }\n    \n    // If character count is bigger\n\
    \    return \"\";\n}\n\nprint_r(find_max($array));\n</code>\nOutput\n<code>\n\
    Array\n(\n    [0] => name\n    [1] => of\n    [2] => string\n)\n</code>\n<|/ a\
    \ |>\n<| c |>\nI like how you used a regex to do the actual counting rather than\
    \ the wordCount / strlen approach.\n<|/ c |>\n<| c |>\nI added a function that\
    \ returns the word with maximum number of unique characters\n<|/ c |>\n<| a dscore=2\
    \ |>\nIf anyone is looking for this type of solution using PHP. Here is the code\
    \ I came up with.\n<code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptvwnmhr8.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    \n    // Your code here\n    $max_key = 0;\n\
    \    $max = \"\";\n    foreach ($words as $key => $word) {\n        $unique_count\
    \ = 0;\n        foreach ($words as $key2 => $word2) {\n            if ($word ==\
    \ $word2) {\n                $unique_count++;\n            }\n        }\n    \
    \    if ($unique_count > $max_key) {\n            $max_key = $unique_count;\n\
    \            $max = $word;\n        }\n    }\n    return $max;\n}\n\n$testArray\
    \ = array(\"name\", \"of\", \"string\");\necho find_max($testArray), \"\\n\";\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "name\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprddxqlui.php:36\n\
    Stack trace:\n#0 /tmp/tmprddxqlui.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprddxqlui.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Your code here\n  $word_count = $words->reduce([],\
    \ function($carry, $word) {\n    $carry[$word] = array_count_values($word);\n\
    \    return $carry;\n  }, []);\n  return reset($word_count);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function reduce() on array\
    \ in /tmp/tmpkg1xq46v.php:11\nStack trace:\n#0 /tmp/tmpkg1xq46v.php(19): find_max(Array)\n\
    #1 /tmp/tmpkg1xq46v.php(23): candidate(Array)\n#2 /tmp/tmpkg1xq46v.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkg1xq46v.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_char = count($words);\n  foreach ($words\
    \ as $word) {\n    $char_count = array_count_values(str_split($word));\n    if\
    \ ($char_count > $max_char) {\n      $max_char = $char_count;\n    }\n  }\n  return\
    \ $words[array_search(max($max_char), $max_char)];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprj3j56ck.php:24\n\
    Stack trace:\n#0 /tmp/tmprj3j56ck.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprj3j56ck.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_char_length = 0;\n    foreach($words as\
    \ $word) {\n        $char_length = strlen($word);\n        $max_char_length =\
    \ max($char_length, $max_char_length);\n    }\n    $max_unique_chars = array_count_values($words);\n\
    \    return $max_unique_chars[$max_char_length] ? $max_unique_chars[$max_char_length]\
    \ : \"\";\n}\n</code>\n<|/ a dscore=1 tags=php |>\n<| a dscore=0 tags=php |>\n\
    This is my solution:\n<code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt8tp9zs5.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Initialize our max variable.\n  $max = $words[0];\n\
    \  // Initialize a new array to hold the number of characters.\n  $counter = array();\n\
    \  // Initialize a new array to hold the string with the maximum number of characters.\n\
    \  $maxString = \"\";\n  // Iterate over our list of words.\n  foreach ($words\
    \ as $word) {\n    // Initialize a new counter for this word.\n    $counter[$word]\
    \ = 0;\n    // Increment the counter for this word.\n    $counter[$word] += 1;\n\
    \    // Update the max if needed.\n    if ($counter[$word] > $max) {\n      $max\
    \ = $counter[$word];\n      $maxString = $word;\n    }\n  }\n  return $maxString;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yu2hguh.php:36\n\
    Stack trace:\n#0 /tmp/tmp7yu2hguh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7yu2hguh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique_chars = array_count_values($words);\n\
    \  arsort($unique_chars);\n  return reset($unique_chars);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5m13o4r.php:20\n\
    Stack trace:\n#0 /tmp/tmpl5m13o4r.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl5m13o4r.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Your code here\n  return \"\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcu8n_jpx.php:19\n\
    Stack trace:\n#0 /tmp/tmpcu8n_jpx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcu8n_jpx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $uniques = array_count_values($words);\n  $highest\
    \ = 0;\n  $maxes = [];\n  foreach ($uniques as $word => $count) {\n    if ($count\
    \ > $highest) {\n      $highest = $count;\n      $maxes = [$word];\n    } elseif\
    \ ($count == $highest) {\n      $maxes[] = $word;\n    }\n  }\n  if (!$maxes[0])\
    \ {\n    return \"\";\n  }\n  krsort($maxes);\n  return $maxes[0];\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph21zsqs9.php:33\n\
    Stack trace:\n#0 /tmp/tmph21zsqs9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmph21zsqs9.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your code here\n    $max = $words[0];\n\
    \    for ($i = 1; $i < count($words); $i++) {\n        if ($words[$i] == $max)\
    \ {\n            continue;\n        }\n        $unique_char = array_count_values(str_split($words[$i]));\n\
    \        if ($unique_char['z'] > $unique_char['a']) {\n            $max = $words[$i];\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkny1pu_z.php:29\n\
    Stack trace:\n#0 /tmp/tmpkny1pu_z.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkny1pu_z.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $chars = array_count_values($words);\n    arsort($chars);\n\
    \    return array_search(max($chars), $chars);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThank you very much. I tried but got an error, i will fix it.\n<|/ c\
    \ |>\n<| a tags=php |>\nIn your script you compare two values, $counts and $word,\
    \ but you never set these two values to the $result variable.\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nYou never assigned the result of your function to $result\
    \ variable in your first loop.\n<|/ a tags=php |>\n<| a tags=php dscore=0 |>\n\
    As others have said, you never assigned $result to anything.\nHowever, your algorithm\
    \ doesn't do what you think it does.  You're counting every individual word individually,\
    \ even if the word appears multiple times.  Since you aren't doing anything to\
    \ prevent that in your algorithm, you are effectively counting every word individually\
    \ twice.\nThis code counts every word individually once but uses a while loop\
    \ to output the word with the largest count.\n<code>\n$array1 = [\"name\", \"\
    of\", \"string\"];\n$array2 = [\"name\", \"enam\", \"game\"];\n$array3 = [\"aaaaaaa\"\
    , \"bb\", \"cc\"];\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmploadulyh.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $word_count = array_count_values($words);\n\
    \    $max_word = max($word_count, SORT_NUMERIC);\n    foreach ($word_count as\
    \ $key => $value) {\n        if ($value == $max_word) {\n            return $words[$key];\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This algorithm is correct and efficient, however it does rely on the alphabet\
    \ being ordered so you can use the algorithm with `sort($words)`. My solution\
    \ is more general, and has `O(n log n)` complexity.\n<|/ c |>\n<| c |>\nIf $words\
    \ is sorted then you can just use my solution, and if you don't sort $words then\
    \ your solution is fine.\n<|/ c |>\n<| c |>\nThe only reason your solution is\
    \ correct is because of the order of the characters in your alphabet, and that's\
    \ what `sort()` does with your example.\n<|/ c |>\n<| c |>\nI agree that it is\
    \ more general. My solution is fine when $words is sorted.\n<|/ c |>\n<| c |>\n\
    Yes, you're right it's true. Your solution is better.\n<|/ c |>\n<| a |>\nI wrote\
    \ a custom solution in PHP based on this answer. First, we need to count the frequency\
    \ of each word in the list and store them in an array.\n<code>\n$input = [\n \
    \   'name',\n    'of',\n    'string',\n    'of',\n    'name',\n    'string',\n\
    \    'enam',\n    'game',\n];\n\n$uniqueFrequency = [];\n\nforeach ($input as\
    \ $str) {\n    if (!isset($uniqueFrequency[$str])) {\n        $uniqueFrequency[$str]\
    \ = 1;\n    } else {\n        $uniqueFrequency[$str]++;\n    }\n}\n\nprint_r($uniqueFrequency);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [name] => 5\n    [of] => 4\n    [string]\
    \ => 4\n    [enam] => 1\n    [game] => 1\n)\n</code>\nThen we sort $uniqueFrequency\
    \ in descending order by value, and find the first item in the sorted array.\n\
    <code>\nuasort($uniqueFrequency, function($a, $b) {\n    return $b - $a;\n});\n\
    \n$firstWord = array_search($uniqueFrequency[0], $uniqueFrequency);\n\necho $firstWord;\n\
    </code>\nOutput:\n<code>\nname\n</code>\nSee working demo.\n<|/ a dscore=1 tags=algorithm,php\
    \ |>\n<| c |>\nThis answer does not rely on `sort()` which is O\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnc0bti4j.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $sorted = array_unique($words);\n    if (sizeof($sorted)\
    \ == 1) {\n        return $sorted[0];\n    }\n    $max = $sorted[0];\n    foreach\
    \ ($sorted as $i => $word) {\n        $current = strlen($word);\n        if ($max\
    \ > $current) {\n            $max = $current;\n        }\n    }\n    return $max\
    \ == 0 ? \"\" : $sorted[$max];\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv1km0qo.php:28\n\
    Stack trace:\n#0 /tmp/tmphv1km0qo.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphv1km0qo.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // your code here\n  return null;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnynvwiw3.php:18\n\
    Stack trace:\n#0 /tmp/tmpnynvwiw3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnynvwiw3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique_characters = array_count_values($words);\n\
    \  arsort($unique_characters);\n  foreach ($unique_characters as $characters)\
    \ {\n    if ($characters == 1) {\n      return $characters > $unique_characters[0]\
    \ ? $characters : $unique_characters[0];\n    }\n  }\n  return \"\";\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemw2b82m.php:24\n\
    Stack trace:\n#0 /tmp/tmpemw2b82m.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpemw2b82m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $found = false;\n\n    foreach\
    \ ($words as $word) {\n        $count = count(str_split($word));\n\n        if\
    \ ($count > $max) {\n            $found = true;\n            $max = $count;\n\
    \        } else if ($count == $max) {\n            $found = false === $found;\n\
    \        }\n    }\n\n    return $found ? $words[0] : \"\";\n}\n</code>\n<|/ a\
    \ dscore=2 tags=arrays,string,count,php |>\n<| a dscore=2 |>\nPHP 7 has a new\
    \ array_count_values function which will do exactly what you're looking for:\n\
    <code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuqfvndwm.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $count = [];\n  foreach($words as $word){\n \
    \   $count[$word] = 0;\n  }\n  foreach($words as $word) {\n    foreach($word as\
    \ $c) {\n      $count[$c]++;\n    }\n  }\n  return $words[0];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpypx_k4vr.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpypx_k4vr.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpypx_k4vr.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpypx_k4vr.php:26\n\
    Stack trace:\n#0 /tmp/tmpypx_k4vr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpypx_k4vr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9us89ll.php:18\n\
    Stack trace:\n#0 /tmp/tmpr9us89ll.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr9us89ll.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $maxLen = 0;\n  foreach ($words as $word) {\n\
    \    $maxLen = max($maxLen, strlen($word));\n  }\n\n  $returnVal = null;\n  foreach\
    \ ($words as $word) {\n    $numUniqueChars = strlen($word);\n    if ($numUniqueChars\
    \ == $maxLen) {\n      $returnVal = $word;\n    }\n  }\n\n  return $returnVal;\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpye_8wokc.php:31\n\
    Stack trace:\n#0 /tmp/tmpye_8wokc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpye_8wokc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write code here\n  $result = [];\n  $count\
    \ = [];\n  foreach ($words as $word) {\n    $count[$word] = 0;\n  }\n  foreach\
    \ ($words as $word) {\n    if (!isset($count[$word])) {\n      $result[] = $word;\n\
    \      $count[$word] = 1;\n    } else {\n      $count[$word]++;\n    }\n  }\n\
    \  arsort($count);\n  $count = array_keys($count);\n  $result = array_slice($result,\
    \ 0, $count[0]);\n  return array_shift($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2m_kdlua.php:35\n\
    Stack trace:\n#0 /tmp/tmp2m_kdlua.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2m_kdlua.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $chars = array();\n    foreach($words as $word)\
    \ {\n        $chars = array_merge($chars, str_split($word));\n    }\n    $max\
    \ = 0;\n    $word = \"\";\n    foreach($chars as $index => $char) {\n        if\
    \ ($char > $max) {\n            $max = $char;\n            $word = $words[$index];\n\
    \        }\n    }\n    return $word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmvkpxjt.php:29\n\
    Stack trace:\n#0 /tmp/tmptmvkpxjt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptmvkpxjt.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = $words[0];\n    $max_count = 0;\n  \
    \  foreach($words as $word) {\n        $word_count = strlen($word);\n        if\
    \ ($word_count > $max_count) {\n            $max = $word;\n            $max_count\
    \ = $word_count;\n        }\n    }\n    return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkp2n30tf.php:27\n\
    Stack trace:\n#0 /tmp/tmpkp2n30tf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkp2n30tf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37mawtx9.php:17\n\
    Stack trace:\n#0 /tmp/tmp37mawtx9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp37mawtx9.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = \"\";\n    $counter = array();\n\
    \    foreach ($words as $word)\n        foreach ($word as $letter) {\n       \
    \     if (!isset($counter[$letter])) {\n                $counter[$letter] = 0;\n\
    \            }\n            $counter[$letter]++;\n        }\n    arsort($counter);\n\
    \    foreach ($counter as $letter => $count)\n        $result .= $letter;\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3frsof1l.php\
    \ on line 13\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3frsof1l.php\
    \ on line 13\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3frsof1l.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3frsof1l.php:30\n\
    Stack trace:\n#0 /tmp/tmp3frsof1l.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3frsof1l.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Your code here\n  $result = \"\";\n  foreach\
    \ ($words as $word) {\n    $count = 1;\n    foreach ($word as $char) {\n     \
    \ if ($char !== $word[0]) {\n        if ($char === $word[$count - 1]) {\n    \
    \      $count++;\n        } else {\n          break;\n        }\n      }\n   \
    \ }\n    if ($count > $words[0]) {\n      $result = $word;\n    }\n  }\n  return\
    \ $result;\n}\n\necho find_max([\"name\", \"of\", \"string\"]) . \"\\n\";\necho\
    \ find_max([\"name\", \"enam\", \"game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) . \"\\n\";\n</code>\n<|/ a |>\n<| c |>\nThanks for the reply,\
    \ but I am looking for more optimized solution. Your solution is great, but I\
    \ think there should be better approach with less time complexity.\n<|/ c |>\n\
    <| c |>\nYou're welcome. I've just tried to code it in a way that fits the requirements.\n\
    <|/ c |>\n<| c |>\nYour code is great, Thank you so much\n<|/ c |>\n<| c |>\n\
    I updated my answer. Probably the solution you were looking for is called \"anagram\"\
    .\n<|/ c |>\n<| c |>\nThank you so much for the reply, you really saved my day.\
    \ Although this is not my actual solution but I tried to find something similar.\
    \ \nYou saved my day. Thanks\n<|/ c |>\n<| a tags=arrays,php |>\nYour code is\
    \ working good. Just want to suggest another way to do this job. \nHere is another\
    \ approach. \n<code>\n<?php\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo50jk88y.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_count = -99999;\n    $max_word = \"\"\
    ;\n\n    foreach ($words as $word) {\n        // Store the count of unique characters\
    \ in $count\n        $count = count_chars($word);\n\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n\n    return $max_word;\n}\n\n$words = array(\"name\", \"of\", \"\
    string\");\n$result = find_max($words);\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "name\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvokjni2e.php:34\n\
    Stack trace:\n#0 /tmp/tmpvokjni2e.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvokjni2e.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = \"\";\n    $length = count($words);\n\
    \    $max = $words[0];\n    for ($i = 1; $i < $length; $i++) {\n        if ($maxCount($words,\
    \ $i) == $max) {\n            $result = '';\n            $max = $words[$i];\n\
    \        } else {\n            $result[] = $max;\n            $max = $words[$i];\n\
    \        }\n    }\n    return $result;\n}\n$result = find_max([\"name\", \"of\"\
    , \"string\"]);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp7cdjhhjk.php:14\n\
    Stack trace:\n#0 /tmp/tmp7cdjhhjk.php(24): find_max(Array)\n#1 {main}\n  thrown\
    \ in /tmp/tmp7cdjhhjk.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $count = array_count_values($words);\n    $max_key\
    \ = array_search(max($count), $count);\n    return $max_key !== false ? $words[$max_key]\
    \ : false;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpog25qd6o.php:20\n\
    Stack trace:\n#0 /tmp/tmpog25qd6o.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpog25qd6o.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = \"\";\n    $max_count = -1;\n   \
    \ $max_index = -1;\n    foreach($words as $word) {\n        $count = count($word);\n\
    \        if($count > $max_count) {\n            $max_count = $count;\n       \
    \     $max_index = $word;\n        }\n    }\n    return $max_index;\n}\n</code>\n\
    <|/ a tags=string,php |>\n<| a |>\nHere's an iterative solution that is easy to\
    \ understand, easy to modify for future use-cases and easier to read than a recursive\
    \ one. It starts by finding the longest word and then iterates through the list\
    \ of words, building a list of unique characters for each word, and then checks\
    \ which word has more unique characters.\n<code>\n<?php\n\n$words = \"\n  one\
    \ two three\n  one one two\n  one three\n  two two three\n  two three\n  three\
    \ three\n  three three\n  three three\n  three three\n  three three\n  three three\n\
    \  three three\n  three three\n  three three\n  three three\n  three three\n \
    \ three three\n  three three\n  three three\n  three three\n  three three\n  three\
    \ three\n  three three\n  three three\n  three three\n  three three\n  three three\n\
    \  three three\n  three three\n  three three\n  three three\n  three three\n \
    \ three three\n  three three\n  three three\n  three three\n  three three\n  three\
    \ three\n  three three\n  three three\n  three three\n  three three\n  three three\n\
    \  three three\n  three three\n  three three\n  three three\n  three three\n \
    \ three three\n  three three\n  three three\n  three three\n  three three\n  three\
    \ three\n  three three\n  three three\n  three three\n  three three\n  three three\n\
    \  three three\n  three three\n  three three\n  three three\n  three three\n \
    \ three three\n  three three\n  three three\n  three three\n  three three\n  three\
    \ three\n  three three\n  three three\n  three three\n  three three\n  three three\n\
    \  three three\n  three three\n  three three\n  three three\n  three three\n \
    \ three three\n  three three\n  three three\n  three three\n  three three\n  three\
    \ three\n  three three\n  three three\n  three three\n  three three\n  three three\n\
    \  three three\n  three three\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5jlj_j4a.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    \n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmj7050qo.php:17\n\
    Stack trace:\n#0 /tmp/tmpmj7050qo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmj7050qo.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm18eqfqi.php:17\n\
    Stack trace:\n#0 /tmp/tmpm18eqfqi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpm18eqfqi.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_val = 0;\n    $max_word = \"\";\n    foreach\
    \ ($words as $word) {\n        $char_count = 0;\n        foreach (str_split($word)\
    \ as $char) {\n            $char_count += strlen($char);\n        }\n        if\
    \ ($char_count > $max_val) {\n            $max_val = $char_count;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjsqwayy.php:30\n\
    Stack trace:\n#0 /tmp/tmpgjsqwayy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgjsqwayy.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // write your solution here\n    $result =\
    \ [];\n    foreach ($words as $word) {\n        $unique = [];\n        foreach\
    \ ($word as $char) {\n            $unique[$char]++;\n        }\n        $max_key\
    \ = max($unique, array_keys($unique));\n        $result[] = $word[$max_key];\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpqz0orjnt.php\
    \ on line 14\n\nWarning: Illegal offset type in /tmp/tmpqz0orjnt.php on line 18\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmpqz0orjnt.php on\
    \ line 14\n\nWarning: Illegal offset type in /tmp/tmpqz0orjnt.php on line 18\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmpqz0orjnt.php on\
    \ line 14\n\nWarning: Illegal offset type in /tmp/tmpqz0orjnt.php on line 18\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqz0orjnt.php:27\nStack\
    \ trace:\n#0 /tmp/tmpqz0orjnt.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqz0orjnt.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $word_counts = array();\n    foreach ($words\
    \ as $word) {\n        $word_counts[$word] = count($word);\n    }\n    return\
    \ $word_counts;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp49mzbadd.php on line 12\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp49mzbadd.php\
    \ on line 12\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp49mzbadd.php on line 12\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp49mzbadd.php:22\nStack trace:\n#0 /tmp/tmp49mzbadd.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp49mzbadd.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $maxWord = \"\";\n  foreach ($words\
    \ as $word) {\n    $unique = count(array_unique(str_split($word)));\n    if ($unique\
    \ > $max) {\n      $max = $unique;\n      $maxWord = $word;\n    }\n  }\n  return\
    \ $maxWord;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5x_tvpw.php:28\n\
    Stack trace:\n#0 /tmp/tmph5x_tvpw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmph5x_tvpw.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 1;\n  $word = array();\n  foreach ($words\
    \ as $word) {\n    $count = 1;\n    foreach ($word as $character) {\n      if\
    \ (!array_key_exists($character, $word)) {\n        $word[$character] = $count;\n\
    \      } else {\n        $word[$character] += 1;\n      }\n      $count += 1;\n\
    \    }\n    if ($word[$max] < $count) {\n      $max = $count;\n      $word = $word;\n\
    \    }\n  }\n  return $word;\n}\n</code>\n<|/ a tags=php,algorithm,string,sorting\
    \ dscore=3 |>\n<| a dscore=2 tags=php,algorithm,string,sorting |>\nJust to offer\
    \ an alternative solution that I like as it avoids creating arrays just for counting\
    \ unique characters and as such is easier to read and understand. \n<code>\n/**\n\
    \ * string $input\n * null|string\n */\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp736ehari.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $res = \"\";\n    $max_cnt = 0;\n    foreach\
    \ ($words as $word) {\n        $cnt = count(str_split($word));\n        if ($cnt\
    \ > $max_cnt) {\n            $res = $word;\n            $max_cnt = $cnt;\n   \
    \     }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=sorting,arrays,php,algorithm\
    \ |>\n<| a tags=sorting,arrays,php,algorithm |>\nIn PHP 7 you can use spaceship\
    \ operator for this:\n<code>\n$array = [\"aaaaaaa\", \"bbbb\", \"ccc\"];\n$max\
    \ = null;\n$max_idx = -1;\n\narray_walk(\n    $array, \n    function ($el) use\
    \ (&$max, &$max_idx) {\n        $count = substr_count($el, ' ');\n        if ($count\
    \ > $max || $max === null) {\n            $max = $count;\n            $max_idx\
    \ = $idx;\n        }\n    }\n);\n\necho $max;\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI believe this is the best answer, thank you. Although this answer is\
    \ not quite what I want, your idea is very helpful and I'll be able to understand\
    \ and use this to solve my problem.\n<|/ c |>\n<| a tags=sorting,arrays,php,algorithm\
    \ dscore=1 |>\nI assume you want \"aaa\" and \"bbb\" to be treated as separate\
    \ strings (which it seems that they are). So, a simple solution is to loop through\
    \ your array and count each word separately, then sort by highest count:\n<code>\n\
    <?php\n$array = [\"name\", \"of\", \"string\"];\nforeach ($array as $w) {\n  \
    \  foreach (str_split($w) as $c) {\n        if ($c == 'a') {\n            $count['a']++;\n\
    \        }\n        if ($c == 'b') {\n            $count['b']++;\n        }\n\
    \    }\n}\nasort($count);\n$result = $count['z'];\n</code>\n<|/ a |>\n<| a tags=sorting,arrays,php,algorithm\
    \ |>\nI think it can be done in PHP 5.5.\n\n<code>\n$array = [\"name\", \"of\"\
    , \"string\"];\n$words = array();\n$max_word = \"\";\n$max_count = 0;\nforeach\
    \ ($array as $word) {\n    foreach (str_split($word) as $c) {\n        $count[$c]++;\n\
    \    }\n}\n$count = array_count_values($count);\nasort($count);\n$max_count =\
    \ max($count);\n$max_word = max($count);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ tags=sorting\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2ftmyuej.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code goes here\n    $count_arr=array_count_values($words);\n\
    \    return $count_arr[max($count_arr)]==0?\"\":max($count_arr);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\nThe question is interesting\
    \ - it can be done with array_column() and a custom loop:\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqp7sjnvb.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    \n    $words=array_map('strtolower',$words);\n\
    \n    $words=array_unique($words);\n\n    sort($words,SORT_STRING);\n\n    return\
    \ $words[0];\n\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,php |>\n\
    A simple solution using array_count_values and array_keys\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe08n15ug.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = $words[0];\n    for ($i = 1; $i <\
    \ count($words); $i++) {\n        $unique = str_split($words[$i]);\n        $unique_count\
    \ = array_count_values($unique);\n        if ($unique_count[$result] > 1) {\n\
    \            $result = $words[$i];\n        }\n    }\n    return $result;\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla1f9oci.php:25\n\
    Stack trace:\n#0 /tmp/tmpla1f9oci.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpla1f9oci.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  arsort($words);\n  $word_length = count($words[0]);\n\
    \  $max_count = 0;\n  $max_word = \"\";\n  foreach ($words as $word) {\n    $char_count\
    \ = array_count_values(str_split($word));\n    $count = $word_length - count($char_count);\n\
    \    if ($max_count < $count) {\n      $max_word = $word;\n      $max_count =\
    \ $count;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmposdcaixj.php on line 11\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmposdcaixj.php:30\nStack trace:\n#0 /tmp/tmposdcaixj.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmposdcaixj.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code goes here\n}\n</cell>\n<text>\n\
    Q10. Create a function that accepts an array of strings as input and returns a\
    \ string. Return the string with maximum number of characters. If multiple strings\
    \ has maximum number of characters, return the one which comes first in lexicographical\
    \ order.\nExample: [\"aaaa\", \"b\" ,\"ccc\"]\nReturn: \"bb\"\nExample: [\"aaaa\"\
    , \"bb\" ,\"ccc\"]\nReturn: \"aaaa\"\nExample: [\"aaaa\", \"bb\" ,\"ccc\"]\nReturn:\
    \ \"\"\n\n</text>\n<cell>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpev8_wdb0.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $counts = array_count_values($words);\n  $maxKey\
    \ = array_keys($counts, max($counts));\n  return $maxKey[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplu8r6hl4.php:20\n\
    Stack trace:\n#0 /tmp/tmplu8r6hl4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplu8r6hl4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your code here.\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8prgb9d2.php:17\n\
    Stack trace:\n#0 /tmp/tmp8prgb9d2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8prgb9d2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = null;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($max === null || ($max != null\
    \ && $count > count($max))) {\n            $max = $word;\n        } else if ($count\
    \ > count($max)) {\n            $max = $word;\n        }\n    }\n    return $max;\n\
    }\n$strings = [\n    \"name\",\n    \"of\",\n    \"string\"\n];\n$maxWord = find_max($strings);\n\
    </code>\n<|/ a |>\n<| a |>\nI wrote this short function in Perl and thought it\
    \ would be helpful for those who come across this question, because it works as\
    \ expected for me:\n<code>\nsub unique\n{\n    my = sort(@_);\n    my $result\
    \ = \"\";\n    my $count = -1;\n\n    foreach(@array)\n    {\n        if($count\
    \ == -1)\n        {\n            $count = 1;\n        }\n        elsif($count\
    \ > $array[0]+1)\n        {\n            $result = $array[0];\n            $count\
    \ = $array[0]+1;\n        }\n        else\n        {\n            $count = $count\
    \ + 1;\n        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=string,arrays,php\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strArray = array(\n    \"string\",\n\
    \    \"strin\",\n    \"strin\"\n);\n\n$arrLength = count($strArray);\n\n$strLength\
    \ = 0;\n$maxLen = 0;\n$currentLen = 0;\n$result = '';\n\nfor ($i = 0; $i < $arrLength;\
    \ $i++) {\n    $strLength = strlen($strArray[$i]);\n    $maxLen = max($maxLen,\
    \ $strLength);\n    $currentLen = $strLength;\n    for ($i = 0; $i < $arrLength;\
    \ $i++) {\n        if ($strArray[$i] === $result) {\n            $currentLen--;\n\
    \            $strLength = $strLength - 1;\n        }\n    }\n    if ($currentLen\
    \ === $maxLen) {\n        $result = $result;\n        break;\n    }\n}\n\necho\
    \ $result;\n</code>\n<|/ a tags=string,arrays,php |>\n<| a dscore=0 |>\nThis is\
    \ not perfect but this is how I did it. It isn't the best way, but its works.\n\
    <code>\n$words = array('word1', 'word2', 'word3');\n$max_count = count($words);\n\
    $new_words = array();\nfor($i = 0; $i < $max_count; $i++) {\n    $words = array('word1',\
    \ 'word2', 'word3', 'word4');\n    $new_\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg4z5q7rg.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your code here\n  $len = count($words);\n\
    \  if ($len == 0) {\n    return \"\";\n  }\n  $max = array();\n  for ($i=0; $i<$len;\
    \ $i++) {\n    $str = implode($words[$i], \" \");\n    $count = array_count_values(str_split($str));\n\
    \    $max[$i] = max(array_keys($count));\n  }\n  return $words[$max[$i]];\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmp34qe7hb_.php\
    \ on line 17\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp34qe7hb_.php\
    \ on line 17\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp34qe7hb_.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34qe7hb_.php:28\n\
    Stack trace:\n#0 /tmp/tmp34qe7hb_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp34qe7hb_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n    return $words[array_search(max(array_count_values($words)),\
    \ $words)];\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3k0aoto.php:18\n\
    Stack trace:\n#0 /tmp/tmpj3k0aoto.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj3k0aoto.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $result = [];\n  $counter = [];\n\n  foreach\
    \ ($words as $word) {\n    $length = count($word);\n    $result[count($result)]\
    \ = $word;\n    $counter[count($counter)] = $length;\n  }\n\n  arsort($counter);\n\
    \  $max = array_pop($counter);\n  foreach ($counter as $k => $v) {\n    if ($v\
    \ == $max) {\n      $result[$k] = '';\n    }\n  }\n  array_unshift($result, '');\n\
    \  return $result;\n}\n</code>\n<|/ a tags=string,php |>\n<| c |>\nGood answer,\
    \ but in some languages, like the Chinese language, there's more than one word\
    \ with the same number of unique characters.\n<|/ c |>\n<| c |>\nHi guys, I tested\
    \ your first example with PHP and it works as well, but I got an error in the\
    \ second one when I tested it with an online PHP editor. It seems that PHP has\
    \ some trouble with the `array_reverse` function in the second example. Is it\
    \ a PHP problem or am I wrong?\n<|/ c |>\n<| c |>\nHi, sorry, I didn't test it\
    \ on an online PHP editor, I just tested it on `W3Schools`. I just replaced the\
    \ `array_reverse` function with a `while` loop and it works perfectly. Thank you\
    \ very much!\n<|/ c |>\n<| a |>\n<code>\n$arr = ['aaaa aaa aaa', 'bbb bbb', 'cccc\
    \ cccc cccc cccc cccc ccc', 'ddd ddd dddd'];\necho find_max($arr);\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6rm7_7a4.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $count = array_count_values($words);\n  arsort($count);\n\
    \  foreach ($count as $word => $count) {\n    $count[$word] = array_search($word,\
    \ $words);\n  }\n  return array_search(max($count), array_keys($count));\n}\n\n\
    $maxChar = '';\nforeach ($inputs as $input) {\n  $words[] = preg_split('/[^a-z]+/i',$input,-1,\
    \ PREG_SPLIT_NO_EMPTY);\n  $maxChar = find_max($words);\n}\n\necho $maxChar;\n\
    </code>\nI hope it helps ;)\n<|/ a |>\n<| a tags=algorithm,php dscore=0 |>\nYou\
    \ could try this algorithm which does a greedy search for the max char value:\n\
    <code>\n$input = 'aaaccc';\n$maxChar = '';\nfor ($i = 0; $i < strlen($input);\
    \ $i++) {\n    $c = substr($input, $i, 1);\n    if ($maxChar < $c) {\n       \
    \ $maxChar = $c;\n    }\n}\necho $maxChar;\n</code>\nIt works by iterating through\
    \ all the letters of the input string. As soon as the char value changes, we output\
    \ it and reset it for the next char.\n<|/ a |>\n<| c |>\nI don't think that is\
    \ what was asked. He wants to find the max value among all the unique characters\
    \ of the words in the input array. Your algorithm would give 'c' as the max value,\
    \ but it should give 'g'.\n<|/ c |>\n<| c |>\nYes, I agree with you, and I misunderstood\
    \ what he meant. I'm updating the answer to reflect that.\n<|/ c |>\n<| c |>\n\
    : I'm sorry but your algorithm doesn't seem to be working properly (try it for\
    \ \"aaaaaaa\" and \"bbbbb\" on your code)\n<|/ c |>\n<| c |>\nI forgot to change\
    \ the code a bit - it should be working now.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nHere's a functional solution that will find all maximal values as you described:\n\
    <code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3lpvt052.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $characters = array_count_values($words);\n\
    \    $max_count = max($characters);\n    foreach ($characters as $key => $value)\
    \ {\n        if ($value == $max_count) {\n            return $key;\n        }\n\
    \    }\n    return \"\";\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaz9q85p1.php:25\n\
    Stack trace:\n#0 /tmp/tmpaz9q85p1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpaz9q85p1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n    $count_words = array_count_values($words);\n\
    \    krsort($count_words);\n    $max_key = array_search(max($count_words), $count_words);\n\
    \    return ($count_words[$max_key]);\n}\n\n$words = array(\n    'name',\n   \
    \ 'enam',\n    'game',\n    'aaaaaaa',\n    'bb',\n    'cc'\n);\n$result = find_max($words);\n\
    echo \"The word with maximum number of unique characters is: \";\necho $result;\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The word with maximum number of unique characters is: 1\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvk29gqyo.php:33\nStack trace:\n#0 /tmp/tmpvk29gqyo.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvk29gqyo.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = '';\n    $word = '';\n    $count = 0;\n\
    \    foreach($words as $word) {\n        $count = substr_count($word, $max);\n\
    \        if($count > 0) {\n            break;\n        }\n        $count++;\n\
    \    }\n    foreach($words as $word) {\n        $count = substr_count($word, $max);\n\
    \        if($count == 0) {\n            $max = $word;\n        }\n        if($count\
    \ > $count) {\n            $max = $word;\n        }\n    }\n    return $max;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php |>\n<code>\n<?php\n$arr = [\"apple\"\
    , \"banana\", \"banana\", \"banana\"];\n$counts = array_count_values($arr);\n\
    $maxCount = max($counts);\n\n$maxCountKeys = array_keys($counts, $maxCount);\n\
    $maxCountValues = array_values($counts, $maxCount);\n\necho \"MaxCount : \".$maxCount.\"\
    <br>\";\necho \"MaxCountKeys :\".$maxCountKeys.\"<br>\";\necho \"MaxCountValues\
    \ :\".$maxCountValues.\"<br>\";\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptjjaunfg.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n    sort($words);\n    $counts\
    \ = array();\n    foreach ($words as $word){\n        $counts[$word] = isset($counts[$word])\
    \ ? $counts[$word] + 1 : 0;\n    }\n    foreach ($words as $word){\n        $counts[$word]\
    \ = $counts[$word] > count($words) ? $counts[$word] : count($words);\n    }\n\
    \    arsort($counts);\n    return reset($counts);\n}\n\necho find_max([\"name\"\
    , \"of\", \"string\"]); //=> string\necho find_max([\"name\", \"enam\", \"game\"\
    ]); //=> enam\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]); //=> aaaaaaa\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "333\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxrtxqraj.php:31\n\
    Stack trace:\n#0 /tmp/tmpxrtxqraj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxrtxqraj.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    sort($words);\n    $words = array_count_values($words);\n\
    \    $most_frequent_key = array_search(max($words), $words);\n    return $words[$most_frequent_key];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8pg4hcq.php:20\n\
    Stack trace:\n#0 /tmp/tmpy8pg4hcq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy8pg4hcq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $str = array_count_values($words);\n  $key =\
    \ array_keys($str, max($str));\n  return $key[0];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9irjmusp.php:19\n\
    Stack trace:\n#0 /tmp/tmp9irjmusp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9irjmusp.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $str = implode(\"\", $words);\n    $str = strrev($str);\n\
    \    $str = strstr($str, \"a\");\n    $str = strstr($str, \"b\");\n    $str =\
    \ strstr($str, \"c\");\n    $str = strstr($str, \"d\");\n    $str = strstr($str,\
    \ \"e\");\n    $str = strstr($str, \"f\");\n    $str = strstr($str, \"g\");\n\
    \    $str = strstr($str, \"h\");\n    $str = strstr($str, \"i\");\n    $str =\
    \ strstr($str, \"j\");\n    $str = strstr($str, \"k\");\n    $str = strstr($str,\
    \ \"l\");\n    $str = strstr($str, \"m\");\n    $str = strstr($str, \"n\");\n\
    \    $str = strstr($str, \"o\");\n    $str = strstr($str, \"p\");\n    $str =\
    \ strstr($str, \"q\");\n    $str = strstr($str, \"r\");\n    $str = strstr($str,\
    \ \"s\");\n    $str = strstr($str, \"t\");\n    $str = strstr($str, \"u\");\n\
    \    $str = strstr($str, \"v\");\n    $str = strstr($str, \"w\");\n    $str =\
    \ strstr($str, \"x\");\n    $str = strstr($str, \"y\");\n    $str = strstr($str,\
    \ \"z\");\n    $str = strstr($str, \"A\");\n    $str = strstr($str, \"B\");\n\
    \    $str = strstr($str, \"C\");\n    $str = strstr($str, \"D\");\n    $str =\
    \ strstr($str, \"E\");\n    $str = strstr($str, \"F\");\n    $str = strstr($str,\
    \ \"G\");\n    $str = strstr($str, \"H\");\n    $str = strstr($str, \"I\");\n\
    \    $str = strstr($str, \"J\");\n    $str = strstr($str, \"K\");\n    $str =\
    \ strstr($str, \"L\");\n    $str = strstr($str, \"M\");\n    $str = strstr($str,\
    \ \"N\");\n    $str = strstr($str, \"O\");\n    $str = strstr($str, \"P\");\n\
    \    $str = strstr($str, \"Q\");\n    $str = strstr($str, \"R\");\n    $str =\
    \ strstr($str, \"S\");\n    $str = strstr($str, \"T\");\n    $str = strstr($str,\
    \ \"U\");\n    $str = strstr($str, \"V\");\n    $str = strstr($str, \"W\");\n\
    \    $str = strstr($str, \"X\");\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphldevlul.php on line 79\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your solution here\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy57psqcr.php:18\n\
    Stack trace:\n#0 /tmp/tmpy57psqcr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy57psqcr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    sort($words);\n    $max_chars = count($words[0]);\n\
    \    $max_word = \"\";\n    $unique_chars = 0;\n    foreach ($words as $word)\
    \ {\n        $unique = array_count_values($word);\n        $unique_chars = $unique_chars\
    \ + $unique[\"\"];\n        if ($unique_chars == $max_chars) {\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpfy2mqjq4.php on line 11\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, string given in /tmp/tmpfy2mqjq4.php on line\
    \ 15\n\nWarning: array_count_values() expects parameter 1 to be array, string\
    \ given in /tmp/tmpfy2mqjq4.php on line 15\n\nWarning: array_count_values() expects\
    \ parameter 1 to be array, string given in /tmp/tmpfy2mqjq4.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpfy2mqjq4.php:29\nStack\
    \ trace:\n#0 /tmp/tmpfy2mqjq4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfy2mqjq4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $counts = array();\n  foreach ($words as $word)\
    \ {\n    if (array_key_exists($word, $counts)) {\n      $counts[$word]++;\n  \
    \  } else {\n      $counts[$word] = 1;\n    }\n  }\n  if (count($counts) == 1)\
    \ {\n    return $counts[0];\n  }\n  $max = count($counts);\n  foreach ($counts\
    \ as $word => $count) {\n    if ($count > $max) {\n      $max = $count;\n    }\n\
    \  }\n  $maxCount = 0;\n  foreach ($counts as $word => $count) {\n    if ($count\
    \ > $maxCount) {\n      $maxCount = $count;\n    }\n  }\n  foreach ($counts as\
    \ $word => $count) {\n    if ($count == $maxCount) {\n      return $word;\n  \
    \  }\n  }\n  return \"\";\n}\necho find_max([\"name\", \"of\", \"string\"]); \n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "name\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnq4rc8t.php:46\n\
    Stack trace:\n#0 /tmp/tmpwnq4rc8t.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpwnq4rc8t.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your code here\n  $counts = array_count_values($words);\n\
    \  foreach ($counts as $key => $count) {\n      if ($count > 1) {\n          return\
    \ $key;\n      }\n  }\n  return '';\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprudub17t.php:25\n\
    Stack trace:\n#0 /tmp/tmprudub17t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprudub17t.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your code here\n  $unique_characters\
    \ = [];\n  foreach ($words as $word) {\n    $unique_characters[] = count(array_unique(str_split($word)));\n\
    \  }\n  $unique_characters = array_unique($unique_characters);\n  return $unique_characters[array_search(max($unique_characters),\
    \ $unique_characters)];\n}\n\n$words = ['name','of','string'];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__ti_s0i.php:26\n\
    Stack trace:\n#0 /tmp/tmp__ti_s0i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp__ti_s0i.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpae3zlcgk.php:17\n\
    Stack trace:\n#0 /tmp/tmpae3zlcgk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpae3zlcgk.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your solution here\n  $unique_char_arr\
    \ = [];\n  $unique_char_count = 0;\n  $new_word = \"\";\n  foreach ($words as\
    \ $word) {\n    foreach (str_split($word) as $char) {\n      if (isset($unique_char_arr[$char]))\
    \ {\n        $unique_char_count = $unique_char_arr[$char] + 1;\n      } else {\n\
    \        $unique_char_count = 1;\n      }\n      $unique_char_arr[$char] = $unique_char_count;\n\
    \    }\n  }\n  $word_arr = [];\n  foreach ($unique_char_arr as $char => $count)\
    \ {\n    $new_word .= $char;\n    if ($count == max($unique_char_arr)) {\n   \
    \   $word_arr[] = $new_word;\n    }\n  }\n  $count = count($word_arr);\n  if ($count\
    \ > 0) {\n    return $word_arr[array_search(strtolower($words[0]), $word_arr,\
    \ true)];\n  } else {\n    return \"\";\n  }\n}\nprint_r(find_max([\"name\", \"\
    of\", \"string\"]));\nprint_r(find_max([\"name\", \"enam\", \"game\"]));\nprint_r(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]));\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "nnamea\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33bl33p9.php:46\n\
    Stack trace:\n#0 /tmp/tmp33bl33p9.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp33bl33p9.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = \"\";\n    $temp = \"\";\n    $size\
    \ = count($words);\n    $maxCount = 0;\n    for ($i=0; $i < $size; $i++) {\n \
    \       $uniqueCharacters = str_split($words[$i]);\n        $uniqueCharacterCount\
    \ = array_count_values($uniqueCharacters);\n        $tempWord = $words[$i];\n\
    \        $maxCount = max($uniqueCharacterCount, $maxCount);\n        foreach ($uniqueCharacterCount\
    \ as $key => $value) {\n            if ($value > $maxCount) {\n              \
    \  $maxCount = $value;\n                $tempWord = $words[$i];\n            \
    \    $temp = $key;\n            }\n        }\n    }\n    return $tempWord;\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps333h32s.php:35\n\
    Stack trace:\n#0 /tmp/tmps333h32s.php(46): test()\n#1 {main}\n  thrown in /tmp/tmps333h32s.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code goes here\n    \n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dpnjx2n.php:18\n\
    Stack trace:\n#0 /tmp/tmp_dpnjx2n.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_dpnjx2n.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique_char = array();\n  foreach ($words as\
    \ $word) {\n    $unique_char = array_merge($unique_char,array_count_values(str_split($word)));\n\
    \  }\n  $max_count = 1;\n  foreach ($unique_char as $key => $val) {\n    if ($val\
    \ > $max_count) {\n      $max_count = $val;\n      $max_char = $key;\n    }\n\
    \  }\n  if (empty($words) || count($unique_char[$max_char]) > count($unique_char[0]))\
    \ {\n    return $words[0];\n  }\n  return $words[array_search($max_char, $unique_char)];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpci5lc5s4.php on line 21\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpci5lc5s4.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpci5lc5s4.php:31\n\
    Stack trace:\n#0 /tmp/tmpci5lc5s4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpci5lc5s4.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    return $words[array_search(max(array_count_values($words),\
    \ SORT_NUMERIC), $words)];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sf60qgm.php:18\n\
    Stack trace:\n#0 /tmp/tmp8sf60qgm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8sf60qgm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $uniqueChars = array_count_values($words);\n\
    \    $uniqueChars = array_filter($uniqueChars);\n    $maxValue = null;\n    $maxChar\
    \ = null;\n    foreach ($uniqueChars as $key => $val) {\n        if($val > $maxValue){\n\
    \            $maxValue = $val;\n            $maxChar = $key;\n        }\n    }\n\
    \    return $maxChar;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6thojy6h.php:28\n\
    Stack trace:\n#0 /tmp/tmp6thojy6h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6thojy6h.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your code here.\n  $result = [];\n \
    \ $max = 0;\n  foreach ($words as $word) {\n    $result[$word] = 0;\n  }\n  foreach\
    \ ($words as $word) {\n    foreach ($words as $word2) {\n      $result[$word]\
    \ += substr_count($word2, $word);\n    }\n    $max = $result[$word] > $max ? $result[$word]\
    \ : $max;\n  }\n  return isset($words[$max]) ? $words[$max] : $words[0];\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI think this will be the best way to solve this problem\
    \ - though it may take too long on large inputs.\n<|/ c |>\n<| c |>\nYour algorithm\
    \ is O(n^2) (I believe) which is quite expensive\n<|/ c |>\n<| c |>\nYes, I believe\
    \ that your algorithm is expensive and my algorithm is better than this one, since\
    \ it takes O(n) time.\n<|/ c |>\n<| c |>\nHow do you know the OP does not have\
    \ a dictionary? The OP didn't say they had anything to work with\n<|/ c |>\n<|\
    \ c |>\nThey are two different problems. If the OP wants to get the most \"common\"\
    \ word (based on how many times it appears in an array of words), my algorithm\
    \ will solve it for him. If the OP wants to get a list of all the words that have\
    \ a \"common\" character, my algorithm will solve it for her. My algorithm will\
    \ also solve the problem if they have no dictionary at all.\n<|/ c |>\n<| a dscore=4\
    \ tags=php,algorithm,string |>\n<code>\n$string = \"The quick brown fox jumps\
    \ over the lazy dog\";\n$array = explode(\" \", $string);\n$result = array_count_values($array);\n\
    arsort($result);\n$max = $result[key($result)];\necho \"Maximum word is: \".key($result).\"\
    \\n\";\necho \"Words that occur more than once are:\\n\";\nprint_r(key($result));\n\
    </code>\n<|/ a |>\n<| c |>\nNice solution, but I guess this does not take into\
    \ account repeated words, like \"red blue\" and \"blue red\", which have equal\
    \ number of occurrences.\n<|/ c |>\n<| c |>\nThis solution was perfect for me,\
    \ but I had to switch the arsort for arsortDesc (descending order) and then the\
    \ print_r was printing the keys of the resulting array as opposed to the values.\
    \  Thanks!\n<|/ c \nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuayf0g2y.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique = array_count_values($words);\n  return\
    \ $unique[max(array_keys($unique))];\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2468zox.php:18\n\
    Stack trace:\n#0 /tmp/tmpo2468zox.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpo2468zox.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique = array_count_values($words);\n  arsort($unique);\n\
    \n  foreach ($unique as $key => $val) {\n    if ($val == count($unique) - 1) {\n\
    \      return $key;\n    }\n  }\n  return \"\";\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky5tkb2k.php:25\n\
    Stack trace:\n#0 /tmp/tmpky5tkb2k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpky5tkb2k.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Your code goes here\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4lsy_m7.php:18\n\
    Stack trace:\n#0 /tmp/tmpp4lsy_m7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpp4lsy_m7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // write your function here\n  $counts = array_count_values($words);\n\
    \  $max = $words[0];\n  foreach ($words as $i => $word) {\n    if ($counts[$word]\
    \ > $counts[$max]) {\n      $max = $word;\n    }\n  }\n  return $max;\n}\n\n$array\
    \ = array(\n  'name' => 'Odin Hay\u0131r',\n  'age' => '24',\n  'country' => 'Turkey',\n\
    \  'language' => 'Turkish'\n);\n\n$string = find_max($array);\necho $string;\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Odin Hay\u0131r\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_hjsfp3.php:35\n\
    Stack trace:\n#0 /tmp/tmpo_hjsfp3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo_hjsfp3.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    return end($words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_un0lo0.php:19\n\
    Stack trace:\n#0 /tmp/tmpy_un0lo0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy_un0lo0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    sort($words);\n    $result = \"\";\n    for($i\
    \ = 0; $i < count($words); $i++) {\n        $word = $words[$i];\n        $unique\
    \ = count($word);\n        $result = ($unique < $result) ? $word : $result;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp7v16_lri.php on line 14\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp7v16_lri.php\
    \ on line 14\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp7v16_lri.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7v16_lri.php:25\nStack trace:\n#0 /tmp/tmp7v16_lri.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7v16_lri.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    \n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hsgwijc.php:17\n\
    Stack trace:\n#0 /tmp/tmp4hsgwijc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4hsgwijc.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_key = null;\n  $max_count = 0;\n  $max_value\
    \ = null;\n  foreach ($words as $k => $v) {\n    $count = array_count_values($v);\n\
    \    foreach ($count as $key => $count) {\n      if ($count > $max_count) {\n\
    \        $max_count = $count;\n        $max_value = $k;\n      }\n    }\n  }\n\
    \  return $max_value;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values() expects parameter 1 to be array, string\
    \ given in /tmp/tmpiy3g2jvb.php on line 14\n\nWarning: Invalid argument supplied\
    \ for foreach() in /tmp/tmpiy3g2jvb.php on line 15\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, string given in /tmp/tmpiy3g2jvb.php on line\
    \ 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpiy3g2jvb.php\
    \ on line 15\n\nWarning: array_count_values() expects parameter 1 to be array,\
    \ string given in /tmp/tmpiy3g2jvb.php on line 14\n\nWarning: Invalid argument\
    \ supplied for foreach() in /tmp/tmpiy3g2jvb.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpiy3g2jvb.php:30\nStack trace:\n#0 /tmp/tmpiy3g2jvb.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpiy3g2jvb.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n    $max_chars = 1;\n  \
    \  $max_word = \"\";\n    foreach ($words as $word) {\n        $count = str_count_chars($word);\n\
    \        if ($count > $max_chars) {\n            $max_chars = $count;\n      \
    \      $max_word = $word;\n        } elseif ($count == $max_chars) {\n       \
    \     if ($word[0] < $max_word[0]) {\n                $max_chars = $count;\n \
    \               $max_word = $word;\n            }\n        }\n    }\n    return\
    \ $max_word;\n}\n\n$sentence = [\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\"];\n$result\
    \ = find_max($sentence);\necho \"<br>\" . $result;\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function str_count_chars()\
    \ in /tmp/tmpchysqrfl.php:14\nStack trace:\n#0 /tmp/tmpchysqrfl.php(29): find_max(Array)\n\
    #1 {main}\n  thrown in /tmp/tmpchysqrfl.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $word = \"\";\n  foreach ($words\
    \ as $w) {\n    $len = $w->count();\n    if ($len > $max) {\n      $max = $len;\n\
    \      $word = $w;\n    }\n  }\n  return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function count() on string\
    \ in /tmp/tmpq6rghjjx.php:13\nStack trace:\n#0 /tmp/tmpq6rghjjx.php(23): find_max(Array)\n\
    #1 /tmp/tmpq6rghjjx.php(27): candidate(Array)\n#2 /tmp/tmpq6rghjjx.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq6rghjjx.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_len = 0;\n  $word = array_shift($words);\n\
    \  foreach ($words as $w) {\n    if (count(array_count_values(str_split($w)))\
    \ > $max_len) {\n      $word = $w;\n      $max_len  = count(array_count_values(str_split($w));\n\
    \    }\n  }\n  return $word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp544npnp6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  \n  $word_array = array();\n  $unique_string\
    \ = \"\";\n  \n  foreach ($words as $word){\n    \n    $word_array[] = $word;\n\
    \    \n    $unique_string = array_count_values($word_array);\n    \n    $highest_count\
    \ = max($unique_string);\n    \n    foreach ($unique_string as $key => $value)\
    \ {\n      if ($value == $highest_count){\n        \n        $unique_string =\
    \ array_slice($word_array, 0, $key);\n        break;\n      }\n    }\n  }\n  \n\
    \  $highest_count = max($unique_string);\n  \n  foreach ($unique_string as $key\
    \ => $value) {\n    if ($value == $highest_count){\n      \n      $unique_string\
    \ = array_slice($word_array, 0, $key);\n      break;\n    }\n  }\n  \n  sort($unique_string);\n\
    \  \n  return array_shift($unique_string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpa9van9cb.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9van9cb.php:51\n\
    Stack trace:\n#0 /tmp/tmpa9van9cb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpa9van9cb.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your solution here\n}\n\n$words = [\"\
    aaaaaaa\", \"bb\", \"cc\", \"bbbbbb\", \"aaaaa\", \"ccc\"];\necho find_max($words)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34l68pf5.php:20\n\
    Stack trace:\n#0 /tmp/tmp34l68pf5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp34l68pf5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk5wp7cq.php:19\n\
    Stack trace:\n#0 /tmp/tmpbk5wp7cq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbk5wp7cq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    sort($words);\n    $counter = array_count_values($words);\n\
    \    arsort($counter);\n    $result = \"\";\n    foreach($counter as $key => $val)\
    \ {\n        if($val > 1)\n            $result = $key;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nI get the following error: `PHP Notice:\
    \  Array to string conversion in C:\\Users\\David\\Documents\\Web\\Php\\myTest2.php\
    \ on line 18\nPHP Warning:  count(): Parameter must be an array or an object that\
    \ implements Countable in C:\\Users\\David\\Documents\\Web\\Php\\myTest2.php on\
    \ line 18`\n<|/ c |>\n<| c |>\nI've updated my code with your example `find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"`\n<|/ c |>\n<| a dscore=0 |>\nThe answer\
    \ by is good, but there is another way to do it in PHP, which is the array_count_values\
    \ function. For example:\n<code>\n<?php\n$arr = [\"a\", \"a\", \"b\", \"c\", \"\
    d\", \"e\", \"e\"];\n$counts = array_count_values($arr);\n</code>\nThe $counts\
    \ array contains counts for each letter:\n<code>\n[\n  \"a\" => 2,\n  \"b\" =>\
    \ 1,\n  \"c\" => 1,\n  \"d\" => 1,\n  \"e\" => 2\n]\n</code>\nThe highest value\
    \ in the array is the number of unique items in the array.\nIf you want the highest\
    \ value in the array, just use:\n<code>\necho max($counts);\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI get the following error: `PHP Notice:  Array to string conversion\
    \ in C:\\Users\\David\\Documents\\Web\\Php\\myTest2.php on line 18\nPHP Warning:\
    \  max(): Parameter must be an array or an object that implements Countable in\
    \ C:\\Users\\David\\Documents\\Web\\Php\\myTest2.php on line 18`\n<|/ c |>\n<|\
    \ c |>\nI edited my answer with your example `echo max($counts);`\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\n$arr = [\"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"e\"\
    ];\n$count_array = array();\nforeach ($arr as $key => $value) {\n    $count_array[$value]++;\n\
    }\narsort($count_array);\necho array_keys($count_array);\n</code>\n<|/ a tags=php\
    \ dscore=0 |>\n<| c |>\nI get the following error: `PHP Notice:  \nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp438dy2l2.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = $words[0];\n    foreach ($words as $word)\
    \ {\n        $len = str_split($word);\n        $count = 0;\n        foreach ($len\
    \ as $char) {\n            $count += $char === $char ? 1 : 0;\n        }\n   \
    \     if ($count > $max) {\n            $max = $count;\n        }\n    }\n   \
    \ return $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5e2ejvg.php:28\n\
    Stack trace:\n#0 /tmp/tmpd5e2ejvg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd5e2ejvg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if (empty($words)) {\n        return \"\";\n\
    \    }\n    $max = $words[0];\n    foreach ($words as $word) {\n        $length\
    \ = count($word);\n        for ($i = 0; $i < $length; ++$i) {\n            $letter\
    \ = strtoupper($word[$i]);\n            $count = array_key_exists($letter, $max)\
    \ ? $max[$letter] + 1 : 1;\n            $max[$letter] = $count;\n        }\n \
    \   }\n    arsort($max);\n    return current(array_keys($max));\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmptyrfjgqr.php on line 15\n\nWarning: array_key_exists()\
    \ expects parameter 2 to be array, string given in /tmp/tmptyrfjgqr.php on line\
    \ 18\n\nWarning: Illegal string offset 'N' in /tmp/tmptyrfjgqr.php on line 19\n\
    \nWarning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmptyrfjgqr.php on line 15\n\nWarning: array_key_exists() expects parameter\
    \ 2 to be array, string given in /tmp/tmptyrfjgqr.php on line 18\n\nWarning: Illegal\
    \ string offset 'O' in /tmp/tmptyrfjgqr.php on line 19\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmptyrfjgqr.php\
    \ on line 15\n\nWarning: array_key_exists() expects parameter 2 to be array, string\
    \ given in /tmp/tmptyrfjgqr.php on line 18\n\nWarning: Illegal string offset 'S'\
    \ in /tmp/tmptyrfjgqr.php on line 19\n\nWarning: arsort() expects parameter 1\
    \ to be array, string given in /tmp/tmptyrfjgqr.php on line 22\n\nWarning: array_keys()\
    \ expects parameter 1 to be array, string given in /tmp/tmptyrfjgqr.php on line\
    \ 23\n\nWarning: current() expects parameter 1 to be array, null given in /tmp/tmptyrfjgqr.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptyrfjgqr.php:30\n\
    Stack trace:\n#0 /tmp/tmptyrfjgqr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptyrfjgqr.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  sort($words);\n  $counts = array_count_values($words);\n\
    \  return $counts[ max($counts) ] ?? \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nIf\
    \ you're trying to be very concise you can simply `return max($counts);` instead\
    \ of `return $counts[ max($counts) ] ?? \"\";`\n<|/ c |>\n<| a dscore=2 tags=arrays,php,sorting\
    \ |>\nYou can easily solve this problem using array_count_values()\n<code>\n<?php\n\
    \n$words = [\"word1\",\"word2\",\"word3\",\"word4\",\"word5\",\"word6\"];\n$count\
    \ = array_count_values($words);\narsort($count);\n$max = $count[key($count)];\n\
    return $max;\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv01_4dws.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $str = \"\";\n  foreach ($words as $w) {\n  \
    \  if (strlen($w) > strlen($str)) {\n      $str = $w;\n    }\n  }\n  return $str;\n\
    }\n$maxLen = 0;\n$max = \"\";\n$count = 0;\nforeach ($words as $w) {\n  $len =\
    \ 0;\n  $len = $strlen($w);\n  if ($len > $maxLen) {\n    $maxLen = $len;\n  \
    \  $max = $w;\n  }\n  $count++;\n}\nif ($count == 1) {\n  return $max;\n}\nreturn\
    \ \"\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp61ovnki8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $result = \"\";\n  $letters = [];\n\n  foreach\
    \ ($words as $word) {\n    $letters[] = $word[0];\n  }\n\n  // If no letters returned,\
    \ return empty string\n  if (count($letters) === 0) {\n    return \"\";\n  }\n\
    \n  // Sort letters in string\n  sort($letters);\n\n  // Iterate through letters\
    \ in string\n  foreach ($letters as $letter) {\n    // Count the number of times\
    \ a letter appears\n    $count = array_count_values($letters);\n\n    // If current\
    \ letter appears more than once, set result\n    if ($count[$letter] > 1) {\n\
    \      $result = $word;\n      break;\n    }\n  }\n\n  // Return result if more\
    \ than one letter appears\n  return $result ?? \"\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qpyiehh.php:46\n\
    Stack trace:\n#0 /tmp/tmp1qpyiehh.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1qpyiehh.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = [];\n    $max = 0;\n    $max = find_max($words,\
    \ 0, $max);\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpr5aq39ql.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n    $chars = array_count_values($words);\n\
    \    $max = $chars[array_keys($chars)[0]];\n    $maxKey = array_keys($chars, $max)[0];\n\
    \    foreach ($words as $key => $word) {\n        if ($chars[$key] == $max) {\n\
    \            $max = $chars[$maxKey];\n            $maxKey = $key;\n        }\n\
    \    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg88q8un7.php:28\n\
    Stack trace:\n#0 /tmp/tmpg88q8un7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpg88q8un7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique = [];\n  $count = [];\n  foreach ($words\
    \ as $word) {\n    $count = array_fill_keys($count, 0);\n    $unique = array_merge($unique,\
    \ str_split($word));\n    foreach ($unique as $k => $v) {\n      if (++$count[$v]\
    \ > count($unique) - 1) return \"\";\n    }\n  }\n  \n  return $words[0];\n}\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81mm73_j.php:28\n\
    Stack trace:\n#0 /tmp/tmp81mm73_j.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp81mm73_j.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_count = 0; $max_word = \"\";\n    foreach\
    \ ($words as $word) {\n        $word_count = strlen($word);\n        if ($word_count\
    \ > $max_count) {\n            $max_count = $word_count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nFor those who are wondering, `strlen` counts _non-printable_ characters\
    \ while `count_chars` counts _printable_ characters. `strlen` also includes other\
    \ characters like `\\r` and `\\n`.\n<|/ c |>\n<| a dscore=1 tags=php,algorithm\
    \ |>\n<code>\n<?php\n\n$string = 'test1';\n\n$result = '';\nforeach (str_split($string)\
    \ as $letter) {\n    $count = array_count_values(str_split($letter));\n    $max\
    \ = max($count);\n    if (isset($count[$max])) {\n        $result .= $max;\n \
    \   }\n}\n\necho $result;\n</code>\n<|/ a |>\n<| c |>\nThis only returns the first\
    \ letter.  Also, this will only return \"a\" when the string is \"te\".\n<|/ c\
    \ |>\n<| c |>\nI've edited my answer. Now it will return all letters with max\
    \ count :)\n<|/ c |>\n<| a dscore=1 tags=php,algorithm |>\nA variation on Alexey\
    \ Shukkin's answer, using array_count_values() to return the counts for all the\
    \ letters.\n<code>\n<?php\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr23tympu.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $characters = array_count_values($words);\n\
    \    $result = \"\";\n    asort($characters);\n    foreach ($characters as $key\
    \ => $value) {\n        if($value == 1) {\n            $result = $key;\n     \
    \       break;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5sxnmd1.php:26\n\
    Stack trace:\n#0 /tmp/tmpq5sxnmd1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpq5sxnmd1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  if (empty($words)) {\n    return \"\";\n  }\n\
    \  $max_length = 1;\n  $max_word = array_shift($words);\n  foreach ($words as\
    \ $word) {\n    $count = count(explode($word, $max_word));\n    if ($count > $max_length)\
    \ {\n      $max_length = $count;\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45hzxg2_.php:29\n\
    Stack trace:\n#0 /tmp/tmp45hzxg2_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp45hzxg2_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $count = array_count_values($words);\n    asort($count);\n\
    \    return reset($count);\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbiq_jrky.php:19\n\
    Stack trace:\n#0 /tmp/tmpbiq_jrky.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbiq_jrky.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_char = array();\n    foreach ($words as\
    \ $word) {\n        $count = array_count_values(str_split($word));\n        arsort($count);\n\
    \        $max_char[$word] = $count[count($count) - 1];\n    }\n    foreach ($max_char\
    \ as $word => $count) {\n        if ($count > 1) {\n            return $word;\n\
    \        }\n    }\n    return \"\";\n}\n\n$str = \"name\";\n$str1 = \"name of\"\
    ;\n$str2 = \"name enam\";\n$str3 = \"name enam game\";\n$str4 = \"name enam game\
    \ of\";\n$str5 = \"name enam game of name\";\n$str6 = \"name enam game of name\
    \ of\";\n$str7 = \"name enam game of name of game\";\n$str8 = \"name enam game\
    \ of name of game of\";\n$str9 = \"name enam game of name of game of enam\";\n\
    $str10 = \"name enam game of name of game of enam game\";\n$str11 = \"name enam\
    \ game of name of game of enam game of\";\n$str12 = \"name enam game of name of\
    \ game of enam game of name\";\n$str13 = \"name enam game of name of game of enam\
    \ game of name of\";\n$str14 = \"name enam game of name of game of enam game of\
    \ name of game\";\n$str15 = \"name enam game of name of game of enam game of name\
    \ of game of\";\n$str16 = \"name enam game of name of game of enam game of name\
    \ of game of enam\";\n$str17 = \"name enam game of name of game of enam game of\
    \ name of game of enam game\";\n$str18 = \"name enam game of name of game of enam\
    \ game of name of game of enam game of\";\n$str19 = \"name enam game of name of\
    \ game of enam game of name of game of enam game of name\";\n$str20 = \"name enam\
    \ game of name of game of enam game of name of game of enam game of name of\"\
    ;\n$str21 = \"name enam game of name of game of enam game of name of game of enam\
    \ game of name of game\";\n$str22 = \"name enam game of name of game of enam game\
    \ of name of game of enam game of name of game of\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4to8hoq5.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Your code goes here:\n  $max_word = \"\";\n\
    \  $max_count = 0;\n  foreach ($words as $word) {\n    $count = 0;\n    foreach\
    \ (str_split($word) as $char) {\n      if (array_key_exists($char, $word_counts))\
    \ {\n        $count += $word_counts[$char];\n      }\n    }\n    if ($count >\
    \ $max_count) {\n      $max_count = $count;\n      $max_word = $word;\n    }\n\
    \  }\n  return $max_word;\n}\n\n$strings = array(\"string\", \"name\", 1, \"string\"\
    , 1, \"string\", 1, \"game\");\necho find_max($strings);\n\n$strings = array(\"\
    aaaaaaa\", \"bb\" ,\"cc\");\necho find_max($strings);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nAh. Thanks. I didn't know array_key_exists existed. I'll give this\
    \ a try now!\n<|/ c |>\n<| c |>\nAh, you're right - I had a typo in my original\
    \ code. I've fixed the answer now (I didn't notice you had a typo in your original\
    \ question).\n<|/ c |>\n<| c |>\nI see I still have a typo. Sorry.\n<|/ c |>\n\
    <| c |>\nSorry about that. I fixed it up in the answer\n<|/ c |>\n<| c |>\nI've\
    \ noticed that if `$words` is an empty array, the function returns `Array` rather\
    \ than `\"\"`.\n<|/ c |>\n<| a tags=php,str-replace |>\nYou have to count each\
    \ letter, that way you can get the most repeated letter and get the result you\
    \ want.\n<code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkqfs2oia.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rpn6yd7.php:17\n\
    Stack trace:\n#0 /tmp/tmp6rpn6yd7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6rpn6yd7.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15soj1py.php:17\n\
    Stack trace:\n#0 /tmp/tmp15soj1py.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp15soj1py.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $words = array_count_values($words);\n    arsort($words);\n\
    \    $counts = array_keys($words);\n    return reset($counts);\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxk0pn42.php:21\n\
    Stack trace:\n#0 /tmp/tmpdxk0pn42.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdxk0pn42.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your code here\n  $array = array();\n\
    \  $max = 0;\n  $words = array_filter(str_split($words));\n  $wordCount = array_count_values($words);\n\
    \  foreach ($wordCount as $k=>$v) {\n    if($v>$max){\n      $max = $v;\n    \
    \  $array[$k] = $words[$k];\n    }\n  }\n  sort($array);\n  if(count($array)>0){\n\
    \    return $array[0];\n  }else{\n    return \"\";\n  }\n}\n\n$strings = array('name','of','string');\n\
    $maxWord = find_max($strings);\necho \"Max word with unique characters :{$maxWord}\"\
    ;\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_split() expects parameter 1 to be string, array given in\
    \ /tmp/tmpgmyiptt_.php on line 13\n\nWarning: array_filter() expects parameter\
    \ 1 to be array, null given in /tmp/tmpgmyiptt_.php on line 13\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, null given in /tmp/tmpgmyiptt_.php on line\
    \ 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpgmyiptt_.php\
    \ on line 15\nMax word with unique characters :\nWarning: str_split() expects\
    \ parameter 1 to be string, array given in /tmp/tmpgmyiptt_.php on line 13\n\n\
    Warning: array_filter() expects parameter 1 to be array, null given in /tmp/tmpgmyiptt_.php\
    \ on line 13\n\nWarning: array_count_values() expects parameter 1 to be array,\
    \ null given in /tmp/tmpgmyiptt_.php on line 14\n\nWarning: Invalid argument supplied\
    \ for foreach() in /tmp/tmpgmyiptt_.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgmyiptt_.php:37\nStack trace:\n#0 /tmp/tmpgmyiptt_.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgmyiptt_.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = '';\n    $unique = 0;\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) > $unique) {\n            $max = $word;\n\
    \            $unique = strlen($max);\n        } elseif (strlen($word) == $unique)\
    \ {\n            if (strlen($max) > strlen($word)) {\n                $max = $word;\n\
    \            }\n        }\n    }\n    if (strlen($max) > strlen($words[0])) {\n\
    \        return $max;\n    }\n    return $words[0];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zlnec4s.php:33\n\
    Stack trace:\n#0 /tmp/tmp3zlnec4s.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3zlnec4s.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    return max(array_count_values($words), function($w)\
    \ {\n            return strlen($w);\n        }\n    );\n}\n\n$input = file_get_contents('data.txt');\n\
    $words = explode(' ', $input);\n$word = find_max($words);\n$str = explode(' ',\
    \ $input);\n$str[$i] = $word;\n$str = implode(' ', $str);\necho $str;\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: file_get_contents(data.txt): failed to open stream: No such\
    \ file or directory in /tmp/tmpbuecby1b.php on line 16\n\nFatal error: Uncaught\
    \ Error: Object of class Closure could not be converted to string in /tmp/tmpbuecby1b.php:21\n\
    Stack trace:\n#0 /tmp/tmpbuecby1b.php(21): implode(' ', Array)\n#1 {main}\n  thrown\
    \ in /tmp/tmpbuecby1b.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n   $max_count = array();\n   $max_key = null;\n\
    \   foreach ($words as $word) {\n      $count = count($word);\n      if ($count>1)\
    \ {\n         $key = $word.implode($words);\n         $count = $count-count($key);\n\
    \      }\n      else {\n         $key = $word[0];\n      }\n      if ($count>0)\
    \ {\n         $count = $count/count($max_count);\n         if ($count>count($max_count))\
    \ {\n            $max_count = $count;\n            $max_key = $key;\n        \
    \ }\n      }\n   }\n   return $max_key;\n}\nfunction candidate(...$args) {\n \
    \   return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmphe239h_2.php on line 13\n\nWarning: Division by zero in\
    \ /tmp/tmphe239h_2.php on line 22\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmphe239h_2.php on line 13\n\n\
    Warning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmphe239h_2.php on line 22\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmphe239h_2.php on line\
    \ 23\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmphe239h_2.php on line 13\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmphe239h_2.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphe239h_2.php on line 23\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphe239h_2.php:36\nStack trace:\n#0 /tmp/tmphe239h_2.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphe239h_2.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your code here\n    $char_count =\
    \ 0;\n    foreach ($words as $word){\n        $char_count += count($word);\n \
    \   }\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word){\n    \
    \    $max = $char_count - count($word);\n        if ($max > 0){\n            break;\n\
    \        }else{\n            $word = $word;\n            $char_count -= count($word);\n\
    \        }\n    }\n    return $word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpwp2la06z.php on line 13\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpwp2la06z.php\
    \ on line 13\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpwp2la06z.php on line 13\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpwp2la06z.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp2la06z.php:33\n\
    Stack trace:\n#0 /tmp/tmpwp2la06z.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwp2la06z.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $highest = 0;\n  $max = '';\n  foreach ($words\
    \ as $w) {\n    if (strlen($w) > $highest) {\n      $highest = strlen($w);\n \
    \     $max = $w;\n    }\n  }\n  return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgwhqy_b.php:26\n\
    Stack trace:\n#0 /tmp/tmpkgwhqy_b.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkgwhqy_b.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $count = array_count_values($words);\n  arsort($count);\n\
    \  return key($count);\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqt8euv9l.php:20\n\
    Stack trace:\n#0 /tmp/tmpqt8euv9l.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqt8euv9l.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = null;\n  $maxLength = 0;\n  foreach ($words\
    \ as $word) {\n    $counts = array_count_values($word);\n    $maxLength = max($maxLength,\
    \ count($counts));\n    if ($maxLength == count($counts)) {\n      $max = $word;\n\
    \    }\n  }\n  return $max;\n}\n</code>\n<|/ a tags=sorting,php,algorithm |>\n\
    <| a tags=sorting,php,algorithm |>\nI think the problem can be solved in O(n)\
    \ by making use of hashmap in java.\nHere is the sample code:\n<code>\npublic\
    \ static void main(String[] args) {\n    String[] input = {\"Name\",\"Name\",\"\
    Name\",\"Name\",\"Name\",\"Name\",\"Name\",\"Name\",\"Name\"};\n\n    Map<String,\
    \ Integer> map = new HashMap<>();\n    \n    for(int i=0; i< input.length ; i++)\n\
    \    {\n        String s = input[i];\n        if(!map.containsKey(s))\n      \
    \  {\n            map.put(s, 0);\n        }\n        map.put(s, map.get(s)+1);\n\
    \    }\n    \n    String output = Collections.max(map.entrySet());\n    System.out.println(output);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=sorting,php,algorithm |>\n<code>\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpillu4nrs.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $str = \"\";\n    foreach ($words\
    \ as $word) {\n        $chars = count($word);\n        $str = substr($str, 0,\
    \ $chars);\n        $str = str_replace(\" \", \"\", $str);\n        $str = str_replace(\"\
    ,\", \"\", $str);\n        $str = str_replace(\".\", \"\", $str);\n        $str\
    \ = str_replace(\"'\", \"\", $str);\n        $str = str_replace(\"!\", \"\", $str);\n\
    \        $str = str_replace(\";\", \"\", $str);\n        $str = str_replace(\"\
    :\", \"\", $str);\n        $str = str_replace(\",\", \"\", $str);\n        $str\
    \ = str_replace(\"/\", \"\", $str);\n        $str = str_replace(\"?\", \"\", $str);\n\
    \        $str = str_replace(\"(\", \"\", $str);\n        $str = str_replace(\"\
    )\", \"\", $str);\n        $str = str_replace(\"&\", \"\", $str);\n        $str\
    \ = str_replace(\"[\", \"\", $str);\n        $str = str_replace(\"]\", \"\", $str);\n\
    \        $str = str_replace(\"{\", \"\", $str);\n        $str = str_replace(\"\
    }\", \"\", $str);\n        $str = str_replace(\"*\", \"\", $str);\n        $str\
    \ = str_replace(\"+\", \"\", $str);\n        $str = str_replace(\"-\", \"\", $str);\n\
    \        $str = str_replace(\"*\", \"\", $str);\n        $str = str_replace(\"\
    =\", \"1\", $str);\n        $str = str_replace(\",\", \"\", $str);\n        $str\
    \ = str_replace(\"?\", \"\", $str);\n        $str = str_replace(\"~\", \"\", $str);\n\
    \        $str = str_replace(\"%\", \"\", $str);\n        $str = str_replace(\"\
    ^\", \"\", $str);\n        $str = str_replace(\"\\\\\", \"\", $str);\n       \
    \ $str = str_replace(\"@\", \"\", $str);\n        $str = str_replace(\"`\", \"\
    \", $str);\n        $str = str_replace(\"'\", \"\", $str);\n        $str = str_replace(\"\
    ~\", \"\", $str);\n        $str = str_replace(\";\", \"\", $str);\n        $str\
    \ = str_replace(\",\", \"\", $str);\n        $str = str_replace(\"'\", \"\", $str);\n\
    \        $str = str_replace(\"(\", \"\", $str);\n        $str = str_replace(\"\
    )\", \"\", $str);\n        $str = str_replace(\"&\", \"\", $str);\n        $str\
    \ = str_replace(\"[\", \"\", $str);\n        $str = str_replace(\"]\", \"\", $str);\n\
    \        $str = str_replace(\"{\", \"\", $str);\n        $str = str_replace(\"\
    }\", \"\", $str);\n        $str = str_replace(\"*\", \"\", $str);\n        $str\
    \ = str_replace(\"+\", \"\"\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpofr4wumw.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $counter = array_count_values($words);\n  \
    \  arsort($counter);\n    return key($counter);\n}\n\n$words = array('name','name','name');\n\
    echo find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "name\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2kcouqsz.php:22\n\
    Stack trace:\n#0 /tmp/tmp2kcouqsz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2kcouqsz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n    $count = [];\n    $words\
    \ = array_count_values($words);\n    foreach($words as $key => $value)\n     \
    \   $count[$key] = $value;\n\n    arsort($count);\n    return array_keys($count)[1];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgwiy6t2.php:25\n\
    Stack trace:\n#0 /tmp/tmpwgwiy6t2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwgwiy6t2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if (!is_array($words)) {\n        $words =\
    \ preg_split('/[\\s,]+/', $words);\n    }\n    $count = array();\n    foreach($words\
    \ as $word) {\n        if (isset($count[$word])) {\n            $count[$word]++;\n\
    \        } else {\n            $count[$word] = 1;\n        }\n    }\n    krsort($count);\n\
    \    $max_word = reset($count);\n    return $max_word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9w67cku.php:30\n\
    Stack trace:\n#0 /tmp/tmpn9w67cku.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpn9w67cku.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $length = count($words);\n  $max = '';\n  for\
    \ ($i = 0; $i < $length; $i++) {\n    for ($j = 0; $j < $length; $j++) {\n   \
    \   if ($i != $j) {\n        $unique = 0;\n        $letter1 = $words[$i];\n  \
    \      $letter2 = $words[$j];\n        for ($k = 0; $k < strlen($letter1); $k++)\
    \ {\n          if ($letter1{$k} != $letter2{$k}) {\n            $unique += 1;\n\
    \          }\n        }\n        if ($unique > $max) {\n          $max = $unique;\n\
    \        }\n      }\n    }\n  }\n  if ($max == '') {\n    $max = $words[0];\n\
    \  }\n  return $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxythdl92.php:39\n\
    Stack trace:\n#0 /tmp/tmpxythdl92.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpxythdl92.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp393mrotc.php:17\n\
    Stack trace:\n#0 /tmp/tmp393mrotc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp393mrotc.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $highestLength = 0;\n    $highest = null;\n\
    \    foreach ($words as $word) {\n        if (strlen($word) > $highestLength)\
    \ {\n            $highestLength = $word.length;\n            $highest = $word;\n\
    \        }\n    }\n    return $highest;\n}\n</code>\n<|/ a |>\n<| c |>\nIt doesn't\
    \ handle \"aaaaa\" because it doesn't have more than one unique character.\n<|/\
    \ c |>\n<| a tags=php,algorithm,arrays |>\nHere is a solution that uses array_count_values()\
    \ to count the number of occurences of each unique character and then returns\
    \ the key with the highest count.\n<code>\nfunction candidate(...$args) {\n  \
    \  return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5fzr9ktc.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $found = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = count($word);\n        for ($i = 0; $i\
    \ < $count; $i++) {\n            $count = array_count_values($word);\n       \
    \     if ($count > $max) {\n                $max = $count;\n                $found\
    \ = $word;\n            }\n        }\n    }\n    return $found;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp1qobtfqj.php on line 13\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, string given in /tmp/tmp1qobtfqj.php on line\
    \ 15\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp1qobtfqj.php on line 13\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, string given in /tmp/tmp1qobtfqj.php on line\
    \ 15\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp1qobtfqj.php on line 13\n\nWarning: array_count_values()\
    \ expects parameter 1 to be array, string given in /tmp/tmp1qobtfqj.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qobtfqj.php:30\n\
    Stack trace:\n#0 /tmp/tmp1qobtfqj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1qobtfqj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  arsort($words);\n  return $words[0];\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_4lwvgs.php:19\n\
    Stack trace:\n#0 /tmp/tmp9_4lwvgs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9_4lwvgs.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = \"\";\n  foreach ($words as $w) {\n  \
    \  $c = count_chars($w);\n    if ($c > strlen($max)) {\n      $max = $w;\n   \
    \ }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputjdsg0k.php:26\n\
    Stack trace:\n#0 /tmp/tmputjdsg0k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmputjdsg0k.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $counter = array();\n  foreach ($words as $word)\
    \ {\n    foreach ($word as $c) {\n      if (isset($counter[$c])) {\n        $counter[$c]++;\n\
    \      }\n      else {\n        $counter[$c] = 1;\n      }\n    }\n  }\n  ksort($counter);\n\
    \  foreach ($counter as $k => $v) {\n    if ($v == 1) {\n      return $k;\n  \
    \  }\n  }\n  return \"\";\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you very\
    \ much. Your example is very clear and helpful. But my array contains more than\
    \ 100,000 items, so I need a more optimized algorithm for my program. I've tested\
    \ the most efficient solution by Pentium10 and it works well.\n<|/ c |>\n<| a\
    \ |>\nThis solution uses hashmap to find and return the key. \n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplwl7kd7v.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $words = array_unique($words);\n  if (count($words)\
    \ == 0) {\n    return \"\";\n  }\n  $maxCount = 0;\n  $maxValue = \"\";\n  foreach\
    \ ($words as $word) {\n    $count = 0;\n    foreach ($words as $w) {\n      if\
    \ (strcasecmp($w, $word) == 0) {\n        $count++;\n      }\n    }\n    if ($count\
    \ > $maxCount) {\n      $maxCount = $count;\n      $maxValue = $word;\n    }\n\
    \  }\n  return $maxValue;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8d7c7f7.php:35\n\
    Stack trace:\n#0 /tmp/tmpx8d7c7f7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpx8d7c7f7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $chars = array_count_values($words);\n    $max\
    \ = -1;\n    foreach ($chars as $char) {\n        $count = $char;\n        if\
    \ ($count > $max) {\n            $max = $count;\n        }\n    }\n    $index\
    \ = array_search($max, $chars);\n    return $words[$index];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwwobr8z.php:26\n\
    Stack trace:\n#0 /tmp/tmpqwwobr8z.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqwwobr8z.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique_chars = array_count_values($words);\n\
    \  arsort($unique_chars);\n  return key($unique_chars);\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx2f7zjv.php:19\n\
    Stack trace:\n#0 /tmp/tmppx2f7zjv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppx2f7zjv.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = $words[0];\n    foreach ($words as $word)\
    \ {\n        $unique_char_count = array_count_values(str_split($word));\n    \
    \    foreach ($unique_char_count as $character => $count) {\n            if ($count\
    \ > $max[$character]) {\n                $max = $words;\n                break;\n\
    \            }\n        }\n    }\n    return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Illegal string offset 'n' in /tmp/tmpbwhz246b.php on line 14\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbwhz246b.php:27\nStack\
    \ trace:\n#0 /tmp/tmpbwhz246b.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbwhz246b.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    foreach ($words as $key => $value) {\n    \
    \    $uniqueCharArray = array_count_values($words);\n        $maxCount = max($uniqueCharArray);\n\
    \        if ($maxCount == count($words)) {\n            return $key;\n       \
    \ }\n    }\n    return \"\";\n}\n\n$maxWord = find_max($words); // $maxWord ==\
    \ \"game\"\necho \"Max word is: $maxWord\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpc840v8wd.php\
    \ on line 10\nMax word is: \n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpc840v8wd.php:28\nStack trace:\n#0 /tmp/tmpc840v8wd.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc840v8wd.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $len = count($words);\n  $ret = \"\";\n  $max_count\
    \ = 0;\n  $is_first = true;\n  foreach ($words as $key => $word) {\n    $count\
    \ = count($word);\n    if ($count == 0) continue;\n    if ($count > $max_count)\
    \ {\n      $max_count = $count;\n      $ret = $word;\n    }\n    if ($count ==\
    \ $max_count) {\n      if ($is_first) {\n        $ret = $word;\n        $is_first\
    \ = false;\n      } else if ($key == 0) {\n        $ret = $word;\n      }\n  \
    \  }\n  }\n  return $ret;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmphjr5o_rv.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmphjr5o_rv.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphjr5o_rv.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphjr5o_rv.php:38\nStack trace:\n#0 /tmp/tmphjr5o_rv.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphjr5o_rv.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = \"\";\n  $counter = 0;\n  foreach ($words\
    \ as $word) {\n    if ($counter > count($words) -1) {\n      return $max;\n  \
    \  }\n    $words = explode(\" \", $word);\n    $counter = 1;\n    foreach ($words\
    \ as $word) {\n      $counter++;\n      if ($max < strlen($word)) {\n        $max\
    \ = strlen($word);\n        $maxword = $word;\n      }\n      if (strpos($word,\
    \ $maxword) > 0) {\n        $max = $maxword;\n      }\n    }\n  }\n  return $max;\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeu_bg3wu.php:36\n\
    Stack trace:\n#0 /tmp/tmpeu_bg3wu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpeu_bg3wu.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $word_count = [];\n    foreach ($words as $word)\
    \ {\n        $word_count[$word] = array_count_values(str_split($word));\n    }\n\
    \    $max_word = max($word_count, function($arr) {\n        return $arr['strlen'];\n\
    \    });\n    foreach ($word_count as $word => $count) {\n        if ($count['strlen']\
    \ == $max_word['strlen']) {\n            return $word;\n        }\n    }\n   \
    \ return '';\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nWow! So much\
    \ more concise than my answer :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $string = \"name enam game game name of\";\n\n$words = explode(' ', $string);\n\
    \n$counts = array();\nforeach ($words as $word) {\n    $counts[$word]++;\n}\n\n\
    arsort($counts);\n\n$maxCount = count($counts);\n\n$word = '';\nif ($maxCount\
    \ > 0) {\n    $word = array_keys($counts)[0];\n}\n\necho $word;\n</code>\n<|/\
    \ a tags=php,arrays,string |>\n<| a dscore=0 tags=php,arrays,string |>\nYou could\
    \ use array_count_values and rsort to get most frequent word, then array_shift\
    \ to get the first one:\n<code>\n$string = 'name enam game game name of';\n$words\
    \ = explode(' ', $string);\n$count = array_count_values($words);\nrsort($count);\n\
    \n$word = $count[0];\n</code>\n<|/ a |>\n<| c |>\nSorry i didn't understand?\n\
    <|/ c |>\n<| c |>\n: This answer is almost identical to the one you've accepted,\
    \ except for the use of [`array_count_values`](http://php.net/array_count_values)\
    \ instead of `array_count_values`\n<|/ c |>\n<| c |>\n: I wrote my answer first\
    \ then accepted it. I'm not a php guru and I don't know how it works :P\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n$str = \"name enam game game name of\";\n\n$words\
    \ = explode(\" \",$str);\n$count = array();\nforeach($words as $word){\n  $count[$word]++;\n\
    }\nksort($count);\n$max = $count[0];\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| a tags=php,arrays,string d\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprtdxr5sq.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_word = \"\";\n  $max_word_length = 0;\n\
    \  $current_word = \"\";\n  foreach($words as $word) {\n    if (strlen($word)\
    \ > $max_word_length)\n      $max_word_length = strlen($word);\n    $current_word\
    \ .= $word;\n  }\n  foreach($words as $word) {\n    if ($current_word != \"\"\
    ) {\n      $current_word = substr($current_word, 0, $max_word_length);\n     \
    \ $current_word .= \"$word\";\n    }\n  }\n  foreach ($words as $word) {\n   \
    \ if ($word == $max_word)\n      return $word;\n  }\n  return \"\";\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7gghtv1x.php:35\n\
    Stack trace:\n#0 /tmp/tmp7gghtv1x.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7gghtv1x.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $counter = array();\n  foreach ($words as $word)\
    \ {\n    if (isset($counter[$word])) {\n      $counter[$word]++;\n    } else {\n\
    \      $counter[$word] = 1;\n    }\n  }\n  arsort($counter);\n  foreach ($counter\
    \ as $word => $count) {\n    if ($count > 1) {\n      return $word;\n    }\n \
    \ }\n  return \"\";\n}\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\nI like\
    \ the approach but I think it doesn't work for the case where one word contains\
    \ two or more different words with same number of unique characters. e.g. 'aaa'\
    \ and 'aaaaaa'\n<|/ c |>\n<| c |>\nYou're right. There is an inconsistency in\
    \ algorithm. The algorithm assumes that each word has unique characters. If there\
    \ is an inconsistency between words, the algorithm will return inconsistent results.\
    \ I suggest you fix this algorithm.\n<|/ c |>\n<| c |>\nI agree with your comment.\
    \ The algorithm also assumes that each word has unique characters. But we can\
    \ fix it easily. We just need to make sure that we remove `'aaaaaa'` from `'aaa'`\
    \ before comparing `'aaa'` and `'aaaaaa'`. And then `'aaa'` will be removed from\
    \ the `'aaa'` and `'aaaaaaa'` will be removed from the `'aaaaaa'` before comparing.\
    \ I have updated my answer.\n<|/ c |>\n<| a dscore=0 tags=algorithm,php |>\nYou\
    \ probably want a recursive function to find the word with the maximum number\
    \ of unique characters. \n<code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxet8jv3q.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $chars = array_count_values($words);\n  $max\
    \ = $chars[\"\"];\n  $min = PHP_INT_MAX;\n  $word = \"\";\n  foreach ($chars as\
    \ $char => $count) {\n    if ($count > $max) {\n      $max = $count;\n      $word\
    \ = $char;\n    } else if ($count == $min) {\n      $word = $char;\n    } else\
    \ if ($count < $min) {\n      $word = \"\";\n    }\n  }\n  return $word;\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nentbfk.php:31\n\
    Stack trace:\n#0 /tmp/tmp1nentbfk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1nentbfk.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $unique_chars = array_count_values($words);\n\
    \    $best_word = array_search (max($unique_chars), $unique_chars);\n    return\
    \ $best_word ? $best_word : \"\";\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bydn9i3.php:19\n\
    Stack trace:\n#0 /tmp/tmp_bydn9i3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_bydn9i3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = \"\";\n  $maxchars = -10000000;\n  foreach\
    \ ($words as $word) {\n    $maxchars = max($maxchars, str_split($word));\n  }\n\
    \  foreach ($words as $word) {\n    if (str_split($word) == $maxchars) {\n   \
    \   $max = strtolower($word);\n      break;\n    }\n  }\n  if ($max == \"\") {\n\
    \    $max = \"\";\n    foreach ($words as $word) {\n      $maxchars = max($maxchars,\
    \ str_split($word));\n    }\n  }\n  return $max;\n}\necho \"Max of [\" . implode(\"\
    ,\", $words) . \"] is [\" . find_max($words) . \"]\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmpb7knu617.php\
    \ on line 29\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpb7knu617.php\
    \ on line 12\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpb7knu617.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpb7knu617.php\
    \ on line 23\nMax of [] is []\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpb7knu617.php:36\nStack trace:\n#0 /tmp/tmpb7knu617.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpb7knu617.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_unique = 0;\n  $max_word = array();\n  foreach\
    \ ($words as $w) {\n    $c = count_chars($w);\n    if ($c>$max_unique) {\n   \
    \   $max_unique = $c;\n      $max_word = $w;\n    }\n  }\n  return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcrk0u8v.php:27\n\
    Stack trace:\n#0 /tmp/tmpjcrk0u8v.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjcrk0u8v.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $chars = array_count_values($words);\n  return\
    \ reset($chars);\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop5h7vdf.php:18\n\
    Stack trace:\n#0 /tmp/tmpop5h7vdf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpop5h7vdf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // code here\n    return null;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rx4we7d.php:18\n\
    Stack trace:\n#0 /tmp/tmp5rx4we7d.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5rx4we7d.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Your code here\n\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp374vbvpm.php:18\n\
    Stack trace:\n#0 /tmp/tmp374vbvpm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp374vbvpm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = \"\";\n    $count = -1;\n    foreach\
    \ ($words as $word) {\n        foreach (str_split($word) as $char) {\n       \
    \     $count++;\n            if ($char != $max) {\n                $max = $char;\n\
    \            }\n        }\n    }\n    return $max;\n}\n</code>\nThe same can be\
    \ done in one line with the use of regular expression:\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpezh6j3d4.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $word_count = array_count_values($words);\n \
    \ arsort($word_count);\n  \n  $highest_count = array_keys($word_count)[0];\n \
    \ $highest_index = array_search($highest_count, $word_count);\n  \n  if (count($word_count)\
    \ == 1) {\n    return $words[0];\n  }\n  \n  $ret = $words[$highest_index];\n\
    \  unset($words[$highest_index]);\n  \n  foreach ($words as $word) {\n    $unique_char\
    \ = str_split($word);\n    $unique_count = array_count_values($unique_char);\n\
    \    arsort($unique_count);\n    \n    $lowest_count = array_keys($unique_count)[0];\n\
    \    $lowest_index = array_search($lowest_count, $unique_count);\n    \n    if\
    \ ($lowest_count == $highest_count) {\n      return $word;\n    }\n    $highest_count\
    \ = $lowest_count;\n    $highest_index = $lowest_index;\n    \n    $ret .= $word;\n\
    \  }\n  return $ret;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptvfieu2a.php:46\n\
    Stack trace:\n#0 /tmp/tmptvfieu2a.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptvfieu2a.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $highest = \"\";\n    $highest_length = 0;\n\
    \    foreach ($words as $word) {\n        $length = strlen($word);\n        if\
    \ ($length > $highest_length) {\n            $highest_length = $length;\n    \
    \        $highest = $word;\n        } elseif ($length == $highest_length) {\n\
    \            $highest = $highest.$word;\n        }\n    }\n    return $highest;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2l015vn.php:30\n\
    Stack trace:\n#0 /tmp/tmpc2l015vn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpc2l015vn.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  foreach ($words as $word) {\n    $word_count\
    \ = strlen($word);\n    $characters = strlen($word);\n    $unique = 0;\n    foreach\
    \ ($words as $sub_word) {\n      $sub_word_count = strlen($sub_word);\n      if\
    \ ($sub_word_count > $word_count) {\n        $word_count = $sub_word_count;\n\
    \        $character = $characters;\n      }\n      $unique++;\n    }\n    if ($unique\
    \ > $characters) {\n      return $word;\n    }\n  }\n  return \"\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lvf40o0.php:34\n\
    Stack trace:\n#0 /tmp/tmp3lvf40o0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3lvf40o0.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your PHP implementation here.\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4g66vqc.php:17\n\
    Stack trace:\n#0 /tmp/tmpi4g66vqc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpi4g66vqc.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    foreach($words as $word => $count) {\n    \
    \    sort($word);\n        $max_count = array_keys($word, 1)[0];\n        if($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp0_yakcxl.php\
    \ on line 11\n\nWarning: array_keys() expects parameter 1 to be array, int given\
    \ in /tmp/tmp0_yakcxl.php on line 12\n\nWarning: sort() expects parameter 1 to\
    \ be array, int given in /tmp/tmp0_yakcxl.php on line 11\n\nWarning: array_keys()\
    \ expects parameter 1 to be array, int given in /tmp/tmp0_yakcxl.php on line 12\n\
    \nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp0_yakcxl.php\
    \ on line 11\n\nWarning: array_keys() expects parameter 1 to be array, int given\
    \ in /tmp/tmp0_yakcxl.php on line 12\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp0_yakcxl.php:25\nStack trace:\n#0 /tmp/tmp0_yakcxl.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0_yakcxl.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your code here\n    $chars = array_count_values($words);\n\
    \    asort($chars);\n    $last = array_pop($chars);\n    if(empty($chars)){\n\
    \        return \"\";\n    }\n    foreach($chars as $k => $v){\n        if($k\
    \ !== 0 && $last < $v){\n            return $k;\n        }\n    }\n    return\
    \ \"\";\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6z3r877.php:29\n\
    Stack trace:\n#0 /tmp/tmpl6z3r877.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl6z3r877.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_count = -1; // initialize the max count\
    \ to -1\n    $max_word = \"\"; // initialize the word with \"\"\n    foreach ($words\
    \ as $word) {\n        $char_count = count_chars($word);\n        // check if\
    \ the current word has more unique characters\n        if ($char_count > $max_count)\
    \ {\n            $max_count = $char_count;\n            $max_word = $word;\n \
    \       } else if ($char_count == $max_count) {\n            if ($word < $max_word)\
    \ {\n                $max_word = $word;\n            }\n        }\n    }\n   \
    \ return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfjq993l.php:32\n\
    Stack trace:\n#0 /tmp/tmpcfjq993l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcfjq993l.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique_char_count = array();\n  foreach ($words\
    \ as $word) {\n    if (!array_key_exists($word, $unique_char_count)) {\n     \
    \ $unique_char_count[$word] = 0;\n    }\n    $unique_char_count[$word] += strlen($word);\n\
    \  }\n  arsort($unique_char_count);\n  foreach ($unique_char_count as $word =>\
    \ $count) {\n    if ($count == $unique_char_count[array_keys($unique_char_count)[0]])\
    \ {\n      return $word;\n    }\n  }\n  return \"\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp053z5huf.php:32\n\
    Stack trace:\n#0 /tmp/tmp053z5huf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp053z5huf.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique_chars = 0;\n  $max_chars = 1;\n\n  foreach\
    \ ($words as $word) {\n    if (count(array_count_values(str_split($word))) > $unique_chars)\
    \ {\n      $unique_chars = count(array_count_values(str_split($word)));\n    }\n\
    \    if ($unique_chars > $max_chars) {\n      $max_chars = $unique_chars;\n  \
    \  }\n  }\n\n  foreach ($words as $word) {\n    if (count(array_count_values(str_split($word)))\
    \ == $unique_chars) {\n      $word = array_shift($words);\n      array_unshift($words,\
    \ $word);\n    }\n  }\n\n  return $words[0];\n}\n\nprint_r(find_max([\"name\"\
    , \"of\", \"string\"]));\nprint_r(find_max([\"name\", \"enam\", \"game\"]));\n\
    print_r(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]));\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "namenameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0njhci98.php:40\n\
    Stack trace:\n#0 /tmp/tmp0njhci98.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp0njhci98.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = array_count_values($words);\n    arsort($max);\n\
    \    return key($max);\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8oqv2rx8.php:19\n\
    Stack trace:\n#0 /tmp/tmp8oqv2rx8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8oqv2rx8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $res = \"\";\n  foreach ($words\
    \ as $word) {\n    $uniq = count(str_split($word));\n    if ($uniq > $max) {\n\
    \      $max = $uniq;\n      $res = $word;\n    }\n  }\n  return $res;\n}\n\n$max\
    \ = 0;\n$res = \"\";\n$words = explode(\" \", $line);\nforeach ($words as $word)\
    \ {\n  $uniq = count(str_split($word));\n  if ($uniq > $max) {\n    $max = $uniq;\n\
    \    $res = $word;\n  }\n}\necho $res;\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9ggzs05.php:39\n\
    Stack trace:\n#0 /tmp/tmpm9ggzs05.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpm9ggzs05.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_chars = 0;\n    $max_word = \"\";\n  \
    \  foreach ($words as $word) {\n        $word_chars = count($word);\n        if\
    \ ($word_chars > $max_chars) {\n            $max_chars = $word_chars;\n      \
    \      $max_word = $word;\n        } else if ($word_chars == $max_chars) {\n \
    \           $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpqh7zasvc.php on line 13\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpqh7zasvc.php\
    \ on line 13\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpqh7zasvc.php on line 13\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpqh7zasvc.php\
    \ on line 13\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpqh7zasvc.php on line 13\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpqh7zasvc.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqh7zasvc.php:30\n\
    Stack trace:\n#0 /tmp/tmpqh7zasvc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqh7zasvc.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $chars = array_count_values($words);\n    $max\
    \ = null;\n    foreach ($chars as $char => $count) {\n        if ($count > $max)\
    \ {\n            $max = $count;\n        }\n    }\n    if ($max == 0) {\n    \
    \    // All characters are unique\n        return '';\n    }\n    arsort($chars);\n\
    \    foreach ($chars as $char => $count) {\n        if ($count == $max) {\n  \
    \          return $char;\n        }\n    }\n    return '';\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nI didn't test this solution but thanks for it. It helped me.\n\
    <|/ c |>\n<| a dscore=0 tags=php,sorting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_m6qjsxl.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $return = \"\";\n    $maxes = 0;\n    foreach\
    \ ($words as $word) {\n        $chars = 0;\n        foreach (str_split($word)\
    \ as $char) {\n            $chars += substr_count($char, \"a\");\n        }\n\
    \        if ($chars > $maxes) {\n            $maxes = $chars;\n            $return\
    \ = $word;\n        }\n    }\n    return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_i54ej23.php:30\n\
    Stack trace:\n#0 /tmp/tmp_i54ej23.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_i54ej23.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // write your code here\n    $wordcount = array();\n\
    \    $unique_chars = array();\n    foreach ($words as $word) {\n        if (!isset($wordcount[$word]))\
    \ {\n            $wordcount[$word] = 1;\n            $unique_chars[$word] = 1;\n\
    \        } else {\n            $wordcount[$word]++;\n        }\n    }\n    $max_index\
    \ = 0;\n    $max_count = 0;\n    foreach ($wordcount as $key => $value) {\n  \
    \      if ($wordcount[$key] > $max_count) {\n            $max_count = $wordcount[$key];\n\
    \            $max_index = $key;\n        }\n    }\n    return $words[$max_index];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgh51o68b.php:37\n\
    Stack trace:\n#0 /tmp/tmpgh51o68b.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpgh51o68b.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $words = array_count_values($words);\n  arsort($words);\n\
    \  $max = $words[0];\n  foreach ($words as $key => $value) {\n    if ($value ==\
    \ $max) {\n      $max = $key;\n    }\n  }\n  return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwkrvw0p.php:25\n\
    Stack trace:\n#0 /tmp/tmpdwkrvw0p.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdwkrvw0p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $count = array_count_values($words);\n    $max\
    \ = $count[array_keys($count)[0]];\n    foreach ($count as $w => $c) {\n     \
    \   if ($c > $max) {\n            $max = $c;\n        }\n    }\n    $first = [];\n\
    \    foreach ($count as $w => $c) {\n        if ($c === $max) {\n            $first[$w]\
    \ = $w;\n        }\n    }\n    return $first[array_search($max, $count)];\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b15viek.php:30\n\
    Stack trace:\n#0 /tmp/tmp4b15viek.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4b15viek.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $counter = array();\n  foreach ($words as $word)\
    \ {\n    $counter[$word] = strlen($word);\n  }\n\n  return $counter;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0r50i5k.php:23\n\
    Stack trace:\n#0 /tmp/tmpd0r50i5k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpd0r50i5k.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Your code here\n    $max_chars = 0;\n  \
    \  foreach($words as $word){\n        $chars = count(str_split($word));\n    \
    \    if($chars > $max_chars){\n            $max_chars = $chars;\n        }\n \
    \   }\n    foreach($words as $word){\n        $chars = count(str_split($word));\n\
    \        if($chars == $max_chars){\n            return $word;\n        }\n   \
    \ }\n    return \"\";\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptlbk7c80.php:32\n\
    Stack trace:\n#0 /tmp/tmptlbk7c80.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptlbk7c80.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = count($words);\n    for ($i = 0; $i\
    \ < $max; ++$i) {\n        $maxWord = $words[$i];\n        $count = 0;\n     \
    \   for ($j = $i+1; $j < $max; ++$j) {\n            if (strlen($words[$j]) > strlen($maxWord))\
    \ {\n                $maxWord = $words[$j];\n            }\n            $count\
    \ += substr_count($words[$j], $maxWord);\n        }\n        if ($count == $max)\
    \ {\n            return $maxWord;\n        }\n    }\n    return \"\";\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8q3pih8d.php:31\n\
    Stack trace:\n#0 /tmp/tmp8q3pih8d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8q3pih8d.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
