name: HumanEval_118_get_closest_vowel
language: php
prompt: "<?php\n// You are given a word. Your task is to find the closest vowel that\
  \ stands between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
  quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel($word)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Above\") !== \"\
  o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    \n    for($i=count($vowels)-1;\
    \ $i>=0; $i--) {\n        $vowel_pos = strpos($word, $vowels[$i]);\n        if($vowel_pos)\
    \ {\n            $vowel_pos = $vowel_pos - 1;\n            if($word[$vowel_pos]\
    \ === $vowels[$i]) {\n                return $vowels[$i];\n            }\n   \
    \     }\n    }\n    \n    return \"\";\n}\n", "    $vowels_right = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_left = array('A', 'E', 'I', 'O', 'U');\n \
    \   $vowels = array_merge($vowels_right, $vowels_left);\n    foreach($vowels as\
    \ $key => $val) {\n        if(in_array(strtolower($word[$key+1]), $vowels)) {\n\
    \            $vowel_cond = strtolower($word[$key+1]);\n        }\n    }\n    return\
    \ $vowel_cond;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nHere is one solution\
    \ using the regexp feature of php: \n<code>", "    $vowels = [\n        'u' =>\
    \ 1, 'y' => 1, 'e' => 1, 'o' => 1, 'i' => 1, 'a' => 1, 'u' => 1, 'i' => 1, 'y'\
    \ => 1, 'a' => 1,\n        'a' => 1, 'u' => 1, 'e' => 1, 'o' => 1, 'u' => 1, 'i'\
    \ => 1, 't' => 1, 'f' => 1, 'h' => 1, 'r' => 1,\n        'd' => 1, 'k' => 1, 'j'\
    \ => 1, 'p' => 1, 'g' => 1, 'u' => 1, 'v' => 1, 'y' => 1, 's' => 1, 'b' => 1,\n\
    \        'j' => 1, 'k' => 1, 'h' => 1, 'm' => 1, 'b' => 1, 'u' => 1, 'o' => 1,\
    \ 'x' => 1, 'p' => 1, 'w' => 1,\n        'f' => 1, 'c' => 1, 'k' => 1, 'm' =>\
    \ 1, 'p' => 1, 'x' => 1, 'y' => 1, 't' => 1, 'f' => 1, 'q' => 1,\n        'v'\
    \ => 1, 'l' => 1, 'd' => 1, 't' => 1, 'k' => 1, 'j' => 1, 'q' => 1, 'p' => 1,\
    \ 'l' => 1, 'e' => 1,\n        'c' => 1, 'q' => 1, 'p' => 1, 'u' => 1, 'e' =>\
    \ 1, 'r' => 1, 'w' => 1, 'g' => 1, 'f' => 1, 'b' => 1,\n        't' => 1, 'q'\
    \ => 1, 'g' => 1, 'p' => 1, 'i' => 1, 'o' => 1, 'r' => 1, 'h' => 1, 'p' => 1,\
    \ 'n' => 1,\n        'p' => 1, 'k' => 1, 'j' => 1, 'p' => 1, 'q' => 1, 't' =>\
    \ 1, 'c' => 1, 'k' => 1, 'j' => 1, 'p' => 1,\n        'q' => 1, 't' => 1, 'c'\
    \ => 1, 'k' => 1, 'j' => 1, 'p' => 1, 'q' => 1, 't' => 1, 'c' => 1,\n        'k'\
    \ => 1, 'j' => 1, 'p' => 1, 'q' => 1, 't' => 1, 'c' => 1, 'k' => 1, 'j' => 1,\
    \ 'p' => 1, 'q' => 1,\n        't' => 1, 'c' => 1, 'k' => 1, 'j' => 1, 'p' =>\
    \ 1, 'q' => 1, 't' => 1, 'c' => 1, 'k' => 1, 'j' => 1,\n        'p' => 1, 'q'\
    \ => 1, 't' => 1, 'c' => 1, 'k' => 1, 'j' => 1, 'p' => 1, 'q' => 1, 't' => 1,\
    \ 'c' => 1,\n        'k' => 1, 'j' => 1, 'p' => 1, 'q' => 1, 't' => 1, 'c' =>\
    \ 1, 'k' => 1, 'j' => 1, 'p' => 1, 'q' => 1,\n        't' => 1, 'c' => 1, 'k'\
    \ => 1, 'j' => 1, 'p' => 1, 'q' => 1, 't' => 1, 'c' => 1, 'k' => 1, 'j' => 1,\n\
    \        'p' => 1, 'q' => 1, 't' => 1, 'c' => 1, 'k' => 1, 'j' => 1, 'p' => 1,\
    \ 'q' => 1, 't' => 1, 'c' => 1,", "    $vowel = \"aeiouAEIOU\";\n    $vowel_count\
    \ = count($vowel);\n    $consonant = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    $consonant_count = count($consonant);\n    $vowel_ind = $vowel_count -\
    \ 1;\n    $consonant_ind = $consonant_count - 1;\n\n    // Initialize $last_consonant\
    \ with empty string\n    $last_consonant = \"\";\n\n    // Initialize $vowels_count\
    \ with 0\n    $vowels_count = 0;\n\n    // Initialize $next_consonant to $consonant[0]\n\
    \    $next_consonant = $consonant[0];\n\n    // Iterate through each char in the\
    \ word\n    for ($i = 0; $i < strlen($word); $i++) {\n\n        // If current\
    \ char is a vowel then set $next_consonant to $consonant[$vowel_ind]\n       \
    \ if ($word[$i] == $vowel[$vowel_ind]) {\n            $next_consonant = $consonant[$vowel_ind];\n\
    \            $vowels_count += 1;\n        }\n\n        // If current char is a\
    \ consonant then increment $vowel_count and check if its greater \n        //\
    \ than $vowel_count or equal than $vowel_count. If it is greater or equal then\
    \ \n        // reinitialize $next_consonant\n        else {\n            $vowels_count\
    \ += 1;\n            if ($vowels_count == $vowel_ind) {\n                $next_consonant\
    \ = $consonant[$vowel_ind];\n            }\n            else {\n             \
    \   $next_consonant = $consonant[0];\n            }\n        }\n\n        // If\
    \ next consonant is the same as the last consonant, then append the vowel \n \
    \       // at the end of $last_consonant\n        if ($next_consonant == $last_consonant)\
    \ {\n            $last_consonant .= $vowel[$vowel_ind];\n        }\n\n       \
    \ // If next consonant is different than last consonant, then reinitialize $last_consonant\n\
    \        else {\n            $last_consonant = $next_consonant;\n        }\n \
    \   }\n\n    return $last_consonant;\n}\n", "    $vowels = array(\"a\",\"e\",\"\
    i\",\"o\",\"u\");\n    $vowels_counter = 0;\n    $vowels_position = 0;\n    $word_length\
    \ = strlen($word);\n    $first_char_index = $word_length - 1;\n    $last_char_index\
    \ = 0;\n\n    $first_char_val = substr($word,$first_char_index,1);\n    $last_char_val\
    \ = substr($word,$last_char_index,1);\n\n    $first_char_is_vowel = in_array($first_char_val,\
    \ array_reverse($vowels));\n    $last_char_is_vowel = in_array($last_char_val,\
    \ array_reverse($vowels));\n\n    if ($first_char_is_vowel && $last_char_is_vowel)\
    \ {\n        return substr($word,$vowels_position,1);\n    }\n\n    while ($first_char_is_vowel\
    \ && $last_char_is_vowel) {\n        $vowels_position++;\n        $first_char_val\
    \ = substr($word,$first_char_index,1);\n        $last_char_val = substr($word,$last_char_index,1);\n\
    \n        $first_char_is_vowel = in_array($first_char_val, array_reverse($vowels));\n\
    \        $last_char_is_vowel = in_array($last_char_val, array_reverse($vowels));\n\
    \n        if ($first_char_is_vowel && $last_char_is_vowel) {\n            return\
    \ substr($word,$vowels_position,1);\n        }\n    }\n\n    return \"\";\n}\n\
    \nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"\
    U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"",
  "    $vowels = array('a','e','i','o','u','A','E','I','O','U');\n    // The vowels\
    \ we are looking for.\n    $vowel_arr = [\n        'a',\n        'e',\n      \
    \  'i',\n        'o',\n        'u',\n        'A',\n        'E',\n        'I',\n\
    \        'O',\n        'U'\n    ];\n\n    $vowel_count = 0;\n    $vowel_letters\
    \ = '';\n    foreach ($vowel_arr as $v){\n        if (in_array($v, $word)){\n\
    \            $vowel_letters .= $v;\n            $vowel_count ++;\n        }\n\
    \    }\n\n    // If the vowel count is more than 1 we didn't find the correct\
    \ vowel so we return empty string\n    if ($vowel_count > 1) return '';\n\n  \
    \  $i = 0;\n    $current_letter = $vowel_letters;\n    $next_letter = $vowel_letters;\n\
    \    $prev_letter = $vowel_letters;\n    while ($i < strlen($word)){\n       \
    \ if ($word[$i] == $current_letter){\n            $current_letter = $next_letter;\n\
    \            $next_letter = $vowel_letters;\n        }else{\n            $prev_letter\
    \ = $current_letter;\n            $current_letter = $vowel_letters;\n        }\n\
    \        $i ++;\n    }\n    return $prev_letter;\n}\n</code>\n<|/ a dscore=0 tags=string,php,algorithm\
    \ |>\n<| c |>\nI don't think this does what OP asks. OP asks for a *closest* vowel,\
    \ not the one at the start of the string. So the above code will return `y` when\
    \ the input is `yogurt`. But I think OP wants the one that comes *after* `y`.\n\
    <|/ c |>\n<| c |>\nGood catch! Updated answer to fit the OPs request.\n<|/ c |>\n\
    <| a dscore=0 |>\nHere's my solution:\n<code>", "    $vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    $vowelsCount = [];\n\n    foreach ($vowels as $vowel) {\n  \
    \      if ($vowelsCount[$vowel] == 0) {\n            $vowelsCount[$vowel] = 1;\n\
    \        } else {\n            $vowelsCount[$vowel]++;\n        }\n    }\n\n \
    \   foreach ($word[$word.length - 1] as $letter => $value) {\n        if (!in_array($letter,\
    \ $vowels)) {\n            return '';\n        }\n    }\n\n    $minDistance =\
    \ 9999999;\n    $minDistanceKey = '';\n    foreach ($vowels as $vowel) {\n   \
    \     if ($vowelsCount[$vowel] < $minDistance) {\n            $minDistance = $vowelsCount[$vowel];\n\
    \            $minDistanceKey = $vowel;\n        }\n    }\n\n    return $minDistanceKey;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 tags=php,arrays |>\n<code>\n\
    $string = 'yogurt';\n$vowel_array = ['a','e','i','o','u'];\n$array = str_split($string);\n\
    $consonant_array = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    $result = '';\nfor($i=0;$i<sizeof($array);$i++){\n    if(in_array($array[$i],$vowel_array)){\n\
    \        $result = $array[$i];\n        break;\n    }\n}\n\nfor($i=sizeof($array)-1;$i>=0;$i--){\n\
    \    if(in_array($array[$i],$consonant_array)){\n        $result = $array[$i];\n\
    \        break;\n    }\n}\n\necho $result;\n</code>\n<|/ a |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$string = 'yogurt';\n$vowel_array = ['a','e','i','o','u'];\n$array\
    \ = str_split($string);\n$consonant_array = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    $result = '';\nfor($i=0;$i<sizeof($array);$i++){\n    if(in_array($array[$i],$vowel_array)){\n\
    \        $result = $array[$i];\n        break;\n    }\n}\n\nfor($i=sizeof($array)-1;",
  "    // your code goes here\n}\n\nget_closest_vowel(\"ab\");", "    $vowels = array(\"\
    a\",\"e\",\"i\",\"o\",\"u\");\n    $vowels_count = count($vowels);\n    for($i\
    \ = strlen($word); $i >= 0; $i--){\n        $char = $word[$i];\n        $char\
    \ = strtolower($char);\n        if(in_array($char,$vowels)){\n            $index\
    \ = array_search($char,$vowels);\n            $index = $index - $vowels_count;\n\
    \            $index = abs($index);\n            if($index < 0){\n            \
    \    $index = 0;\n            }\n            return $vowels[$index];\n       \
    \ }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=php,string,arrays |>\n<|\
    \ c |>\nYour function returns `u` for `get_closest_vowel(\"yogurt\")`, which isn't\
    \ close enough to `u` for a vowel to stand between the two consonants.\n<|/ c\
    \ |>\n<| c |>\n: Thank you for pointing that out. I missed that case. Now, it's\
    \ fixed. `:)`\n<|/ c |>\n<| c |>\nNice, but `get_closest_vowel('ab')` would return\
    \ `a`, not `u`. Better use `$char = ($i == 0) ? strtolower($char) : $word[$i-1];`\
    \ instead of `$char = $word[$i-1];`.\n<|/ c |>\n<| c |>\n: Thanks again. My solution\
    \ is slightly different, but works equally as well. `:)`\n<|/ c |>\n<| a tags=php,string,arrays\
    \ dscore=1 |>\nYou can't use array_search on arrays in PHP. array_search is used\
    \ to search for an element inside an array. \nTry this instead:\n<code>", "  \
    \  // Your code here\n    $vowel_positions = array();\n    foreach ($word as $k=>$v){\n\
    \        if ($v == 'a' || $v == 'e' || $v == 'i' || $v == 'o' || $v == 'u'){\n\
    \            $vowel_positions[] = $k;\n        }\n    }\n    if (count($vowel_positions)\
    \ >= 2){\n        $closest_vowel = $word[array_search (max($vowel_positions)+1,\
    \ $vowel_positions)];\n        return $closest_vowel;\n    }else{\n        return\
    \ \"\";\n    }\n}\n", "    $vowels = array('a','e','i','o','u');\n    $cons =\
    \ array('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z');\n\
    \    foreach ($vowels as $value) {\n        $find = strrev($word);\n        if\
    \ (strpos($find, $value) !== false) {\n            return $value;\n        }\n\
    \    }\n    foreach ($cons as $value) {\n        $find = strrev($word);\n    \
    \    if (strpos($find, $value) !== false) {\n            return $value;\n    \
    \    }\n    }\n    return '';\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    <?php\n", "    $vowels = array(\"a\",\"e\",\"i\",\"o\",\"u\");\n    $word = strtolower($word);\n\
    \    for($i = strlen($word) - 2; $i >= 0; $i-=2){\n        if(in_array(strtolower($word[$i]),\
    \ $vowels) || \n           in_array(strtolower($word[$i]), $vowels[strlen($word)-1-i]))\n\
    \            echo strtolower($word[$i]);\n    }\n}\n</code>\n<|/ a dscore=1 tags=php\
    \ |>\n<| a |>\n<code>\n<?php\n$string = 'yogurt';\n$vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\necho implode($vowels, array_slice(str_split($string), -2)) . \"\\n\"\
    ;\n</code>\nOutput:\n<code>\nu\n</code>\nDemo on 3v4l.org\n<|/ a tags=php dscore=0\
    \ |>\n<| a tags=php |>\n<code>\n<?php\n$string = 'yogurt';\n$vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n$string = substr($string, -2);\n$result = '';\nforeach($vowels\
    \ as $v)\n{\n    if(strpos($string, $v) !== false)\n    {\n        $result = $v;\n\
    \        break;\n    }\n}\necho $result;\n</code>\n<|/ a dscore=0 |>\n<| a tags=php\
    \ |>\nThis might not be the best way to go about it but it's fun and may still\
    \ be useful to you and to others.\nI figured a way to solve this problem without\
    \ using regex, just by checking if there are vowels present in the middle of the\
    \ string.\n<code>\n<?php\n$string = 'yogurt';\n$vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n$middle = str_split($string);\n$middle2 = array_slice($middle, -2);\n\
    $string2 = implode($middle2, $vowels);\necho $string2;", "\t$vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n\tfor($i=(strlen($word)-1); $i >= 0; $i--) {\n\t\tif(in_array(strtolower(substr($word,\
    \ $i, 1)), array_map('strtolower', $vowels))) {\n\t\t\treturn strtolower(substr($word,\
    \ $i, 1));\n\t\t}\n\t}\n\treturn \"\";\n}", "  foreach ($word as $char) {\n  \
    \  if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char ==\
    \ 'u') {\n      return $char;\n    }\n  }\n  return \"\";\n}\n\n/* ================================================================\
    \ */\n/* exer1.php */\n/* ================================================================\
    \ */", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n\
    \    $consonants = str_split($word);\n    $consonants_count  = count($consonants);\n\
    \    \n    for($i = 0; $i < $vowels_count; $i++) {\n        $consonants[$i] =\
    \ strtolower($consonants[$i]);\n        if($consonants[$i] == $vowels[$i]) {\n\
    \            break;\n        }\n    }\n    \n    for($i = $consonants_count; $i\
    \ >= 0; $i--) {\n        $consonants[$i] = strtolower($consonants[$i]);\n    \
    \    if($consonants[$i] == $vowels[$vowels_count - $i - 1]) {\n            break;\n\
    \        }\n    }\n    \n    return $consonants[$i];\n}", "    $vowels = ['a','e','i','o','u'];\n\
    \    $arr = str_split($word);\n    $vowel_arr = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if (in_array($value, $vowels)) {\n            $vowel_arr[]\
    \ = $value;\n        }\n    }\n    return $vowel_arr;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 tags=php,arrays |>\n<code>", "    // Write your code here\n    $vowel\
    \ = \"a\";\n    $consonant = \"bcdghjklmnpqrstvwxyz\";\n    $arr = str_split($word);\n\
    \    $arrLength = count($arr);\n    $newArr = [];\n    for ($i = 0; $i < $arrLength;\
    \ $i++) {\n        if (in_array($arr[$i], $consonant)) {\n            $newArr[]\
    \ = $arr[$i];\n        }\n    }\n    $newArrLength = count($newArr);\n    for\
    \ ($i = 0; $i < $newArrLength; $i++) {\n        if (in_array($newArr[$i], $vowel))\
    \ {\n            if ($i === 0) {\n                $finalVowel = $newArr[$i];\n\
    \            }\n            if ($i === $newArrLength - 1) {\n                $finalVowel\
    \ = $newArr[$i];\n            }\n        }\n    }\n    return $finalVowel;\n}",
  "    // get the vowels in the word from the right\n    $vowels = str_split(substr($word,\
    \ -1, 1));\n    // get all the consonants in the word from the right\n    $consonants\
    \ = str_split(substr($word, -2, 1));\n    $vowel_index = 0;\n    foreach($vowels\
    \ as $index => $vowel) {\n        if($vowel === strtoupper($vowels[$vowel_index]))\
    \ {\n            // check if it meets the following condition\n            if($consonants[$index\
    \ + 1] === strtoupper($vowel)) {\n                unset($vowels[$index]);\n  \
    \              $vowels[$vowel_index] = strtoupper($vowels[$vowel_index]);\n  \
    \              break;\n            }\n            $vowel_index++;\n        }\n\
    \    }\n    return !empty($vowels[0]) ? $vowels[0] : '';\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a tags=php |>\nUsing this answer: How to find the closest vowel to another\
    \ given letter in PHP?\nand some slight adjustments, I've come up with this snippet\
    \ to get you going\n<code>", "    $vowel_left = 'aeiou';\n    $vowel_right = 'AEIOUaeiouAEIOU';\n\
    \    // remove all vowels except the first\n    $word = preg_replace('/[AEIOUaeiouAEIOU]/',\
    \ '', $word);\n    \n    // get the first consonant from the right\n    $consonant_right\
    \ = substr($word, strlen($word) - 1);\n    \n    // find the index of all vowel\
    \ from the right\n    $vowel_index = array_keys(str_split($word), $vowel_right);\n\
    \    $vowel_index = array_reverse($vowel_index);\n    $vowel_index = array_pop($vowel_index);\n\
    \    $vowel_index = array_shift($vowel_index);\n    \n    // loop through all\
    \ vowel index and compare with vowel index to find closest\n    $count = 0;\n\
    \    for($i = 0; $i < count($vowel_index); $i++) {\n        if($i != $vowel_index[$i])\
    \ {\n            continue;\n        }\n        $count++;\n    }\n    if($count\
    \ == count($vowel_index)) {\n        return $consonant_right;\n    }\n    return\
    \ '';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your answer! However, it\
    \ only seems to work when I run it through `echo get_closest_vowel('yogurt');`\
    \ but the string being passed does not seem to work. I've added my code above\
    \ that calls the function and passes the string I believe is causing the issue.\
    \ Any help would be greatly appreciated! :)\n<|/ c |>\n<| c |>\nThis answer is\
    \ very elegant and efficient, thanks for taking the time to add this answer. Can\
    \ anyone think of a reason why my original code wouldn't work?\n<|/ c |>\n<| c\
    \ |>\nI updated the code with original code and my own suggestion. Hope it helps.\
    \ :)\n<|/ c |>\n<| a |>\nYou can do it with regex. Try this regex and get the\
    \ matched consonants.\n<code>\n'/^.*[^aeiou]([aeiou])\\1.*$/i'\n</code>\nDEMO\n\
    <|/ a tags=php,string,algorithm,regex dscore=1 |>\n<| a dscore=1 |>\nI like your\
    \ answer! However, it only seems to work when I run it through echo get_closest_vowel('yogurt');\
    \ and the string being passed does not seem to work. I've added my code below\
    \ that calls the function and passes the string I believe is causing the issue.\n\
    <code>\n<?php", "    $word = strtolower($word);\n    $vowels = ['a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    for ($i = 0, $len = strlen($word);\
    \ $i < $len; $i++) {\n        $char = $word[$i];\n        if (in_array($char,\
    \ $vowels)) {\n            $first = $word[$i - 1];\n            $last  = $word[$len\
    \ - 1];\n            if ($char == $first || $char == $last) {\n              \
    \  return $char;\n            }\n        }\n    }\n    return '';\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks a lot! However, my question is more focused\
    \ on the algorithm and not on the code, which I wrote to solve the problem. Since\
    \ I'm just a beginner in PHP, I was looking for more guidance on this algorithm\
    \ to make it as efficient as possible.\n<|/ c |>\n<| c |>\nI have made an edit\
    \ to my answer.\n<|/ c |>\n<| a dscore=0 |>\nAs other answers point out, this\
    \ could be solved with a single loop, but in PHP there is a shortcut you can use\
    \ for this, called a ternary operator. In particular, you could do something like\
    \ this:\n<code>\n<?php\n", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n    foreach($vowels as $v){\n        $pos = strrpos($word, $v);\n     \
    \   if($pos !== false && $word[$pos+1] !== $v){\n            echo $v;\n      \
    \      break;\n        }\n    }\n}", "    \n    foreach (str_split($word) as $char)\
    \ {\n        if ($char !== \"a\" && $char !== \"A\" && $char !== \"e\" && $char\
    \ !== \"E\" && $char !== \"i\" && $char !== \"I\" && $char !== \"o\" && $char\
    \ !== \"O\" && $char !== \"u\" && $char !== \"U\"){\n            return \"\";\n\
    \        }\n    }\n    \n    foreach (str_split($word) as $char) {\n        if\
    \ ($char === \"a\" || $char === \"A\"){\n            return \"a\";\n        }\n\
    \        if ($char === \"e\" || $char === \"E\"){\n            return \"e\";\n\
    \        }\n        if ($char === \"i\" || $char === \"I\"){\n            return\
    \ \"i\";\n        }\n        if ($char === \"o\" || $char === \"O\"){\n      \
    \      return \"o\";\n        }\n        if ($char === \"u\" || $char === \"U\"\
    ){\n            return \"u\";\n        }\n    }\n    \n    return \"\";\n}", " \
    \   $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_len\
    \ = count($vowels);\n    for($i=0; $i < strlen($word); $i++) {\n        if(in_array($word[$i],\
    \ $vowels)) {\n            $current_pos = $i;\n            $vowel_found = true;\n\
    \            break;\n        } else {\n            $current_pos += $vowels_len;\n\
    \        }\n    }\n    if($vowel_found) {\n        for($i=$current_pos; $i < strlen($word);\
    \ $i++) {\n            if($word[$i] != $vowels[($current_pos+1)%$vowels_len])\
    \ {\n                break;\n            }\n        }\n        $vowel_found =\
    \ false;\n    }\n    return $vowel_found ? $vowels[($current_pos+1)%$vowels_len]\
    \ : \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThe code below works\
    \ with the test cases provided.\n<code>\n<?php", "    \n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    \n    \n    $arr1 = str_split($word);\n    $arr2 =\
    \ str_split($word);\n    \n    foreach($arr1 as $key => $value) {\n        if(in_array($value,\
    \ $vowels)){\n            unset($arr1[$key]);\n        }\n    }\n    \n    foreach($arr2\
    \ as $key => $value) {\n        if(in_array($value, $vowels)){\n            unset($arr2[$key]);\n\
    \        }\n    }\n    \n    foreach($arr1 as $key => $value) {\n        if(in_array($value,\
    \ $vowels)){\n            unset($arr1[$key]);\n        }\n    }\n    \n    foreach($arr2\
    \ as $key => $value) {\n        if(in_array($value, $vowels)){\n            unset($arr2[$key]);\n\
    \        }\n    }\n    \n    \n    if($arr1 == ''){\n        return '';\n    }\n\
    \    \n    if($arr2 == ''){\n        return '';\n    }\n    \n    \n    if($arr1[count($arr1)\
    \ - 1] == ''){\n        unset($arr1[count($arr1) - 1]);\n    }\n    \n    if($arr2[count($arr2)\
    \ - 1] == ''){\n        unset($arr2[count($arr2) - 1]);\n    }\n    \n    \n \
    \   $len = count($arr1);\n    \n    \n    if($len == 1){\n        if($arr2[0]\
    \ == ''){\n            return '';\n        }\n        if($arr2[0] != ''){\n  \
    \          return $arr2[0];\n        }\n        if($arr1[0] != ''){\n        \
    \    return $arr1[0];\n        }\n    }\n    \n    if($len == 2){\n        if($arr1[0]\
    \ != ''){\n            return $arr1[0];\n        }\n        if($arr2[0] != ''){\n\
    \            return $arr2[0];\n        }\n    }\n    \n    if($len > 2){\n   \
    \     $i = 0;\n        \n        for($i = 0; $i <= count($arr1) - 1; $i++){\n\
    \            $j = 0;\n            \n            for($j = 0; $j <= count($arr2)\
    \ - 1; $j++){\n                \n                if($arr1[$i] == $arr2[$j]){\n\
    \                    return $arr1[$i];\n                }\n                \n\
    \                if($arr1[$i] != $arr2[$j] && $arr1[$i] != '' && $arr1[$i] !=\
    \ ' ' && $arr2[$j] != ''){", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\"];\n    $letters = [];\n    $letter1 = strtolower($word[0]);\n    $letter2\
    \ = strtolower($word[strlen($word) - 1]);\n    array_push($letters, $letter1);\n\
    \    array_push($letters, $letter2);\n    sort($letters);\n    $count = 0;\n \
    \   foreach($letters as $letter) {\n        if(in_array($letter, $vowels)) {\n\
    \            $count++;\n        }\n    }\n    if($count == 1) {\n        return\
    \ $letters[0];\n    } else if($count > 1) {\n        foreach($letters as $k =>\
    \ $letter) {\n            if($k % 2 != 0) {\n                if(strtolower($letter)\
    \ == strtolower($letters[$k + 1])) {\n                    return $letter;\n  \
    \              }\n            }\n        }\n    }\n    return \"\";\n}\n", " \
    \   $vowels = ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',\
    \ '", "    $word = strtolower($word);\n    $vowels = 'aeiouyAEIOUY';\n    $vowels_len\
    \ = strlen($vowels);\n    $word = preg_replace(\"/[^\" . $vowels . \"]/\", \"\"\
    , $word);\n    $vowels = preg_replace(\"/[^\" . $vowels . \"]/\", \"\", $vowels);\n\
    \    $first = strtoupper(substr($word, 0, 1));\n    $last = strtoupper(substr($word,\
    \ -2));\n    $first = $vowels[$first];\n    $last = $vowels[$last];\n    $len\
    \ = $word;\n    $len = preg_replace(\"/[^\" . $vowels . \"]/\", \"\", $len);\n\
    \    $len = preg_replace(\"/[^\" . $vowels . \"]/\", \"\", $len);\n    $len =\
    \ preg_replace(\"/[^\" . $vowels . \"]/\", \"\", $len);\n    $len = preg_replace(\"\
    /[^\" . $vowels . \"]/\", \"\", $len);\n    $len = preg_replace(\"/[^\" . $vowels\
    \ . \"]/\", \"\", $len);\n    $len = preg_replace(\"/[^\" . $vowels . \"]/\",\
    \ \"\", $len);\n    foreach ($len as $key => $letter) {\n        if ($letter >\
    \ $first && $letter < $last) {\n            return $vowels[$letter];\n       \
    \ }\n    }\n    return \"\";\n}\n$arr = array(\"yogurt\",\"FULL\",\"quick\",\"\
    ab\");\nforeach ($arr as $word)\n{\n    echo get_closest_vowel($word) . \"<br\
    \ />\";\n}\n</code>\n<|/ a dscore=1 tags=php |>\n<| a tags=php dscore=1 |>\nThis\
    \ worked for me...\n<code>\n$word = 'quick';\n\n$vowels = 'aeiouyAEIOUY';\n\n\
    $vowels_len = strlen($vowels);\n\n$word = preg_replace(\"/[^\" . $vowels . \"\
    ]/\", \"\", $word);\n\n$vowels = preg_replace(\"/[^\" . $vowels . \"]/\", \"\"\
    , $vowels);\n\n$first = strtoupper(substr($word, 0, 1));\n\n$last = strtoupper(substr($word,\
    \ -2));\n\n$first = $vowels[$first];\n\n$last = $vowels[$last];\n\n$len = $word;\n\
    \n$len = preg_replace(\"/[^\" . $vowels . \"]/\", \"\", $len);\n\n$len = preg_replace(\"\
    /[^\" . $vowels . \"]/\", \"\", $len);\n\n$len = preg_replace(\"/[^\" . $vowels\
    \ . \"]/\", \"\", $len);\n\n$len = preg_replace(\"/[^\" . $vowel", "    $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n    for ($i=strlen($word)-1; $i >= 0; $i--)\
    \ {\n        $current_consonant = $word[$i];\n        if (in_array($current_consonant,\
    \ $vowels)) {\n            $vowel_found = true;\n            break;\n        }\
    \ else {\n            $vowel_found = false;\n        }\n    }\n    if ($vowel_found\
    \ === true) {\n        $vowel = $current_consonant;\n    } else {\n        $vowel\
    \ = '';\n    }\n    return $vowel;\n}", "\t$vowels = ['a','e','i','o','u'];\n\t\
    $vowels_count = count($vowels);\n\t\n\tfor($i = 0; $i < $vowels_count; $i++){\n\
    \t\t$index = strrpos($word, $vowels[$i]);\n\t\tif($index){\n\t\t\t$index_to_remove\
    \ = $index - $vowels[$i];\n\t\t\tif($index_to_remove < 0){\n\t\t\t\t$index_to_remove\
    \ = $vowels_count - $index_to_remove;\n\t\t\t}\n\t\t\t\n\t\t\tif($index_to_remove\
    \ >= 0){\n\t\t\t\t$word = substr_replace($word, '', -$index_to_remove, 0);\n\t\
    \t\t}\n\t\t\t\n\t\t\treturn $vowels[$i];\n\t\t}\n\t}\n\t\n\treturn '';\n}\n",
  "  // Write your code here\n  $first_consonant_position = strrpos($word, 'b');\n\
    \  $last_consonant_position = strrpos($word, 'z');\n  if ($first_consonant_position\
    \ === false || $last_consonant_position === false) {\n    return \"\";\n  }\n\
    \  \n  if($first_consonant_position < $last_consonant_position){\n    $vowel_position\
    \ = $first_consonant_position;\n  }else{\n    $vowel_position = $last_consonant_position;\n\
    \  }\n  \n  if($vowel_position == 0){\n      return \"\";\n  }\n  \n  for($i=$vowel_position;\
    \ $i<strlen($word); $i++){\n    if ($word[$i] == 'a'){\n      return 'a';\n  \
    \  }\n    if ($word[$i] == 'e'){\n      return 'e';\n    }\n    if ($word[$i]\
    \ == 'i'){\n      return 'i';\n    }\n    if ($word[$i] == 'o'){\n      return\
    \ 'o';\n    }\n    if ($word[$i] == 'u'){\n      return 'u';\n    }\n  }\n}",
  "    $vowels = \"AEIOUaeiou\";\n    $word=strtolower($word);\n    $pos=0;\n    $vowel_found\
    \ = false;\n    for($i=strlen($word)-1;$i>=0;$i--){\n        if($word[$i] != \"\
    u\" && $word[$i] != \"e\"){\n            $pos++;\n            if($word[$i] ==\
    \ strtolower($word[$i-1])){\n                $vowel_found = true;\n          \
    \      break;\n            }\n        }\n    }\n    if($vowel_found == true){\n\
    \        return $vowels[$pos];\n    }\n    return \"\";\n}", "    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $len = strlen($word);\n    $first = 0;\n    $last\
    \ = count($vowels) - 1;\n    while($first < $last && $vowels[$first] == $word[$len\
    \ + $first] || $vowels[$last] == $word[$len + $last]) {\n        $first++;\n \
    \       $last--;\n    }\n    return ($vowels[$first] == $word[$len + $first] ?\
    \ $word[$len + $first] : '');\n}\n", "    $vowels = ['a','e','i','o','u'];\n \
    \   $vowels = array_flip($vowels);\n    $vowels = array_merge($vowels, array_flip($vowels));\n\
    \    $vowels = array_unique($vowels);\n    foreach ($vowels as $key => $value)\
    \ {\n        if ($word[$key] == '') return '';\n    }\n    foreach ($word as $key\
    \ => $value) {\n        if ($value == '') return '';\n    }\n    $a = $word;\n\
    \    foreach ($vowels as $key => $value) {\n        $a = str_ireplace($value,\
    \ '', $a, 1);\n    }\n    return $a;\n}", "\tforeach (str_split($word) as $char)\
    \ {\n\t\tif (ctype_upper($char)) {\n\t\t\t$vowels = \"AEIOUaeiou\";\n\t\t\t$vowel_array\
    \ = explode($vowels, $vowels);\n\t\t\t$vowel_search = strtolower($char);\n\t\t\
    \t$index = array_search($vowel_search, $vowel_array);\n\t\t\tif ($index != false)\
    \ {\n\t\t\t\treturn $vowel_array[$index];\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\"\
    ;\n}\n", "    $vowels = array('a', 'e', 'i', 'o', 'u', 'y');\n    $end = $word[strlen($word)-1];\n\
    \    $wordLength = strlen($word);\n    \n    for($i=$wordLength;$i>0;$i--) {\n\
    \        $start = $i;\n        $isFound = false;\n        \n        for($j=0;$j<$wordLength;$j++)\
    \ {\n            if($word[$j]==$end) {\n                $isFound = true;\n   \
    \             break;\n            }\n            \n            if(!$isFound) {\n\
    \                $isFound = in_array($word[$j], $vowels);\n            }\n   \
    \     }\n        \n        if($isFound) {\n            $result = $word[$j];\n\
    \            break;\n        }\n    }\n    \n    return $result;\n}\n\n$input\
    \ = \"AbcdEfghIjkLmNoOpRsStTuUvWxYz\";\n$output = \"Y\";\n$testCases = array(\n\
    \    \"yogurt\",\n    \"FULL\",\n    \"quick\",\n    \"ab\"\n);\n\nforeach($testCases\
    \ as $word) {\n    echo \"Input: $word\\n\";\n    echo \"Expected: $output\\n\"\
    ;\n    echo \"Actual: \" . get_closest_vowel($word) . \"\\n\";\n    echo \"\\\
    n\";\n}", "    $vowel_arr = ['u', 'o', 'a', 'e', 'i', 'u', 'a', 'e', 'i', 'a',\
    \ 'e'];\n    $vowel_pos = strripos($word, $vowel_arr);\n    if ($vowel_pos ===\
    \ false) {\n        return '';\n    }\n    $vowel_arr2 = array_reverse(array_keys($vowel_arr,\
    \ $vowel_pos));\n    return $vowel_arr2[0];\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\nThe accepted answer is wrong. As commented, the solution below\
    \ should be the accepted answer. Here is a quick explanation of the code:\n<code>\n\
    $vowels = 'uoaue';\n$needle = 'e';\n$haystack = 'heeeeellllloooowwwwwwwwwwwww';\n",
  "    if (!is_string($word) || $word === '') {\n        return '';\n    }\n    \n\
    \    $vowels = [\n        'a',\n        'e',\n        'i',\n        'o',\n   \
    \     'u',\n        'y'\n    ];\n    $vowel_count = count($vowels);\n    \n  \
    \  $last_consonant_idx = 0;\n    $last_vowel_idx = count($vowels) - 1;\n    \n\
    \    foreach ($vowels as $idx => $vowel) {\n        if (substr($word, $last_consonant_idx,\
    \ 1) !== $vowel) {\n            $last_consonant_idx = $idx;\n        }\n     \
    \   if (substr($word, 0, $last_vowel_idx) !== $vowel) {\n            $last_vowel_idx\
    \ = $idx;\n        }\n    }\n    \n    if ($last_consonant_idx === 0 && !$last_vowel_idx)\
    \ {\n        return '';\n    }\n    \n    if ($last_vowel_idx === 0 || $last_vowel_idx\
    \ === count($vowels) - 1) {\n        return $vowel;\n    }\n    \n    $last_vowel_pos\
    \ = strlen($word) - $last_vowel_idx - 1;\n    $last_vowel_pos = $last_vowel_pos\
    \ < 0 ? 0 : $last_vowel_pos;\n    \n    $first_consonant_pos = $last_vowel_idx;\n\
    \    $first_vowel_pos = $last_vowel_idx + 1;\n    \n    for ($i = 0; $i <= $last_vowel_pos;\
    \ $i++) {\n        $consonant_pos = $first_consonant_pos;\n        foreach ($vowels\
    \ as $idx => $vowel) {\n            if ($first_vowel_pos <= $i && $i < strlen($word)\
    \ - $idx) $consonant_pos = $idx;\n        }\n        \n        if ($consonant_pos\
    \ !== $first_consonant_pos) {\n            break;\n        }\n        $first_consonant_pos\
    \ = $consonant_pos + 1;\n    }\n    \n    if ($first_consonant_pos === $first_vowel_pos)\
    \ {\n        return '';\n    }\n    \n    return $vowels[$first_vowel_pos];\n\
    }\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    \n    \n    $vowels_right\
    \ = strrev($word);\n    $vowels_right2 = strrev($word);\n    \n    $start1 = strpos($vowels_right,\
    \ 'a', -1);\n    $end1 = strpos($vowels_right, 'a', 1);\n    \n    \n    $start2\
    \ = strpos($vowels_right2, 'e', -1);\n    $end2 = strpos($vowels_right2, 'e',\
    \ 1);\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    $vowels = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n    $leftIndex\
    \ = 0;\n    $rightIndex = strlen($word) - 1;\n    $count = 0;\n    while(true)\
    \ {\n        if($leftIndex == $rightIndex) {\n            return $vowels[$leftIndex];\n\
    \        }\n        $middleIndex = floor(($leftIndex + $rightIndex) / 2);\n  \
    \      if($word[$middleIndex] >= 'a' && $word[$middleIndex] <= 'z') {\n      \
    \      $leftIndex = $middleIndex + 1;\n        } else if($word[$middleIndex] >=\
    \ 'A' && $word[$middleIndex] <= 'Z') {\n            $rightIndex = $middleIndex\
    \ - 1;\n        } else {\n            $count = $middleIndex - $leftIndex;\n  \
    \          if($count < 0) {\n                return $vowels[$leftIndex];\n   \
    \         } else if($count > 0) {\n                return $vowels[$rightIndex];\n\
    \            } else {\n                return '';\n            }\n        }\n\
    \    }\n}\n</code>\n<|/ a tags=php,algorithm,substring,string dscore=2 |>\n<|\
    \ a dscore=1 tags=php,algorithm,substring,string |>\nI see that you already accepted\
    \ another answer, but maybe this is useful to someone. \nI took a different approach\
    \ with one loop (no nested loops nor recursion), just for the fun of it. And for\
    \ my own learning I did it :)\n<code>", "    $letters = str_split($word);\n  \
    \  $first = array_slice($letters, -1, 1);\n    $last = array_slice($letters, -2,\
    \ 1, true);\n    \n    $result = '';\n    \n    // Check for first letter\n  \
    \  if (preg_match('/[aA]/', $first)) {\n        // Check for last letter\n   \
    \     if (preg_match('/[aA]/', $last)) {\n            // Both are consonant\n\
    \            if (in_array($first[0], $last)) {\n                $result = $first[0];\n\
    \            }\n        } else {\n            // Last is a consonant\n       \
    \     $result = $last[0];\n        }\n    }\n    \n    return $result;\n}\n",
  "    // Write your code here\n    $vowels = array('a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U');\n    $found = false;\n    $start = $word.length - 2;\n\
    \    $end = $word.length - 1;\n    foreach ($vowels as $key => $value) {\n   \
    \     if ($word[$start] == $value && $word[$end] == $value) {\n            $found\
    \ = true;\n            break;\n        }\n    }\n    if ($found) {\n        return\
    \ $value;\n    }\n    return \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ this, however this doesn't take into account the fact that it's case sensitive.\
    \ I just tried it on the input \"Full\" and got \"U\". \nI did change the \"f\"\
    \ and \"F\" to uppercase but still no luck on \"full\"\n<|/ c |>\n<| c |>\nYeah\
    \ this is case sensitive, just add strtoupper to the string in the if statement\n\
    <|/ c |>\n<| c |>\nStill no luck, it would work for \"full\" but not \"Full\"\
    , I added strtoupper to $start and $end but still no luck. I also tried replacing\
    \ \"full\" with \"Full\" in your code, but still no luck.\n<|/ c |>\n<| c |>\n\
    I added a solution where case is taken into account.\n<|/ c |>\n<| c |>\nThanks,\
    \ I see now. However it won't work for \"qUery\" because \"U\" will never come\
    \ in the vowel array.\n<|/ c |>\n<| a tags=php |>\nThe question is not very clear,\
    \ so I am going to assume that you want to find the closest vowel from the right\
    \ side of the string that starts with a vowel from the array.\n<code>\n$vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\
    );\n$firstLetter = substr($string, -1, 1);\n$nextLetter = substr($string, 0, 1);\n\
    \n$closestVowel = \"\";\n$found = false;\nforeach($vowels as $v){\n   if($v ===\
    \ $firstLetter){\n       break;\n   } else if($nextLetter === $v) {\n       break;\n\
    \   } else {\n       $found = true;\n       break;\n   }\n}\nif($found){\n   $closestVowel\
    \ = $v;\n}\n</code>\nEdit: Based on the comment of Van Ootegem\n<code>\n$vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\
    );\n$string = \"Full\";", "    \n    // $vowels = array(\"a\", \"e\", \"i\", \"\
    o\", \"u\");\n    $vowels = \"aeiou\";\n    $vowels_count = count($vowels);\n\
    \    $vowels_array = str_split($word);\n    \n    // loop through vowels array\
    \ to check whether it's between left and right of the word \n    foreach($vowels_array\
    \ as $key => $value) {\n        if(in_array($value, $vowels)) {\n            if($key\
    \ === 0 && $value < $vowels_count) {\n                $first_vowel = $value;\n\
    \            } elseif($key === $vowels_count - 1 && $value > $vowels_count) {\n\
    \                $last_vowel = $value;\n            } else {\n               \
    \ return $value;\n            }\n        }\n    }\n    \n    // if none of them\
    \ met the condition, return empty string\n    if($first_vowel === null || $last_vowel\
    \ === null) {\n        return \"\";\n    }\n    \n    // return the first vowel\
    \ if exist\n    if($first_vowel > $last_vowel) {\n        return $first_vowel;\n\
    \    } else {\n        return $last_vowel;\n    }\n}\n", "    if (empty($word))\
    \ {\n        return \"\";\n    }\n\n    $vowels = ['a','e','i','o','u'];\n\n \
    \   foreach($vowels as $vowel){\n        $pos_start = strrpos($word, $vowel);\n\
    \        if ($pos_start !== false) {\n            $pos_end = strrpos($word, $vowel,\
    \ $pos_start + 1);\n            if ($pos_end !== false) {\n                $pos_end\
    \ += 1;\n                $pos_end = ($pos_end > strlen($word)) ? strlen($word)\
    \ : $pos_end;\n\n                $vowel_start = strrpos($word, $vowel, $pos_end\
    \ - 1);\n                if ($vowel_start !== false) {\n                    if\
    \ ($vowel_start - $pos_start < $pos_end - $vowel_start){\n                   \
    \     $vowel_start = strrpos($word, $vowel, $pos_end - 1);\n                 \
    \   }\n                }\n\n                return $vowels[$vowel_start > $pos_start\
    \ ? $vowel_start : $pos_start];\n            }\n        }\n    }\n    return \"\
    \";\n}\n", "    $vowels = ['a','e','i','o','u'];\n    \n    $vowel_count = count($vowels);\n\
    \    \n    $word_length = strlen($word);\n    \n    $vowel_position = 0;\n   \
    \ \n    $vowel_found = array();\n    \n    for($i = 0; $i < $word_length; $i++){\n\
    \        $char = $word[$i];\n        \n        if(in_array($char, $vowels)){\n\
    \            $vowel_position = $i;\n            $vowel_found[] = $char;\n    \
    \        $vowel_count -= 1;\n        }\n    }\n    \n    if($vowel_count > 0){\n\
    \        if($vowel_position > $word_length - 2){\n            return '';\n   \
    \     }else{\n            return $vowels[$vowel_position];\n        }\n    }else{\n\
    \        return '';\n    }\n}", "    $vowel_pairs = array(\n        'aa' => 'u',\n\
    \        'ae' => 'u',\n        'ah' => 'u',\n        'ao' => 'u',\n        'eh'\
    \ => 'u',\n        'er' => 'u',\n        'ai' => 'u',\n        'ei' => 'u',\n\
    \        'oe' => 'u',\n        'ou' => 'u',\n        'oo' => 'u'\n    );\n   \
    \ $wordl = mb_strtolower($word);\n    $vowels = array_keys($vowel_pairs);\n  \
    \  for ($i=0; $i<count($vowels); $i++) {\n        $last_vowel = $vowels[$i];\n\
    \        $last_vowel_pairs = array_keys($vowel_pairs, $last_vowel);\n        $start_pos\
    \ = strrpos($wordl, $last_vowel);\n        if ($start_pos > 0) {\n           \
    \ $start_pos++;\n            $end_pos = strrpos($wordl, $last_vowel_pairs[0]);\n\
    \            if ($end_pos > 0 && $end_pos > $start_pos) {\n                $start_pos\
    \ = $end_pos;\n            }\n            if ($start_pos == 0) {\n           \
    \     $start_pos = 1;\n            }\n            while (isset($wordl[$start_pos]))\
    \ {\n                $vp = $vowel_pairs[$wordl[$start_pos]];\n               \
    \ if ($vp == $last_vowel) {\n                    return $vp;\n               \
    \ } else {\n                    $start_pos--;\n                }\n           \
    \ }\n        }\n    }\n    return '';\n}", "  // Write your code in PHP7\n  $vowels\
    \ = \"aAiIoOuU\";\n  $chars = str_split($word);\n  for($i = 0; $i < count($chars);\
    \ $i++){\n    $letter = $chars[$i];\n    if(in_array($letter, $vowels)){\n   \
    \   $vowel = $letter;\n      break;\n    }\n  }\n  for($i = count($chars); $i\
    \ > 0; $i--){\n    $letter = $chars[$i];\n    if(in_array($letter, $vowels)){\n\
    \      $vowel = $letter;\n      break;\n    }\n  }\n  return $vowel;\n}\n\n$word\
    \ = \"a\";\necho get_closest_vowel($word);\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    This problem has been around for ages.\nThe question asked for the closest vowel\
    \ from a string to the right of the string, and if the string doesn't contain\
    \ a vowel it returns an empty string as the result.\nI have solved this problem\
    \ in JavaScript and here is the code\n\n<code>", "    return \"\";\n}\n", "  \
    \  $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    \n    // find the first\
    \ consonant at the right side\n    $right_side = strrpos($word, \"u\", -1);\n\
    \    \n    // check if the right side found one or many vowels \n    if ($right_side\
    \ === false) {\n        return \"\";\n    }\n    \n    // find which vowel is\
    \ the closest to $right_side\n    $closest_index = 0;\n    for ($i = $right_side\
    \ + 1; $i < strlen($word); $i++) {\n        $current_char = substr($word, $i,\
    \ 1);\n        $distance = 0;\n        for ($j = 0; $j < count($vowels); $j++)\
    \ {\n            $distance += strlen($vowels[$j]);\n        }\n        $current_distance\
    \ = abs($distance - strlen($current_char));\n        if ($current_distance < $closest_distance)\
    \ {\n            $closest_distance = $current_distance;\n            $closest_index\
    \ = intval($i);\n        }\n    }\n    \n    // check if the closest vowel exist\n\
    \    if ($vowels[$closest_index] === $word[$closest_index]) {\n        return\
    \ $vowels[$closest_index];\n    } else {\n        return \"\";\n    }\n}\n", " \
    \   $vowel_array = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $vowel_length\
    \ = count($vowel_array);\n\n    $vowel_index = 0;\n    $vowel_count = 0;\n   \
    \ $i = strlen($word) - 1;\n    while($i > -1) {\n        if($word[$i] == \"a\"\
    \ || $word[$i] == \"e\" || $word[$i] == \"i\" || $word[$i] == \"o\" || $word[$i]\
    \ == \"u\") {\n            $vowel_count += 1;\n            if($vowel_count ==\
    \ $vowel_length) {\n                $vowel_index = $i;\n            }\n      \
    \  }\n        $i -= 1;\n    }\n\n    return $vowel_index;\n}\n", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $word_len = strlen($word);\n    $vowels_before\
    \ = array();\n    $vowels_after = array();\n    for ($i = 0; $i < $word_len; $i++)\
    \ {\n        if (preg_match('/[a-z0-9\\pL]$/i', $word[$i])) {\n            $vowels_before[]\
    \ = $word[$i];\n        }\n        if (preg_match('/[a-z0-9\\pL]$/i', $word[$i\
    \ - 1])) {\n            $vowels_after[] = $word[$i];\n        }\n    }\n\n   \
    \ $vowels_before = array_unique($vowels_before);\n    $vowels_after = array_unique($vowels_after);\n\
    \    $vowels_between = array_diff($vowels_before, $vowels_after);\n    $vowels_between\
    \ = array_values($vowels_between);\n\n    $last_letter = array_pop($vowels_before);\n\
    \    $last_vowel = end($vowels_between);\n\n    return $last_vowel;\n}\n</code>\n\
    I didn't test this code, so let me know if you find any issues.\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nThis might help someone looking for an answer to the same\
    \ problem:\n<code>\n/**\n * Get the closest vowel between two consonants.\n *\n\
    \ * string\n *   $str The string to be checked.\n * string\n *   The closest vowel\
    \ (case insensitive) between two consonants.\n */", "    \n    // your code goes\
    \ here\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $vowelsLen\
    \ = count($vowels);\n    $vowelsFound = array();\n    for($i=0;$i<strlen($word);$i++){\n\
    \        if(in_array(substr($word,$i, 1), $vowels)){\n            $vowelsFound[]\
    \ = substr($word,$i, 1);\n        }\n    }\n\n    if(count($vowelsFound) < 2){\n\
    \        return \"\";\n    }\n\n    $vowelsFound = array_reverse($vowelsFound);\n\
    \    $vowelsFound = array_unique($vowelsFound);\n    \n    for($i=0;$i<$vowelsLen;$i++){\n\
    \        $found = false;\n        foreach($vowelsFound as $v){\n            if($v\
    \ == $vowels[$i]){\n                $found = true;\n            }\n        }\n\
    \        if(!$found){\n            return \"\";\n        }\n    }\n    \n    return\
    \ $vowelsFound[0];\n}\n</code>\n<|/ a |>\n<| a tags=php,regex |>\n<code>", " \
    \ $vowels = \"aeiou\";\n  $vowels_count = array_count_values(str_split($word));\n\
    \  $closest_vowel = end($vowels);\n  foreach ($vowels as $vowel) {\n    if ($vowels_count[$vowel]\
    \ < $closest_vowel) {\n      $closest_vowel = $vowel;\n    }\n  }\n  return $closest_vowel;\n\
    }\n\necho \"Vowel of word \\\"$word\\\": $closest_vowel<br>\";\necho \"Closest\
    \ vowel is $closest_vowel.\";", "    $vowels_array = array('a', 'e', 'i', 'o',\
    \ 'u');\n    $vowels = \"\";\n    for ($i=count($word); $i>0; $i--){\n       \
    \ $vowels .= $word[$i-1];\n        if (in_array($vowels, $vowels_array)){\n  \
    \          break;\n        }\n    }\n    if ($vowels == \"\"){\n        return\
    \ \"\";\n    }\n    return $vowels;\n}\n", "    $vowels = \"aeiouy\";\n    $vowels_count\
    \ = strlen($vowels);\n    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n    \
    \    if ($word[$i] == $word[$i - 1]) {\n            if ($word[$i] == $word[$i\
    \ + 1]) {\n                return $vowels[$i - 1];\n            } else {\n   \
    \             return $vowels[$i - 1];\n            }\n        }\n    }\n}\n",
  "    // Write your code here\n    $vowel = array('a', 'e', 'i', 'o', 'u');\n   \
    \ sort($word);\n    $vowel_position = $word[strlen($word)-1];\n    $closest_vowel\
    \ = end($vowel);\n    foreach ($vowel as $v) {\n        if ($word[strlen($word)-1]\
    \ == $v) {\n            $closest_vowel = $v;\n            break;\n        }\n\
    \    }\n    return $closest_vowel;\n}\n", "    $consonant = 'bdfghklmnpqrstvwxyzBCDFGHKLMNPQRSTVWXYZ';\n\
    \    $vowel = \"aA\";\n\n    if ($word === '') {\n        return '';\n    }\n\n\
    \    $letters = str_split($word);\n    $len = count($letters);\n    $vowel_found\
    \ = false;\n\n    for($i = $len - 1; $i >= 0; $i--) {\n        if (in_array($consonant[$i],\
    \ $letters)) {\n            $letters[$i] = strtoupper($consonant[$i]);\n     \
    \   } else {\n            if ($vowel_found) {\n                return $vowel;\n\
    \            }\n\n            if (strpos($letters, $vowel) !== false) {\n    \
    \            $vowel_found = true;\n            }\n        }\n    }\n    return\
    \ $vowel;\n}\n", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    );\n    $vowel_count = array_count_values($vowels);\n    $consonants = str_split($word);\n\
    \    foreach($consonants as $key => $value) {\n        $vowel = array_search($value,\
    \ $vowels);\n        if ($vowel_count [$vowel-1] > 0) {\n            $closest_vowel\
    \ = $vowel;\n            break;\n        }\n    }\n    return $closest_vowel;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nHi , can you please explain me why `array_count_values`\
    \ works?\n<|/ c |>\n<| c |>\nIt counts the occurrences of each value in the array.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    $vowel = array(\"a\",\"u\",\"i\",\"\
    o\",\"e\",\"y\");\n    $consonant = array(\"b\",\"c\",\"d\",\"f\",\"g\",\"h\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\"\
    ,\"y\");\n    $vowel_count = count($vowel);\n    $consonant_count = count($consonant);\n\
    \n    $word_length = strlen($word);\n    $end_index = strrpos($word,$vowel[0]);\n\
    \    $startIndex = $end_index - $word_length + 1;\n    $closest_vowel = \" \"\
    ;\n\n    for($i = 0; $i < $consonant_count && $i < $word_length; $i++) {\n   \
    \     $closest_index = strrpos($word,$consonant[$i]);\n        if ($closest_index\
    \ > $startIndex && $closest_index < $end_index) {\n            $closest_vowel\
    \ = $vowel[$i];\n        }\n    }\n\n    return $closest_vowel;\n}", "    $arrVowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $pos1 = strrpos($word, 'g');\n    $pos2 =\
    \ strrpos($word, 'k');\n    $pos3 = strrpos($word, 'l');\n    $pos4 = strrpos($word,\
    \ 's');\n    $pos5 = strrpos($word, 'd');\n    $pos6 = strrpos($word, 'p');\n\
    \    $pos7 = strrpos($word, 'f');\n    $pos8 = strrpos($word, 'v');\n    $pos9\
    \ = strrpos($word, 'y');\n    $pos10 = strrpos($word, 'h');\n    $pos11 = strrpos($word,\
    \ 'w');\n    $pos12 = strrpos($word, 't');\n    if ($pos1 == -1) return '';\n\
    \    if ($pos2 == -1) return '';\n    if ($pos3 == -1) return '';\n    if ($pos4\
    \ == -1) return '';\n    if ($pos5 == -1) return '';\n    if ($pos6 == -1) return\
    \ '';\n    if ($pos7 == -1) return '';\n    if ($pos8 == -1) return '';\n    if\
    \ ($pos9 == -1) return '';\n    if ($pos10 == -1) return '';\n    if ($pos11 ==\
    \ -1) return '';\n    if ($pos12 == -1) return '';\n    if ($pos1 <= $pos2 &&\
    \ $pos2 <= $pos3 && $pos3 <= $pos4 && $pos4 <= $pos5 && $pos5 <= $pos6 && $pos6\
    \ <= $pos7 && $pos7 <= $pos8 && $pos8 <= $pos9 && $pos9 <= $pos10 && $pos10 <=\
    \ $pos11 && $pos11 <= $pos12) {\n        $countVowel = 0;\n        for ($i = $pos1\
    \ ; $i <= $pos12 ; $i++) {\n            if (in_array($word[$i], $arrVowels)) $countVowel++;\n\
    \        }\n        $closestVowel = $arrVowels[$countVowel];\n    } else {\n \
    \       $closestVowel = '';\n    }\n    return $closestVowel;\n}\n", "    $vowel_candidates\
    \ = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n    $vowels = array_flip($vowel_candidates);\n\
    \    \n    $vowels = array_flip($vowels);\n\n    // find out the first vowel candidate\n\
    \    $first_vowel_candidate = null;\n    foreach ($vowel_candidates as $vowel_candidate)\
    \ {\n        if (isset($vowels[$vowel_candidate])) {\n            $first_vowel_candidate\
    \ = $vowel_candidate;\n            break;\n        }\n    }\n    \n    // find\
    \ the vowel candidate\n    $first_vowel = null;\n    $first_vowel_distance = null;\n\
    \    foreach ($vowel_candidates as $vowel_candidate) {\n        if (isset($vowels[$vowel_candidate]))\
    \ {\n            $first_vowel = $vowel_candidate;\n            $first_vowel_distance\
    \ = $vowels[$first_vowel] - $word[$first_vowel_candidate];\n            break;\n\
    \        }\n    }\n    \n    // if there is no vowel candidate\n    if ($first_vowel_distance\
    \ === null) {\n        return \"\";\n    }\n\n    // calculate the distance between\
    \ the first vowel candidate and the word\n    $distance = $first_vowel_distance\
    \ + $word[$first_vowel] - $first_vowel;\n\n    // find the first vowel\n    foreach\
    \ ($vowel_candidates as $vowel_candidate) {\n        if (isset($vowels[$vowel_candidate]))\
    \ {\n            $distance = $distance + $vowels[$vowel_candidate];\n        \
    \    break;\n        }\n    }\n\n    return $vowels[$first_vowel];\n}\n", "  \
    \  for($i=strlen($word); $i>=0; $i--){\n        if($word[$i] == \"a\"){\n    \
    \        return \"a\";\n        }\n        if($word[$i] == \"e\"){\n         \
    \   return \"e\";\n        }\n        if($word[$i] == \"i\"){\n            return\
    \ \"i\";\n        }\n        if($word[$i] == \"o\"){\n            return \"o\"\
    ;\n        }\n        if($word[$i] == \"u\"){\n            return \"u\";\n   \
    \     }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=3 tags=php,string,arrays,substring\
    \ |>\n<| a |>\n<code>", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    \n    for($i = 0; $i < strlen($word); $i++){\n        if(in_array($word[$i],\
    \ $vowels)){\n            continue;\n        }\n\n        for($j = 0; $j < strlen($word);\
    \ $j++){\n            \n            if($j > $i && in_array($word[$j], $vowels)\
    \ && $j != $i){\n                continue;\n            }\n            \n    \
    \        if($j < $i && in_array($word[$j], $vowels) && $j == $i){\n          \
    \      continue;\n            }\n            \n            if(in_array($word[$j],\
    \ $vowels)){\n                break;\n            }\n        }\n\n        break;\n\
    \    }\n\n    return \"\";\n}\n", "    // Write your code here\n\n    $vowels\
    \ = array(\"a\",\"e\",\"i\",\"o\",\"u\");\n    $count = count($vowels);\n    for($i=0;$i<$count;$i++)\n\
    \    {\n        $found = false;\n        foreach($vowels as $vowel)\n        {\n\
    \            if(strpos($word,$vowel,$i+1)!==false)\n            {\n          \
    \      $found = true;\n                break;\n            }\n        }\n    \
    \    if($found)\n            break;\n    }\n    return $vowels[$i];\n}", "   \
    \ // Your code goes here\n    \n    if(!ctype_alpha($word)) return '';\n    \n\
    \    $vowels = ['a','e','i','o','u'];\n    \n    if($word[0] == 'i' || $word[0]\
    \ == 'I' || $word[0] == 'e' || $word[0] == 'E' || $word[0] == 'a' || $word[0]\
    \ == 'A'){\n        $word[0] = substr($word,1);\n        return $vowels[array_search($word[0],\
    \ $vowels)];\n    }\n    \n    for($i=$word[0]; $i<strlen($word)-2; $i++){\n \
    \       $temp = substr($word, $i, 1);\n        if(!in_array($temp, $vowels)){\n\
    \            return '';\n        }\n    }\n    \n    return substr($word, $i+1,\
    \ 1);\n}\n", "    if(!preg_match(\"/[^a-zA-Z]/\", $word)) {\n        return \"\
    V\";\n    }\n    $vowel = array('a', 'e', 'i', 'o', 'u', 'y');\n    sort($vowel);\n\
    \    \n    $vowel_index = array_search(strrev($vowel[0]), strrev($word));\n  \
    \  $vowel_length = strlen($vowel[0]);\n    $right_pos = strrpos($word, strrev($vowel[0]));\n\
    \    $left_pos = strpos($word, strrev($vowel[0]));\n    $len = strlen($word);\n\
    \    \n    if($left_pos > ($vowel_index + $vowel_length - 1)) {\n        $vowel_index\
    \ = array_search($left_pos + $vowel_length - 1, $vowel);\n        $left_pos =\
    \ strpos($word, $vowel[0]);\n    }\n    if($right_pos < ($vowel_index - $vowel_length\
    \ + 1)) {\n        $vowel_index = array_search($right_pos - $vowel_length + 1,\
    \ $vowel);\n        $right_pos = strrpos($word, $vowel[0]);\n    }\n    \n   \
    \ return $vowel[$vowel_index];\n}\n\necho \"<pre>\";\nprint_r(get_closest_vowel(\"\
    yogurt\"));\necho \"</pre>\";\n</code>\nOutput\n<code>\nu\n</code>\n<|/ a tags=php,string,vowel,search\
    \ |>\n<| a tags=php,string,vowel,search dscore=0 |>\n<code>", "\t$vowels = ['a','e','i','o','u'];\n\
    \t$vowel_count = array_count_values($vowels);\n\treturn $vowels[array_search(max($vowel_count),\
    \ $vowel_count)];\n}", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    foreach\
    \ ($vowels as $vow) {\n        if (strpos($word, $vow) !== false) {\n        \
    \    $vowel = $vow;\n            break;\n        }\n    }\n    if ($vowel == '')\
    \ {\n        return 'a';\n    }\n\n    $positions = explode('u', $word);\n   \
    \ $positions = array_reverse($positions);\n    foreach ($positions as $po) {\n\
    \        if ($po == 'a') {\n            return 'a';\n        }\n        if ($po\
    \ == 'e') {\n            return 'e';\n        }\n        if ($po == 'i') {\n \
    \           return 'i';\n        }\n        if ($po == 'o') {\n            return\
    \ 'o';\n        }\n        if ($po == 'u') {\n            return 'u';\n      \
    \  }\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution is really good,\
    \ but I decided to take a different approach and create a function that accepts\
    \ an array of the vowels. So the function would return true or false if the word\
    \ has a vowel in the array. Then I would just check the word for vowels. Thanks\
    \ anyways!\n<|/ c |>\n<| c |>\nHonestly, this is the same solution I posted above.\
    \ Just with one function. Your solution is much more elegant, though, and I learned\
    \ a lot from it.\n<|/ c |>\n<| c |>\nYes I didn't see it before posting. I just\
    \ wanted to post a solution that doesn't use recursion.\n<|/ c |>\n<| a dscore=2\
    \ |>\nHere's a solution using array_search() and strpos(). It does require PHP\
    \ >= 5.5.0.\n<code>", "    $vowels = 'aeiouAEIOU';\n    $vowels_array = explode($vowels,\
    \ $word);\n    array_walk($vowels_array, function(&$vowel, $index) use ($vowels)\
    \ {\n        $vowel = strrev($vowel);\n        $vowel = strrev($vowel);\n    \
    \    $vowel = strrev($vowel);\n        $vowel = strrev($vowel);\n        $vowel\
    \ = strrev($vowel);\n        $vowel = strrev($vowel);\n    });\n    $result =\
    \ '';\n    foreach ($vowels_array as $vowel) {\n        if ($index == 0) {\n \
    \           if ($vowel == $vowels[$vowels_array[1] - 1]) {\n                $result\
    \ .= $vowels[$vowels_array[1] - 1];\n                $index = $vowels_array[1]\
    \ - 1;\n            }\n        } else {\n            if ($vowel == $vowels[$vowels_array[1]\
    \ - 1] && $vowels[$vowels_array[2] - 1] == $vowels[$vowels_array[1] - 1]) {\n\
    \                $result .= $vowels[$vowels_array[1] - 1];\n                $index\
    \ = $vowels_array[1] - 1;\n            }\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,algorithm |>\n<| a dscore=1 |>\nI refactored a couple\
    \ things from another answer and ran some benchmarks. On my MacBook, these are\
    \ the results:\n<code>\nword: quick\ntime: 1.038\nword: quic\ntime: 1.024\nword:\
    \ qic\ntime: 1.046\nword: quc\ntime: 1.045\nword: qac\ntime: 1.043\nword: qca\n\
    time: 1.039\nword: qca \ntime: 1.038\nword: qcaq\ntime: 1.036\nword: qca \ntime:\
    \ 1.035\nword: qca \ntime: 1.033\nword: qca \ntime: 1.031\nword: qca \ntime: 1.031\n\
    word: qca \ntime: 1.031\nword: qca \ntime: 1.031\nword: qca \ntime: 1.031\nword:\
    \ qca \ntime: 1.031\nword: qca \ntime: 1.031\nword: qca \ntime: 1.031\nword: qca\
    \ \ntime: 1.031\nword: qca \ntime: 1.031\nword: qca \ntime: 1.031\nword: qca \n\
    time: 1.031\nword: qca \ntime: 1.031\nword: qca \ntime: 1.031", "    $vowels =\
    \ \"aeiouAEIOU\";\n    $vowels_array = str_split($vowels);\n    \n    // Find\
    \ the index of the last consonant in the word\n    $last_consonant_index = strlen($word)\
    \ - 1;\n    \n    $found = null;\n    $vowels_array_len = count($vowels_array);\n\
    \    \n    // Find the vowel index between the last consonant and the left\n \
    \   for ($i = 0; $i < $last_consonant_index; $i++) {\n        if (in_array($word[$i],\
    \ $vowels_array)) {\n            $found = $i;\n        }\n    }\n    \n    if\
    \ ($found != null) {\n        // If found, compare the found vowel to the vowel\
    \ before the found one\n        for ($i = $found + 1; $i < $vowels_array_len;\
    \ $i++) {\n            if ($word[$i] == $vowels_array[$i]) {\n               \
    \ return $vowels_array[$i];\n            }\n        }\n    }\n    \n    return\
    \ \"\";\n}", "    $vowels = array('a','e','i','o','u');\n    $consonants = array('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'z');\n\n    $word = strtolower($word);\n    for($i = 0; $i < strlen($word);\
    \ $i++) {\n        if(in_array($word[$i], $vowels)) {\n            return $word[$i];\n\
    \        }\n        if(in_array($word[$i], $consonants)) {\n            $j = $i;\n\
    \            while(in_array($word[$j], $consonants) && $j > 0) {\n           \
    \     $j--;\n            }\n            return $word[$j];\n        }\n    }\n\
    \    return '';\n}\n</code>\nI couldn't understand the second solution and it\
    \ took too much time to understand. But the first solution was much easy to understand\
    \ and faster to execute. \nI hope this helps :)\n<|/ a tags=php dscore=0 |>\n\
    <| c |>\n\"Your task is to find the closest vowel that stands between two consonants\
    \ from the right side of the word\" I think this means that the consonants in\
    \ the end have to be the ones that stands between two consonants from the right.\n\
    <|/ c |>\n<| a tags=php dscore=0 |>\nI wrote a simple function using strpos function\
    \ in php\n<code>", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    $vowels_count\
    \ = substr_count($word, 'a');\n    $vowels_count_right = substr_count($word, 'e');\n\
    \    $vowels_count_left = substr_count($word, 'i');\n    $vowels_count_left =\
    \ substr_count($word, 'o');\n    $vowels_count_left = substr_count($word, 'u');\n\
    \    \n    \n    \n    \n    // Return empty string if nothing found\n    if($vowels_count\
    \ == 0) {\n        return \"\";\n    }\n    \n    if($vowels_count_right == $vowels_count_left\
    \ == 0) {\n        return \"\";\n    }\n    \n    if($vowels_count > $vowels_count_right\
    \ && $vowels_count_right > $vowels_count_left) {\n        \n        $i = $vowels_count\
    \ - $vowels_count_right;\n        $j = $vowels_count_right - $vowels_count_left;\n\
    \        \n        // If both are equal to 0, then return empty string\n     \
    \   if($vowels_count_right == $vowels_count_left) {\n            return \"\";\n\
    \        }\n        \n        $vowel = $vowels[$i];\n        \n        if($j >\
    \ 0 && $j == $vowels_count_left) {\n            return $vowel;\n        } else\
    \ {\n            return $vowel;\n        }\n    }\n    \n    if($vowels_count_left\
    \ > $vowels_count_right && $vowels_count_left > $vowels_count_right) {\n     \
    \   \n        $i = $vowels_count - $vowels_count_right;\n        $j = $vowels_count_left\
    \ - $vowels_count_left;\n        \n        // If both are equal to 0, then return\
    \ empty string\n        if($vowels_count_right == $vowels_count_left) {\n    \
    \        return \"\";\n        }\n        \n        $vowel = $vowels[$i];\n  \
    \      \n        if($j > 0 && $j == $vowels_count_right) {\n            return\
    \ $vowel;\n        } else {\n            return $vowel;\n        }\n    }\n  \
    \  \n    if($vowels_count_left < $vowels_count_right) {\n        \n        $i\
    \ = $vowels_count_left;\n        $j = $vowels_count - $vowels_count_right;\n \
    \       \n        // If both are equal to 0, then return empty string\n      \
    \  if($vowels_count_right == $vowels_count_left) {\n            return \"\";\n\
    \        }\n        \n        $vowel = $vowels[$i];\n        \n        if($j >\
    \ 0 && $j == $vowels_count_left) {\n            return $vowel;\n        } else\
    \ {\n            return $vowel;\n        }\n    }", "    $vowels = ['a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    $vowels = array_flip($vowels);\n\
    \    $vowelsReversed = array_flip($vowels);\n    $vowelsReversed['u'] = 'U';\n\
    \    $vowelsReversed['U'] = 'u';\n    foreach ($vowels as $key => $value) {\n\
    \        if (preg_match('/.{5}'.$key.'.{5}/i', $word)) {\n            $wordLength\
    \ = $key+2;\n            $char = $key;\n            $nextChar = $key;\n      \
    \      $found = false;\n            $vowel = $value;\n            $vowelPosition\
    \ = null;\n            for ($i = 0; $i < $wordLength; $i++) {\n              \
    \  if ($nextChar === strlen($word) - 1) {\n                    break;\n      \
    \          }\n                if ($word[$nextChar] === $value) {\n           \
    \         if ($vowelPosition === null) {\n                        $vowelPosition\
    \ = $i;\n                    }\n                    if ($vowelPosition > $i) {\n\
    \                        $vowelPosition = $i;\n                    }\n       \
    \             $found = true;\n                }\n                $nextChar++;\n\
    \            }\n            if ($vowelPosition !== null) {\n                return\
    \ $vowels[$vowelPosition];\n            }\n        }\n    }\n    return '';\n\
    }\n", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $left_consonants = explode(\"\
    \ \", $word);\n    $right_consonants = array_reverse($left_consonants);\n    $vowels_found\
    \ = array_intersect($vowels, $left_consonants);\n    return array_shift($vowels_found);\n\
    }\n", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $vowelCount = count($vowels);\n\
    \    foreach ($word as $key => $value) {\n        if ($key > 0) {\n          \
    \  if ($key % 2 != 0 && $key < $vowelCount) {\n                if ($vowels[$key]\
    \ == $value) {\n                    return $vowels[$key];\n                }\n\
    \            }\n        }\n    }\n    return \"\";\n}\necho get_closest_vowel(\"\
    yogurt\") . \"\\n\";\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"\
    quick\") . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";", "    // Your\
    \ code goes here\n    $vowels_array = array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"\
    );\n    $vowel_positions = array_keys(array_flip($vowels_array));\n    \n    $word\
    \ = $word;\n    $vowel_positions = array_flip($vowel_positions);\n    \n    \n\
    \    $first_position = null;\n    $last_position = null;\n    \n    foreach($vowel_positions\
    \ as $position => $value) {\n        if($value > 0){\n            if($first_position\
    \ === null){\n                $first_position = $position;\n            }else{\n\
    \                $last_position = $position;\n            }\n        }\n    }\n\
    \    \n    if($first_position === null){\n        return \"\";\n    }\n    \n\
    \    if($first_position === $last_position){\n        return $vowels_array[$first_position];\n\
    \    }\n    \n    $first_vowel = $vowels_array[$first_position];\n    $second_vowel\
    \ = $vowels_array[$last_position];\n    $third_vowel = $vowels_array[$first_position-1];\n\
    \    \n    $vowels_array = array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\");\n    \n\
    \    if($first_vowel == $second_vowel){\n        return $first_vowel;\n    }\n\
    \    \n    if($first_vowel == $third_vowel){\n        return $second_vowel;\n\
    \    }\n    \n    if($second_vowel == $third_vowel){\n        return $first_vowel;\n\
    \    }\n    \n    return \"\";\n}\n\necho \"<pre>\";\nprint_r(get_closest_vowel(\"\
    yogurt\"));\nprint_r(get_closest_vowel(\"FULL\"));\nprint_r(get_closest_vowel(\"\
    quick\"));\nprint_r(get_closest_vowel(\"ab\"));", "    \n    // return empty string\
    \ if word is null or empty\n    if ($word == null || $word == \"\") {\n      \
    \  return \"\";\n    }\n\n    // remove all vowels from given word\n    $word\
    \ = preg_replace(\"/[AEIOUaeiou]/\", \"\", $word);\n\n    // search the string\
    \ and find vowels between two consonants.\n    // get the first and last consonant\
    \ of given word\n    $lastConsonant = substr($word, -2, 1);\n    $firstConsonant\
    \ = substr($word, 0, 1);\n\n    // find the vowel\n    $vowel = preg_grep(\"/^[aeiou]$/\"\
    , explode($firstConsonant, $word));\n\n    // return the first found vowel\n \
    \   if ($vowel && count($vowel) > 0) {\n        return array_shift($vowel);\n\
    \    }\n\n    // if there is no vowel between two consonants, return the first\
    \ one\n    if (count($vowel) == 0) {\n        return array_shift($vowel);\n  \
    \  }\n\n    // if there are more than one vowels between two consonants, find\
    \ the one that stands between them\n    $vowels = [];\n    $consonants = preg_grep(\"\
    /[aeiou]$/\", explode($firstConsonant, $word));\n    foreach ($consonants as $c)\
    \ {\n        $vs = preg_grep(\"/^[aeiou]$/\", explode($c, $word));\n        foreach\
    \ ($vs as $v) {\n            $vowels[] = $v;\n        }\n    }\n\n    // return\
    \ the first vowel that stands between the two consonants\n    if (count($vowels)\
    \ > 0) {\n        return $vowels[array_search(strrev($lastConsonant), strrev($vowels[0]))];\n\
    \    }\n\n    // if there are not enough vowels between two consonants, return\
    \ the first one\n    if (count($vowels) < 2) {\n        return array_shift($vowels);\n\
    \    }\n\n    // if there are more vowels between two consonants, but we can't\
    \ find two consonants \n    // that stands between them, return the first one\n\
    \    if (count($vowels) == 2) {\n        return array_shift($vowels);\n    }\n\
    \n    // if there are more vowels between two consonants, but we can't find two\
    \ consonants \n    // that stands between them, return the first one\n    if (count($vowels)\
    \ > 2) {\n        return array_shift($vowels);\n    }\n\n    // if there are more\
    \ vowels between two consonants, but we can't find two consonants \n    // that\
    \ stands between them, return the first one\n    if (count($vowels) < 2) {\n \
    \       return array_shift($vowels);\n    }\n\n    // if there are more vowels\
    \ between two con", "    // Write your code here\n    $vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    \n    foreach ($vowels as $v){\n        if(strrpos($word, $v)\
    \ !== FALSE){\n            $r1 = strrpos($word, $v) + 1;\n            $r2 = strrpos($word,\
    \ $v, $r1);\n            $r = $r2 - $r1;\n            echo $v;\n            break;\n\
    \        }\n    }\n}\n", "    return '';\n}\n", "    if ($word === \"\") {\n \
    \       return \"\";\n    }\n\n    $vowels = [\n        'a',\n        'e',\n \
    \       'i',\n        'o',\n        'u',\n        'o',\n        'a'\n    ];\n\n\
    \    $arr = str_split($word);\n\n    for ($i = count($arr) - 1; $i >= 0; $i--)\
    \ {\n        if ($arr[$i] == $vowels[0]) {\n            return $vowels[1];\n \
    \       } else if ($arr[$i] == $vowels[1]) {\n            return $vowels[2];\n\
    \        } else if ($arr[$i] == $vowels[2]) {\n            return $vowels[3];\n\
    \        } else if ($arr[$i] == $vowels[3]) {\n            return $vowels[4];\n\
    \        } else if ($arr[$i] == $vowels[4]) {\n            return $vowels[5];\n\
    \        } else if ($arr[$i] == $vowels[5]) {\n            return $vowels[6];\n\
    \        } else if ($arr[$i] == $vowels[6]) {\n            return $vowels[7];\n\
    \        } else if ($arr[$i] == $vowels[7]) {\n            return $vowels[8];\n\
    \        } else if ($arr[$i] == $vowels[8]) {\n            return $vowels[9];\n\
    \        } else if ($arr[$i] == $vowels[9]) {\n            return $vowels[10];\n\
    \        } else if ($arr[$i] == $vowels[10]) {\n            return $vowels[11];\n\
    \        } else if ($arr[$i] == $vowels[11]) {\n            return $vowels[12];\n\
    \        } else if ($arr[$i] == $vowels[12]) {\n            return $vowels[13];\n\
    \        } else if ($arr[$i] == $vowels[13]) {\n            return $vowels[14];\n\
    \        } else if ($arr[$i] == $vowels[14]) {\n            return $vowels[15];\n\
    \        } else if ($arr[$i] == $vowels[15]) {\n            return $vowels[16];\n\
    \        } else if ($arr[$i] == $vowels[16]) {\n            return $vowels[17];\n\
    \        } else if ($arr[$i] == $vowels[17]) {\n            return $vowels[18];\n\
    \        } else if ($arr[$i] == $vowels[18]) {\n            return $vowels[19];\n\
    \        } else if ($arr[$i] == $vowels[19]) {\n            return $vowels[20];\n\
    \        } else if ($arr[$i] == $vowels[20]) {\n            return $vowels[21];\n\
    \        } else if ($arr[$i] == $vowels[21]) {\n            return $vowels[22];\n\
    \        } else if ($arr[$i] == $vowels[22]) {\n            return $vowels[23];\n\
    \        } else if ($arr[$i] == $vowels[23]) {\n            return $vowel", " \
    \   if (strlen($word)<2) return \"\";\n    \n    $vowels=array('a','e','i','o','u');\n\
    \    \n    $found=FALSE;\n    foreach ($vowels as $v){\n        if (strpos($word,$v)>0)\
    \ $found=TRUE;\n    }\n    if ($found) return $v;\n    \n    return \"\";\n}\n\
    </code>\nI hope my answer is helpful.\n<|/ a |>\n<| a tags=arrays,php,string dscore=1\
    \ |>\nYou need not use an array. Try this,\n<code>", "    if (preg_match('/[^aeiouAEIOU]/',\
    \ $word)) {\n        return \"\";\n    }\n    $result = '';\n    foreach (str_split($word)\
    \ as $k => $v) {\n        if ($v == 'a' || $v == 'e' || $v == 'i' || $v == 'o'\
    \ || $v == 'u') {\n            $result .= $v;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,substring,string |>\n<| c |>\nthanks it's working but\
    \ i need to change \"u\" return to lower case when there is vowel in string so\
    \ what should i do? and i can't understand this line $result .= $v; how it works?\n\
    <|/ c |>\n<| c |>\nHi, I have updated my answer to show how it works. Please review\
    \ it.\n<|/ c |>\n<| a tags=php,substring,string |>\n<code>\n$string = \"ABCD\"\
    ;\n$vowels = \"aeiouAEIOU\";\n\n$first = $string[0];\n$last_char = $string[strlen($string)-1];\n\
    \nif (in_array($last_char, $vowels)) {\n    $new_string = $first . $string[strlen($string)-1];\n\
    } else {\n    $new_string = $first_char;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\nI would use regex to do this. To match each vowel you can use this\
    \ regex:\n<code>\n/[aeiou]\n</code>\nTo get you the last character you can use\
    \ this regex:\n<code>\n/[^aeiou]\n</code>\nYou might want to read up on regex,\
    \ and learn how to use them and how they work. Regex's are pretty fun!\n<|/ a\
    \ tags=php,substring,string |>\n<| a tags=php,substring,string |>\n<code>", " \
    \   $vowel_arr = array(\"a\",\"e\",\"i\",\"o\",\"u\");\n    $vowel_left_arr =\
    \ array(\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\"\
    ,\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\");\n    $vowel_right_arr\
    \ = array(\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\");\n    \n    $word_arr\
    \ = explode(\" \", $word);\n    \n    $vowel_left_length = count($vowel_left_arr);\n\
    \    $vowel_right_length = count($vowel_right_arr);\n    \n    for($i = 0; $i\
    \ < count($word_arr); $i++) {\n        $word_arr[$i] = str_replace($vowel_left_arr,\
    \ $vowel_arr, $word_arr[$i]);\n        $word_arr[$i] = str_replace($vowel_arr,\
    \ $vowel_right_arr, $word_arr[$i]);\n        \n        if ($vowel_arr == $vowel_right_arr)\
    \ {\n            break;\n        }\n    }\n\n    if (count($word_arr) > $vowel_left_length\
    \ && count($word_arr) > $vowel_right_length) {\n        $vowel_left = $word_arr[$vowel_left_length];\n\
    \        $vowel_right = $word_arr[$vowel_right_length];\n\n        $i = 1;\n \
    \       $found = false;\n        \n        while (!$found && $i < count($word_arr))\
    \ {\n            if ($word_arr[$i] == $vowel_left) {\n                $found =\
    \ true;\n            } else if ($word_arr[$i] == $vowel_right) {\n           \
    \     $found = true;\n            } else {\n                $i++;\n          \
    \  }\n        }\n        \n        if ($found) {\n            return $vowel_left;\n\
    \        }\n    }\n\n    return \"\";\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n\
    <code>\n<?php", "    $vowels = \"aeiouAEIOU\";\n    $vowels_count = count($vowels);\n\
    \    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n        $letter = substr($word,\
    \ $i, 1);\n        if (in_array($letter, $vowels)) {\n            return $letter;\n\
    \        }\n    }\n    return '';\n}\n</code>\n<|/ a |>\n<| c |>\nThank you so\
    \ much, this is so helpful.\n<|/ c |>\n<| c |>\nIf you can give me a hint about\
    \ how to do this but keep it case sensitive, I will be very grateful.\n<|/ c |>\n\
    <| c |>\nYou could simply change the `in_array` statement to `stripos`, then change\
    \ `stripos($letter, $vowels)` to `stripos($letter, $vowels, true`. But since you\
    \ only need it to return case sensitivity, this would be overkill. However, if\
    \ you need the function to work in other languages, this may be useful in that\
    \ case.\n<|/ c |>\n<| c |>\nIt would be interesting to see if the `stripos` solution\
    \ was more efficient than my `preg_match` solution. (Not saying that it is --\
    \ just thinking out loud.)\n<|/ c |>\n<| a tags=php |>\nYour script will never\
    \ end since $i is never smaller than 0. Your script only checks the last character\
    \ of your string but this does not allow the function to detect if the first character\
    \ of the string is a vowel.\nYou might want to replace $i <= strlen($word) with\
    \ $i < strlen($word), but this will give unexpected results.\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nYour script will never end since $i is never smaller than 0.\n\
    <|/ a tags=php |>\n<| a tags=php |>\n<code>\n<?php\n", "    $vowels = ['a','e','i','o','u'];\n\
    \    $vowel_count = count($vowels);\n    $first_con = substr($word, 0, 1);\n \
    \   $last_con = substr($word, -1, 1);\n\n    for($i = 0; $i < $vowel_count; $i++)\
    \ {\n        if(substr($word,$i,1) == $first_con) {\n            \n          \
    \  break;\n        }\n    }\n\n    for($i = 0; $i < $vowel_count; $i++) {\n  \
    \      if(substr($word,$vowel_count + $i,1) == $last_con) {\n            \n  \
    \          break;\n        }\n    }\n\n    for($i = 1; $i < $vowel_count; $i++)\
    \ {\n        if(strpos($vowels,substr($word,$i,1)) > 0) {\n            \n    \
    \        break;\n        }\n    }\n\n    if(strpos($vowels,substr($word,$vowel_count,1))\
    \ > 0) {\n        \n        return substr($word,$vowel_count,1);\n    }\n\n  \
    \  return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php |>\nHere\
    \ is an alternative solution, where you get the vowel count from right and check\
    \ if it is less than 3, then you get the first and last consonant from string\
    \ and get the vowel from there.\n<code>\n$consonants = 'bcdfghjklmnpqrstvwxyz';\
    \ //consonants list\n$vowels = 'aeiou';  // vowels list\n$length = (strlen($word)\
    \ - 1);\n$vowel_count = count(str_split($word[$length])); //get vowel count from\
    \ right\nif($vowel_count < 3) //check if more than 2 vowels\n{\n    $first_consonant\
    \ = substr($word, 0, 1);\n    $last_consonant = substr($word, $length-1);\n  \
    \  $vowel_check = strpos($vowels, $first_consonant);\n    $vowel_check2 = strpos($vowels,\
    \ $last_consonant);\n    if($vowel_check && $vowel_check2) // if both positions\
    \ found\n    {\n        return substr($word, $vowel_check, $vowel_check2); //\
    \ return the one from position\n    }\n    else\n    {\n        return \"\";\n\
    \    }\n}\nelse\n{\n    $first_consonant = substr($word, 0, 1);\n    $last_consonant\
    \ = substr($word, $length-1);\n    $vowel_check = strpos($vowels, $first_consonant);\n\
    \    $vowel_check2 = strpos($vowels, $last_consonant);\n    if($vowel_check &&\
    \ $", "    // your code here\n}\n", "   $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \   $vowel_count = array_count_values($vowels);\n   $consonant_count = array_count_values(str_split($word));\n\
    \   $vowel_keys = array_keys($vowel_count);\n   $consonant_keys = array_keys($consonant_count);\n\
    \   foreach($vowel_keys as $key => $value) \n   {\n       if($vowel_count[$value]>$consonant_count[$key])\
    \ \n       {\n           return $value;\n       }\n   }\n   return \"\";\n}\n",
  "    if (empty($word)) {\n        return '';\n    }\n    \n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    \n    for ($i = 0; $i < strlen($word); $i++) {\n \
    \       \n        if (in_array($word[$i], $vowels)) {\n            $vowel_pos\
    \ = $i;\n            break;\n        }\n    }\n\n    $vowel_pos = $i + 1;\n  \
    \  $vowel_pos = $vowel_pos < strlen($word) ? $vowel_pos : -1;\n    \n    for ($i\
    \ = $vowel_pos; $i < strlen($word); $i++) {\n        \n        if (in_array($word[$i],\
    \ $vowels)) {\n            $vowel_pos = $i;\n            break;\n        }\n \
    \   }\n    \n    if ($vowel_pos == -1) {\n        return '';\n    }\n    \n  \
    \  for ($i = $vowel_pos; $i < strlen($word); $i++) {\n        \n        if (in_array($word[$i],\
    \ $vowels)) {\n            return $word[$i];\n        }\n    }\n}\n</code>\n<|/\
    \ a tags=php,string,algorithm |>\n<| c |>\nThanks , your solution worked! i will\
    \ try to understand your code and try to understand your solution. Thanks again\
    \ for your help.\n<|/ c |>\n<| a tags=php,string,algorithm |>\n<code>", "    $vowels\
    \ = [\n        'a',\n        'e',\n        'i',\n        'o',\n        'u',\n\
    \    ];\n    $consonants = [\n        'b',\n        'c',\n        'd',\n     \
    \   'f',\n        'g',\n        'h',\n        'j',\n        'k',\n        'l',\n\
    \        'm',\n        'n',\n        'p',\n        'q',\n        'r',\n      \
    \  's',\n        't',\n        'v',\n        'w',\n        'x',\n        'y',\n\
    \        'z',\n    ];\n    $word = str_split($word);\n    $word1 = array_reverse($word);\n\
    \    foreach ($word1 as $key => $value) {\n        if (in_array($value, $vowels))\
    \ {\n            return $value;\n        }\n        if (in_array($value, $consonants))\
    \ {\n            unset($word1[$key]);\n        }\n    }\n    return \"\";\n}\n",
  "    if (empty($word)) {\n        return '';\n    }\n    $vowels = ['a','e','i','o','u'];\n\
    \    $len = strlen($word);\n    for ($i = 1; $i < $len; $i++) {\n        $currentChar\
    \ = $word[$i];\n        $next_char = substr($word, $i+1);\n        if (in_array(strtolower($currentChar),\
    \ $vowels) || in_array(strtolower($next_char), $vowels)) {\n            return\
    \ $currentChar;\n        }\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm\
    \ |>\n<code>", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $right_consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    $left_consonants = ['A', 'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    for($i = 0; $i < strlen($word); $i++) {\n        $vowel_found\
    \ = false;\n        $right_consonant_found = false;\n        $left_consonant_found\
    \ = false;\n        foreach($vowels as $v) {\n            if($word[$i] == $v)\
    \ {\n                $vowel_found = true;\n                break;\n          \
    \  }\n        }\n        if($vowel_found && $word[$i] == $right_consonants[strrpos($right_consonants,\
    \ $word[$i])]) {\n            $right_consonant_found = true;\n        }\n    \
    \    if($vowel_found && $word[$i] == $left_consonants[strrpos($left_consonants,\
    \ $word[$i])]) {\n            $left_consonant_found = true;\n        }\n     \
    \   if($left_consonant_found && $right_consonant_found) {\n            return\
    \ $word[$i];\n        }\n    }\n    return \"\";\n}\n", "    \n    for($i=strlen($word)-1;$i>0;$i--)\
    \ {\n        if(isVowel($word[$i])) {\n            return $word[$i];\n       \
    \ }\n    }\n    return \"\";\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    for($i=count($vowels)-1;$i>=0;$i--){\n        if(strpos($word,$vowels[$i])===false){\n\
    \            array_pop($vowels);\n        }\n    }\n    $vowel = array_pop($vowels);\n\
    \    return $vowel;\n}\n", "    if (strlen($word) < 3) return \"\";\n    \n  \
    \  // find the first non-vowel\n    $first = substr($word, 0, strrpos($word, \"\
    U\"));\n    \n    // find the last non-vowel\n    $last = substr($word, strrpos($word,\
    \ \"U\"));\n    \n    // find the next non-vowel after the first non-vowel\n \
    \   $nextFirst = substr($word, strrpos($word, $first) + 1);\n    \n    // find\
    \ the previous non-vowel before the last non-vowel\n    $prevLast = substr($word,\
    \ 0, strrpos($word, $last) - 1);\n    \n    // return vowel between last and next\
    \ non-vowel\n    return substr($word, (strrpos($word, $last) + 1) - ($prevLast\
    \ + $nextFirst));\n}\n</code>\n<|/ a tags=php |>\n<| a |>\n<code>\n$word = \"\
    quick\";\n$vowels = \"aeiou\";\n\n$first_letter_found = 0;\n$last_letter_found\
    \ = 0;\n\n$first_letter_pos = strrpos($word, $vowels, $first_letter_found);\n\n\
    if($first_letter_found < 0){\n    $first_letter_found = 0;\n}\n\n$last_letter_pos\
    \ = strrpos($word, $vowels, $last_letter_found);\n\nif($last_letter_found < 0){\n\
    \    $last_letter_found = 0;\n}\n\nif($last_letter_pos < $first_letter_pos){\n\
    \    $first_letter_pos = $last_letter_pos + 1;\n}\n\n$found_vowel = substr($word,\
    \ $last_letter_pos);\n\necho $found_vowel;\n</code>\n<|/ a tags=php dscore=0 |>\n\
    <| a tags=php |>\n<code>\n<?php\n", "    $vowels = array(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\");\n    $vowels_count = count($vowels);\n    for ($i = 0; $i < $vowels_count;\
    \ $i++) {\n        $consonants = str_split($word, $vowels_count, $i);\n      \
    \  if (in_array($consonants[count($consonants) - 1], $vowels)) {\n           \
    \ return $consonants[count($consonants) - 1];\n        }\n    }\n    return \"\
    \";\n}\n", "    \n    $vowel = array('a','e','i','o','u');\n    \n    $vowel_positions\
    \ = array();\n    \n    $last_consonant = mb_substr($word,-1);\n    \n    foreach($vowel\
    \ as $consonant) {\n        \n        $position = strpos($word, $consonant);\n\
    \        \n        if($position===false) {\n            continue;\n        }\n\
    \        \n        $vowel_positions[] = $position;\n    }\n    \n    arsort($vowel_positions);\n\
    \    \n    $closest_vowel = '';\n    \n    for($i = 0; $i < count($vowel_positions);\
    \ $i++) {\n        \n        if($vowel_positions[$i] < count($word)) {\n     \
    \       \n            $closest_vowel = $vowel[$i];\n            break;\n     \
    \   }\n    }\n    \n    return $closest_vowel;\n}\n", "\t$word = strtolower($word);\n\
    \t\n\tif ($word == \"\") return \"\";\n\t\n\t$vowels = \"aeiou\";\n\t$vowels =\
    \ str_split($vowels);\n\t\n\t$len = strlen($word);\n\tif ($len == 0) return \"\
    \";\n\t\n\tfor($i = 0; $i < $len; $i++) {\n\t\t$found = false;\n\t\t$j = $len\
    \ - 1;\n\t\t\n\t\twhile($j > $i) {\n\t\t\tif (strpos($vowels, $word[$j-1]) ===\
    \ false) break;\n\t\t\t$j--;\n\t\t}\n\t\t\n\t\t$found = true;\n\t\t\n\t\twhile($j\
    \ >= $i) {\n\t\t\tif (strpos($vowels, $word[$i+1]) === false) break;\n\t\t\t$j--;\n\
    \t\t}\n\t\t\n\t\tif ($j >= $i && $found === true) {\n\t\t\treturn $word[$i];\n\
    \t\t}\n\t}\n\t\n\treturn \"\";\n}\n", "    $vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    $strLen = strlen($word);\n    $vowelIndex = 0;\n    $vowelCount\
    \ = 0;\n    $vowelEnd = 0;\n    $vowelStart = 0;\n    for ($i = 0; $i < $strLen;\
    \ $i++) {\n        if ($vowelIndex >= sizeof($vowels)) return \"\";\n        $char\
    \ = $word[$i];\n        if ($char == $vowels[$vowelIndex]) {\n            $vowelCount++;\n\
    \            $vowelIndex++;\n            if ($vowelCount == 2) {\n           \
    \     $vowelEnd = $i;\n                $vowelStart = $vowelEnd;\n            }\n\
    \        }\n        else {\n            $vowelIndex = 0;\n        }\n    }\n \
    \   if ($vowelCount < 2) return \"\";\n    $vowelLength = $vowelEnd - $vowelStart\
    \ + 1;\n    $vowelCount = $strLen - $vowelStart;\n    $vowelStart = $vowelEnd\
    \ - $vowelLength;\n    if ($vowelStart < 0) return \"\";\n    if ($vowelStart\
    \ >= $vowelCount) return \"\";\n    return $word[$vowelStart];\n}\n</code>\n<|/\
    \ a tags=algorithm,php dscore=0 |>\n<| a dscore=0 tags=algorithm,php |>\n<code>",
  "    $arr1 = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\",\"E\", \"I\", \"O\"\
    , \"U\");\n    $arr2 = array(\"b\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"B\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\");\n    $arr3 = array(\"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"C\", \"D\", \"F\", \"G\", \"H\"\
    , \"J\", \"K\");\n    $arr4 = array(\"z\", \"x\", \"y\", \"z\", \"x\", \"y\",\
    \ \"z\", \"x\", \"y\", \"z\", \"x\", \"y\", \"z\", \"x\", \"y\", \"z\");\n   \
    \ $arr5 = array(\"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"S\"\
    , \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\");\n    $arr6 = array(\"r\",\
    \ \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"R\", \"S\", \"T\"\
    , \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\");\n    $arr7 = array(\"s\", \"t\",\
    \ \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $arr8 =\
    \ array(\"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\",\
    \ \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\", \"s\", \"t", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'];\n\n    // Iterate over word and check each letter\
    \ for vowels\n    foreach(str_split($word) as $letter) {\n        if(in_array($letter,\
    \ $vowels)) {\n            return $letter;\n        }\n    }\n\n    // Iterate\
    \ over word and check each letter for consonants\n    foreach(str_split($word)\
    \ as $letter) {\n        if(in_array($letter, $consonants)) {\n            $right_consonant_index\
    \ = strrpos($word, strtolower($letter));\n            if($right_consonant_index\
    \ === false) {\n                return \"\";\n            }\n\n            //\
    \ Get right side of given letter\n            $right_consonant = substr($word,\
    \ $right_consonant_index);\n\n            // Check if right side has vowel\n \
    \           $right_vowel_index = strrpos($right_consonant, 'a');\n           \
    \ if($right_vowel_index === false) {\n                return \"\";\n         \
    \   }\n\n            // Get right side of vowel\n            $right_vowel = substr($right_consonant,\
    \ $right_vowel_index);\n\n            // If right side is a vowel, return it\n\
    \            if(in_array($right_vowel, $vowels)) {\n                return $right_vowel;\n\
    \            }\n        }\n    }\n\n    // Return if nothing is found\n    return\
    \ \"\";\n}\n</code>\n<|/ a tags=string,php |>\n<| c |>\nThe function doesn't work\
    \ if a vowel appears at the beginning of the word. For example `get_closest_vowel(\"\
    Abracadabra\") ==> \"a\"` but `get_closest_vowel(\"Bacadabra\") ==> \"\"`\n<|/\
    \ c |>\n<| c |>\nYeah, this one worked perfectly for me!  Thank you!  It was driving\
    \ me crazy!\n<|/ c |>\n<| c |>\nI fixed the problem with `get_closest_vowel(\"\
    Abracadabra\")` which returns `a`. Thank you for mentioning this.\n<|/ c |>\n\
    <| c |>\nI tested the updated function and it works well for the original question,\
    \ although it took me a while to understand it completely. I'm glad it's working\
    \ for the OP.\n<|/ c |>\n<| c |>\nThank you for pointing this out. I've updated\
    \ the function and added comments to explain what I did.\n<|/ c |>\n<| a |>\n\
    This should do the job:\n<code>", "    \n    // Your code here\n    // $vowels\
    \ = \"aeiouyAEIOUY\";\n    // $vowels = \"aeiou\";\n    $vowels = \"aeiou\";\n\
    \    // $vowels = \"uy\";\n    // $vowels = \"aeo\";\n    // $vowels = \"Aeiou\"\
    ;\n    // $vowels = \"AEIOU\";\n    // $vowels = \"AEIO\";\n    // $vowels = \"\
    Aeio\";\n    // $vowels = \"AEo\";\n    // $vowels = \"AEIOU\";\n    // $vowels\
    \ = \"Aeio\";\n    // $vowels = \"AEo\";\n    // $vowels = \"Aeio\";\n    // $vowels\
    \ = \"AEIOU\";\n    // $vowels = \"Aeio\";\n    // $vowels = \"Aeio\";\n    //\
    \ $vowels = \"Aeio\";\n    // $vowels = \"aeo\";\n    // $vowels = \"AEIOU\";\n\
    \    // $vowels = \"AEIO\";\n    // $vowels = \"Aeio\";\n    // $vowels = \"Aeio\"\
    ;\n    // $vowels = \"AEio\";\n    // $vowels = \"Aeio\";\n    // $vowels = \"\
    Aeio\";\n    // $vowels = \"aei\";\n    // $vowels = \"Aeio\";\n    // $vowels\
    \ = \"AEio\";\n    // $vowels = \"Aeio\";\n    // $vowels = \"aei\";\n    // $vowels\
    \ = \"aei\";\n    // $vowels = \"aei\";\n    // $vowels = \"AEIU\";\n    // $vowels\
    \ = \"AEIO\";\n    // $vowels = \"Aeio\";\n    // $vowels = \"Aeio\";\n    //\
    \ $vowels = \"AEiO\";\n    // $vowels = \"AEIO\";\n    // $vowels = \"aeo\";\n\
    \    // $vowels = \"AEIU\";\n    // $vowels = \"Aeio\";\n    // $vowels = \"Aeio\"\
    ;\n    // $vowels = \"AEIU\";\n    // $vowels = \"Aeio\";\n    // $vowels = \"\
    Aeio\";\n    // $vowels = \"AEIU\";\n    // $vowels = \"Aeio\";\n    // $vowels\
    \ = \"Aeio\";\n    // $vowels = \"AEio\";\n    // $vowels = \"Aeio\";\n    //\
    \ $vowels = \"aeo\";\n    // $vowels = \"AEIOU\";\n    // $vowels = \"AEIO\";\n\
    \    // $vowels = \"Aeio\";\n    // $vowels = \"Aeio\";\n    // $vowels = \"AEio\"\
    ;\n    // $vowels = \"Aeio\";\n    // $vowel", "\t$vowels = ['a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'];\n\tfor ($i = strlen($word) - 2; $i >= 0; $i--)\
    \ {\n\t\t$cons = substr($word, $i, 1);\n\t\t$vowels_found = array();\n\t\tfor\
    \ ($j = 1; $j < strlen($word); $j++) {\n\t\t\tif ($cons != substr($word, $j, 1))\
    \ {\n\t\t\t\tif (in_array(substr($word, $j, 1), $vowels)) {\n\t\t\t\t\t$vowels_found[]\
    \ = substr($word, $j, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (count($vowels_found)\
    \ == 0) {\n\t\t\treturn '';\n\t\t} else {\n\t\t\t$closest_vowel = $vowels_found[count($vowels_found)\
    \ - 1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $closest_vowel;\n}", "    $vowel_start\
    \ = array_search(strtolower($word[0]), array('a', 'e', 'i', 'o', 'u'));\n    $vowel_end\
    \ = array_search(strtolower($word[strlen($word) - 1]), array('a', 'e', 'i', 'o',\
    \ 'u'));\n    return $word[$vowel_start] . $word[$vowel_end + 1];\n}\n</code>\n\
    <|/ a tags=string,php,algorithm |>\n<| c |>\nThank you for this code snippet,\
    \ which may provide some immediate help.  A proper explanation [would greatly\
    \ improve](//meta.stackexchange.com/q/114762) its educational value by showing\
    \ *why* this is a good solution to the problem, and would make it more useful\
    \ to future readers with similar, but not identical, questions.  Please [edit]\
    \ your answer to add explanation, and give an indication of what limitations and\
    \ assumptions apply.\n<|/ c |>\n<| c |>\n, I have added some comments explaining\
    \ the algorithm and why you might want to use this solution. You can check it\
    \ out and see if it matches your expectations.\n<|/ c |>\n<| a dscore=2 |>\nI\
    \ thought of another way of doing it. I created a hash map of all the characters\
    \ and their corresponding positions. I then just need to get the value from the\
    \ key using the index.\n<code>\n<?php\n$str = ' ' . $str;\n$arr = str_split($str);\n\
    $hashMap = array();\nforeach ($arr as $key => $value)\n{\n  $hashMap[strtolower($value)]\
    \ = $key;\n}\necho getValue($hashMap, 'e');\n</code>\ngetValue function:\n<code>",
  "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n\
    \    $vowels_last_index = count($vowels) - 1;\n    $vowels_index_from_right =\
    \ $vowels_last_index;\n    foreach($vowels as $index => $value) {\n        $index_from_right\
    \ = strlen($word) - $vowels_index_from_right - 1;\n        $index_from_right =\
    \ min($index_from_right,strlen($word) - 1);\n        if($value == substr($word,\
    \ $index_from_right, $vowels_count)) {\n            $vowels_index_from_right =\
    \ $index;\n            return $value;\n        }\n    }\n    return \"\";\n}",
  "    $words = explode(' ', $word);\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n \
    \   $vowels_count = count($vowels);\n    $vowel_array = [];\n    $vowel_array_count\
    \ = 0;\n    foreach ($words as $key => $value) {\n        $vowel_array[$key] =\
    \ preg_match_all('/[AEIOUaeiou]+/', $value, $matches);\n        foreach ($matches[0]\
    \ as $key => $value) {\n            if ($value == 1) {\n                $vowel_array[$key]\
    \ = 1;\n            }\n        }\n        $vowel_array_count = count($vowel_array);\n\
    \        if ($vowel_array_count > $vowels_count) {\n            array_pop($vowel_array);\n\
    \            $vowel_array_count--;\n        }\n    }\n    foreach ($vowel_array\
    \ as $key => $value) {\n        if ($value == 1) {\n            return $vowels[$key];\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| a |>\n<code>\n/**\n * Return the closest vowel to the beginning of a\
    \ string.\n *\n * string $word The string to check.\n * string $vowel The vowel\
    \ to match to the left of the string.\n * string\n */", "    $vowels = array('a','e','i','o','u','A','E','I','O','U');\n\
    \    $length = strlen($word);\n    $vowels_at_ends = array('z','s','t','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','u','v');\n\
    \    $vowels_at_beginnings = array('b','v','w','t','x','y','z','B','V','W','T','X','Y','Z');\n\
    \    for($i = $length - 1; $i >= 0; $i--) {\n        $letter = $word[$i];\n  \
    \      $consonants = str_split($letter);\n        $consonant_count = $consonants[count($consonants)-1];\n\
    \        \n        if(in_array($consonant_count, $vowels_at_ends) || in_array($consonant_count,\
    \ $vowels_at_beginnings)) {\n            $vowels_at_beginnings = array('b','v','w','t','x','y','z','B','V','W','T','X','Y','Z');\n\
    \            $vowels_at_ends = array('z','s','t','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','u','v');\n\
    \        }\n    }\n    \n    \n    $vowels_at_ends = array('z','s','t','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','u','v');\n\
    \    $vowels_at_beginnings = array('b','v','w','t','x','y','z','B','V','W','T','X','Y','Z');\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    // Return empty string if word is null\n    if (empty($word)) return\
    \ '';\n    \n    // Explode the given word into an array of characters\n    $chars\
    \ = explode(' ', $word);\n\n    // Iterate through each vowel\n    foreach (array('a','e','i','o','u')\
    \ as $vowel) {\n        // If there are vowels left, check each of those vowels\n\
    \        if ( count($chars) > 0 ) {\n            foreach ($chars as $char) {\n\
    \                if ( $char == $vowel ) {\n                    // If the current\
    \ char is equal to the vowel, \n                    // return the vowel at the\
    \ end\n                    return $vowel;\n                }\n            }\n\
    \        }\n    }\n}\n\n$input = 'yogurt';\n$vowel = get_closest_vowel($input);\n\
    \necho $vowel;\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, but I wanted to know\
    \ about how to implement this in php.\n<|/ c |>\n<| c |>\nThanks again, but I\
    \ wanted to know about how to implement this in php.\n<|/ c |>\n<| c |>\nThanks,\
    \ I actually wrote the code in java, and I am just trying to convert it into php,\
    \ that's why I thought of asking the question here.\n<|/ c |>\n<| c |>\nI've updated\
    \ the answer with a PHP example :)\n<|/ c |>\n<| a dscore=0 |>\n<code>", "   \
    \ $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"e\", \"a\", \"o\"\
    , \"u\", \"a\", \"e\", \"e\", \"a\", \"i\", \"i\", \"o\", \"o\", \"u\", \"u\"\
    , \"u\");\n    $word = $word;\n    $length = strlen($word);\n    for($x = 0; $x\
    \ <= $length - 1; $x++) {\n        $a = strpos($vowels, substr($word, $x, 1))\
    \ + 1;\n        $b = strpos($vowels, substr($word, $x, $length)) - 1;\n      \
    \  if($a < $b) {\n            $word[$x] = substr($word, $x, 1);\n        }\n \
    \   }\n    return $word;\n}\n", "    $vowels = \"aeiouAEIOU\";\n    $result =\
    \ \"\";\n    $len = strlen($word);\n    for ($i = $len; $i >= 0; $i--) {\n   \
    \     $char = strtolower($word[$i]);\n        if (in_array($char, $vowels)) {\n\
    \            if ($i > 0) {\n                $prev = $word[$i-1];\n           \
    \     if ($prev >= 'a' && $prev <= 'z') {\n                    $result .= $prev;\n\
    \                }\n            } else {\n                $result = $char;\n \
    \           }\n            break;\n        }\n    }\n    return $result;\n}\n\
    </code>\n<|/ a |>\n<| a tags=string,php dscore=0 |>\nAnother solution without\
    \ using a loop\n<code>\n$string = \"This is some test string\";\n$vowels = \"\
    aeiouAEIOU\";\n$array = str_split($string);\n\n$index = array_search(strtolower($string),\
    \ $vowels);\n\n$newString = substr($string, 0, $index) . strtoupper(substr($string,\
    \ $index+1));\n\nvar_dump($newString);\n</code>\n<|/ a |>\n<| a tags=string,php\
    \ |>\nHere is my approach and solution with explanation. Maybe it helps.\n<code>",
  "\t\n\t$vowel = \"AEIOUYAEIOU\";\n\t$consonant = \"BCDFGHKLMNPQRSTVWXZ\";\n\n\t\n\
    \t$vowel_array = explode(\" \", $vowel);\n\t$consonant_array = explode(\" \",\
    \ $consonant);\n\t\n\t\n\tforeach($vowel_array as $key => $value) {\n\t\tif(preg_match(\"\
    /\\b$value\\b/i\", $word)) {\n\t\t\t$consonant_array = $consonant_array;\n\t\t\
    \tunset($consonant_array[$key]);\n\t\t}\n\t}\n\t\n\t$vowel_array = array_unique($vowel_array);\n\
    \t\n\tforeach($consonant_array as $key => $value) {\n\t\tif(preg_match(\"/\\b$value\\\
    b/i\", $word)) {\n\t\t\t$vowel_array = $vowel_array;\n\t\t\tunset($vowel_array[$key]);\n\
    \t\t}\n\t}\n\t\n\t\n\t\n\tif(count($vowel_array) > 0) {\n\t\t$consonant_array\
    \ = array_unique($consonant_array);\n\t\t\n\t\tforeach($vowel_array as $key =>\
    \ $value) {\n\t\t\tif(preg_match(\"/\\b$value\\b/i\", $word)) {\n\t\t\t\treturn\
    \ $value;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\treturn '';\n\t\n}\n", "    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $consonants = array(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n    $word_length\
    \ = strlen($word);\n    for($i=$word_length; $i; --$i) {\n        if(in_array($word[$i],\
    \ $vowels)) {\n            return $word[$i];\n        }\n    }\n    for($i=1;\
    \ $i<=$word_length; $i++) {\n        if(in_array($word[$i], $consonants)) {\n\
    \            return $word[$i-1];\n        }\n    }\n    return \"\";\n}\n", " \
    \   // Your code here\n    if(strlen($word) == 0){\n        return \"\";\n   \
    \ }\n    $vowels = \"aeiouAEIOU\";\n    $vowels_count = count(str_split($vowels));\n\
    \    for($i = strlen($word)-1; $i >= 0; $i--){\n        if(strpos($vowels, $word[$i])\
    \ !== false){\n            return $word[$i];\n        }\n    }\n}\n</code>\n<|/\
    \ a |>\n<| a tags=arrays,function,php |>\n<code>", "\t$word = strtolower($word);\n\
    \t$vowel_array = array('a', 'e', 'i', 'o', 'u');\n\tfor ($i=count($vowel_array)-1;\
    \ $i>=0; $i--) {\n\t\t$word = str_replace($vowel_array[$i], \"\", $word);\n\t\t\
    if (strlen($word) == 0) return '';\n\t}\n\treturn $vowel_array[strrpos(strtolower($word),\
    \ 'a')+1];\n}\n", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $new_word\
    \ = \"\";\n    foreach ($word as $key => $val) {\n        if (in_array($val, $vowels))\
    \ {\n            if ($key < strlen($word) - 1) {\n                $new_word .=\
    \ $val;\n            }\n            if ($key > 1) {\n                $new_word\
    \ .= $word[$key - 1];\n            }\n        }\n    }\n    return $new_word;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,regex dscore=0 |>\nOne way would be to match\
    \ the end of the string with [a-z]*[^aeiou]+[a-z]. Since [^aeiou] matches anything\
    \ but an a, e, i, o, u character, the regex will match anything which is not an\
    \ a, e, i, o, u character. Then you match any number of characters between [a-z]*\
    \ and [a-z], and finally match any number of characters before a character that\
    \ is not a vowel.\n<code>", "  $vowels = \"aeiouAEIOU\";\n  preg_match('/[^'.$vowels.']/u',\
    \ $word, $match);\n  if (isset($match[0])) {\n    preg_match('/(?<=\\w)(\\W*)(\\\
    w*)/u', $word, $match);\n    if (isset($match[0])) {\n      $match[0][0] = mb_strtolower($match[0][0]);\n\
    \      if ($match[0][0] == 'a') {\n        return 'a';\n      }\n      if ($match[0][0]\
    \ == 'e') {\n        return 'e';\n      }\n      if ($match[0][0] == 'i') {\n\
    \        return 'i';\n      }\n      if ($match[0][0] == 'o') {\n        return\
    \ 'o';\n      }\n      if ($match[0][0] == 'u') {\n        return 'u';\n     \
    \ }\n    }\n  }\n  return '';\n}\n\n/* \n    Question #10\n    By calling get_closest_vowel(),\
    \ you can find the closest vowel for a given word.\n    For example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n*/", "    \n    //\
    \ Your code here\n    $vowels = array('a','e','i','o','u');\n    $result = '';\n\
    \    $vowels_count = count($vowels);\n    $length = strlen($word);\n    \n   \
    \ // Find the vowel to the right of the word.\n    for ($x = $length - 1; $x >=\
    \ 0; $x--) {\n        if ($word[$x] >= 'a' && $word[$x] <= 'z') {\n          \
    \  // If the vowel is found, then break and return the result\n            $result\
    \ = $word[$x];\n            break;\n        }\n    }\n    \n    // If the vowel\
    \ is not found, then return an empty string\n    if ($result == '')\n        return\
    \ $result;\n    \n    // Search for the vowel\n    for ($i = 0; $i < $vowels_count;\
    \ $i++) {\n        $result = '';\n        for ($x = $length - 1; $x >= 0; $x--)\
    \ {\n            if ($word[$x] == $vowels[$i]) { \n                // If the vowel\
    \ is found, then break and return the result\n                $result = $vowels[$i];\n\
    \                break;\n            }\n        }\n        if ($result != '')\n\
    \            break;\n    }\n    \n    // Return the result\n    return $result;\n\
    }\n", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $cons = array('b', 'c',\
    \ 'd', 'f', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'y',\
    \ 'z');\n\n    $vowelsCount = count($vowels);\n    $consCount = count($cons);\n\
    \    $vowelsLeft = $word;\n    $vowelsRight = substr($word, 0, -1);\n    $vowelsRight\
    \ = substr($vowelsRight, 0, -1);\n    \n    $consLeft = substr($word, 0, -1);\n\
    \    $consRight = substr($word, 0, -1);\n    \n    for($i = 0; $i < count($word);\
    \ $i++) {\n        if($word[$i] == $cons[$consCount-1]) {\n            if(($consLeft[$i]\
    \ == $vowels[$vowelsCount-1]) || ($consRight[$i] == $vowels[$vowelsCount-1]))\
    \ {\n                return $vowels[$vowelsCount-1];\n            }\n        \
    \    $consCount--;\n        }\n    }\n    return '';\n}\n\n$input = \"FULL\";\n\
    echo get_closest_vowel($input);\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    /**\n * Returns the closest vowel from the right side\n * string $word the word\n\
    \ * string $vowel the vowel to be returned\n * string $count the length of the\
    \ vowel to be returned\n * bool|false false if no vowel is found\n * bool|false\
    \ false if one of the two vowels are in the middle of the word\n * bool|false\
    \ false if one of the two vowels are not in the middle of the word\n * bool|false\
    \ false if one of the two vowels are not in the middle of the word\n */", "  \
    \  $vowels = array('a', 'e', 'i', 'o', 'u');\n    foreach($vowels as $vowel) {\n\
    \        $right_side = strrev($word);\n        if (substr($right_side, 0, strlen($word)\
    \ - strlen($vowel)) === $vowel) {\n            return $vowel;\n        }\n   \
    \ }\n    return '';\n}\n</code>\n<|/ a dscore=1 tags=php |>\n<| c |>\nIt should\
    \ be noted that `substr()` will return the rest of the string after the first\
    \ character match, which will require a second `substr()` call to trim off that\
    \ first character from the second call. `strrev()` is more efficient as it doesn't\
    \ require additional memory to reverse the string, but it's worth noting that\
    \ the additional `substr()` calls could easily be replaced with `strchr()` and\
    \ a string reversal if the first character match is more important than the string\
    \ trimming.\n<|/ c |>\n<| c |>\n: Yes, I agree `strrev()` is more efficient because\
    \ you don't need additional memory, but here I guess it depends on the input string.\
    \ Anyway, I'll add that comment to my answer. Thanks.\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere is another way to get the vowel from the right side:\n<code>", "  \
    \  // Initialize vowels array\n    $vowels = array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\");\n    $vowels = array_flip($vowels);\n    // Initialize index\n\
    \    $index = count($vowels) - 1;\n    // Loop to find the vowel met requirement\n\
    \    for ($i = $index; $i >= 0; $i--) {\n        if ($word[$i] === 'a' || $word[$i]\
    \ === 'e' || $word[$i] === 'i' || $word[$i] === 'o' || $word[$i] === 'u') {\n\
    \            $index = $i;\n            break;\n        }\n    }\n    // Return\
    \ the vowel found in loop\n    return $vowels[$index];\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis is actually a very good solution. I did a similar one except\
    \ I used the explode function and just compared every letter to the last letter.\
    \ It was a bit tricky, but once you get used to using explode and for loops it\
    \ will make sense!\n<|/ c |>\n<| a dscore=0 tags=php,arrays,string |>\n<code>\n\
    $vowels = 'aeiouy';\n", "    // Write your code here\n    \n    $vowels = array('a','e','i','o','u');\n\
    \    \n    $right_side = str_split($word,-1);\n    \n    $vowels_array = array();\n\
    \    \n    foreach($vowels as $vowel){\n        if(in_array($vowel,$right_side)){\n\
    \            array_push($vowels_array,$vowel);\n        }\n    }\n    \n    if(count($vowels_array)\
    \ == 0){\n        return \"\";\n    }\n    \n    $vowel_found = false;\n    \n\
    \    foreach($vowels_array as $vowel){\n        if(strlen($word) == strlen($word)\
    \ - strlen($vowel)){\n            if($word[$strlen($word) - strlen($vowel)] ==\
    \ $vowel){\n                $vowel_found = true;\n                break;\n   \
    \         }\n        }\n    }\n    \n    if(!$vowel_found){\n        return \"\
    \";\n    }\n    \n    for($i=strlen($word) - strlen($vowel_array[0]); $i<strlen($word);\
    \ $i++){\n        if($word[$i] == $vowel_array[0]){\n            return $vowel_array[0];\n\
    \        }\n    }\n    \n}\n</code>\n<|/ a |>\n<| c |>\nThis looks really helpful,\
    \ I will have a go with this. Thank you!\n<|/ c |>\n<| a tags=string,php,algorithm\
    \ |>\nYou can try with this code :\n<code>", "    $vowels = array('a', 'e', 'i',\
    \ 'o', 'u');\n    $letters = str_split($word);\n    $index = count($letters)-1;\n\
    \    foreach ($letters as $letter) {\n        $index--;\n        if (($index >\
    \ 0) && ($letter == $letters[$index])) {\n            if (in_array($letter, $vowels))\
    \ {\n                return $letter;\n            }\n        } else {\n      \
    \      break;\n        }\n    }\n    return \"\";\n}\n", "    $vowels = [];\n\
    \    $vowels_l = ['u', 'o', 'a', 'e', 'i', 'o', 'u'];\n\n    $wordArr = str_split($word);\n\
    \    $consonants = array_slice($wordArr, -2, 2);\n\n    foreach ($consonants as\
    \ $consonant) {\n        $index = array_search($consonant, $vowels_l);\n     \
    \   if ($index !== FALSE) {\n            $vowels[] = $vowels_l[$index];\n    \
    \    } else {\n            break;\n        }\n    }\n\n    return implode('',\
    \ $vowels);\n}\n</code>\n<|/ a tags=string,algorithm,php dscore=2 |>\n<| a tags=string,algorithm,php\
    \ |>\nI really appreciate the people who have written their own solutions.\nI\
    \ ended up writing my own solution and it works fine.\nBut since you asked I wrote\
    \ it up.\n<code>\n<?php\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $count\
    \ = 0;\n\n    $len = strlen($word);\n    $last_vowel = strtolower(substr($word,\
    \ 0, $len-1));\n    \n    foreach($vowels as $vowel) {\n        if($last_vowel\
    \ == $vowel) {\n            $count++;\n        }\n    }\n    \n    if ($count\
    \ == 0) {\n        return \"\";\n    }\n    \n    $index = ($len-2) / 3;\n   \
    \ $i = $len - 1;\n    \n    while($i > 0 && !in_array($word[$i-1], $vowels)) {\n\
    \        $i--;\n    }\n    \n    while($i >= 0 && !in_array($word[$i], $vowels))\
    \ {\n        $i++;\n    }\n\n    while($i < $len - 1 && !in_array($word[$i+1],\
    \ $vowels)) {\n        $i++;\n    }\n    \n    return $vowels[($index * 3) - 1];\n\
    }", "    $vowels = array('a','e','i','o','u');\n    $len = strlen($word);\n  \
    \  $i = 0;\n    $j = -1;\n    $result = '';\n    while($len > 0) {\n        $i++;\n\
    \        if($i == strlen($word)) {\n            $j--;\n            $len--;\n \
    \       } else {\n            $j++;\n            $len--;\n        }\n        if($j\
    \ == 0) {\n            for($k = $i; $k < $j; $k++) {\n                $vowel =\
    \ substr($word, $k, 1);\n                if(in_array($vowel, $vowels)) {\n   \
    \                 $result = $vowel;\n                    break;\n            \
    \    }\n            }\n        }\n        if($i == $j && $j != 0) {\n        \
    \    for($k = $i; $k >= 0; $k--) {\n                $vowel = substr($word, $k,\
    \ 1);\n                if(in_array($vowel, $vowels)) {\n                    $result\
    \ = $vowel;\n                    break;\n                }\n            }\n  \
    \      }\n    }\n    return $result;\n}\n", "    $vowels = array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, 1);\n    $vowels_count = min($vowels_count, $word);\n \
    \   $i = 0;\n    while(true) {\n        $word_length = strlen($word);\n      \
    \  $vowel_index = strrpos($vowels, $word[$i]);\n        $vowel_index = min($vowel_index,\
    \ $word_length - 1);\n        if($word[$vowel_index + $vowels_count + $i] !==\n\
    \                $word[$vowel_index + $vowels_count]\n        ) {\n          \
    \  return \"\";\n        }\n        $i += 1;\n    }\n}\n", "    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $last_letter = substr($word, 0, -1);\n    $vowels_count\
    \ = count($vowels);\n    foreach($vowels as $v) {\n        if(strpos($last_letter,\
    \ $v) !== false) {\n            return $v;\n        }\n    }\n    return '';\n\
    }\n\n$input = ['yogurt', 'FULL', 'quick', 'ab'];\nprint_r($input);\nprint_r(get_closest_vowel($input[0]));\n\
    print_r(get_closest_vowel($input[1]));\nprint_r(get_closest_vowel($input[2]));\n\
    print_r(get_closest_vowel($input[3]));\n", "    $arr = str_split($word);\n   \
    \ $len  = count($arr);\n    \n    $vowels = [];\n    \n    for($i=0; $i<$len-1;\
    \ $i++) {\n        if($arr[$i] ==='a'  || $arr[$i] ==='e' || $arr[$i] ==='i' ||\
    \ $arr[$i] ==='o' || $arr[$i] ==='u' || $arr[$i] ==='y') {\n            $vowels[]\
    \ = $arr[$i];\n        }\n    }\n    \n    if(count($vowels) >= 2) {\n       \
    \ return $vowels[array_search(min(array_values($vowels)), $vowels)];\n    } else\
    \ {\n        return \"\";\n    }\n}\n\n$arr = [\n    'foo' => 'a',\n    'bar'\
    \ => 'b',\n    'baz' => 'c',\n];\n\n$arr = array(\n    'foo' => 'a',\n    'bar'\
    \ => 'b',\n    'baz' => 'c',\n);\n", "    $vowels = ['A', 'E', 'I', 'O', 'U'];\n\
    \    foreach ($vowels as $vowel) {\n        $leftLen = strlen($word) - 1;\n  \
    \      for ($i = 0; $i <= $leftLen; $i++) {\n            if (ctype_upper($word[$i])\
    \ && ctype_lower($word[$i+1]) && $vowel == $word[$i+1]) {\n                return\
    \ $vowel;\n            }\n        }\n    }\n    return '';\n}\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a tags=algorithm,php |>\nFor those who like short code :\n<code>",
  "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    for($i=count($vowels)-1;$i>=0;$i--){\n\
    \        for($j=strlen($word)-1;$j>=0;$j--){\n            if($word[$j]==$vowels[$i]\
    \ || substr($word,0,$j+1)==substr($word,0,$j+$i+1)){\n                return $vowels[$i];\n\
    \            }\n        }\n    }\n    return '';\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nHi Kaidoo, welcome to SO. While this code may answer the question, providing\
    \ additional context regarding *how* and *why* it solves the problem would improve\
    \ the answer's long-term value. Remember that you are answering the question for\
    \ readers in the future, not just the person asking now. Please [edit] your answer\
    \ to add an explanation, and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| a tags=php,string |>\nI tried to solve the problem using\
    \ simple regex, and I wrote this function to solve the problem. \n<code>", " \
    \   $vowels = array('a', 'e', 'i', 'o', 'u');\n    $right_consonants = array('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z');\n    $left_consonants = array('A', 'E', 'I', 'O', 'U');\n\
    \    $length = strlen($word);\n    $index = 0;\n    $letters = array();\n    $vowel_found\
    \ = false;\n\n    while ($index < $length) {\n        $letter = substr($word,\
    \ $index, 1);\n        $letters[] = $letter;\n\n        if (in_array($letter,\
    \ $vowels)) {\n            $vowel_found = true;\n            break;\n        }\n\
    \n        $index++;\n\n        if ($index == $length) {\n            $index =\
    \ 0;\n            $vowel_found = false;\n        }\n    }\n\n    if ($vowel_found)\
    \ {\n        $closest_vowel = $letters[array_search($letter, $letters)];\n   \
    \ } else {\n        $closest_vowel = '';\n    }\n\n    return $closest_vowel;\n\
    }\n</code>\n<|/ a |>\n<| a tags=algorithm,php,string |>\nAnother way would be\
    \ to convert each letter to the ASCII value and then use modulus division:\n<code>\n\
    $string = \"SIMPLE\";\n$letters = str_split($string);\n$letters_ascii = array_map('ord',$letters);\n\
    $letters_ascii = array_map('chr', $letters_ascii);\n\n$letter_ranges = array();\n\
    $range_count = count($letters_ascii)-1;\n$letter_ranges[] = range('a','z');\n\
    $letter_ranges[] = range('A','Z');\nfor($i = 0; $i < $range_count; $i++){\n  if($i\
    \ == $range_count-1){\n    $letter_ranges[] = range($letters_ascii[$i],$letters_ascii[$i]);\n\
    \  }else{\n    $letter_ranges[] = range($letters_ascii[$i],$letters_ascii[$i+1]);\n\
    \  }\n}\n\n$result = '';\nforeach($letter_ranges as $range){\n  if(in_array($range,$letters_ascii)){\n\
    \    $result .= $range;\n  }\n}\n\nvar_dump($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=algorithm,php,string |>\n<code>\n<?php", "\t$vowels =\
    \ array('a','e','i','o','u');\n\tfor($i = strlen($word); $i >= 0; $i--) {\n\t\t\
    if(in_array($word[$i], $vowels)) {\n\t\t\treturn $word[$i];\n\t\t}\n\t}\n}", " \
    \   $vowels = ['a', 'e', 'i', 'o', 'u'];\n    for ($i = count($word) - 1; $i >=\
    \ 0; $i--) {\n        $char = strtolower($word[$i]);\n        if (in_array($char,\
    \ $vowels)) {\n            return $char;\n        }\n    }\n    return '';\n}\n",
  "    $vowels = \"aAbBcCdDfFgGhHiIjJkKlLmMnNoOpPqQsStTuUvVwWxXyYzZ\";\n    $vowels_length\
    \ = strlen($vowels);\n    $vowels_array = str_split($vowels);\n    $vowels_array\
    \ = array_unique($vowels_array);\n    $vowels_array = array_combine($vowels_array,\
    \ $vowels_array);\n    $word_array = str_split($word);\n    $word_array = array_filter($word_array);\n\
    \    $word_array_keys = array_keys($word_array);\n    \n    foreach ($word_array_keys\
    \ as $key) {\n        $word_array[$key] .= $vowels_array[$word[$key]];\n    }\n\
    \n    $count_array = array_count_values($word_array);\n    $count_array_keys =\
    \ array_keys($count_array);\n    $count = $count_array[$word[$word_array_keys[count($word_array_keys)\
    \ - 1]]];\n    \n    foreach ($count_array_keys as $key) {\n        if ($count_array[$word[$key]]\
    \ > $count) {\n            $count = $count_array[$word[$key]];\n            $vowel\
    \ = $word[$key];\n        }\n    }\n    \n    return $vowel;\n}", "    // Your\
    \ code here\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $vowels_r = array('a',\
    \ 'e', 'i', 'o', 'u', 'r');\n    $vowels_l = array('a', 'e', 'i', 'o', 'u', 'l');\n\
    \n    $vowels_r = array_reverse($vowels_r);\n    foreach($vowels_l as $v)\n  \
    \  {\n        if(strpos($word, $v) !== false)\n        {\n            $pos = strrpos($word,\
    \ $v);\n            return $word[$pos];\n        }\n    }\n\n    $pos = strrpos($word,\
    \ $v);\n    return $word[$pos];\n}\n</code>\n<|/ a tags=php,string,substring |>\n\
    <| a tags=php,string,substring |>\nYou can find the last occurrence of a character\
    \ in a string using strrpos. \nYou can find the character before it using strpos\n\
    <|/ a dscore=1 |>\n<| a dscore=1 tags=php,string,substring |>\nI guess this is\
    \ not a perfect solution but its a simple and working one. \n<code>", "    $vowels\
    \ = \"aeiouAEIOU\";\n    $vowelsArr = explode(\",\", $vowels);\n    \n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxz\";\n    $consonantsArr = explode(\",\", $consonants);\n\
    \    \n    $consonantsStr = implode(\"\", $consonantsArr);\n    \n    for($i=count($word)-1;$i>=0;$i--)\
    \ {\n        $left = $word[$i];\n        $right = $word[strlen($word)-1-i];\n\
    \        \n        if ($left == $consonantsStr && $right == $consonantsStr) {\n\
    \            return $vowelsArr[$i];\n        }\n    }\n    \n    return \"\";\n\
    }\n\necho \"The closest vowel for 'yogurt' is '$vowels[get_closest_vowel(\"yogurt\"\
    )]'.\";\necho \"The closest vowel for 'FULL' is '$vowels[get_closest_vowel(\"\
    FULL\")]'.\";\necho \"The closest vowel for 'quick' is '$vowels[get_closest_vowel(\"\
    quick\")]'.\";\necho \"The closest vowel for 'ab' is '$vowels[get_closest_vowel(\"\
    ab\")]'.\";", "    \n    // Your code goes here\n    $consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    $vowels = \"aeiou\";\n    $vowels_pos = strrpos($consonants, $vowels);\n\
    \n    $vowel_arr = [];\n    for($i = 0; $i < strlen($word); $i++) {\n        for($j\
    \ = $vowels_pos + 1; $j < strlen($consonants); $j++) {\n            if($word[$i]\
    \ == $consonants[$j]) {\n                $vowel_arr[] = $word[$i];\n         \
    \   }\n        }\n    }\n    \n    if(count($vowel_arr) > 0) {\n        return\
    \ end($vowel_arr);\n    }\n    \n    return \"\";\n}\n\n$words = [\"yogurt\",\
    \ \"FULL\", \"quick\", \"ab\"];\nfor($i = 0; $i < count($words); $i++) {\n   \
    \ echo get_closest_vowel($words[$i]) . \"<br>\";\n}", "    // write your code\
    \ here\n    $vowels = 'aeiou';\n    $vowelsArray = str_split($vowels);\n    $consonants\
    \ = 'bcdfghjklmnpqrstvwxyz';\n    $consonantsArray = str_split($consonants);\n\
    \n    $vowelsArray = array_filter($vowelsArray);\n    $consonantsArray = array_filter($consonantsArray);\n\
    \n    $arr = (array)$word;\n    foreach ($arr as $key => $val) {\n        if (($val\
    \ > $consonantsArray[0] || $val < $consonantsArray[1]) && !in_array($val, $vowelsArray))\
    \ {\n            return $val;\n        }\n    }\n    return '';\n}", "    $vowels\
    \ = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n    for($i=count($vowels)-1;\
    \ $i>=0; $i--) {\n        $consonants = str_split($word);\n        $found_vowel\
    \ = false;\n        foreach($consonants as $char) {\n            if(in_array($char,\
    \ $vowels)) {\n                $found_vowel = true;\n                break;\n\
    \            }\n        }\n        if($found_vowel) {\n            return $vowels[$i];\n\
    \        }\n    }\n    return '';\n}\n", "    $vowel_array = array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\");\n    $vowel_array = array_slice($vowel_array,0,count($vowel_array)\
    \ - 1);\n    foreach($vowel_array as $v){\n        if(strpos($word, $v) !== false){\n\
    \            $last_char = substr($word,-1);\n            if($last_char == $v){\n\
    \                return $v;\n            }\n        }\n    }\n}\n", "    $vowels\
    \ = array(\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\");\n    $vowels_count\
    \ = count($vowels);\n    $vowels_positions = array();\n    $last_letter = end($word);\n\
    \    for($i=0;$i<$vowels_count;$i++) {\n        if($vowels[$i] == $last_letter)\
    \ {\n            $vowels_positions[] = $i;\n        }\n    }\n    if(count($vowels_positions)\
    \ > 0) {\n        $min_distance = PHP_INT_MAX;\n        $vowel_index = -1;\n \
    \       for($i=0;$i<count($vowels_positions);$i++) {\n            for($j=$i+1;$j<count($vowels_positions);$j++)\
    \ {\n                $distance = get_distance($vowels[$vowels_positions[$i]],$vowels[$vowels_positions[$j]]);\n\
    \                if($distance < $min_distance) {\n                    $min_distance\
    \ = $distance;\n                    $vowel_index = $i;\n                }\n  \
    \          }\n        }\n        return $vowels[$vowel_index];\n    }\n    return\
    \ \"\";\n}\n", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $vowels_count\
    \ = array_count_values($vowels);\n    foreach($vowels_count as $vowel=>$count)\
    \ {\n        if($count >= 2 && $count <= 3) {\n            $right_side = substr($word,\
    \ -$count);\n            foreach($right_side as $k=>$v) {\n                if(in_array($v,\
    \ $vowels)) {\n                    return $v;\n                }\n           \
    \ }\n        }\n    }\n    return \"\";\n}\n$tests = array(\n    \"yogurt\",\n\
    \    \"FULL\",\n    \"quick\",\n    \"ab\",\n);\nforeach ($tests as $word) {\n\
    \    echo get_closest_vowel($word) . \"\\n\";\n}", "    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $consonants = array(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $vowels_positions = array();\n\
    \    $consonants_positions = array();\n    for ($i = 0; $i < strlen($word); $i++)\
    \ {\n        $position = get_position($word, $i, $vowels);\n        if ($position\
    \ > -1) {\n            $vowels_positions[] = $position;\n        }\n        $position\
    \ = get_position($word, $i, $consonants);\n        if ($position > -1) {\n   \
    \         $consonants_positions[] = $position;\n        }\n    }\n    $index =\
    \ -1;\n    foreach ($vowels_positions as $v) {\n        $index = $v;\n    }\n\
    \    foreach ($consonants_positions as $c) {\n        $index = ($index + 1) %\
    \ (count($vowels_positions) + count($consonants_positions)) - 1;\n    }\n    return\
    \ $vowels[$index];\n}", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\"\
    );\n    $vowels_count = count($vowels);\n\n    $left_consonant = strrpos($word,\
    \ 'b');\n    $right_consonant = strrpos($word, 'e');\n    $left_consonant = $left_consonant\
    \ ? $left_consonant : $word;\n    $right_consonant = $right_consonant ? $right_consonant\
    \ : $word;\n\n    $left_vowel = strpos($left_consonant, 'b', $vowels_count);\n\
    \    $right_vowel = strpos($right_consonant, 'e', $vowels_count);\n\n    if ($left_vowel\
    \ >= 0 && $left_vowel < $right_vowel) {\n        return $vowels[$left_vowel +\
    \ 1];\n    } elseif ($right_vowel >= 0 && $right_vowel < $left_vowel) {\n    \
    \    return $vowels[$right_vowel + 1];\n    }\n\n    return '';\n}\n", "    $vowels\
    \ = \"aeiouAEIOU\";\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $result\
    \ = \"\";\n    foreach (str_split($word) as $c) {\n        if ($c == 'a' || $c\
    \ == 'A') {\n            $result .= $vowels[strrpos($vowels, $c)+1];\n       \
    \ } else if ($c == 'e' || $c == 'E') {\n            $result .= $vowels[strrpos($vowels,\
    \ $c)-1];\n        } else if ($c == 'i' || $c == 'I') {\n            $result .=\
    \ $consonants[strrpos($consonants, $c)-1];\n        } else if ($c == 'o' || $c\
    \ == 'O') {\n            $result .= $consonants[strrpos($consonants, $c)+1];\n\
    \        } else if ($c == 'u' || $c == 'U') {\n            $result .= $consonants[strrpos($consonants,\
    \ $c)+1];\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2 tags=php,algorithm,string\
    \ |>\n<| c |>\nNice solution but its not considering the case of `get_closest_vowel(\"\
    quick\")` , where it should return `u` because it is closest to `U` and not `q`\n\
    <|/ c |>\n<| c |>\n: Yes, you are right. Let me update my answer.\n<|/ c |>\n\
    <| c |>\nThank you so much for your time and effort. It worked.\n<|/ c |>\n<|\
    \ c |>\n`get_closest_vowel(\"quick\")` ==> `\"u\"`\n<|/ c |>\n<| c |>\n: Sorry\
    \ for that. I just edited my answer. Thank you.\n<|/ c |>\n<| a dscore=2 |>\n\
    I would use a regular expression here with word boundaries to find the vowel.\n\
    <code>\n$word = \"quick\";\n$vowels = preg_grep('/[aeiou]/i', $word);\n$vowel\
    \ = current($vowels);\n$wordLength = strlen($word);\n\n$lastConsonant = strrpos($word,\
    \ $vowel);\n$lastConsonantEnd = $lastConsonant + 1;\n\n$nextConsonant = strpos($word,\
    \ $vowel, $lastConsonantEnd);\n$nextConsonantEnd = $nextConsonant + 1;\n\n$nextConsonant1\
    \ = strpos($word, $vowel, $next", "  $vowels = [\"\", \"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n  $consonants = \"bdgjnpqrstvz\";\n  $consonantsLength = strlen($consonants);\n\
    \  $vowelsLength = strlen($vowels);\n  for ($i = $consonantsLength; $i >= 0; $i--)\
    \ {\n    if (substr($word, 0, $i) == $consonants) {\n      $consonants = substr($word,\
    \ $i);\n      $vowels = substr($word, $consonantsLength, $vowelsLength);\n   \
    \ }\n  }\n  return $vowels;\n}\n", "    if ($word[0] != $word[2]) {\n        return\
    \ $word[0];\n    }\n    \n    return $word[2];\n}\n</code>\n<|/ a dscore=1 tags=php,loops,return,conditional-statements\
    \ |>\n<| a tags=php,loops,return,conditional-statements |>\n<code>", "    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $consonants = array(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n    $consonant_array\
    \ = [];\n    foreach ($consonants as $consonant) {\n        $consonant_array[]\
    \ = \"$consonant\";\n    }\n\n    $consonant_array = array_merge($consonant_array,\
    \ array(\"x\", \"z\"));\n    $vowel_array = [];\n    foreach ($vowels as $vowel)\
    \ {\n        $vowel_array[] = \"$vowel\";\n    }\n\n    $vowel_array = array_merge($vowel_array,\
    \ array(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"));\n\n    $consonant_count =\
    \ count($consonant_array);\n    $vowel_count = count($vowel_array);\n\n    $i\
    \ = 0;\n    $j = 0;\n    $flag = 0;\n    $result_array = [];\n    for ($i = 0;\
    \ $i < $consonant_count - 1; $i++) {\n        $c = $consonant_array[$i];\n   \
    \     $j = $i + 1;\n        $j++;\n\n        if ($j < $vowel_count) {\n      \
    \      $v = $vowel_array[$j];\n            if ($word == $c . $v) {\n         \
    \       array_push($result_array, $v);\n            }\n        } else {\n    \
    \        if ($word == $c) {\n                array_push($result_array, $c);\n\
    \            }\n        }\n\n    }\n\n    return $result_array;\n}\n", "    return\
    \ \"\";\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $vowels_count =\
    \ count($vowels);\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $consonants_count\
    \ = strlen($consonants);\n    $letters = str_split($word);\n    foreach($letters\
    \ as $key => $letter) {\n        if($key < $consonants_count && $key > 1) {\n\
    \            $first_consonant_index = strrpos($consonants, $letter);\n       \
    \     $last_consonant_index = strpos($consonants, $letter, $first_consonant_index\
    \ + 1);\n            $first_consonant = $consonants[$first_consonant_index];\n\
    \            $last_consonant = $consonants[$last_consonant_index];\n         \
    \   \n            $first_vowel_index = strrpos($vowels, $first_consonant);\n \
    \           $last_vowel_index = strrpos($vowels, $last_consonant);\n         \
    \   $first_vowel = $vowels[$first_vowel_index];\n            $last_vowel = $vowels[$last_vowel_index];\n\
    \            \n            if($first_vowel == $first_consonant && $last_vowel\
    \ == $last_consonant) {\n                return $vowels[$last_vowel_index];\n\
    \            }\n        }\n    }\n    return '';\n}\n", "    $vowels = \"aeiou\"\
    ;\n    $firstcon = substr($word, 0, 1);\n    $lastcon = substr($word, -1, 1);\n\
    \    foreach ($vowels as $vowel) {\n        if ($vowel == $firstcon || $vowel\
    \ == $lastcon) {\n            return $vowel;\n        }\n    }\n}\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nIt works! Thanks!\n<|/ c |>\n<| c |>\nWhy are you using\
    \ `foreach`? Can't you just do `return $firstcon == 'a' || $lastcon == 'a'`? Same\
    \ for the vowels.\n<|/ c |>\n<| c |>\nSure, that would make your solution much\
    \ better. But I think the question was more about how to improve the existing\
    \ solution.\n<|/ c |>\n<| a tags=php |>\nHere is my answer for the same problem.\
    \ I am sure it can be optimized more but wanted to share to help someone else\
    \ who was searching the same answer.\n<code>", "    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $word = preg_replace('/[^a-z]/i', '', $word);\n\
    \    foreach($vowels as $key => $value) {\n        $left_of_value = substr($word,\
    \ 0, $key);\n        if($left_of_value == $value) {\n            $right_of_value\
    \ = substr($word, $key+1);\n            if($right_of_value == $value) {\n    \
    \            return $value;\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "    $vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    \n    $length = strlen($word);\n\
    \    \n    for ($i = 0; $i < $length; $i++) {\n        $start = $i;\n        \n\
    \        $count = 0;\n        \n        do {\n            $end = $i + 1;\n   \
    \         $c = $word[$end];\n            \n            foreach ($vowels as $vowel)\
    \ {\n                if ($c === $vowel) {\n                    $count++;\n   \
    \             }\n            }\n            \n            $i++;\n        } while\
    \ ($end < $length && $c !== $word[$end]);\n        \n        if ($count > 1) {\n\
    \            return $vowels[$i - $start];\n        }\n    }\n    \n    return\
    \ '';\n}", "    $vowels = \"aeiou\";\n    $word_len = strlen($word);\n    $vowels_len\
    \ = strlen($vowels);\n    for ($i = 0; $i < $word_len - $vowels_len; $i++) {\n\
    \        if (strpos($vowels, substr($word, $i, $vowels_len)) !== false) {\n  \
    \          return substr($word, $i, $vowels_len);\n        }\n    }\n    return\
    \ \"\";\n}", "  $vowels = array(\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\"\
    ,\"O\",\"U\");\n  \n  $pos = strrpos($word, \" \");\n  $consonants = substr($word,\
    \ $pos+1, strlen($word));\n  \n  $len = strlen($consonants);\n  \n  for ($i =\
    \ 0; $i < $len; $i++) {\n    $con = substr($consonants, $i, 1);\n    if ($con\
    \ !== ' ') {\n      $idx = array_search($con, $vowels);\n      if ($idx !== false\
    \ && $idx < $len) {\n        if ($con == strtoupper($con)) {\n          $idx++;\n\
    \        }\n        \n        return $vowels[$idx];\n      }\n    }\n  }\n  \n\
    \  return '';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nGreat! I used the accepted\
    \ answer but +1 anyway\n<|/ c |>\n<| a |>\nThis isn't really a recursive function,\
    \ but you can build it with a recursive function.\nThe base case is when you find\
    \ the first vowel. That's when you just need to know which vowel is in the right\
    \ place. Here's how you can do this:\n<code>\n$vowel = 'e'; // or whatever you\
    \ find\n$pos = strrpos($word, \" \");\n$consonants = substr($word, $pos+1, strlen($word));\n\
    \n$len = strlen($consonants);\n\n$vowel_count = 0;\n$i = 0;\nwhile ($i < $len)\
    \ {\n    $con = substr($consonants, $i, 1);\n    if ($con !== ' ') {\n       \
    \ $idx = array_search($con, $vowels);\n        if ($idx !== false && $idx < $len)\
    \ {\n            if ($con == strtoupper($con)) {\n                $idx++;\n  \
    \          }\n            $vowel_count++;\n            if ($vowel_count == $len)\
    \ {\n                return $con;\n            }\n        }\n    }\n    $i++;\n\
    }\n</code>\nYou'll need to add some code to handle situations where the right\
    \ vowel isn't at the end of the word.\n<|/ a dscore=0 tags=php,algorithm,recursion\
    \ |>\n<| c |>\nIt doesn't handle the situation where there is more than one vowel\
    \ in the right place\n<|/ c |>\n<| c |>\nIt doesn't handle the situation where\
    \ there are multiple vowels in the right place\n<|/ c |>\n<| c |>\nIt doesn't\
    \ handle the situation where there are multiple vowels in the right place\n<|/\
    \ c |>\n<| c |>\n- That's true. I was ", "    $vowels = \"AEIOUaeiou\";\n    $vowels_found\
    \ = array();\n    $wordLength = strlen($word);\n    for($i = $wordLength - 1;\
    \ $i > -1; $i--) {\n        if(strpos($vowels, $word[$i]) !== FALSE) {\n     \
    \       $vowels_found[] = $word[$i];\n        }\n    }\n    return str_replace(array_keys($vowels_found),\
    \ $vowels_found, \"\");\n}", "  \n  $vowels = array('a', 'e', 'i', 'o', 'u', 'y');\n\
    \  $vowels_count = array_count_values($vowels);\n\n  foreach ($vowels as $vowel)\
    \ {\n    $current_vowel_count = $vowels_count[$vowel];\n    $letters_count = strlen($word);\n\
    \    $start_index = $letters_count - $current_vowel_count;\n    $end_index = $letters_count;\n\
    \    $index = -1;\n\n    if ($start_index >= 0) {\n      while ($start_index >=\
    \ 0) {\n        if ($word[$start_index] == $vowel) {\n          $index = $start_index;\n\
    \          $start_index--;\n          break;\n        }\n        $start_index--;\n\
    \      }\n    }\n    if ($end_index >= 0) {\n      while ($end_index >= 0) {\n\
    \        if ($word[$end_index] == $vowel) {\n          $index = $end_index;\n\
    \          $end_index--;\n          break;\n        }\n        $end_index--;\n\
    \      }\n    }\n\n    if ($index >= 0) {\n      return $vowel;\n    }\n  }\n}",
  "    return preg_replace('/^([^aeiou]{0,1})?([aeiou]{0,1})?([^aeiou]{0,1})?([aeiou]{0,1})?([^aeiou]{0,1})?$/',\
    \ '$3',\n                      $word);\n}\n</code>\n<|/ a |>\n<| c |>\nI suggest\
    \ you have a look at the [Stack Overflow Regular Expression FAQ](http://stackoverflow.com/a/22944075/3764814)\
    \ first.\n<|/ c |>\n<| a tags=php,regex |>\nYou could use a regular expression\
    \ to do this easily enough:\n<code>\n$input = 'yogurt';\n\n$regex = '~^([^aeiou]{0,1})?([aeiou]{0,1})?([^aeiou]{0,1})?([aeiou]{0,1})?([^aeiou]{0,1})?$~';\n\
    $result = preg_replace($regex, '$3',$input);\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=php,regex |>\nThis regex may work for you\n<code>\n(?<=[^aeiou])([aeiou]{0,1})?(?=[^aeiou])\n\
    </code>\nIt looks for an occurence of 0 or 1 of a non vowel followed by 0 or 1\
    \ of a vowel followed by 0 or 1 of a non vowel. Then looks for another occurence\
    \ of 0 or 1 of a non vowel followed by 0 or 1 of a vowel followed by 0 or 1 of\
    \ a non vowel. It doesn't matter what order you put these conditions in.\nEdit:\
    \ Changed to lookaround assertions because lookbehind isn't available in all regex\
    \ engines\n<|/ a dscore=1 |>\n<| c |>\nThis is incorrect - try it with a word\
    \ like `abcefg`.\n<|/ c |>\n<| c |>\nI guess I wasn't aware of the issue with\
    \ the lookbehind. I wasn't really thinking about what I was doing in these cases,\
    \ since I always use lookahead/lookbehind for conditionals.\n<|/ c |>\n<| a dscore=1\
    \ tags=php,regex |>\nThis should work\n<code>\n[^aeiou]*?([^aeiou]*[aeiou])[^aeiou]*\n\
    </code>\nExplanation:\n\n[^aeiou]* - matches any character except for vowels,\
    \ zero or more times\n[^aeiou]*[aeiou] - matches any character except for vowels\
    \ and vowels, zero or more times\n[^aeiou]* - matches any character except for\
    \ vowels, zero or more times\n<|/ a |>\n<| c |>\n`[^aeiou]*[ae", "    $word=strtolower($word);\n\
    \    $vowels='aeiou';\n    $vowels1=str_split($vowels);\n    $vowels2=str_split($vowels,2);\n\
    \    $vow=array_intersect($vowels1,$vowels2);\n    return strpos($word,$vow);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nYou should make an edit and add some explanation\
    \ to the code, to make it easier for people to understand it.\n<|/ c |>\n<| a\
    \ |>\nHere is a solution by PHP in few lines. It is very similar to your code,\
    \ just using strrpos and strlen instead of substr.\n<code>\n$word = 'abb';\n",
  "  $vowels = \"aeiouAEIOU\";\n  $result = \"\";\n  $vowel_found = false;\n  \n \
    \ $word_length = strlen($word);\n  \n  for ($i = 0; $i < $word_length; $i++) {\n\
    \    $char = $word[$i];\n    \n    if (!in_array($char, $vowels)) {\n      $char_length\
    \ = strlen($char);\n      $left_char = $word[$i-1];\n      $right_char = $word[$i+1];\n\
    \      \n      if ((($char_length <= 2) || ($char_length == $word_length)) &&\
    \ ($char != $left_char) && ($char != $right_char)) {\n        if ($char_length\
    \ == 1) {\n          if ($char == $left_char || $char == $right_char) {\n    \
    \        $vowel_found = true;\n          }\n        } else {\n          if ($char\
    \ == $left_char) {\n            $vowel_found = true;\n          }\n        }\n\
    \      }\n    }\n  }\n  if (!$vowel_found) {\n    return \"\";\n  }\n  \n  $vowel_array\
    \ = explode($vowels, $word);\n  \n  for ($i = 1; $i < count($vowel_array); $i++)\
    \ {\n    if ($vowel_array[$i] == $vowel_array[$i-1]) {\n      $result = $vowel_array[$i];\n\
    \      break;\n    }\n  }\n  return $result;\n}", "    \n    // Return an empty\
    \ string if you didn't find any vowel\n    if (!$word) return '';\n\n    // Iterate\
    \ through the word from right-to-left\n    for ($i=strlen($word)-1; $i>=0; $i--)\
    \ {\n        \n        // Return an empty string if you find a vowel at the beginning\n\
    \        if ($word[$i]=='a' || $word[$i]=='e' || $word[$i]=='i' || $word[$i]=='o'\
    \ || $word[$i]=='u') {\n            return $word[$i];\n        }\n    }\n\n  \
    \  // Return an empty string if you didn't find any vowel\n    return '';\n}",
  "  foreach(str_split($word) as $v) {\n    if(($v=='a' || $v=='e' || $v=='i' || $v=='o'\
    \ || $v=='u') && $v != $word[$word->length-1]) {\n      $v = $word[$word->length-1];\n\
    \      break;\n    }\n  }\n  return $v;\n}\n\n$result = get_closest_vowel(\"yogurt\"\
    );", "    // Write your code here\n}\n\nget_closest_vowel(\"ab\");\nget_closest_vowel(\"\
    abba\");\nget_closest_vowel(\"abbacooo\");\nget_closest_vowel(\"aab\");\nget_closest_vowel(\"\
    zac\");\nget_closest_vowel(\"abbacooo\");\nget_closest_vowel(\"abbacoooo\");\n\
    get_closest_vowel(\"abbacoo\");\nget_closest_vowel(\"abba\");\nget_closest_vowel(\"\
    abbacoo\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\n\
    get_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"\
    abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"abbaco\");\nget_closest_vowel(\"",
  "    $vowels = \"aeiou\";\n    $vowel_count = 0;\n    $vowels_before = \"\";\n \
    \   $vowels_after = \"\";\n\n    for($i = 0; $i < strlen($word); $i++) {\n   \
    \     if(strlen($word) > 1) {\n            for($x = 0; $x < strlen($word) - $i;\
    \ $x++) {\n                $char = strtolower($word[$x + $i]);\n\n           \
    \     if($vowel_count < strlen($vowels)) {\n                    if($vowels[$vowel_count]\
    \ == $char) {\n                        $vowel_count++;\n                    }\
    \ else {\n                        $vowel_count = 0;\n                    }\n \
    \               } else {\n                    break;\n                }\n    \
    \        }\n        }\n\n        if($vowel_count >= strlen($vowels)) {\n     \
    \       $vowels_before = \"\";\n            $vowels_after = \"\";\n        } else\
    \ {\n            $vowels_before = substr($word, 0, $i);\n            $vowels_after\
    \ = substr($word, $i + 1, strlen($word) - $i);\n        }\n\n        if($vowels_before\
    \ == $vowels_after) {\n            return $vowels[$vowels_before];\n        }\n\
    \    }\n\n    return \"\";\n}\n", "\t$vowels = ['a','e','i','o','u'];\n\t$vowels_right\
    \ = array_flip($vowels);\n\t$letter = array_pop(str_split($word));\n\t\n\t$vowels_before\
    \ = array_flip($vowels);\n\t\n\t$i = strlen($letter);\n\t$vowel_met_before = false;\n\
    \t\n\tfor ($k=0; $k<$i; $k++) {\n\t\t$char = $letter[$k];\n\t\tif (isset($vowels_before[$char]))\
    \ {\n\t\t\t$vowel_met_before = true;\n\t\t}\n\t}\n\t\n\t$vowels_after = array_flip($vowels_right);\n\
    \t\n\t$i = strlen($letter);\n\t$vowel_met_after = false;\n\t\n\tfor ($k=0; $k<$i;\
    \ $k++) {\n\t\t$char = $letter[$k];\n\t\tif (isset($vowels_after[$char])) {\n\t\
    \t\t$vowel_met_after = true;\n\t\t}\n\t}\n\t\n\tif ($vowel_met_before && $vowel_met_after)\
    \ {\n\t\treturn array_search($vowel, array_flip($vowels));\n\t} else if  (!$vowel_met_before\
    \ && $vowel_met_after) {\n\t\treturn array_search($vowel, array_flip($vowels_right));\n\
    \t} else if ($vowel_met_before && !$vowel_met_after) {\n\t\treturn array_search($vowel,\
    \ array_flip($vowels_right));\n\t} else if (!$vowel_met_before && !$vowel_met_after)\
    \ {\n\t\treturn array_search($vowel, array_flip($vowels));\n\t}\n}\n", "    //\
    \ Write your code here\n    for($i=0;$i<strlen($word);$i++){\n        for($j=$i+1;$j<strlen($word);$j++){\n\
    \            if($word[$i]==\"a\"||$word[$i]==\"e\"||$word[$i]==\"i\"||$word[$i]==\"\
    o\"||$word[$i]==\"u\"){\n                if($word[$j]==\"a\"||$word[$j]==\"e\"\
    ||$word[$j]==\"i\"||$word[$j]==\"o\"||$word[$j]==\"u\"){\n                   \
    \ return $word[$j];\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}\n\n$str=\"yogurt\";\n$word=substr($str,strlen($str)-1);\necho $word;\n\
    $vowel=get_closest_vowel($word);\nif($vowel!=\"\"){\necho $vowel;\n}else{\necho\
    \ \"no vowel\";\n}", "    $vowels_array = array('a', 'e', 'i', 'o', 'u');\n  \
    \  $vowels_array_reverse = array_reverse($vowels_array);\n\n    // get vowel index\
    \ of $word from $vowels_array if exists\n    $v_index = array_search(strtolower($word[0]),\
    \ $vowels_array);\n\n    // if vowel index is not found, return an empty string\n\
    \    if ($v_index === FALSE) return '';\n\n    // get the length of the original\
    \ word\n    $length = strlen($word);\n\n    // get the number of consonants from\
    \ the right side of the word\n    $num_consonants = $length - 1;\n\n    // get\
    \ the index of $word's consonants from $vowels_array_reverse if exists\n    $c_index\
    \ = array_search(strtolower($word[$num_consonants]), $vowels_array_reverse);\n\
    \n    // if consonants index is not found, return an empty string\n    if ($c_index\
    \ === FALSE) return '';\n\n    // get the difference between $c_index and $v_index\n\
    \    $diff = $c_index - $v_index;\n\n    // return the closest vowel to $diff\
    \ from $vowels_array\n    return $vowels_array[$diff];\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nYour code only gives results for the first letter in the word.\
    \ I think you're missing a `$length-1` when determining the number of consonants,\
    \ just in case you have a word with more than 1 letter.\n<|/ c |>\n<| c |>\nAh\
    \ sorry, my code will return the closest vowel in case of a string of length 2,\
    \ but it will not work for word like \"FULL\", so I added this part as well. Thank\
    \ you for your comment, I've updated my code to handle word with more than 1 letter.\n\
    <|/ c |>\n<| c |>\nThe only problem with your code is that it only works for words\
    \ of 2 letters. For example, if the word is \"Aardvark\" your code would return\
    \ an empty string, while it should return \"A\" since it's the closest vowel to\
    \ the second letter in the word \"Aardvark\"\n<|/ c |>\n<| c |>\nI fixed my code\
    \ with my second answer, but I'm not sure if it's what you want to do.\n<|/ c\
    \ |>\n<| a |>\nHere is another answer, it also works with word longer than 2 letters.\n\
    <code>\n<?php", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $first_consonant\
    \ = substr($word, -1, 1);\n    $last_consonant = substr($word, 0, strlen($word)\
    \ - 1);\n    $closest_vowel = $first_consonant;\n    foreach ($vowels as $vowel)\
    \ {\n        if (substr($word, -strlen($closest_vowel), 1) === $vowel) {\n   \
    \         $closest_vowel = $vowel;\n            break;\n        }\n    }\n   \
    \ if ($closest_vowel !== $first_consonant) {\n        return $closest_vowel;\n\
    \    }\n    foreach ($vowels as $vowel) {\n        if (substr($word, $strlen($word)\
    \ - 1, 1) === $vowel) {\n            $closest_vowel = $vowel;\n            break;\n\
    \        }\n    }\n    if ($closest_vowel !== $first_consonant) {\n        return\
    \ $closest_vowel;\n    }\n    return '';\n}\n</code>\n<|/ a dscore=2 tags=php\
    \ |>\n<| c |>\nI guess this would be a good improvement if you would have used\
    \ the code from my answer.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n\n    function\
    \ GetClosestVowel($str){\n        $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \        $first_consonant = substr($str, -1, 1);\n        $last_consonant = substr($str,\
    \ 0, strlen($str) - 1);\n        $closest_vowel = $first_consonant;\n        foreach\
    \ ($vowels as $vowel) {\n            if (substr($str, -strlen($closest_vowel),\
    \ 1) === $vowel) {\n                $closest_vowel = $vowel;\n               \
    \ break;\n            }\n        }\n        if ($closest_vowel !== $first_consonant)\
    \ {\n            return $closest_vowel;\n        }\n        foreach ($vowels as\
    \ $vowel) {\n            if (substr($str, strlen($str) - 1, 1) === $vowel) {\n\
    \                $closest_vowel = $vowel;\n                break;\n          \
    \  }\n        }\n        if ($closest_vowel !== $first_consonant) {\n        \
    \    return $closest_vowel;\n        }\n        return '';\n    }\n\n    $vowels=array('a',\
    \ 'e', 'i', 'o', 'u');\n\n    echo GetClosestVowel(\"yogurt\");\n", "    // Write\
    \ your code here\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n  \
    \  $vowels_count = count($vowels);\n    $vowels_length = strlen($word);\n    $vowels_right_side\
    \ = strrev($word);\n    \n    $vowels_search = \"\";\n    \n    for ($i = 0; $i\
    \ < $vowels_count; $i++) {\n        $vowels_search .= substr($vowels_right_side,\
    \ $i + 1, 1);\n    }\n    \n    if (strpos($vowels_search, $vowels[$vowels_count])\
    \ !==  FALSE) {\n        $vowels_search = $vowels_search;\n    } else {\n    \
    \    $vowels_search = \"\";\n    }\n    \n    return $vowels_search;\n}", "  \
    \  // write your code here\n    $strlen = strlen($word);\n    $vowels = ['a','e','i','o','u'];\n\
    \    $vowels_pos = array();\n    for($i=0;$i<$strlen-1;$i++) {\n        $vowels_pos[]\
    \ = $i;\n    }\n\n    foreach($vowels as $key=>$val) {\n        $vowels_pos[$val]\
    \ = 0;\n    }\n\n    for($i=0;$i<$strlen-1;$i++) {\n        $j = $vowels_pos[$word[$i]];\n\
    \        if($j+1>$strlen-1) {\n            continue;\n        }\n        $word2\
    \ = $word;\n        $word2[$j] = '';\n        $word2 = implode('', $word2);\n\
    \        $vowels_pos[$word2] = $j+1;\n    }\n\n    foreach($vowels_pos as $key=>$val)\
    \ {\n        if($val > 0) {\n            return $key;\n        }\n    }\n\n  \
    \  return '';\n}", "    $vowel_str = \"aeiouAEIOU\";\n    $vowels = str_split($vowel_str);\n\
    \n    $vowels_count = array_sum($vowels);\n    $vowels_count = abs($vowels_count);\n\
    \n    for($i = 0; $i < count($vowels); $i++) {\n        $count = count(str_split(strtoupper($word)));\n\
    \        $count = abs($count);\n\n        if($count == $vowels_count) {\n    \
    \        $vowel_index = $i;\n            break;\n        }\n    }\n\n    $consonants\
    \ = str_split(strtoupper($word));\n\n    $consonants_count = count($consonants);\n\
    \    $consonants_count = abs($consonants_count);\n\n    for($i = 0; $i < $consonants_count;\
    \ $i++) {\n        $count = count(str_split(strtoupper($word)));\n        $count\
    \ = abs($count);\n\n        if($count > $consonants_count && $consonants[$i] ==\
    \ $vowels[$vowel_index]) {\n            $consonant_index = $i;\n            break;\n\
    \        }\n    }\n\n    return $vowels[$vowel_index];\n}\n", "    if ($word[0]\
    \ == 'a' || $word[0] == 'e' || $word[0] == 'i' || $word[0] == 'o' || $word[0]\
    \ == 'u') {\n        // First char is vowel\n        return 'a';\n    } else if\
    \ ($word[strlen($word) - 1] == 'a' || $word[strlen($word) - 1] == 'e' || $word[strlen($word)\
    \ - 1] == 'i' || $word[strlen($word) - 1] == 'o' || $word[strlen($word) - 1] ==\
    \ 'u') {\n        // Last char is vowel\n        return 'a';\n    } else {\n \
    \       // No vowel found in the middle\n        return '';\n    }\n}\n", "  \
    \  // write your code here\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution was given\
    \ to me in a previous exam. I don't understand how it works so I can use it. It\
    \ looks pretty complex to me compared to others solutions I've seen so far.\n\
    <|/ c |>\n<| c |>\nIf you read my answer carefully, I explained how it works.\n\
    <|/ c |>\n<| c |>\nYour explanation makes sense, but I still don't understand\
    \ how you get \"u\" from yogurt and how you get \"U\" from FULL. Is it because\
    \ you only look at one letter at a time or something? If someone could explain\
    \ this that would be great!\n<|/ c |>\n<| c |>\nI read your answer carefully.\
    \ The problem is I don't understand how it works. The only way I know how it works\
    \ is the output of `$vowels[$vowels[$word[$i + $j]] . $vowels[$word[$i + $j +\
    \ 1]]];`. But I don't understand how $vowels[$word[$i + $j]] . $vowels[$word[$i\
    \ + $j + 1]]] can make \"u\".\n<|/ c |>\n<| c |>\nI see that it's just adding\
    \ the two letters together to form a single letter. So you're saying $vowels[$vowels[$word[$i\
    \ + $j]]] is the same as $vowels[$word[$i]] + $vowels[$word[$j]]? But I still\
    \ don't understand how this works because I don't see how the addition can get\
    \ u. Can you explain a little more about how this works? Thanks!\n<|/ c |>\n<|\
    \ a dscore=2 tags=php,laravel |>\n<code>\n<?php\n", "    $vowel = \"a\";\n   \
    \ $cons = \"bcdfeghjklmnpqrstvwxyz\";\n    $vowel_found = 0;\n    $vowel_positions\
    \ = [];\n    for($i=0;$i<strlen($word);$i++) {\n        if(in_array(substr($word,$i,1),$cons))\
    \ {\n            $vowel_found = 1;\n        }\n        if(in_array($vowel,$vowel_positions))\
    \ {\n            $vowel_found++;\n        }\n        if($vowel_found == 2) {\n\
    \            $vowel_positions[] = $i;\n        }\n    }\n    return $vowel;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is not working for me as it only returns the\
    \ first vowel from the string rather than returning all of the possible vowels.\n\
    <|/ c |>\n<| a |>\nThis is another approach:\n<code>", "  $vowels = ['a', 'e',\
    \ 'i', 'o', 'u', 'y']; //vowel list\n  $last_vowel = array_shift($vowels); //get\
    \ first vowel\n  foreach($vowels as $v){\n    if(stristr($word,$v) === false ||\
    \ stristr($word,$v) !== false) continue; //skip vowel\n    $last_vowel = $v;\n\
    \  }\n  return $last_vowel;\n}", "    for($i=strlen($word)-1;$i>=0;$i--) {\n \
    \       $vowels = ['a','e','i','o','u'];\n        if(in_array(substr($word,$i,1),$vowels))\
    \ {\n            return substr($word,$i,1);\n        }\n    }\n    return '';\n\
    }\n</code>\n<|/ a tags=php,algorithm,string,letter,search |>\n<| a dscore=3 |>\n\
    I suggest using strtok for splitting the string with white space delimiter and\
    \ then use strpos to find the vowel in the resulting array.\n<code>\n$str='yogurt';\n\
    $token=strtok($str,\" \");\n$found=false;\nwhile($found==false && $token!==false){\n\
    \    if(strpos($token,'a')!==false){\n        echo $token;\n        $found=true;\n\
    \    }\n    $token=strtok(\" \");\n}\n</code>\nDemo\n<|/ a tags=php,algorithm,string,letter,search\
    \ |>\n<| c |>\nI believe that is a simple and elegant solution. Thanks man!\n\
    <|/ c |>\n<| a dscore=2 |>\nTry this one:\n<code>", "    $vowels = array('a','e','i','o','u','y');\n\
    \    $vowels_count = array_count_values($vowels);\n    \n    for($i=count($vowels);$i>0;$i--)\
    \ {\n        if($vowels_count[$vowels[$i]]>0) {\n            if(strrpos($word,$vowels[$i])>strrpos($word,strtolower($vowels[$i])))\
    \ {\n                return $vowels[$i];\n            }\n        }\n    }\n  \
    \  \n    return '';\n}\n", "    // Write your code here\n    $vowels = array(\"\
    a\",\"e\",\"i\",\"o\",\"u\");\n    $vowels2 = array(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"a\",\"e\",\"i\",\"o\",\"u\",\"a\",\"e\",\"i\",\"o\",\"u\");\n    $vowels3\
    \ = array(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"u\",\"a\",\"e\",\"i\",\"o\",\"u\");\n    for($i = 0; $i<count($word);\
    \ $i++) {\n        if (in_array($word[$i], $vowels)) return $word[$i];\n     \
    \   if (in_array($word[$i], $vowels2)) return $word[$i];\n        if (in_array($word[$i],\
    \ $vowels3)) return $word[$i];\n    }\n    return \"\";\n}\n", "    if (!is_string($word))\
    \ {\n        return \"Wrong parameter!\";\n    }\n\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n\n    $consonants\
    \ = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    );\n    $consonants_count = count($consonants);\n\n    $right_side = substr($word,\
    \ 0, 1);\n\n    $right_side_position = 0;\n    $closest_vowel = \"\";\n\n    if\
    \ ($right_side === \"a\") {\n        $right_side_position = $vowels_count-1;\n\
    \    } else {\n        $right_side_position = $consonants_count-1;\n    }\n\n\
    \    for ($i = 0; $i <= $right_side_position; $i++) {\n        if ($vowels[$i]\
    \ === $right_side) {\n            $closest_vowel = $vowels[$i];\n            break;\n\
    \        }\n        if ($consonants[$i] === $right_side) {\n            $closest_vowel\
    \ = $consonants[$i];\n            break;\n        }\n    }\n\n    return $closest_vowel;\n\
    }\n</code>\n<|/ a tags=php,string,algorithm |>\n<| a dscore=2 tags=php,string,algorithm\
    \ |>\nI haven't tested the code, but it seems correct to me. \n<code>", "    $pattern\
    \ = '/[aeiouAEIOU]/i';\n    if (preg_match($pattern, $word)) {\n        $vowels\
    \ = preg_split(\"/[aeiouAEIOU]/i\", $word);\n        $vowels_count = count($vowels);\n\
    \        $consonants = explode(\"A\", $word);\n        $consonants_count = count($consonants);\n\
    \        $vowel_counter = 0;\n        $consonant_counter = 1;\n        $vowel_position\
    \ = 0;\n        for($i = $consonants_count-1; $i > 0; $i--){\n            if($consonants[$i]\
    \ == $consonants[$i-1]){\n                $consonant_counter++;\n            \
    \    if($consonant_counter == $vowels_count){\n                    $vowel_counter++;\n\
    \                    $vowel_position = $i;\n                }\n            }\n\
    \        }\n        return $vowels[$vowel_position];\n    }else{\n        return\
    \ \"\";\n    }\n}\n", "    $vowels = ['a','e','i','o','u'];\n    $vowels_cnt =\
    \ count($vowels);\n\n    for ($i=0; $i<strlen($word); $i++) {\n        // move\
    \ to last consonant position\n        $consonants = substr($word, $i, 1);\n  \
    \      // move to last vowel position\n        $vowels = substr($word, $i, $vowels_cnt);\n\
    \        for ($j=0; $j<$vowels_cnt; $j++) {\n            $tmp = $vowels[$j];\n\
    \            if (strpos('aeiou', $tmp) !== false && strpos($consonants, $tmp)\
    \ === false) {\n                return $tmp;\n            }\n        }\n    }\n\
    \    return '';\n}\n\nvar_dump(get_closest_vowel(\"yogurt\")); // output: string(2)\
    \ \"u\"\nvar_dump(get_closest_vowel(\"FULL\")); // output: string(2) \"u\"\nvar_dump(get_closest_vowel(\"\
    quick\")); // output: string(0) \"\"\nvar_dump(get_closest_vowel(\"ab\")); //\
    \ output: string(0) \"\"\n</code>\n<|/ a tags=php |>\n<| c |>\nThe time complexity\
    \ of this solution is `O(n)` since you make two nested for loops. It's a O(n^2)\
    \ solution.\n<|/ c |>\n<| c |>\nYes, it is. If OP will provide some kind of feedback,\
    \ I'll update my answer\n<|/ c |>\n<| c |>\nIt's a great solution. Thank you.\n\
    <|/ c |>\n<| a tags=php |>\nHere's my solution, with comments in-line.\n<code>\n\
    <?php\n", "    // Your code here\n    return $word;\n}\n", "    \n}\n", "    $vowels_starting\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_ending = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_all = array_merge($vowels_starting,\
    \ $vowels_ending);\n\n    foreach($vowels_all as $letter){\n        if (strpos($word,\
    \ $letter) !== FALSE) {\n            $vowels = $letter;\n        }\n    }\n  \
    \  return $vowels;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI wonder how you came\
    \ up with the solution. :)\n<|/ c |>\n<| c |>\nThank you for the solution.  I\
    \ was trying to solve this in Python and your solution worked perfectly.  I wanted\
    \ to use Regex to get the same result but had no idea how.  I am brand new to\
    \ PHP so I appreciate the help.\n<|/ c |>\n<| a dscore=1 |>\nThis is my approach:\n\
    <code>\n<?php\n", "    \n    // Get a word with only consonants\n    $word = preg_replace('/[^a-zA-Z]/',\
    \ '', $word);\n    \n    // Get vowel from the end\n    $vowel = substr($word,\
    \ -1, 1, '', 1);\n    \n    // Get a word with only vowels\n    $vowelWord = preg_replace('/[^A-Za-z]/',\
    \ '', $word);\n    \n    // Get the first vowel from the right side\n    $result\
    \ = substr($vowelWord, strlen($vowelWord) - 1);\n    \n    // If the first vowel\
    \ doesn't match with consonants then return empty string\n    if ($result !==\
    \ $word) {\n        return '';\n    }\n    \n    // If the first vowel matches\
    \ with consonants then return the vowel\n    return $vowel;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for this answer! I'm wondering though, if I wanted\
    \ to make the function case insensitive, would I need to add another if statement?\
    \ For example if I'm looking for `\"B\"` but `\"b\"` is in `$word`, would I simply\
    \ add a `if(strtolower($vowel) !== strtolower($word)) {` statement? Sorry if I'm\
    \ missing something obvious, I'm a beginner at coding\n<|/ c |>\n<| a tags=php,substr\
    \ dscore=0 |>\nThe best way is to use the strrpos() function. It returns the last\
    \ occurence of a character in a string.\n<code>\n$str = \"abA\"\n$str_pos = strrpos($str,\
    \ \"a\");\necho $str_pos; //output \"2\"\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    This should work:\n<code>", "    $vowels = 'aeiouy';\n    $len = strlen($word);\n\
    \    for ($i=$len-1; $i >= 0; $i--) {\n        $pos = strrpos($vowels, $word[$i]);\n\
    \        if ($pos !== false) {\n            return $word[$i];\n        }\n   \
    \ }\n    return '';\n}", "    $letters = str_split($word);\n    $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n\n    foreach ($letters as $index => $letter)\
    \ {\n        $left = array_slice($letters, 0, $index+1);\n        $right = array_slice($letters,\
    \ $index+1, -1);\n        $index = count($left) + count($right);\n        if (in_array($letter,\
    \ $vowels)) {\n            if ($index == 1) {\n                return $letter;\n\
    \            }\n            else if ($index == count($letters)+1) {\n        \
    \        return $letter;\n            }\n            else if ($index == count($letters)+2)\
    \ {\n                return $letter;\n            }\n            else {\n    \
    \            return \"\";\n            }\n        }\n    }\n}\n</code>\n<|/ a\
    \ |>\n<| a dscore=0 |>\nI tried to improve the code in the following ways. I hope,\
    \ this helps you to understand how it works.\n<code>\n<?php\n", "    $vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for ($i = 0; $i < strlen($word); $i++) {\n \
    \       if (in_array($word[$i], $vowels)) {\n            return $word[$i];\n \
    \       }\n    }\n    return '';\n}", "    return '';\n}\n</code>\n<|/ q dscore=0\
    \ |>\n<| c |>\nPlease see [ask] and edit your post to include a [mcve].\n<|/ c\
    \ |>\n<| c |>\nI don't think this is what you want, but it might be something\
    \ you could use to get you started on a solution: https://stackoverflow.com/questions/1549427/php-check-if-a-string-starts-with-a-particular-letter\n\
    <|/ c |>\n<| c |>\nThis question appears to be off-topic because OP is asking\
    \ for a full working solution\n<|/ c |>\n<| a tags=php,string,if-statement |>\n\
    You can use the PHP function strrpos to find the last occurrence of a character\
    \ in a string. \n<code>\n$str = 'quick';\n\nif (strrpos($str, 'a') !== false)\
    \ {\n    // $str is 'quick'\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nYou can use\
    \ strrpos() to find the last occurrence of the character in a string.\n<code>\n\
    $str = 'quick';\n\nif (strrpos($str, 'a') !== false) {\n    // $str is 'quick'\n\
    }\n</code>\n<|/ a tags=php,string,if-statement dscore=1 |>\n<| a tags=php,string,if-statement\
    \ |>\nYou can try this \n<code>\n<?php ", "    $vowels = \"aeiouy\";\n    $word\
    \ = str_split($word);\n    sort($word);\n    $last = array_pop($word);\n    if\
    \ ($word[0] === '') {\n        return '';\n    }\n    foreach ($word as $char)\
    \ {\n        if ($char === '') {\n            return '';\n        }\n        if\
    \ (in_array($char, $vowels)) {\n            $position = 1;\n            $nextPos\
    \ = count($word) - 1;\n        } else {\n            $position = 0;\n        \
    \    $nextPos = 0;\n        }\n        foreach ($vowels as $key => $value) {\n\
    \            if ($value === 'y') {\n                if ($nextPos === $position)\
    \ {\n                    return $value;\n                }\n            } else\
    \ {\n                if ($nextPos === $position) {\n                    return\
    \ $value;\n                }\n            }\n            $nextPos--;\n       \
    \ }\n        $position++;\n    }\n    return '';\n}\n", "\t$word = strtolower($word);\n\
    \t\n\tif(preg_match('/^[a-zA-Z]+$/', $word)) {\n\t\t\n\t\t$leftIndex = strrpos($word,\
    \ '');\n\t\t\n\t\t$rightIndex = strrpos($word, '');\n\t\t\n\t\t\n\t\tif ($rightIndex\
    \ === false) {\n\t\t\t$rightIndex = strlen($word);\n\t\t}\n\n\t\t$letter = strtolower(substr($word,\
    \ $rightIndex));\n\n\t\t$leftVowel = $letter;\n\n\t\t$rightVowel = strtolower(substr($word,\
    \ $leftIndex));\n\n\t\tif ($leftVowel == $rightVowel) {\n\t\t\treturn $leftVowel;\n\
    \t\t} else {\n\t\t\twhile ($rightIndex > 0) {\n\t\t\t\t$rightVowel = strtolower(substr($word,\
    \ $rightIndex));\n\t\t\t\t\n\t\t\t\tif ($leftVowel == $rightVowel) {\n\t\t\t\t\
    \treturn $leftVowel;\n\t\t\t\t} else {\n\t\t\t\t\tif ($leftVowel != $rightVowel)\
    \ {\n\t\t\t\t\t\treturn $leftVowel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$rightIndex--;\n\
    \t\t\t}\n\t\t\t\n\t\t\treturn '';\n\t\t}\n\t}\n}", "    $vowels = \"aeiouAEIOU\"\
    ;\n    \n    $words = str_word_count($word, 1);\n    $index = 0;\n    foreach\
    \ ($words as $word) {\n        $index += $word;\n    }\n    $index = (int) $index;\n\
    \    \n    for ($x = $index; $x > 0; $x--) {\n        $vowel = substr($vowels,\
    \ ($x - 1), 1);\n        if (strpos($word, $vowel) !== false) {\n            return\
    \ $vowel;\n        }\n    }\n    return \"\";\n}\n", "    // Write your code here\n\
    \    $vowels = \"aeiou\";\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $right_vowel\
    \ = $right_consonant = $left_vowel = $left_consonant = \"\";\n    $word_length\
    \ = strlen($word);\n    $consonant_length = strlen($consonants);\n    $vowel_length\
    \ = strlen($vowels);\n    for ($i = 0; $i < $word_length; ++$i) {\n        $right_consonant\
    \ = $word[$i];\n        for ($j = 0; $j < $consonant_length; ++$j) {\n       \
    \     $right_vowel = $consonants[$j];\n            for ($k = $j; $k >= 0; --$k)\
    \ {\n                $left_consonant = $consonants[$k];\n                for ($z\
    \ = $k; $z >= 0; --$z) {\n                    $left_vowel = $vowels[$z];\n   \
    \                 $distance = get_distance($left_consonant, $left_vowel, $right_consonant,\
    \ $right_vowel);\n                    if ($distance <= 1) {\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \         if ($distance == 1) {\n                break;\n            }\n     \
    \   }\n        if ($distance == 1) {\n            break;\n        }\n    }\n \
    \   return $left_vowel;\n}\n", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $vowels_count = count($vowels);\n    $words = array_reverse(explode(' ',\
    \ $word));\n    foreach ($words as $i => $word) {\n        $last_word = substr($word,\
    \ $i + 1, 1);\n        if ($last_word == $vowels[0] || $last_word == $vowels[$vowels_count\
    \ - 1]) {\n            return $vowels[$i];\n        }\n    }\n    return '';\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHow does this solve the original question?\
    \ The question is not asking for the first or last vowel but rather for the one\
    \ that stands between two consonants right from the left side.\n<|/ c |>\n<| a\
    \ tags=regex,php |>\nA regex could work here (although it is not the most elegant\
    \ solution):\n<code>\n$str = 'abcde';\npreg_match('~(?<=.)(\\w)\\1(?!\\w)~', $str,\
    \ $m);\necho $m[1];\n</code>\n(?<=.) is a positive lookbehind; it matches the\
    \ character before the character on the right (in this case, the character on\
    \ the right). Then (\\w) captures a letter into group 1. Then we match that same\
    \ character with \\1(?!\\w), which means: match the same character that is captured\
    \ in group 1 that is not followed by a word character. Thus, the regex matches\
    \ a letter that is followed by another letter that is not followed by another\
    \ letter. \\1 is just another name for $m[1].\nDemo\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=regex,php |>\nHere's another way to do it with regex. It will return a\
    \ string if you find a vowel on the right side of any character other than a consonant:\n\
    <code>\necho preg_replace('/^([^aeiou]*\\w)(\\w[^aeiou]*\\w)/', '$1', $s);\n</code>\n\
    See demo on regex101.com.\n\nIn case you also need to return the vowel itself\
    \ (since you're dealing with an English word), you could use this:\n<code>\necho\
    \ preg_replace('/^([^aeiou]*\\w)(\\w[^aeiou]*\\w)/', '$2$1$2', $s);\n</code>\n\
    See demo on regex101.com.\n<|/ a |>\n<| a tags=regex,php dscore=0 |>\n<code>",
  "    // write your code here\n    // return \"\"\n    \n}\n\nget_closest_vowel(\"\
    yogurt\");\nget_closest_vowel(\"FULL\");\nget_closest_vowel(\"quick\");\nget_closest_vowel(\"\
    ab\");\nget_closest_vowel(\"abc\");\nget_closest_vowel(\"a\");\nget_closest_vowel(\"\
    aaa\");\nget_closest_vowel(\"aa\");\nget_closest_vowel(\"aas\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"\
    aau\");\nget_closest_vowel(\"aau\");\nget_closest_vowel(\"aau", "    $vowels =\
    \ 'aeiouy';\n    $vowels_counts = str_word_count($word);\n    foreach($vowels_counts\
    \ as $i => $val) {\n        $counts = $val + $vowels_counts[$i - 1];\n       \
    \ if($counts > 5 || $counts < -5)\n            continue 2;\n        if($val >\
    \ $counts) {\n            if(in_array($word[$i - 1], $vowels)) {\n           \
    \     return 'a';\n            }\n            continue;\n        }\n        if($val\
    \ < $counts) {\n            if(in_array($word[$i], $vowels)) {\n             \
    \   return 'a';\n            }\n            continue;\n        }\n        return\
    \ $word[$i - 1];\n    }\n    return '';\n}\n</code>\n<|/ a |>\n<| a tags=php,string,algorithm\
    \ |>\n<code>\n<?php\n$string = 'ABaBc';\n$vowels = 'aeiou';\n$vowel_count = str_word_count($string);\n\
    $count_to_get = 5;\n$count_to_get = abs($count_to_get);\n$vowel_count_key = array_search($count_to_get,\
    \ $vowel_count);\n$vowel_count_key = array_search($count_to_get, $vowel_count);\n\
    $vowel_count_key = array_search($count_to_get, $vowel_count);\n\n$string[$vowel_count_key]\
    \ = '';\n$string = implode($string);\necho $string;\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work if the input string has more than 5 consonants.  For\
    \ instance, `ABaBc` becomes `ABaBc` and not `AAbb`.  It also doesn't account for\
    \ cases where there are multiple vowels in the input string: `'abadaba' becomes\
    \ 'a'.`\n<|/ c |>\n<| a tags=php,string,algorithm |>\nThis works for me.\n<code>\n\
    $str = 'Abc';\n$vowels = 'aeiou';\n$vowel_count = str_word_count($str);\n\n$vowel_count_key\
    \ = array_search($vowel_count, $vowels);\n$vowel_count_key = array_search($vowel_count,\
    \ $vowels);\n$vowel_count_key = array_search($vowel_count, $vowels);\nif ($vowel_count_key\
    \ == 1)\n    $str = substr($str, 0, $vowel_count_key);\nelseif ($vowel_count_key\
    \ == -1)\n    $str = substr($str, strlen($str)-1);\n\necho $str.\"\\n\";\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nYou should mention the assumptions you're making in\
    \ this code snippet. For example, what happens if the ", "    $vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    $vowels_count = count($vowels);\n    $vowels_arr\
    \ = explode(',', $vowels);\n    $count = 0;\n    $result_word = trim($word);\n\
    \    foreach ($result_word as $index => $char) {\n        if(!empty($char) &&\
    \ $char != 'a' && $char != 'e' && $char != 'i' && $char != 'o' && $char != 'u'){\n\
    \            $count++;\n        } else {\n            $count = $index - $count;\n\
    \            break;\n        }\n    }\n\n    $count = $count % $vowels_count;\n\
    \    if($count == 0) return \"\";\n    $result_word[$count] = $vowels[$count];\n\
    \    $result_word = implode('', $result_word);\n    return $result_word;\n}",
  "    $array = str_split($word);\n    $len = count($array);\n    $vowel = ['a','e','i','o','u'];\n\
    \    $result = '';\n    for ($i=$len-1; $i>=0; $i--) {\n        foreach ($vowel\
    \ as $v) {\n            if ($array[$i] === $v) {\n                break;\n   \
    \         }\n        }\n        if ($i > -1) {\n            $result = $v;\n  \
    \          break;\n        }\n    }\n    return $result;\n}\n", "    return \"\
    \";\n}\n", "  $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  $word = preg_replace(\"\
    /[^aeiou]/\", \"\", $word);\n  for($i = 0; $i <= count($vowels); $i++) {\n   \
    \ $vowel_pos = strrpos($word, $vowels[$i]);\n    if($vowel_pos > 0) {\n      return\
    \ $vowels[$i];\n    }\n  }\n  return \"\";\n}", "    return $word;\n}\n\n$word\
    \ = \"Batman\";\n$closest_vowel = get_closest_vowel($word);\necho $closest_vowel;",
  "    \n    $vowels = \"aeiou\";\n    \n    for($i=0; $i<strlen($word); $i++) {\n\
    \        \n        if(in_array($word[$i], $vowels)) {\n            $result = $word[$i];\n\
    \            break;\n        }\n    }\n    \n    return $result;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
