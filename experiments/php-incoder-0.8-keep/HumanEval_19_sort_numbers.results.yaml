name: HumanEval_19_sort_numbers
language: php
results:
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return implode(\" \", array_map(function($n)\
    \ { return $n . \"\\n\"; }, array_values(explode(\" \", $numbers))));\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxe57191.php:16\n\
    Stack trace:\n#0 /tmp/tmpvxe57191.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvxe57191.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $output = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)/',\
    \ '\\1ten', $numbers);\n    $output = preg_replace('/eleven|twelve/', 'ten', $output);\n\
    \    $output = preg_replace('/thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen/',\
    \ NULL, $output);\n    $output = preg_replace('/one|two|three|four|five|six|seven|eight|nine/',\
    \ 'zero', $output);\n    $output = preg_replace('/zero|one|two|three|four|five|six|seven|eight|nine/',\
    \ 'ten', $output);\n    $output = preg_replace('/(ten|eleven|twelve)/', 'eleven',\
    \ $output);\n    $output = preg_replace('/(thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen)/',\
    \ NULL, $output);\n    $output = preg_replace('/eleven|twelve/', NULL, $output);\n\
    \    $output = preg_replace('/(one|two|three|four|five|six|seven|eight|nine)/',\
    \ 'two', $output);\n    $output = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/',\
    \ 'three', $output);\n    $output = preg_replace('/two|three|four|five|six|seven|eight|nine/',\
    \ NULL, $output);\n    $output = preg_replace('/(ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen)/',\
    \ NULL, $output);\n    $output = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen)/',\
    \ NULL, $output);\n    return $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbvnq6jb.php:30\n\
    Stack trace:\n#0 /tmp/tmppbvnq6jb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppbvnq6jb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $sorted = array_reverse(explode('\
    \ ', $numbers));\n    return implode(' ', array_reverse($sorted));\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgq50n3u8.php:20\n\
    Stack trace:\n#0 /tmp/tmpgq50n3u8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgq50n3u8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return preg_replace('/(\\w+) (\\\
    d+) (\\w+)/', '$2 $1 $3', $numbers);\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfp4q6iq4.php:19\n\
    Stack trace:\n#0 /tmp/tmpfp4q6iq4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfp4q6iq4.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $nums = explode(' ', $numbers);\n\
    \    $result = array();\n    foreach($nums as $num) {\n        $result[] = $num;\n\
    \    }\n    sort($result);\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnj33hdmn.php:23\n\
    Stack trace:\n#0 /tmp/tmpnj33hdmn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnj33hdmn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    usort($numbers, create_function('$a, $b', 'return strcmp($a, \"$b\") == 0;'));\n\
    \    return implode(' ', $numbers);\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xs2qwxs.php:21\n\
    Stack trace:\n#0 /tmp/tmp9xs2qwxs.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9xs2qwxs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpkdteq4.php:20\n\
    Stack trace:\n#0 /tmp/tmpfpkdteq4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfpkdteq4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $array = explode(' ', $numbers);\n\
    \    sort($array);\n    return implode(' ', $array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw25yw1pq.php:20\n\
    Stack trace:\n#0 /tmp/tmpw25yw1pq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpw25yw1pq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9qh1c06.php:20\n\
    Stack trace:\n#0 /tmp/tmpe9qh1c06.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpe9qh1c06.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $number_array = explode(' ', $numbers);\n\
    \  sort($number_array);\n  return implode(' ', $number_array);\n}\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| a tags=php,sorting |>\nThis might be a little bit\
    \ too late, but here is the solution if you're using PHP 7.1:\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcjli57h5.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return preg_replace('/([0-9]+) /',\
    \ \"$1 \", preg_replace('/(\\d+)/', '$1', $numbers));\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kg075b6.php:18\n\
    Stack trace:\n#0 /tmp/tmp7kg075b6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp7kg075b6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return implode(' ', array_slice(str_split($numbers),\
    \ 0, 9));\n}\n</code>\n<|/ a |>\n<| c |>\nI liked this solution. Made it into\
    \ a function so I could call it with multiple values\n<|/ c |>\n<| c |>\nNice,\
    \ though it should be `array_slice(str_split($numbers), 0, 9)` as the example\
    \ provided has 10 numbers.\n<|/ c |>\n<| c |>\nI actually just wrote this and\
    \ noticed that I had forgotten to update it when copying the line from my actual\
    \ code. I fixed it and upvoted you!\n<|/ c |>\n<| c |>\nIf you want it to work\
    \ with a variable number of digits you might want to use this function instead,\
    \ where `str_pad` can pad to the left or right with the argument `STR_PAD_LEFT`\
    \ or `STR_PAD_RIGHT`:\nhttps://stackoverflow.com/a/52529458/1066234\n<|/ c |>\n\
    <| c |>\nIt's a pretty useful function, though it's an extension of [`str_pad`](https://secure.php.net/manual/en/function.str-pad.php),\
    \ rather than a built-in PHP function. If it were to become a built-in function,\
    \ that would make it a lot less useful, as then you could never use that function\
    \ as an argument in any other function.\n<|/ c |>\n<| a |>\n<code>\n/**\n * Sorts\
    \ a string\n * string $a\n * string $b\n * int\n */\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvjlw_9c8.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  preg_match_all('/(zero|one|two|three|four|five|six|seven|eight|nine)\\\
    b/', $numbers, $matches);\n\n  // Sort the matches from smallest to largest.\n\
    \  return implode(' ', array_map('strrev', $matches[1]));\n}\n</code>\n<|/ a |>\n\
    <| c |>\nWhat is the '?' operator for in regex ?\n<|/ c |>\n<| c |>\nIt's the\
    \ \"greedy\" match operator. It tells the regex engine to use the longest possible\
    \ match, which is usually what you want (although it's not always). http://www.regular-expressions.info/possessive.html\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvn1pr9_3.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $nums = preg_split('/\\s+/', $numbers);\n\
    \  $retval = array();\n\n  foreach ($nums as $num) {\n    $retval = array_merge($retval,\
    \ preg_split('/\\d+/', $num));\n  }\n  sort($retval);\n  return implode(' ', $retval);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmsy12e6g.php:25\n\
    Stack trace:\n#0 /tmp/tmpmsy12e6g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmsy12e6g.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = preg_replace('/[^0-9\\\
    .]/', '', $numbers);\n    return implode(' ', array_map('intval', array_chunk($numbers,\
    \ 3)));\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_chunk() expects parameter 1 to be array, string given\
    \ in /tmp/tmpbxj05w8_.php on line 9\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmpbxj05w8_.php on line 9\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpbxj05w8_.php on line 9\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbxj05w8_.php:17\nStack trace:\n#0 /tmp/tmpbxj05w8_.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbxj05w8_.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $parts = explode(' ', $numbers);\n\
    \  array_walk($parts, 'fix_number');\n  return implode(' ', $parts);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_walk() expects parameter 2 to be a valid callback, function\
    \ 'fix_number' not found or invalid function name in /tmp/tmp_70ahgeq.php on line\
    \ 9\n\nWarning: array_walk() expects parameter 2 to be a valid callback, function\
    \ 'fix_number' not found or invalid function name in /tmp/tmp_70ahgeq.php on line\
    \ 9\n\nWarning: array_walk() expects parameter 2 to be a valid callback, function\
    \ 'fix_number' not found or invalid function name in /tmp/tmp_70ahgeq.php on line\
    \ 9\n\nWarning: array_walk() expects parameter 2 to be a valid callback, function\
    \ 'fix_number' not found or invalid function name in /tmp/tmp_70ahgeq.php on line\
    \ 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_70ahgeq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_70ahgeq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_70ahgeq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $sortedNumbers = explode(' ',\
    \ $numbers);\n    $sortedNumbers = array_map('trim', $sortedNumbers);\n    sort($sortedNumbers);\n\
    \    return implode(' ', $sortedNumbers);\n}\nfunction candidate(...$args) {\n\
    \    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6bkaigy.php:20\n\
    Stack trace:\n#0 /tmp/tmpj6bkaigy.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpj6bkaigy.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Use a temporary variable to hold\
    \ the current and next number to be compared.\n  $current = null;\n  $next = null;\n\
    \  $sorted_numbers = \"\";\n\n  // Split the string into words and loop through\
    \ each one.\n  foreach (explode(' ', $numbers) as $word) {\n    // If the current\
    \ word is equal to 'zero' move to the next word.\n    if ($current === 'zero')\
    \ {\n      $current = $word;\n      // Get the next word and compare it to 'one'.\n\
    \      $next = $word;\n    } elseif ($next === 'zero') {\n      // Otherwise move\
    \ to the next number until the next 'one' is found\n      $current = $word;\n\
    \      $next = $word;\n    } else {\n      // If the current word is 'one' or\
    \ 'two', move to the next word.\n      if ($current === 'one' || $current ===\
    \ 'two') {\n        $next = $word;\n        $current = $word;\n      }\n    }\n\
    \n    // If both $current and $next are 'one' and 'two', append the current and\
    \ next word to\n    // the sorted list of numbers and continue to the next word.\n\
    \    if ($current === 'one' && $next === 'two') {\n      $sorted_numbers .= $current\
    \ . ' ' . $next;\n    }\n  }\n\n  return $sorted_numbers;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nTry this :\n<code>\n$str = \"one two three four five six\
    \ seven eight nine\";\n\n$parts = explode(\" \", $str);\n$newArray = array();\n\
    foreach ($parts as $key => $value) {\n    if ($value === \"one\") {\n        $newArray[]\
    \ = $value;\n        unset($parts[$key]);\n    }\n}\n$final = implode(\" \", $newArray).\"\
    \ \".$parts[0];\n</code>\nThe output of $final is one two three four five six\
    \ seven eight nine\n<|/ a tags=php |>\n<| c |>\nThis won't work for strings like\
    \ `\"one two three four five six seven eight nine\"`.  It will result in the string\
    \ `one two three four five six seven eight nine one`.\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>\n$string = \"one two three four five six seven eight nine\";\n\n\
    $words = explode(\" \", $string);\n$words[] = $words[0];\n$sorted = implode(\"\
    \ \", array_reverse(sort($words)));\n\necho $sorted;\n</code>\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcw93l9y0.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    // Make all strings lowercase\
    \ first\n    $numbers = strtolower($numbers);\n\n    $sortedNumbers = array();\n\
    \    $validNumbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n    foreach ($numbers as $number) {\n        $number\
    \ = str_replace(' ', '', $number);\n        // If this number isn't valid, skip\
    \ it\n        if (!in_array($number, $validNumbers)) {\n            continue;\n\
    \        }\n\n        // Add this number to the sorted list of numbers\n     \
    \   $sortedNumbers[] = $number;\n    }\n\n    // Sort the numbers in an array\n\
    \    sort($sortedNumbers);\n\n    // Convert our array to string and return the\
    \ sorted numbers\n    return implode(' ', $sortedNumbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpxh429rou.php\
    \ on line 13\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpxh429rou.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxh429rou.php:37\n\
    Stack trace:\n#0 /tmp/tmpxh429rou.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxh429rou.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $sorted = array();\n  foreach($numbers\
    \ as $number) {\n    $position = strpos($number, ' ');\n    if ($position !==\
    \ false) {\n      $number = substr($number, 0, $position);\n    }\n    $sorted[$number]\
    \ = $number;\n  }\n  $sorted_keys = array_keys($sorted);\n  sort($sorted_keys);\n\
    \  return $sorted_keys;\n}\n</code>\n<|/ a tags=sorting,string,php,numbers |>\n\
    <| a dscore=2 tags=sorting,string,php,numbers |>\nFor those who have this problem\
    \ when they need to sort with non-numeric strings (ie: alphabetical string), here\
    \ is my solution (based on other answers).\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeaikoymm.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nI thought this wouldn't work as I have never used PHP5.3 or later\n<|/\
    \ c |>\n<| c |>\nYep, my bad. Didn't realise that explode had been added in 5.3.\
    \ I've added a version for 5.2.\n<|/ c |>\n<| a dscore=4 |>\nHere is a more generic\
    \ solution that can take in any sort of array. No need to specify any keys as\
    \ they are auto-generated:\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ey620xk.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if ( !is_string($numbers) )\n  \
    \  return false;\n\n  if ( strlen($numbers) < 2 )\n    return $numbers;\n\n  $arr\
    \ = explode(' ', $numbers);\n  sort($arr);\n  return implode(' ', $arr);\n}\n\n\
    /*======================================================================*\\\n\
    \  sort_by_alpha\n  \n  Returns a list of alphabetic strings from a string of\
    \ alphanumeric strings.\n\n  >>> sort_by_alpha('a b z')\n  ['a', 'b', 'z']\n\n\
    \  >>> sort_by_alpha('z a b')\n  ['z', 'a', 'b']\n\n  >>> sort_by_alpha('a b c')\n\
    \  ['a', 'b', 'c']\n\n  >>> sort_by_alpha('c a b')\n  ['c', 'a', 'b']\n\n  >>>\
    \ sort_by_alpha('z z z')\n  ['z', 'z', 'z']\n\\*======================================================================*/\n\
    \nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9eyak50x.php:47\n\
    Stack trace:\n#0 /tmp/tmp9eyak50x.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9eyak50x.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  foreach (explode(' ', $numbers)\
    \ as $number) {\n    // Only one digit, convert to a number\n    $num = intval($number);\n\
    \    // Sort from lowest to highest numbers\n    asort($numbers);\n    // Append\
    \ the number to the sorted list\n    $numbers[] = $num;\n  }\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nYou sir, are awesome.  Thanks\
    \ so much.\n<|/ c |>\n<| c |>\nThe example given is `'three one five'`, not `'onetwothreefourfive'`.\
    \  You'd need to reverse `$numbers` each time you swap.  Also, you don't need\
    \ `explode` since `explode` removes empty elements.  The input should be reversed\
    \ each time.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp59ze7vhr.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  // Sort from smallest to largest\n  sort($numbers);\n  // Put back in space-delimited\
    \ format\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nWhy\
    \ did you downvote this answer, it is the correct one. Don't give answers -1 to\
    \ unrelated question.\n<|/ c |>\n<| c |>\nI disagree, this answer is correct and\
    \ will likely be used heavily in future. Although I agree that the other answers\
    \ are also great, I believe that this answer is correct as it is the simplest\
    \ solution. Also it explains what is going on, and why it is a better way to solve\
    \ the problem. Not everyone has time or motivation to learn every detail about\
    \ regex in detail and this answer does that well and is easy to understand. As\
    \ far as regex goes, I have found regex is usually simple and straight forward,\
    \ easy to understand and can be easily applied in future when more advanced requirements\
    \ are needed. Also it explains what each step is doing.\n<|/ c |>\n<| a tags=php,regex\
    \ dscore=3 |>\nIf your data is always formatted exactly as you show in your example,\
    \ you can use explode() to create an array and then sort it with asort() or arsort().\
    \ You can then use implode() to rebuild the string:\n<code>\n$string = \"three\
    \ one five\";\n$array = explode(' ', $string);\nasort($array);\n$string = implode('\
    \ ', $array);\necho $string;\n</code>\nOutput:\n<code>\none three five\n</code>\n\
    Demo on 3v4l.org\n<|/ a |>\n<| a dscore=3 |>\nUse this regex to extract your numbers\
    \ to an array:\n<code>\n(?:^|\\s+)\\b(\\d+)\\b\n</code>\nRegEx Demo\nUse this\
    \ code to sort that array:\n<code>\nusort($numbers, function($a, $b){\n  return\
    \ strnatcmp($a, $b);\n});\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ dscore=2 |>\nUsing preg_replace_callback\n<code>\n$string = \"three one five\"\
    ;\n$newstring = preg_replace_callback('/(\\b(?:zero|one|two|three|four|five|six|seven|eight|nine)\\\
    b)/', function($matches) {\n    $keys = array('zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3strfa1s.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return preg_replace('/(\\d+)/e',\
    \ '$0', array_map('strtolower', explode(' ', $numbers)));\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ dscore=0 |>\n<| c |>\nThe code was very similar to yours, but the problem was\
    \ that the array was being populated with a MySQL query result.  It was being\
    \ populated with strings that included decimals and numbers greater than 9.  I\
    \ got my code working using array_filter before my array_map.  Thank you for your\
    \ help.\n<|/ c |>\n<| c |>\nI forgot to mention this earlier but I just came back\
    \ to say that I tested your code and it did not work.  The code was still not\
    \ sorting my array.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\nYou could use\
    \ the SORT_NUMERIC flag with a custom comparison function:\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3w44zar1.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3wjm8dn.php:19\n\
    Stack trace:\n#0 /tmp/tmpu3wjm8dn.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpu3wjm8dn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    usort($numbers, 'sort_numbers_func');\n    return implode(' ', $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_numbers_func' not found or invalid function name in /tmp/tmp8gc1q2sz.php\
    \ on line 9\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_numbers_func' not found or invalid function name in /tmp/tmp8gc1q2sz.php\
    \ on line 9\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_numbers_func' not found or invalid function name in /tmp/tmp8gc1q2sz.php\
    \ on line 9\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_numbers_func' not found or invalid function name in /tmp/tmp8gc1q2sz.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gc1q2sz.php:21\n\
    Stack trace:\n#0 /tmp/tmp8gc1q2sz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8gc1q2sz.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n\t$output = \"\";\n\tforeach (explode(\"\
    \ \", $numbers) as $val) {\n\t\t$output .= $val . \" \";\n\t}\n\t$output = array_merge(\n\
    \t\tarray_map(\"trim\", explode(\" \", $output)),\n\t\tarray_map(\"strval\", range(9,\
    \ \"0\"))\n\t);\n\treturn implode(\" \", $output);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ dscore=1 |>\n<| a |>\nAm I right to assume that your input string looks like\
    \ the following?\n<code>\n$input = \"one three five\";\n</code>\nIf so, the following\
    \ should work:\n<code>\n$array = explode(' ', $input);\n$newarray = array();\n\
    foreach($array as $value){\n  if($value == 'one'){\n    $newarray[] = '1';\n \
    \ }elseif($value == 'two'){\n    $newarray[] = '2';\n  }elseif($value == 'three'){\n\
    \    $newarray[] = '3';\n  }elseif($value == 'four'){\n    $newarray[] = '4';\n\
    \  }elseif($value == 'five'){\n    $newarray[] = '5';\n  }elseif($value == 'six'){\n\
    \    $newarray[] = '6';\n  }elseif($value == 'seven'){\n    $newarray[] = '7';\n\
    \  }elseif($value == 'eight'){\n    $newarray[] = '8';\n  }elseif($value == 'nine'){\n\
    \    $newarray[] = '9';\n  }else{\n    $newarray[] = $value;\n  }\n}\n$new_array\
    \ = implode(' ', $newarray);\n</code>\nThe output of this is:\n<code>\n1 3 5\n\
    </code>\nHope this helps\n<|/ a tags=php,arrays,sorting dscore=0 |>\n<| c |>\n\
    Thanks for the reply but that wouldn't be possible. There could be a number before\
    \ a number in the input string.\n<|/ c |>\n<| c |>\nWell you could change the\
    \ $input to $array = \"one three four\"; and remove the elseif statements and\
    \ that should still work\n<|/ c |>\n<| a dscore=0 tags=php,arrays,sorting |>\n\
    You could try this one-liner:\n<code>\n$input = \"one three five\";\n$sorted =\
    \ preg_replace_callback('/(one|two|three|four|five|six|seven|eight|nine)/', function($m){return\
    \ str\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplwt397tj.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nOh god thank you so much, I had no idea that was possible. I've\
    \ been looking around and this is very helpful\n<|/ c |>\n<| a dscore=1 tags=php\
    \ |>\n<code>\n$arr = explode(\" \",\"one two three four five six seven eight nine\"\
    );\nsort($arr);\n$str = implode(\" \",$arr);\necho $str;\n</code>\n<|/ a |>\n\
    <| a tags=php |>\n<code>\n<?php\n$arr = array('one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\nsort($arr);\n$string = implode(\" \", $arr);\n\
    echo $string;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=php |>\nYou could\
    \ use this:\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqqj_eft7.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $list = explode(\" \", $numbers);\n\
    \    array_multisort($list, SORT_NUMERIC, $list);\n    $list = array_map(function($v)\
    \ { return $v == 0 ? 0 : $v; }, $list);\n    return implode(\" \", $list);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php |>\nI did some tests with this PHP function\
    \ and it works very well\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsuiqoerx.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  foreach (explode(' ', $numbers)\
    \ as $n) {\n    echo intval($n) . ' ';\n  }\n}\nfunction candidate(...$args) {\n\
    \    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0 \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0trky6ke.php:17\n\
    Stack trace:\n#0 /tmp/tmp0trky6ke.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0trky6ke.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if (empty($numbers)) {\n    return\
    \ '';\n  }\n\n  return implode(' ', array_map(function($n) { return $n ? 'one'\
    \ : null; }, preg_split('/\\s+/', $numbers)));\n}\n</code>\nIf you wanted to do\
    \ it without PHP 5.3 you'd need a separate function or class with a foreach loop\
    \ and a comparison function.\n<|/ a dscore=1 |>\n<| c |>\n`array_map('natsort',\
    \ $numbers)`\n<|/ c |>\n<| c |>\nI like the use of `array_map` here. Very clever!\n\
    <|/ c |>\n<| c |>\n`preg_split` can be replaced by `explode`.\n<|/ c |>\n<| c\
    \ |>\n- That's a fair point.  I was just trying to stay close to the original\
    \ code.  `preg_split` is more efficient than `explode` but is less flexible so\
    \ I used `explode`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$arr = explode('\
    \ ', $string);\nsort($arr);\n$string = implode(' ', $arr);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis answer does not sort the string, but just rearranges it. If\
    \ you want it sorted, you need to use array_multisort()\n<|/ c |>\n<| c |>\nOops,\
    \ sorry I missed that.\n<|/ c |>\n<| a tags=php,string |>\nYou can try with regex\n\
    <code>\n$array = array('three', 'five', 'one');\n$replace = preg_replace(\"/(\\\
    w+)|(?<=\\s)(?=\\s)/\", \" \", $array);\n$result = implode($replace);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis solution only works if the input is exactly as\
    \ stated in the question, and does not work for longer inputs. Try with `array\
    \ ('three four', 'five', 'one two', 'six seven');`.\n<|/ c |>\n<| c |>\nThis will\
    \ not work if two words are separated by single space like `'three four'`\n<|/\
    \ c |>\n<| c |>\nThe regex is incorrect, should be `\"/((\\w+)|(?<=\\s)(?=\\s))/\"\
    `. However, this solution will not work if there are more than one space. For\
    \ example, `'three four five'` will be changed to `'three four five'`. It should\
    \ also work if the space is at the end of a \nfunction candidate(...$args) {\n\
    \    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps1d19gfs.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if (empty($numbers)) {\n    return\
    \ $numbers;\n  }\n  $list = explode(' ', $numbers);\n  sort($list, SORT_NUMERIC);\n\
    \  return implode(' ', $list);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    Just in case someone is still looking for an answer, I've written a PHP class\
    \ that does exactly that using Arrays. It's quite simple to implement and you\
    \ get all the benefits of array searching, manipulation, etc. plus the ability\
    \ to use PHP preg_match to find numbers (that might not be the best regular expression\
    \ to use, since it's more expensive).\nI've implemented it in a project I'm working\
    \ on and it's been very useful. \nYou can find it here: https://gist.github.com/jameswebdesign/9f32a95f8e67eca5ba9f\n\
    <code>\n<?php\n\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nclass NumberArray\n\
    {\n    private $numbers;\n    private $sorted = array();\n\n    public function\
    \ __construct()\n    {\n        $this->numbers = array();\n    }\n\n    public\
    \ function add($value)\n    {\n        $this->numbers[] = $value;\n    }\n\n \
    \   public function add($value, $sorted = true)\n    {\n        $this->numbers[]\
    \ = $value;\n        $this->sorted = $sorted;\n    }\n\n    public function count()\n\
    \    {\n        return count($this->numbers);\n    }\n\n    public function getSorted()\n\
    \    {\n        if ($this->sorted == true) {\n            return $this->numbers;\n\
    \        }\n\n        usort($this->numbers, function ($a, $b) {\n            return\
    \ ($a < $b) ? -1 : 1;\n        });\n\n        return $this->numbers;\n    }\n\n\
    \    public function search($needle, $caseSensitive = true)\n    {\n        if\
    \ ($caseSensitive == false) {\n            $needle = preg_quote($needle, '/');\n\
    \        }\n\n        $found = preg_grep('/' . $needle . '/i', $this->numbers);\n\
    \n        if (count($found) > 0) {\n            foreach ($found as $key => $value)\
    \ {\n                $this->sorted[$key] = $value;\n            }\n          \
    \  return $this->sorted;\n        }\n\n        return null;\n    }\n\n    public\
    \ function searchNumber($number)\n    {\n        $key = array_search($number,\
    \ $this->numbers);\n        if ($key !== false) {\n            $this->sorted[$key]\
    \ = $number;\n            return $this->sorted;\n        }\n\n        return null;\n\
    \    }\n}\n</code>\nUsage:\n<code>\n$arrNumbers = new NumberArray();\n$arrNumbers->add(1);\n\
    $arrNumbers->add(2);\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdmxaodce.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $list = explode(' ', $numbers);\n\
    \  sort($list);\n  return implode(' ', $list);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwn80kvg.php:20\n\
    Stack trace:\n#0 /tmp/tmpvwn80kvg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvwn80kvg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $validChoices = array('zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n  $validChoices\
    \ = array_flip($validChoices);\n  $numbersArray = explode(' ', $numbers);\n  asort($numbersArray);\n\
    \  return implode(' ', $numbersArray);\n}\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a dscore=2 |>\nThis is a quick solution:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3vo0cyj_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $result = array();\n  foreach(explode('\
    \ ', $numbers) as $number) {\n    if($number) {\n      $number = intval($number);\n\
    \      if($number < 10)\n        $number = '0' . $number;\n    }\n    $result[]\
    \ = $number;\n  }\n  sort($result);\n  return implode(' ', $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsz32uit.php:27\n\
    Stack trace:\n#0 /tmp/tmpzsz32uit.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzsz32uit.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  foreach (explode(' ', $numbers)\
    \ as $n) {\n    if (in_array($n, [ 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine' ])) {\n      $numbers = str_replace($n, '',\
    \ $numbers);\n    }\n  }\n  return $numbers;\n}\n</code>\n<|/ a dscore=3 tags=arrays,algorithm,php,sorting\
    \ |>\n<| a |>\nIf you're only sorting single digits, this will do the job:\n<code>\n\
    <?php\n$numArray = array('one', 'three', 'four', 'two');\nasort($numArray);\n\n\
    foreach($numArray as $num){\n    echo \"$num, \";\n}\n</code>\nIf you're sorting\
    \ larger numbers, it will sort them alphabetically.\n<|/ a tags=arrays,algorithm,php,sorting\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpli9v9jt3.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return sort($numbers);\n}\n</code>\n\
    <|/ a |>\n<| c |>\n`sort` doesn't always work that way. Try it with \"three nine\
    \ four\".\n<|/ c |>\n<| c |>\n, you're right, I've updated the solution. Thanks\
    \ for pointing it out!\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$numbers =\
    \ array('nine','nine','ten','twenty','two','thirty','four','five','six','seven','eight','nine','ten');\n\
    $n = str_replace(' ', '', $numbers);\nsort($n);\n$result = implode('', $n);\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nTry this.\n<code>\n<?php \n\n$numbers = array('nine','nine','ten','twenty','two','thirty','four','five','six','seven','eight','nine','ten');\n\
    sort($numbers);\necho '<pre>';\nprint_r($numbers);\necho '</pre>';\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsml09u_v.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $result = '';\n\n  foreach (explode('\
    \ ', $numbers) as $number)\n    $result .= ($number == 'zero') ? '' : $number\
    \ . ' ';\n  return rtrim($result, ' ');\n}\nfunction candidate(...$args) {\n \
    \   return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdipgjtql.php:22\n\
    Stack trace:\n#0 /tmp/tmpdipgjtql.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpdipgjtql.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = preg_replace('/[^0-9\
    \ ]/', '', $numbers);\n  return implode('', array_slice(explode(' ', $numbers),\
    \ 0, 9));\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaecsw3iy.php:18\n\
    Stack trace:\n#0 /tmp/tmpaecsw3iy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpaecsw3iy.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Trim leading and trailing whitespace,\
    \ split on spaces, reverse order\n  $numbers_arr = array_filter(explode(' ', trim($numbers)));\n\
    \n  // Add zero for single-digit numbers, so that we can sort numbers in reverse.\n\
    \  foreach ($numbers_arr as $number) {\n    if (strlen($number) == 1) {\n    \
    \  $number = '0' . $number;\n    }\n  }\n\n  // Sort numbers in reverse order.\n\
    \  array_multisort($numbers_arr, $numbers_arr);\n\n  // Join remaining numbers\
    \ and return.\n  return implode(' ', $numbers_arr);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenb4071p.php:31\n\
    Stack trace:\n#0 /tmp/tmpenb4071p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpenb4071p.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return sort($numbers);\n}\n\n\
    function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpwhje4pgh.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhje4pgh.php:16\n\
    Stack trace:\n#0 /tmp/tmpwhje4pgh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwhje4pgh.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $list = explode(\" \", $numbers);\n\
    \  sort($list, SORT_NUMERIC);\n  return implode(\" \", $list);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjolsoyp4.php:20\n\
    Stack trace:\n#0 /tmp/tmpjolsoyp4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjolsoyp4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return sort($numbers);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is not working, if $numbers='three one five'\n<|/ c |>\n\
    <| a tags=php |>\nI suggest you to make a function like this:\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsuh5b4wp.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zkyih7s.php:20\n\
    Stack trace:\n#0 /tmp/tmp2zkyih7s.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2zkyih7s.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return preg_replace('/[^0-9]/',\
    \ '', implode(' ', preg_split('/\\s+/', $numbers)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9ktz66c.php:17\n\
    Stack trace:\n#0 /tmp/tmpj9ktz66c.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpj9ktz66c.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $choices = array();\n  foreach (explode('\
    \ ', $numbers) as $n) {\n    array_push($choices, $n);\n  }\n  sort($choices);\n\
    \  return implode(' ', $choices);\n}\n\n$a = array(2,3,4);\n$b = array();\nforeach($a\
    \ as $v) {\n  array_push($b, $v);\n}\nsort($b);\nprint_r($b);\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2szwtpyd.php:30\nStack trace:\n#0 /tmp/tmp2szwtpyd.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2szwtpyd.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $parts = explode(' ', $numbers);\n\
    \  sort($parts);\n  return implode(' ', $parts);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvrkvgr3.php:20\n\
    Stack trace:\n#0 /tmp/tmphvrkvgr3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphvrkvgr3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return preg_replace('/\\s+/', '\
    \ ', $numbers);\n}\n\n/**\n * Returns TRUE if specified value is valid for date\
    \ input field,\n * i.e. is a valid date, has correct format, and is within range.\n\
    \ *\n * @param mixed $value Input value to be checked\n *\n * @return bool Boolean\
    \ value indicating whether the input value is valid\n */\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt93143sj.php:27\n\
    Stack trace:\n#0 /tmp/tmpt93143sj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt93143sj.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    // Get the array of strings that\
    \ represent numbers, and sort it.\n    $numbers = explode(' ', $numbers);\n  \
    \  sort($numbers);\n\n    // Convert the array of strings back to a single string.\n\
    \    return implode(' ', $numbers);\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuimhrlig.php:23\n\
    Stack trace:\n#0 /tmp/tmpuimhrlig.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuimhrlig.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $list = array_filter(explode('\
    \ ', $numbers));\n    return implode(' ', array_map(function ($number) {\n   \
    \     switch ($number) {\n            case 'zero':\n            case 'one':\n\
    \            case 'two':\n            case 'three':\n            case 'four':\n\
    \            case 'five':\n            case 'six':\n            case 'seven':\n\
    \            case 'eight':\n            case 'nine':\n                return $number;\n\
    \            case 'ten':\n            case 'eleven':\n            case 'twelve':\n\
    \            case 'thirteen':\n            case 'fourteen':\n            case\
    \ 'fifteen':\n            case 'sixteen':\n            case 'seventeen':\n   \
    \         case 'eighteen':\n            case 'nineteen':\n                return\
    \ 'ten';\n            case 'twenty':\n                return 'twenty';\n     \
    \       case 'thirty':\n                return 'thirty';\n            case 'forty':\n\
    \                return 'forty';\n            case 'fifty':\n                return\
    \ 'fifty';\n            case 'sixty':\n                return 'sixty';\n     \
    \       case 'seventy':\n                return 'seventy';\n            case 'eighty':\n\
    \                return 'eighty';\n            case 'ninety':\n              \
    \  return 'ninety';\n        }\n    }, array_values($list)));\n}\n</code>\n<|/\
    \ a tags=php dscore=0 |>\n<| a tags=php dscore=0 |>\nThis works for me.\n<code>\n\
    function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph1_fhw0a.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=regex,php,preg-replace\
    \ dscore=3 |>\n<| c |>\nYeah, I've been using explode, implode and str_replace\
    \ all these days. Thanks so much for this answer. I just needed an idea to sort\
    \ through.\n<|/ c |>\n<| a |>\nYou could use a regex to match all the digits and\
    \ then sort them numerically.\n<code>\n<?php\n$str = 'one two four six three two\
    \ seven eight nine';\n$pattern = '/\\d+/';\n$replaced = preg_replace($pattern,\
    \ '', $str);\n$numbers = explode(' ', $replaced);\nsort($numbers);\n$newStr =\
    \ implode(' ', $numbers);\necho $newStr;\n</code>\n<|/ a tags=regex,php,preg-replace\
    \ dscore=2 |>\n<| a dscore=1 tags=regex,php,preg-replace |>\nIf you want to stick\
    \ with preg_replace, I suggest the following pattern:\n<code>\n$pattern = '/((?:^|\\\
    s)\\d+(?:\\s|$))/';\n</code>\nThis matches one or more digits from beginning of\
    \ line or space to end of line or space.\n<|/ a |>\n<| a dscore=1 tags=regex,php,preg-replace\
    \ |>\nFor a more general case:\n<code>\n$numbers = 'one two four six three two\
    \ seven eight nine';\n$numbers = preg_replace('/([0-9]+)/', '$1', $numbers);\n\
    $numbers = preg_replace('/\\s+/', ' ', $numbers);\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nFor just sorting numbers, you can use preg_replace, explode and sort:\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe4_gf0a2.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  global $sorting;\n  \n  $numbers\
    \ = explode(' ', $numbers);\n  $sorting = [];\n\n  foreach($numbers as $number)\
    \ {\n    if (!in_array($number, $sorting)) {\n      $sorting[] = $number;\n  \
    \  }\n  }\n\n  sort($sorting);\n\n  return implode(' ', $sorting);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu79l2kul.php:30\n\
    Stack trace:\n#0 /tmp/tmpu79l2kul.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpu79l2kul.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return preg_replace('/(\\d+)/',\
    \ '\\1',\n        preg_replace('/\\s+/', ' ', trim($numbers))\n    );\n}\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsiwnky86.php:20\n\
    Stack trace:\n#0 /tmp/tmpsiwnky86.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpsiwnky86.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(\" \", $numbers);\n\
    \    $numbers = array_map(\"intval\", $numbers);\n    array_multisort($numbers);\n\
    \    return join(\" \", $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis is very\
    \ helpful - thanks! Can you explain the use of the '$ns' variable in that function?\
    \ Why is the '$ns' variable being used?\n<|/ c |>\n<| c |>\nIt's a short hand\
    \ for the variable $ns. I included it for readability. :)\n<|/ c |>\n<| c |>\n\
    Sorry, I don't think I fully understand this code... can you explain the sorting\
    \ algorithm a little more so I can get a better understanding? Also, if I wanted\
    \ to include hyphenated numbers, what changes would I need to make?\n<|/ c |>\n\
    <| c |>\nThe sorting algorithm is explained by my comment above the function.\
    \ If you want to include hyphenated numbers, just add them to the `$numbers` array\
    \ in the function. See this [demo](https://eval.in/593746) for an example of a\
    \ hyphenated string.\n<|/ c |>\n<| c |>\nThanks. I understand the sorting algorithm\
    \ and I see that your demo includes the hyphenated string. Can you please explain\
    \ this section of the code? Why is the '$ns' variable being used?\n    $ns = array(1,\
    \ 2, 3, 4, 5);\n<|/ c |>\n<| a |>\n<code>\n$numbers = \"1 2 3 4 5 6 7 8 9 10\"\
    ;\n$arr = explode(\" \",$numbers);\nasort($arr);\n$output = implode(\" \",$arr);\n\
    echo $output;\n</code>\n<|/ a dscore=0 tags=php |>\n<| a tags=php |>\nHere's a\
    \ simpler way, using array_map() and usort() functions:\n<code>\n<?php\n\n$numbers\
    \ = array(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\",\
    \ \"seven\", \"eight\", \"nine\", \"ten\");\n\nfunction candidate(...$args) {\n\
    \    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppfb7mifx.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $parts = explode(' ', $numbers);\n\
    \  array_multisort($parts, SORT_NUMERIC);\n  return implode(' ', $parts);\n}\n\
    \nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwflo2tbv.php:21\n\
    Stack trace:\n#0 /tmp/tmpwflo2tbv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwflo2tbv.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  preg_match_all(\"/\\s[0-9]{2,}\\\
    s/\", $numbers, $matches);\n\n  foreach ($matches[1] as $i => $match) {\n    $number\
    \ = $matches[0][$i];\n    sort($number);\n    $numbers = str_replace($number,\
    \ $numbers[count($number) - 1], $numbers);\n  }\n\n  return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpyo377etq.php\
    \ on line 10\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpyo377etq.php\
    \ on line 10\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpyo377etq.php\
    \ on line 10\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpyo377etq.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyo377etq.php:27\n\
    Stack trace:\n#0 /tmp/tmpyo377etq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyo377etq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $words = explode(\" \", $numbers);\n\
    \    $length = count($words);\n    $output = '';\n    for($i = 0; $i < $length;\
    \ $i++) {\n        $word = $words[$i];\n        if($word != 'zero' && $word !=\
    \ 'one' && $word != 'two' && $word != 'three' && $word != 'four' && $word != 'five'\
    \ && $word != 'six' && $word != 'seven' && $word != 'eight' && $word != 'nine')\
    \ {\n            $output .= $word . ' ';\n        }\n    }\n    $output = trim($output);\n\
    \    return $output;\n}\n</code>\nHope that helps. Let me know if it works for\
    \ you.\n<|/ a dscore=0 |>\n<| c |>\nThe problem is when input value like this\
    \ \"one two three\" the output should be like \"one two three\" but output is\
    \ \"one two three zero\". I am working with dynamic form and so i cannot change\
    \ values every time when user submit a form. I think the problem is with dynamic\
    \ value after submit.\n<|/ c |>\n<| c |>\nIt doesn't work when input value like\
    \ this \"one two three four\". I think the problem is with dynamic value after\
    \ submit.\n<|/ c |>\n<| c |>\nDid you try the code that I posted? It will work\
    \ for \"one two three\" as well.\n<|/ c |>\n<| c |>\nI copy your code and paste\
    \ in my php file and also copy your output function and call it in my output function\
    \ but its not working for me. I dont know why ?\n<|/ c |>\n<| c |>\nCan you post\
    \ your code and the output you get from the program?\n<|/ c |>\n<| a dscore=0\
    \ |>\nJust a little modification in your code and it works. Please check this\
    \ out\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpskemjfsu.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnuzcwvb.php:19\n\
    Stack trace:\n#0 /tmp/tmpnnuzcwvb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnnuzcwvb.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  list($numbers) = explode(' ', $numbers);\n\
    \  return implode(' ', array_merge(\n    range(min($numbers), max($numbers)+1),\n\
    \    array_flip($numbers)\n  ));\n}\n</code>\n<|/ a |>\n<| c |>\nI'm trying this\
    \ but it's not working as expected. I don't understand the use of min() and max()\
    \ in combination with array_flip() could you please explain me in further detail?\n\
    <|/ c |>\n<| c |>\nI added a better explanation. Does this explain it any better?\n\
    <|/ c |>\n<| a |>\nThis solution works:\n<code>\n<?php\n  $numbers = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8);\n  $order = \"zero one two three four five six seven eight\
    \ nine\";\n  $sorted = preg_replace('/([0-9]+)/e', \"$1\\n\", $numbers);\n  $sorted\
    \ = explode(\"\\n\", $sorted);\n  $sorted = array_map(\"intval\", $sorted);\n\
    \  $sorted = array_combine(explode(\" \", $order), $sorted);\n  $sorted = array_combine(array_keys($sorted),\
    \ array_values($sorted));\n  print_r($sorted);\nfunction candidate(...$args) {\n\
    \    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzd6zn9_y.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n\n/**\n * Given a\
    \ string representing a binary number sort the bits from least to most.\n *\n\
    \ * >>> sort_binary_numbers('001')\n * '1'\n * >>> sort_binary_numbers('010')\n\
    \ * '10'\n * >>> sort_binary_numbers('110')\n * '11'\n * >>> sort_binary_numbers('0010')\n\
    \ * '100'\n * >>> sort_binary_numbers('1010')\n * '010'\n * >>> sort_binary_numbers('1011')\n\
    \ * '111'\n * >>> sort_binary_numbers('0100')\n * '001'\n * >>> sort_binary_numbers('0101')\n\
    \ * '100'\n * >>> sort_binary_numbers('0111')\n * '111'\n * >>> sort_binary_numbers('0110')\n\
    \ * '010'\n * >>> sort_binary_numbers('0101')\n * '100'\n * >>> sort_binary_numbers('0111')\n\
    \ * '111'\n * >>> sort_binary_numbers('1000')\n * '000'\n * >>> sort_binary_numbers('1001')\n\
    \ * '001'\n * >>> sort_binary_numbers('1010')\n * '010'\n * >>> sort_binary_numbers('1011')\n\
    \ * '111'\n * >>> sort_binary_numbers('1100')\n * '110'\n * >>> sort_binary_numbers('1101')\n\
    \ * '111'\n * >>> sort_binary_numbers('1110')\n * '110'\n * >>> sort_binary_numbers('1111')\n\
    \ * '111'\n * >>> sort_binary_numbers('0000')\n * '0'\n * >>> sort_binary_numbers('0001')\n\
    \ * '1'\n * >>> sort_binary_numbers('0010')\n * '10'\n * >>> sort_binary_numbers('0011')\n\
    \ * '11'\n * >>> sort_binary_numbers('0100')\n * '001'\n * >>> sort_binary_numbers('0101')\n\
    \ * '100'\n * >>> sort_binary_numbers('0110')\n * '110'\n * >>> sort_binary_numbers('0111')\n\
    \ * '111'\n * >>> sort_binary_numbers('1000')\n * '000'\n * >>> sort_binary_numbers('1001')\n\
    \ * '001'\n * >>> sort_binary_numbers('1010')\n * '010'\n * >>> sort_binary_numbers('1011')\n\
    \ * '111'\n * >>> \nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 13 in /tmp/tmp75dnq9vh.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = str_replace(array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'), array('',\
    \ '', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'),\
    \ $numbers);\n  return implode(' ', $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmphsr4xrvr.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsr4xrvr.php:16\n\
    Stack trace:\n#0 /tmp/tmphsr4xrvr.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphsr4xrvr.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Make sure we got a string (possibly\
    \ empty)\n  $numbers = (string) $numbers;\n\n  // Get the list of number strings\
    \ and make sure they have at least one character\n  $numbers = explode(' ', $numbers);\n\
    \  array_walk($numbers, function (&$value) {\n    $value = (string) $value;\n\
    \    if ($value == '') {\n      $value = '0';\n    }\n  });\n\n  // Get the number\
    \ of digits to pad, and make sure it's a positive integer\n  $length = strlen($numbers[0]);\n\
    \  if ($length < 1) {\n    $length = 1;\n  }\n  if (0 === (int) $length) {\n \
    \   $length = 1;\n  }\n  if (0 > $length) {\n    $length = 1;\n  }\n\n  // Get\
    \ the minimum and maximum numbers\n  $min = min($numbers);\n  $max = max($numbers);\n\
    \n  // Get the number of digits to remove from the minimum and maximum numbers\n\
    \  $digits_to_remove = strlen($min) - strlen($max);\n\n  // If there's a difference\
    \ in the number of digits between the minimum and maximum numbers\n  // then we\
    \ may need to pad the number with leading zeroes\n  if (($digits_to_remove = $digits_to_remove\
    \ + ($length - ($digits_to_remove % $length))) > $length) {\n    // Set the number\
    \ of digits to remove as a percentage of the length of the number string\n   \
    \ $digits_to_remove = ($length - ($digits_to_remove % $length));\n\n    // Pad\
    \ the number with zeroes to a length of $digits_to_remove\n    $numbers = array_map(function\
    \ ($number) {\n      return str_pad($number, $digits_to_remove, '0', STR_PAD_LEFT);\n\
    \    }, $numbers);\n\n    // Set the minimum and maximum number to the smallest\
    \ and largest number\n    $min = min($numbers);\n    $max = max($numbers);\n \
    \ }\n\n  // Re-order the numbers in place and re-combine them as a space-delimited\
    \ string\n  array_walk($numbers, function (&$number) {\n    $number = str_pad($number,\
    \ $length, '0', STR_PAD_LEFT);\n  });\n  return implode(' ', $numbers);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1j51lvt.php:66\n\
    Stack trace:\n#0 /tmp/tmpb1j51lvt.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpb1j51lvt.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if (!$numbers) {\n    return $numbers;\n\
    \  }\n\n  // Convert the string of numbers to an array.\n  $number_array = explode('\
    \ ', $numbers);\n\n  // Sort the array from smallest to largest.\n  sort($number_array);\n\
    \n  // Paste the array back together into a string.\n  $numbers = implode(' ',\
    \ $number_array);\n  return $numbers;\n}\n</code>\nThe function could be improved\
    \ by adding error handling, or maybe even a more compact version (like the one\
    \ above).\n<|/ a dscore=0 tags=php,sorting,wordpress |>\n<| a dscore=0 tags=php,sorting,wordpress\
    \ |>\nFor simple sorting of strings this function works very well and easy to\
    \ implement.\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnscvz855.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return preg_replace('/([a-z]+)/i',\
    \ '$1 ', preg_replace('/([0-9]+)/i', '$1', $numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp288ti46c.php:17\n\
    Stack trace:\n#0 /tmp/tmp288ti46c.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp288ti46c.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  // Sort the numbers starting with the smallest ones and working towards the\
    \ largest\n  sort($numbers);\n  // Convert the array into a space-delimited string\
    \ with numbers sorted\n  return implode(' ', $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf_2nng7.php:21\n\
    Stack trace:\n#0 /tmp/tmpbf_2nng7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbf_2nng7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return preg_replace('/[^0-9 ]+/',\
    \ ' ', preg_replace('/[0-9 ]+/', ' ', $numbers))\n           // trim the whitespace\
    \ around all the numbers in case there are leading and trailing spaces\n     \
    \      // http://stackoverflow.com/a/8898012\n           rtrim($numbers, ' ')\n\
    \           // put the numbers into an array\n           ->explode(' ', NULL,\
    \ FALSE)\n           // sort it\n           ->sort()\n           // make it a\
    \ string\n           ->implode(\" \", NULL, FALSE);\n}\n</code>\n<|/ a dscore=2\
    \ tags=string,php,sorting |>\n<| c |>\nThank you for the answer, but I'm having\
    \ some trouble following your explanation; could you go through the steps one\
    \ by one so I can better understand what is happening? I appreciate the help!\n\
    <|/ c |>\n<| c |>\nI have added comments for you.\n<|/ c |>\n<| a dscore=1 tags=string,php,sorting\
    \ |>\nTry something like this (untested):\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeoigjd8w.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = trim($numbers);\n  $numbers\
    \ = explode(' ', $numbers);\n  natsort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=2 tags=php,sorting,algorithm |>\n<| a dscore=1 tags=php,sorting,algorithm\
    \ |>\nHere is my solution. Very similar to Jorge's solution, but a little more\
    \ general.\n<code>\n/**\n * Sorts an array in ascending order.\n * \n * string\
    \ $list\n *\n * array\n */\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8aceacyi.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $values = array();\n    foreach(explode('\
    \ ', $numbers) as $i) {\n        $values[$i] = 1;\n    }\n    arsort($values);\n\
    \    return implode(' ', array_keys($values));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5k4eu5s.php:24\n\
    Stack trace:\n#0 /tmp/tmpp5k4eu5s.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp5k4eu5s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $list = explode(\" \", $numbers);\n\
    \  $return = \"\";\n  sort($list);\n  $sorted = \"\";\n  foreach ($list as $val)\
    \ {\n    $sorted .= $val . \" \";\n  }\n  $return .= $sorted;\n  return $return;\n\
    }\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qcrfikx.php:23\n\
    Stack trace:\n#0 /tmp/tmp3qcrfikx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp3qcrfikx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $list = explode(' ', $numbers);\n\
    \  $list = array_map('intval', $list);\n  sort($list);\n  return implode(' ',\
    \ $list);\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4piqj9g_.php:19\n\
    Stack trace:\n#0 /tmp/tmp4piqj9g_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4piqj9g_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Extract the numbers from the\
    \ string into an array (using space as a delimiter)\n  $numbers_arr = explode('\
    \ ', $numbers);\n\n  // Store the numbers in reverse order so that the highest\
    \ number is at the start\n  array_reverse($numbers_arr);\n\n  // Turn the numbers\
    \ into integers, sorting from smallest to largest\n  sort($numbers_arr);\n\n \
    \ // Turn the array back into a space-delimited string and return it\n  return\
    \ implode(' ', $numbers_arr);\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkskvrsn9.php:27\n\
    Stack trace:\n#0 /tmp/tmpkskvrsn9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkskvrsn9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = preg_split('/ +/',\
    \ $numbers, -1, PREG_SPLIT_NO_EMPTY);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is nice! But I really\
    \ need a function that would split by space, ignore empty strings and also split\
    \ by all letters/symbols except space.\n<|/ c |>\n<| c |>\nWhy not use `preg_split()`\
    \ with `PREG_SPLIT_NO_EMPTY`?\n<|/ c |>\n<| c |>\n: because I didn't know `preg_split()`\
    \ had that option.\n<|/ c |>\n<| c |>\nNote that this will split on non-numbers:\
    \ `3 four`\n<|/ c |>\n<| c |>\n: what do you think of `preg_split('/\\s+/', $numbers)`?\n\
    <|/ c |>\n<| a tags=sorting,algorithm,string,php,sorting |>\nPHP has a function\
    \ called asort(). Here's a quick example.\n<code>\n<?php\n    $fruits = array(\"\
    d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\"\
    );\n    asort($fruits);\n\n    foreach ($fruits as $key => $value) {\n       \
    \ echo \"$key = $value <br>\";\n    }\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2cgrv_4u.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i','$1\
    \ $2 $3 $4 $5 $6 $7 $8 $9',$numbers);\n}\nfunction candidate(...$args) {\n   \
    \ return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b6gtaea.php:16\n\
    Stack trace:\n#0 /tmp/tmp4b6gtaea.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4b6gtaea.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    asort($numbers);\n    return implode(' ', $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kby7kx9.php:19\n\
    Stack trace:\n#0 /tmp/tmp7kby7kx9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7kby7kx9.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  arsort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdhudse6w.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  $numbers = array_map('intval', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt6mafdys.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $choices = explode(' ', $numbers);\n\
    \    $choices = array_map('intval', $choices);\n\n    arsort($choices);\n    return\
    \ implode(' ', $choices);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n+1 for being\
    \ able to sort by numbers instead of text. As far as I can tell, this is the only\
    \ answer here which actually uses the numbers to sort the text.\n<|/ c |>\n<|\
    \ c |>\nthis isn't actually sorting, its just sorting the order of the numbers,\
    \ which you can do by replacing `arsort` with `asort`\n<|/ c |>\n<| c |>\n- you're\
    \ right. I've edited my answer to point out that it's sort instead of sorting.\
    \ Thanks!\n<|/ c |>\n<| c |>\nthis is very elegant\n<|/ c |>\n<| c |>\nvery elegant.\
    \ but how do I use this? I don't see a print or any output on screen.\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9hrrmg1q.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if (empty($numbers)) {\n    return\
    \ '';\n  }\n\n  $number_list = explode(' ', $numbers);\n  sort($number_list);\n\
    \n  return implode(' ', $number_list);\n}\n</code>\n<|/ a tags=regex,php dscore=3\
    \ |>\n<| c |>\nYour answer was the simplest and most effective.\n<|/ c |>\n<|\
    \ a tags=regex,php |>\n<code>\n$str = \"one two three four five six seven eight\
    \ nine ten\";\n$words = explode(\" \", $str);\nsort($words);\necho join(\" \"\
    , $words);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nYou can do the following\n\
    <code>\n$str = 'one two three four five six seven eight nine ten';\n$str = preg_replace('/[^0-9]+/',\
    \ '', $str);\nsort($str);\n</code>\nThis uses preg_replace to replace all non-numeric\
    \ characters and then sorts the array after that.\n<|/ a tags=regex,php |>\n<|\
    \ c |>\nWhy did you use `preg_replace` here? `sort` does a nice job as it handles\
    \ arrays of string and numbers, too.\n<|/ c |>\n<| c |>\nbecause I thought you\
    \ wanted a regular expression :)\n<|/ c |>\n<| c |>\n: No, I didn't. You're right.\
    \ `sort` does just fine. I'm just wondering why you used `preg_replace` here.\n\
    <|/ c |>\n<| c |>\nto remove the non number characters from the string before\
    \ it was sorted.\n<|/ c |>\n<| c |>\nIt would be much more efficient to first\
    \ `preg_replace` the `str` to remove all `''`, which also removes non-numeric\
    \ characters, than to sort and then remove non-numeric characters again ;-)\n\
    <|/ c |>\n<| a |>\nThe accepted answer is not entirely correct. As already explained\
    \ in a comment under it (I did not), the accepted answer will sort words differently\
    \ than OP's question, because the sort is case insensitive. If you are sure that\
    \ your input string will be entirely composed of numbers, you can simply use strsort($string)\
    \ to sort the string. This will sort any type of string, including numbers, alpha\
    \ and non numeric. You can also use SORT_NUMERIC flag (since PHP 5.3) to sort\
    \ numerically instead.\n<|/ a tags=regex,php dscore=2 |>\n<|\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0mmc12_k.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  global $digits;\n\n  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n\n  $sorted_numbers = array();\n\
    \  foreach ($numbers as $number) {\n    $sorted_numbers[$number] = 0;\n  }\n\n\
    \  foreach ($digits as $key => $digit) {\n    if ($number == $digit) {\n     \
    \ $sorted_numbers[$number] = $key;\n    }\n  }\n\n  return implode(' ', $sorted_numbers);\n\
    }\n</code>\n<|/ a dscore=2 tags=php,string,sorting |>\n<| a |>\n<code>\n$numbers\
    \ = explode(' ', $numbers);\nsort($numbers);\n$result = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,string,sorting dscore=2 |>\n<| a tags=php,string,sorting\
    \ dscore=2 |>\nHere is another way using array_multisort()\n<code>\n$numbers =\
    \ \"1 2 3 4 5 6 7 8 9 10\";\n$numbers = explode(\" \",$numbers);\n\n$numbers =\
    \ array_multisort($numbers);\n\n$result = implode(\" \",$numbers);\n</code>\n\
    <|/ a |>\n<| a tags=php,string,sorting dscore=1 |>\n<code>\n<?php\n$numbers =\
    \ \"1 2 3 4 5 6 7 8 9 10\";\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp58t90ypc.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Remove non-numeric characters\
    \ from $numbers\n  $numbers = preg_replace(\"/[^0-9]+/\", \"\", $numbers);\n \
    \ // Sort from smallest to largest\n  sort($numbers);\n  return implode(\" \"\
    , $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThe only answer so far that does\
    \ a real job of explaining the logic behind the sort. Thanks!\n<|/ c |>\n<| a\
    \ dscore=0 tags=sorting,php |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcamhc1i_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = preg_replace('/\\s+/',\
    \ ' ', $numbers);\n    $numbers = preg_replace('/\\s*([^0-9])/', '$1 ', $numbers);\n\
    \    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zn7b4x0.php:20\n\
    Stack trace:\n#0 /tmp/tmp0zn7b4x0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0zn7b4x0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $validNums = preg_split(\"/[\\\
    s]+/\",$numbers);\n    sort($validNums);\n    return implode(\" \",$validNums);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n$array=array('zero','one','two','three','four','five','six','seven','eight','nine');\n\
    $num1=explode(' ',$input);\n$num2=array();\nforeach($num1 as $value)\n{\n  $num2[]=$array[$value];\n\
    }\nreturn implode(' ',$num2);\n</code>\n<|/ a tags=php,sorting dscore=0 |>\n<|\
    \ c |>\nYou mean `$num1`, not `$input`. `$input` is unassigned and the `foreach`\
    \ loop won't work. Also, this doesn't sort numbers, it just sorts strings.\n<|/\
    \ c |>\n<| c |>\nHe said the numbers are input from the user. He doesn't really\
    \ mention them in the question.\n<|/ c |>\n<| a |>\n<code>\n$a = array('zero','one','two','three','four','five','six','seven','eight','nine');\n\
    $n = 'three one five';\necho $n = implode(\" \", array_intersect_key($a, array_flip(explode('\
    \ ',$n))));\n</code>\n<|/ a tags=php,sorting dscore=0 |>\n<| c |>\nI really like\
    \ the `array_flip(explode(...))` idea and I like `array_intersect_key` better\
    \ than my answer... but just be careful that `$n` can contain more than one `'\
    \ '` which might mess up the `explode()`\n<|/ c |>\n<| c |>\n`explode()` will\
    \ stop at the first `' '` encountered, so the `array_intersect_key` will not mess\
    \ with the `$a` array. And I agree, `$n` will need to be double-checked before\
    \ `explode()`. My answer was the best I could come up with, so +1.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpetee7gzo.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return implode(array_reverse(explode('\
    \ ', $numbers)));\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_7eh253.php:18\n\
    Stack trace:\n#0 /tmp/tmpv_7eh253.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpv_7eh253.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    $numbers = array_map('intval', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6gxu4q2g.php:18\n\
    Stack trace:\n#0 /tmp/tmp6gxu4q2g.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6gxu4q2g.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return preg_replace('/([0-9])/',\
    \ '\\1', $numbers);\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9e_c13b0.php:18\n\
    Stack trace:\n#0 /tmp/tmp9e_c13b0.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp9e_c13b0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(\" \", $numbers);\n\
    \  natsort($numbers);\n  return implode(\" \", $numbers);\n}\n</code>\nOutput\n\
    <code>\n$ php sort_numbers.php\none three five\n</code>\n<|/ a dscore=0 tags=sorting,php,arrays,string\
    \ |>\n<| c |>\nThanks for posting your answer! Please be sure to read the [FAQ\
    \ on Self-Promotion](http://stackoverflow.com/faq#promotion) carefully. Also note\
    \ that it is *required* that you post a disclaimer every time you link to your\
    \ own site/product.\n<|/ c |>\n<| c |>\nYes I read that carefully, but I didn't\
    \ want to advertise my code. Maybe you could comment the code so people would\
    \ know that I wrote it.\n<|/ c |>\n<| c |>\nYour solution does not seem to work\
    \ when input is an empty string. `one two three`\n<|/ c |>\n<| c |>\nIt worked\
    \ fine for me. Can you elaborate on why it wouldn't work for you? Does it throw\
    \ an error?\n<|/ c |>\n<| a tags=sorting,php,arrays,string |>\n<code>\n<?php\n\
    $numbers='three one five two zero eight';\n$numbers=explode(\" \",$numbers);\n\
    array_multisort($numbers);\n$new_numbers=implode(\" \",$numbers);\necho $new_numbers;\n\
    function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5vyg9rgg.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if (empty($numbers)) {\n    return\
    \ '';\n  }\n  $numbers = preg_split('/\\s+/', $numbers);\n  return implode(' ',\
    \ array_sort($numbers));\n}\n</code>\n<|/ a |>\n<| a |>\nIn addition to the answer\
    \ from John Lenner, you can use the preg_split function to get the array of strings\
    \ (with empty values) in between the numbers. Then use array_map to create a new\
    \ array with the numbers ordered from smallest to largest.\n<code>\n$input = 'three\
    \ one two seven four five nine';\n$numbers = preg_split('/\\s+/', $input);\n$numbers_sorted\
    \ = array_map(function($number) {\n  return $number == '' ? $number : strval($number);\n\
    }, $numbers);\n$sorted_numbers = implode(' ', $numbers_sorted);\n</code>\n<|/\
    \ a tags=arrays,string,php dscore=2 |>\n<| c |>\n`preg_split` doesn't strip empty\
    \ string values, it just returns them in the resulting array. `array_filter` does\
    \ the same.\n<|/ c |>\n<| c |>\nThanks Christian. I've updated my answer to use\
    \ `array_filter` instead.\n<|/ c |>\n<| a |>\nTry this:\n<code>\n<?php\n$input\
    \ = \"three one two seven four five nine\";\n$arr = preg_split(\"/\\s+/\", $input);\n\
    sort($arr);\n$output = implode(\" \", $arr);\necho $output;\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7gqxd_02.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Split the input string into an\
    \ array of words (space-delimited)\n  $words = explode(' ', $numbers);\n\n  //\
    \ Sort the array numerically\n  sort($words);\n\n  // Join the array back into\
    \ a string with spaces between each item\n  return implode(' ', $words);\n}\n\n\
    function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkvzor5e.php:25\n\
    Stack trace:\n#0 /tmp/tmpdkvzor5e.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdkvzor5e.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return preg_replace('/([0-9]+)/',\
    \ '${1}', preg_replace('/(\\d+)/', '$1', $numbers));\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9yn5tdi.php:18\n\
    Stack trace:\n#0 /tmp/tmpe9yn5tdi.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpe9yn5tdi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = preg_replace('/^(\\\
    S*) (\\S*) (\\S*)/', '$3 $2 $1', $numbers);\n    $numbers = preg_replace('/ (\\\
    s)([^ ]) /', '$1 $2', $numbers);\n    $numbers = preg_replace('/ (\\S*) ([^ ])\
    \ /', '$1 $2', $numbers);\n    $numbers = preg_replace('/ (\\S*) (\\S*) /', '$2\
    \ $1', $numbers);\n    return $numbers;\n}\nfunction candidate(...$args) {\n \
    \   return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpats3lpbj.php:21\n\
    Stack trace:\n#0 /tmp/tmpats3lpbj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpats3lpbj.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    // Split string into space-delimited\
    \ numbers\n    $array = explode(' ', $numbers);\n    // Sort numbers\n    sort($array);\n\
    \    // Put numbers back into string\n    return implode(' ', $array);\n}\n\n\
    function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_4s2t22.php:23\n\
    Stack trace:\n#0 /tmp/tmpa_4s2t22.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpa_4s2t22.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers_arr = explode(' ', $numbers);\n\
    \  array_multisort($numbers_arr);\n  return implode(' ', $numbers_arr);\n}\n\n\
    function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4nvog79.php:20\n\
    Stack trace:\n#0 /tmp/tmpp4nvog79.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp4nvog79.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if (!preg_match('/\\d+/', $numbers))\
    \ {\n    throw new Exception('Invalid input. Expected space-delimited string of\
    \ numbers from zero to nine.');\n  }\n\n  return sort(explode(' ', $numbers),\
    \ SORT_NUMERIC);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI have used the explode()\
    \ function and I am getting the following error after running this: Notice: Array\
    \ to string conversion in C:\\wamp64\\www\\test\\test.php on line 32\n<|/ c |>\n\
    <| c |>\nPlease see my update. I have added a couple of checks for validity of\
    \ the input, and added a couple of return statements.\n<|/ c |>\n<| c |>\nI have\
    \ added the function and updated the OP but I am still getting the same error.\n\
    <|/ c |>\n<| c |>\nDid you change both occurrences of `array('zero', 'one', 'two',\
    \ ..., 'nine')` to `array('zero', 'one', 'two', ..., 'nine')`? Also, if your array\
    \ is in a different file, you should add `global $sort_numbers;` as the first\
    \ line of the function and call it using `sort_numbers($sort_numbers);`.\n<|/\
    \ c |>\n<| c |>\nI did put the `global $sort_numbers;` before the function but\
    \ it still doesn't work.\n<|/ c |>\n<| a tags=sorting,php,arrays |>\nAfter a little\
    \ bit of digging, this seems to work for me:\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoolkm9bc.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Initialize result\n  $result\
    \ = '';\n  // Split input on spaces\n  $numbers = explode(' ', $numbers);\n  //\
    \ Sort each number in turn\n  foreach ($numbers as $number) {\n    // If the current\
    \ number is 'zero', append a 'zero' to the result\n    if ($number == 'zero')\
    \ {\n      $result .= 'zero';\n    }\n    // If the current number is not 'zero',\
    \ append it to the result as a string\n    else {\n      $result .= $number .\
    \ ' ';\n    }\n  }\n  // Trim trailing space\n  $result = trim($result, ' ');\n\
    \  // Return result\n  return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptic5h5s2.php:36\n\
    Stack trace:\n#0 /tmp/tmptic5h5s2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptic5h5s2.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Split input string on whitespace\n\
    \  $numbers = explode(' ', $numbers);\n\n  // Sort numbers\n  sort($numbers);\n\
    \n  // Join back together with space\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThe only issue with this function is that it will\
    \ not split a word which has more than one space between them.\n<|/ c |>\n<| c\
    \ |>\n`preg_split('/\\s+/', $numbers)` will fix that\n<|/ c |>\n<| a dscore=3\
    \ tags=php,numbers,string |>\nTo expand on Pradeep's answer, you could use a case\
    \ switch statement to handle the different types of numbers (integers and floating\
    \ points) and then use array_reverse to reverse the array so that the largest\
    \ number appears first.\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp36ixsi_2.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    foreach (explode(' ', $numbers)\
    \ as $number) {\n        if (!is_numeric($number)) {\n            return false;\n\
    \        }\n    }\n    ksort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=arrays,sorting,php |>\n<| c |>\nWhy not just `array_multisort($numbers,\
    \ SORT_NUMERIC);`?\n<|/ c |>\n<| c |>\n: That is a good suggestion, but I believe\
    \ `array_multisort()` sorts the array in-place, whereas `sort()` returns a new\
    \ array with the sorted values. To avoid that issue, I suggest `sort()` with a\
    \ callback `array_map()` which returns the value after sorting it. The `array_map()`\
    \ is used to map the values in the array before it is sorted. It could be replaced\
    \ by a simple foreach loop, but I believe `array_multisort()` supports callback\
    \ functions.\n<|/ c |>\n<| a tags=arrays,sorting,php |>\nYou can simply sort the\
    \ array using a custom sorting function that uses array_search() to get the numeric\
    \ keys and then sorts the array using those numeric keys.\nThis way, you don't\
    \ need to create a custom function and you can use the built-in sort function\
    \ for free.\n<code>\n<?php\n$array = array(\n  'one',\n  'two',\n  'three',\n\
    \  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine'\n);\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpevsnffi9.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $return = array();\n  // Split into\
    \ arrays of digits\n  $numbers = explode(' ', $numbers);\n  // Sort numbers into\
    \ numeric order and add leading zeros as necessary\n  natcasesort($numbers);\n\
    \  foreach ($numbers as $number) {\n    if ($number > 9) {\n      $return[] =\
    \ '0' . $number;\n    } else {\n      $return[] = $number;\n    }\n  }\n  return\
    \ implode(' ', $return);\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_w_8ag2y.php:29\n\
    Stack trace:\n#0 /tmp/tmp_w_8ag2y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_w_8ag2y.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // This first array just remembers\
    \ the last non-zero number we saw\n  // This second array keeps track of the numbers\
    \ we've seen\n  // This third array keeps track of the numbers we haven't seen\n\
    \  $lastseen = array(\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n  \
    \  'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven'\
    \ => 7,\n    'eight' => 8,\n    'nine' => 9\n  );\n  $seen = array(\n    'zero'\
    \ => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n\
    \    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n   \
    \ 'nine' => 9\n  );\n  $not_seen = array(\n    'zero' => 0,\n    'one' => 1,\n\
    \    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six'\
    \ => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  );\n  // Loop\
    \ through each of the numbers\n  foreach ($numbers as $number) {\n    // Get the\
    \ number we've seen so far\n    if (array_key_exists($number, $seen)) {\n    \
    \  // Found the number we're looking for, so we set it as the last seen number\n\
    \      $lastseen = $seen;\n      // And clear out the current number we found\n\
    \      $seen = array(\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9\n      );\n      $not_seen = array(\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9\n      );\n    }\n    // If we've never seen this\
    \ number before, add it to the array we're keeping track of\n    // And set it\
    \ as the last seen number\n    else {\n      $seen[$number] = 1;\n      $lastseen\
    \ = $seen;\n    }\n  }\n  // Now loop through the numbers that haven't been seen\
    \ yet\n  foreach ($not_seen as $key => $value) {\n    // If it's the last number\
    \ we've seen, add it to the array we're keeping track of without sorting\n   \
    \ if ($lastseen[$key] == $value) {\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppc6qm7ld.php on line 102\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  $numbers = array_map('intval', $numbers);\n  return implode(' ', array_merge(array_slice($numbers,\
    \ 0, -1), array_slice($numbers, -1)));\n}\nfunction candidate(...$args) {\n  \
    \  return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyk_4mfz.php:17\n\
    Stack trace:\n#0 /tmp/tmpbyk_4mfz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbyk_4mfz.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $choices = array('zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n  $number_array\
    \ = explode(\" \", $numbers);\n  sort($number_array);\n  $new_numbers = \"\";\n\
    \  foreach ($number_array as $number) {\n    if (in_array($number, $choices))\
    \ {\n      $new_numbers .= \" \" . $number;\n    }\n  }\n  return $new_numbers;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis does not work for strings that are\
    \ not space-delimited. For example, `sort_numbers('one two three')` produces `\"\
    one three two\"`.\n<|/ c |>\n<| c |>\n- Yes, the original solution only works\
    \ for space-delimited strings. I wrote the second one to sort any set of numbers\
    \ that might contain non-numeric characters. I believe that is the same situation\
    \ as in the original question, where they want a space-delimited string with all\
    \ valid numbers from `0` to `9` sorted from smallest to largest.\n<|/ c |>\n<|\
    \ a |>\nI prefer this solution:\n<code>\n$string = 'one two three';\n$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\n\n$array = explode(' ', $string);\n\
    array_multisort($array, SORT_NATURAL | SORT_FLAG_CASE, $numbers);\n\n$string =\
    \ implode(' ', array_keys($numbers));\nvar_dump($string);\n</code>\n<|/ a tags=php\
    \ dscore=3 |>\n<| a |>\nJust to add one more solution:\n<code>\n$string = \"one\
    \ two three four five six seven eight nine\";\n\n$array = preg_split('/\\s+/',\
    \ $string, null, PREG_SPLIT_NO_EMPTY);\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpllg8j0x0.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $arr = explode(' ', $numbers);\n\
    \  sort($arr);\n  return implode(' ', $arr);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis won't sort 'three two one' correctly. `'three two one'` should return\
    \ `'one two three'`.\n<|/ c |>\n<| a dscore=2 |>\nYou can use array_multisort\
    \ with SORT_ASC flag like this:\n<code>\n$num = 'one three two';\n$parts = explode('\
    \ ', $num);\narray_multisort($parts);\necho implode(' ', $parts);\n</code>\nDemo\n\
    <|/ a tags=php |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n\
    \    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp__jz6uxg.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=1 tags=php,sorting |>\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgrr_n0w2.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Return an empty string if there\
    \ are no numbers\n  if (!$numbers) {\n    return '';\n  }\n\n  // Split the string\
    \ of numbers into a space-delimited array\n  $numbers = explode(' ', $numbers);\n\
    \n  // Sort each of the numbers in the array\n  sort($numbers);\n\n  // Return\
    \ the sorted array joined back into a string\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nIt's a bad idea to call `sort()`\
    \ inside a loop. It will re-sort the entire array every time through the loop.\n\
    <|/ c |>\n<| c |>\n, Thanks for the comment. I was just providing the basic code\
    \ to do what he wanted. Good catch!\n<|/ c |>\n<| c |>\n: I believe that `sort()`\
    \ only reorders elements that are different from each other, but `array_merge()`\
    \ won't merge the arrays. If you have a single array with 3 values, `array_merge()`\
    \ will still return 3 values.\n<|/ c |>\n<| a dscore=4 tags=php,sorting |>\nThis\
    \ is a PHP 7 solution using array_walk that will preserve the keys. \n<code>\n\
    $numbers = array(\n    'three',\n    'one',\n    'two',\n    'five',\n    'four',\n\
    \    'six',\n    'seven',\n    'eight',\n    'nine',\n    'zero'\n);\n\narray_walk($numbers,\
    \ function(&$item) { \n    $item = str_replace(' ', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) {\n    $item = str_ireplace('zero', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) { \n    $item = str_ireplace('nine', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) {\n    $item = str_ireplace('one', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) {\n    $item = str_ireplace('two', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) {\n    $item = str_ireplace('three', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) {\n    $item = str_ireplace('four', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) {\n    $item = str_ireplace('five', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) {\n    $item = str_ireplace('six', '', $item);\n});\n\narray_walk($numbers,\
    \ function(&$item) {\n    $item = str_ireplace('seven', '', $item\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf6va45tx.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = preg_replace('|[^0-9]|',\
    \ '', $numbers);\n  $list = explode(' ', $numbers);\n  sort($list);\n  return\
    \ implode(' ', $list);\n}\n</code>\n<|/ a tags=php,string,arrays,sorting |>\n\
    <| a dscore=1 |>\nHere's a pure PHP implementation using an array, as opposed\
    \ to a regex:\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd35ywgt5.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  // Make sure we get all valid numbers\n  array_walk($numbers, function(&$n)\
    \ { $n = validate_number($n); });\n  // Sort the array from smallest to largest\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function validate_number()\
    \ in /tmp/tmp9lxykmj6.php:10\nStack trace:\n#0 [internal function]: {closure}('',\
    \ 0)\n#1 /tmp/tmp9lxykmj6.php(10): array_walk(Array, Object(Closure))\n#2 /tmp/tmp9lxykmj6.php(17):\
    \ sort_numbers(Array)\n#3 /tmp/tmp9lxykmj6.php(21): candidate('')\n#4 /tmp/tmp9lxykmj6.php(28):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmp9lxykmj6.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Input is a space-delimited string\
    \ of numberals from 'zero' to 'nine'.\n  // Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  $split = explode('\
    \ ', $numbers);\n  $numbers = '';\n  $first = true;\n  foreach($split as $number)\
    \ {\n    if($first) {\n      $numbers .= $number;\n      $first = false;\n   \
    \ } else {\n      $numbers .= ' ' . $number;\n    }\n  }\n  // Sort the numbers\
    \ numerically\n  $numbers = natsort($numbers);\n  // Return them as a space-delimited\
    \ string of numberals\n  return implode(' ', $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: natsort() expects parameter 1 to be array, string given in /tmp/tmpulawpb4z.php\
    \ on line 22\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpulawpb4z.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulawpb4z.php:31\n\
    Stack trace:\n#0 /tmp/tmpulawpb4z.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpulawpb4z.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $sort = array();\n    foreach(explode('\
    \ ', $numbers) as $n) {\n        $n = str_replace('nine', '9', str_replace('ten',\
    \ '0', str_replace('twenty', '20', str_replace('thirty', '30', str_replace('forty',\
    \ '40', str_replace('fifty', '50', str_replace('sixty', '60', str_replace('seventy',\
    \ '70', str_replace('eighty', '80', str_replace('ninety', '90', $n)))))))));\n\
    \        array_push($sort, $n);\n    }\n    return implode(' ', array_merge(array_unique(array_filter($sort)),\
    \ 'zero'));\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplli5mnt6.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  list($first, $second) = explode('\
    \ ', $numbers);\n\n  // Strip out everything but numbers\n  $stripped_first  =\
    \ preg_replace('/[^\\d.]/', '', $first);\n  $stripped_second = preg_replace('/[^\\\
    d.]/', '', $second);\n\n  // Convert to integers\n  $first_int    = intval($stripped_first);\n\
    \  $second_int   = intval($stripped_second);\n\n  // Sort smallest to largest\n\
    \  if ($first_int < $second_int) {\n    return $second;\n  } else {\n    return\
    \ $first;\n  }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThat makes sense, but\
    \ it's returning the number as one long string rather than one number per line.\n\
    <|/ c |>\n<| c |>\n, how would you like it to output? Please edit your question\
    \ to clarify. I'm having trouble understanding how you want to end up with the\
    \ three numbers printed one after another, on different lines?\n<|/ c |>\n<| c\
    \ |>\nYeah sorry about that. I'll edit it! I'd like them to be separate lines.\
    \ Basically I need the output to look like `one two three` instead of `one two\
    \ three`\n<|/ c |>\n<| c |>\nNo worries. So the function should return a space-delimited\
    \ string of all the numbers, sorted from smallest to largest? I'll update my answer\
    \ in a bit.\n<|/ c |>\n<| c |>\nYes and yes. I think this was the right answer\
    \ for me, but I wasn't able to get it working exactly as I wanted. Thanks so much\
    \ for your help.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$numbers = 'zero\
    \ one two three four five six seven eight nine';\n$numbers = explode(' ', $numbers);\n\
    array_multisort($numbers);\n$strings = implode(' ', $numbers);\necho $strings;\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nAwesome! That's a great one!\n<|/ c |>\n\
    <| c |>\nBut now it's outputting `Array ( [0] => one [1] => two [2] => three [3]\
    \ => four [4] => five [5] => six [6] => seven [7] => eight [8] => nine )` instead\
    \ of `one two three`\n<|/ c |>\n<| c |>\nOk, it outputs a whole list of numbers\
    \ in the string now, instead of just the one number. Like \nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1wye0go0.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if (!$numbers) return $numbers;\n\
    \n  $words = explode(' ', $numbers);\n  sort($words);\n  return implode(' ', $words);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 |>\nA PHP solution without regexp:\n<code>\n\
    $array = array('one two three','one two three four','one two three four five');\n\
    $numbers = array();\n\nforeach($array as $value)\n{\n    $numbers[] = array_count_values(str_word_count($value,\
    \ 2));\n}\n\n$result = array();\n\nforeach($numbers as $number)\n{\n    $maxValues\
    \ = $number[max($number)];\n\n    foreach($number as $numberValue)\n    {\n  \
    \      if($numberValue == $maxValues)\n        {\n            $result[] = $numberValue;\n\
    \        }\n    }\n}\n</code>\n<|/ a tags=arrays,sorting,php |>\n<| a tags=arrays,sorting,php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcptrrd7i.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    // Initialize an empty string\n\
    \    $string = '';\n    // Iterate through the numbers in the given string.\n\
    \    foreach (explode(' ', $numbers) as $number) {\n        // If the number is\
    \ less than 10, then append it to our string.\n        if (is_numeric($number)\
    \ && $number < 10) {\n            $string .= $number;\n        }\n        // Otherwise,\
    \ we have a 'ten' digit number, so append it to our string.\n        else {\n\
    \            $string .= 'ten';\n        }\n    }\n    // Return the string with\
    \ numbers sorted from smallest to largest\n    return $string;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nSorry if I've misunderstood something, but this seems\
    \ rather complex for the task. Isn't there a simpler way to do this?\n<|/ c |>\n\
    <| c |>\nHi Nick, thanks for the edit. I'm still trying to understand it, but\
    \ I like it so far. I'm looking forward to trying it!\n<|/ c |>\n<| c |>\nThis\
    \ doesn't seem to be working for me. As far as I can tell, it's ignoring the cases\
    \ where there are multiple numbers present.\n<|/ c |>\n<| a |>\nThis is not very\
    \ elegant, but it does work:\n<code>\n<?php\n\n$input = \"one three four five\
    \ six seven eight nine\";\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps0gd03rz.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = preg_split('/\\s+/',\
    \ $numbers);\n  // Sort the string numerically\n  sort($numbers);\n  // Join back\
    \ together with the input array\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThanks I used the second option, works perfectly.\n\
    <|/ c |>\n<| a dscore=0 |>\nI believe a regex is your best option for this\n<code>\n\
    <?php\n$string = \" one three four two seven eight \";\n$pattern = \"(one|two|three|four|five|six|seven|eight|nine|zero|one|two|three|four|five|six|seven|eight|nine)\"\
    ;\npreg_match_all(\"/$pattern/\", $string, $match);\nprint_r($match);\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy3elfsdb.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $arr = explode(' ', $numbers);\n\
    \  sort($arr);\n  return implode(' ', $arr);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2tbyioa.php:19\n\
    Stack trace:\n#0 /tmp/tmpw2tbyioa.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpw2tbyioa.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyrl1oyoa.php:20\n\
    Stack trace:\n#0 /tmp/tmpyrl1oyoa.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpyrl1oyoa.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // If there are no numbers, return\
    \ null.\n  if ($numbers == \"\") return null;\n  // Split the string into an array\
    \ of the numbers in the string\n  $numbers = explode(' ', $numbers);\n  // Initialize\
    \ a variable for holding the current number we are working with\n  $current_number\
    \ = 0;\n  // Initialize a variable for holding the current largest number in the\
    \ array\n  $current_largest = 99999999;\n  // Initialize a variable for holding\
    \ the current smallest number in the array\n  $current_smallest = 99999999;\n\
    \  // Scan the array until we reach the end (we don't care about any more numbers)\n\
    \  while (count($numbers) > 0) {\n    // Get the first number from the array,\
    \ call it $number\n    $number = $numbers[0];\n    // Remove the first number\
    \ from the array\n    array_shift($numbers);\n    // If the current number is\
    \ smaller than the smallest number so far, store it as the smallest number\n \
    \   if ($current_smallest > $number) {\n      $current_smallest = $number;\n \
    \   }\n    // If the current number is larger than the largest number so far,\
    \ store it as the largest number\n    if ($current_largest < $number) {\n    \
    \  $current_largest = $number;\n    }\n    // If the current number is equal to\
    \ the largest number so far, exit the loop\n    if ($number == $current_largest)\
    \ {\n      break;\n    }\n  }\n  // Return the string with numbers sorted from\
    \ smallest to largest\n  return $current_smallest . ' ' . $current_largest;\n\
    }\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjnvn_6j.php:45\n\
    Stack trace:\n#0 /tmp/tmpxjnvn_6j.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpxjnvn_6j.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = preg_split('/\\s+/',\
    \ $numbers);\n  // Sort from smallest to largest\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4sqsw165.php:20\n\
    Stack trace:\n#0 /tmp/tmp4sqsw165.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4sqsw165.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  usort($numbers, function($a, $b) {\n    return $a - $b;\n  });\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php,numbers |>\n<| c |>\nWhat\
    \ if the numbers were \"2 10 12 14\" how could I sort it?\n<|/ c |>\n<| c |>\n\
    : You'd want to sort them as strings: `return strcmp($b, $a); ` See http://php.net/manual/en/function.strcmp.php\n\
    <|/ c |>\n<| a tags=sorting,php,numbers |>\n<code>\n<?php\n$array = array( \n\
    \    '1' => 1,\n    '2' => 2,\n    '3' => 3,\n    '4' => 4,\n    '5' => 5,\n \
    \   '6' => 6,\n    '7' => 7,\n    '8' => 8,\n    '9' => 9,\n    '10' => 10,\n\
    \    '11' => 11,\n    '12' => 12,\n    '13' => 13,\n    '14' => 14,\n    '15'\
    \ => 15,\n    '16' => 16,\n    '17' => 17,\n    '18' => 18,\n    '19' => 19,\n\
    \    '20' => 20,\n    '21' => 21,\n    '22' => 22,\n    '23' => 23,\n    '24'\
    \ => 24,\n    '25' => 25,\n    '26' => 26,\n    '27' => 27,\n    '28' => 28,\n\
    \    '29' => 29,\n    '30' => 30,\n    '31' => 31,\n    '32' => 32,\n    '33'\
    \ => 33,\n    '34' => 34,\n    '35' => 35,\n    '36' => 36,\n    '37' => 37,\n\
    \    '38' => 38,\n    '39' => 39,\n    '40' => 40,\n    '41' => 41,\n    '42'\
    \ => 42,\n    '43' => 43,\n    '44' => 44,\n    '45' => 45,\n    '46' => 46,\n\
    \    '47' => 47,\n    '48' => 48,\n    '49' => 49,\n    '50' => 50,\n    '51'\
    \ => 51,\n    '52' => 52,\n    '53' => 53,\n    '54' => 54,\n    '55' => 55,\n\
    \    '56' => 56,\n    '57' => 57,\n    '58' => 58,\n    '59' => 59,\n    '60'\
    \ => 60,\n    '61' => 61,\n    '62' => 62,\n    '63' => 63,\n    '64' => 64,\n\
    \    '65' => 65,\n    '66' => 66,\n    '67' => 67,\n    '68' => 68,\n    '69'\
    \ => \nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplzyt6a41.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $array = explode(' ', $numbers);\n\
    \  usort($array, 'cmp');\n  return implode(' ', $array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmpny3i_hkn.php on line 9\n\
    \nWarning: usort() expects parameter 2 to be a valid callback, function 'cmp'\
    \ not found or invalid function name in /tmp/tmpny3i_hkn.php on line 9\n\nWarning:\
    \ usort() expects parameter 2 to be a valid callback, function 'cmp' not found\
    \ or invalid function name in /tmp/tmpny3i_hkn.php on line 9\n\nWarning: usort()\
    \ expects parameter 2 to be a valid callback, function 'cmp' not found or invalid\
    \ function name in /tmp/tmpny3i_hkn.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpny3i_hkn.php:21\nStack trace:\n#0 /tmp/tmpny3i_hkn.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpny3i_hkn.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $array = preg_split('/\\s/', $numbers,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    sort($array);\n    return implode(' ', $array);\n\
    }\n</code>\nAnd here's a version with some test cases:\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0v4m46x6.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $words = explode(' ', $numbers);\n\
    \  return implode(' ', array_map('strtolower', $words));\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvkn5tvi.php:19\n\
    Stack trace:\n#0 /tmp/tmpjvkn5tvi.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjvkn5tvi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    foreach (explode(' ', $numbers)\
    \ as $number) {\n        sort($numbers);\n    }\n    return implode(' ', $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpdq72ryv6.php\
    \ on line 9\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpdq72ryv6.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdq72ryv6.php:19\n\
    Stack trace:\n#0 /tmp/tmpdq72ryv6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpdq72ryv6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=numbers,php,string,sorting |>\n<| c |>\n\
    This answer is the most straight forward and easiest to implement, thank you for\
    \ providing it!\n<|/ c |>\n<| c |>\nThis does not take into account that the numbers\
    \ are strings. \"9 11\" will come before \"11 9\" because the comparison of strings\
    \ is alphabetical.\n<|/ c |>\n<| c |>\nThis answer assumes your numbers are in\
    \ string format.  If you have the numbers as strings then you need to convert\
    \ the string to an integer before sorting them with SORT_NUMERIC.\n<|/ c |>\n\
    <| a dscore=5 tags=numbers,php,string,sorting |>\n<code>\n<?php\n$list = \"1 3\
    \ 5 2 4 7 1 4 1 2 3 4 6 5 3 4 1 2 5 6\";\n$list = preg_replace(\"/[^0-9 ]/\",\
    \ \"\", $list);\n$list = explode(\" \", $list);\nsort($list);\n$list = implode(\"\
    \ \", $list);\necho $list;\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbq53nqdy.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $a = explode(' ', $numbers);\n \
    \ $a = array_map('intval', $a);\n  sort($a);\n  return implode(' ', $a);\n}\n\
    function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxawwi66.php:18\n\
    Stack trace:\n#0 /tmp/tmpdxawwi66.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpdxawwi66.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nAh, so you have a sorting function... How about an explain on how\
    \ to use it?\n<|/ c |>\n<| c |>\nAh... I see it now. Your question is different\
    \ than mine though, so I edited my answer - added a link to the PHP docs for `sort()`\n\
    <|/ c |>\n<| a dscore=1 tags=php,sorting |>\nThe simplest way would be to call\
    \ sort() and implode() on the array and implode it back up with spaces.\n<code>\n\
    $numbers = explode(' ', 'one two three');\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a |>\n<| a tags=php,sorting dscore=1 |>\nUse usort\
    \ for sorting and implode and trim to remove spaces.\n<code>\n<?php\n$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\nusort($numbers, function($a, $b)\n{\n    return $a <=> $b;\n});\n\
    echo implode(' ', $numbers);\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9tt6vln0.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  array_multisort($numbers, SORT_STRING);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\nIf you don't want to use a sorting\
    \ function you can use str_replace to replace all spaces in your string with nothing\
    \ and sort that string alphabetically\n<code>\n$str = 'one two three';\n$str =\
    \ str_replace(' ', '', $str);\n$str = strtolower($str);\n</code>\nThis way you\
    \ get rid of all the spaces and then sort it alphabetically.\n<|/ a tags=php,sorting\
    \ dscore=4 |>\n<| a dscore=2 |>\nA very simple way to achieve this is to use explode()\
    \ by spaces to create an array and then sort using sort()\n<code>\n$arr = explode(\"\
    \ \", \"one two three four five six seven eight nine\");\nsort($arr);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n \
    \   return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpumi3f6od.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $split = explode(' ', $numbers);\n\
    \  uasort($split, function ($a, $b) {\n    $intA = intval($a);\n    $intB = intval($b);\n\
    \    if ($intA > $intB) {\n      return 1;\n    }\n    if ($intA < $intB) {\n\
    \      return -1;\n    }\n    return 0;\n  });\n  return implode(' ', $split);\n\
    }\n</code>\nThis was for PHP 5.2.6, but is easy to convert to a PHP version which\
    \ uses anonymous functions.\n<|/ a tags=php |>\n<| c |>\nI did just find this\
    \ question and thought I'd add my two cents, as I am not sure if this is still\
    \ relevant. As you rightly say, it sorts the number into ascending order. I've\
    \ just used this to do a custom sort using two integers, one for amount and one\
    \ for type. I've added an answer on another question which uses a variation of\
    \ the code in this answer, which has some more examples and a nice comparison\
    \ table http://stackoverflow.com/a/12556417/305631\n<|/ c |>\n<| c |>\nI like\
    \ the idea of sorting by amount, but this only sorts by the highest amount first\
    \ - so for example a 4 dollar bill in a 100 dollar bill still comes first.\n<|/\
    \ c |>\n<| c |>\nI didn't see your answer until after I posted mine. My example\
    \ is just for integers, sorry for the misunderstanding.\n<|/ c |>\n<| c |>\nThis\
    \ worked perfectly for me when I was using integers. Thanks!\n<|/ c |>\n<| a dscore=5\
    \ tags=php |>\nThe simplest way is to use the sort() function:\n<code>\nsort($array);\n\
    </code>\n<|/ a |>\n<| c |>\nBut this won't preserve the order of the array in\
    \ which the values were originally entered.\n<|/ c |>\n<| c |>\nNo, it won't.\
    \ You would need to use array_multisort() instead.\n<|/ c |>\n<| c |>\nThe order\
    \ of elements will be preserved, it's just not alphabetical.\n<|/ c |>\n<| c |>\n\
    This does not preserve the original order, just sorts in ascending order by default.\
    \ See the accepted answer for a more thorough description of the situation.\n\
    <|/ c |>\n<| c |>\nThis solution does not preserve the original order or sort\
    \ order so it is no good if the original order is important. From php.net: \"\
    The sorting algorithm used is Mergesort, which \nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl2awx37z.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Split the input on any whitespace,\
    \ make an array of these values and remove any empty strings\n  // from it.\n\
    \  $numbers_array = preg_split('/\\s+/', $numbers);\n\n  // Sort it...\n  sort($numbers_array);\n\
    \n  // Turn the array into a string and remove any duplicate spaces.\n  return\
    \ implode(' ', array_unique(array_map('trim', $numbers_array)));\n}\n</code>\n\
    <|/ a dscore=1 tags=php,sorting,arrays,numbers,string |>\n<| a |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqkp28u3_.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Initialize 'numbers' to an empty\
    \ array\n  $numbers = array();\n\n  // Turn 'numbers' into an array with 'explode()'\n\
    \  $numbers = explode(' ', $numbers);\n\n  // Count the number of elements in\
    \ 'numbers'\n  $count = count($numbers);\n\n  // If there are at least 2 elements,\
    \ sort the elements\n  if ($count >= 2) {\n    // Sort the array using sort()\
    \ by sorting by 'ascending' the elements first\n    sort($numbers);\n\n    //\
    \ Reset the array back to its original order\n    $numbers = array_reverse($numbers);\n\
    \n    // Join the elements back together with the delimiter ' '\n    $numbers\
    \ = implode(' ', $numbers);\n  }\n\n  // Return an ordered string with numbers\
    \ sorted from smallest to largest\n  return $numbers;\n}\n</code>\n<|/ a tags=sorting,php\
    \ |>\n<| a tags=sorting,php dscore=1 |>\nHere's a quick function that should do\
    \ what you want:\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppib6bnxr.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    // Our array of sorted numbers\n\
    \    $sortedNumbers = array();\n\n    // Split our input string into an array\n\
    \    $numbers = explode(' ', $numbers);\n\n    // Loop through our array and add\
    \ values to the sortedNumbers array\n    foreach ($numbers as $number) {\n   \
    \     $number = str_pad($number, strlen($number) + 1, '0', STR_PAD_RIGHT);\n \
    \       $sortedNumbers[] = $number;\n    }\n\n    // Sort our numbers\n    sort($sortedNumbers);\n\
    \n    // Output our array into a space-delimited string\n    $output = '';\n \
    \   foreach ($sortedNumbers as $number) {\n        $output .= $number . ' ';\n\
    \    }\n\n    return $output;\n}\n</code>\nOutput\n<code>\n$ php test.php\none\
    \ three five\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI added some notes on how you\
    \ could modify this to be more versatile and sort the input string. Let me know\
    \ if you have any other questions.\n<|/ c |>\n<| c |>\nI have added a more versatile\
    \ function that will sort any string of numbers. It's very similar to your old\
    \ function and now it's sort of reusable. Hope that helps!\n<|/ c |>\n<| a tags=sorting,php,string\
    \ |>\nI suggest you to use array sort function like this:\n<code>\n<?php\n$string\
    \ = 'one two three four five';\nprint_r(array_map(function ($n) {\n    return\
    \ str_pad($n, strlen($n) + 1, '0', STR_PAD_RIGHT);\n}, str_word_count($string,\
    \ 1)));\n</code>\nThe output will be:\n<code>\nArray\n(\n    [0] => 010201\n \
    \   [1] => 020202\n    [2] => 030303\n    [3] => 040404\n    [4] => 050505\n \
    \   [5] => 060606\n    [6] => 070707\n    [7] => 080808\n    [8] => 090909\n \
    \   [9] => 101010\n)\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI created an algorithm\
    \ that would work for both single digit numbers as well as double digit numbers.\
    \ It will work for numbers greater than or equal to 10 (as long as they are strings\
    \ of length 2).\n<code>\n$numbers = array(\"three\", \"two\", \"one\", \"four\"\
    );\nsort($numbers);\nforeach ($numbers as $item) {\n    $item = str_pad($item,\
    \ strlen($item) + 1, '0', STR_PAD_RIGHT);\n    echo $item.\" \";\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6vb4tftc.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $valid = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n  $valid1 = array_flip($valid);\n\
    \  return implode(\" \", array_filter(explode(\" \", $numbers), function($x) {\n\
    \    return array_search($x, $valid) !== false;\n  }));\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp3r_79ior.php on line 11\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp3r_79ior.php on line 11\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp3r_79ior.php on line\
    \ 11\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp3r_79ior.php on line 11\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp3r_79ior.php on line 11\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp3r_79ior.php on line\
    \ 11\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp3r_79ior.php on line 11\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp3r_79ior.php on line 11\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp3r_79ior.php on line\
    \ 11\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp3r_79ior.php on line 11\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp3r_79ior.php on line 11\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp3r_79ior.php:22\nStack trace:\n\
    #0 /tmp/tmp3r_79ior.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3r_79ior.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $list = explode(' ', $numbers);\n\
    \  asort($list);\n  return implode(' ', $list);\n}\n</code>\nI tested the above\
    \ example using the following PHP script that uses the PHP function sort_numbers()\
    \ from above to sort the numbers according to its string representation and outputs\
    \ them to the console.\n<code>\n<?php\n  echo \"<html><body>\\n\";\n  echo \"\
    Test cases:\\n\";\n  echo sort_numbers('three one five') . \"\\n\";\n  echo sort_numbers('six\
    \ nine two') . \"\\n\";\n  echo sort_numbers('eight three four') . \"\\n\";\n\
    \  echo \"</body></html>\\n\";\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph4gxyy4d.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    // Return an empty string if $numbers\
    \ isn't a string\n    $numbers = trim($numbers);\n    if(!is_string($numbers))\
    \ {\n        return '';\n    }\n    // Convert all numbers to their integer values\n\
    \    $numbers_array = array_map('intval', explode(' ', $numbers));\n    // If\
    \ the array is not empty (it may be when empty)\n    if(!empty($numbers_array))\
    \ {\n        // Sort the array numerically\n        usort($numbers_array, 'sort_numbers_sort');\n\
    \        // Return the sorted string\n        return implode(' ', $numbers_array);\n\
    \    }\n    // Otherwise, return an empty string\n    return '';\n}\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_numbers_sort' not found or invalid function name in /tmp/tmp98rmgb27.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98rmgb27.php:30\n\
    Stack trace:\n#0 /tmp/tmp98rmgb27.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp98rmgb27.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  list($n1, $n2, $n3) = explode('\
    \ ', $numbers);\n  if ($n1 === 'zero' && $n2 === 'zero' && $n3 === 'zero') {\n\
    \    return 'zero zero zero';\n  }\n  if ($n1 === 'zero' || $n2 === 'zero' ||\
    \ $n3 === 'zero') {\n    return 'zero zero zero';\n  }\n  if ($n1 === 'zero')\
    \ {\n    return $n2 . ' zero ' . $n3;\n  }\n  if ($n2 === 'zero') {\n    return\
    \ $n1 . ' zero ' . $n3;\n  }\n  if ($n3 === 'zero') {\n    return $n1 . ' ' .\
    \ $n2 . ' zero';\n  }\n  if ($n1 === 'one') {\n    return $n2 . ' one ' . $n3;\n\
    \  }\n  if ($n2 === 'one') {\n    return $n1 . ' one ' . $n3;\n  }\n  if ($n3\
    \ === 'one') {\n    return $n1 . ' ' . $n2 . ' one';\n  }\n  if ($n1 === 'two')\
    \ {\n    return $n2 . ' two ' . $n3;\n  }\n  if ($n2 === 'two') {\n    return\
    \ $n1 . ' two ' . $n3;\n  }\n  if ($n3 === 'two') {\n    return $n1 . ' ' . $n2\
    \ . ' two';\n  }\n  if ($n1 === 'three') {\n    return $n2 . ' three ' . $n3;\n\
    \  }\n  if ($n2 === 'three') {\n    return $n1 . ' three ' . $n3;\n  }\n  if ($n3\
    \ === 'three') {\n    return $n1 . ' ' . $n2 . ' three';\n  }\n  if ($n1 === 'four')\
    \ {\n    return $n2 . ' four ' . $n3;\n  }\n  if ($n2 === 'four') {\n    return\
    \ $n1 . ' four ' . $n3;\n  }\n  if ($n3 === 'four') {\n    return $n1 . ' ' .\
    \ $n2 . ' four';\n  }\n  if ($n1 === 'five') {\n    return $n2 . ' five ' . $n3;\n\
    \  }\n  if ($n2 === 'five') {\n    return $n1 . ' five ' . $n3;\n  }\n  if ($n3\
    \ === 'five') {\n    return $n1 . ' ' . $n2 . ' five';\n  }\n  if ($n1 === 'six')\
    \ {\n    return $n2 . ' six ' \nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3goc9sez.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  preg_match_all('/\\d+/', $numbers,\
    \ $matches);\n  return implode(' ', array_map('natural_sort', $matches[0]));\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis fails for `two six nine`\n<|/ c |>\n\
    <| c |>\n: Why would you expect it to fail? It *does* sort the numbers from smallest\
    \ to largest, even if you put them in the wrong order.\n<|/ c |>\n<| c |>\nI did\
    \ it because I needed to sort them from smallest to largest. Like you said, it\
    \ does sort them from largest to smallest, but it puts \"nine\" before \"six\"\
    .\n<|/ c |>\n<| c |>\n: Because that's the way natural sort works. If it can't\
    \ find the letter, it puts it at the end of the list.\n<|/ c |>\n<| a tags=php,natural-sort,arrays\
    \ |>\nA regex with word boundaries works really well for me in practice on small\
    \ arrays of words (10+). \n<code>\npreg_replace('/\\s(?=\\s)/', '', $yourArray);\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nFor anyone who needs to remove punctuation,\
    \ this would be the answer. Worked like a charm.\n<|/ c |>\n<| a dscore=3 |>\n\
    The first answer seems to not work properly if you have a word with whitespace\
    \ in between. Also the regex is a little over kill, if you just want to remove\
    \ whitespace anywhere in the string, you could just use:\n<code>\npreg_replace('/\\\
    s/', '', $yourArray);\n</code>\nThis regex will only replace spaces, if they are\
    \ followed by another space\n<|/ a tags=php,natural-sort,arrays |>\n<| a tags=php,natural-sort,arrays\
    \ |>\nA little improved version of previous answers:\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpormpnwas.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=4 tags=sorting,php |>\nThis function will sort an array of any type\
    \ to an array of strings. It's basically the same as array_map('strval', array),\
    \ except it also sorts empty strings to the bottom of the array.\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgdxa5ono.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return sort(explode(' ', $numbers))\n\
    \    ? implode(' ', array_map('trim', explode(' ', sort(explode(' ', $numbers)))))\n\
    \    : '';\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpudgzosaf.php:18\n\
    Stack trace:\n#0 /tmp/tmpudgzosaf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpudgzosaf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $sorted_numbers = array();\n\n \
    \ $numbers = preg_split('/[\\s-]+/', $numbers);\n\n  $sorted_numbers[] = $numbers[0];\n\
    \n  foreach($numbers as $number) {\n    if($number != 'zero') {\n      $sorted_numbers[]\
    \ = $number;\n    }\n  }\n\n  return implode(' ', $sorted_numbers);\n}\n</code>\n\
    <|/ a dscore=0 tags=php,arrays,sorting |>\n<| a dscore=0 |>\nYou can use a foreach\
    \ loop to sort them by value, then rearrange them by key. \n<code>\n$array = array(\
    \ \n    array(\n        'value' => 3,\n        'id' => 1,\n    ),\n    array(\n\
    \        'value' => 2,\n        'id' => 5,\n    ),\n    array(\n        'value'\
    \ => 1,\n        'id' => 4,\n    ),\n);\n\nfunction candidate(...$args) {\n  \
    \  return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7tdt_442.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $words = explode(' ', $numbers);\n\
    \  sort($words);\n  return implode(' ', $words);\n}\n</code>\n<|/ a dscore=1 tags=php,sorting,algorithm\
    \ |>\n<| c |>\nThe function should return the string with numbers sorted from\
    \ smallest to largest.\n<|/ c |>\n<| c |>\n, updated my answer so it sorts numbers,\
    \ not words. :)\n<|/ c |>\n<| c |>\nYour answer is great! But you did not explain\
    \ what is the function doing. I believe this should be done with an explanation.\n\
    <|/ c |>\n<| c |>\n, added some explanation. :)\n<|/ c |>\n<| c |>\nI love your\
    \ solution, thanks for that! But this only solves the sorting problem. It does\
    \ not solve the problem of how to actually transform numbers into words. You have\
    \ to do it manually for each number.\n<|/ c |>\n<| a |>\nI believe this is an\
    \ interesting problem, and you do have some answers that do just that. However,\
    \ the more I think about it, the more I believe it is really an interesting problem.\
    \ The most important thing is finding a solution that is easily extendable to\
    \ handle more numbers to sort (like 10, 20, 30, etc.).\nAs you can see, most of\
    \ the answers you find online solve the problem by first converting numbers into\
    \ words, then sorting them and then converting them back. The only problem I see\
    \ is that it can be quite a big function if your numbers are really big. \nThe\
    \ solution I came up with is quite simple actually, but it is limited, it only\
    \ allows sorting up to a maximum number that you can specify and you can only\
    \ sort up to 10 numbers. \nAnyway, I hope this solution helps you out. \nEdit:\
    \ \nI made a mistake, turns out the solution I came up with is also limited to\
    \ sorting numbers up to 10 numbers. I did some more testing and I found out that\
    \ it will actually allow sorting up to 100 numbers (tested with 100 and 200,000).\
    \ It seems to handle every number. I still think the original solution I came\
    \ up with is better in some ways, like it handles numbers up to a 100 numbers\
    \ (which I assume your example will handle and my solution doesn't).\nThe function\
    \ below is able to sort up to 100 numbers, as I said above. It uses recursion\
    \ to solve the problem with sorting up to 10 numbers (I hope I made it clear this\
    \ time).\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnn1v8rf2.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Convert input to a list of ints\
    \ (first splitting, then sorting)\n  $numbers_ints = explode(\" \", $numbers);\n\
    \  sort($numbers_ints);\n  return implode(\" \", $numbers_ints);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5v6u2uy.php:21\n\
    Stack trace:\n#0 /tmp/tmph5v6u2uy.php(26): test()\n#1 {main}\n  thrown in /tmp/tmph5v6u2uy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $arr = explode(' ', $numbers);\n\
    \  array_multisort($arr, SORT_NUMERIC, $arr);\n  return implode(' ', $arr);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4j0x1t6b.php:20\n\
    Stack trace:\n#0 /tmp/tmp4j0x1t6b.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4j0x1t6b.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n\t$numbers = explode(\" \", $numbers);\n\
    \tsort($numbers);\n\treturn implode(\" \", $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tlp41m6.php:19\n\
    Stack trace:\n#0 /tmp/tmp0tlp41m6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0tlp41m6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    sort($numbers);\n    return implode($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp_qoah4vs.php\
    \ on line 8\n\nWarning: implode(): Argument must be an array in /tmp/tmp_qoah4vs.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qoah4vs.php:17\n\
    Stack trace:\n#0 /tmp/tmp_qoah4vs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_qoah4vs.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbv7iefx.php:20\n\
    Stack trace:\n#0 /tmp/tmpsbv7iefx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsbv7iefx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $result = '';\n  foreach (explode('\
    \ ', $numbers) as $number) {\n    $result .= array_search($number, range(0,9));\n\
    \  }\n  return implode(' ', array_reverse($result));\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, string given\
    \ in /tmp/tmphmdaw0dd.php on line 12\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmphmdaw0dd.php on line 12\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphmdaw0dd.php:19\nStack trace:\n#0 /tmp/tmphmdaw0dd.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphmdaw0dd.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return implode(' ', array_merge(range('0',\
    \ '9'), explode(' ', $numbers)));\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nYou might have meant `return implode(' ', array_merge(range('0', '9'), explode('\
    \ ', $numbers)));` without the `array_merge`\n<|/ c |>\n<| a |>\nFor PHP 7.2:\n\
    <code>\narray_column($array, null, \"index\")\n</code>\n<|/ a dscore=5 tags=php,sorting\
    \ |>\n<| c |>\nthis is really nice, for php 7.2 it works great.\n<|/ c |>\n<|\
    \ a dscore=5 tags=php,sorting |>\n<code>\n$array = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\");\n$sorted = array_sort($array);\n</code>\nSource:\
    \ http://www.php.net/manual/en/function.array-sort.php\n<|/ a |>\n<| c |>\nHa,\
    \ I knew there had to be some function in PHP for this. Thanks for the answer.\n\
    <|/ c |>\n<| c |>\nThe function is not deprecated. http://php.net/manual/en/function.array-sort.php\n\
    <|/ c |>\n<| c |>\nThe function name is **array_sort**, if you look closely, it's\
    \ called array_sort, not sort. `:D`\n<|/ c |>\n<| c |>\nI think you were talking\
    \ about `sort()` which is deprecated as of PHP 5.3\n<|/ c |>\n<| c |>\nAs a heads-up,\
    \ `array_sort` doesn't return anything.\n<|/ c |>\n<| a dscore=5 |>\nHere is an\
    \ example from http://php.net/manual/en/function.sort.php:\n<code>\n<?php\n$fruits\
    \ = array(\"d\"=>\"lemon\", \"a\"=>\"orange\", \"b\"=>\"banana\", \"c\"=>\"apple\"\
    );\n\nprint_r(sort($fruits));\n\nprint_r(sort($fruits,SORT_STRING));\n\nprint_r(sort($fruits,SORT_STRING\
    \ | SORT_FLAG_CASE));\n\nprint_r(sort($fruits,SORT_STRING | SORT_FLAG_CASE | SORT_NATURAL\
    \ | SORT_FLAG_STRLEN));\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxv8hrjbf.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  sort(explode(' ', $numbers));\n\
    \  return implode(' ', array_filter($numbers));\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 1 to be array, string given\
    \ in /tmp/tmp6pnwg3cg.php on line 9\n\nWarning: implode(): Invalid arguments passed\
    \ in /tmp/tmp6pnwg3cg.php on line 9\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6pnwg3cg.php:16\nStack trace:\n#0 /tmp/tmp6pnwg3cg.php(23): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6pnwg3cg.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n\t$numbers = explode(' ', $numbers);\n\
    \tsort($numbers);\n\treturn implode(' ', $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpo59exl.php:19\n\
    Stack trace:\n#0 /tmp/tmprpo59exl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprpo59exl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Split input string into an array\
    \ on spaces.\n  $numbers_array = preg_split('/\\s+/', $numbers);\n  // Use array_diff()\
    \ to remove all numbers not listed in valid_values\n  $valid_values = array_diff(range(0,9),\
    \ range(0, 9));\n  // Sort the array numerically.\n  sort($numbers_array);\n \
    \ // Convert the array back to a string and return the string.\n  return implode(\"\
    \ \", $numbers_array);\n}\n</code>\nThe only thing left to do is to add the function\
    \ into your code as a callback (using call_user_func()).  You should be able to\
    \ do it like this:\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe39sl372.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers_array = explode(\" \"\
    , $numbers);\n    sort($numbers_array);\n    return join(\" \", $numbers_array);\n\
    }\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwngpx7md.php:19\n\
    Stack trace:\n#0 /tmp/tmpwngpx7md.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwngpx7md.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $array = preg_split('/\\s+/', $numbers);\n\
    \  array_multisort($array, SORT_NUMERIC, SORT_ASC, SORT_STRING);\n  return implode('\
    \ ', $array);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nthis also sorts\
    \ numbers that have a leading 0 like `01 10` etc\n<|/ c |>\n<| c |>\nThis is not\
    \ true - it will not sort numbers that have a leading 0 like `01 10`, it will\
    \ only sort numbers starting from 0.\n<|/ c |>\n<| c |>\nYes, you're right - I\
    \ should have read more carefully.  It sorts numbers that have a leading 0 like\
    \ `01 10` but it will not sort numbers that have a leading 0 like `10 01` because\
    \ the leading zero will be sorted *first*.\n<|/ c |>\n<| c |>\nIf you try it with\
    \ two leading zeroes, `01 10`, it will sort them as `01 01`, `10 01`. See the\
    \ demo here: https://eval.in/91950\n<|/ c |>\n<| c |>\nI see now.  You're right.\
    \  I must have missed that scenario.  Your solution is very elegant, though.\n\
    <|/ c |>\n<| a dscore=5 tags=php,sorting |>\nThe most elegant solution would be:\n\
    <code>\nsort($numbers);\n</code>\nIt will sort the numbers in the way you want.\n\
    <|/ a |>\n<| c |>\n`usort` doesn't guarantee the sort will be stable, but this\
    \ does work.\n<|/ c |>\n<| c |>\nit does guarantee the sort is stable because\
    \ `usort` calls `uasort` which calls `sort` but in this case it's implemented\
    \ the same way as `sort`.\n<|/ c |>\n<| c |>\nThis should be the top answer! It\
    \ works like a charm and is quite elegant, even if you have to call `array_values`\
    \ afterwards.\n<|/ c |>\n<| c |>\nThis doesn't sort numbers that have a leading\
    \ 0 like `01 10`, it will only sort numbers starting from 0.\n<|/ c |>\n<| c |>\n\
    This is only true if the input is formatted as \"words\" rather than \"numbers\"\
    .  It does not work with `10` and `010` as input and `'10 10'` and `'010 10'`\
    \ as input.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxgwnja5c.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = preg_replace(\"/[^\\\
    d]+/\", \"\", $numbers);\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhp7pcup.php:18\n\
    Stack trace:\n#0 /tmp/tmpbhp7pcup.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbhp7pcup.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI did not downvote but it seems to me that your code does not answer\
    \ the OP's question. Your code just sort the numbers alphabetically.\n<|/ c |>\n\
    <| c |>\n: It does answer the question. It explains how OP could sort the string.\
    \ I just added a comment explaining how it could be modified to sort the numbers\
    \ themselves.\n<|/ c |>\n<| c |>\nThe only thing that comes to my mind is your\
    \ `sort_numbers` function sorts the numbers alphabetically. But the OP wanted\
    \ to sort the string from smallest to largest.\n<|/ c |>\n<| c |>\n: Ah, now I\
    \ understand. Thank you!\n<|/ c |>\n<| c |>\nYour code doesn't work. The OP wanted\
    \ to sort the string from smallest to largest, not the numbers.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    echo implode(' ', $numbers);\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfrqei56y.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\nThe $numbers\
    \ variable contains a space-delimited string of numberals from 'zero' to 'nine'.\
    \ The function sort_numbers() sorts the array using the sort() function. The function\
    \ returns the sorted space-delimited string using the implode() function. The\
    \ implode() function is the glue between an array of items. In this case each\
    \ item in the array is a number.\nThe sort_numbers() function can be called by\
    \ itself without any parameters to sort a list of numbers:\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp76cd0r4p.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $num_parts = explode(\" \", $numbers);\n\
    \    $strings = array();\n    $sorted = array();\n\n    for ($i=0; $i<count($num_parts);\
    \ $i++) {\n        $n = $num_parts[$i];\n        $digits = str_split($n);\n  \
    \      asort($digits);\n        $strings[] = implode($digits);\n    }\n\n    for\
    \ ($i=0; $i<count($strings); $i++) {\n        $sorted[] = $strings[$i];\n    }\n\
    \n    return implode(\" \", $sorted);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99f1kfpp.php:32\n\
    Stack trace:\n#0 /tmp/tmp99f1kfpp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp99f1kfpp.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  global $valid_numbers;\n\n  $numbers\
    \ = explode(' ', $numbers);\n  $numbers = array_map('trim', $numbers);\n  $numbers\
    \ = array_filter($numbers);\n  if (!$numbers) {\n    return $numbers;\n  }\n \
    \ $numbers = array_map('intval', $numbers);\n  if (count($numbers) < 2) {\n  \
    \  return $numbers;\n  }\n  usort($numbers, function($a, $b) {\n    return $a\
    \ - $b;\n  });\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php,arrays\
    \ |>\n<| c |>\nPlease note that `usort()` is designed for sorting arrays, not\
    \ for sorting strings containing numbers.\n<|/ c |>\n<| c |>\n: Indeed, which\
    \ is why I said \"Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\"\n<|/ c |>\n<| c |>\nYes, that's why I suggested a regex solution for\
    \ such strings. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nHi, it seems\
    \ that there is a bug with the last numbers. `sort_numbers('nine two seven') returns\
    \ 'one two seven nine'` instead of `'nine two seven'`\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3r6m39ys.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers_array = explode(' ',\
    \ $numbers);\n    $sorted_numbers = array();\n    $length = count($numbers_array);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $sorted_numbers[$numbers_array[$i]]\
    \ = $i;\n    }\n    return implode(' ', array_keys($sorted_numbers));\n}\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6stz76ek.php:24\n\
    Stack trace:\n#0 /tmp/tmp6stz76ek.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6stz76ek.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrpr0tcl.php:20\n\
    Stack trace:\n#0 /tmp/tmpwrpr0tcl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwrpr0tcl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = preg_split('/\\s+/',\
    \ $numbers);\n\n  // Filter out any non-numbers from the list.\n  $numbers = array_filter($numbers,\
    \ 'is_numeric');\n  if (count($numbers) == 0) {\n    return $numbers;\n  }\n\n\
    \  // Reverse the order of the numbers.\n  $numbers = array_reverse($numbers);\n\
    \n  // Sort the numbers.\n  sort($numbers);\n\n  // Re-assemble the list with\
    \ the numbers sorted.\n  $numbers = implode(' ', $numbers);\n\n  return $numbers;\n\
    }\n</code>\n<|/ a tags=arrays,php,sorting,algorithm |>\n<| c |>\nHow about sorting\
    \ numbers larger than a thousand? I believe that `nlsort()` will cause an `E_WARNING`\
    \ warning.\n<|/ c |>\n<| c |>\nSorry for the delay - I was on vacation.\n<|/ c\
    \ |>\n<| a tags=arrays,php,sorting,algorithm dscore=5 |>\n<code>\n<?php\n$numbers\
    \ = array();\n$numbers[] = 'five';\n$numbers[] = 'four';\n$numbers[] = 'three';\n\
    $numbers[] = 'two';\n$numbers[] = 'one';\n$numbers[] = 'zero';\n\nusort($numbers,\
    \ 'cmp');\nprint_r($numbers);\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5k4v78fr.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Your code here\n  \n  return\
    \ $numbers;\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rxgp35v.php:20\n\
    Stack trace:\n#0 /tmp/tmp5rxgp35v.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp5rxgp35v.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers_arr = explode(' ', $numbers);\n\
    \  sort($numbers_arr);\n  return implode(' ', $numbers_arr);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbd14dnw5.php:19\n\
    Stack trace:\n#0 /tmp/tmpbd14dnw5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbd14dnw5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = preg_replace('/\\s+/',\
    \ '', $numbers);\n\n    $valid = array('zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n    $sorted = array();\n    $count\
    \ = 0;\n    foreach ($numbers as $number) {\n        $index = 0;\n        while\
    \ (isset($valid[$index])) {\n            if ($valid[$index] == $number) {\n  \
    \              break;\n            }\n            $index++;\n        }\n     \
    \   $sorted[$count] = $number;\n        $count++;\n    }\n\n    return implode('',\
    \ $sorted);\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpve27bw2c.php\
    \ on line 13\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpve27bw2c.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpve27bw2c.php:34\n\
    Stack trace:\n#0 /tmp/tmpve27bw2c.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpve27bw2c.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  $keys = array_count_values($numbers);\n  arsort($keys);\n  return implode('\
    \ ', array_keys($keys));\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThank you. I\
    \ tried with your code and edited your code, this is what I got `Warning: implode():\
    \ Invalid arguments passed`\n<|/ c |>\n<| c |>\nYou're welcome. It would help\
    \ if you posted your modified code. If I were to guess, I'd say your string isn't\
    \ formatted correctly. Try outputting `print_r($numbers);` before you execute\
    \ the `explode` function.\n<|/ c |>\n<| c |>\nI added my code to the question.\
    \ Thank you. :)\n<|/ c |>\n<| c |>\nIf it isn't working, I'd just try `print_r($numbers);`\
    \ right before the `explode` call. I don't think `print_r` would show you an empty\
    \ array if there was no data.\n<|/ c |>\n<| c |>\nI tried `print_r($numbers);`\
    \ before the `explode` call. And the result is `Array\n(\n    [0] => \n    [1]\
    \ => \n)`. I don't think this is a problem. Thank you.\n<|/ c |>\n<| a tags=php\
    \ |>\nYour first explode function should look like below:\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph1tno00c.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Split into space-delimited array\n\
    \  $parts = explode(' ', $numbers);\n  // Sort array\n  sort($parts);\n  // Turn\
    \ array into a space-delimited string\n  return implode(' ', $parts);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqy57q4z.php:23\n\
    Stack trace:\n#0 /tmp/tmpyqy57q4z.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyqy57q4z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  sort($numbers);\n  return implode(\"\
    \ \", $numbers);\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpw6zemc1h.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpw6zemc1h.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw6zemc1h.php:16\n\
    Stack trace:\n#0 /tmp/tmpw6zemc1h.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpw6zemc1h.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return implode(' ', array_map('strval',\
    \ preg_split('/\\s+/', $numbers, -1, PREG_SPLIT_NO_EMPTY)));\n}\n</code>\nThe\
    \ above function can be improved substantially by eliminating the need for explode,\
    \ array_map and implode, but for those who are more comfortable with that sort\
    \ of thing than me I offer the following function, which also doesn't rely on\
    \ explode, array_map and implode at all:\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzzjfilaj.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  $numbers = array_map('intval', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2ns0xkc.php:19\n\
    Stack trace:\n#0 /tmp/tmpy2ns0xkc.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpy2ns0xkc.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(\" \", $numbers);\n\
    \  sort($numbers);\n  return implode(\" \", $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqqdwog3.php:20\n\
    Stack trace:\n#0 /tmp/tmpjqqdwog3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjqqdwog3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  foreach (explode(' ', $numbers)\
    \ as $number) {\n    if (!$number) {\n      continue;\n    }\n    $number = intval($number);\n\
    \    if ($number < 10 && $number != 0 || !$number > 9 || $number < 0 || $number\
    \ > 9) {\n      throw new InvalidArgumentException;\n    }\n  }\n  usort($numbers,\
    \ function($a, $b) {\n    if ($a == $b) {\n      return 0;\n    }\n    return\
    \ ($a < $b) ? -1 : 1;\n  });\n  return implode(' ', $numbers);\n}\n\n/**\n * Sorts\
    \ a list of arguments by the occurrence of a given argument name.\n *\n * @return\
    \ array\n *   An array of ordered arguments lists, by argument name key. Arguments\
    \ having a null key are moved\n *   to the end of the list.\n *\n *   @type array\
    \ $args\n *   @type string $arg\n *   @type string $argument_key\n */\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 1 to be array, string given in /tmp/tmpm448z582.php\
    \ on line 22\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpm448z582.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm448z582.php:42\n\
    Stack trace:\n#0 /tmp/tmpm448z582.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpm448z582.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return str_replace(array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'), array(0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9), $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    You know that there's a `strtotime` function?\n<|/ c |>\n<| c |>\nYes, I know,\
    \ I'm just trying to be helpful. :)\n<|/ c |>\n<| a |>\nThis answer is based on\
    \ the comments made by others who have given good answers so far which I believe\
    \ are correct. Since I cannot accept all answers here, I'll post my own.\nI am\
    \ posting my own answer here because I have learned more about the str_replace\
    \ function in PHP 7.1 which I did not know before.\n<code>\n<?php\n    function\
    \ sort_numbers($numbers){\n        $pattern = array(\n            '/^\\d+$/i',\n\
    \            '/^(zero|one|two|three|four|five|six|seven|eight|nine)$/i'\n    \
    \    );\n        $replacement = array(\n            '0'=>'0', \n            '1'=>'1',\
    \ \n            '2'=>'2', \n            '3'=>'3', \n            '4'=>'4', \n \
    \           '5'=>'5', \n            '6'=>'6', \n            '7'=>'7', \n     \
    \       '8'=>'8', \n            '9'=>'9'\n        );\n        $result = preg_replace($pattern,\
    \ $replacement, $numbers);\n        return $result;\n    }\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwxsm0ab3.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $return = array();\n    $numbers\
    \ = array_map('intval', explode(' ', $numbers));\n    sort($numbers);\n    $number\
    \ = array_pop($numbers);\n    foreach ($numbers as $number) {\n        if ($number\
    \ == $number) {\n            $return[] = $number;\n        } else {\n        \
    \    $return[] = $number . \" \" . $number;\n        }\n    }\n    $return[] =\
    \ $number;\n    return implode(' ', $return);\n}\n</code>\n<|/ a tags=php,sorting,string,numbers\
    \ |>\n<| c |>\nWhile this code snippet may solve the question, [including an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| c |>\nGood answer! I used this\
    \ approach to sort by decimal. Here's an updated version that also sorts by decimal:\
    \ `function sort_numbers($numbers) {\n    $return = array();\n    $numbers = array_map('intval',\
    \ explode(' ', $numbers));\n    sort($numbers);\n    $number = array_pop($numbers);\n\
    \    foreach ($numbers as $number) {\n        if ($number == $number) {\n    \
    \        $return[] = $number;\n        } else {\n            $return[] = $number\
    \ . \" \" . $number;\n        }\n    }\n    $return[] = $number;\n    return implode('\
    \ ', $return);\n}`\n<|/ c |>\n<| a |>\nI needed this recently and decided to use\
    \ an associative array to solve the issue. This solution doesn't require me to\
    \ know the number of digits in the number and can be used in an SQL where clause,\
    \ among other things.\n<code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz1b7ia5e.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    foreach (explode(' ', $numbers)\
    \ as $number) {\n        // If number is not a number, throw an error\n      \
    \  if (preg_match('/[^\\d]/', $number) === 0) {\n            throw new InvalidArgumentException('Please\
    \ give a space-delimited string of numbers from zero to nine');\n        }\n \
    \   }\n    // Sort numbers from smallest to largest\n    sort($numbers);\n   \
    \ // Echo sorted numbers\n    return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: Please give a space-delimited\
    \ string of numbers from zero to nine in /tmp/tmpgbyrfg8k.php:11\nStack trace:\n\
    #0 /tmp/tmpgbyrfg8k.php(21): sort_numbers('')\n#1 /tmp/tmpgbyrfg8k.php(25): candidate('')\n\
    #2 /tmp/tmpgbyrfg8k.php(32): test()\n#3 {main}\n  thrown in /tmp/tmpgbyrfg8k.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you so much for your answer. I added the expected output.\
    \ Could you please give me some explanation on how the function works?\n<|/ c\
    \ |>\n<| c |>\nThe `sort()` function sorts a list in ascending order. [`usort()`\
    \ does the opposite](http://php.net/manual/en/function.sort.php#refsect1-function.usort-returnvalues).\
    \ So, `sort_numbers('two four seven eight')` returns `two four seven eight zero`.\n\
    <|/ c |>\n<| c |>\nCould you please explain the code line by line? Thank you so\
    \ much.\n<|/ c |>\n<| c |>\n`usort()` compares the values of the given array to\
    \ the values of an array that has been passed in. `usort()` returns the sorted\
    \ version of the original array.\n<|/ c |>\n<| c |>\nI added an explanation to\
    \ my answer.\n<|/ c |>\n<| a dscore=0 |>\nPHP has inbuilt functions for sorting\
    \ arrays, try using them instead. \n<code>\n<?php\n$numbers = array(1, 2, 3, 4,\
    \ 5);\nsort($numbers);\nprint_r($numbers);\nfunction candidate(...$args) {\n \
    \   return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgz9gnfog.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return implode(' ', array_map(function\
    \ ($num) {\n    if (strpos($num, 'zero') !== FALSE) {\n      return 'zero';\n\
    \    }\n    if (strpos($num, 'one') !== FALSE) {\n      return 'one';\n    }\n\
    \    if (strpos($num, 'two') !== FALSE) {\n      return 'two';\n    }\n    if\
    \ (strpos($num, 'three') !== FALSE) {\n      return 'three';\n    }\n    if (strpos($num,\
    \ 'four') !== FALSE) {\n      return 'four';\n    }\n    if (strpos($num, 'five')\
    \ !== FALSE) {\n      return 'five';\n    }\n    if (strpos($num, 'six') !== FALSE)\
    \ {\n      return 'six';\n    }\n    if (strpos($num, 'seven') !== FALSE) {\n\
    \      return 'seven';\n    }\n    if (strpos($num, 'eight') !== FALSE) {\n  \
    \    return 'eight';\n    }\n    if (strpos($num, 'nine') !== FALSE) {\n     \
    \ return 'nine';\n    }\n  }, explode(' ', $numbers)));\n}\n</code>\n<|/ a dscore=3\
    \ tags=php,sorting |>\n<| a dscore=2 tags=php,sorting |>\n<code>\n$numbers = array('seven','ten','one','three','four','two','six','five','eight','nine');\n\
    sort($numbers);\n$numbers = implode(' ',$numbers);\n</code>\n<|/ a |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nPlease\
    \ don't do this; it's very easy to get stuck in an infinite loop.\n<|/ c |>\n\
    <| a |>\nI wrote a PHP sorting function that sorts arrays, using one line of code:\n\
    <code>\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4w2uv63o.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    // Split string into array of\
    \ numbers\n    $numbers = array_filter(explode(' ', $numbers));\n\n    // Return\
    \ empty string if there's no numbers\n    if(empty($numbers)) {\n        return\
    \ '';\n    }\n\n    // Sort from smallest to largest\n    usort($numbers, 'sort_numbers_func');\n\
    \n    // Return sorted string\n    return implode(' ', $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_numbers_func' not found or invalid function name in /tmp/tmp9jw4bev7.php\
    \ on line 17\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_numbers_func' not found or invalid function name in /tmp/tmp9jw4bev7.php\
    \ on line 17\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_numbers_func' not found or invalid function name in /tmp/tmp9jw4bev7.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jw4bev7.php:31\n\
    Stack trace:\n#0 /tmp/tmp9jw4bev7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9jw4bev7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $parts = explode(' ', $numbers);\n\
    \  $sorted_parts = array();\n  foreach ($parts as $part) {\n    if (preg_match('/(0|one|two|three|four|five|six|seven|eight|nine)/',\
    \ $part)) {\n      $sorted_parts[] = $part;\n    }\n  }\n  return implode(' ',\
    \ $sorted_parts);\n}\n</code>\n<|/ a dscore=0 tags=numbers,sorting,php |>\n<|\
    \ a tags=numbers,sorting,php dscore=0 |>\nI added some extra code to keep it from\
    \ adding zeros and sorting the number with two zeros infront of the number. Also\
    \ it keeps the 0s at the beggining of the string, which was something I needed.\
    \ \n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpke_m9_nh.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $words = explode(' ', $numbers);\n\
    \  sort($words);\n  return implode(' ', $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyjr57q4.php:20\n\
    Stack trace:\n#0 /tmp/tmpeyjr57q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpeyjr57q4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return implode(' ', array_map('intval',\
    \ preg_split('/\\s+/', $numbers)));\n}\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9phl8yob.php:15\n\
    Stack trace:\n#0 /tmp/tmp9phl8yob.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp9phl8yob.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $list = explode(' ', $numbers);\n\
    \  sort($list);\n  return implode(' ', $list);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_efc00j5.php:19\n\
    Stack trace:\n#0 /tmp/tmp_efc00j5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_efc00j5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    // Split string into array of\
    \ numbers\n    $numbers = array_map('intval', explode(' ', $numbers));\n    //\
    \ Sort numbers from smallest to largest\n    sort($numbers);\n    // Return sorted\
    \ string\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=php,arrays,sorting |>\n<code>\n$numbers = ['one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine']; //array for numbers\n$sortBy = 'nine';\
    \ //define what to sort by\n$order = array(); //array for ordering values\n$count\
    \ = 0; //counter to define array index\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprynrs1si.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers_array = explode(' ',\
    \ $numbers);\n    sort($numbers_array);\n    return implode(' ', $numbers_array);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfqoj761.php:20\n\
    Stack trace:\n#0 /tmp/tmpjfqoj761.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjfqoj761.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  $numbers_sorted = array();\n  $numbers_sorted = array_merge(array_slice($numbers,\
    \ 0, 1), array_slice($numbers, 1, -1), '', ' ');\n  sort($numbers_sorted);\n \
    \ return implode(' ', $numbers_sorted);\n}\nfunction candidate(...$args) {\n \
    \   return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 3 to be an array, string given\
    \ in /tmp/tmp_x1brxnw.php on line 10\n\nWarning: sort() expects parameter 1 to\
    \ be array, null given in /tmp/tmp_x1brxnw.php on line 11\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmp_x1brxnw.php on line 12\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp_x1brxnw.php:19\nStack trace:\n\
    #0 /tmp/tmp_x1brxnw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_x1brxnw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Make sure it's a string\n  $numbers\
    \ = strtolower($numbers);\n  $numbers = str_replace('nine', 'ninety', $numbers);\n\
    \  $numbers = str_replace('zero', 'zeroth', $numbers);\n  // Explode by space\n\
    \  $numbers = explode(' ', $numbers);\n  // Sort the array\n  sort($numbers);\n\
    \  // Return the string\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis is great.  It works with my example.  But it doesn't seem to work\
    \ when I include a number in the sentence (ex. `one two three four five six seven\
    \ eight nine zero fourteen`).  How could I modify it to accommodate that?\n<|/\
    \ c |>\n<| c |>\nI guess it would be better to make all valid numbers into numbers\
    \ and then sort them with [**`natcasecmp()`**](http://www.php.net/manual/en/function.natcasecmp.php)...\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2skv9w2r.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  if (!preg_match('/^(zero|one|two|three|four|five|six|seven|eight|nine)\\\
    s+?(zero|one|two|three|four|five|six|seven|eight|nine)\\s+?(zero|one|two|three|four|five|six|seven|eight|nine)$/i',\
    \ $numbers, $matches)) { return null; }\n  return $matches[1] . ' ' . $matches[2]\
    \ . ' ' . $matches[3];\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbkmhx888.php:16\n\
    Stack trace:\n#0 /tmp/tmpbkmhx888.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpbkmhx888.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $nums = explode(' ', $numbers);\n\
    \    sort($nums, SORT_NUMERIC);\n    $nums = implode(' ', $nums);\n    return\
    \ $nums;\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwlfxi9pc.php:22\n\
    Stack trace:\n#0 /tmp/tmpwlfxi9pc.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwlfxi9pc.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbcl4iks.php:20\n\
    Stack trace:\n#0 /tmp/tmpbbcl4iks.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbbcl4iks.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $sorted = '';\n  foreach (explode('\
    \ ', $numbers) as $n) {\n    $n = ucwords($n);\n    if ($n == 'ZERO') {\n    \
    \  $n = 'zero';\n    }\n    if ($n == 'ONE') {\n      $n = 'one';\n    }\n   \
    \ if ($n == 'TWO') {\n      $n = 'two';\n    }\n    if ($n == 'THREE') {\n   \
    \   $n = 'three';\n    }\n    if ($n == 'FOUR') {\n      $n = 'four';\n    }\n\
    \    if ($n == 'FIVE') {\n      $n = 'five';\n    }\n    if ($n == 'SIX') {\n\
    \      $n = 'six';\n    }\n    if ($n == 'SEVEN') {\n      $n = 'seven';\n   \
    \ }\n    if ($n == 'EIGHT') {\n      $n = 'eight';\n    }\n    if ($n == 'NINE')\
    \ {\n      $n = 'nine';\n    }\n    $sorted .= $n . ' ';\n  }\n  $sorted = trim($sorted);\n\
    \  return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqw6e78df.php:52\n\
    Stack trace:\n#0 /tmp/tmpqw6e78df.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpqw6e78df.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $choice = array_search($numbers,\
    \ array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine'));\n  return $choice;\n}\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wbmcn0c.php:16\n\
    Stack trace:\n#0 /tmp/tmp0wbmcn0c.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp0wbmcn0c.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $numbers = explode(' ', $numbers);\n\
    \    arsort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a\
    \ |>\n<| a dscore=2 |>\nThe other answers are all fine but in my opinion this\
    \ is pretty elegant:\n<code>\n$number = \"1 2 3 4 5 6 7 8 9 10\";\n$numbers =\
    \ explode(\" \", $number);\narray_multisort($numbers, SORT_DESC);\necho implode(\"\
    \ \", $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting dscore=1\
    \ |>\nThis works for me for strings containing multiple numbers, in descending\
    \ order:\n<code>\n<?php\n\n$string = \"1 8 2 9 5 6 3 4 7 10 11\";\n\nfunction\
    \ candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpysevrv2f.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return sort(array_map('trim',\
    \ explode(' ', $numbers)));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php\
    \ |>\nTo add to's answer: Since PHP 5.3 you can use array_map() with anonymous\
    \ functions instead of anonymous classes: \n<code>\n$numbers = ['one','two','three','four','five','six','seven','eight','nine'];\n\
    $sorted_numbers = array_map (\n  function ($n) { return $n; }, \n  $numbers);\n\
    var_dump($sorted_numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    I like this one for it's brevity:\n<code>\n$numbers = array_map('strval', explode('\
    \ ', $numbers));\n</code>\nBut it's also not exactly the fastest.  I ran some\
    \ tests, and array_map() is actually faster than a loop.  I ran this on PHP 5.3.18\
    \ and PHP 5.2.17.  For small numbers like yours, the difference is negligible,\
    \ but for larger numbers, I ran into significant performance differences between\
    \ these methods:\n<code>\nBenchmarking strval()... 10000 iterations:\n    array_map()\
    \ took 4.4306 sec\n    foreach() took 1.6659 sec\n    strval() took 5.0033 sec\n\
    </code>\nBut with larger arrays, I saw the array_map() method outperform the foreach\
    \ method.  So I ran a benchmark on a larger array:\n<code>\nBenchmarking strval()...\
    \ 1000 iterations:\n    array_map() took 4.3749 sec\n    foreach() took 1.6688\
    \ sec\n    strval() took 5.0055 sec\n</code>\nThe foreach method is slightly faster\
    \ overall because it's actually a loop, so it eliminates the overhead of the PHP\
    \ interpreter.  But array_map() appears to be the faster of the two, so it really\
    \ doesn't matter which you use.  This is true for both versions of PHP and my\
    \ PHP 5.3.18 setup, although for smaller arrays, array_map() could run faster\
    \ or slower, depending on the size of an array.\nSo I ran this test:\n<code>\n\
    function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjiyl8843.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $sorted = '';\n\n  foreach (explode('\
    \ ', $numbers) as $number) {\n    if (!is_numeric($number)) {\n      die(\"Expected\
    \ a number, but got {$number}\");\n    }\n\n    // Make sure the number isn't\
    \ zero\n    if ($number == 'zero') {\n      die(\"Can't sort by zero\");\n   \
    \ }\n\n    // Swap the number if it's bigger than the previous one\n    if ($sorted\
    \ == '' && $number > 'one') {\n      $sorted = 'one';\n    } elseif ($sorted ==\
    \ 'one' && $number > 'two') {\n      $sorted = 'two';\n    } elseif ($sorted ==\
    \ 'two' && $number > 'three') {\n      $sorted = 'three';\n    } elseif ($sorted\
    \ == 'three' && $number > 'four') {\n      $sorted = 'four';\n    } elseif ($sorted\
    \ == 'four' && $number > 'five') {\n      $sorted = 'five';\n    } elseif ($sorted\
    \ == 'five' && $number > 'six') {\n      $sorted = 'six';\n    } elseif ($sorted\
    \ == 'six' && $number > 'seven') {\n      $sorted = 'seven';\n    } elseif ($sorted\
    \ == 'seven' && $number > 'eight') {\n      $sorted = 'eight';\n    } elseif ($sorted\
    \ == 'eight' && $number > 'nine') {\n      $sorted = 'nine';\n    } elseif ($sorted\
    \ == 'nine' && $number > 'zero') {\n      $sorted = 'zero';\n    }\n  }\n\n  return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 'Expected a number, but got '
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $result = \"\";\n    // Convert\
    \ list of numbers to array for easy sorting\n    foreach (explode(\" \", $numbers)\
    \ as $num) {\n        $result .= $num;\n    }\n    // Sort the array\n    sort($result);\n\
    \    // Reassemble string\n    $result = \"\";\n    foreach (explode(\" \", $numbers)\
    \ as $num) {\n        $result .= $num;\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,phpstorm,macos |>\n<| a dscore=1 tags=php,phpstorm,macos |>\nI\
    \ found this answer to be very useful. I had to add this in addition to adding\
    \ these extensions to PHP:\n\nintl\npcntl\npcntl_signal\npcntl_wifexited\npcntl_wifsignaled\n\
    pcntl_wifstopped\npcntl_wexitstatus\npcntl_wstopsig\n\nThe final PHP code then\
    \ looked like this:\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb9_221oy.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    return implode('', array_map(function\
    \ ($number) {\n        return $number == 'zero' ? '0' : $number == 'nine' ? '9'\
    \ : $number;\n    }, $numbers));\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\"\
    ) !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, string given\
    \ in /tmp/tmpeu9ijm5u.php on line 10\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpeu9ijm5u.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpeu9ijm5u.php:18\nStack trace:\n#0 /tmp/tmpeu9ijm5u.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeu9ijm5u.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  foreach (explode(' ', $numbers)\
    \ as $number) {\n    if (in_array($number, array('zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine'))) {\n      $array = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n \
    \     $array1 = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n      $array2 = array('zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n      array_push($array, $number);\n\
    \      array_push($array2, $number);\n      $array3[] = $array;\n      $array4[]\
    \ = $array2;\n      array_push($array3, $number);\n      array_push($array4, $number);\n\
    \      $array5[] = $array3;\n      $array6[] = $array4;\n      array_push($array5,\
    \ $number);\n      array_push($array6, $number);\n      $array7[] = $array5;\n\
    \      $array8[] = $array6;\n      array_push($array7, $number);\n      array_push($array8,\
    \ $number);\n      $array9[] = $array7;\n      $array10[] = $array8;\n      array_push($array9,\
    \ $number);\n      array_push($array10, $number);\n      $array11[] = $array9;\n\
    \      $array12[] = $array10;\n      array_push($array11, $number);\n      array_push($array12,\
    \ $number);\n      $array13[] = $array11;\n      $array14[] = $array12;\n    \
    \  array_push($array13, $number);\n      array_push($array14, $number);\n    \
    \  $array15[] = $array13;\n      $array16[] = $array14;\n      array_push($array15,\
    \ $number);\n      array_push($array16, $number);\n      $array17[] = $array15;\n\
    \      $array18[] = $array16;\n      array_push($array17, $number);\n      array_push($array18,\
    \ $number);\n      $array19[] = $array17;\n      $array20[] = $array18;\n    \
    \  array_push($array19, $number);\n      array_push($array20, $number);\n    \
    \  $array21[] = $array19;\n      $array22[] = $array20;\n      array_push($array21,\
    \ $number);\n      array_push($array22, \nfunction candidate(...$args) {\n   \
    \ return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five\
    \ seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    six five four three two one zero\") !== \"zero one two three four five six\")\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl9jiwgv4.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n    $arr = explode(' ', $numbers);\n\
    \    sort($arr);\n    return implode(' ', $arr);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\necho implode(array_reverse(explode(\" \", $numbers)));\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nYou might want to explain what you did and\
    \ how it works.\n<|/ c |>\n<| c |>\n`explode()` and `array_reverse()` splits the\
    \ string into an array of words. `implode()` then takes that array of words and\
    \ joins it back into a string.\n<|/ c |>\n<| c |>\nThat would work if you needed\
    \ to do that. But this was more of an exercise, so I wanted to show how to do\
    \ the reverse operation on a single line of code.\n<|/ c |>\n<| a tags=php |>\n\
    The only way i know to do this (without using any functions) is to use string\
    \ manipulation with the explode and implode functions. \n<code>\n<?php\n\n$num=\"\
    3 1 5\";\n$numArray=explode(' ',$num);\n\n$str=\"\";\n\nfor($i=0;$i<count($numArray);$i++)\n\
    {\n    $str.=$numArray[$i].\" \";\n}\n\n$str=substr($str,0,count($numArray));\n\
    \n$numArray=explode(' ',$str);\n\n$result=\"\";\n\nfor($i=0;$i<count($numArray);$i++)\n\
    {\n    $result.=$numArray[$i].\" \";\n}\n\n$result=substr($result,0,count($numArray));\n\
    \necho $result;\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp98vp6xan.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n\t$numbers = explode(' ', $numbers);\n\
    \t$numbers = array_map('intval', $numbers);\n\tarray_multisort($numbers, SORT_ASC,\
    \ $numbers);\n\treturn implode(' ', $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvanjkvv6.php:19\n\
    Stack trace:\n#0 /tmp/tmpvanjkvv6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvanjkvv6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Return empty string if $numbers\
    \ is not set\n  if (!$numbers)\n    return '';\n  \n  // Return empty string if\
    \ $numbers is empty\n  if (!$numbers)\n    return '';\n  \n  // Split the string\
    \ into an array of numbers\n  $numbers = explode(' ', $numbers);\n  \n  // Return\
    \ the sorted array\n  return implode(' ', array_map('sort_number', $numbers));\n\
    }\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_map() expects parameter 1 to be a valid callback, function\
    \ 'sort_number' not found or invalid function name in /tmp/tmpbtirv0yt.php on\
    \ line 20\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpbtirv0yt.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtirv0yt.php:28\n\
    Stack trace:\n#0 /tmp/tmpbtirv0yt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbtirv0yt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = trim($numbers);\n  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7xz8nw2.php:20\n\
    Stack trace:\n#0 /tmp/tmp_7xz8nw2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_7xz8nw2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven\
    \ nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1ucg436.php:19\n\
    Stack trace:\n#0 /tmp/tmpx1ucg436.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpx1ucg436.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  return sort(explode(' ', $numbers));\n\
    }\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpejq309m_.php:15\n\
    Stack trace:\n#0 /tmp/tmpejq309m_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpejq309m_.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted\
    \ from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three\
    \ five'\nfunction sort_numbers($numbers) {\n  // Split the input string into space-delimited\
    \ numbers\n  $nums = explode(' ', $numbers);\n  // Sort the numbers\n  sort($nums);\n\
    \  // Return them as a space-delimited string\n  return implode(' ', $nums);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
    \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
    \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gkapqjn.php:23\n\
    Stack trace:\n#0 /tmp/tmp5gkapqjn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5gkapqjn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
