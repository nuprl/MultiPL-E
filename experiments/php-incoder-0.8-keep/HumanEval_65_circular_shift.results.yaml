name: HumanEval_65_circular_shift
language: php
results:
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > 0) {\n        $str = str_pad('', $shift, '0');\n        for\
    \ ($i = strlen($x) - 1; $i >= 0; $i--) {\n            $str[$i + $shift] = $x[$i];\n\
    \        }\n        return $str;\n    }\n    return str_pad('', abs($shift), '0')\
    \ . substr($x, -$shift);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Cannot assign an empty string to a string offset in /tmp/tmp5008y8p8.php\
    \ on line 13\n\nWarning: Cannot assign an empty string to a string offset in /tmp/tmp5008y8p8.php\
    \ on line 13\n\nWarning: Cannot assign an empty string to a string offset in /tmp/tmp5008y8p8.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5008y8p8.php:25\n\
    Stack trace:\n#0 /tmp/tmp5008y8p8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5008y8p8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift > strlen($x)) {\n    return strrev($x);\n  }\n  $digits = strlen($x)\
    \ - $shift;\n  $res = '';\n  for ($i = 0; $i < $digits; $i++) {\n    $res .= $x[$shift\
    \ + $i];\n  }\n  return $res;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp028tm2fj.php:25\n\
    Stack trace:\n#0 /tmp/tmp028tm2fj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp028tm2fj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $sign = ($x[$shift] >= 0) ? '+' : '-';\n    $x = abs($x);\n    $result =\
    \ \"\";\n    while ($shift > 0)\n    {\n        $result = $result . substr($x,\
    \ $shift, 1);\n        $shift = $shift - 1;\n    }\n    return $sign . $result;\n\
    }\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ds95d_7.php:25\n\
    Stack trace:\n#0 /tmp/tmp4ds95d_7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4ds95d_7.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $sign = ($x < 0) ? '-' : '+';\n    $result = $x;\n    $shifts = $shift;\n\
    \    while (++$shifts !== 0) {\n        $last = $result;\n        $result = ((($result\
    \ & 1) === 0) ? '0' : '1') + $result;\n        $x <<= 1;\n        if ($shifts\
    \ & (1 << 5)) {\n            $result |= $last;\n        }\n    }\n    return $sign\
    \ + $result;\n}\n\n$i = 300000;\necho \"i=\", $i, \", circular_shift=\", circular_shift($i,\
    \ 1), PHP_EOL;\necho \"i=\", $i, \", circular_shift=\", circular_shift($i, 2),\
    \ PHP_EOL;\necho \"i=\", $i, \", circular_shift=\", circular_shift($i, 3), PHP_EOL;\n\
    echo \"i=\", $i, \", circular_shift=\", circular_shift($i, 4), PHP_EOL;\necho\
    \ \"i=\", $i, \", circular_shift=\", circular_shift($i, 5), PHP_EOL;\necho \"\
    i=\", $i, \", circular_shift=\", circular_shift($i, 6), PHP_EOL;\necho \"i=\"\
    , $i, \", circular_shift=\", circular_shift($i, 7), PHP_EOL;\necho \"i=\", $i,\
    \ \", circular_shift=\", circular_shift($i, 8), PHP_EOL;\necho \"i=\", $i, \"\
    , circular_shift=\", circular_shift($i, 9), PHP_EOL;\necho \"i=\", $i, \", circular_shift=\"\
    , circular_shift($i, 10), PHP_EOL;\necho \"i=\", $i, \", circular_shift=\", circular_shift($i,\
    \ 11), PHP_EOL;\necho \"i=\", $i, \", circular_shift=\", circular_shift($i, 12),\
    \ PHP_EOL;\necho \"i=\", $i, \", circular_shift=\", circular_shift($i, 13), PHP_EOL;\n\
    echo \"i=\", $i, \", circular_shift=\", circular_shift($i, 14), PHP_EOL;\necho\
    \ \"i=\", $i, \", circular_shift=\", circular_shift($i, 15), PHP_EOL;\necho \"\
    i=\", $i, \", circular_shift=\", circular_shift($i, 16), PHP_EOL;\necho \"i=\"\
    , $i, \", circular_shift=\", circular_shift($i, 17), PHP_EOL;\necho \"i=\", $i,\
    \ \", circular_shift=\", circular_shift($i, 18), PH\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn1yapz7a.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return $x >> $shift;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31h0w1ng.php:18\n\
    Stack trace:\n#0 /tmp/tmp31h0w1ng.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp31h0w1ng.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = strlen((string) $x);\n    if ($digits == 0) {\n        return \"\
    \";\n    }\n\n    $s = str_pad('', $shift, '0');\n    return str_pad(substr($x,\
    \ 0, $shift > $digits ? $shift - $digits : $shift), strlen($s), '0') . $s;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThank you for your answer. I've tried the function\
    \ and i get the following error\nParse error: syntax error, unexpected '?' (T_EXCLAMATION_MARK)\
    \ in /Applications/XAMPP/xamppfiles/htdocs/circular_shift.php on line 22\n<|/\
    \ c |>\n<| c |>\nIt was an extra `?`. I've fixed it.\n<|/ c |>\n<| c |>\nI forgot\
    \ that the second argument must be a non-negative integer.\n<|/ c |>\n<| c |>\n\
    It works perfectly now. Thank you. But I don't understand why you put an if statement.\
    \ I've always used an if statement. Could you explain me?\n<|/ c |>\n<| c |>\n\
    The `$shift` variable is a non-negative integer, so you don't need an `if` statement\
    \ to check if it's non-zero. The code inside the `if` statement was already in\
    \ my answer. I added it just in case you needed to do some additional processing\
    \ with the `$shift` variable after it had been shifted in the last line of the\
    \ function body. Of course, you can put that processing anywhere in the function,\
    \ not just in the last line of the function.\n<|/ c |>\n<| a tags=php |>\n<code>\n\
    <?php\n$a=\"abc\";\n$r=substr($a,0,1);\necho substr($a,0,1);\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyw_mrdb0.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > 0) {\n        $x = $x * pow(2, $shift);\n        $x = $x - ($x\
    \ % pow(2, $shift));\n    }\n\n    return $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdj4389s.php:23\n\
    Stack trace:\n#0 /tmp/tmpmdj4389s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmdj4389s.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = str_split($x);\n  if ($shift > count($digits)) $shift = count($digits);\n\
    \  $result = '';\n  for ($i = 0; $i < $shift; $i++) $result .= $digits[count($digits)\
    \ - $shift + $i];\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75cre6oh.php:22\n\
    Stack trace:\n#0 /tmp/tmp75cre6oh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp75cre6oh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $shifted = str_pad(decbin($x), $shift, \"0\", STR_PAD_LEFT);\n    return\
    \ substr($shifted, -$shift);\n}\n</code>\n<|/ a tags=php,math |>\n<| a tags=php,math\
    \ |>\nA bit late to the party, but I was searching for a way to do this and found\
    \ this question so I wanted to post an answer.  I used your method to get it working,\
    \ but I was using my function instead of the PHP equivalent of modular multiplication.\
    \  Here is the PHP code:\n<code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp962hgshh.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $numstr = strval($x);\n    if (strlen($numstr) < $shift) {\n        $shift\
    \ %= strlen($numstr);\n    } else {\n        $numstr = substr($numstr, 0, $shift);\n\
    \    }\n    return $numstr . str_repeat('0', $shift - strlen($numstr)) .\n   \
    \     strtolower(substr($numstr, $shift));\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4o663eo.php:25\n\
    Stack trace:\n#0 /tmp/tmpk4o663eo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk4o663eo.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $result = '';\n  while ($shift > strlen($x)) {\n    $result .= array_shift($x);\n\
    \    $shift -= strlen($x);\n  }\n  for ($i = 0; $i < $shift; $i++) {\n    $result\
    \ .= array_shift($x);\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    How does this handle negative numbers correctly? `-4` should return `-8` but your\
    \ function gives `4` instead\n<|/ c |>\n<| c |>\n: It doesn't. The `-` must be\
    \ added after `circular_shift` and the `-4` would be `-24`. A `-` after `circular_shift`\
    \ would do the job: `$result = circular_shift($x, $shift) . '-';`.\n<|/ c |>\n\
    <| c |>\n: Actually I got it wrong. Now it's ok. See my edit.\n<|/ c |>\n<| c\
    \ |>\nThanks! Your answer is perfect for what I was looking for\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8yr7qvyu.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift == 0) {\n        return \"0\";\n    }\n\n    $x = abs($x);\n\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n\n    $ret\
    \ = \"\";\n    $len = 0;\n\n    // For each digit in x except the last...\n  \
    \  for ($i = strlen($x) - 1; $i >= 0; $i--) {\n        $digit = substr($x, $i,\
    \ 1);\n        $len++;\n\n        // ...add the leftmost digit to the rightmost\
    \ position of the\n        // current accumulating string, shifting it over by\
    \ the shift count.\n        $ret .= $digit . $ret[($len + $shift)%strlen($ret)];\n\
    \    }\n\n    // Trim the final string of digits off the right end (but leave\
    \ the\n    // leftmost digit in place).\n    return substr($ret, 0, $shift);\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkoj3xene.php:30\n\
    Stack trace:\n#0 /tmp/tmpkoj3xene.php(39): circular_shift(100, 2)\n#1 /tmp/tmpkoj3xene.php(43):\
    \ candidate(100, 2)\n#2 /tmp/tmpkoj3xene.php(50): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpkoj3xene.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift == 0 || $shift == strlen($x)) return $x;\n    $x = ltrim($x, \"\
    0\");\n    if (strlen($x) > $shift && $x > 0) {\n        $x *= pow(10, $shift);\n\
    \        $x = (string) $x;\n        for ($i = strlen($x) - 1; $i >= $shift; $i--)\
    \ {\n            $x = substr($x, 0, $i).(string) $x.substr($x, $i + 1);\n    \
    \    }\n    }\n    return $x;\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4li7r95y.php:27\n\
    Stack trace:\n#0 /tmp/tmp4li7r95y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4li7r95y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // Circularly shift x left by shift places. Return x if shift is 0.\n   \
    \ return $shift == 0 ? $x : (string) ($x . str_repeat('0', $shift - strlen($x))\
    \ . str_repeat('0', strlen($x) - $shift));\n}\n\n/**\n * Determine if an ID is\
    \ safe.\n *\n * First, checks if the ID contains only alphanumeric characters\n\
    \ * and is equal to either the post ID or the post permalink.\n *\n * @since 1.0.0\n\
    \ *\n * @param string $id The ID to check.\n * @return bool True if it has only\
    \ alphanumeric characters and is equal to\n *               either the post ID\
    \ or the post permalink, false if not.\n */\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_repeat(): Second argument has to be greater than or equal\
    \ to 0 in /tmp/tmp509boois.php on line 11\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp509boois.php:31\nStack trace:\n#0 /tmp/tmp509boois.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp509boois.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $parts = str_split($x);\n    return $parts[count($parts) - $shift] . $parts[count($parts)\
    \ - $shift - 1];\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8wkd8yv.php:19\n\
    Stack trace:\n#0 /tmp/tmp_8wkd8yv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_8wkd8yv.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = $x % 10;\n  while ($shift > $digits) {\n    $x *= 10;\n    $shift--;\n\
    \  }\n  return $x.$digits;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw5p4bde.php:23\n\
    Stack trace:\n#0 /tmp/tmpcw5p4bde.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcw5p4bde.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = str_split($x);\n    $result = \"\";\n    $power = 1;\n    foreach\
    \ ($digits as $key => $digit) {\n        $key = $key + $shift;\n        if ($key\
    \ > count($digits) - 1) {\n            $key = 0;\n        }\n        $result =\
    \ $result . $digits[$key];\n        $power *= 10;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiyryuyp6.php:29\n\
    Stack trace:\n#0 /tmp/tmpiyryuyp6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiyryuyp6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift > strlen($x)) {\n    return strrev($x);\n  }\n  $result = '';\n\
    \  for ($i = strlen($x); $i >= $shift; $i--) {\n    $result = $x[$i] . $result;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndu0z_yw.php:25\n\
    Stack trace:\n#0 /tmp/tmpndu0z_yw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpndu0z_yw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = abs($x);\n    $shift = abs($shift);\n    if ($shift > strlen($x)) {\n\
    \        return $x ^ $shift;\n    }\n    $result = '';\n    while ($shift > 1)\
    \ {\n        $result .= $x & $x >> $shift;\n        $shift -= $shift;\n      \
    \  $x >>= $shift;\n    }\n    return $result . $x & $x;\n}\n</code>\nAnd here\
    \ is an example of the same code in action: \n<code>\n$x = hexdec('507a5d32');\n\
    $result = circular_shift($x, 3);\necho \"Hex: 0x{$x}\\n\";\necho \"Hex: 0x{$result}\\\
    n\";\necho \"Hex: 0x{$result} hex\\n\";\n</code>\nAnd the output:\n<code>\nHex:\
    \ 507a5d32\nHex: 507a5d31 hex\nHex: 507a5d32 hex\n</code>\nIt has worked in all\
    \ our tests so far. Here is the code snippet from one of the tests:\n<code>\n\
    $x = hexdec('507a5d32');\n$x = circular_shift($x, 3);\necho \"Hex: 0x{$x}\\n\"\
    ;\n$x = hexdec('507a5d32');\n$x = circular_shift($x, 10);\necho \"Hex: 0x{$x}\\\
    n\";\n$x = hexdec('507a5d32');\n$x = circular_shift($x, 36);\necho \"Hex: 0x{$x}\\\
    n\";\n</code>\nAnd the output:\n<code>\nHex: 507a5d32\nHex: 507a5d32\nHex: 507a5d32\n\
    </code>\nIn a test on www.phptester.net it seems to have worked, but in the actual\
    \ production environment, it had no effect. The code was identical except for\
    \ the number used to test the code. The number was 0x507a5d32. \nSo the conclusion\
    \ is that there is a bug in the php implementation of circular_shift that does\
    \ not handle negative numbers correctly. The bug appears to be in the implementation\
    \ that uses the xor operator, but as this does not handle negative numbers correctly,\
    \ this implementation cannot handle negative numbers correctly. The bug does not\
    \ appear to be related to how the code is written. There is a bug in the implementation\
    \ that can not handle negative numbers correctly. \nHere is another way to write\
    \ the function:\n<code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpst27k9y1.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return str_pad(decbin($x >> $shift), $shift, '0', STR_PAD_LEFT);\n}\n</code>\n\
    Usage:\n<code>\n$n = 34;\necho circular_shift($n, 2);\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbtq1pi1h.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $result = '';\n    do {\n        $digit = $x % 10;\n        $x = floor($x\
    \ / 10);\n        $result = $digit . $result;\n    } while ($shift > 0 && $x);\n\
    \n    return $result ? $result : $x;\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\n\
    <code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph_d6beqe.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = abs($x);\n    if ($shift > strlen($x)) {\n        return $x;\n    }\n\
    \    $str = str_pad('', $shift, '0');\n    return $str[strlen($str) - $shift -\
    \ 1] . $x;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp917n38t4.php:23\n\
    Stack trace:\n#0 /tmp/tmp917n38t4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp917n38t4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = (int) $x;\n    if ($digits < 0) {\n        $digits = $digits *\
    \ -1;\n        $x = -$x;\n    }\n    if ($shift > $digits) {\n        $shift %=\
    \ $digits;\n    }\n    if ($shift > 0) {\n        $x = $x - $shift % $digits;\n\
    \    }\n    else {\n        $shift = $digits - $shift;\n        $x = $x - $shift\
    \ % $digits;\n        $x = $x - $shift % $digits;\n    }\n    return $x;\n}\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknu_j2nl.php:33\n\
    Stack trace:\n#0 /tmp/tmpknu_j2nl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpknu_j2nl.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = str_split($x);\n  for ($i = count($digits)-1; $i >= 0; $i--){\n \
    \   $digits[$i] = $digits[$i] . $digits[$i];\n    if ($shift > 0){\n      --$shift;\n\
    \    }\n  }\n  return implode('', $digits);\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9ase5y4.php:25\n\
    Stack trace:\n#0 /tmp/tmpv9ase5y4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpv9ase5y4.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        return str_reverse(str_pad($x, $shift,\
    \ \"0\", STR_PAD_LEFT));\n    }\n    $ret = \"\";\n    do {\n        $last = $x%10;\n\
    \        $x = ($x - $last)/10;\n        $ret .= $last;\n    } while ($shift >\
    \ 0);\n    return $ret + $x;\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = '';\n  if ($shift >= strlen($x)) {\n    return $digits;\n  }\n  $shiftstr\
    \ = \"\";\n  while ($shift > 0) {\n    $shiftstr .= \"0\";\n    $shift--;\n  }\n\
    \  $len = strlen($shiftstr);\n  for ($i = 0; $i < $len; $i++) {\n    $digits =\
    \ $shiftstr{$i} . $digits;\n  }\n  return $digits;\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotbxg8og.php:31\n\
    Stack trace:\n#0 /tmp/tmpotbxg8og.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpotbxg8og.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n\n\
    \  $digits_shift = $digits - $shift;\n  if ($digits_shift > 0) {\n    return substr($x,\
    \ -$digits_shift) . substr($x, 0, $shift);\n  }\n\n  return substr($x, -$shift);\n\
    }\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9tc2tka.php:27\n\
    Stack trace:\n#0 /tmp/tmpe9tc2tka.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpe9tc2tka.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) return $x;\n    $r = \"\";\n    while ($shift >\
    \ 0) {\n        $r = $x[$shift-1] . $r;\n        $shift--;\n    }\n    if ($shift\
    \ < strlen($x)) $r = $r . $x[$shift];\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla8w2b9l.php:25\n\
    Stack trace:\n#0 /tmp/tmpla8w2b9l.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpla8w2b9l.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = intval($x);\n    $shift = intval($shift);\n    $shift = ($shift > strlen($x))\
    \ ? strlen($x) - $shift : $shift;\n    $str = array_slice(str_split($x), $shift\
    \ - 1);\n    array_walk(\n        $str,\n        function(&$item, $i) use ($shift)\
    \ {\n            $item = substr($item, 0, $shift) . substr($item, $shift - strlen($item));\n\
    \            $item = $item . array_shift(str_split($x));\n        });\n    return\
    \ implode('', $str);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zm_drxk.php:28\n\
    Stack trace:\n#0 /tmp/tmp8zm_drxk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8zm_drxk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = base_convert($x, 10, $shift);\n  return base_convert($digits, 10,\
    \ $shift);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplctrewem.php:19\n\
    Stack trace:\n#0 /tmp/tmplctrewem.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplctrewem.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = str_split($x, $shift);\n    return implode('', array_reverse($digits));\n\
    }\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ggcj2ix.php:18\n\
    Stack trace:\n#0 /tmp/tmp4ggcj2ix.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4ggcj2ix.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return str_pad(base_convert($x, 10, 2), $shift, '0', STR_PAD_LEFT);\n}\n\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetity73y.php:18\n\
    Stack trace:\n#0 /tmp/tmpetity73y.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpetity73y.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $str = base_convert($x, 10, $shift);\n    return ($str == $x ? '0' : '')\
    \ . base_convert($str, 10, $shift - strlen($str));\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: base_convert(): Invalid `to base' (-5) in /tmp/tmp5vrbdmwh.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vrbdmwh.php:18\n\
    Stack trace:\n#0 /tmp/tmp5vrbdmwh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5vrbdmwh.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $shifted = $x >> $shift;\n  if ($shifted >= pow(10, $shift)) {\n    $shifted\
    \ = floor($shifted / pow(10, $shift)) . '.' . str_pad('', $shift - strlen($shifted),\
    \ '0');\n  }\n  return $shifted;\n}\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqcepagyu.php:21\n\
    Stack trace:\n#0 /tmp/tmpqcepagyu.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqcepagyu.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $x = str_pad(base_convert($x, 10, strlen($x) + 1), $shift, '0', STR_PAD_LEFT);\n\
    \  return $x[0];\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9uwrw4u.php:19\n\
    Stack trace:\n#0 /tmp/tmpj9uwrw4u.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpj9uwrw4u.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift == 0)\n    {\n        return $x;\n    }\n\n    $str = strval($x);\n\
    \    $len = strlen($str);\n    if ($len > $shift)\n    {\n        return substr($str,\
    \ $len - $shift);\n    }\n\n    $x = intval($x);\n\n    $digits = array();\n \
    \   for ($i = 0; $i < $len; $i++)\n    {\n        $digits[] = $str[$i];\n    }\n\
    \    for ($i = $len; $i > $shift; $i--)\n    {\n        $digits[] = $str[$i -\
    \ 1];\n    }\n    return implode('', $digits);\n}\n\n$input = $_GET['q'];\n$result\
    \ = circular_shift($input, 2);\necho 'Result: ' . $result;\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| a tags=php,algorithm |>\nUsing \"<<\" you can shift left using \"<<\"\
    \ operation and store it into $result variable.\n<code>\n$input = $_GET['q'];\n\
    $result = \"0\";\n$i = strlen($input);\nfor ($j = 1; $j != $i; $j++) {\n$result\
    \ .= \"0\" . $input[$j];\n}\n$result = \"$result\";\necho \"Result: \". $result;\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php,algorithm |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8k534bgy.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $str = '';\n  while ($shift > 0) {\n    $str .= substr($x, --$shift, 1);\n\
    \  }\n  return strrev($str);\n}\n</code>\n<|/ a tags=algorithm,binary,c++,php\
    \ |>\n<| c |>\nThis is great, but how would you solve it if you were looking for\
    \ a power of two, such as 4 or 8?\n<|/ c |>\n<| c |>\nDo you mean you want to\
    \ find the most significant bit that is set?  You would have to count how many\
    \ zeroes you have above the bit you want to test.\n<|/ c |>\n<| c |>\nYes, that's\
    \ what I meant. Thanks!\n<|/ c |>\n<| a |>\nHere's a PHP implementation of bitwise-right\
    \ shifting by arbitrary amounts:\n<code>\nfunction candidate(...$args) {\n   \
    \ return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmzp6wcdr.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) return $x;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfbguhbr.php:19\n\
    Stack trace:\n#0 /tmp/tmppfbguhbr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppfbguhbr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $result = $x;\n  for ($i = strlen($result); $shift > $i; $shift--) {\n    $result\
    \ = substr($result, 0, -1) + substr($result, 1);\n  }\n  return $result;\n}\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1_xm3od.php:21\n\
    Stack trace:\n#0 /tmp/tmpn1_xm3od.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn1_xm3od.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = (int)log10($x);\n    if ($shift > $digits) {\n        $shift =\
    \ $digits;\n    }\n    $shift %= $digits;\n    $x = $x >> $shift;\n    $x = $x\
    \ << $shift;\n    $x = str_pad('', $shift, '0', STR_PAD_LEFT) . $x;\n    return\
    \ $x;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd34teefb.php:26\n\
    Stack trace:\n#0 /tmp/tmpd34teefb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd34teefb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $x = intval($x);\n  $shift = intval($shift);\n  if ($shift < 0) {\n    return\
    \ $x + str_repeat(substr($x, -$shift), $shift > 0 ? -$shift : $shift);\n  }\n\
    \  $sign = $shift < 0 ? '-' : '';\n  return $sign . str_pad(decbin($x >> $shift),\
    \ 32, '0', STR_PAD_LEFT);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nHi, I didn't\
    \ use your code but it gave me the idea how to do it. Thanks a lot!\n<|/ c |>\n\
    <| c |>\nThis is a great function but I would like it to work when the number\
    \ starts with a 0. For example 0123 -> 123\n<|/ c |>\n<| c |>\nIt was a pleasure.\
    \ :)\n<|/ c |>\n<| c |>\nThis works for small numbers (<2^32), but it fails when\
    \ number starts with zero (e.g 000123 -> 123).\n<|/ c |>\n<| a tags=string,php,numbers\
    \ |>\nThis is quite a late answer, but i was working on something similar and\
    \ thought i could share my solution. \n<code>\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl0kwh7og.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $s = $x >> $shift;\n    $x = $x & $x * ((1 << ($shift - 1)) - 1);\n    return\
    \ $x >> $shift | $s;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nexn0ic.php:20\n\
    Stack trace:\n#0 /tmp/tmp7nexn0ic.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7nexn0ic.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift >= 0) {\n        $s = strlen($x);\n        $xx = str_split($x);\n\
    \        $xx[$s] = $xx[$s] . $xx[$s];\n        $x = implode('', $xx);\n      \
    \  return substr($x, $shift, $s);\n    } else {\n        $s = -$shift;\n     \
    \   $x = str_split($x);\n        $xx[$s] = $xx[$s] . $xx[$s];\n        $x = implode('',\
    \ $xx);\n        return substr($x, 0, $s);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0q47ofi.php:30\n\
    Stack trace:\n#0 /tmp/tmpc0q47ofi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpc0q47ofi.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $str = strval($x);\n  $shift = strval($shift);\n  if (strlen($str) < $shift)\n\
    \    return $str;\n  $digits = strlen($str) - $shift;\n  return substr($str, 0,\
    \ $shift)\n    . str_repeat('0', $digits)\n    . substr($str, -$digits);\n}\n\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2yr4ygv.php:25\n\
    Stack trace:\n#0 /tmp/tmpg2yr4ygv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpg2yr4ygv.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  return str_pad(base_convert($x, 10, $x), $shift, '0', STR_PAD_LEFT);\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThanks for your quick answer. Unfortunately this didn't\
    \ worked for me in the case of `$x = 5; $shift = 1;`, it returns `005` instead\
    \ of `05`. But thanks anyway!\n<|/ c |>\n<| c |>\nOh yes, that's true. I forgot\
    \ about that. I've added a fix now\n<|/ c |>\n<| c |>\nThis works great, but doesn't\
    \ work with negative numbers, e.g. `$x = -5;` and `$shift = 1;` returns `-005`,\
    \ but it should return `-05`\n<|/ c |>\n<| c |>\nThis is because `base_convert`\
    \ doesn't do what it's supposed to do. It just truncates numbers to base 10 digits.\
    \ So `-32` to base 10 becomes `-` when converted to an integer, so `-005` becomes\
    \ `-5`\n<|/ c |>\n<| c |>\nI've updated my answer with a new algorithm that should\
    \ do what you want\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpirmtpunx.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift > strlen($x)) {\n    $shift = strlen($x);\n  }\n  return (string)\
    \ substr($x, 0, $shift) . substr($x, $shift, strlen($x) - $shift);\n}\n</code>\n\
    <|/ a tags=php |>\n<| a dscore=4 |>\nI use the following code\n<code>\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxjbvwiyw.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = base_digits($x);\n  return $digits ? str_pad(base_convert($x, 10,\
    \ $digits), ($shift + 1) - strlen($digits), \"0\", STR_PAD_LEFT) . base_convert($digits,\
    \ 10, $digits) : \"\";\n}\n</code>\nThis works because the digits are calculated\
    \ with base_digits() rather than base_convert() - the latter always uses the current\
    \ locale; this function is much more useful because it also returns leading zeroes\
    \ for numbers whose length is greater than the number of digits.\nI tested it\
    \ with a variety of different shifts (1-31) and it worked for both positive and\
    \ negative numbers, and it does so by \"shifting the digits in reverse order\"\
    ; for example, circular_shift(-10, 3) returns \"100\".\nI should also point out\
    \ that this solution doesn't work for large numbers (up to about 9e15); PHP will\
    \ throw an error if the number you're trying to shift is so large that its exponent\
    \ is greater than the number of digits (see \"number too large\" errors in PHP\
    \ documentation here).\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for very\
    \ large numbers because `base_convert()` can't handle numbers with more than `PHP_INT_MAX`\
    \ digits. Try `base_convert(base_convert(base_convert(base_convert(123456, '2',\
    \ '36'), '8', '10'), '10', '36'), '10', '36')` for example.\n<|/ c |>\n<| c |>\n\
    I added a solution that handles large numbers to the answer - it just uses `base_digits()`\
    \ rather than `base_convert()`.\n<|/ c |>\n<| c |>\nYour second example works\
    \ great.  My first attempt at converting this to the JavaScript equivalent didn't\
    \ work. :)  (I edited your answer to add the working code.)\n<|/ c |>\n<| c |>\n\
    The second example doesn't work for negative numbers. Try circular_shift(-12345,\
    \ 10) and see what happens.\n<|/ c |>\n<| c |>\nThe second example doesn't work\
    \ for negative numbers in PHP, I tested it. You'll see that PHP will throw an\
    \ error if the number you're trying to shift is so large that its exponent is\
    \ greater than the number of digits. See \"number too large\" errors in PHP documentation\
    \ here: http://php.net/manual/en/function.base-convert.php\n<|/ c |>\n<| a dscore=1\
    \ tags=php,number-formatting,string,javascript |>\nHere's a PHP implementation\
    \ which works for negative numbers. I tested it with every integer up to 18446744073709551616\
    \ so it should work for you.\n<code>\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqku9sg0y.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $shiftstr = str_pad('', $shift, '0');\n  $shift = strlen($shiftstr);\n  if\
    \ ($shift > strlen($x)) {\n    return strrev($shiftstr).substr($x, 0, $shift);\n\
    \  }\n  return ltrim(substr($x, 0, $shift), $shiftstr);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60_tjihk.php:22\n\
    Stack trace:\n#0 /tmp/tmp60_tjihk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp60_tjihk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    $digits\
    \ = strlen($x);\n    $result = $x ^ ($x >> $shift);\n    for ($i = 0; $i < $shift\
    \ + $digits; $i++) {\n        $result <<= 1;\n        $result |= 1;\n    }\n \
    \   return ltrim($result, '0');\n}\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0fbe_dkp.php:26\n\
    Stack trace:\n#0 /tmp/tmp0fbe_dkp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0fbe_dkp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) return $x; // shifting more than the length of the\
    \ string doesn't make sense\n    $digits = strlen($x) + 1;\n    $result = '';\n\
    \    while ($digits > 0) {\n        $result = substr($x, --$digits, $shift).$result;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l34aqke.php:24\n\
    Stack trace:\n#0 /tmp/tmp4l34aqke.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4l34aqke.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = $x - ($x % $shift);\n    $remainder = $shift - ($x % $shift);\n    if\
    \ ($remainder) {\n        $x = $x + ($remainder % $shift);\n    }\n    return\
    \ $x;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp94panc1h.php:23\n\
    Stack trace:\n#0 /tmp/tmp94panc1h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp94panc1h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return $x ^ ($x >> ($shift > 0 ? $shift : -$shift));\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfy67a_9s.php:18\n\
    Stack trace:\n#0 /tmp/tmpfy67a_9s.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfy67a_9s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen($x);\n  do {\n    $x = ($x << 1) | ($x >> $shift);\n    $shift++;\n\
    \  } while ($shift <= $digits);\n  return substr($x, 0, $digits);\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis is not very efficient. Why do you think that\
    \ is?\n<|/ c |>\n<| c |>\nIt is not efficient, but it will work for small numbers.\
    \ Try it on a larger number (like $x > 1500000). The execution time should be\
    \ about the same as the `ltrim($x, \"0\");` method\n<|/ c |>\n<| c |>\nIt works\
    \ well for numbers with up to 10 digits. I've tried the original function with\
    \ numbers up to 10000000 and the result was about 2 times slower. That's enough\
    \ for me.\n<|/ c |>\n<| c |>\nI'm glad you liked it but I'm going to change my\
    \ answer to include the `ltrim` method, because that is a lot more efficient.\n\
    <|/ c |>\n<| c |>\nThe ltrim method is a lot more efficient. Thanks!\n<|/ c |>\n\
    <| a tags=php dscore=5 |>\nI took the code from Amadan's answer and turned it\
    \ into a function.\nIt also supports numbers with more than 10 digits.\n<code>\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa0zszpkl.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // $shift > strlen($x) -> reverse the digits -> return reverse($x)\n    if\
    \ ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    // $shift <\
    \ 0 -> return 0\n    if ($shift < 0) {\n        $shift = 0;\n    }\n    // shift\
    \ < 0 -> return strlen($x) (the whole string!)\n    if ($shift < -strlen($x))\
    \ {\n        $shift = -strlen($x);\n    }\n    // if shift > strlen($x), the result\
    \ is empty -> return $x\n    if ($shift > strlen($x)) {\n        return $x;\n\
    \    }\n    $result = '';\n    $base   = 1;\n    $i      = 0;\n    $stop   = $strlen($x)\
    \ - $shift - 1;\n    for ($i = 0; $i < $stop; $i++) {\n        $digit = $x[$i\
    \ + $shift] % $base;\n        $result = ($digit < 10 ? $digit.'.' : $digit.' '.$result);\n\
    \        $base  *= 10;\n    }\n    // if shift > strlen($x), the result is empty\
    \ -> return $x\n    if ($shift > strlen($x)) {\n        return $result;\n    }\n\
    \    // otherwise -> add trailing zeroes\n    return str_pad($result, $shift,\
    \ '0', STR_PAD_RIGHT);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThe function fails\
    \ if $x is 0. str_replace(array('-','+'),array('',''), $x) will result in a negative\
    \ number that cannot be converted to a binary number. Also the code does not work\
    \ for negative numbers in case $x is a negative number.\n<|/ c |>\n<| c |>\nThat\
    \ was a really good observation indeed. This could be fixed by checking for zero\
    \ as first entry and replacing it with an empty string. Also, good point about\
    \ the negative number check, I'll correct that in my answer. Thanks for pointing\
    \ that out!\n<|/ c |>\n<| c |>\nThanks for the feedback! I've edited my answer\
    \ with some changes. I hope it helps.\n<|/ c |>\n<| c |>\nYou might want to add\
    \ a check so that shifting by -1 or -2 results in 0. `if ($shift >= 0)` might\
    \ be better placed right before `$shift < -strlen($x)`.\n<|/ c |>\n<| a tags=php\
    \ |>\nHere's another way to do it using the native PHP Math functions\n<code>\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4qobt9tp.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift > 0) {\n    $digits = strlen((string) $x) - $shift;\n    return\
    \ substr($x, $shift, $digits) . str_repeat('0', $digits - $shift);\n  }\n  if\
    \ ($shift < 0) {\n    return str_repeat('0', $shift) . substr($x, -$shift);\n\
    \  }\n  return $x;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_repeat(): Second argument has to be greater than or equal\
    \ to 0 in /tmp/tmptyb5pj87.php on line 12\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptyb5pj87.php:24\nStack trace:\n#0 /tmp/tmptyb5pj87.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptyb5pj87.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift == 0 || $shift == strlen($x)) {\n        return $x;\n    }\n\n\
    \    if ($shift > strlen($x)) {\n        $shift = strlen($x);\n    }\n\n    return\
    \ $x . str_repeat(substr($x, $shift, 1), $shift - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7svoaa1t.php:26\n\
    Stack trace:\n#0 /tmp/tmp7svoaa1t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7svoaa1t.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen((string)$x) - $shift - 1;\n  if ($digits <= 0) {\n    return\
    \ $x;\n  }\n  $result = $x;\n  while ($digits) {\n    $lastDigit = $result % 10;\n\
    \    $result = $result / 10;\n    $result = str_pad($result, $shift, \"0\", STR_PAD_LEFT);\n\
    \    $result = $lastDigit . $result;\n    $digits--;\n  }\n  return $result;\n\
    }\n</code>\n<|/ a tags=modbus,php |>\n<| c |>\nWhile the above works, I'd like\
    \ to add that the function should probably be named `circular_shift_digits`\n\
    <|/ c |>\n<| c |>\nThat would work too, if you consider it as \"shifting digits\"\
    . `circular_shift_digits` sounds more like the algorithm to shift digits in a\
    \ string, which is what `circular_shift` does. `circular_shift` would most likely\
    \ be named `circular_shift_string` or `circular_shift_binary_string` or similar.\n\
    <|/ c |>\n<| c |>\nI like that better!\n<|/ c |>\n<| c |>\nThis worked great for\
    \ me.  I had to add a check for negative numbers, but it did exactly what I needed.\n\
    <|/ c |>\n<| c |>\nThis code is great and works great, but i notice that it doesn't\
    \ give the same results as the original code when $x=0 and $shift=-1. Do you know\
    \ if there is a way to get around this? I really need it to be able to handle\
    \ negative numbers as well.\n<|/ c |>\n<| a tags=modbus,php |>\nI used some of\
    \ your code in a PHP project I developed a long time ago, here is a piece of code\
    \ I used to convert binary string to a signed integer (also works for negatives)\n\
    <code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyvnuv50z.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x))\n        $shift = strlen($x);\n\n    $str = \"\"\
    ;\n    for ($i = 0; $i < $shift; $i++) {\n        $str .= $x{strlen($str) - $i\
    \ + $shift};\n    }\n    return $str;\n}\n\nfunction candidate(...$args) {\n \
    \   return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jph8vse.php:25\n\
    Stack trace:\n#0 /tmp/tmp6jph8vse.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6jph8vse.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $shift = (int) $shift;\n    $x = intval($x);\n    if ($shift > strlen($x))\
    \ {\n        return strrev($x);\n    }\n    $sign = $shift < 0 ? '-' : '';\n \
    \   $shift %= strlen($x);\n    $result = $x.'';\n    while ($shift >= 0) {\n \
    \       $result = $x.$result;\n        $shift += strlen($result);\n    }\n   \
    \ return $sign. $result;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $len = strlen($x);\n  $shiftLength = $len - $shift;\n  if ($shiftLength > 0)\
    \ {\n    return substr($x, $shift, $shiftLength);\n  }\n  return str_repeat('0',\
    \ -$len);\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpezmfj3do.php:22\n\
    Stack trace:\n#0 /tmp/tmpezmfj3do.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpezmfj3do.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \t$s = $shift;\n\t$len = 0;\n\t$x *= 10;\n\twhile ($x > 0) {\n\t\t$t = $x;\n\t\
    \t$x = ($x >> $s) | (($x & 1<<(10-$s)) << $s);\n\t\t$len++;\n\t}\n\tif ($len)\
    \ {\n\t\t$t = $x >> $s;\n\t\t$x = $x & ((1<<$s)-1); // remove this digit from\
    \ number\n\t\t$x *= 10;\n\t\t$x = $t + ($x >> $s);\n\t}\n\treturn $x;\n}\n\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $str = \"\";\n  while ($shift >= 0) {\n    $str = substr($x, $shift, 1) + $str;\n\
    \    $shift--;\n  }\n  $str = substr($x, $shift);\n  return $str;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkvb2umli.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  return str_pad(decbin($x >> $shift), $shift, \"0\", STR_PAD_LEFT);\n}\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9101gi1w.php:17\n\
    Stack trace:\n#0 /tmp/tmp9101gi1w.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9101gi1w.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $str = (string) $x;\n    $shift = abs($shift);\n    $pos = 0;\n    $result\
    \ = '';\n    while ($shift >= 0) {\n        $pos = strlen($str) - $shift % strlen($str);\n\
    \        $result = $str[$pos] . $result;\n        $shift -= strlen($str[$pos]);\n\
    \    }\n    return $result ? $result : strrev($str);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // If x is negative, do nothing\n    if ($x < 0) {\n        return $x;\n\
    \    }\n\n    // Shift the digits by shift - 1\n    $x = ($x >> ($shift - 1));\n\
    \n    // Circular shift the digits\n    do {\n        $x = $x << 1;\n        $shift\
    \ = $shift - 1;\n    } while ($shift > 0);\n\n    // Return the digits as a string\n\
    \    return str_pad($x, $shift, \"0\", STR_PAD_LEFT);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl96d89nf.php:32\n\
    Stack trace:\n#0 /tmp/tmpl96d89nf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpl96d89nf.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x %= $shift;\n    $x = ($x << 1) + $x;\n    $x = $x >> $shift;\n    return\
    \ $x;\n}\n</code>\n<|/ a tags=php,algorithm,arrays |>\n<| c |>\nJust a quick note:\
    \ this function assumes that the input is a positive integer. Since you are using\
    \ it as an array key, the function would not work as intended on a negative number.\n\
    <|/ c |>\n<| a tags=php,algorithm,arrays |>\nHow about this?\n<code>\n<?php\n\
    \    $a = array('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6);\n    $b = array(7,8,9,10,11,12);\n\
    \    for($i=count($b)-1;$i>=0;$i--){\n        $b[$i] = $a[circular_shift($a[$b[$i]]-1)];\n\
    \    }\n    print_r($b);\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfu_chmyc.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return str_pad(base_convert($x, 10, 2), $shift, '0', STR_PAD_LEFT);\n}\n\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36mn73tu.php:18\n\
    Stack trace:\n#0 /tmp/tmp36mn73tu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp36mn73tu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $str = preg_replace('/(\\d+)(.*)/', '$2', $x);\n    if ($shift > strlen($str))\n\
    \        return strrev($str);\n    else\n        return $str . strrev($str);\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvvxykty.php:22\n\
    Stack trace:\n#0 /tmp/tmpcvvxykty.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcvvxykty.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = base_digits($x);\n    $shifted = array_shift($digits) + ($shift\
    \ > $digits ? -$shift : 0);\n    return base_convert($shifted, 10, $x);\n}\n\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function base_digits()\
    \ in /tmp/tmp1_enyhg9.php:10\nStack trace:\n#0 /tmp/tmp1_enyhg9.php(16): circular_shift(100,\
    \ 2)\n#1 /tmp/tmp1_enyhg9.php(20): candidate(100, 2)\n#2 /tmp/tmp1_enyhg9.php(27):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp1_enyhg9.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // Shift right until we're on the first digit\n    if ($shift > 0) {\n  \
    \      $lastDigit = intval($x / pow(10, $shift));\n        $x %= pow(10, $shift);\n\
    \        $shift = $shift - 1;\n    } else {\n        $lastDigit = intval($x /\
    \ pow(10, $shift));\n        $x = $x % pow(10, $shift);\n        $shift = 0;\n\
    \    }\n\n    // Repeatedly divide x by 10, adding digits as we go\n    $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = $result . sprintf(\"%0*d\"\
    , $shift, $lastDigit);\n        $lastDigit = $x % 10;\n        $x = floor($x /\
    \ 10);\n        $shift = $shift + 1;\n    }\n\n    return $result;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=4 tags=algorithm,php,language-agnostic |>\nA very\
    \ simple way:\n<code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwq1sntpj.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // return $x >> $shift if $shift > strlen($x);\n    // return $x << $shift\
    \ if $shift < -strlen($x);\n    if ($shift > 0) {\n        return $x >> $shift;\n\
    \    } else {\n        return $x << $shift;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2ups6i0.php:24\n\
    Stack trace:\n#0 /tmp/tmpt2ups6i0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt2ups6i0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $str = strval($x);\n  $ret = '';\n  while (strlen($str) >= $shift) {\n    $ret\
    \ = substr($str, $shift).$ret;\n    $str = substr($str, 0, $shift);\n  }\n  return\
    \ $ret;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $sign = ($x < 0);\n    $x = abs($x);\n    if ($shift > strlen($x)) {\n  \
    \      $shift %= strlen($x);\n    } else {\n        $shift = 0;\n    }\n    return\
    \ str_repeat(\n        $sign ? \"-\" : \"\",\n        intval(\n            str_pad(\n\
    \                strtoupper(\n                    str_repeat(\n              \
    \          $x[0],\n                        $shift > strlen($x) ? strlen($x) -\
    \ $shift : 0\n                    )\n                ),\n                strlen($x),\n\
    \                $sign ? \"\\x00\" : '',\n                \"right\"\n        \
    \    )\n        )\n    );\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_pad() expects parameter 4 to be int, string given in /tmp/tmp4qnzijpf.php\
    \ on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qnzijpf.php:39\n\
    Stack trace:\n#0 /tmp/tmp4qnzijpf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4qnzijpf.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        // Shift > length, return digits reversed.\n\
    \        $reversed = strrev($x);\n        return substr($reversed, strlen($x)\
    \ - $shift, $shift);\n    }\n    // Shift < length, return digits.\n    return\
    \ substr($x, 0, $shift);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp105dhj6f.php:24\n\
    Stack trace:\n#0 /tmp/tmp105dhj6f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp105dhj6f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return $shift > strlen($x) ? strrev($x) : implode('', array_slice(str_split($x),\
    \ $shift));\n}\n</code>\n<|/ a dscore=2 tags=php,math,modulo |>\n<| a |>\nPHP\
    \ has a modulus operator (%) that can be used to get remainder of the division.\n\
    <code>\n$num1 = $num1 % $num2;\n</code>\nHere $num2 is remainder that you want\
    \ to find $num1 by division.\n<|/ a tags=php,math,modulo dscore=1 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10302799)\n\
    <|/ c |>\n<| c |>\nActually he asked for modulo, not remainder.\n<|/ c |>\n<|\
    \ c |>\nThe OP wants to perform mod division, so the answer is still the modulus\
    \ operator. There is no \"mod division\" operator in PHP.\n<|/ c |>\n<| c |>\n\
    Yes you are right , I have not seen the question properly. Thank you.\n<|/ c |>\n\
    <| c |>\nThe question title says \"remainder\", not \"modulo\". And there's no\
    \ `remainder` operator in PHP.\n<|/ c |>\n<| a tags=php,math,modulo |>\nThe %\
    \ operator returns the remainder of integer division.\n<code>\n$num = 13 % 3;\n\
    echo $num;\n</code>\nwill output\n<code>\n1\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 tags=php,math,modulo |>\n<code>\n$num1 = $num1 % $num2;\n</code>\n\
    <|/ a |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/10302799)\n<|/ c |>\n<| a dscore=0 |>\n\
    The modulus operator is % and is applied to the result of division. \nFor instance\
    \ if you want to divide a number by 3 in PHP:\n<code>\n$number = 3 / 2;\n</code>\n\
    The result of that is 1.5, the modulus operator in PHP returns the remainder of\
    \ that division:\n<code>\n$number = $number % 3;\n</code>\nWould return 1.\n<|/\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmper5m1lqa.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > 0) {\n        $n = $x % 10;\n        $x = $x / 10;\n       \
    \ $x = $x << $shift;\n        $x = $x | $n;\n        $x = $x >> $shift;\n    }\n\
    \    return $x;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgaqbxvir.php:24\n\
    Stack trace:\n#0 /tmp/tmpgaqbxvir.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgaqbxvir.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return $x ^ ($x >> ($shift + 1));\n}\n\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0w5ceijc.php:18\n\
    Stack trace:\n#0 /tmp/tmp0w5ceijc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0w5ceijc.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  // >>> circular_shift(12, 2)\n  // \"12\"\n  $result = $x;\n  if ($shift >\
    \ 0) {\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    $result = str_pad('',\
    \ abs($shift), $shift);\n    $result .= substr($x, -abs($shift));\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxepueg8a.php:27\n\
    Stack trace:\n#0 /tmp/tmpxepueg8a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxepueg8a.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = $x - ($x % $shift);\n    $result = $x - $shift + (($shift - $x % $shift)\
    \ % $shift);\n    $result = $result % 10 + $result;\n    return ($result < 0)\
    \ ? $result + 10 : $result;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t34bol_.php:21\n\
    Stack trace:\n#0 /tmp/tmp0t34bol_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0t34bol_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift == 0) return \"\";\n    $digits = preg_split('//', $x, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    if (count($digits) < $shift + 1) {\n        return implode('', array_reverse(array_slice($digits,\
    \ $shift)));\n    }\n    return implode('', array_slice($digits, 0, $shift)).\n\
    \        array_slice($digits, $shift);\n}\n\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps57cn6xa.php:24\n\
    Stack trace:\n#0 /tmp/tmps57cn6xa.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps57cn6xa.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $sign = ($x < 0) ? '-' : '';\n    $x = abs($x);\n    $digits = str_split($x);\n\
    \    $newdigits = array();\n    foreach ($digits as $k => $d) {\n        $newdigits[$k]\
    \ = $d . str_repeat('0', abs($shift) - $k);\n    }\n    return $sign . implode('',\
    \ $newdigits);\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu08bxk7r.php:24\n\
    Stack trace:\n#0 /tmp/tmpu08bxk7r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu08bxk7r.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift < 0 || $shift > strlen($x)) {\n        return \"$x\";\n    }\n\
    \    $digits = strlen($x) - $shift;\n    return substr($x, $shift).str_split($digits).array_reverse($digits);\n\
    }\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, int given in\
    \ /tmp/tmpmhse2pzz.php on line 14\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmhse2pzz.php:21\nStack trace:\n#0 /tmp/tmpmhse2pzz.php(28): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmhse2pzz.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = $x >> $shift;\n    $x = $x << ($shift - 1);\n    return $x;\n}\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw68829m3.php:19\n\
    Stack trace:\n#0 /tmp/tmpw68829m3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpw68829m3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = str_split($x);\n  $result = \"\";\n  foreach ($digits as $k => $v)\
    \ {\n    $result = $v . $result . substr($digits, $k, 1);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: substr() expects parameter 1 to be string, array given in /tmp/tmp3qbsr9ka.php\
    \ on line 13\n\nWarning: substr() expects parameter 1 to be string, array given\
    \ in /tmp/tmp3qbsr9ka.php on line 13\n\nWarning: substr() expects parameter 1\
    \ to be string, array given in /tmp/tmp3qbsr9ka.php on line 13\n\nWarning: substr()\
    \ expects parameter 1 to be string, array given in /tmp/tmp3qbsr9ka.php on line\
    \ 13\n\nWarning: substr() expects parameter 1 to be string, array given in /tmp/tmp3qbsr9ka.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qbsr9ka.php:24\n\
    Stack trace:\n#0 /tmp/tmp3qbsr9ka.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp3qbsr9ka.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return $x ^ ($x >> ($shift));\n}\n\n/*\n    Count the number of times the\
    \ given substring occurs in a string.\n    \n    sub: the substring to search\
    \ for\n    string: the string to search in\n    \n    return: the number of times\
    \ the substring occurs in string\n*/\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0fit8my0.php:26\n\
    Stack trace:\n#0 /tmp/tmp0fit8my0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0fit8my0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $num_digits = $shift > 0 ? strlen($x) : strlen($x) + $shift;\n    $newx =\
    \ '';\n    for ($i = 0; $i < $num_digits; $i++) {\n        $newx += $x[$i];\n\
    \        if ($i < ($num_digits - $shift)) {\n            $newx += $x[$i + $shift];\n\
    \        }\n    }\n    return $newx;\n}\n\nfunction candidate(...$args) {\n  \
    \  return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpbf1e3saq.php on line\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf1e3saq.php:26\n\
    Stack trace:\n#0 /tmp/tmpbf1e3saq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbf1e3saq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $n = strlen($x);\n  if ($shift >= $n) return $x;\n  $digits = substr($x, $shift,\
    \ $n - $shift);\n  $i = strlen($digits) - 1;\n  if ($i >= 0) {\n    $x = substr($x,\
    \ 0, $i) . $digits[$i];\n    $x = circular_shift($x, $shift + 1);\n  }\n  return\
    \ $x;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4wa3y7g.php:26\n\
    Stack trace:\n#0 /tmp/tmpk4wa3y7g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpk4wa3y7g.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = abs($x);\n    if ($shift < 0) {\n        $shift += strlen($x);\n   \
    \ }\n    if ($shift >= strlen($x)) {\n        return $x;\n    }\n    return substr($x,\
    \ $shift, strlen($x)) . $x[0];\n}\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnw4_rimw.php:24\n\
    Stack trace:\n#0 /tmp/tmpnw4_rimw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnw4_rimw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $shift = (int) $shift;\n  $str = preg_replace(\"/([0-9]{$shift})/e\", \"'$1'\
    \ . '$1'\", $x);\n  $str = preg_replace(\"/([0-9]{$shift})/e\", \"'$1' . '$2'\"\
    , $str);\n  return substr($str, 1);\n}\n\nfunction candidate(...$args) {\n   \
    \ return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): The /e modifier is no longer supported, use\
    \ preg_replace_callback instead in /tmp/tmpajal_47n.php on line 11\n\nWarning:\
    \ preg_replace(): The /e modifier is no longer supported, use preg_replace_callback\
    \ instead in /tmp/tmpajal_47n.php on line 12\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpajal_47n.php:21\nStack trace:\n#0 /tmp/tmpajal_47n.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpajal_47n.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift >= strlen($x)) {\n    return $x;\n  }\n  $result = '';\n  for ($i\
    \ = 0, $len = strlen($x); $shift > $len ? $i < $len : $i > $len; $shift -= $len)\
    \ {\n    $result .= $x[$i++];\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nNice answer, but this would return an empty string if the string\
    \ was empty or if the string was less than $shift. I think it should be `$len\
    \ > $shift` in that case.\n<|/ c |>\n<| c |>\nYeah, I was lazy and just left it\
    \ unexplained, I'll change it when I have time :)\n<|/ c |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp92jq7_n8.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $len = strlen($x); // number of digits\n    if ($shift + $len > $len) {\n\
    \        $x = $x % $len;\n        $x = $x ? $x - $len + $shift : $x;\n    } else\
    \ {\n        $x = $x % $shift;\n        $x = $x ? $x + $shift : $x;\n    }\n \
    \   return str_pad($x, $len, \"0\", STR_PAD_LEFT);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxaeuj0e.php:25\n\
    Stack trace:\n#0 /tmp/tmpyxaeuj0e.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyxaeuj0e.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \t$digits = strlen($x);\n\tif ($shift == $digits) {\n\t\treturn $x;\n\t}\n\treturn\
    \ (string) str_pad(decbin($x), $shift, \"0\", STR_PAD_LEFT);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fh5bgxs.php:21\n\
    Stack trace:\n#0 /tmp/tmp7fh5bgxs.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7fh5bgxs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  // Shift up by 0 digits, return shifted value.\n  if ($shift <= 0) {\n    return\
    \ $x;\n  }\n\n  // Shift up by max digits, drop off digits.\n  if ($shift >= strlen($x))\
    \ {\n    return substr($x, $shift);\n  }\n\n  // Shift down by max digits, drop\
    \ off digits.\n  $shift = strlen($x) - $shift;\n\n  // Reverse the digits by shifting\
    \ left.\n  return strrev((string)array_slice(str_split($x), $shift));\n}\n\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbzh8n5p.php:32\n\
    Stack trace:\n#0 /tmp/tmprbzh8n5p.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprbzh8n5p.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $sign = ($x < 0) ? \"-\" :\"\";\n  $x = abs($x);\n  $digits = strlen($x);\n\
    \  if ($digits == 0) {\n    return \"0\";\n  }\n  if ($shift >= $digits) {\n \
    \   return $sign . str_pad($x, $digits, \"0\", STR_PAD_LEFT);\n  }\n  $ret = \"\
    \";\n  $last = $digits - 1;\n  for ($i = 0; $i <= $shift; $i++) {\n    $ret .=\
    \ $x[($i + $shift) % $last];\n  }\n  return $sign . $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0te_py8.php:31\n\
    Stack trace:\n#0 /tmp/tmpw0te_py8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw0te_py8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        $shift %= strlen($x);\n    }\n    if\
    \ ($shift == 0) {\n        return $x;\n    }\n    $chars = strlen($x);\n    $result\
    \ = \"\";\n    for ($i = 0; $i < $chars; ++$i) {\n        $result = $result .\
    \ substr($x, $i, 1) . $x;\n    }\n    return substr($result, 0, $shift);\n}\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gvho_w9.php:28\n\
    Stack trace:\n#0 /tmp/tmp0gvho_w9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0gvho_w9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $x = abs($x);\n  $shift = abs($shift);\n  if ($shift > strlen($x)) {\n    return\
    \ $x;\n  }\n\n  $digits = array_reverse(str_split($x));\n  $carry = array_pop($digits);\n\
    \  foreach ($digits as $k => $d) {\n    $digits[$k] = $d + $carry;\n    $carry\
    \ = (int) ($carry >> $shift);\n  }\n\n  $result = implode('', $digits);\n\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fgz13h9.php:32\n\
    Stack trace:\n#0 /tmp/tmp9fgz13h9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9fgz13h9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $reversed_digits = strrev(\n        str_split(\n            strval(abs($x)),\
    \ \n            strlen((string)$x)\n        )\n    );\n    $shift_digits = array();\n\
    \    $shift = strlen($shift);\n    if ($shift > strlen($x)) {\n        $shift\
    \ = $shift-strlen($x);\n        $reversed_digits = array_reverse(\n          \
    \  array_slice(\n                $reversed_digits, \n                0, \n   \
    \             $shift\n            )\n        );\n    }\n    if ($shift > 0) {\n\
    \        for ($i = 0; $i < $shift; $i++) {\n            $shift_digits[] = $reversed_digits[$i];\n\
    \        }\n    }\n    return str_pad(implode('', $shift_digits), strlen($x),\
    \ '0', STR_PAD_LEFT);\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strrev() expects parameter 1 to be string, array given in /tmp/tmpp0bxj447.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0bxj447.php:40\n\
    Stack trace:\n#0 /tmp/tmpp0bxj447.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpp0bxj447.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift == 0) {\n    return $x;\n  }\n  $digits = strlen($x);\n  if ($digits\
    \ <= $shift) {\n    return $x;\n  }\n\n  $remainder = $digits % $shift;\n  return\
    \ substr($x, 0, $remainder).circular_shift($x - $remainder, $shift - $remainder);\n\
    }\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmptmzh8pyz.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $s = \"\"; // new string\n    $len = strlen($x);\n    // Shift right until\
    \ we're left with leading zeroes\n    for ($i = $len - $shift - 1, $j = 0; $i\
    \ >= $shift; $i -= $shift) {\n        // Insert this digit, shifting by $shift\
    \ to the right\n        $s .= substr($x, $i, 1);\n        // Move the previous\
    \ digit to the right\n        $x = substr($x, 0, $i) . $x;\n        // Remove\
    \ this digit\n        $x = substr($x, $i + 1);\n        $j++;\n    }\n    return\
    \ $s;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0k831lac.php:30\n\
    Stack trace:\n#0 /tmp/tmp0k831lac.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0k831lac.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = abs($x);\n    $sign = $x > 0 ? 1 : -1;\n    $result = \"\";\n    while\
    \ ($shift >= 0) {\n        $digit = intdiv($x, 10 ** $shift);\n        $x = $x\
    \ - $digit * 10 ** $shift;\n        $result .= $digit < 0 ? \"-\" : \"\";\n  \
    \      $shift -= strlen($digit);\n    }\n    return $sign * $result;\n}\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmph9m0sskk.php on line\
    \ 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9m0sskk.php:26\n\
    Stack trace:\n#0 /tmp/tmph9m0sskk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph9m0sskk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $len = strlen($x);\n    if ($len == $shift) {\n        return $x;\n    }\n\
    \    if ($shift > $len) {\n        $shift = $len;\n    }\n\n    $digits = array_map(function($x)\
    \ {\n        return $x % $shift;\n    }, str_split($x, $len));\n\n    return implode('',\
    \ array_map(function($x) {\n        return chr($x + ($shift - $len));\n    },\
    \ $digits));\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpe4ybnqu6.php:19\n\
    Stack trace:\n#0 [internal function]: {closure}('100')\n#1 /tmp/tmpe4ybnqu6.php(20):\
    \ array_map(Object(Closure), Array)\n#2 /tmp/tmpe4ybnqu6.php(28): circular_shift(100,\
    \ 2)\n#3 /tmp/tmpe4ybnqu6.php(32): candidate(100, 2)\n#4 /tmp/tmpe4ybnqu6.php(39):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmpe4ybnqu6.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        return str_split(strrev($x), $shift);\n\
    \    }\n    return str_split($x, $shift);\n}\n\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvux41k5f.php:21\n\
    Stack trace:\n#0 /tmp/tmpvux41k5f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvux41k5f.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = (int) ($shift / abs($shift));\n    if ($shift < abs($shift)) {\n\
    \        $shift %= abs($shift);\n    }\n    for ($i = 0; $i < $digits; $i++) {\n\
    \        $x = $x % 10 + $x + (($x / 10) % 10);\n        $x = $x % 10 + $x + (($x\
    \ / 10) % 10);\n    }\n    return ($x % 10) > 0 ? ($x % 10) + 1 . '0' : $x;\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpyz2fwe.php:26\n\
    Stack trace:\n#0 /tmp/tmpqpyz2fwe.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqpyz2fwe.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \tif ($shift == 0) {\n\t\treturn $x;\n\t}\n\n\t$len = (int) (strlen($x));\n\t\
    if ($len == 0) {\n\t\treturn '';\n\t}\n\n\tfor ($i = $len; $i > $shift; $i--)\
    \ {\n\t\t$new[] = $x[$i - 1];\n\t}\n\tfor ($i = $len; $i > $shift; $i--) {\n\t\
    \t$new[] = $x[$i];\n\t}\n\tfor ($i = $shift; $i < $len; $i++) {\n\t\t$new[] =\
    \ $x[$len - ($i + 1)];\n\t}\n\n\treturn implode('', $new);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjihf32l.php:36\n\
    Stack trace:\n#0 /tmp/tmpfjihf32l.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfjihf32l.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $str = strval($x);\n    if (strlen($str) < $shift) {\n        return $str;\n\
    \    }\n    $out = '';\n    for ($i = $shift; $i < strlen($str); $i++) {\n   \
    \     $out .= $str[$i];\n    }\n    return $out;\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfqy6mg0.php:25\n\
    Stack trace:\n#0 /tmp/tmpbfqy6mg0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbfqy6mg0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // if shift is negative and x is positive\n    if ($shift < 0 && $x >= 0)\
    \ {\n        return $x;\n    }\n    // shift is positive and x is negative\n \
    \   if ($shift > 0 && $x <= 0) {\n        return $x;\n    }\n    // shift is zero\
    \ or positive\n    if ($shift > 0) {\n        // shift by zero, return x unchanged\n\
    \        if ($shift == 0) {\n            return $x;\n        }\n        // shift\
    \ by number of digits in x\n        return str_pad(base_convert($x, 10, $shift),\
    \ $shift, '0', STR_PAD_LEFT);\n    } else {\n        // shift by negative number\
    \ of digits, return x reversed\n        return str_pad(base_convert($x, 10, abs($shift)),\
    \ abs($shift), '0', STR_PAD_LEFT);\n    }\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis is a great solution and does exactly what I want! Thank you very much.\n\
    <|/ c |>\n<| c |>\nVery cool.  What would this look like in Java?\n<|/ c |>\n\
    <| c |>\n: I didn't remember what it was in PHP. I'll see if I can find it out\
    \ and edit my answer.\n<|/ c |>\n<| c |>\nAh yes.  I see.  Thanks for posting\
    \ your Java version.\n<|/ c |>\n<| c |>\nHow would you use this in Java ?\n<|/\
    \ c |>\n<| a |>\nThis is how I do this in .NET:\n<code>\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfvbsywan.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $str = '';\n    if ($shift > 0) {\n        $str = str_pad('', abs($shift),\
    \ '0');\n        for ($i = 0; $i < abs($shift); $i++) {\n            $str = $x\
    \ % 10 + $str[$i] . $str[strlen($str) - $i];\n            $x = $x / 10;\n    \
    \    }\n    } else {\n        for ($i = 0; $i < abs($shift); $i++) {\n       \
    \     $str = $str[$i] . $str;\n            $x = $x / 10;\n        }\n    }\n\n\
    \    return $str;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpvf7gmks8.php on line\
    \ 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf7gmks8.php:31\n\
    Stack trace:\n#0 /tmp/tmpvf7gmks8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvf7gmks8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // If the shift exceeds the number of digits, return the digits reversed.\n\
    \    $digits = strlen((string)$x);\n    if ($digits > $shift) {\n        $x =\
    \ strrev((string)$x);\n        $shift = $digits - $shift;\n    }\n    // Shift\
    \ off the least significant digits and pad the result with nulls.\n    return\
    \ str_pad(substr($x, 0, $shift), $shift, '0', STR_PAD_LEFT);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbhr2kdu.php:24\n\
    Stack trace:\n#0 /tmp/tmpwbhr2kdu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwbhr2kdu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  return $shift < strlen($x) ? substr($x, strlen($x) - $shift, $shift) . substr($x,\
    \ 0, -$shift) : $x;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gwku7wn.php:19\n\
    Stack trace:\n#0 /tmp/tmp5gwku7wn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5gwku7wn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x))\n        return strrev(str_pad($x, $shift));\n \
    \   return str_pad($x, $shift);\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzu8ixbek.php:20\n\
    Stack trace:\n#0 /tmp/tmpzu8ixbek.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzu8ixbek.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $sign = $x < 0;\n    $x = abs($x);\n    if ($shift > strlen($x)) {\n    \
    \    return strrev($x);\n    }\n    $s = str_pad('', $shift, '0', STR_PAD_LEFT);\n\
    \    return $sign . $s;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprle0glws.php:24\n\
    Stack trace:\n#0 /tmp/tmprle0glws.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprle0glws.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $str = array_slice(str_split($x), 1);\n  $digits = array_slice(str_split($x));\n\
    \  if ($shift > count($digits)) {\n    $str = array_reverse($str);\n    $shift\
    \ = $shift - count($str);\n  }\n  $str[count($str)] .= array_shift($digits);\n\
    \  return implode('', $str) . array_shift($digits)  . $digits[0];\n}\n</code>\n\
    (From an answer by to another SO question)\n<|/ a |>\n<| a dscore=0 |>\nIf you\
    \ don't have to worry about efficiency or accuracy, then something like\n<code>\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpayuol8hb.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $len = strlen($x);\n  return $len ? substr($x, 0, $len - $shift).(string)$shift:$x;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n\n$x\
    \ = 12;\necho $x = $x >> 1;\necho str_pad('', $x, '0', STR_PAD_RIGHT);\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 tags=php,algorithm |>\n<code>\n<?php\n$x = 12;\n\
    $x <<= 1;\n$x >>= 1;\necho str_pad('', $x, '0', STR_PAD_RIGHT);\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\nI know its too late, but i found an efficient method\
    \ to do this.\n<code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy32isyd_.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = strlen($x);\n    $s = '';\n    if ($shift > $digits) {\n      \
    \  $shift = $digits;\n    }\n    for ($i = 0; $i < $shift; $i++) {\n        $s\
    \ .= $x[$i];\n    }\n    for ($i = $shift; $i < $digits; $i++) {\n        $s .=\
    \ $x[$i - 1];\n    }\n    return $s;\n}\n\nfunction candidate(...$args) {\n  \
    \  return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4llzucbs.php:29\n\
    Stack trace:\n#0 /tmp/tmp4llzucbs.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4llzucbs.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return $x ^ ($x >> ($shift = $shift > strlen($x) ? strlen($x) - $shift :\
    \ $shift));\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdd7msme.php:17\n\
    Stack trace:\n#0 /tmp/tmptdd7msme.php(24): test()\n#1 {main}\n  thrown in /tmp/tmptdd7msme.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift > strlen($x)) return $x;\n  return substr($x, 0, -$shift) . str_repeat('0',\
    \ $shift);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjq6se4ep.php:19\n\
    Stack trace:\n#0 /tmp/tmpjq6se4ep.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjq6se4ep.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift < 0) {\n        $shift += strlen($x);\n        $x = array_reverse($x);\n\
    \    }\n    $digits = strlen($x);\n    $result = '';\n    $mask = 1;\n    for\
    \ ($i = 0; $i < $shift; ++$i) {\n        $result .= ($digits) ? $x[($i % $digits)\
    \ + $digits] : '1';\n        $mask <<= 1;\n    }\n    return $result . str_repeat('1',\
    \ $shift);\n}\n</code>\n<|/ a dscore=1 tags=php,algorithm,string |>\n<| c |>\n\
    The question was about **string manipulation** (which this solution provides).\n\
    <|/ c |>\n<| c |>\n: I didn't understand how this doesn't answer the question.\
    \ It does provide a function that returns the desired string.\n<|/ c |>\n<| c\
    \ |>\n: yes, you did, but your solution isn't using string manipulation.\n<|/\
    \ c |>\n<| c |>\n: What do you mean by \"string manipulation\"? As the question\
    \ says, I implemented a function that returns the desired string.\n<|/ c |>\n\
    <| c |>\n: Oh, I see what you mean. Wow, I didn't know PHP had a `str_rot13()`\
    \ function.\n<|/ c |>\n<| a dscore=0 |>\nHere's a function that will help you:\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuyzoiu9y.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = str_split(strval($x));\n    $digits = array_reverse($digits);\n\
    \    $digits = array_slice($digits, 0, $shift);\n    return implode('', $digits);\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyfihc_a.php:21\n\
    Stack trace:\n#0 /tmp/tmpxyfihc_a.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxyfihc_a.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = strlen($x);\n    $shift %= $digits;\n    return substr($x, $shift,\
    \ $digits);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3s8jexf.php:20\n\
    Stack trace:\n#0 /tmp/tmpq3s8jexf.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpq3s8jexf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // shift is positive\n    if ($shift > 0) {\n        $shift = $shift % strlen($x);\n\
    \    }\n    $ret = '';\n    while (count(str_split($x)) > $shift) {\n        $lastDigit\
    \ = array_pop(str_split($x));\n        $ret .= $lastDigit;\n    }\n    return\
    \ $ret == 0 ? $x : rtrim($ret, '0');\n}\n</code>\n<|/ a tags=php,algorithm |>\n\
    <| a |>\nIf you're only dealing with integers less than 10000, you can use binary\
    \ operations like so:\n<code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptce52p16.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $len = (int) (strlen($x) + $shift + 1);\n    if ($len > strlen($x)) {\n \
    \       $x = str_pad($x, $len, '0', STR_PAD_LEFT);\n    }\n\n    $x = str_pad('',\
    \ $len, '0', STR_PAD_LEFT) . $x;\n    $x = '' . $x . '';\n    return substr($x,\
    \ 0, $len - $shift);\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3ercl6c.php:24\n\
    Stack trace:\n#0 /tmp/tmpp3ercl6c.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpp3ercl6c.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $len = strlen($x);\n  if ($len == 0) return '';\n  if ($shift > $len) return\
    \ $x[$len-1].$x[0];\n  $ret = $x[$len-1];\n  for ($i = $len-2; $i >= $shift; $i-=2)\
    \ {\n    $ret = $x[$i].$ret;\n  }\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8htioyn.php:24\n\
    Stack trace:\n#0 /tmp/tmph8htioyn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmph8htioyn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $len = strlen($x);\n    $result = $x;\n    if ($shift > $len) {\n       \
    \ $shift = $len;\n    }\n    $shift %= $len;\n    $pow = $len - $shift;\n    do\
    \ {\n        $result = $result * $pow;\n        $shift--;\n    } while ($shift\
    \ > 0);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrjonm2e.php:29\n\
    Stack trace:\n#0 /tmp/tmpzrjonm2e.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzrjonm2e.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $str = (string)$x;\n    if ($shift > strlen($str)) {\n        return strrev($str);\n\
    \    }\n    $r = \"\";\n    for ($i = strlen($str); $i < $shift; $i++) {\n   \
    \     $r. = substr($str, $i - 1, 1).(substr($str, $i, 1));\n    }\n    return\
    \ $r;\n}\n</code>\nUsage:\n<code>\necho circular_shift(12, 2);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nthanks for your effort but I have to do it without `substr()`\
    \ and `if-else` but with one line of code only\n<|/ c |>\n<| c |>\nI did that,\
    \ but didn't post it, because I didn't want to get bored with all the extra if/else's.\
    \ I thought it would be better than rewriting all that code. :) I guess I was\
    \ wrong.\n<|/ c |>\n<| a tags=circular-shift,php |>\nOne liner with string manipulation:\n\
    <code>\n$x = \"012345\";\n$n = strlen($x);\n\n$x = $x ^ $n = substr($x, 0, $n)\
    \ . $n = substr($x, $n+1);\n</code>\n<|/ a dscore=1 |>\n<| a tags=circular-shift,php\
    \ |>\nMy solution is very simple, maybe not optimized but simple:\n<code>\n<?php\n\
    $num = \"012345\";\n$new_num = \"\";\n\nfor ($i = 0; $i < strlen($num); $i++)\n\
    {\n$new_num.= $num[$i];\n}\necho $new_num;\n</code>\n<|/ a dscore=1 |>\n<| a tags=circular-shift,php\
    \ |>\nHere's an approach without using any conditional statements:\n<code>\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4xnr8mzq.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $result = \"\";\n  $divisor = pow(10, $shift);\n  while ($x >= $divisor) {\n\
    \    $result .= $divisor % 10;\n    $divisor = floor($divisor / 10);\n  }\n  $result\
    \ .= $x;\n  if ($shift > strlen($result)) {\n    return $result;\n  }\n  return\
    \ $result[::-1];\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw2_70fhe.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = abs($x);\n    if ($shift < 0) {\n        $x = $x - abs($x) + abs($shift);\n\
    \        return $x < 0 ? '0' : (string) $x;\n    }\n    return (string) $x >>\
    \ $shift;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8839zm8h.php:23\n\
    Stack trace:\n#0 /tmp/tmp8839zm8h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8839zm8h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = array_reverse(str_split($x, $shift));\n    return implode('', array_reverse($digits));\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxx0ung9.php:19\n\
    Stack trace:\n#0 /tmp/tmpqxx0ung9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqxx0ung9.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = '';\n  while (strlen($x) > 0) {\n    $digits = $digits[strlen($x)\
    \ % $shift > 0 ?\n        1 + strlen($digits) :\n        strlen($digits)];\n \
    \   $x = intval(substr($x, strlen($x) / $shift, 1)) * self::$base;\n  }\n  return\
    \ $digits;\n}\n\n/**\n * Converts a number from one base to another, using the\
    \ conversion table in $base.\n * @internal\n */\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use \"self\" when no class scope is active in /tmp/tmp0slwzr8y.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = strlen($x);\n    if ($shift > $digits) {\n        $shift = $digits;\n\
    \    }\n    $result = '';\n    $carry = 0;\n    for ($i = 0; $i < $shift - 1;\
    \ $i++) {\n        $result = $result . substr($x, $i, 1) . $carry;\n        $carry\
    \ = (int) substr($x, $i + 1, 1);\n    }\n    return $result . substr($x, $shift,\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw5q3r2d.php:28\n\
    Stack trace:\n#0 /tmp/tmpcw5q3r2d.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcw5q3r2d.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift > 0) {\n    $digits = str_split($x, $shift);\n    $digits = array_reverse($digits);\n\
    \    return implode('', $digits);\n  }\n  return strrev($x);\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnrvg00jn.php:23\n\
    Stack trace:\n#0 /tmp/tmpnrvg00jn.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnrvg00jn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $shift = (int) $shift;\n  if ($shift > 0) {\n    $x = $x >> ($shift - 1);\n\
    \    $x = $x << ($shift + 1);\n  }\n  else {\n    $x = ($x >> $shift) | ($x <<\
    \ (32 - $shift));\n  }\n  return $x;\n}\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp229nt3a8.php:25\n\
    Stack trace:\n#0 /tmp/tmp229nt3a8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp229nt3a8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = strlen($x) < $shift ? strlen($x) : strlen($x) - $shift;\n    return\
    \ $x <\n        ($shift > strlen($x)) ? strrev($x) : str_pad(substr($x, 0, $shift),\
    \ $digits);\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kyaqqi0.php:19\n\
    Stack trace:\n#0 /tmp/tmp6kyaqqi0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6kyaqqi0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $length = (string) strlen($x);\n  $shiftLength = $shift;\n  if ($shift > $length)\
    \ {\n    // Shift exceeds $length\n    $shiftLength = $length;\n  }\n  $result\
    \ = '';\n  for ($i = 0; $i < $shiftLength; $i++) {\n    $result = $result . substr($x,\
    \ $i, 1);\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxsyi9e4w.php:27\n\
    Stack trace:\n#0 /tmp/tmpxsyi9e4w.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxsyi9e4w.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $r = \"\";\n  $digits = str_split($x);\n  foreach ($digits as $k => $digit)\
    \ {\n    $r = $digit . $r if ($k % $shift == 0);\n  }\n  if (count($digits) !==\
    \ $shift) {\n    return strrev($r);\n  } else {\n    return $r;\n  }\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThanks for the answer but I need to do it without\
    \ the use of the array functions.\n<|/ c |>\n<| c |>\n: If you don't want to use\
    \ the array functions, then you need to write your own algorithm, and that's beyond\
    \ the scope of this question. Why are you trying to avoid array functions?\n<|/\
    \ c |>\n<| c |>\nI assumed that most of the other answers on this page are using\
    \ array functions because they don't use them. Although this does use array functions.\
    \ Thanks for the answer.\n<|/ c |>\n<| c |>\n: The code in this answer is not\
    \ using the array functions, and is actually a non-recursive solution, which means\
    \ it is faster than the recursive solution using `array_map`, which is why I posted\
    \ it as an answer. There is no reason to call `array_map` here; just call `array_shift`\
    \ on each digit.\n<|/ c |>\n<| a tags=arrays,php |>\nYou could just use array_shift,\
    \ but if you want it without using array functions you could do something like\
    \ this:\n<code>\n$str = '12';\n$result = str_replace(array('0','1','2','3','4','5','6','7','8','9'),\
    \ array(),$str);\n</code>\nIf you don't want to use array functions you could\
    \ do something like:\n<code>\n$str = '12';\n$result = str_replace(str_split($str),\
    \ str_split(''), $str);\n</code>\nOr you could use a recursive function to do\
    \ the same thing.\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer but I need\
    \ to do it without the use of the array functions.\n<|/ c |>\n<| a dscore=1 tags=arrays,php\
    \ |>\nUsing array_reduce() function:\n<code>\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplpsprxnl.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $xstr = strval($x);\n    if ($shift > strlen($xstr)) {\n        // Shift\
    \ amount is too large for the last digit.\n        // Shift the entire input right\
    \ and then reverse the string.\n        $reverse = strrev($xstr);\n        $reverse\
    \ = substr($reverse, 0, $shift) . strrev($reverse);\n        return $reverse;\n\
    \    }\n    else {\n        $reverse = strrev($xstr);\n        $reverse = substr($reverse,\
    \ 0, $shift);\n        return $reverse . strrev($reverse);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbhxaxvr.php:30\n\
    Stack trace:\n#0 /tmp/tmpcbhxaxvr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcbhxaxvr.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $shift = (int) $shift;\n    return str_pad(base_convert($x, 10, $x), $shift,\
    \ '0', STR_PAD_LEFT);\n}\n</code>\n<|/ a tags=php,biginteger,multiplication,numbers\
    \ dscore=0 |>\n<| a tags=php,biginteger,multiplication,numbers |>\nYou can use\
    \ this function\n<code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplwiy55l6.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = strval(intval($x));\n    if ($digits > strlen($x)) {\n        return\
    \ $digits . $digits;\n    }\n    $digits_length = strlen($digits);\n    $shift\
    \ = abs($shift);\n    $shifts = $shift > $digits_length ? strlen($x) + $shift\
    \ - $digits_length : strlen($digits);\n    $remainder = $digits % $shift;\n  \
    \  if ($shift) {\n        $digits = $digits - $remainder;\n        $shift = $shift\
    \ - $remainder;\n        $remainder = 0;\n    }\n    $return = '';\n    $shifts\
    \ = $shift > $digits_length ? strlen($x) + $shift - $digits_length : strlen($digits);\n\
    \    for ($i = 0; $i < $shifts; $i++) {\n        $return .= $digits[$i] . $digits[$i\
    \ + $shift];\n    }\n    return $return . $remainder;\n}\n\n/**\n * Returns the\
    \ greatest common denominator of a set of numbers.\n *\n * @param mixed ...$numbers\
    \ Two or more integer values\n *\n * @return int\n */\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2rxmsla.php:43\n\
    Stack trace:\n#0 /tmp/tmpy2rxmsla.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpy2rxmsla.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $s = strlen($x);\n    if ($shift == 0) return $x; \n    $a = $x % 10;\n \
    \   $c = strlen($a);\n    $n = ($c + $shift - $s) % $shift;\n    $b = ($n >= $c)\
    \ ? $n : $c;\n    return $a . $b;\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg4aqb2e.php:24\n\
    Stack trace:\n#0 /tmp/tmprg4aqb2e.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprg4aqb2e.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return base_convert(base_convert($x, 10, $shift), 10, 10);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55q_b2e3.php:17\n\
    Stack trace:\n#0 /tmp/tmp55q_b2e3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp55q_b2e3.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $mod = $x % $shift;\n    return ($mod < $shift ? $mod + $shift : $x - $mod);\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar6ccgsr.php:19\n\
    Stack trace:\n#0 /tmp/tmpar6ccgsr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpar6ccgsr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    $newx\
    \ = '';\n    while($shift > 0) {\n        $newx += $x[(strlen($x) - $shift)];\n\
    \        $shift--;\n    }\n    return $newx;\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpyle6lon1.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyle6lon1.php:26\n\
    Stack trace:\n#0 /tmp/tmpyle6lon1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyle6lon1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $x_length = strlen($x);\n  if ($x_length == 0)\n    return '';\n  $shift =\
    \ ($shift < 0)\n    ? intval($x_length + $shift)\n    : intval($shift);\n  if\
    \ ($shift > $x_length)\n    return str_repeat($x[$x_length-1], abs($shift-$x_length));\n\
    \  $result = '';\n  for ($i = 0; $i < $shift; $i++)\n    $result = $x[$i] . $result;\n\
    \  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks, I fixed a couple bugs\
    \ and it works great!\n<|/ c |>\n<| a |>\n<code>\n<?php \n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf4p3o8xk.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = str_split(sprintf('%.0f', $x));\n    if ($shift > count($digits))\
    \ {\n        $shift = count($digits) - 1;\n    }\n    $digits = array_slice($digits,\
    \ $shift);\n    return implode('', $digits);\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fy9tumi.php:23\n\
    Stack trace:\n#0 /tmp/tmp2fy9tumi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2fy9tumi.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = (int) $x;\n  $shift %= $digits;\n  return str_pad((string) ($x >>\
    \ $shift), $shift, '0', STR_PAD_LEFT);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    Thanks for your answer, but this doesn't work for me. My php version is 7.3.9\
    \ (on Ubuntu) and I get `PHP Fatal error:  Uncaught Error: Call to undefined function\
    \ str_pad()`\n<|/ c |>\n<| c |>\nYou have to install it with `apt-get install\
    \ php7.3-str-pad`, or if you already did `apt-get install php7.3`.\n<|/ c |>\n\
    <| a dscore=1 |>\nAs stated in comments, PHP doesn't seem to have a built-in function\
    \ for this (although php does have \"bpow\"). Since PHP is designed to be a language\
    \ for web development, I would not expect a native function to exist for this\
    \ kind of function.\nSince this sounds like a homework problem, you can just implement\
    \ the algorithm in PHP yourself:\n<code>\nfunction candidate(...$args) {\n   \
    \ return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp_egeud_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \treturn str_pad(decbin($x>>$shift)[0], $shift, \"0\", STR_PAD_LEFT);\n}\n\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmlienkjn.php:18\n\
    Stack trace:\n#0 /tmp/tmpmlienkjn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmlienkjn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return str_pad(base_convert($x, 10, $shift), $shift, '0', STR_PAD_LEFT);\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpn712b6.php:18\n\
    Stack trace:\n#0 /tmp/tmpcpn712b6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcpn712b6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift > 0) {\n    $x = str_pad(decbin($x), $shift, \"0\", STR_PAD_LEFT);\n\
    \    return substr(str_pad(decbin(bindec($x)), \"32\", STR_PAD_LEFT), -$shift);\n\
    \  }\n  return $x;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fpb3_hx.php:22\n\
    Stack trace:\n#0 /tmp/tmp3fpb3_hx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3fpb3_hx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift < 0)\n        return str_repeat('0', -$shift) . substr($x, $shift);\n\
    \    return ltrim(rtrim($x, '0') . str_repeat('0', $shift), '0');\n}\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkwzbdhqw.php:19\n\
    Stack trace:\n#0 /tmp/tmpkwzbdhqw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkwzbdhqw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return ltrim(rtrim($x, $shift), $shift);\n}\n\n$var1 = \"1\";\n$var2 = \"\
    1\";\n\n$var3 = \"$var1$var2\";\n\n$var4 = \"1$var2\";\n\n$var5 = \"1$var2\";\n\
    \n$var6 = $var1 . $var2;\n\n$var7 = $var1 . \"$var2\";\n\n$var8 = \"$var1$var2\"\
    ;\n\n$var9 = \"$var1$var2\";\n\n$var10 = \"$var1$var2\";\n\n$var11 = \"$var1$var2\"\
    ;\n\n$var12 = \"$var1$var2\";\n\n$var13 = \"$var1$var2\";\n\n$var14 = \"$var1$var2\"\
    ;\n\n$var15 = \"$var1$var2\";\n\n$var16 = \"$var1$var2\";\n\n$var17 = \"$var1$var2\"\
    ;\n\n$var18 = \"$var1$var2\";\n\n$var19 = \"$var1$var2\";\n\n$var20 = \"$var1$var2\"\
    ;\n\n$var21 = \"$var1$var2\";\n\n$var22 = \"$var1$var2\";\n\n$var23 = \"$var1$var2\"\
    ;\n\n$var24 = \"$var1$var2\";\n\n$var25 = \"$var1$var2\";\n\n$var26 = \"$var1$var2\"\
    ;\n\n$var27 = \"$var1$var2\";\n\n$var28 = \"$var1$var2\";\n\n$var29 = \"$var1$var2\"\
    ;\n\n$var30 = \"$var1$var2\";\n\n$var31 = \"$var1$var2\";\n\n$var32 = \"$var1$var2\"\
    ;\n\n$var33 = \"$var1$var2\";\n\n$var34 = \"$var1$var2\";\n\n$var35 = \"$var1$var2\"\
    ;\n\n$var36 = \"$var1$var2\";\n\n$var37 = \"$var1$var2\";\n\n$var38 = \"$var1$var2\"\
    ;\n\n$var39 = \"$var1$var2\";\n\n$var40 = \"$var1$var2\";\n\n$var41 = \"$var1$var2\"\
    ;\n\n$var42 = \"$var1$var2\";\n\n$var43 = \"$var1$\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp234bxpq2.php on line 102\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) return $x;\n    $digits = strlen($x);\n    return\
    \ substr($x, $shift, $digits) . substr($x, 0, $shift);\n}\n</code>\n<|/ a tags=php,arrays,loops\
    \ |>\n<| a |>\nHere is an example with recursive functions, that may help you\
    \ with your homework.\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpor8e0oi_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = strlen($x);\n    $len = min($digits, $shift);\n    if ($len ===\
    \ $shift) {\n        return $x;\n    }\n    $start = strlen($x) - $len - 1;\n\
    \    $result = \"\";\n    while ($start >= 0) {\n        $result = $x[$start--]\
    \ . $result;\n    }\n    return $result . $x[$start];\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a tags=php,string |>\nFor this specific example I would suggest that\
    \ you create a string with all the characters from 0-9 and then use substr to\
    \ get the last character of the string and add it to the beginning of the string\
    \ until you get the right length.\n<code>\n$number = \"0123456789\"\n$num = substr($number,\
    \ strlen($number)-1, 1);\nwhile (strlen($number) > $num)\n{\n    $number = substr($number,\
    \ 0, strlen($number)-1);\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nTo print a number\
    \ in circular order you can also use this.\n<code>\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4s62plgh.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift == 0) return $x;\n    return substr($x, strlen($x) - $shift) +\
    \ substr($x, 0, strlen($x) - $shift);\n}\n\nfunction candidate(...$args) {\n \
    \   return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldtmj6nj.php:19\n\
    Stack trace:\n#0 /tmp/tmpldtmj6nj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpldtmj6nj.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen($x) > $shift ? $shift : $strlen($x);\n  $return = '';\n  for\
    \ ($i = 0; $i < $digits; ++$i) {\n    $return .= $x[$i];\n  }\n  $return = strrev($return);\n\
    \  return $return;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppux18019.php:23\n\
    Stack trace:\n#0 /tmp/tmppux18019.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppux18019.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // if shift > number of digits, return digits reversed\n    if ($shift >\
    \ strlen($x)) {\n        $shift = 0;\n    } else {\n        // add leading zeros\
    \ if shift < 0\n        if ($shift < 0) {\n            $shift = 0;\n        }\n\
    \        while ($shift < -strlen($x)) {\n            $x = '0' . $x;\n        \
    \    $shift++;\n        }\n    }\n    return substr($x, $shift);\n}\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnq_x7ocf.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return substr($x, ($shift > strlen($x)) ? strlen($x) - $shift : $shift, $shift);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI used a similar method to Karma's, using\
    \ an array. \n<code>\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp054fmzsg.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $str = (string) $x;\n  $strlen = strlen($str);\n  if ($shift > $strlen) {\n\
    \    return $strlen;\n  }\n  $result = '';\n  for ($i = $strlen - $shift; $i >=\
    \ 0; $i -= 1) {\n    $result .= $str[$i];\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_kap0sb.php:27\n\
    Stack trace:\n#0 /tmp/tmp7_kap0sb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7_kap0sb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  return (string) ($x >> $shift) . ($x & $x >> $shift);\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsi8y58i.php:18\n\
    Stack trace:\n#0 /tmp/tmpcsi8y58i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcsi8y58i.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift >= $digits = strlen($x)) {\n        return $x;\n    }\n    $reversed\
    \ = substr($x, 0, $digits);\n    $last = substr($x, $digits);\n    return ($last\
    \ + $reversed) * $shift;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp9sqyl8r8.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9sqyl8r8.php:23\n\
    Stack trace:\n#0 /tmp/tmp9sqyl8r8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9sqyl8r8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = str_split($x, $shift);\n    $out = \"\";\n    foreach ($digits\
    \ as $digit) {\n        $out .= $digit . \"9\";\n    }\n    return $out;\n}\n\n\
    function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdps1iyt3.php:23\n\
    Stack trace:\n#0 /tmp/tmpdps1iyt3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdps1iyt3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    return\
    \ substr($x, 0, $shift).(string)substr($x, $shift);\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysscmg4s.php:21\n\
    Stack trace:\n#0 /tmp/tmpysscmg4s.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpysscmg4s.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen($x) > strlen($shift) ? strlen($x) : strlen($shift);\n  while\
    \ ($shift > $digits) {\n    $shift -= strlen($shift);\n  }\n  if ($shift > 0)\
    \ {\n    $x = substr($x, 0, $shift) . str_repeat('0', $shift) . substr($x, -$shift);\n\
    \  }\n  return $x;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5httbd5f.php:24\n\
    Stack trace:\n#0 /tmp/tmp5httbd5f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5httbd5f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = '';\n  if ($shift < 0) {\n    $shift = -$shift;\n    $x = $x->reverse();\n\
    \  }\n  do {\n    $digits .= $x->shift();\n  } while ($shift -- > 0);\n  return\
    \ $digits;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function shift() on int\
    \ in /tmp/tmpqco6xl2l.php:16\nStack trace:\n#0 /tmp/tmpqco6xl2l.php(22): circular_shift(100,\
    \ 2)\n#1 /tmp/tmpqco6xl2l.php(26): candidate(100, 2)\n#2 /tmp/tmpqco6xl2l.php(33):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqco6xl2l.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \t$x = (int) $x;\n\tif ($shift > 0) {\n\t\tfor ($i = 0; $i < $shift; $i++) {\n\
    \t\t\t$x = $x * 10 + $x;\n\t\t}\n\t\treturn $x;\n\t}\n\tfor ($i = $shift; $i >=\
    \ 0; $i--) {\n\t\t$x = $x / 10 + $x;\n\t}\n\treturn $x;\n}\n\n/**\n * Returns\
    \ the sum of the given array and compared to the given value.\n *\n * @param array\
    \ $values The values to add up.\n * @param mixed $compareValue The value to compare\
    \ with.\n *\n * @return int\n */\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8etb3u4v.php:36\n\
    Stack trace:\n#0 /tmp/tmp8etb3u4v.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8etb3u4v.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) return $x; \n    return str_pad(\n        strrev($x),\
    \ \n        abs($shift), \n        strrev($x[$shift]), \n        strlen($x)-abs($shift)\n\
    \    );\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkylq_z3.php:24\n\
    Stack trace:\n#0 /tmp/tmplkylq_z3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplkylq_z3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    return str_pad(strrev($x), $shift, '0', STR_PAD_LEFT);\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4n8e9zk.php:19\n\
    Stack trace:\n#0 /tmp/tmpd4n8e9zk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpd4n8e9zk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  // >>> circular_shift(9, 2)\n  // \"10\"\n  if ($shift > strlen($x)) {\n  \
    \  return strrev($x);\n  }\n\n  $str = str_split($x, $shift);\n  $str[$shift]\
    \ = '';\n  return implode('', $str);\n}\n\nfunction candidate(...$args) {\n  \
    \  return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8us_owih.php:26\n\
    Stack trace:\n#0 /tmp/tmp8us_owih.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8us_owih.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if (!ctype_digit($x)) {\n        trigger_error('circular_shift expects a\
    \ digit', E_USER_WARNING);\n        return false;\n    }\n    // For PHP versions\
    \ < 5.3, use the standard strrev function.\n    if (PHP_VERSION < '5.3') {\n \
    \       $digits = array_reverse(str_split($x));\n        return implode('', array_slice($digits,\
    \ $shift));\n    }\n\n    // For PHP versions >= 5.3, use the native circular\
    \ shift operator, which is faster.\n    // For version 5.3 and up, use the faster\
    \ array_slice function.\n    if (PHP_VERSION >= '5.3') {\n        $digits = array_slice(str_split($x),\
    \ $shift);\n        return implode('', $digits);\n    }\n\n    // Otherwise, use\
    \ strrev which is slower but safer.\n    $digits = array_reverse(str_split($x));\n\
    \    return implode('', $digits);\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: circular_shift expects a digit in /tmp/tmpyr04r4la.php on line\
    \ 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr04r4la.php:37\n\
    Stack trace:\n#0 /tmp/tmpyr04r4la.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyr04r4la.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // Initialize shift to 0 if not passed.\n    if ( ! isset($shift)) {\n  \
    \      $shift = 0;\n    }\n    // Initialize result to zero and process x to the\
    \ left.\n    $result = 0;\n    while ( $x > 0) {\n        $result = $result *\
    \ 10 + $x % 10;\n        $x = floor($x / 10);\n        $shift = $shift - 1;\n\
    \    }\n    if ($shift > 0) {\n        $result = $result * pow (10, $shift);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7h0_joe.php:32\n\
    Stack trace:\n#0 /tmp/tmpw7h0_joe.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpw7h0_joe.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = strlen((string)$x);\n    if ($digits <= $shift) {\n        return\
    \ $x;\n    }\n    if ($shift > 0) {\n        $n = $digits - $shift;\n        $r\
    \ = substr($x, $shift);\n        $x = substr($x, 0, $shift);\n        $r = \"\
    0\" . $r;\n        $x = $r . $x;\n    }\n    $r = substr($x, $shift);\n    $x\
    \ = substr($x, 0, $shift);\n    $x = \"0\" . $x;\n    return $r . $x;\n}\n\n/**\n\
    \ * Calculate exponential function base e\n * base 2 => e^2, base 10 => e^10\n\
    \ * base e / base 10 => e^1\n * @param $x\n * @return float e^x\n */\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv76cqhdg.php:39\n\
    Stack trace:\n#0 /tmp/tmpv76cqhdg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpv76cqhdg.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $res = $x;\n    while ($shift--) {\n        $res = $res % 10 + $x % 10;\n\
    \        $x = floor($x / 10);\n    }\n    return $res % 10 . $x % 10;\n}\n</code>\n\
    <|/ a tags=math,algorithm,php |>\n<| c |>\nI guess it is the least common multiple,\
    \ not a circular shift.\n<|/ c |>\n<| c |>\n: Yes, I believe so. But I think that's\
    \ the desired result, as I understood it, as described in my answer to your question.\
    \ Maybe the desired result has another name, but I don't know.\n<|/ c |>\n<| c\
    \ |>\n: I added a comment to the question to clarify.\n<|/ c |>\n<| c |>\nI suppose\
    \ this is not a great answer. In particular, how will you deal with numbers greater\
    \ than PHP_INT_MAX?  How about negative numbers?\n<|/ c |>\n<| c |>\n: I added\
    \ a version that handles numbers > PHP_INT_MAX.\n<|/ c |>\n<| a dscore=4 tags=math,algorithm,php\
    \ |>\nI've found that \n<code>\n$x = ($x % (10^(floor(log10($x))+1)\n</code>\n\
    is a bit faster than using modulo.\n<|/ a |>\n<| c |>\nYou mean faster? Faster\
    \ than what? Please give a benchmark, since modulo is very slow as hell. Also\
    \ how is this different from simply `%`?\n<|/ c |>\n<| c |>\nIf your modulo number\
    \ is large then it's much faster than the division version. So yes it would be\
    \ faster but I didn't do a benchmark to prove it.\n<|/ c |>\n<| c |>\n: Oops,\
    \ I forgot about negative numbers. In that case, `%` is still faster. See my answer\
    \ to the other question on that.\n<|/ c |>\n<| c |>\nIt is not really \"the modulo\"\
    .  It is just a function call to get the last digit of a number.\n<|/ c |>\n<|\
    \ c |>\n: What is so wrong with `%`? It's faster than `/`, which also gives the\
    \ same result. Anyway, I see no reason why `%` should be faster.\n<|/ c |>\n<|\
    \ a tags=math,algorithm,php |>\nAs a PHP extension using GMP:\n<code>\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzc2mrp3g.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift < 0) {\n    // Shift needs to be in the range (-$shift, $shift)\n\
    \    return str_repeat('0', $shift - strlen($x)) . $x . str_repeat('0', $shift);\n\
    \  } else {\n    // Shift needs to be in the range (0, $shift)\n    return str_repeat('0',\
    \ abs($shift)) . $x . str_repeat('0', $shift);\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfax28oj.php:24\n\
    Stack trace:\n#0 /tmp/tmpdfax28oj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdfax28oj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $shift = strval($shift);\n    $x = strval($x);\n    if ($shift == 0) return\
    \ $x;\n    $digits = str_split($x);\n    array_unshift($digits, null);\n    if\
    \ (strlen($digits) < $shift) {\n        $digits.= array_fill(0, $shift, null);\n\
    \    }\n    return implode('', array_slice($digits, 0, $shift));\n}\nfunction\
    \ candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmp0p4oz0dm.php\
    \ on line 15\n\nWarning: array_slice() expects parameter 1 to be array, string\
    \ given in /tmp/tmp0p4oz0dm.php on line 18\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp0p4oz0dm.php on line 18\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0p4oz0dm.php:25\nStack trace:\n#0 /tmp/tmp0p4oz0dm.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0p4oz0dm.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift == 0)\n    return '';\n\n  $chars = strlen ($x) > $shift ? str_split\
    \ (array_slice ($x, 0, $shift), strlen ($x)) : str_split (array_slice ($x, $shift),\
    \ strlen ($x));\n  return implode ('', array_reverse ($chars));\n}\n</code>\n\
    <|/ a dscore=0 tags=php,string,regex |>\n<| a dscore=0 tags=php,string,regex |>\n\
    You can use this:\n<code>\n$number = 12345;\n\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsletr7eo.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $str = preg_replace('/([0-9]+)/', '$1 ', $x);\n    return substr($str, 0,\
    \ $shift) . str_pad(substr($str, -$shift), $shift);\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9khi6hte.php:19\n\
    Stack trace:\n#0 /tmp/tmp9khi6hte.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9khi6hte.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        return implode('', array_slice(str_split($x),\
    \ 0, -1 * $shift));\n    }\n    return implode('', array_slice(str_split($x),\
    \ $shift));\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp2e11vw.php:21\n\
    Stack trace:\n#0 /tmp/tmpnp2e11vw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnp2e11vw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits =  strval($x);\n    $shift = abs($shift);\n    $length = strlen($digits);\n\
    \    if ($shift > $length) {\n        return $digits;\n    }\n    $shift %= $length;\n\
    \    return substr($digits, $shift, $length) . $digits;\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gmaw8sq.php:25\n\
    Stack trace:\n#0 /tmp/tmp2gmaw8sq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2gmaw8sq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = str_split($x);\n    $new_digits = array();\n    foreach($digits\
    \ as $digit) {\n        $new_digits[] = $digit;\n        if ($shift > strlen($digit))\
    \ {\n            $new_digits[] = array_shift($digits);\n        }\n    }\n   \
    \ return implode('', $new_digits);\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiu_m3sqy.php:26\n\
    Stack trace:\n#0 /tmp/tmpiu_m3sqy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiu_m3sqy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift < 0 || $shift >= strlen($x)) {\n        return $x;\n    }\n  \
    \  $digits = array_reverse(str_split($x));\n    if ($shift == 0) {\n        return\
    \ implode('', $digits);\n    }\n    return implode(array_shift($digits), $digits);\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\n`This function does nothing.` - no, it\
    \ does, but it's intended to be used for examples in questions not as a stand-alone\
    \ function.\n<|/ c |>\n<| c |>\nIt would return the same result as OP's function\
    \ without the `if` statement\n<|/ c |>\n<| c |>\n`array_reverse(str_split($x))`\
    \ will produce an array with strings from `$x` as elements, not integers.\n<|/\
    \ c |>\n<| c |>\n, you're right. I've updated the answer with a function that\
    \ does exactly what the OP needed.\n<|/ c |>\n<| a tags=php dscore=4 |>\nI used\
    \ the array_shift function, as I wanted to return all elements of the array in\
    \ reverse order. This is the function I wrote:\n<code>\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoqanawh2.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen($x);\n  $result = \"\";\n\n  do {\n    $result = $result .\
    \ substr($x, ($digits -= $shift), 1);\n    $shift += $shift;\n  } while ($digits\
    \ > 0);\n\n  return $result;\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvfg2qqk.php:25\n\
    Stack trace:\n#0 /tmp/tmppvfg2qqk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppvfg2qqk.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = str_split($x);\n  array_shift($digits);\n  return join($digits, array_slice($digits,\
    \ 0, $shift));\n}\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphd6um7sm.php:19\n\
    Stack trace:\n#0 /tmp/tmphd6um7sm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphd6um7sm.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) {\n        $shift = strlen($x) - $shift;\n    }\n\
    \    return substr(str_repeat($x, $shift), -$shift);\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4dsukif.php:20\n\
    Stack trace:\n#0 /tmp/tmpw4dsukif.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpw4dsukif.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x_str = (string) $x;\n    $x_str = strrev($x_str);\n    $shift = strlen((string)\
    \ $shift);\n    $result = '';\n    for ($i = $shift; $i >= 0; $i--) {\n      \
    \  $result .= $x_str{0};\n    }\n    return $result;\n}\n\n$x = $_POST['time'];\n\
    $xs = explode(\" \", $x);\nforeach ($xs as $xval) {\n    $time = $xval * 60;\n\
    \    $time = strtotime($time);\n    ?>\n    <table class=\"table\">\n        <tr>\n\
    \            <td>\n                <?php echo $x; ?>\n            </td>\n    \
    \        <td>\n                <?php\n                // Convert seconds into\
    \ minutes and output the result.\n                $minutes = round($time / 60,\
    \ 1);\n                echo \"$minutes\"; \n            ?>\n            </td>\n\
    \            <td>\n                <?php\n                // Circular shift the\
    \ seconds, and output the result.\n                $time = circular_shift($time,\
    \ 1);\n                echo \"$time\";\n            ?>\n            </td>\n  \
    \          <td>\n                <?php\n                // Circular shift the\
    \ minutes, and output the result.\n                $time = circular_shift($time,\
    \ 1);\n                echo \"$time\";\n            ?>\n            </td>\n  \
    \      </tr>\n    </table>\n    <?php\n}\n</code>\nThis code produces output like\
    \ this: \n<code>\nTime in minutes           Time in seconds\n 00:40          \
    \         40\n 00:20                   20\n 00:10                   10\n 00:05\
    \                    5\n 00:10                    10\n 00:05                 \
    \   5\n 00:10                    10\n 00:05                    5\n 00:10     \
    \               10\n 00:05                    5\n 00:10                    10\n\
    \ 00:05                    5\n 00:10                    10\n 00:05           \
    \         5\n 00:10                    10\n</code>\n<|/ a |>\n<| c |>\nI tested\
    \ your code and this is working perfectly fine. Thank you very much\n<|/ c |>\n\
    <| c |>\nI'm glad I could help.\n<|/ c |>\n<| c |>\nThe code you posted doesn't\
    \ work, it gives `00:40` for `00:40:00`, which isn't a circleshift on the minutes.\
    \ You have to add `+4` at the end of the `circular_shift` function\n<|/ c |>\n\
    <| a tags=time,php,date |>\n<code>\n<?php\n$time = '02:25:00';\n$arr = explode(':',\
    \ $time);\n$m1 = $arr[0];\n$s1 = $arr[1];\n\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjgvp35nf.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // shift cannot be greater than or equal to the number of digits.\n    if\
    \ ($shift > strlen($x)) {\n        $shift = strlen($x);\n    }\n    $x = str_pad(decbin($x),\
    \ $shift, '0', STR_PAD_LEFT);\n    return ltrim($x, \"0\");\n}\n</code>\nAnd this\
    \ is how you can convert a hex string to a decimal number:\n<code>\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd1t5fxyu.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  if ($shift > 0) {\n    $x %= $shift;\n    if ($x == 0) {\n      $shift = 0;\n\
    \    } else {\n      $shift += intdiv($shift, $x);\n    }\n  }\n  $shifted = str_split($x);\n\
    \  array_walk($shifted, function(&$val) {\n    $val %= $shift;\n  });\n  return\
    \ implode('', array_reverse($shifted));\n}\n\nfunction candidate(...$args) {\n\
    \    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkkhvjg8s.php:20\n\
    Stack trace:\n#0 [internal function]: {closure}('0', 0)\n#1 /tmp/tmpkkhvjg8s.php(21):\
    \ array_walk(Array, Object(Closure))\n#2 /tmp/tmpkkhvjg8s.php(26): circular_shift(0,\
    \ 0)\n#3 /tmp/tmpkkhvjg8s.php(30): candidate(100, 2)\n#4 /tmp/tmpkkhvjg8s.php(37):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmpkkhvjg8s.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    // Shift out of range or non-numeric, return original string.\n    if (!is_int($x)\
    \ or $x % 1 != 0) {\n        return $x;\n    }\n    // Shift out of range, return\
    \ original string.\n    if ($shift >= strlen($x)) {\n        return $x;\n    }\n\
    \    // Shift non-numeric, return original string.\n    if (!is_int($shift)) {\n\
    \        return $x;\n    }\n    $y = $x - ($x % $shift);\n    return $y;\n}\n\n\
    /**\n * Convert binary to hex value using bin2hex() function\n *\n * @param string\
    \ $x binary number\n * @return string hexadecimal number\n * @since 1.0.0\n *\
    \ @public static\n */\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymak_uk0.php:39\n\
    Stack trace:\n#0 /tmp/tmpymak_uk0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpymak_uk0.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $str = (string) $x;\n  $pos = strlen($str) - $shift;\n  return substr($str,\
    \ 0, $pos).(string) substr($str, $pos + 1);\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nNice. Although the OP says \"not using preg_replace\" I suppose you didn't\
    \ notice this was a homework problem.\n<|/ c |>\n<| c |>\n- It's not a homework\
    \ problem. I'm actually going to use it in another program that I'm working on,\
    \ and I wanted to try this one out so I could learn from it.\n<|/ c |>\n<| c |>\n\
    I did notice it wasn't homework problem. I just did a little bit of research and\
    \ found this as a solution. I don't know why I didn't think of that before I posted\
    \ my answer. :)\n<|/ c |>\n<| c |>\n- Thank you for taking the time to answer,\
    \ but unfortunately that isn't the answer that I'm looking for. I need to figure\
    \ out how to do it without using preg_replace().\n<|/ c |>\n<| c |>\nSo what are\
    \ the rules you are trying to implement?\n<|/ c |>\n<| a dscore=0 tags=php |>\n\
    Here's an idea: \n<code>\n$str = \"1234\";\n$firstPart = substr($str,0,1);\n$secondPart\
    \ = substr($str,1,1);\n$thirdPart = substr($str,2,1);\n$fourthPart = substr($str,3,1);\n\
    $newStr = substr($firstPart.$secondPart.$thirdPart.$fourthPart,1);\necho $newStr;\n\
    </code>\nThis outputs 1 because the fourth part is empty and it's still the first\
    \ character.\n<|/ a |>\n<| c |>\nThanks for responding, but I'm looking for a\
    \ way to do it without using preg_replace().\n<|/ c |>\n<| c |>\nOk, I misunderstood.\
    \ My bad.\n<|/ c |>\n<| a tags=php dscore=0 |>\nYou could do something like this\n\
    <code>\n$string = \"abc123\";\necho $string[0];\n$newstring = str_replace($string[0],\"\
    \",$string);\necho $newstring;\n</code>\n<|/ a |>\n<| c |>\nI think OP wants to\
    \ do it without using preg_replace.\n<|/ c |>\n<| c |>\nOkay I misunderstood then\n\
    <|/ c |>\n<| c |>\nI think this should do\n<|/ c \nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeh68e_u8.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = base_convert($x, 10, strlen($x));\n    return base_convert($digits\
    \ . $digits, 10, $shift > strlen($digits) ? strlen($digits) - $shift : 0);\n}\n\
    \n$x = hexdec($_REQUEST[\"i\"]);\n$y = hexdec($_REQUEST[\"j\"]);\n$z = $_REQUEST[\"\
    k\"];\n$z1 = hexdec($_REQUEST[\"m\"]);\n$z2 = hexdec($_REQUEST[\"n\"]);\n$z3 =\
    \ hexdec($_REQUEST[\"o\"]);\n$z4 = hexdec($_REQUEST[\"p\"]);\n$z5 = hexdec($_REQUEST[\"\
    q\"]);\n\n$y = circular_shift($y, 1);\n$z = circular_shift($z, 1);\n$z1 = circular_shift($z1,\
    \ 1);\n$z2 = circular_shift($z2, 1);\n$z3 = circular_shift($z3, 1);\n$z4 = circular_shift($z4,\
    \ 1);\n$z5 = circular_shift($z5, 1);\n\n$yc = pow($y, $z);\n$zc = pow($z, $z);\n\
    $yc1c = pow($y, $z1);\n$zc1c = pow($z1, $z1);\n$yc2c = pow($y, $z2);\n$zc2c =\
    \ pow($z2, $z2);\n$yc3c = pow($y, $z3);\n$zc3c = pow($z3, $z3);\n$yc4c = pow($y,\
    \ $z4);\n$zc4c = pow($z4, $z4);\n$yc5c = pow($y, $z5);\n$zc5c = pow($z5, $z5);\n\
    \n$result = \"\";\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpugctqhac.php\
    \ on line 10\n\nWarning: base_convert(): Invalid `to base' (-1) in /tmp/tmpugctqhac.php\
    \ on line 11\n\nWarning: base_convert(): Invalid `to base' (0) in /tmp/tmpugctqhac.php\
    \ on line 10\n\nWarning: base_convert(): Invalid `to base' (-1) in /tmp/tmpugctqhac.php\
    \ on line 11\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpugctqhac.php\
    \ on line 10\n\nWarning: base_convert(): Invalid `to base' (-1) in /tmp/tmpugctqhac.php\
    \ on line 11\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpugctqhac.php\
    \ on line 10\n\nWarning: base_convert(): Invalid `to base' (-1) in /tmp/tmpugctqhac.php\
    \ on line 11\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpugctqhac.php\
    \ on line 10\n\nWarning: base_convert(): Invalid `to base' (-1) in /tmp/tmpugctqhac.php\
    \ on line 11\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpugctqhac.php\
    \ on line 10\n\nWarning: base_convert(): Invalid `to base' (-1) in /tmp/tmpugctqhac.php\
    \ on line 11\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpugctqhac.php\
    \ on line 10\n\nWarning: base_convert(): Invalid `to base' (-1) in /tmp/tmpugctqhac.php\
    \ on line 11\n\nWarning: base_convert(): Invalid `to base' (0) in /tmp/tmpugctqhac.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugctqhac.php:51\n\
    Stack trace:\n#0 /tmp/tmpugctqhac.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpugctqhac.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift < 0)\n        $shift += strlen($x);\n    if ($shift == 0)\n  \
    \      return $x;\n    $len = strlen($x);\n    if ($len == 0)\n        return\
    \ '';\n    $digits = strlen($x) - $shift;\n    $first = $x[$shift];\n    if ($shift\
    \ > $digits)\n        $x = substr($x, 0, -$shift);\n    else {\n        $x +=\
    \ $first;\n        return $x;\n    }\n    $rest = circular_shift($x, $shift -\
    \ 1);\n    return $first . $rest;\n}\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpqra11o.php:33\n\
    Stack trace:\n#0 /tmp/tmpdpqra11o.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdpqra11o.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen($x);\n  for ($i = $digits; $i >= $shift; $i--) {\n    $x =\
    \ $x . substr($x, $i, 1);\n  }\n  return $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pkw5n_v.php:22\n\
    Stack trace:\n#0 /tmp/tmp5pkw5n_v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5pkw5n_v.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > 0) {\n        $x = $x ^ ($x >> $shift);\n    }\n    return str_pad($x,\
    \ $shift, '0', STR_PAD_LEFT);\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn36muqhg.php:21\n\
    Stack trace:\n#0 /tmp/tmpn36muqhg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn36muqhg.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = $x - ($x % ($shift + 1));\n    if ($x > ($shift + 1)) {\n        return\
    \ round($x / $shift);\n    }\n    return str_pad($x, $shift, \"0\", STR_PAD_LEFT);\n\
    }\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4y3qxmv.php:21\n\
    Stack trace:\n#0 /tmp/tmpq4y3qxmv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpq4y3qxmv.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $digits = str_split($x);\n    if ($shift > count($digits)) {\n        return\
    \ array_reverse($digits);\n    }\n    for ($i = 0; $i < $shift; $i++) {\n    \
    \    $digits[] = $digits[count($digits) - $i];\n    }\n    return implode('',\
    \ $digits);\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamo0od4y.php:25\n\
    Stack trace:\n#0 /tmp/tmpamo0od4y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpamo0od4y.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $result = '';\n    while ($shift > 1) {\n        $result = chr((ord($x) %\
    \ $shift) + ord($x)) . $result;\n        $x = chr(ord($x) / $shift);\n       \
    \ --$shift;\n    }\n    return $x . $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ggxhy17.php:24\n\
    Stack trace:\n#0 /tmp/tmp5ggxhy17.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5ggxhy17.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \tif ($shift >= 0) {\n\t\treturn implode('', array_reverse(str_split($x)));\n\t\
    }\n\treturn ltrim(str_repeat('0', abs($shift)), '0') . ltrim(str_repeat('0', $shift),\
    \ '0');\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gjxxs3j.php:22\n\
    Stack trace:\n#0 /tmp/tmp_gjxxs3j.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_gjxxs3j.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > 0) {\n        $result = \"\";\n        while (--$shift) {\n\
    \            $result .= $x % 10;\n            $x = floor($x / 10);\n        }\n\
    \        return $result;\n    } else {\n        $result = \"\";\n        while\
    \ (true) {\n            $result .= $x % 10;\n            $x = floor($x / 10);\n\
    \            if ($x === 0) break;\n        }\n        return strrev($result);\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpukqo_vn1.php:33\n\
    Stack trace:\n#0 /tmp/tmpukqo_vn1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpukqo_vn1.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $xstr = strval($x);\n    $xlen = strlen($xstr);\n    $shiftlen = strlen($shift);\n\
    \    if ($shiftlen > $xlen) {\n        return $xstr;\n    }\n    $shifter = str_repeat($shiftstr,\
    \ $shiftlen) . str_repeat($shiftstr, $xlen - $shiftlen);\n    return $xstr < $shifter\
    \ ? $xstr : strrev($shifter);\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3obyug3.php:25\n\
    Stack trace:\n#0 /tmp/tmpc3obyug3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpc3obyug3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    $x = $x - ($x % ($shift));\n    $x = $x - (($x // $shift) % $shift);\n  \
    \  $x = $x + ($x % $shift);\n    return $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5okaojao.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $shift_digits\
    \ = $shift % $digits;\n  $result = $x . str_repeat('0', $shift_digits);\n  $rest\
    \ = $digits - $shift_digits;\n  return $result . circular_shift($rest, $shift);\n\
    }\n\nfunction candidate(...$args) {\n    return circular_shift(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsnqoh98.php:25\n\
    Stack trace:\n#0 /tmp/tmpcsnqoh98.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcsnqoh98.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \    if ($shift > strlen($x)) return $x; // nothing to shift!\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift - strlen($x));\n}\nfunction candidate(...$args)\
    \ {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l1ypm0_.php:18\n\
    Stack trace:\n#0 /tmp/tmp4l1ypm0_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4l1ypm0_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n// and return the result as a string.\n// If shift > number\
    \ of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n\
    // >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\
    \  $digits = strlen($x);\n  while ($shift < $digits) {\n    $lastdigit = $digits;\n\
    \    $digits--;\n    $shift += $lastdigit;\n  }\n  return substr($x, 0, $shift\
    \ - 1) + substr($x, $shift - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100,\
    \ 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97,\
    \ 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11,\
    \ 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8zi1kyp.php:24\n\
    Stack trace:\n#0 /tmp/tmpj8zi1kyp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpj8zi1kyp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
