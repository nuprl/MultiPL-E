name: HumanEval_43_pairs_sum_to_zero
language: php
results:
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    $sum = 0;\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\t$sum = $sum + $l[$i];\n\
    \t}\n\treturn (2 == $sum && 0 == $l[1]);\n}\n\nfunction candidate(...$args) {\n\
    \    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgkaduj9.php:31\n\
    Stack trace:\n#0 /tmp/tmpjgkaduj9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjgkaduj9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $x) {\n        foreach ($l as $y) {\n            if ($x + $y\
    \ === 0) {\n                return true;\n            }\n        }\n    }\n  \
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ms5lv2c.php:31\n\
    Stack trace:\n#0 /tmp/tmp0ms5lv2c.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0ms5lv2c.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  foreach\
    \ ($l as $i => $x) {\n    $sum = $x;\n    $found = true;\n    foreach ($l as $j\
    \ => $y) {\n      if ($i == $j) {\n        continue;\n      }\n      $sum += $y;\n\
    \      if ($sum < 0) {\n        $found = false;\n        break;\n      }\n   \
    \ }\n    if ($found) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\
    function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp01qr59p.php:41\n\
    Stack trace:\n#0 /tmp/tmpp01qr59p.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpp01qr59p.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $n = 0;\n    foreach ($l as $x) { $n += $x; }\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i]\
    \ + $l[$j] == 0) return false;\n        }\n    }\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpit7miusz.php:30\n\
    Stack trace:\n#0 /tmp/tmpit7miusz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpit7miusz.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  $n = sizeof($l);\n  for ($i = 0; $i < $n; ++$i) {\n    $sum += $l[$i];\n\
    \  }\n  return ($sum < 0) || ($sum > 0);\n}\n\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdux1zir.php:30\n\
    Stack trace:\n#0 /tmp/tmpjdux1zir.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjdux1zir.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $l = array_values($l);\n    sort($l);\n\n    $sum = 0;\n    $len   = count($l);\n\
    \    $result = false;\n\n    for ($i = 0; $i < $len; $i++) {\n        if ($sum\
    \ < 0 || $sum != $l[$i]) {\n            $sum = $l[$i];\n            $result =\
    \ true;\n        }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dff5zzk.php:38\n\
    Stack trace:\n#0 /tmp/tmp6dff5zzk.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6dff5zzk.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    $s = array();\n\tforeach($l as $x => $y) {\n\t\t$s[$x + $y] = 1;\n\t}\n\tforeach($s\
    \ as $x => $y) {\n\t\tif ($x == 0) return false;\n\t}\n\treturn true;\n}\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfa7un5nb.php:30\n\
    Stack trace:\n#0 /tmp/tmpfa7un5nb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfa7un5nb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array();\n    $zeroes = array();\n    foreach ($l as $i => $v) {\n\
    \        $pairs[$v] = $v;\n        $zeroes[$v] = 1;\n    }\n    // count how many\
    \ zeroes there are in the list\n    foreach ($l as $v) {\n        $zeroes[$v]--;\n\
    \    }\n    // find pairs whose sum is zero\n    foreach ($zeroes as $i => $n)\
    \ {\n        if ($n == 1) {\n            $sum = $i + $i;\n            if ($sum\
    \ == 0) {\n                $pairs[$i] = $i;\n            }\n        }\n    }\n\
    \    return array_diff($pairs, $zeroes);\n}\nfunction candidate(...$args) {\n\
    \    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwi13jr3u.php:42\n\
    Stack trace:\n#0 /tmp/tmpwi13jr3u.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpwi13jr3u.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    $first = null;\n\t$last = null;\n\tforeach ($l as $value) {\n\t\t$next = $first\
    \ + $value;\n\t\tif ($next == 0) {\n\t\t\t$first = $next == 0 ? null : $next;\n\
    \t\t} else {\n\t\t\t$last = $next;\n\t\t}\n\t}\n\treturn $first == $last;\n}\n\
    \n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmedoe_gi.php:38\n\
    Stack trace:\n#0 /tmp/tmpmedoe_gi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmedoe_gi.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array_count_values($l);\n    foreach ($pairs as $i => $x) {\n    \
    \    if ($x == 0) {\n            if ($i === 0) {\n                return false;\n\
    \            } else {\n                $i = $i - 1;\n            }\n        }\
    \ else {\n            $i = $i - 1;\n        }\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1oz5iuh8.php:36\n\
    Stack trace:\n#0 /tmp/tmp1oz5iuh8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1oz5iuh8.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    sort($l);\n\t$n = 0;\n\t$pairs = array();\n\tforeach ($l as $k => $i) {\n\t\t\
    if ($i > 0) $pairs[$n++] = array($i, $l[$k]);\n\t}\n\twhile (count($pairs) > 2)\
    \ {\n\t\t$t = $pairs[count($pairs) - 2];\n\t\t$p1 = $pairs[count($pairs) - 1];\n\
    \t\t$p2 = array_pop($pairs);\n\t\t$s = $t[1] + $p2[1];\n\t\tif ($s == 0) {\n\t\
    \t\t$pairs[] = $t;\n\t\t\t$pairs[] = $p1;\n\t\t\tbreak;\n\t\t} else {\n\t\t\t\
    for ($i = 0; $i < count($pairs); $i++) {\n\t\t\t\tif ($pairs[$i][1] > 0 && $s\
    \ > 0) {\n\t\t\t\t\t$pairs[$i][1] -= $s;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn (count($pairs) == 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8g0klje4.php:48\n\
    Stack trace:\n#0 /tmp/tmp8g0klje4.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8g0klje4.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  // your code here\n    if (count($l) < 2) return false;\n    $s = 0;\n    $n\
    \ = count($l);\n    for ($i=0; $i<$n; $i++){\n        $s += $l[$i];\n    }\n \
    \   $k = 0;\n    $sum = 0;\n    for ($i=0; $i<$n; $i++){\n        if ($l[$i] ==\
    \ 0){\n            $k++;\n        }\n        else{\n            $sum -= $l[$i];\n\
    \        }\n    }\n    if ($k == $n && $sum == 0){\n        return true;\n   \
    \ }\n    else{\n        return false;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ufp_azi.php:48\n\
    Stack trace:\n#0 /tmp/tmp9ufp_azi.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9ufp_azi.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $a = array_count_values($l);\n    $b = array_count_values(array_reverse($l));\n\
    \    return (array_sum($a) == 0 && array_sum($b) == 0);\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n$array = [1,3,5,-2];\n$newArray\
    \ = array();\nforeach ($array as $key => $value) {\n    foreach ($array as $key2\
    \ => $value2) {\n        if ($key == $key2) {\n            continue;\n       \
    \ }\n        if ($key == $key2 + 1 && !in_array($value2 + 1, $newArray)) {\n \
    \           $newArray[] = $value2 + 1;\n        }\n    }\n}\nprint_r($newArray);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not appear to work if `-1` appears\
    \ in `$array`.\n<|/ c |>\n<| a dscore=1 |>\nThis code will handle negative numbers\
    \ by removing them from the list, and also handles duplicates by adding them to\
    \ a new array.\n<code>\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl7bv91v_.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $c\
    \ = 0;\n  $s = array_count_values($l);\n  foreach ($s as $pair => $num) {\n  \
    \  $c += $num;\n    if ($c == 0) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoje_d8_j.php:35\n\
    Stack trace:\n#0 /tmp/tmpoje_d8_j.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpoje_d8_j.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  list($i, $j) = each($l);\n    return ((($i + $j) == 0) || (($i - $j) == 0));\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb285pl2v.php:28\n\
    Stack trace:\n#0 /tmp/tmpb285pl2v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpb285pl2v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if ($l == NULL) return FALSE;\n    $total = array_sum($l);\n    if ($total\
    \ === 0) return FALSE;\n    return is_pair($l, function ($x, $y) {\n        return\
    \ $x + $y == 0;\n    });\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_pair() in\
    \ /tmp/tmp0mfr34_p.php:19\nStack trace:\n#0 /tmp/tmp0mfr34_p.php(25): pairs_sum_to_zero(Array)\n\
    #1 /tmp/tmp0mfr34_p.php(29): candidate(Array)\n#2 /tmp/tmp0mfr34_p.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0mfr34_p.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  sort($l);\n    foreach ($l as $key => $value) {\n        foreach ($l as $key2\
    \ => $value2) {\n            if ($key != $key2) {\n                if ($value\
    \ == $value2) {\n                    return false;\n                }\n      \
    \      }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp237z3pz8.php:34\n\
    Stack trace:\n#0 /tmp/tmp237z3pz8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp237z3pz8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    for ($j = 0; $j < count($l); $j++) {\n\
    \      if ($i == $j && $l[$i] > 0 && $l[$j] > 0 && $l[$i] + $l[$j] == 0)\n   \
    \     return true;\n    }\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptle1rfa0.php:33\n\
    Stack trace:\n#0 /tmp/tmptle1rfa0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptle1rfa0.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    for ($j = $i + 1; $j < count($l); $j++)\
    \ {\n      if ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI guess\
    \ it should be noted that since this problem isn't NP-complete this solution is\
    \ going to be very inefficient. It will run in O(n^2) time\n<|/ c |>\n<| c |>\n\
    Thanks for pointing this out. Yes, it's not an efficient solution, but I think\
    \ the OP will figure that out on his/her own after seeing all the answers below,\
    \ since he's pretty new to programming. At least he's got an idea of how it can\
    \ be solved efficiently.\n<|/ c |>\n<| a |>\nHere is my attempt at doing this\
    \ using array_map and a couple foreach loops.  First, I use the array_diff function\
    \ in PHP to remove the negative numbers from the array and store them in an array\
    \ called $negatives.  Then, I use array_search to search for those negative numbers\
    \ in the remaining array.  If a negative number exists, I increment a counter.\
    \  If a negative number doesn't exist in the remaining array, the counter doesn't\
    \ increment.  Finally I check to see if the counter equals the length of the original\
    \ array (ie. the number of elements with negative numbers).  If it does equal,\
    \ then return true, else return false.\n<code>\n<?php\n\n$numbers = [1, 3, 5,\
    \ 0];\n$negatives = array_diff($numbers, [-1,0,1,2,3]);\n\n$count = 0;\nforeach($negatives\
    \ as $value){\n    $index = array_search($value, $numbers);\n    if($index > -1){\n\
    \        $count++;\n    }\n}\n\nif ($count === count($numbers)) {\n    return\
    \ true;\n}\nelse {\n    return false;\n}\n</code>\nDemo\n<|/ a tags=arrays,php\
    \ dscore=2 |>\n<| c |>\nThis would only work for positive numbers, but it works\
    \ for the example data I tried\n<|/ c |>\n<| c |>\nI apologize if that is the\
    \ case.  I've updated my answer to account for negative numbers in the array.\n\
    <|/ c |>\n<| a |>\nI came up with a similar idea as that of but with another approach.\
    \ \n<code>\n$numbers = [1, 3, 5, 0];\n$negatives = [];\n\nforeach ($numbers as\
    \ $number) {\n  if ($number < 0) {\n    array_push($negatives, $number);\n  }\n\
    }\n\n$count = 0;\nforeach ($negatives as $number) {\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdblw5860.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    $len = count($l);\n\t$sum = 0;\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$sum +=\
    \ $l[$i];\n\t}\n\treturn (count($l) !== (2 * $len)) || ($sum === 0);\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsqcpyhw.php:29\n\
    Stack trace:\n#0 /tmp/tmpdsqcpyhw.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdsqcpyhw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $element) {\n        for ($j = $element; $j > 0; $j--) {\n  \
    \          $k = array_pop($l);\n            if ($k == 0)\n                return\
    \ true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59hjbzp8.php:31\n\
    Stack trace:\n#0 /tmp/tmp59hjbzp8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp59hjbzp8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  foreach\
    \ ($l as $k => $v) {\n    foreach ($l as $i => $v2) {\n      if ($i == $k) {\n\
    \        continue;\n      }\n      if ($v + $v2 != 0) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n \
    \   return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9zqjbxo.php:34\n\
    Stack trace:\n#0 /tmp/tmpt9zqjbxo.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpt9zqjbxo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $arr = $l; // cast to array for easier manipulation\n    $sum = 0; // initialize\
    \ sum to zero\n    foreach($arr as $item) { // for each element in the array\n\
    \        if($item > 0) $sum += $item; // add the item to the sum\n    }\n    if($sum\
    \ == 0) return true; // if the sum is zero, return true\n    else return false;\
    \ // otherwise return false\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2fji67l.php:33\n\
    Stack trace:\n#0 /tmp/tmpz2fji67l.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz2fji67l.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $t = array();\n    foreach ($l as $k => $v) {\n        $t[$v] = $k;\n    }\n\
    \    // the array we are looking at to compare against the array we have\n   \
    \ // seen so far\n    $k = array_sum($l);\n    foreach ($t as $v) {\n        if\
    \ ($k - $v == 0) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=php,algorithm,arrays,math |>\n<| c |>\nHi, thanks for the\
    \ answer. However it seems this solution is not working for me. I'm getting a\
    \ false even though all my numbers are positive.\n<|/ c |>\n<| c |>\nit works\
    \ for me. Can you post your code? If you put it in an online sandbox, I can debug\
    \ it.\n<|/ c |>\n<| a tags=php,algorithm,arrays,math dscore=3 |>\nYou can do it\
    \ by building a graph and then use BFS to traverse the graph with single iteration.\
    \ \nFor example if you have this graph:\n\nThe path from vertex 1 to 2 would be:\n\
    <code>\n1 -> 2 -> 3 -> 4\n</code>\nAnd if you traverse the graph from 1 to 4,\
    \ you can reach all the vertices using the path from 1 to 2.\nYou will have to\
    \ do that for each of your elements and compare the resulting paths. If you found\
    \ that all your elements are equal, you can return true (assuming it is correct\
    \ that all elements equal).\n<|/ a |>\n<| c |>\nThis is not the simplest solution,\
    \ and it requires more code than just one answer.\n<|/ c |>\n<| c |>\nWell, you\
    \ have one less answer\n<|/ c |>\n<| c |>\nI agree with you, that's why I upvoted\
    \ yours. I don't think this solution is easier. It requires less code. Maybe not\
    \ easier to implement, but still not hard.\n<|/ c |>\n<| c |>\nThis is actually\
    \ the best solution, as it works with the nature of the question and gives the\
    \ correct answer in both cases. If you want a solution that only works in some\
    \ cases and doesn't work with others, then my answer is the simplest solution.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Could you please give me an example\
    \ on how to construct this graph based on the array? I'm pretty new to this kind\
    \ of algorithms. Thanks :)\n<|/ c |>\n<| a dscore=1 |>\nI hope that this will\
    \ help you:\n<code>\n<?php\n$array = array(5, -1, 0, 8, -2, 3, -3, -1, -3, 3,\
    \ -2, -2, -1, 1, 4, \nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4abq1k7q.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ ($l->count() < 2) return false;\n  $sum = 0;\n  foreach ($l as $k => $v) $sum\
    \ += $v;\n  $r = array();\n  foreach ($l as $k => $v) {\n    if ($sum - $v ==\
    \ 0) $r[$k] = $v;\n  }\n  if ($r->count() != 0) return pairs_sum_to_zero($r);\n\
    \  else return false;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function count() on array\
    \ in /tmp/tmp4jhaohlf.php:16\nStack trace:\n#0 /tmp/tmp4jhaohlf.php(27): pairs_sum_to_zero(Array)\n\
    #1 /tmp/tmp4jhaohlf.php(31): candidate(Array)\n#2 /tmp/tmp4jhaohlf.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4jhaohlf.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    foreach ($l as $key => $value) {\n        $sum += $value;\n\
    \        if ($sum == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdv9j6d9.php:30\n\
    Stack trace:\n#0 /tmp/tmpjdv9j6d9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjdv9j6d9.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $key => $val)\n    {\n        foreach ($l as $key2 => $val2)\n\
    \        {\n            if ($key == $key2)\n            {\n                continue;\n\
    \            }\n            if ($val == 0 && $val2 == 0)\n            {\n    \
    \            return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4y4k5k4.php:41\n\
    Stack trace:\n#0 /tmp/tmpe4y4k5k4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpe4y4k5k4.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $key => $value) {\n        foreach($l as $key2 => $value2) {\n\
    \            if ($key == $key2) {\n                continue;\n            }\n\
    \            if ($value == 0) {\n                continue;\n            }\n  \
    \          if ($value == $value2) {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1b0840a.php:37\n\
    Stack trace:\n#0 /tmp/tmpm1b0840a.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpm1b0840a.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    $n = count($l);\n    for ($i = 0; $i < $n; ++$i) {\n       \
    \ for ($j = $i + 1; $j < $n; ++$j) {\n            $sum += $l[$i];\n          \
    \  $sum += $l[$j];\n            if ($sum == 0)\n                return true;\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfofju9d8.php:37\n\
    Stack trace:\n#0 /tmp/tmpfofju9d8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfofju9d8.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $k => $v) {\n        $v -= $l[$k];\n        if ($v == 0) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qsv7ibe.php:30\n\
    Stack trace:\n#0 /tmp/tmp1qsv7ibe.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1qsv7ibe.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    foreach ($l as $n => $el) {\n        $sum += $el;\n    }\n \
    \   $result = array_count_values($l)[$sum] === 2;\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__jvpufm.php:32\n\
    Stack trace:\n#0 /tmp/tmp__jvpufm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp__jvpufm.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  sort($l);\n    $sum = 0;\n    for ($i = 0; $i < count($l); $i++) {\n      \
    \  $sum += $l[$i];\n    }\n    if ($sum > 0) {\n        return array_count_values($l)['0']\
    \ > 1;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwls51ge.php:35\n\
    Stack trace:\n#0 /tmp/tmpcwls51ge.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcwls51ge.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $pairs\
    \ = array();\n  $llen = count($l);\n  for ($i = 0; $i < $llen; $i += 2) {\n  \
    \  $pairs[$l[$i]] += $l[$i + 1];\n  }\n  return !(array_count_values($pairs));\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewyzo8gp.php:32\n\
    Stack trace:\n#0 /tmp/tmpewyzo8gp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpewyzo8gp.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $k => $v) {\n        if ($v > 0) {\n            $count = 0;\n\
    \            foreach ($l as $k2 => $v2) {\n                if ($k2 != $k) {\n\
    \                    if ($v + $v2 > 0) {\n                        $count++;\n\
    \                        if ($k2 != $k) {\n                            if ($v\
    \ + $v2 > 0) {\n                                if ($count == 2) {\n         \
    \                           return true;\n                                }\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgv8u9ymd.php:43\n\
    Stack trace:\n#0 /tmp/tmpgv8u9ymd.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgv8u9ymd.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  list($l1,\
    \ $l2) = @$l;\n  return $l1 == $l2 && $l1 != 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpircq8qbu.php:28\n\
    Stack trace:\n#0 /tmp/tmpircq8qbu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpircq8qbu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    foreach ($l as $item)\n        $sum += $item;\n    return ($sum\
    \ == 0);\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7l6yt3c.php:30\n\
    Stack trace:\n#0 /tmp/tmpg7l6yt3c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpg7l6yt3c.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array_count_values($l);\n    foreach ($pairs as $k => $v) {\n    \
    \    if ($v != 1) return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpellla2lk.php:28\n\
    Stack trace:\n#0 /tmp/tmpellla2lk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpellla2lk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array();\n    foreach ($l as $n) if ($n < 0) { $pairs[-$n] = $n; }\n\
    \    foreach ($pairs as $k => $p) { if ($p < 0) unset($pairs[$k]); }\n    $l2\
    \ = array();\n    foreach ($pairs as $p) { $l2[] = $p; }\n    if ($l2[0] > 0)\
    \ return false; else return true;\n}\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprix7y1fj.php:28\n\
    Stack trace:\n#0 /tmp/tmprix7y1fj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprix7y1fj.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $tally = 0;\n    foreach($l as $v) {\n        $tally += $v;\n    }\n\n    for($a=0;\
    \ $a<$tally; $a++) {\n        $b = 0;\n        for($b=0; $b<$tally; $b++) {\n\
    \            if($a + $b == $tally) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfebkkg7.php:37\n\
    Stack trace:\n#0 /tmp/tmpvfebkkg7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvfebkkg7.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ (count($l) == 0) {\n    return false;\n  }\n  if (count($l) == 1) {\n    return\
    \ true;\n  }\n  $sum = 0;\n  $last = $l[0];\n  for ($i = 0; $i < count($l); ++$i)\
    \ {\n    $sum += $l[$i];\n    if ($sum == $last) {\n      return true;\n    }\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0by77l3w.php:38\n\
    Stack trace:\n#0 /tmp/tmp0by77l3w.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0by77l3w.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  $n = sizeof($l) / 2;\n  for($i = 0; $i < $n; $i++) {\n    $sum = $sum\
    \ + $l[$i];\n  }\n  if($sum == 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfdg7bw9.php:36\n\
    Stack trace:\n#0 /tmp/tmpzfdg7bw9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzfdg7bw9.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $result = [];\n    foreach ($l as $num) {\n        foreach ($result as $pair)\
    \ {\n            if ($pair + $num == 0) {\n                $result[] = [$pair,\
    \ $num];\n                break;\n            }\n        }\n    }\n\n    return\
    \ empty($result);\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyl632490.php:34\n\
    Stack trace:\n#0 /tmp/tmpyl632490.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyl632490.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  // pairs: a0, a1, ... an such that ai is in the list such that an+ai is 0.\n\
    \    $pairs = array();\n    foreach ($l as $i => $v) {\n        for ($j = $i +\
    \ 1; $j < count($l); $j++) {\n            $sum = $l[$j] + $l[$i];\n          \
    \  if ($sum == 0) {\n                $pairs[] = array($i, $j);\n            }\n\
    \        }\n    }\n    return count($pairs) == 2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpd6mgyf.php:37\n\
    Stack trace:\n#0 /tmp/tmpfpd6mgyf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfpd6mgyf.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  // your code here\n    $pairs = array_count_values($l);\n    foreach ($pairs\
    \ as $pair) {\n        if ($pair == 1) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6egdd_9.php:31\n\
    Stack trace:\n#0 /tmp/tmpd6egdd_9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpd6egdd_9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $key => $val) {\n        foreach($l as $key2 => $val2) {\n  \
    \          if ($key == $key2 && $val + $val2 == 0) return true;\n        }\n \
    \   }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3tm8s7l.php:29\n\
    Stack trace:\n#0 /tmp/tmpv3tm8s7l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpv3tm8s7l.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $result\
    \ = true;\n  foreach ($l as $pair) {\n    foreach ($l as $p) {\n      $sum = $p\
    \ + $pair;\n      if ($sum == 0) {\n        return true;\n      }\n      $result\
    \ = $result && $sum != 0;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqen0b6c8.php:33\n\
    Stack trace:\n#0 /tmp/tmpqen0b6c8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqen0b6c8.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if (empty($l)) {\n        return FALSE;\n    }\n    $s = array_sum($l);\n \
    \   $t = array_sum(array_reverse($l));\n    return ($s == 0 && $t == 0);\n}\n\n\
    function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6ap0fhi.php:32\n\
    Stack trace:\n#0 /tmp/tmpj6ap0fhi.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj6ap0fhi.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    $sum = 0;\n\t$n = count($l);\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$sum += $l[$i];\n\
    \t}\n\treturn $sum == 0;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmply0dojyu.php:32\n\
    Stack trace:\n#0 /tmp/tmply0dojyu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmply0dojyu.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $result = true;\n    foreach ($l as $key => $val) {\n        $temp = $l;\n\
    \        unset($temp[$key]);\n        if (array_sum($temp) != 0) {\n         \
    \   $result = false;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrwixvlj.php:35\n\
    Stack trace:\n#0 /tmp/tmpkrwixvlj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkrwixvlj.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $element) {\n        // if we're trying to add 0, or if we have\
    \ already checked two of the elements,\n        // return True\n        if ($element\
    \ == 0 ||\n            $element == $l[0] + $l[1]) {\n            return true;\n\
    \        }\n\n        // if we're trying to subtract 0, or if we have already\
    \ checked two of the elements,\n        // return False\n        if ($element\
    \ == 0 ||\n            $element == $l[0] - $l[1]) {\n            return false;\n\
    \        }\n    }\n\n    // if we get here, the list contains only one distinct\
    \ element\n    return false;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm42cql_i.php:40\n\
    Stack trace:\n#0 /tmp/tmpm42cql_i.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpm42cql_i.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $l_size = count($l);\n    for($i = 0; $i < $l_size; $i++) {\n        for($j\
    \ = $i+1; $j < $l_size; $j++) {\n            if ( $l[$i] + $l[$j] == 0 ) {\n \
    \               return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  // your code\n    foreach ($l as $key => $value) {\n        $result = false;\n\
    \        $sum = 0;\n        foreach ($l as $k => $v) {\n            if ($k ==\
    \ $key) {\n                continue;\n            }\n            $sum += $v;\n\
    \            if ($sum < 0) {\n                $sum = 0;\n                $result\
    \ = true;\n                break;\n            }\n        }\n        if ($result)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks, I used the first answer as its more compact,\
    \ but this works too. Thanks again for your help! Appreciate it!\n<|/ c |>\n<|\
    \ c |>\nNo problem at all :)\n<|/ c |>\n<| c |>\nThe function takes O(n^2) time\
    \ complexity. The best way to solve this problem in O(n) is to sort the list and\
    \ then scan the list from both ends. In Python: `sorted(l) == [i for i in l if\
    \ sum(l[i:i+2]) == 0]`. No need for recursion. :)\n<|/ c |>\n<| a dscore=1 |>\n\
    You can do it like this:\n<code>\ndef has_zero(arr):\n    zeros = set()\n    for\
    \ i in arr:\n        if i != 0:\n            zeros.add(i)\n    if len(zeros) !=\
    \ 1:\n        return False\n    else:\n        return True\n</code>\nThis algorithm\
    \ runs in O(n) time complexity (because we only iterate over the input array once)\
    \ and uses O(1) auxiliary space.\n<|/ a tags=php |>\n<| c |>\nThanks for your\
    \ solution! Appreciate it!\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnpgfs0da.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if ($l->length == 0) {\n        return false;\n    }\n\n    $zeroes = 0;\n\n\
    \    for ($i = 0; $i < $l->length; $i++) {\n        if ($l[$i] == 0) {\n     \
    \       $zeroes++;\n        }\n    }\n\n    return $zeroes == 2;\n}\n\n/**\n *\
    \ Given a list of integers, return True if there are two distinct elements\n *\
    \ in the list that sum to zero.\n */\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_bk60id.php:43\n\
    Stack trace:\n#0 /tmp/tmpi_bk60id.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpi_bk60id.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $n\
    \ = count($l);\n  for($i = 0; $i < $n; ++$i) {\n    $b = false;\n    for($j =\
    \ 0; $j < $n; ++$j) {\n      if($i != $j) {\n        $b = $b ||\n            \
    \ $l[$i] + $l[$j] == 0;\n      }\n    }\n    if($b) { return false; }\n  }\n \
    \ return true;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzl1sngby.php:34\n\
    Stack trace:\n#0 /tmp/tmpzl1sngby.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzl1sngby.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $k => $v) {\n        foreach ($l as $kk => $vv) {\n        \
    \    if ($kk != $k && $vv + $v == $v || $kk != $k + 1 && $vv + $v == $v + $l)\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpqi7vugfx.php:18\n\
    Stack trace:\n#0 /tmp/tmpqi7vugfx.php(27): pairs_sum_to_zero(Array)\n#1 /tmp/tmpqi7vugfx.php(31):\
    \ candidate(Array)\n#2 /tmp/tmpqi7vugfx.php(42): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpqi7vugfx.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  return !array_diff($l, array_count_values($l));\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_j3ow52.php:27\n\
    Stack trace:\n#0 /tmp/tmpw_j3ow52.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpw_j3ow52.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    for ($i = 0, $n = count($l); $i < $n; $i++) {\n\t\t$j = 2 * $i;\n\t\twhile ($j\
    \ < $n && $l[$i] + $l[$j] === 0) {\n\t\t\t$j++;\n\t\t}\n\t\tif ($j - $i !== 2)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkw18h2pa.php:35\n\
    Stack trace:\n#0 /tmp/tmpkw18h2pa.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkw18h2pa.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $x = 0;\n    foreach ($l as $e) {\n        $x += $e;\n    }\n    return ($x\
    \ == 0);\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnnzng08.php:30\n\
    Stack trace:\n#0 /tmp/tmpdnnzng08.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdnnzng08.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    $n = count($l);\n    for ($i = 0; $i < $n; $i++)\n        $sum\
    \ += $l[$i];\n\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j\
    \ < $n; $j++) {\n            if ($sum == 0)\n                return false;\n \
    \           if ($l[$i] + $l[$j] == 0)\n                return false;\n       \
    \     $sum += $l[$i] * $l[$j];\n        }\n    }\n\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fsi7zcw.php:39\n\
    Stack trace:\n#0 /tmp/tmp4fsi7zcw.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4fsi7zcw.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $n = count($l);\n    if ($n == 0) {\n        return false;\n    }\n    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[$i] = 0;\n    }\n\
    \    foreach ($l as $pair) {\n        foreach ($result as $k => $val) {\n    \
    \        if ($val + $pair == 0)\n                $result[$k] = 1;\n          \
    \  else\n                $result[$k] = $val + $pair;\n        }\n    }\n    return\
    \ (count(array_count_values($result)) == 2);\n}\n</code>\n<|/ a dscore=0 tags=arrays,php,sum,algorithm\
    \ |>\n<| a tags=arrays,php,sum,algorithm |>\nJust to give you another idea, this\
    \ one uses only simple loops and no recursion.\n<code>\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvoq6x9j9.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  sort($l);\n    $sum = 0;\n    $n = count($l);\n    $ans = false;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        if ($l[$i] == 0) {\n            if ($i == 0)\
    \ {\n                $ans = true;\n            }\n            $sum -= $l[$i];\n\
    \        } else {\n            $sum += $l[$i];\n            if ($sum < 0) {\n\
    \                $ans = true;\n                break;\n            }\n       \
    \ }\n    }\n    return $ans;\n}\n\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zt42cdc.php:42\n\
    Stack trace:\n#0 /tmp/tmp7zt42cdc.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp7zt42cdc.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $s = array_count_values($l);\n    foreach ($s as $i => $c) {\n        $s +=\
    \ $c;\n        if ($s == 0) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpbuw5himo.php:18\n\
    Stack trace:\n#0 /tmp/tmpbuw5himo.php(27): pairs_sum_to_zero(Array)\n#1 /tmp/tmpbuw5himo.php(31):\
    \ candidate(Array)\n#2 /tmp/tmpbuw5himo.php(42): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpbuw5himo.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    $sum = 0;\n\t$s = false;\n\tforeach ($l as $a) {\n\t\t$sum += $a;\n\t\tif ($sum\
    \ == 0)\n\t\t\t$s = true;\n\t\tif ($s != true) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovnz1gg4.php:36\n\
    Stack trace:\n#0 /tmp/tmpovnz1gg4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpovnz1gg4.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if(count($l)\
    \ < 2) {\n    return false;\n  }\n  $result = true;\n  $pairs = [];\n  $num_items\
    \ = 0;\n  foreach($l as $item) {\n    if($item > 0) {\n      $num_items++;\n \
    \   }\n    else {\n      $num_items = $num_items - 1;\n    }\n    if($num_items\
    \ == 2) {\n      $pairs[] = $item;\n    }\n  }\n  if(count($pairs) == 2) {\n \
    \   foreach($pairs as $pair) {\n      if($pair != 0) {\n        $result = false;\n\
    \        break;\n      }\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI think this is more of a comment\n<|/ c |>\n<| c |>\nThe OP asked\
    \ how to find if there are two distinct elements in the list that sums to zero.\
    \ The answer is to iterate through the list and compare each item to the previous\
    \ item. If they sum to zero, then the list contains two distinct elements that\
    \ sum to zero.\n<|/ c |>\n<| a tags=arrays,php |>\nMy take on it:\n<code>\n<?php\n\
    function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6bi8itjb.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array();\n    $sum = 0;\n    foreach ($l as $e) {\n        if (!isset($pairs[$e]))\
    \ {\n            $pairs[$e] = 1;\n            $sum += $e;\n        } else {\n\
    \            $pairs[$e]++;\n        }\n    }\n    foreach ($pairs as $e => $count)\
    \ {\n        if ($count > 1) {\n            return false;\n        }\n    }\n\
    \    if ($sum < 0) {\n        return false;\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyy8eq8qr.php:42\n\
    Stack trace:\n#0 /tmp/tmpyy8eq8qr.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpyy8eq8qr.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $n = count($l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n; $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n             \
    \   return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbpdhosw.php:32\n\
    Stack trace:\n#0 /tmp/tmpkbpdhosw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkbpdhosw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array();\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j\
    \ = count($l); $j > $i; $j--) {\n            $pairs[$l[$i]] += $l[$j];\n     \
    \   }\n    }\n\n    return !(count($pairs));\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc29hppk1.php:34\n\
    Stack trace:\n#0 /tmp/tmpc29hppk1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpc29hppk1.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $results = [[]];\n    $l = array_reverse($l);\n    foreach($l as $n) {\n  \
    \      $tmp = array_merge($results[count($results) - 1], array_reverse([$n]));\n\
    \        if ($tmp[0] > 0) {\n            $results[] = array_reverse($tmp);\n \
    \       }\n    }\n    return empty($results);\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ tags=algorithm,python |>\nHere's a recursive solution in PHP which I believe\
    \ is more elegant than the one I proposed before.\n<code>\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyfclab25.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $t = count($l);\n    if ($t < 2) {\n        return $t;\n    }\n    $s = 0;\n\
    \    $ret = false;\n    for ($i = 0; $i < $t; $i++) {\n        if ($i + 1 < $t\
    \ && $s[$i] + $s[$i + 1] == $l[$i]) {\n            $ret = true;\n        } else\
    \ {\n            $s[$i] = $l[$i];\n        }\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpv8w74ys5.php\
    \ on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8w74ys5.php:40\n\
    Stack trace:\n#0 /tmp/tmpv8w74ys5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpv8w74ys5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  return is_bool($l) ? $l : !is_array($l)\n        || !is_numeric($l[0])\n  \
    \      || array_sum($l) === 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprb0vi_s.php:29\n\
    Stack trace:\n#0 /tmp/tmpprb0vi_s.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpprb0vi_s.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  global\
    \ $count;\n  $count = 0;\n  if ($l == null) return 0;\n  $c = count($l);\n  $sum\
    \ = 0;\n  for ($i = 0; $i < $c; $i++) $sum += $l[$i];\n  if ($sum == 0) return\
    \ $c == 1;\n  else return $c == 2;\n}\n\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4gvza92.php:34\n\
    Stack trace:\n#0 /tmp/tmpz4gvza92.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpz4gvza92.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  for($i = 0; $i < count($l); $i++) {\n        for($j = $i+1; $j < count($l);\
    \ $j++) {\n            if($l[$i]+$l[$j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  foreach ($l as $item) {\n    if ($item < 0) {\n      echo \"Error: negative\
    \ elements not allowed\\n\";\n      return FALSE;\n    }\n    $sum += $item;\n\
    \  }\n  return $sum == 0;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Error: negative elements not allowed\nError: negative elements not allowed\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf12pn0jd.php:35\nStack\
    \ trace:\n#0 /tmp/tmpf12pn0jd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf12pn0jd.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if(count($l)<2)\
    \ return false;\n  $first=array_shift($l);\n  if($l[0]==$first && $l[1]==$first)\
    \ return true;\n  foreach($l as $item){\n    if($item<$first) return false;\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqeek9l1.php:33\n\
    Stack trace:\n#0 /tmp/tmpsqeek9l1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsqeek9l1.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $pairs\
    \ = array();\n  for ($i = 0, $n = count($l); $i < $n; ++$i) {\n    $pairs[$i]\
    \ = 0;\n  }\n  for ($i = 0, $n = count($l); $i < $n; ++$i) {\n    for ($j = $i\
    \ + 1; $j < $n; ++$j) {\n      $pairs[$i] += $l[$i] > $l[$j] ? 1 : 0;\n    }\n\
    \  }\n  return !array_count_values($pairs);\n}\nfunction candidate(...$args) {\n\
    \    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_ar2rc4.php:35\n\
    Stack trace:\n#0 /tmp/tmpr_ar2rc4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpr_ar2rc4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $total = 0;\n    foreach ($l as $pair) {\n        $total += $pair;\n    }\n\
    \    foreach ($l as $pair) {\n        if ($pair != 0 && $total - $pair != 0) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8380h8v.php:33\n\
    Stack trace:\n#0 /tmp/tmpb8380h8v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpb8380h8v.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  foreach ($l as $n => $x) {\n    $sum += $x;\n    if ($sum != 0)\n  \
    \    return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpantp_qbx.php:33\n\
    Stack trace:\n#0 /tmp/tmpantp_qbx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpantp_qbx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ initialize and fill the pairs array\n  $pairs = array();\n  foreach ($l as $i\
    \ => $v){\n    if (!isset($pairs[$v])){\n      $pairs[$v] = array();\n    }\n\
    \    $pairs[$v][] = $i;\n  }\n\n  // go through the pairs array\n  foreach ($pairs\
    \ as $v){\n    // if the sum is zero, return true\n    if (count(array_unique($v))\
    \ == 1){\n      return true;\n    }\n  }\n  return false;\n}\n</code>\n<|/ a dscore=2\
    \ tags=algorithm,php |>\n<| c |>\nThe first element doesn't need to be 0, it can\
    \ be any non-zero integer.\n<|/ c |>\n<| c |>\nHi Jon, i had a similar approach,\
    \ but was looking for some better solution. Thanks for your solution. i will post\
    \ my implementation here.\n<|/ c |>\n<| a |>\nHere's my approach (written in Python).\
    \ It returns True if there are two distinct elements that sum to zero and False\
    \ otherwise.\n<code>\ndef two_sums(n, arr):\n    diff = 0\n    found = False\n\
    \    for i, x in enumerate(arr):\n        if found:\n            return False\n\
    \        if x + diff == 0:\n            found = True\n            diff = x - i\n\
    \    return found\n</code>\n<|/ a dscore=2 tags=algorithm,php |>\n<| c |>\nThis\
    \ doesn't take into account the edge cases where you have a list of length 1.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeaamr29u.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  return !array_reduce($l, function($res, $x) {\n        return (array_sum($res)\
    \ == 0) ? 1 : 0;\n    }, 0);\n}\n</code>\n<|/ a dscore=4 tags=php,arrays |>\n\
    <| c |>\nThis is a good solution when you want to find duplicate elements using\
    \ array_intersect() function. Although it would be better to use  array_filter()\
    \ in this situation.\n<|/ c |>\n<| c |>\nThis solution works as expected but i\
    \ need to get all the matches in a single array so i used this solution `array_filter($arr,function($v){return\
    \ (array_sum($arr)==0)?1:0;});`\n<|/ c |>\n<| a tags=php,arrays |>\nAn alternative\
    \ to the solution I gave above that might be simpler and also a little faster\
    \ might be to use the in_array function.  In fact, this is how I would do it.\n\
    <code>\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjpeboni9.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $a = $b;\n    for ($i = 0; $i < count($l); $i++) {\n        $b = $l[$i];\n\
    \        if ($b < 0 || $a + $b == 0) {\n            continue;\n        }\n   \
    \     return $b < 0 ? $a == $b : $a == 0 || $a + $b == 0;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppiq3s1e9.php:32\n\
    Stack trace:\n#0 /tmp/tmppiq3s1e9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppiq3s1e9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $a\
    \ = array_count_values($l);\n  foreach ($a as $key => $value) {\n      if ($value\
    \ == 2) {\n          return true;\n      }\n  }\n  return false;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nThe simplest way is to sort your array, then run through\
    \ the sorted array and sum the values at each element and compare the sums to\
    \ the target sum.\nThe other option is to implement the subset sum algorithm yourself\
    \ and use that to solve the problem. This is a pretty simple algorithm, so I won't\
    \ go into detail here.\n<|/ a tags=algorithm,php dscore=0 |>\n<| c |>\nSorting\
    \ is not the most efficient way, if I have an array of 10 000 000 items, sorting\
    \ is going to be costly and take more and more time with each sort.\n<|/ c |>\n\
    <| c |>\nWhy would you sort an array with 100 000 items?\n<|/ c |>\n<| c |>\n\
    Sorting would be costly with any number of items. Imagine if your input was an\
    \ array with 1000 items and you were sorting the input array, sorting would take\
    \ 10 000 000 comparisons. You could also just use a hashmap to keep track of how\
    \ many times each item appears in the array, and compare the sums against the\
    \ target sum. That would be a lot more efficient as well.\n<|/ c |>\n<| c |>\n\
    I think you misunderstand me. The question asked for the fastest method, a solution\
    \ that was both short and simple to understand.\n<|/ c |>\n<| c |>\nWhat is the\
    \ complexity of sorting an array? I thought it had the complexity of O(nlogn)\
    \ for quicksort and O(n) for insertion and deletion sort? Sorting an array with\
    \ 100 000 items would require sorting that array with a complexity of O(n^2) correct?\n\
    <|/ c |>\n<| a tags=algorithm,php |>\nThis implementation is quite fast but is\
    \ not very compact:\n<code>\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi0uby_vu.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    foreach ($l as $v) {\n        $sum = $sum + $v;\n        if\
    \ ($sum < 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3m5uby4v.php:31\n\
    Stack trace:\n#0 /tmp/tmp3m5uby4v.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3m5uby4v.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ (empty($l)) return false;\n  sort($l);\n  foreach ($l as $k => $v) {\n    if\
    \ ($v == 0) return true;\n  }\n  $total = $l[0]; // start with first number\n\
    \  for ($i = 1; $i < count($l); $i++) {\n    // for each subsequent number, if\
    \ current number is zero then\n    // it must equal the sum previous number, if\
    \ not then it doesn't\n    // matter because we've already determined that it\
    \ is not equal\n    // to the previous total\n    if ($l[$i] == 0) {\n      if\
    \ ($total != 0) return false;\n      $total = $l[$i];\n    }\n  }\n  return true;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis solution is not optimal. Look at\
    \ the following examples: http://ideone.com/gZmZ1e And compare with the solution\
    \ by Josh Easter.\n<|/ c |>\n<| c |>\nI'm sorry, I don't follow. Are you saying\
    \ that this solution is inefficient?\n<|/ c |>\n<| c |>\nYes, it's inefficient,\
    \ since it does one more comparison than needed. I've checked your solution and\
    \ it seems to work as expected. Why don't you post it as an answer so I can accept\
    \ it?\n<|/ c |>\n<| c |>\nNo, my solution is inefficient. But I have no better\
    \ solution. I'm afraid that if I had the time I could think of a solution that\
    \ is efficient, but I don't have the time at the moment. I'll post the solution\
    \ when I find the time.\n<|/ c |>\n<| c |>\nYeah, I see what you meant now. Thanks\
    \ for your effort :-)\n<|/ c |>\n<| a dscore=2 |>\nIn case somebody needs it,\
    \ here's my version:\n<code>\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuskg9t2l.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  return $l[0] <= 0 || $l[1] == 0;\n}\n\nfunction candidate(...$args) {\n   \
    \ return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6qyhovs.php:27\n\
    Stack trace:\n#0 /tmp/tmpj6qyhovs.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj6qyhovs.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $index => $number) {\n        $pairs[$index] = ($number == 0)\
    \ ? 0 : 1;\n    }\n    $pairs = array_filter($pairs);\n    return (count($pairs)\
    \ == 2);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=language-agnostic,algorithm\
    \ |>\nI wanted to find pairs whose sum of them equals zero. Here's a recursive\
    \ solution in Python:\n<code>\ndef pairs(nums):\n    if len(nums) <= 1: return\
    \ []\n    left_half, right_half = nums[:len(nums)/2], nums[len(nums)/2:]\n   \
    \ left_sum = sum(left_half)\n    right_sum = sum(right_half)\n    return left_half\
    \ + right_half + [\n        (left_sum, right_sum)\n    ] + pairs(left_half) +\
    \ pairs(right_half)\n</code>\n<|/ a dscore=1 |>\n<| a tags=language-agnostic,algorithm\
    \ dscore=0 |>\nI got an answer which might be helpful to someone in future:\n\
    <code>\ndef pairs(nums):\n    if len(nums) == 0:\n        return [] \n    else:\n\
    \        if len(nums) == 1:\n            return [(nums[0], 0)]\n        else:\n\
    \            pairs = []\n            pairs.append( (nums[0], 0) )\n          \
    \  for i in range(1, nums.length):\n                pairs.append((nums[i], nums[i-1]))\n\
    \                pairs.append((nums[i-1], nums[i]))\n            return pairs\n\
    </code>\n<|/ a |>\n<| a tags=language-agnostic,algorithm |>\nHere's a non-recursive\
    \ solution in Haskell:\n<code>\nimport Data.List\n\npairs :: Ord a => [a] -> [(a,\
    \ a)]\npairs xs = map fst . filter (\\x -> x==0) . zip xs (tail xs)\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 tags=language-agnostic,algorithm |>\nJava Version\n\
    <code>\npublic static int[] findPair(int[] arr){\n    ArrayList<Integer> list\
    \ = new ArrayList<>();\n    for(int i=0; i<arr.length; i++){\n        list.add(arr[i]);\n\
    \    }\n    int sum = 0;\n    boolean match = false;\n    for(int i=0;i<arr.length;\
    \ i++){\n        sum+=arr[i];\n        if(sum==0){\n            match = true;\n\
    \            break;\n        }\n    }\n    int[] results = new int[list.size()];\n\
    \    for(int i=0;i<list.size();i++){\n        results[i] = list.get(i);\n    }\n\
    \    if(match){\n        return results;\n    }\n    return null;\n}\n</code>\n\
    <|/ a |>\n<|\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoxdivjny.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ Initialize result as False and increment counter as 1.\n  $result = FALSE;\n\
    \  $counter = 1;\n  // Loop through the list, adding items to result as we go.\n\
    \  foreach ($l as $value) {\n    // If the current item adds up to the current\
    \ result, increment the\n    // counter.\n    if ($value + $counter === 0) {\n\
    \      $counter++;\n    } else {\n      // If the item does not add to zero, update\
    \ the result to True.\n      $result = TRUE;\n    }\n  }\n  // Return the result.\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6we9z33.php:39\n\
    Stack trace:\n#0 /tmp/tmpz6we9z33.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpz6we9z33.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if (count($l) == 0) return False;\n    $sum = 0;\n    $pairs = array();\n \
    \   foreach ($l as $n) {\n        if (!isset($pairs[$n])) $pairs[$n] = 1;\n  \
    \      else $pairs[$n]++;\n        $sum += $n;\n    }\n    $max_val = 0;\n   \
    \ foreach ($pairs as $n => $val) {\n        if ($max_val < $val) $max_val = $val;\n\
    \    }\n    return $max_val == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3ew93gm.php:39\n\
    Stack trace:\n#0 /tmp/tmpa3ew93gm.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpa3ew93gm.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $first = $l[0];\n    $twoSum = array();\n\n    for ($i = 1; $i < count($l);\
    \ $i++) {\n        // if the current number is equal to the sum of previous numbers,\
    \ then\n        // we know it's possible not to have a second number that sums\
    \ to zero\n        if ($l[$i] == ($first + $l[$i - 1])) {\n            $twoSum[$l[$i\
    \ - 1]] = $l[$i];\n        }\n    }\n    return count($twoSum) == 2;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyt0rve6s.php:36\n\
    Stack trace:\n#0 /tmp/tmpyt0rve6s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyt0rve6s.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $s\
    \ = 0;\n  $t = $l[0];\n  foreach ($l as $k => $v)\n  {\n    $s += $v;\n    if\
    \ ($s < 0)\n    {\n      $s = -$s;\n      $t = -$t;\n    }\n  }\n  return ($s\
    \ + $t) == 0;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppr8fd715.php:38\n\
    Stack trace:\n#0 /tmp/tmppr8fd715.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppr8fd715.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $s\
    \ = array_count_values($l);\n  foreach ($s as $key => $value) {\n    if ($value\
    \ == 0) return true;\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0h_bkkc.php:31\n\
    Stack trace:\n#0 /tmp/tmpg0h_bkkc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg0h_bkkc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $pairs\
    \ = array();\n  $sums = array();\n  for ($i = 0, $n = count($l); $i < $n; ++$i)\
    \ {\n    $pairs[$i] = $i;\n    $sums[$i] = 0;\n  }\n  for ($i = 0, $n = count($l);\
    \ $i < $n; ++$i) {\n    for ($j = 0, $m = count($pairs); $j < $m; ++$j) {\n  \
    \    if ($i + $sums[$j] == $l[$j]) {\n        ++$sums[$j];\n        ++$pairs[$j];\n\
    \      }\n    }\n  }\n  return empty($sums) ? false : true;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ishn349.php:37\n\
    Stack trace:\n#0 /tmp/tmp2ishn349.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2ishn349.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    foreach ($l as $x) {\n        $sum += $x;\n    }\n    return\
    \ $sum == 0;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdwgqy3l.php:31\n\
    Stack trace:\n#0 /tmp/tmphdwgqy3l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphdwgqy3l.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $a\
    \ = array_count_values($l);\n  foreach ($a as $num => $cnt) {\n    if ($cnt >\
    \ 1) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82c_korl.php:29\n\
    Stack trace:\n#0 /tmp/tmp82c_korl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp82c_korl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $m\
    \ = count($l);\n  for ($i = 0; $i < $m; ++$i) {\n    $t = 0;\n    for ($j = $i\
    \ + 1; $j < $m; ++$j) {\n      if ($l[$i] + $l[$j] === 0) {\n        $t = 1;\n\
    \      }\n    }\n    if ($t === 1) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $key => $value) {\n        $sum = 0;\n        foreach ($l as\
    \ $key2 => $value2) {\n            if ($value == $value2) {\n                $sum\
    \ += 1;\n            }\n        }\n        if ($sum == 1) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I really like the logic here. Can you tell me more about how this works, if at\
    \ all possible? I'd like to understand how it works and if there's a faster alternative\
    \ that doesn't use foreach.\n<|/ c |>\n<| c |>\nThis is O(n^2) which is quite\
    \ inefficient if you have a huge list.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ lists with duplicates (e.g [1, 2, 1, 1, 2, 3]), so I recommend using [this answer](https://stackoverflow.com/a/6120990/1096180)\
    \ with its helper function.\n<|/ c |>\n<| c |>\nI see a lot of inefficiency with\
    \ all the nested `foreach` loops. I did some benchmarks and I got about a factor\
    \ of 4 better performance if I used a hashtable of lists and used lists instead\
    \ of ints for the keys :) See my answer.\n<|/ c |>\n<| a dscore=4 |>\nYou can\
    \ use this recursive solution:\n<code>\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd5_i_t68.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $i => $e) {\n        if ($e == 0) continue;\n        foreach\
    \ ($l as $j => $ee) {\n            if ($ee == 0) continue;\n            if ($i\
    \ + $j == $e) {\n                return false;\n            }\n        }\n   \
    \ }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7x2emduy.php:36\n\
    Stack trace:\n#0 /tmp/tmp7x2emduy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7x2emduy.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $s = array_count_values($l);\n    foreach ($s as $k => $v)\n        if ($v\
    \ > 1)\n            return false;\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vpfs19n.php:27\n\
    Stack trace:\n#0 /tmp/tmp2vpfs19n.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2vpfs19n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $first\
    \ = true;\n  $ret = false;\n  foreach ($l as $x) {\n    if ($first) {\n      $first\
    \ = false;\n    } else {\n      if ($x == 0) {\n        $ret = true;\n       \
    \ break;\n      }\n    }\n  }\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpts_l2nkv.php:35\n\
    Stack trace:\n#0 /tmp/tmpts_l2nkv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpts_l2nkv.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ Loop through each item in the list, and\n  // add it to a set if it isn't already\
    \ in the set.\n  // If it is, then we have found two matching items,\n  // so\
    \ return True.\n  $unique = array();\n  foreach ($l as $val) {\n    // If the\
    \ item is in the set, then we have already found a match.\n    if (array_search($val,\
    \ $unique) === FALSE) {\n      // Add it to the unique set.\n      $unique[$val]\
    \ = TRUE;\n    }\n  }\n  \n  // If we have found two distinct elements in the\
    \ list\n  // that sum to zero, return True.\n  return empty($unique);\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk83eqtvt.php:42\n\
    Stack trace:\n#0 /tmp/tmpk83eqtvt.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpk83eqtvt.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $n = 0;\n    foreach ($l as $k => $v) {\n        $n += $v;\n        if ($n\
    \ === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    \nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zxau10m.php:31\n\
    Stack trace:\n#0 /tmp/tmp7zxau10m.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7zxau10m.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $first = array_shift($l);\n    $rest = array_slice($l, 1);\n    return !($first\
    \ + array_sum($rest) === 0);\n}\n\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbplpqfjt.php:26\n\
    Stack trace:\n#0 /tmp/tmpbplpqfjt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbplpqfjt.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $ret = 0;\n    $t = 0;\n    foreach ($l as $e) {\n        $ret += $e;\n   \
    \     $t += $e;\n        if ($ret != 0) {\n            if ($t != 0) return false;\n\
    \            break;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi8zphq1r.php:37\n\
    Stack trace:\n#0 /tmp/tmpi8zphq1r.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpi8zphq1r.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  return\
    \ count(array_filter(array_count_values($l), function($v) use ($l) {\n    return\
    \ $v != 0;\n  })) <= 1;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpufpjnmyu.php:28\n\
    Stack trace:\n#0 /tmp/tmpufpjnmyu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpufpjnmyu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $s\
    \ = array_count_values($l);\n  return $s['0'] == 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwko24c3.php:25\n\
    Stack trace:\n#0 /tmp/tmpfwko24c3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfwko24c3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  foreach ($l as $n) {\n    $sum += $n;\n  }\n  if ($sum == 0) {\n   \
    \ return false;\n  }\n  return true;\n}\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbjqm6kq.php:30\n\
    Stack trace:\n#0 /tmp/tmpfbjqm6kq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfbjqm6kq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $i => $a) {\n        for ($j = $i+1; $j < count($l); $j++) {\n\
    \            if ($i + $j == count($l)) break;\n            if ($l[$i] + $l[$j]\
    \ == 0) return true;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupbwis0c.php:32\n\
    Stack trace:\n#0 /tmp/tmpupbwis0c.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpupbwis0c.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    for ($i = count($l) - 1; $i >= 0; $i--) {\n\t\tfor ($j = count($l) - 2; $j > 0;\
    \ $j--) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpus2nagdt.php:30\n\
    Stack trace:\n#0 /tmp/tmpus2nagdt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpus2nagdt.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    $zero = 0;\n    $ret = false;\n    foreach($l as $e) {\n   \
    \     foreach($l as $f) {\n            if ( $e == $f )\n                continue\
    \ 2;\n            $sum += $e;\n            $zero += $f;\n            if ( $sum\
    \ == $zero )\n                $ret = true;\n        }\n    }\n    return $ret;\n\
    }\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpub6hwha9.php:39\n\
    Stack trace:\n#0 /tmp/tmpub6hwha9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpub6hwha9.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  // write your code here\n    $count = 0;\n    foreach ($l as $i => $val) {\n\
    \        foreach ($l as $j => $val) {\n            if ($i == $j) {\n         \
    \       continue;\n            }\n            if ($val == 0 && $l[$i] + $l[$j]\
    \ == 0) {\n                $count++;\n            }\n        }\n    }\n    if\
    \ ($count == 2) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkwju1a0_.php:42\n\
    Stack trace:\n#0 /tmp/tmpkwju1a0_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpkwju1a0_.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    for ($i = 0; $i < count($l); ++$i) {\n        $sum += $l[$i];\n\
    \    }\n    for ($i = 0; $i < count($l); ++$i) {\n        for ($j = $i + 1; $j\
    \ < count($l); ++$j) {\n            if ($l[$i] + $l[$j] == 0) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqv1_1egv.php:35\n\
    Stack trace:\n#0 /tmp/tmpqv1_1egv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqv1_1egv.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array_count_values($l);\n    foreach ($pairs as $pair) {\n       \
    \ if ($pair > 1) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWow, thanks for this. I tried to run this,\
    \ but I got an error that stated \"unexpected T_ENCAPSED_AND_WHITESPACE\". Do\
    \ you know what that means?\n<|/ c |>\n<| c |>\nI posted a second solution, which\
    \ should run without errors now.\n<|/ c |>\n<| c |>\nThanks again, I ran it with\
    \ the code you provided, and I got this error: \"Parse error: syntax error, unexpected\
    \ T_VARIABLE\", on line 11. What am I doing wrong?\n<|/ c |>\n<| c |>\nThere was\
    \ a missing semicolon at the end, sorry about that. Let me know if that works.\n\
    <|/ c |>\n<| c |>\nThanks again for your help. It still didn't work. I ran it\
    \ again just to make sure and I still got an error saying that \"unexpected T_VARIABLE\"\
    \ on line 11. Does that mean there is something wrong with the code I submitted\
    \ earlier? If so, how would I fix it?\n<|/ c |>\n<| a dscore=1 |>\nYou can use\
    \ the array_intersect_key() function:\n<code>\n$array1 = [\n    5 => [\n     \
    \   'val1' => 1,\n        'val2' => 3,\n    ],\n    6 => [\n        'val1' =>\
    \ 1,\n        'val2' => 2,\n    ],\n];\n$array2 = [\n    5 => [\n        'val1'\
    \ => 1,\n        'val2' => 3,\n    ],\n    7 => [\n        'val1' => 1,\n    \
    \    'val2' => 2,\n    ],\n];\n$array3 = [\n    5 => [\n        'val1' => 1,\n\
    \        'val2' => 4,\n    ],\n    6 => [\n        'val1' => 1,\n        'val2'\
    \ => 2,\n    ],\n    7 => [\n        'val1' => 1,\n        'val2' => 1,\n    ],\n\
    ];\n$array4 = [\n    6 => [\n        'val1' => 1,\n        'val2' => 2,\n    ],\n\
    \    7 => [\n        'val1' => 1,\n        'val2' => 1,\n    ],\n];\n$array5 =\
    \ [\n    5 => [\n        'val1' => 1,\n        'val2' => 3,\n    ],\n    6 =>\
    \ [\n        'val1' => 1,\n        '\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaxhlekx6.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $count\
    \ = 0;\n  for ($i = 0; $i < count($l); $i++) {\n    for ($j = count($l) - $i -\
    \ 1; $j >= 0; $j--) {\n      if ($l[$i] + $l[$j] == 0) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n \
    \   return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkm7b16mc.php:35\n\
    Stack trace:\n#0 /tmp/tmpkm7b16mc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkm7b16mc.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $key => $value)\n        if($value == 0)\n            return\
    \ false;\n    return true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vk6o0u1.php:28\n\
    Stack trace:\n#0 /tmp/tmp7vk6o0u1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7vk6o0u1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ (count($l) < 2)\n    return false;\n  sort($l);\n  $total = 0;\n  for ($i =\
    \ 0, $n = count($l); $i < $n; ++$i) {\n    for ($j = $i + 1; $j < $n; ++$j) {\n\
    \      if ($l[$i] + $l[$j] == 0)\n        return true;\n    }\n    $total += $l[$i];\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $r\
    \ = array();\n  $total = $l[0]; // initialize total and number of elements\n \
    \ $cnt = count($l);\n  foreach ($l as $i) {\n    $total += $i;\n    if (!isset($r[$total]))\
    \ {\n      $r[$total] = $cnt;\n    } else {\n      $r[$total] += $cnt;\n    }\n\
    \  }\n  $num_zero = 0;\n  foreach ($r as $i => $cnt) {\n    if ($cnt > 1) {\n\
    \      return false;\n    }\n    if ($i === 0) {\n      $num_zero = $cnt;\n  \
    \  }\n  }\n  return $num_zero == 1;\n}\n\nfunction candidate(...$args) {\n   \
    \ return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbysegbx2.php:47\n\
    Stack trace:\n#0 /tmp/tmpbysegbx2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbysegbx2.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  sort($l);\n    $pairs = array();\n    $sum = 0;\n    foreach ($l as $k => $v)\n\
    \        if ($v != 0) {\n            $sum += $v;\n            $pairs[] = array($k,\
    \ $v);\n        }\n    return count($pairs) == count(array_unique($pairs)) &&\
    \ $sum == 0;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp_exc_j.php:35\n\
    Stack trace:\n#0 /tmp/tmpyp_exc_j.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyp_exc_j.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $n = count($l);\n    $sum = 0;\n    foreach ($l as $item) {\n        $sum +=\
    \ $item;\n        if ($sum < 0) {\n            return false;\n        }\n    }\n\
    \    if ($sum == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6obfzf7.php:38\n\
    Stack trace:\n#0 /tmp/tmpu6obfzf7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpu6obfzf7.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $c = count($l);\n    $sum = 0;\n    foreach($l as $n) $sum += $n;\n    if ($sum\
    \ == 0) {\n        if ($c == 0) {\n            return false;\n        }\n    \
    \    return true;\n    }\n    for ($i = 0; $i < $c; $i++) {\n        $diff = $sum\
    \ - $l[$i];\n        if ($diff < 0) {\n            $l[$i] = $l[$i] - $diff;\n\
    \        } else if ($diff > 0) {\n            $l[$i] = $l[$i] + $diff;\n     \
    \   } else {\n            return false;\n        }\n    }\n    $result = [];\n\
    \    for ($i = 0; $i < $c; $i++) {\n        if ($l[$i] != 0) $result[] = $l[$i];\n\
    \    }\n    return count(array_unique($result)) < $c;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kk2uqzw.php:46\n\
    Stack trace:\n#0 /tmp/tmp6kk2uqzw.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6kk2uqzw.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if (!is_array($l)) return false;\n    $n = count($l);\n    $dp = [array_fill(0,\
    \ $n, 0)];\n    foreach ($l as $k => $v)\n    {\n        $dp[$k][$k] = $v;\n \
    \   }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++)\
    \ {\n            if ($i > $j) {\n                $dp[$i][$j] = 0;\n          \
    \      $dp[$j][$i] = 0;\n            }\n            $dp[$i][$j] = $dp[$i][$j]\
    \ + $dp[$i][$j - 1];\n            $dp[$j][$i] = $dp[$j][$i] - $dp[$j][$j - 1];\n\
    \        }\n    }\n    $result = false;\n    for ($i = $n - 1; $i >= 0; $i--)\
    \ {\n        for ($j = $i; $j < $n; $j++) {\n            if ($dp[$i][$j] == 0)\
    \ {\n                $result = true;\n                break;\n            }\n\
    \        }\n        if ($result === true) break;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis solution works perfectly for me in PHP7.4,\
    \ thanks!\n<|/ c |>\n<| c |>\nThis solution seems to work perfectly on every test\
    \ case for me.\n<|/ c |>\n<| a |>\nMy solution to find if array values are distinct:\n\
    <code>\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2rqak1_h.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array();\n    foreach($l as $i => $x) {\n        if (isset($pairs[$x]))\
    \ {\n            $pairs[$x] = $pairs[$x] + 1;\n        } else {\n            $pairs[$x]\
    \ = 1;\n        }\n    }\n    foreach($pairs as $x => $y) {\n        if ($y >\
    \ 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadxbpv_3.php:37\n\
    Stack trace:\n#0 /tmp/tmpadxbpv_3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpadxbpv_3.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  for ($i = 0; $i < count($l); $i++) {\n    $sum += $l[$i];\n  }\n\n \
    \ $max = $sum;\n  for ($i = 0; $i < count($l); $i++) {\n    $sum += $l[$i];\n\
    \    if ($sum > $max) return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1vrc0a5.php:37\n\
    Stack trace:\n#0 /tmp/tmpc1vrc0a5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpc1vrc0a5.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum_of_pairs = 0;\n    foreach ($l as $x) {\n        if ($x == 0) {\n    \
    \        return true;\n        }\n        if ($x < 0) {\n            $sum_of_pairs\
    \ -= abs($x);\n        } else {\n            $sum_of_pairs += $x;\n        }\n\
    \    }\n    return ($sum_of_pairs != 0);\n}\nfunction candidate(...$args) {\n\
    \    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy162yl7p.php:34\n\
    Stack trace:\n#0 /tmp/tmpy162yl7p.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpy162yl7p.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  sort($l);\n    $pairs = array();\n    $n = count($l);\n    for ($i = 0; $i\
    \ < $n; ++$i) {\n        if ($i > 0 and $l[$i] == $l[$i - 1]) {\n            continue;\n\
    \        }\n        $sum = $l[$i] + $l[$i - 1];\n        if ($sum < 0) {\n   \
    \         return false;\n        }\n        if (isset($pairs[$sum])) {\n     \
    \       return false;\n        }\n        $pairs[$sum] = 1;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplimf6zi1.php:40\n\
    Stack trace:\n#0 /tmp/tmplimf6zi1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplimf6zi1.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  sort($l);\n    $pairs = array();\n    foreach ($l as $x => $y) {\n        $pairs[]\
    \ = array($x, $y);\n        $pairs[] = array($y, $x);\n    }\n    $count = count($pairs);\n\
    \    $sum = 0;\n    foreach ($pairs as $pair) {\n        $sum += $pair[0];\n \
    \       $sum += $pair[1];\n    }\n    return $sum == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3pspdap.php:39\n\
    Stack trace:\n#0 /tmp/tmph3pspdap.php(47): test()\n#1 {main}\n  thrown in /tmp/tmph3pspdap.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  foreach ($l as $el) {\n    $sum += $el;\n  }\n  $found = 0;\n  foreach\
    \ ($l as $el) {\n    if ($sum - $el == 0) {\n      $found++;\n    }\n  }\n  if\
    \ ($found == 2) {\n    return true;\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpem4z792z.php:40\n\
    Stack trace:\n#0 /tmp/tmpem4z792z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpem4z792z.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ return early if there are less than 2 elements in the list\n  if (count($l)\
    \ < 2) {\n    return false;\n  }\n  // initialize the result to False\n  $ret\
    \ = false;\n  // initialize a variable to track the index of the smallest element\n\
    \  $smallest_index = 0;\n  // loop through the list\n  foreach ($l as $i => $v)\
    \ {\n    // if the current number to be added is greater than the current smallest\n\
    \    // number, then we know that the smallest index has already been traversed\n\
    \    // so skip it before performing the sum\n    if ($v > $l[$smallest_index])\
    \ {\n      $smallest_index = $i;\n    }\n    // add the current number to the\
    \ sum\n    $ret += $v;\n  }\n  // if the smallest number found was the end then\
    \ we know that there were two\n  // distinct elements that sum to zero\n  if ($smallest_index\
    \ == count($l) - 1) {\n    $ret = true;\n  }\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_i7i2i7.php:47\n\
    Stack trace:\n#0 /tmp/tmpw_i7i2i7.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpw_i7i2i7.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    $n = count($l);\n\t$sum = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$sum += $l[$i];\n\
    \t}\n\treturn $n <= 2 || ($sum == 0 && $n == 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssaufqya.php:32\n\
    Stack trace:\n#0 /tmp/tmpssaufqya.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpssaufqya.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array_count_values($l);\n    foreach ($pairs as $value => $count)\
    \ {\n        if ($count != 1) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv0zks_x.php:30\n\
    Stack trace:\n#0 /tmp/tmpjv0zks_x.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjv0zks_x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if (!is_array($l)) return false;\n    sort($l);\n    $sums = array_count_values($l);\n\
    \    foreach ($sums as $sum => $c) unset($sums[$sum]);\n    return count($sums)\
    \ == 2;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph73p33go.php:31\n\
    Stack trace:\n#0 /tmp/tmph73p33go.php(39): test()\n#1 {main}\n  thrown in /tmp/tmph73p33go.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  foreach ($l as $elem) {\n    $sum += $elem;\n  }\n  foreach ($l as $elem)\
    \ {\n    if ($sum - $elem != 0) return false;\n  }\n  return true;\n}\n</code>\n\
    This code works well as written, but it will break if your input list is sorted\
    \ in descending order (which is not guaranteed by PHP).\nIf that's the case, you'll\
    \ need to reverse your list and iterate over it starting from the end. Since you're\
    \ dealing with an extremely small list, you could do this by simply reassigning\
    \ the $sum variable to the sum of the last two elements, then reset the array\
    \ index with array_slice.\n<code>\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptjc93cb_.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    sort($l);\n\t$s = array_sum($l);\n\tif ($s == 0) {\n\t\treturn false;\n\t}\n\t\
    else {\n\t\treturn true;\n\t}\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwwl29_1.php:30\n\
    Stack trace:\n#0 /tmp/tmpmwwl29_1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmwwl29_1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  foreach\
    \ ($l as $key => $value) {\n    // If the current element is the same as the next\
    \ element, skip it.\n    if ($key === $key + 1) {\n      continue;\n    }\n\n\
    \    // If there exists an element at that index that sums to zero, return True.\n\
    \    if ($value === 0) {\n      return true;\n    }\n  }\n\n  return false;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 |>\nMy solution :\n<code>\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2mgt_54h.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $n = sizeof($l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n; $j++) {\n            $pair = $l[$i] + $l[$j];\n            if ($pair\
    \ === 0) {\n                return true;\n            }\n        }\n    }\n  \
    \  return false;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    foreach ($l as $val) {\n        $sum += $val;\n    }\n    $counters\
    \ = array($sum);\n    $c = count($l);\n    $counters[0]++;\n    foreach ($l as\
    \ $val) {\n        $counters[$sum + $val]++;\n    }\n    for ($i = 1; $i < $c;\
    \ $i++) {\n        if ($counters[$i] != $counters[$i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    `pairs_sum_to_zero` is an excellent function.  I'd also suggest that it's important\
    \ to see if the list is *sorted*.  (The original problem was about a list with\
    \ duplicate elements and they didn't necessarily need to be sorted first.)\n<|/\
    \ c |>\n<| c |>\nYes, it works well even for sorted list, it checks every pair,\
    \ so it's `O(n^2)` but `O(n)` overall is also possible. In fact, I didn't notice\
    \ that `pairs_sum_to_zero` can be used with sorted list.\n<|/ c |>\n<| c |>\n\
    Yes, but you mentioned \"sorted list\" which implies that the list is *already\
    \ sorted* before calling `pairs_sum_to_zero`, which means `O(n)`.  If you meant\
    \ \"sorted *before* calling `pairs_sum_to_zero`\", then you'd be right, because\
    \ `pairs_sum_to_zero` would run in `O(n)` time.  But since you say the list is\
    \ *not* sorted, then the `O(n^2)` algorithm would be the most efficient algorithm.\n\
    <|/ c |>\n<| c |>\nYes, I agree. I've just assumed that if list is sorted, then\
    \ it will be checked in order `O(n)`. But it won't be the case in general. So,\
    \ it can be called either way.\n<|/ c |>\n<| c |>\nIf `pairs_sum_to_zero` is called\
    \ with `[1, 2, 3]`, then its time complexity is `O(n)`, because the `for` loop\
    \ is `O(n)`.  So if `pairs_sum_to_zero` is called with `[1, 2, 3, 3]`, then the\
    \ time complexity is `O(n^2)`, because the `for` loop is `O(n^2)`.  But if your\
    \ list is `[1, 2, 3, 3]`, then the time complexity is `O(n^2)`, because the `for`\
    \ loop is `O(n)`.\n<|/ c |>\n<| a dscore=5 |>\nA possible implementation is as\
    \ follows (Python 3 variant):\n<code>\nfrom itertools import permutations\n\n\
    def pair_in_set(list, index):\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8au6i1at.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array_count_values($l);\n    return count(array_diff_key($pairs, array_flip($pairs)))\
    \ < 2;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv7ko2qug.php:28\n\
    Stack trace:\n#0 /tmp/tmpv7ko2qug.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpv7ko2qug.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ (count($l) !== count($l)) {\n    return false;\n  }\n  $s = array_count_values($l);\n\
    \  foreach ($s as $k => $v) {\n    if ($v === 1) {\n      return true;\n    }\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5o772dy5.php:33\n\
    Stack trace:\n#0 /tmp/tmp5o772dy5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5o772dy5.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  // Your code here\n}\n</cell>\n<text>\nThe function pairs_sum_to_zero takes\
    \ a list of integers as an input.\nIt returns True if there are two distinct elements\
    \ in the list that sum to zero, and False otherwise.\n\n</text>\n<cell>\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbocvsch4.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $l2 = array_count_values($l);\n    $sum = 0;\n    foreach ($l2 as $i => $v)\
    \ {\n        if ($v > 1) {\n            $sum -= $l[$i];\n        } else {\n  \
    \          $sum += $l[$i];\n        }\n    }\n    return $sum < 0;\n}\n$r = array_filter(\n\
    \    array_map('intval', explode(',', $_POST['answers'])),\n    function ($x)\
    \ {\n        return $x ** 2 === 0;\n    }\n);\nif (empty($r)) {\n    echo \"Sorry,\
    \ but you failed to pass this test.\";\n} else {\n    echo \"All clear!\";\n}\n\
    function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "All clear!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3jestaj.php:44\n\
    Stack trace:\n#0 /tmp/tmpn3jestaj.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn3jestaj.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $result\
    \ = false;\n  $sum = 0;\n  foreach ($l as $value) {\n    $sum += $value;\n  }\n\
    \  if ($sum == 0) {\n    $result = true;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5p0m2j5h.php:35\n\
    Stack trace:\n#0 /tmp/tmp5p0m2j5h.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5p0m2j5h.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  for\
    \ ($n = count($l); $n >= 1; $n--) {\n    for ($m = $n; $m >= 1; $m--) {\n    \
    \  if ($l[$m] + $l[$n] != 0) {\n        // two distinct elements that sum to zero\n\
    \        return FALSE;\n      }\n    }\n  }\n  return TRUE;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjz_iivy.php:34\n\
    Stack trace:\n#0 /tmp/tmphjz_iivy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphjz_iivy.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ If the list contains no elements, return False\n  if(empty($l)) {\n    return\
    \ false;\n  }\n  // If there are two distinct elements in the list that sum to\
    \ zero,\n  // return True\n  if(count(array_count_values($l)) == 1) {\n    return\
    \ true;\n  }\n  // Otherwise, there are multiple distinct elements, so return\
    \ False.\n  return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtb6gzrj.php:37\n\
    Stack trace:\n#0 /tmp/tmpjtb6gzrj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtb6gzrj.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $v) {\n        if ($v + 0 == 0) return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2ty7pqb.php:27\n\
    Stack trace:\n#0 /tmp/tmpx2ty7pqb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx2ty7pqb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ O(n) algorithm\n  // O(n) space for array\n  $s = array();\n  for ($i = 0; $i\
    \ < count($l); $i++) {\n    $s[$l[$i]] = $i;\n  }\n\n  // O(1) space for hash\n\
    \  $h = 0;\n  for ($i = 1; $i < count($l); $i++) {\n    $h += $l[$i];\n  }\n\n\
    \  // O(1) space for counters\n  $c = array();\n  for ($i = 0; $i < count($l);\
    \ $i++) {\n    $c[$l[$i]] = $i;\n  }\n\n  // O(1) space for sum variable\n  $s\
    \ = 0;\n  $seen = 0;\n\n  while ($h > 0) {\n    $d = $h % $seen;\n    $h = $seen\
    \ - $d;\n    $seen++;\n\n    if ($c[$d] != $seen) {\n      return false;\n   \
    \ }\n\n    $s += $d;\n    $c[$d] = $seen;\n  }\n\n  // the two lists are identical\n\
    \  return ($s == 0);\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp7fdup12m.php:40\n\
    Stack trace:\n#0 /tmp/tmp7fdup12m.php(56): pairs_sum_to_zero(Array)\n#1 /tmp/tmp7fdup12m.php(60):\
    \ candidate(Array)\n#2 /tmp/tmp7fdup12m.php(71): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp7fdup12m.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ (sizeof($l) > 2) {\n    $a = array_merge($l, array_slice($l, 1, count($l) -\
    \ 1));\n    $b = array_merge($l, array_slice($l, 0, count($l) - 1));\n  } else\
    \ {\n    $a = $l;\n    $b = array_slice($l, 0, 1);\n  }\n\n  $sum = 0;\n  foreach\
    \ ($a as $k => $v) {\n    $sum += $v;\n  }\n  foreach ($b as $k => $v) {\n   \
    \ $sum += $v;\n  }\n  if ($sum == 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewfji93v.php:46\n\
    Stack trace:\n#0 /tmp/tmpewfji93v.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpewfji93v.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $l = sort($l);\n    for($i = 0; $i < count($l); $i++) {\n        $t = $l[$i];\n\
    \        for ($j = $i + 1; $j < count($l); $j++) {\n            if($t == $l[$j])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp289vxn92.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp289vxn92.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp289vxn92.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp289vxn92.php:33\nStack trace:\n#0 /tmp/tmp289vxn92.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp289vxn92.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  return\
    \ pairs_sum_to_zero_recursive(array_filter($l, 'is_int'));\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function pairs_sum_to_zero_recursive()\
    \ in /tmp/tmp1mpfu33v.php:16\nStack trace:\n#0 /tmp/tmp1mpfu33v.php(20): pairs_sum_to_zero(Array)\n\
    #1 /tmp/tmp1mpfu33v.php(24): candidate(Array)\n#2 /tmp/tmp1mpfu33v.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1mpfu33v.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  $n = sizeof($l);\n  for ($i = 0; $i < $n; ++$i) {\n    $sum += $l[$i];\n\
    \  }\n\n  for ($i = $n; $i >= 1; --$i) {\n    $j = $i-1;\n    if ($sum == 0) return\
    \ false;\n    if ($l[$i] + $l[$j] != 0) return false;\n    $sum -= $l[$i];\n \
    \ }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2h0hziyy.php:39\n\
    Stack trace:\n#0 /tmp/tmp2h0hziyy.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2h0hziyy.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  return\
    \ pairs(array_count_values($l));\n}\n\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function pairs() in /tmp/tmp33ycqkpn.php:16\n\
    Stack trace:\n#0 /tmp/tmp33ycqkpn.php(20): pairs_sum_to_zero(Array)\n#1 /tmp/tmp33ycqkpn.php(24):\
    \ candidate(Array)\n#2 /tmp/tmp33ycqkpn.php(35): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp33ycqkpn.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $v) {\n        $l2 = array_slice($l, 2);\n        if ($v ==\
    \ array_sum($l2)) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps6p72cn1.php:30\n\
    Stack trace:\n#0 /tmp/tmps6p72cn1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmps6p72cn1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $n\
    \ = count($l);\n  $count = 0;\n  for ($i=0; $i<$n; $i++) {\n    $count += $l[$i];\n\
    \  }\n  for ($i=0; $i<$n; $i++) {\n    $total += $l[$i];\n    if ($total < 0)\
    \ {\n      return false;\n    }\n  }\n  return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmper0_85mz.php:38\n\
    Stack trace:\n#0 /tmp/tmper0_85mz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmper0_85mz.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    for ($j = $i + 1; $j < count($l); $j++)\
    \ {\n      if ($l[$i] + $l[$j] == 0) {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp024kcqwb.php:31\n\
    Stack trace:\n#0 /tmp/tmp024kcqwb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp024kcqwb.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array_count_values($l);\n    foreach($pairs as $pair => $count)\n\
    \        if ($count != 1)\n            return false;\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84y2ynpc.php:27\n\
    Stack trace:\n#0 /tmp/tmp84y2ynpc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp84y2ynpc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  // Your code here\n    $a = [];\n    $b = [];\n    foreach ($l as $v) {\n \
    \       if (array_key_exists($v, $a)) {\n            $b[] = $v;\n            unset($a[$v]);\n\
    \        } else {\n            $a[] = $v;\n        }\n    }\n    return count($a)\
    \ == count($b);\n}\n</code>\nThen we get to our second problem, which says that\
    \ pairs whose sum is zero will be ignored. \nHere's the problem. There must be\
    \ some way to find the pairs whose sum is zero, but without having to actually\
    \ sum the values. The answer is to create an array that contains all combinations\
    \ of the given array without considering pairs whose sum is zero.\nHere's an example\
    \ that uses a recursive function called all_combinations_without_zeroes which\
    \ does the trick. \n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf8dey8ye.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  foreach\
    \ ($l as $i => $v) {\n    $r = $l[$i];\n    for ($j = $i + 1; $j < count($l);\
    \ $j++) {\n      if ($l[$j] < 0) {\n        $l[$j] += $r;\n        $r = -$r;\n\
    \        $r++;\n        $l[$j] += $r;\n        $r--;\n      }\n      if ($l[$j]\
    \ > 0 && ($r == 0 || $l[$j] == $r)) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_sl61p3v.php:40\n\
    Stack trace:\n#0 /tmp/tmp_sl61p3v.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_sl61p3v.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  foreach ($l as $key => $value) {\n    if ($sum + $value < 0)\n     \
    \ $sum = 0;\n    else\n      $sum += $value;\n    if ($sum == 0)\n      return\
    \ true;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppuilqp8z.php:36\n\
    Stack trace:\n#0 /tmp/tmppuilqp8z.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppuilqp8z.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $x = 0;\n    foreach ($l as $num) {\n        $x += $num;\n    }\n    return\
    \ $x == 0;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zwl_x1f.php:31\n\
    Stack trace:\n#0 /tmp/tmp8zwl_x1f.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8zwl_x1f.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $ret = false;\n\n    foreach ($l as $e) {\n        $sum += $e;\n        if\
    \ ($sum < 0) {\n            $sum = 0;\n        }\n        if ($sum == 0) {\n \
    \           $ret = true;\n            break;\n        }\n    }\n\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxr8mhsu.php:40\n\
    Stack trace:\n#0 /tmp/tmpvxr8mhsu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvxr8mhsu.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $r = array_shift($l);\n    foreach ($l as $i => $j) {\n        if (($i + $j)\
    \ == 0) {\n            return false;\n        }\n        if ((is_negative($r))\
    \ ? !is_negative($l[$i] - $l[$j])\n            : is_negative($l[$i] - $l[$j]))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_negative()\
    \ in /tmp/tmp9lvk1b1d.php:21\nStack trace:\n#0 /tmp/tmp9lvk1b1d.php(30): pairs_sum_to_zero(Array)\n\
    #1 /tmp/tmp9lvk1b1d.php(34): candidate(Array)\n#2 /tmp/tmp9lvk1b1d.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9lvk1b1d.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    foreach($l as $k => $e) {\n\t\tforeach($l as $j => $f) {\n\t\t\tif ($e == $f)\
    \ {\n\t\t\t\tunset($l[$j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($l) ? false :\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpig1w7j_1.php:34\n\
    Stack trace:\n#0 /tmp/tmpig1w7j_1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpig1w7j_1.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $x) {\n        $s = array_sum($l);\n        if ($x == $s &&\
    \ count($l) > 1) {\n            $l2 = array_slice($l, 1);\n            if ($x\
    \ != array_sum($l2)) {\n                return false;\n            }\n       \
    \ }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozl912xw.php:32\n\
    Stack trace:\n#0 /tmp/tmpozl912xw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpozl912xw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $i = count($l) - 1;\n    while (--$i >= 0 && $l[$i] == $l[0]) {\n        unset($l[$i]);\n\
    \    }\n\n    return array_values($l) === [0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp07vyqt5.php:32\n\
    Stack trace:\n#0 /tmp/tmpp07vyqt5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpp07vyqt5.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ Sort and reverse the list.\n  $l_s = array_map( 'intval', $l );\n  sort( $l_s\
    \ );\n  $l_s = array_reverse( $l_s );\n\n  // Check if there is one pair of items\
    \ that sum to zero.\n  return ( $l_s[0] + $l_s[1] == 0 );\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ds6emzn.php:33\n\
    Stack trace:\n#0 /tmp/tmp7ds6emzn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7ds6emzn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ (count($l) !== 2) {\n    return false;\n  }\n  $pairs = array();\n  $sum = 0;\n\
    \  foreach ($l as $i => $elem) {\n    $sum += $elem;\n    if ($sum === 0) {\n\
    \      $pairs[$i] = '0';\n    } else {\n      $pairs[$i] = $sum;\n    }\n  }\n\
    \  foreach ($pairs as $i => $pair) {\n    $other_sum = $pairs[$i];\n    foreach\
    \ ($l as $j => $elem) {\n      $other_sum += $elem;\n      if ($other_sum ===\
    \ 0 && $i === $j) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqty_ytie.php:49\n\
    Stack trace:\n#0 /tmp/tmpqty_ytie.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqty_ytie.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  return count(array_count_values($l)) < 2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9jpe4jt.php:27\n\
    Stack trace:\n#0 /tmp/tmpk9jpe4jt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk9jpe4jt.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $t = $r;\n    $r = $t = 0; // r and t start as zero.\n    foreach ($l as $n)\
    \ $r += $n; \n    foreach ($l as $n) $t += $n; \n    return $r == 0;\n}\nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd6oyuug.php:30\n\
    Stack trace:\n#0 /tmp/tmpcd6oyuug.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpcd6oyuug.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if (empty($l)) {\n        return false;\n    }\n\n    $result = array();\n\
    \    $seen = array();\n    foreach ($l as $val) {\n        if (!isset($seen[$val]))\
    \ {\n            $seen[$val] = 1;\n            $result[$val] = true;\n       \
    \ }\n        $seen[$val] += 1;\n    }\n\n    foreach ($seen as $val => $count)\
    \ {\n        if ($count == 1) {\n            unset($seen[$val]);\n           \
    \ unset($result[$val]);\n        }\n    }\n    return empty($result);\n}\n\n$input\
    \ = array();\n$input[] = '1';\n$input[] = '1';\n$input[] = '2';\n$input[] = '4';\n\
    $input[] = '7';\n$input[] = '8';\n$input[] = '9';\n$input[] = '7';\n$input[] =\
    \ '9';\n\n$expected_output = array();\n$expected_output[] = true;\n$expected_output[]\
    \ = false;\n$expected_output[] = true;\n$expected_output[] = false;\n$expected_output[]\
    \ = true;\n$expected_output[] = true;\n$expected_output[] = false;\n\n$test_cases\
    \ = array();\n$test_cases[] = array($input, $expected_output);\n$test_cases[]\
    \ = array($input2, $expected_output2);\n$test_cases[] = array($input3, $expected_output3);\n\
    $test_cases[] = array($input4, $expected_output4);\n$test_cases[] = array($input5,\
    \ $expected_output5);\n$test_cases[] = array($input6, $expected_output6);\n\n\
    $test_case_counter = 1;\nforeach ($test_cases as $test) {\n    if (is_array($test))\
    \ {\n        $_test_case_counter = $test_case_counter;\n        echo \"Test case\
    \ #$test_case_counter\\n\";\n        foreach ($test as $test_case) {\n       \
    \     $input = array_map('trim', $test_case[0]);\n            $expected = $test_case[1];\n\
    \            $test_case_counter++;\n            $answer = pairs_sum_to_zero($input);\n\
    \            echo \"  Test case #$test_case_counter\\n\";\n            echo \"\
    \    is_array(): \" . is_array($input) . \"\\n\";\n            echo \"    empty():\
    \ \" . (empty($input) ? 'true' : 'false') . \"\\n\";\n            echo \"    pairs_sum_to_zero($input):\
    \ \" . ($answer ? 'true' : 'false') . \"\\n\";\n            echo \"\\n\";\n  \
    \          echo \"  Actual input data:\\n\";\n            echo \"    $input\\\
    n\";\n            echo \"  Expected output data:\\n\";\n            echo \"  \
    \  $expected\\n\";\n            echo \"\\n\";\n            $this->assertEquals($answer,\
    \ $expected, \"Failed test case #$test_case_counter.\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuhdbamj9.php on line 93\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $l = array_count_values($l);\n    $pairs = array();\n    foreach($l as $k =>\
    \ $v) {\n        $pairs[$k] = $v > 1;\n    }\n    foreach($pairs as $k => $v)\
    \ {\n        if($v) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppumh3dy2.php:34\n\
    Stack trace:\n#0 /tmp/tmppumh3dy2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppumh3dy2.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n\t\
    foreach ($l as $value) {\n\t\t$temp = $value - $l[0];\n\t\t$temp2 = $l[1] - $l[0];\n\
    \t\tif ($temp == $temp2) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfavhz68.php:34\n\
    Stack trace:\n#0 /tmp/tmpyfavhz68.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyfavhz68.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if (empty($l)) return false;\n    $i = 0;\n    $j = 0;\n    while ($i < count($l))\
    \ {\n        if ($l[$i] + $l[$j] === 0) {\n            return true;\n        }\n\
    \        $i++;\n        $j++;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocz0xy9q.php:34\n\
    Stack trace:\n#0 /tmp/tmpocz0xy9q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpocz0xy9q.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $s = 0;\n    $n = 0;\n    foreach($l as $el) {\n        $s += $el;\n      \
    \  $n += 1;\n    }\n    if ($n % 2) {\n        return true;\n    } else {\n  \
    \      if ($s < 0) {\n            return false;\n        } else {\n          \
    \  return false;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aa8lrvz.php:40\n\
    Stack trace:\n#0 /tmp/tmp_aa8lrvz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_aa8lrvz.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $n = 0;\n    foreach ($l as $e) {\n        $n += $e;\n    }\n    foreach ($l\
    \ as $e) {\n        if ($n != $e + 0) return false;\n        $n -= $e;\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp58ohzro.php:35\n\
    Stack trace:\n#0 /tmp/tmpp58ohzro.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpp58ohzro.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $i\
    \ = 0;\n  $j = $l[0];\n  while ($j < $l[0]) {\n    $i++;\n    $j += $l[$i];\n\
    \  }\n  if ($l[0] > 0) {\n    $i -= 1;\n    $j += $l[$i];\n  }\n  if ($j == 0)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fysc2gy.php:41\n\
    Stack trace:\n#0 /tmp/tmp9fysc2gy.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9fysc2gy.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ first initialize a list to store pairs with\n  // all zero sums.\n  $result\
    \ = [];\n  for ($i = 0; $i < count($l); $i++) {\n    // initialize an array for\
    \ pairs with\n    // non-zero sums\n    $sums_array = [];\n    for ($j = 0; $j\
    \ < count($l); $j++) {\n      // if we've already found the right sum\n      if\
    \ ($l[$i] + $l[$j] == 0) {\n        // add the sum to that pair in our\n     \
    \   // list of pairs with\n        // non-zero sums\n        $sums_array[] = [$l[$i],\
    \ $l[$j]];\n      }\n    }\n    // if we found a non-zero sum, add that pair\n\
    \    // to the list of pairs with\n    // all zero sums\n    if (count($sums_array)\
    \ > 0) {\n      $result[] = $sums_array;\n    }\n  }\n  // if we found no pairs,\
    \ return false\n  return empty($result) ? false : true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkughjvtp.php:48\n\
    Stack trace:\n#0 /tmp/tmpkughjvtp.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkughjvtp.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $a = array_count_values($l);\n    if ($a['0'] == 1) {\n        return true;\n\
    \    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis would\
    \ probably have worked but I was looking for a more elegant way to do it\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include an alternative solution that checks\
    \ all pairs, not just pairs with the same value.\n<|/ c |>\n<| c |>\nThanks for\
    \ your help. I was thinking about this but didn't think about it as the pair would\
    \ only have one element with value 0 in it.\n<|/ c |>\n<| c |>\nAhh yes I misunderstood.\
    \ Thank you for the help\n<|/ c |>\n<| a tags=php,arrays |>\nYou can do that using\
    \ array_count_values like this:\n<code>\n$array = [\n    1 => 1,\n    2 => 2,\n\
    \    3 => 0,\n    4 => 4,\n    5 => 1\n];\n\n$result = [];\n\nforeach ($array\
    \ as $key => $value) {\n    $result[$key] = $value;\n}\n\nif (array_count_values($result)\
    \ == 1) {\n    echo \"There are no zero pairs\";\n} else {\n    echo array_count_values($result)\
    \ . \" zero pairs\" . PHP_EOL;\n}\n</code>\nResult:\n<code>\nThere are no zero\
    \ pairs\n1 zero pairs\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays dscore=0\
    \ |>\nYou would have to go through each element and compare the values with the\
    \ others to determine if they have a 0 sum value.\n<code>\nforeach ($array as\
    \ $value) {\n    foreach ($array as $key => $value) {\n        if ($value == $key)\
    \ {\n            continue;\n        }\n        if ($value == 0 && array_search($key,\
    \ $array) !== false) {\n            echo \"The key '\" . $key . \"' has 0 sum\
    \ values.\";\n        }\n    }\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can\
    \ do it in linear time complexity with array_reduce, array_search, and array_column.\
    \ array_column will take the values of each key and place them in an array so\
    \ that you can use array_search to check if the values match another value (that\
    \ matches the value of a key) in the array. We can then use array_reduce to find\
    \ all the zero pairs.\n<code>\n$array = [\n    1 => 1,\n    2 => 2,\n    3 =>\
    \ 0,\n    4 => 4,\n    5 => 1\n];\n\n$zeroPairs = array_reduce($array, \nfunction\
    \ candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7sbvz7qn.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $elem) {\n        foreach($l as $e2) {\n            if ($elem\
    \ != $e2 && !isSet($result[$elem][$e2])) {\n                $result[$elem][$e2]\
    \ = 0;\n            }\n        }\n    }\n    return array_keys($result) == count($l);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nOkay, I'm going to try this one.\
    \ Thanks :)\n<|/ c |>\n<| c |>\nHi again, I tried the code, but the result is\
    \ not as expected. Let's say we have an array which contains: `[0 => 1, 1 => 2,\
    \ 2 => 3, 3 => 4, 4 => 5, 5 => 6, 6 => 7, 7 => 8, 8 => 9, 9 => 10]`, and we want\
    \ to remove every element that has 2 occurrences, and sum them. Your code will\
    \ produce an array which contains: `[0 => 1, 1 => 3, 2 => 5, 3 => 8, 4 => 10,\
    \ 5 => 14, 6 => 19, 7 => 24, 8 => 28, 9 => 30]`, which is not what we want. Can\
    \ you please modify your code so that it would produce the expected result?\n\
    <|/ c |>\n<| c |>\n: No, it shouldn't produce what you expect. Look at how your\
    \ expected output differs from what your function produces.\n<|/ c |>\n<| c |>\n\
    Sorry, I misunderstood your comment. I'll check it again. Thank you.\n<|/ c |>\n\
    <| c |>\nHi again, I tried the code again. The results are now correct, but unfortunately\
    \ not for my case. Can you please take a look at my updated question? I've added\
    \ some more examples.\n<|/ c |>\n<| a dscore=1 |>\nTry this simple solution:\n\
    <code>\n$arr = array(0 => 1, 1 => 2, 2 => 3, 3 => 4, 4 => 5, 5 => 6, 6 => 7, 7\
    \ => 8, 8 => 9, 9 => 10);\n$newArray = [];\n$counts = array();\n\nforeach ($arr\
    \ as $val) {\n    $counts[$val]++;\n}\n\nforeach ($arr as $val) {\n    if($counts[$val]\
    \ == 2) {\n        $newArray[] = $val;\n        unset($counts[$val]);\n    }\n\
    }\n\nprint_r($newArray);\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n\
    $array = array(0 => 1, 1 => 2, 2 => 3, 3 => 4, 4 => 5, 5 => 6, 6 => 7, 7 => 8,\
    \ 8 => 9, 9 => \nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8r0oc45_.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    foreach ($l as $n) {\n        $sum += $n;\n    }\n    if ($sum\
    \ == 0) {\n        return true;\n    }\n\n    $found = false;\n    foreach ($l\
    \ as $n) {\n        $found = false;\n        foreach ($l as $m) {\n          \
    \  if ($m == $n && $sum > 0) {\n                $found = true;\n             \
    \   break;\n            }\n            if ($m != $n && $sum == 0) {\n        \
    \        $found = true;\n                break;\n            }\n        }\n  \
    \      if (!$found) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsonbl38l.php:49\n\
    Stack trace:\n#0 /tmp/tmpsonbl38l.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpsonbl38l.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  if (empty($l)) {\n        return false;\n    }\n    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $k => $x) {\n        $s += $x;\n\
    \        if ($s != 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6n7hy2ax.php:37\n\
    Stack trace:\n#0 /tmp/tmp6n7hy2ax.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6n7hy2ax.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  return !array_count_values($l)['0'] == 2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2m137o9.php:25\n\
    Stack trace:\n#0 /tmp/tmp_2m137o9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_2m137o9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ (empty($l)) {\n    return FALSE;\n  }\n  $results = [FALSE, FALSE];\n  foreach\
    \ ($l as $item) {\n    if ($item < 0) {\n      array_push($results, FALSE);\n\
    \    } else if (array_search($item, array_flip($results)) !== FALSE) {\n     \
    \ array_push($results, $item);\n    } else {\n      array_push($results, $item);\n\
    \    }\n  }\n  return array_unique($results) === $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip(): Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php\
    \ on line 23\n\nWarning: array_flip(): Can only flip STRING and INTEGER values!\
    \ in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip(): Can only flip STRING\
    \ and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip():\
    \ Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\
    \nWarning: array_flip(): Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php\
    \ on line 23\n\nWarning: array_flip(): Can only flip STRING and INTEGER values!\
    \ in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip(): Can only flip STRING\
    \ and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip():\
    \ Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\
    \nWarning: array_flip(): Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php\
    \ on line 23\n\nWarning: array_flip(): Can only flip STRING and INTEGER values!\
    \ in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip(): Can only flip STRING\
    \ and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip():\
    \ Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\
    \nWarning: array_flip(): Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php\
    \ on line 23\n\nWarning: array_flip(): Can only flip STRING and INTEGER values!\
    \ in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip(): Can only flip STRING\
    \ and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip():\
    \ Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\
    \nWarning: array_flip(): Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php\
    \ on line 23\n\nWarning: array_flip(): Can only flip STRING and INTEGER values!\
    \ in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip(): Can only flip STRING\
    \ and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\nWarning: array_flip():\
    \ Can only flip STRING and INTEGER values! in /tmp/tmp4jf_qmgb.php on line 23\n\
    \nWarning: array_flip(): Can only flip STRING and"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  sort($l);\n    return ($l[0] + $l[1]) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxd94tvsy.php:28\n\
    Stack trace:\n#0 /tmp/tmpxd94tvsy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxd94tvsy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0; // sum of numbers in the array\n    foreach ($l as $key => $value)\
    \ {\n        $sum += $value;\n    }\n    return ($sum < 0);\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kz43ivq.php:30\n\
    Stack trace:\n#0 /tmp/tmp7kz43ivq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7kz43ivq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  if\
    \ (empty($l))\n    return FALSE;\n  $total = array_sum($l);\n  for ($i = 0, $count\
    \ = count($l); $i < $count; $i++) {\n    if ($total - $l[$i] > 0) {\n      return\
    \ FALSE;\n    }\n  }\n  return TRUE;\n}\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppz0f8bx6.php:34\n\
    Stack trace:\n#0 /tmp/tmppz0f8bx6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppz0f8bx6.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $n = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        if ($l[$i] + $l[$i]\
    \ < 0) {\n            return false;\n        }\n        $n = $l[$i] + $n;\n  \
    \      if ($n == 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqrw4aqv.php:37\n\
    Stack trace:\n#0 /tmp/tmplqrw4aqv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmplqrw4aqv.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $counter = 0;\n    foreach($l as $val) {\n        $counter += $val;\n     \
    \   if ($counter == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tbvw0_a.php:31\n\
    Stack trace:\n#0 /tmp/tmp_tbvw0_a.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_tbvw0_a.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $i = count($l);\n    while ($i-- && $l[$i] === 0) --$i;\n    return $i ===\
    \ 1;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaen1m21s.php:26\n\
    Stack trace:\n#0 /tmp/tmpaen1m21s.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpaen1m21s.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ Write your code here.\n  $result = 0;\n  foreach($l as $v){\n    if($v != 0){\n\
    \      $result -= $v;\n      $result += $l;\n    }\n  }\n  return $result == 0;\n\
    }\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpx2n2lh2v.php:21\n\
    Stack trace:\n#0 /tmp/tmpx2n2lh2v.php(27): pairs_sum_to_zero(Array)\n#1 /tmp/tmpx2n2lh2v.php(31):\
    \ candidate(Array)\n#2 /tmp/tmpx2n2lh2v.php(42): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpx2n2lh2v.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $pairs = array();\n    foreach($l as $num) {\n        if (array_key_exists($num,\
    \ $pairs)) {\n            if ($pairs[$num] == 0) {\n                return false;\n\
    \            }\n        }\n        else{\n            $pairs[$num] = 1;\n    \
    \    }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vofyhgc.php:34\n\
    Stack trace:\n#0 /tmp/tmp7vofyhgc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7vofyhgc.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach ($l as $k => $v) {\n        $l[$k] = abs($v);\n        if (array_sum($l)\
    \ == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjsqqzv7.php:33\n\
    Stack trace:\n#0 /tmp/tmpmjsqqzv7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmjsqqzv7.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $x => $i) {\n        $sum = 0;\n        foreach($l as $y => $j)\
    \ {\n            $sum += $i;\n            if ($x == $y && $sum == 0) return true;\n\
    \        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxub_s3t2.php:30\n\
    Stack trace:\n#0 /tmp/tmpxub_s3t2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxub_s3t2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  foreach ($l as $n)\n    $sum += $n;\n  for ($i = 0; $i < count($l);\
    \ ++$i)\n    for ($j = $i + 1; $j < count($l); ++$j)\n      if ($l[$i] + $l[$j]\
    \ == 0)\n        return true;\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  return ($l[0] != 0) && ($l[0] == $l[1]);\n}\nfunction candidate(...$args) {\n\
    \    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hjrpqpx.php:26\n\
    Stack trace:\n#0 /tmp/tmp_hjrpqpx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_hjrpqpx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  sort($l);\n    $first = true;\n    $last = 0;\n    foreach ($l as $el) {\n\
    \        if ($el != $last) { $first = false; }\n        $last = $el;\n    }\n\
    \    if ($first == false) { return false; }\n    $first = true;\n    $last = $l[0];\n\
    \    foreach ($l as $el) {\n        if ($el != $last) { $first = false; }\n  \
    \      $last = $el;\n    }\n    if ($first == false) { return false; }\n    return\
    \ ($l[0] == $last) ? true : false;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI\
    \ was looking for the same thing and ended up writing a script to solve this problem\
    \ in PHP without using a looping structure or recursion. The following is my PHP\
    \ code if anyone is interested.\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplibeijz2.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  foreach($l as $k => $v){\n        if ($v < 0) return false;\n        $sum =\
    \ 0;\n        for ($i = 0; $i < count($l); $i++)\n            $sum += $l[$i];\n\
    \        if ($sum == 0)\n            return false;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2agothz4.php:32\n\
    Stack trace:\n#0 /tmp/tmp2agothz4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2agothz4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  //\
    \ Your code here\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoauqrdk5.php:24\n\
    Stack trace:\n#0 /tmp/tmpoauqrdk5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoauqrdk5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  $sum\
    \ = 0;\n  $l2 = count($l);\n  foreach($l as $i) {\n    $sum += $i;\n  }\n  if($sum\
    \ == 0) {\n    return false;\n  }\n  $sum2 = $sum - $l2;\n  for($i = 0; $i < $l2;\
    \ $i++) {\n    $sum2 += $l[$i];\n  }\n  return $sum2 == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gutogjn.php:39\n\
    Stack trace:\n#0 /tmp/tmp9gutogjn.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9gutogjn.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  // If the list has two or more elements, then they must add up to zero.\n \
    \   return count($l) > 1 && array_sum($l) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpypqbea_3.php:28\n\
    Stack trace:\n#0 /tmp/tmpypqbea_3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpypqbea_3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $s = 0;\n    foreach ($l as $k => $v) {\n        $s += $v;\n        if (!isset($l[$k])\
    \ || $l[$k] != 0) {\n            return $s > 0;\n        }\n    }\n    return\
    \ $s == 0;\n}\n</code>\n<|/ a dscore=0 tags=python-3.x,php |>\n<| a tags=python-3.x,php\
    \ dscore=0 |>\n<code>\ndef pairs_sum_to_zero(a):\n  sum = 0\n  for i, x in enumerate(a):\n\
    \    if x == 0: \n      sum += 1\n    else:\n      sum -= a[i-1]\n      if sum\
    \ == 0: \n        return True\n  return False\n</code>\n<|/ a |>\n<| a tags=python-3.x,php\
    \ dscore=0 |>\n<code>\ndef pairs_sum_to_zero(a):\n    return all(map(lambda i,x:x==0\
    \ and i>0,enumerate(sorted(a)),a))\n</code>\n<|/ a |>\n<| a tags=python-3.x,php\
    \ |>\n<code>\ndef pairs_sum_to_zero(a):\n    \n    flag = 0\n    \n    for idx,\
    \ val in enumerate(sorted(a)):\n        \n        if val != 0:\n            flag\
    \ = 1\n        \n            if idx + 1 == len(a):\n                return True\n\
    \            \n            if a[idx] == 0 and a[idx+1] != 0:\n               \
    \ return flag\n        \n            elif a[idx] != 0 and a[idx+1] == 0 and flag\
    \ == 1:\n                return False\n        \n            if a[idx] != 0:\n\
    \                flag = 1\n            else:\n                flag = 0\n     \
    \       \n    return False\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef pairs_sum_to_zero(array):\n\
    \    \n    count_zero = 0\n    \n    for idx, i in enumerate(sorted(array)):\n\
    \        \n        if i == 0:\n            \n            if idx+1 == len(array):\n\
    \                return True\n            \n            if array[idx] == 0 and\
    \ array[idx+1] != 0:\n                count_zero += 1\n                \n    \
    \        elif array[idx] != 0:\n                count_zero -= 1\n            \n\
    \    if count_zero == len(array):\n        return True\n    \n    else:\n    \
    \    return False\n    \n    \n    \narray = [0, 0, 3, -3, 3, 7, 1, -2, 5, 0,\
    \ 2, 4, -5, 3]\nprint(pairs_sum_to_zero(array))\n</code>\n<|/ a tags=python-3.x,php\
    \ dscore=0 |>\n<| a |>\n<code>\ndef pair_sum_to_zero(n):\n    for x in sorted(n):\n\
    \        if n[x-1]==0 and n[x]==1:\n            return True\n        else:\n \
    \           if n[x]==0 and n[x+1]!=0:\n                return False\n        \
    \    else:\n                if n[x]!=0 and n[x+1]==0 and n[x-1]==0:\n        \
    \            return True\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmuwvy9r_.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $s = array_sum($l);\n    foreach ($l as $k => $v) {\n        $l[$k] = $v /\
    \ $s;\n    }\n\n    foreach (array_count_values($l) as $pair => $count) {\n  \
    \      if ($count > 1) {\n            return false;\n        }\n    }\n\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmp09fv5ly8.php on line 21\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmp09fv5ly8.php on line 21\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmp09fv5ly8.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09fv5ly8.php:35\n\
    Stack trace:\n#0 /tmp/tmp09fv5ly8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp09fv5ly8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  $sum = 0;\n    foreach ($l as $pair) {\n        $sum += $pair[0];\n       \
    \ if ($sum != 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56fm_vos.php:31\n\
    Stack trace:\n#0 /tmp/tmp56fm_vos.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp56fm_vos.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n//\
    \ it returns True if there are two distinct elements in the list that\n// sum\
    \ to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n\
    // >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero($l) {\n  \
    \  return count($l) > 1 &&\n           array_reduce($l, function($acc, $num) {\n\
    \               return $acc && abs($num) == abs($acc + $num) ? 0 : 1;\n      \
    \     }) == 0;\n}\nfunction candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2,\
    \ 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1,\
    \ 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifd0m8ky.php:29\n\
    Stack trace:\n#0 /tmp/tmpifd0m8ky.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifd0m8ky.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
