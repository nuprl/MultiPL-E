name: HumanEval_22_filter_integers
language: php
results:
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return (is_numeric($value)\
    \ && intval($value) == $value);\n    });\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t90xq__.php:19\n\
    Stack trace:\n#0 /tmp/tmp_t90xq__.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_t90xq__.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (!is_array($values))\
    \ {\n        return $values;\n    }\n    return array_filter(\n        $values,\n\
    \        function ($value) {\n            return is_int($value);\n        }\n\
    \    );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmordshua.php:25\n\
    Stack trace:\n#0 /tmp/tmpmordshua.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmordshua.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $integers\
    \ = [];\n    foreach ($values as $value) {\n        if (is_numeric($value)) {\n\
    \            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\n</code>\n<|/ a tags=python dscore=1 |>\n<| c |>\nThe above code does not work.\
    \ `filter_integers` expects arguments of type array or list, but you are giving\
    \ arguments of type string\n<|/ c |>\n<| c |>\nThanks for pointing that out. I\
    \ corrected it now.\n<|/ c |>\n<| c |>\nYour code does not work because it does\
    \ `int('abc')`, which is not the same as `int('a')`\n<|/ c |>\n<| c |>\nIt does\
    \ not work because `int('abc')` returns `0`, while `int('a')` returns `97`, which\
    \ is not the desired behavior.\n<|/ c |>\n<| a tags=python |>\nI assume you are\
    \ trying to get all integers in a string with Python?\nIf so, try this:\n<code>\n\
    import re\nmy_string = 'asdf123 456 456 789 1234 234 234 234'\nresult = re.findall(r'\\\
    d+', my_string)\n</code>\nThe result is:\n<code>\n['123', '456', '456', '789',\
    \ '1234', '234', '234', '234']\n</code>\nIf your input is not always a string,\
    \ then you can convert it to a string first:\n<code>\nimport re\nmy_string = 123\n\
    my_string = str(my_string)\nresult = re.findall(r'\\d+', my_string)\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nNo, I am not trying to get all integers in a string.\
    \ I want a list of all the integers that appear in the string. Your code gives\
    \ a list.\n<|/ c |>\n<| c |>\n: Can you give an example of a string with only\
    \ one integer in it?\n<|/ c |>\n<| c |>\n: Oh, I see, you want to get a list of\
    \ all integers, regardless of whether they are in a string or in some other data\
    \ structure. I've updated my answer.\n<|/ c |>\n<| c |>\nNo I want to get a list\
    \ of integers that are present in some string.\n<|/ c |>\n<| c |>\n: In that case,\
    \ my code should do just fine. Give it a try: `re.findall(r'\\d+', my_string)`\
    \ will return a list with all the integers that are in the string.\n<|/ c |>\n\
    <| a tags=python |>\n<code>\nimport re\n\ndef filter_str(s):\n    return re.findall(r'\\\
    d+', s)\n\nfilter_str('asdf123 456 456 \nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgzw5z05_.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($val) {\n            return\
    \ is_int($val);\n        }\n    );\n}\n\n/**\n * Convert a string to its boolean\
    \ value\n *\n * @param string $value The input string\n * @return bool\n */\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9dtujz0.php:28\n\
    Stack trace:\n#0 /tmp/tmpu9dtujz0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu9dtujz0.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays,laravel |>\n<| a |>\nHere is simple\
    \ way to do it without looping\n<code>\n$array = array(1, 2, 3, 'abc', {}, []);\n\
    $resultArray = array_filter(array_values($array));\n\nprint_r($resultArray);\n\
    </code>\n<|/ a dscore=2 tags=php,arrays,laravel |>\n<| a |>\nThis code will solve\
    \ your problem:\n<code>\n$array = array(1, 2, 3, 'abc', {}, []);\n\n$resultArray\
    \ = array_values($array);\n</code>\n<|/ a tags=php,arrays,laravel dscore=2 |>\n\
    <| a tags=php,arrays,laravel |>\nJust use this code\n<code>\n$array = array(1,\
    \ 2, 3, 'abc', {}, []);\n\n$resultArray = array_values($array);\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 tags=php,arrays,laravel |>\nUse array_values()\
    \ to get all values in the array and remove the first value which should be the\
    \ array index.\n<code>\n$array = array(1, 2, 3, 'abc', {}, []);\n$resultArray\
    \ = array_values($array);\n</code>\n<|/ a |>\n<| a |>\nYou can simply use array_values:\n\
    <code>\n$array = array(1, 2, 3, 'abc', {}, []);\n\n$resultArray = array_values($array);\n\
    </code>\n<|/ a dscore=1 tags=php,arrays,laravel |>\n<| a tags=php,arrays,laravel\
    \ dscore=1 |>\narray_values will also work for associative arrays:\n<code>\n$array\
    \ = array(\"first\" => \"firstValue\", \"second\" => \"secondValue\", \"third\"\
    \ => \"thirdValue\");\n$resultArray = array_values($array);\n</code>\nresultArray\
    \ will contain\n<code>\nArray ( [0] => firstValue [1] => secondValue [2] => thirdValue\
    \ )\n</code>\n<|/ a |>\n<| a tags=php,arrays,laravel dscore=1 |>\nThis worked\
    \ for me\n<code>\n$array = [1, 2, 3, 'abc', {}, []];\n</code>\nthen\n<code>\n\
    $resultArray = array_values($array);\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,arrays,laravel\
    \ |>\n<code>\n$myArray = array();\n$myArray[1] = \"A\";\n$myArray[2] = \"B\";\n\
    $myArray[3] = \"\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp17f93okc.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($value) {\n            return\
    \ is_int($value) && !is_float($value);\n        }\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cn_hw3_.php:22\n\
    Stack trace:\n#0 /tmp/tmp5cn_hw3_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5cn_hw3_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiccohhsk.php:19\n\
    Stack trace:\n#0 /tmp/tmpiccohhsk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpiccohhsk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n\n/**\n * Takes an input string and filters out any characters that\
    \ are not in the given range\n * @link https://php.net/manual/en/function.preg-match.php\n\
    \ * @param string $pattern <p>\n * The pattern to search for\n * </p>\n * @param\
    \ string $subject <p>\n * The subject string being searched\n * </p>\n * @param\
    \ array $matches <p>\n * An array of <code>preg_match</code> returns keyed by\
    \ the pattern\n * and the value is an array of full pattern matches.\n * </p>\n\
    \ * @param int $flags [optional] <p>\n * Flags used with the pattern. See preg_match()\
    \ \n * </p>\n * @return bool true on success or false on failure.\n * </p>\n *\
    \ <p>\n * If the matches are found, the <i>matches</i> array will\n * contain\
    \ an associative array for each pattern. Each pattern\n * match is an array of\
    \ full pattern matches.\n * </p>\n * <p>\n * If the pattern is not found, the\n\
    \ * <i>matches</i> array will contain an empty array.\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdz7bgker.php:46\n\
    Stack trace:\n#0 /tmp/tmpdz7bgker.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdz7bgker.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplauew3m1.php:18\n\
    Stack trace:\n#0 /tmp/tmplauew3m1.php(22): test()\n#1 {main}\n  thrown in /tmp/tmplauew3m1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $result\
    \ = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n  \
    \          $result[] = $value;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      if (is_int($value))\
    \ {\n        return $value;\n      }\n      return FALSE;\n    },\n    ARRAY_FILTER_USE_BOTH\n\
    \  );\n}\n</code>\n<|/ a dscore=2 tags=arrays,php,sorting |>\n<| c |>\nThe \"\
    if\" statement is redundant since `array_filter()` can still filter on falsey\
    \ values.\n<|/ c |>\n<| a |>\nTo get the unique values from array use array_unique()\
    \ function like this \n<code>\n<?php\n$data = ['apple', 'banana', 'mango', 'orange',\
    \ 'apple'];\n$unique = array_unique($data);\n\necho '<pre>';\nprint_r($unique);\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp460k2en2.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  if (!is_array($values)\
    \ || !count($values)) {\n    return [];\n  }\n  $values = (array)$values;\n  $integers\
    \ = [];\n  foreach ($values as $value) {\n    if (is_numeric($value) && $value\
    \ != (string)$value) {\n      $integers[] = $value;\n    }\n  }\n  return $integers;\n\
    }\n\n\n/**\n * Formats a timestamp in any given format and returns it as string.\n\
    \ *\n * @param string $fmt The format string. See the PHP date function for the\
    \ formats.\n * @param int|string|DateTime $time A timestamp, strtotime object,\
    \ or PHP date object.\n * @return string The formatted timestamp.\n * @task filter\n\
    \ */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbl0clig.php:36\n\
    Stack trace:\n#0 /tmp/tmpxbl0clig.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxbl0clig.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $values\
    \ = array_values($values);\n  $integer_values = array_filter(array_map('intval',\
    \ $values));\n  return $integer_values;\n}\n</code>\n<|/ a tags=php,filter |>\n\
    <| c |>\nA similar function is available in the `range` function of `PHP` but\
    \ only accepts integer values. So it will not work for this case which has other\
    \ values such as floats or string that can not be casted to integer. Check my\
    \ answer.\n<|/ c |>\n<| c |>\nWhy are you using `array_map()` when your callback\
    \ only has one parameter and you are calling it twice with no parameters?\n<|/\
    \ c |>\n<| c |>\nI just simplified it a bit, thanks for pointing it out\n<|/ c\
    \ |>\n<| a tags=php,filter |>\nThis is a bit of a hacky solution, but it works.\
    \ It uses array_filter() on the array in reverse order and checks if the value\
    \ of the current iteration is an integer. If it is, then the value will be preserved\
    \ in the return array, otherwise it is filtered out.\n<code>\n$arr = array(\n\
    \    '1',\n    '2',\n    '3',\n    '4'\n);\n\n$arr2 = array_reverse($arr);\n$filtered\
    \ = array_filter($arr2, function($value){\n    return (is_integer($value)) ? true\
    \ : false;\n});\n\nprint_r($filtered);\n</code>\nOutput is:\n<code>\nArray\n(\n\
    \    [0] => 4\n)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis seems like the best\
    \ solution. Not sure why I didn't think of it.\n<|/ c |>\n<| c |>\nthis answer\
    \ is elegant and quick, even if the OP asked for PHP 5.2, it can be done in 5.3\
    \ with a few modifications :)\n<|/ c |>\n<| c |>\nWhat about `is_int`? This way\
    \ you can filter out any values you don't want to have.\n<|/ c |>\n<| c |>\n`is_int`\
    \ checks if the value is an integer. This would return `true` for all non-integer\
    \ values - not just the integers. So this wouldn't work very well, unfortunately\n\
    <|/ c |>\n<| c |>\nI believe `is_int` only checks whole numbers. Anything past\
    \ that would be considered a string and would still return `true`.\n<|/ c |>\n\
    <| a dscore=5 tags=php,filter |>\nAs an alternative, I wrote a general function\
    \ for this purpose:\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmgiw8wxk.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $ret\
    \ = [];\n    foreach ($values as $value) {\n        if (!is_int($value)) {\n \
    \           $ret[] = $value;\n        }\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2s5_1k3.php:23\n\
    Stack trace:\n#0 /tmp/tmpw2s5_1k3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpw2s5_1k3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      return is_integer($value);\n\
    \    }\n  );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkho2ytdk.php:22\n\
    Stack trace:\n#0 /tmp/tmpkho2ytdk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkho2ytdk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $result\
    \ = array();\n    foreach($values as $value) {\n        if (!is_integer($value))\
    \ {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqikrj59q.php:23\n\
    Stack trace:\n#0 /tmp/tmpqikrj59q.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqikrj59q.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  foreach\
    \ ($values as $k => $v) {\n    if (is_int($v)) {\n      $values[$k] = $v;\n  \
    \  }\n  }\n  return $values;\n}\n</code>\nThen you can write your sql query like\n\
    <code>\n$sql = 'SELECT name FROM users WHERE id IN ('.filter_integers(filter_keys(array_combine($ids,\
    \ $names))).')';\n</code>\n<|/ a |>\n<| a |>\nIf you need it to be as short as\
    \ possible, try this:\n<code>\n<?php\n$array = array('a', 'b', 'c', 'd');\n$ids\
    \ = array('1', '2', '3', '4', '5', '6', '7', '8');\n$names = array('Bob', 'John',\
    \ 'Jake', 'Mike', 'Larry', 'Jim', 'Carol', 'Randol');\n$result = array_intersect($array,\
    \ $ids, $names);\n\necho \"<pre>\";\nprint_r($result);\n</code>\n<|/ a dscore=2\
    \ tags=arrays,multidimensional-array,php |>\n<| a dscore=2 |>\nHere's a version\
    \ that supports multi-dimensional arrays and strings. It also works with objects\
    \ that implement the magic __toString method.\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbmocun4k.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyfn2rfq.php:19\n\
    Stack trace:\n#0 /tmp/tmpyyfn2rfq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpyyfn2rfq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $return\
    \ = array();\n  foreach($values as $value) {\n    if(is_int($value)) {\n     \
    \ $return[] = $value;\n    }\n  }\n  return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $integers\
    \ = [];\n\n  foreach ($values as $value) {\n    if (is_integer($value)) {\n  \
    \    $integers[] = $value;\n    }\n  }\n\n  return $integers;\n}\n</code>\n<|/\
    \ a dscore=1 tags=php,arrays,multidimensional-array |>\n<| c |>\nI like this approach\
    \ for its simplicity. But I wouldn't consider it a comprehensive solution. In\
    \ the end, it seems that the most comprehensive solution is to use `array_filter`\
    \ as suggested in the selected answer. Thank you for your answer though.\n<|/\
    \ c |>\n<| c |>\nI understand what you are trying to achieve. I think the approach\
    \ that I have given here will cover most of the cases. But if you find it insufficient\
    \ please do let me know. I will be happy to add more if required.\n<|/ c |>\n\
    <| c |>\nSure. Just checking\n<|/ c |>\n<| c |>\nI did some testing with different\
    \ data sets and I am accepting this answer. Thank you so much for your help!\n\
    <|/ c |>\n<| c |>\nI am glad I was able to help you out. Please accept the answer\
    \ if you found it helpful.\n<|/ c |>\n<| a dscore=1 tags=php,arrays,multidimensional-array\
    \ |>\nI suggest you to use array_filter().\n<code>\n$new_arr = array_filter($arr,\
    \ function($v){\n   return is_int($v);\n});\n</code>\nThis will remove all elements\
    \ which are not int\n<|/ a |>\n<| c |>\nThis approach is what I am looking for.\
    \ Thank you for your answer.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$result = array_filter($arr, function($item){\n    return is_int($item);\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis approach is what I am looking for.\
    \ Thank you for your answer.\n<|/ c |>\n<| a dscore=0 tags=php,arrays,multidimensional-array\
    \ |>\nTry This: \n<code>\n<?php\n$arr=array(\narray(1,2,3,4,5,6,7,8,9,10),\narray(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"),\narray(1,2.2,3.3,4.4,5.5,6,7,8,9,10)\n\
    );\n$new_arr = array_filter($arr, function($v){ return !is_int($v); });\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg5ovw1w6.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $result\
    \ = [];\n    foreach ($values as $value) {\n        $result[] = (int)$value;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv848nq5.php:21\n\
    Stack trace:\n#0 /tmp/tmphv848nq5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphv848nq5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $integers\
    \ = [];\n    foreach ($values as $key => $value) {\n        if (!is_int($value)\
    \ && !is_float($value)) {\n            $integers[$key] = $value;\n        }\n\
    \    }\n    return $integers;\n}\n</code>\n<|/ a tags=arrays,php,sorting |>\n\
    <| a |>\nTry this code\n<code>\n$data = [\n    \"first\" => [\n        \"name\"\
    \ => \"David\",\n        \"age\" => 29\n    ],\n    \"second\" => [\n        \"\
    name\" => \"Jane\",\n        \"age\" => 30\n    ],\n    \"third\" => [\n     \
    \   \"name\" => \"John\",\n        \"age\" => 27\n    ]\n];\n\narray_walk($data,\
    \ function(&$value) {\n    $value['age'] = filter_var($value['age'], FILTER_VALIDATE_INT);\n\
    });\n\nprint_r($data);\n</code>\n<|/ a tags=arrays,php,sorting dscore=1 |>\n<|\
    \ c |>\nIt worked for me. But the second argument was a syntax error in your code\
    \ (missing `&`). Could you please update the answer? Thanks.\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ |>\nUse array_filter:\n<code>\n$input = array(\n    array(\n        'name' =>\
    \ 'Bill',\n        'age' => 26\n    ),\n    array(\n        'name' => 'John',\n\
    \        'age' => 27\n    ),\n    array(\n        'name' => 'David',\n       \
    \ 'age' => 29\n    )\n);\n$output = array_filter($input, function($value) {\n\
    \    return filter_var($value['age'], FILTER_VALIDATE_INT);\n});\n\nprint_r($output);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [1] => Array\n        (\n            [name]\
    \ => David\n            [age] => 29\n        )\n\n)\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nHe is using an array, and not a multidimensional array.\n<|/ c |>\n<|\
    \ c |>\nThat was my first thought, but he also stated \"PHP array is nested\"\
    \ which means there is only 1 level of array nesting.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$arr = [\n    [\n        'name' => 'Bill',\n        'age' => 26,\n\
    \    ],\n    [\n        'name' => 'John',\n        'age' => 27,\n    ],\n    [\n\
    \        'name' => 'David',\n        'age' => 29,\n    ],\n];\n\n$arr = array_map('array_\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk3fib2nz.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_numeric($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1ubd9ge.php:19\n\
    Stack trace:\n#0 /tmp/tmpd1ubd9ge.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpd1ubd9ge.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n</code>\n<|/ a tags=laravel,php |>\n<| a tags=laravel,php |>\nI suggest\
    \ you to use laravel's array_filter method which applies a callback to each of\
    \ the array elements and should return an array that contains only the elements\
    \ that pass the test.\nAs per your requirement, you may have to implement your\
    \ custom callback for filtering each of the array elements. Here's a link to the\
    \ official documentation:\nhttps://laravel.com/docs/5.4/helpers#method-array-filter\n\
    <|/ a dscore=1 |>\n<| a |>\nJust a thought : Can you use regular expression to\
    \ filter your array ?\nSomething like this :\n<code>\n$filteredArray = array_filter($originalArray,\
    \ function($entry) {\n    return preg_match('/[a-z]/i', $entry);\n});\n</code>\n\
    EDIT : I did some tests and it seems that it won't work to filter string array\
    \ containing only integers :\n<code>\n$originalArray = [0,1,2,3];\n$filteredArray\
    \ = array_filter($originalArray, function($entry) {\n    return preg_match('/[a-z]/i',\
    \ $entry);\n});\n$filteredArray; // will contain an empty array !\n</code>\nBut\
    \ it will work if you put only integer :\n<code>\n$originalArray = [1,2,3];\n\
    $filteredArray = array_filter($originalArray, function($entry) {\n    return preg_match('/[a-z]/i',\
    \ $entry);\n});\n$filteredArray; // will contain an array with only integer !\n\
    </code>\n<|/ a dscore=0 tags=laravel,php |>\n<| c |>\nUnfortunately, that doesn't\
    \ work either. It just returns an array with 0 values.\n<|/ c |>\n<| c |>\nThat\
    \ is strange. Can you try with the edit I just did ?\n<|/ c |>\n<| a tags=laravel,php\
    \ |>\nYou can do it like this : \n<code>\n$array = [\n    \"1\",\n    \"2\",\n\
    \    \"3\",\n    \"4\"\n];\n\n$filteredArray = array_filter($array, function($value)\
    \ {\n    return is_int($value);\n});\n\nvar_dump($filteredArray);\n</code>\nThe\
    \ output is : \n<code>\narray(3) {\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(4)\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI suggest you to use array_filter()\
    \ instead of writing your own loop.\nYou just need to pass an array and a \nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxxhte9zh.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($v) {\n    return is_integer($v);\n  });\n}\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zzkwbif.php:18\n\
    Stack trace:\n#0 /tmp/tmp4zzkwbif.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4zzkwbif.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    return is_integer($value);\n \
    \ });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2omi19m8.php:19\n\
    Stack trace:\n#0 /tmp/tmp2omi19m8.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2omi19m8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_numeric($value);\n\
    \  });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2hlb5hq.php:19\n\
    Stack trace:\n#0 /tmp/tmph2hlb5hq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmph2hlb5hq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  if (!is_array($values))\
    \ return $values;\n  return array_filter(array_map(function ($value) {\n    return\
    \ filter_var($value, FILTER_VALIDATE_INT);\n  }, $values));\n}\n\n/**\n * Filters\
    \ out any values that are not integers, strings, float, or boolean.\n *\n * @param\
    \ mixed $values The values to filter\n * @return array The filtered values\n */\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxz2uk5c.php:26\n\
    Stack trace:\n#0 /tmp/tmpyxz2uk5c.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyxz2uk5c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (!is_array($values))\
    \ {\n        return $values;\n    }\n    return array_filter($values, 'is_int');\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04v3wd53.php:20\n\
    Stack trace:\n#0 /tmp/tmp04v3wd53.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp04v3wd53.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n\treturn\
    \ array_filter($values, function($value) {\n\t\treturn is_int($value);\n\t});\n\
    }\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzg5wexwe.php:18\n\
    Stack trace:\n#0 /tmp/tmpzg5wexwe.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpzg5wexwe.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (is_array($values))\
    \ {\n        return array_filter($values, function ($value) { return is_int($value);\
    \ });\n    }\n\n    return array_filter($values, function ($value) { return is_int($value);\
    \ });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cnva6d3.php:21\n\
    Stack trace:\n#0 /tmp/tmp8cnva6d3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8cnva6d3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return (is_integer($value));\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61eyg6vf.php:19\n\
    Stack trace:\n#0 /tmp/tmp61eyg6vf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp61eyg6vf.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_numeric($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ykywdzv.php:19\n\
    Stack trace:\n#0 /tmp/tmp1ykywdzv.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1ykywdzv.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiiaroefw.php:17\n\
    Stack trace:\n#0 /tmp/tmpiiaroefw.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpiiaroefw.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fdq95oz.php:17\n\
    Stack trace:\n#0 /tmp/tmp5fdq95oz.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp5fdq95oz.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=2 |>\nI used the code from\
    \ the accepted answer, but used a custom filter that converts a string to a float\
    \ if possible:\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf9i5inmk.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $integers\
    \ = array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n\n  return $integers;\n}\n\n/**\n * Filter given list of any python values\
    \ only for floats\n * >>> filter_floats(['a', 3.14, 5])\n * [3.14]\n * >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n * [1.0, 2.0, 3.0]\n *\n * @param array $values\n * @return\
    \ array\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdpkfmax.php:31\n\
    Stack trace:\n#0 /tmp/tmpmdpkfmax.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmdpkfmax.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return !is_string($value)\
    \ || (is_numeric($value) && (intval($value) == $value));\n    });\n}\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaw385pwd.php:18\n\
    Stack trace:\n#0 /tmp/tmpaw385pwd.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpaw385pwd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpai1jvele.php:18\n\
    Stack trace:\n#0 /tmp/tmpai1jvele.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpai1jvele.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($v) {\n            return\
    \ is_int($v);\n        }\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41dcv7ky.php:22\n\
    Stack trace:\n#0 /tmp/tmp41dcv7ky.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp41dcv7ky.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $return\
    \ = [];\n  foreach ($values as $value) {\n    if (is_integer($value)) {\n    \
    \  $return[] = $value;\n    }\n  }\n  return $return;\n}\n\n/**\n * Filter a list\
    \ of any python values only for floats\n * >>> filter_floats(['a', 'b', 3.14,\
    \ 5])\n * [3.14, 5]\n * >>> filter_floats([1, 2, 3, 'abc', {}, []])\n * [3.14,\
    \ 5]\n * >>> filter_floats([0, 1, 2.0, 'abc', {}, []])\n * [0, 2.0]\n * >>> filter_floats([-1.0,\
    \ 2.0, 'abc', {}, []])\n * [-1.0, 2.0]\n */\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return (is_numeric($value)\
    \ || is_null($value));\n    });\n}\n</code>\n<|/ a |>\n<| c |>\n`array_filter`\
    \ will fail on a null element: `filter_integers(['a', null]); # => [null]`. `filter()`\
    \ should work better.\n<|/ c |>\n<| c |>\n`array_filter` does not fail on null\
    \ elements, and `filter` does. `array_filter` will return `null` elements (unlike\
    \ `filter`), and `null` will evaluate to `false` for boolean operators.\n<|/ c\
    \ |>\n<| c |>\n`array_filter` returns `false` for null elements. It returns `null`.\
    \ `filter` does not return null elements. `filter` returns empty arrays. `array_filter`\
    \ returns an empty array when given an empty array.\n<|/ c |>\n<| a tags=php,array-filter,arrays\
    \ dscore=3 |>\nTo remove all elements from an array that are equal to another\
    \ array value or are \"falsy\":\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,0,'');\n\
    \n$values = [1,2,3];\n\n$arr = array_filter($arr, 'strlen');\n</code>\n<|/ a |>\n\
    <| c |>\nNot really \"falsy\" - the array elements are converted to strings, and\
    \ `0` will be filtered out, but `null` will not.\n<|/ c |>\n<| a tags=php,array-filter,arrays\
    \ |>\nYou can use array_filter() with array_diff_assoc():\n<code>\n$array = [\n\
    \    1 => 'foo',\n    2 => 'bar',\n    3 => 'baz',\n    4 => 'qux',\n];\n\n$values\
    \ = array(\n    1 => true,\n    2 => false,\n);\n\nvar_dump(array_filter($array,\
    \ 'array_diff_assoc', $values));\n</code>\nThis outputs:\n<code>\narray(3) {\n\
    \  [2]=>\n  string(3) \"bar\"\n  [3]=>\n  string(3) \"baz\"\n}\n</code>\n<|/ a\
    \ dscore=3 |>\n<| c |>\n`array_diff_assoc` seems like a much more versatile solution\
    \ than the accepted answer, but this was what I was looking for. Thank you!\n\
    <|/ c |>\n<| a dscore=2 tags=php,array-filter,arrays |>\n<code>\n$myArray = array(1,2,3,4,5,6,7,8,9,0);\n\
    $myArray = array_filter($myArray, 'is_null');\n\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp054t3l59.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    return is_integer($value);\n \
    \ });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplu0svfhl.php:19\n\
    Stack trace:\n#0 /tmp/tmplu0svfhl.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplu0svfhl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      if (is_int($value))\
    \ {\n        return true;\n      }\n      return false;\n    }\n  );\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm dscore=0 |>\n<| a dscore=0 |>\nThis question might\
    \ be a little too broad, but I believe it could be solved with recursion.  Here\
    \ is some code I just put together that may get you started...\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpht4p2gzk.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $integers\
    \ = [];\n    foreach($values as $value) {\n        if(is_numeric($value) && $value\
    \ >= 0) {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6gtb0j0.php:23\n\
    Stack trace:\n#0 /tmp/tmpl6gtb0j0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpl6gtb0j0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) { return is_int($value); });\n}\n\n/**\n\
    \ * Format an list of integer values into printable ASCII representation\n * e.g.\
    \ '5'\n * >>> format_int(5)\n * '5'\n * >>> format_int(5)\n * '5'\n *\n * @param\
    \ int|float|null $value\n * @return string\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12ddamnu.php:28\n\
    Stack trace:\n#0 /tmp/tmp12ddamnu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp12ddamnu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis is a good\
    \ solution, but I cannot use it since my code uses `array_filter()` several times\
    \ to filter arrays dynamically. Would it be possible to apply a callback to `array_filter()`\
    \ somehow?\n<|/ c |>\n<| c |>\nYou could use the `create_function()` function\
    \ from `php` to create a function callback.  You'll just need to reuse the same\
    \ callback for each call to `array_filter()` so it doesn't make any significant\
    \ difference.  You would just need to define the callback outside of the `array_filter()`\
    \ call as a new `create_function`.  I'll update my answer to show what I'm talking\
    \ about.\n<|/ c |>\n<| c |>\nThanks for your answer but I can't use anything beyond\
    \ PHP5.4 since I'm working on a server that only runs 5.3+. I'd rather not have\
    \ my code be dependent on PHP5.4 :)\n<|/ c |>\n<| c |>\nIf your not planning on\
    \ upgrading to a newer version of PHP then I would stick with my answer.\n<|/\
    \ c |>\n<| c |>\nI added an example of the `create_function()` call to the bottom\
    \ of my answer based on your comment.\n<|/ c |>\n<| a dscore=0 |>\nA simple trick\
    \ can be to store the values of every key in an array, and then, use them when\
    \ sorting the values.\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkhz59p6g.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $integers\
    \ = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n  \
    \          $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n\
    \n/**\n * Filter given list of any python values only for float values\n * >>>\
    \ filter_floats(['a', 3.14, 5.0])\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 17 in /tmp/tmpsiwxlgoj.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $integers\
    \ = [];\n  foreach ($values as $value) {\n    if (is_int($value)) {\n      $integers[]\
    \ = $value;\n    }\n  }\n  return $integers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $return\
    \ = [];\n    foreach ($values as $value) {\n        if (is_integer($value)) {\n\
    \            $return[] = $value;\n        }\n    }\n    return $return;\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    return is_integer($value);\n \
    \ });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9jgvzjv.php:18\n\
    Stack trace:\n#0 /tmp/tmpk9jgvzjv.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpk9jgvzjv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpag7f9bvz.php:19\n\
    Stack trace:\n#0 /tmp/tmpag7f9bvz.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpag7f9bvz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $values\
    \ = array_filter($values, 'is_int');\n    return $values;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe85z0dz7.php:18\n\
    Stack trace:\n#0 /tmp/tmpe85z0dz7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpe85z0dz7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($val) {\n    return !is_integer($val);\n  });\n\
    }\n\n/**\n * Returns a list of values not containing any integers\n * e.g. [3.14,\
    \ 5] becomes [3.14], [5]\n * \n * @param   array $values\n *\n * @return  array\n\
    \ */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bed70es.php:27\n\
    Stack trace:\n#0 /tmp/tmp_bed70es.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_bed70es.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $new\
    \ = [];\n    foreach($values as $v) {\n        if (is_int($v)) {\n           \
    \ $new[] = $v;\n        }\n    }\n    return $new;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      return is_int($value);\n\
    \    }\n  );\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n`is_int($value)` will fail\
    \ for string and float value like `'123'` and `'3.14'`\n<|/ c |>\n<| c |>\nWhy\
    \ does this answer get a downvote? It works perfectly\n<|/ c |>\n<| c |>\nThe\
    \ question specifically asked for a function that returns integers and this solution\
    \ does exactly that.\n<|/ c |>\n<| c |>\nIt is not the best approach though, cause\
    \ it might take some memory and cpu time to do that.\n<|/ c |>\n<| c |>\nThe best\
    \ approach would be:\n`function filter_integers($values) {\n  $results = [];\n\
    \  foreach ($values as $value) {\n    if (is_int($value)) {\n      $results[]\
    \ = $value;\n    }\n  }\n  return $results;\n}`\n\nThat way you save memory and\
    \ cpu time.\n<|/ c |>\n<| a dscore=5 |>\nA bit late to the party, but since I\
    \ wanted to write a general filter function for string arrays, I made a tiny library\
    \ to do just that:\n<code>\n<?php\nnamespace MyFilter;\n\nclass StringArrayFilter\n\
    {\n    public static function filter($input, $filter)\n    {\n        $result\
    \ = array();\n\n        foreach($input as $k => $v)\n        {\n            if(in_array($v,\
    \ $filter))\n                $result[$k] = $v;\n        }\n\n        return $result;\n\
    \    }\n\n    public static function filterArray($input, $filter)\n    {\n   \
    \     return filter_var($input, FILTER_VALIDATE_REGEXP, \n            array('options'\
    \ => array('regexp' => $filter)));\n    }\n}\n</code>\nSo I can do things like:\n\
    <code>\n<?php\n$strings = array('a', 'b', 'c');\n$filtered = StringArrayFilter::filter($strings,\
    \ \"a|b|c\");\n</code>\nOr:\n<code>\n<?php\n$strings = array('a', 'b', 'c');\n\
    $filtered = StringArrayFilter::filterArray($strings, array('a|b|c', 'd|e|f', 'a|d'));\n\
    </code>\nOr:\n<code>\n<?php\n$strings = array('a', 'b', 'c');\n$filtered = StringArrayFilter::filterArray($strings,\
    \ array('a|b|c', 'd|e|f', 'a|d|e|f'));\n</code>\n<|/ a tags=php,array\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpptyufmn9.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n</code>\n<|/ a tags=arrays,php,array-filter dscore=3 |>\n<| c |>\n\
    This doesn't appear to work - `var_dump([true, \"abc\"]);` returns `array(2) {\
    \ [0]=> bool(true) [\"abc\"]=> string(3) \"abc\" }`\n<|/ c |>\n<| a tags=arrays,php,array-filter\
    \ |>\n<code>\narray_filter($array, function ($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nHere's a slightly more robust\
    \ solution:\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu7lywmow.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $filtered\
    \ = [];\n  foreach ($values as $value) {\n    if (is_integer($value)) {\n    \
    \  $filtered[] = $value;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,filter\
    \ |>\n<| c |>\nHe wants to filter out the values, not just throw them away.\n\
    <|/ c |>\n<| c |>\nOops, you're right! I fixed that now. Thanks.\n<|/ c |>\n<|\
    \ a |>\n<code>\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4,\
    \ \"e\" => 5, \"f\" => 6);\n\n$array = array_filter($array, function ($v) {\n\
    \    return !is_numeric($v);\n});\n\nvar_dump($array);\n</code>\n<|/ a tags=php,arrays,filter\
    \ dscore=2 |>\n<| a dscore=2 |>\nIn addition to the other answers, note that array_filter\
    \ will remove all the values from the array that evaluate to false for array_filter($array,\
    \ 'is_numeric').\nIf you only want to filter the keys that are numeric, you can\
    \ array_filter twice like this:\n<code>\n$array = array_filter($array);\n$array\
    \ = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a tags=php,arrays,filter |>\n<| a |>\narray_filter accepts a\
    \ callback function.  You can use this to remove any values that return FALSE\
    \ when they are cast to a boolean:\n<code>\n$array = array(\"a\" => 1, \"b\" =>\
    \ 2, \"c\" => 3, \"d\" => 4, \"e\" => 5, \"f\" => 6);\n\nprint_r(array_filter($array,\
    \ function($item){\n    return !is_numeric($item);\n}));\n</code>\nWhich prints:\n\
    <code>\nArray\n(\n    [b] => 2\n    [c] => 3\n    [d] => 4\n)\n</code>\n<|/ a\
    \ tags=php,arrays,filter dscore=1 |>\n<| a tags=php,arrays,filter dscore=1 |>\n\
    The shortest method would be to create an array of keys that you want to filter\
    \ and then filter the original array using the array_filter function\n<code>\n\
    $array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5, \"\
    f\" => 6);\n$filteredKeys = array(\"a\", \"c\", \"e\");\n$filteredArray = array_filter($array,\
    \ function($val) use ($filteredKeys){\n    return !in_array($val, $filteredKeys);\n\
    });\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmj5tmyc0.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n\n/**\n * Return the key value list of the given array.\n *\n * @param array\
    \ $array the array of values\n * @param boolean $silent do not return any empty\
    \ values\n * @return array the key value list\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzj9j4_jn.php:26\n\
    Stack trace:\n#0 /tmp/tmpzj9j4_jn.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzj9j4_jn.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    foreach\
    \ ($values as $value) {\n        if (!is_int($value)) {\n            unset($values[array_search($value,\
    \ $values)]); // remove non-integers\n        }\n    }\n    return $values;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qu5c6_g.php:22\n\
    Stack trace:\n#0 /tmp/tmp3qu5c6_g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3qu5c6_g.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) use ($values) {\n        return is_int($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3k2ev1p.php:19\n\
    Stack trace:\n#0 /tmp/tmpm3k2ev1p.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpm3k2ev1p.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $result\
    \ = [];\n    foreach ($values as $value) {\n        if (!is_integer($value)) {\n\
    \            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ake6b_b.php:23\n\
    Stack trace:\n#0 /tmp/tmp7ake6b_b.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7ake6b_b.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\n/**\n * Returns an array of unique values\
    \ from a given list. Ignores duplicate values.\n *\n * @param array $list List\
    \ of values to get unique\n * @return array List of unique values\n */\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoeia5nnm.php:23\n\
    Stack trace:\n#0 /tmp/tmpoeia5nnm.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpoeia5nnm.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($value) {\n            return\
    \ (is_string($value) || is_float($value)) && intval($value) === $value;\n    \
    \    }\n    );\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\nAs mentioned,\
    \ array_filter is the best answer, but I thought I'd throw this out there too:\n\
    <code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqjidjer4.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($var) {\n        return is_int($var);\n    });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis also filters out null (empty) strings,\
    \ which is probably a good thing when dealing with integer keys.\n<|/ c |>\n<|\
    \ c |>\nThe only issue I see with this solution is that it does not work with\
    \ associative arrays (objects). For example: ```$input = array('a' => 1, 'b' =>\
    \ 2);``` will result in a ```PHP Notice:  Array to string conversion ```\n<|/\
    \ c |>\n<| c |>\nIt works for associative arrays just fine. Here's a [screenshot](https://i.stack.imgur.com/2k3qm.png)\
    \ of it working: https://i.stack.imgur.com/6KZ1n.png\n<|/ c |>\n<| c |>\nIt seems\
    \ it doesn't work in case of associative arrays with int keys and float values.\
    \ I have tested it here: https://3v4l.org/R9NI6\n<|/ c |>\n<| c |>\nThat is correct,\
    \ it doesn't handle float values at all. Here's the test I ran: https://3v4l.org/iCZYM\n\
    <|/ c |>\n<| a |>\nAs of PHP >= 5.3 you can use array_filter\nhttp://php.net/manual/en/function.array-filter.php\n\
    <code>\n<?php\n$array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4,\
    \ \"e\" => 5);\n\n$result = array_filter($array, function($value){\n    return\
    \ is_int($value);\n});\n\nprint_r($result);\n</code>\nThis returns:\n<code>\n\
    Array\n(\n    [3] => 5\n)\n</code>\nWhich is exactly what you want.\n<|/ a tags=php\
    \ dscore=5 |>\n<| c |>\nThis is the best answer. The others work, but this answers\
    \ the question by only returning non-numeric values.\n<|/ c |>\n<| c |>\nIf you\
    \ use `$value` instead of `$var` then it also works when dealing with objects.\
    \ https://3v4l.org/BcDqB\n<|/ c |>\n<| c |>\nThis should be the correct answer.\
    \ I tried all the other answers and none of them worked.\n<|/ c |>\n<| c |>\n\
    This should be the correct answer IMHO\n<|/ c |>\n<| c |>\nThis answer should\
    \ be the correct answer, since it works with any value instead of just integers.\
    \ Using `$value` instead of `$var` works well with objects and arrays.\n<|/\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw9aweoxn.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $integers\
    \ = [];\n  foreach ($values as $value) {\n    if (is_int($value)) {\n      $integers[]\
    \ = $value;\n    }\n  }\n  return $integers;\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis was very helpful!\n<|/ c |>\n<| c |>\nI added the function filter_integers()\
    \ to the answer for anyone who needs it.\n<|/ c |>\n<| c |>\nI added a note about\
    \ `filter_input()`\n<|/ c |>\n<| c |>\nIt should be noted that `filter_input()`\
    \ is unavailable in PHP 7.\n<|/ c |>\n<| c |>\n`filter_input` has been [added\
    \ in PHP 7.1.3](https://www.php.net/manual/en/function.filter-input.php#refsect1-function.filter-input-changelog)\n\
    <|/ c |>\n<| a dscore=5 |>\nPHP 7 introduced filter_input(). Here is how it works.\n\
    <code>\n<?php echo filter_input(INPUT_GET, 'name'); ?>\n</code>\nThe filter method\
    \ has also been introduced in PHP 7.\n<code>\n<?php echo filter_input(INPUT_GET,\
    \ 'name', 'string'); ?>\n</code>\nThe third parameter (filter_type) can be one\
    \ of the following values.\n\nstring: The input variable will always be a string.\
    \ Strings will\nalways be filtered and validated before they are used further.\n\
    integer: The input variable will be converted to integer.\nboolean: The input\
    \ variable will be converted to boolean.\narray: The input variable will be converted\
    \ to an array. The array\nwill be filtered and validated before it is converted\
    \ to the actual\ndata type.\nfilter: The input variable will be filtered and validated\
    \ before\nit is converted to the actual data type.\n\nRead more about filter_input\
    \ in the PHP 7 official documentation\n<|/ a tags=filtering,php,string,integer\
    \ |>\n<| c |>\n`filter_input()` has been [added in PHP 7.1.3](https://www.php.net/manual/en/function.filter-input.php#refsect1-function.filter-input-changelog)\n\
    <|/ c |>\n<| c |>\nThanks for bringing this to my attention. I updated my answer.\n\
    <|/ c |>\n<| a dscore=5 |>\nI created a library for integer filtering using \"\
    array_filter()\". Check it out: https://github.com/dmitry-zaitsev/CakePHP-IntFilter\n\
    The main advantage of this library is it's simplicity, allowing you to do the\
    \ following:\n<code>\n$values = [\n    '100',\n    '101',\n    '102',\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt69jf994.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprdehv7zd.php:19\n\
    Stack trace:\n#0 /tmp/tmprdehv7zd.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprdehv7zd.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($v) {\n    return is_int($v);\n  });\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp710lbu3v.php:19\n\
    Stack trace:\n#0 /tmp/tmp710lbu3v.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp710lbu3v.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value){\n        return !is_string($value) ||\
    \ is_numeric($value);\n    });\n}\n</code>\n<|/ a dscore=3 tags=arrays,php,sorting\
    \ |>\n<| c |>\nNice, thanks! Works in PHP 5.3.29 as well as 5.4.33\n<|/ c |>\n\
    <| c |>\nYou might want to change `is_string($value)` to `is_int($value)` to prevent\
    \ false positives on floats.\n<|/ c |>\n<| c |>\nThe problem is when you have\
    \ arrays of mixed types and you want them sorted numerically too. For example,\
    \ `filter_integers([1, 'a', 3.14, 5])` should return `[1, 5, 3.14]` instead of\
    \ `[5, 3.14, 1]`.\n<|/ c |>\n<| c |>\nThat's a good point. In my situation the\
    \ array is created from $_POST data, so I'm sure it's all strings, but this was\
    \ a good example anyway.\n<|/ c |>\n<| a tags=arrays,php,sorting |>\nThis one\
    \ worked for me on a large array:\n<code>\nusort($array, function ($a, $b) {\n\
    \    $a = (float) $a;\n    $b = (float) $b;\n    if ($a === $b) return 0;\n  \
    \  if ($a > $b) return 1;\n    if ($a < $b) return -1;\n});\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis answer is a little more complicated than it needs to be, considering\
    \ that the comparison function already returns -1 when a > b and 1 when a < b.\
    \ Just return the comparison result directly. `return $a - $b;` will do all the\
    \ checks and return the correct result.\n<|/ c |>\n<| c |>\nYes, this answer is\
    \ more elegant but in PHP 5.3 the comparison function has to be declared as `function($a,\
    \ $b) { ... }` and cannot be anonymous.\n<|/ c |>\n<| a dscore=1 tags=arrays,php,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpveua30b0.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $result\
    \ = [];\n\n    foreach ($values as $k => $v) {\n        if (is_integer($v)) {\n\
    \            $result[] = $v;\n        }\n    }\n\n    return $result;\n}\n\n/**\n\
    \ * Returns whether an item is in a given list.\n *\n * @param $list\n *   A list\
    \ to search in.\n * @param $item\n *   The item to search for.\n *\n * @return\
    \ bool\n *   TRUE if the item is in the list, FALSE otherwise.\n */\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $results\
    \ = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n  \
    \          $results[] = $value;\n        }\n    }\n    return $results;\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $filtered\
    \ = [];\n  foreach ($values as $value) {\n    if (is_int($value)) {\n      $filtered[]\
    \ = $value;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| a tags=php,arrays dscore=0 |>\nThis might be the most simplistic way:\n\
    <code>\n$newarray = array();\nforeach ($array as $value) {\n    if (is_int($value))\
    \ {\n        $newarray[] = $value;\n    }\n}\n</code>\n<|/ a |>\n<| a |>\nAnother\
    \ option would be to use array_filter:\n<code>\n$input = array(1,2,3,4,'abc',5.0);\n\
    var_dump(array_filter($input));\n</code>\nOutput:\n<code>\narray(5) {\n  [0]=>\n\
    \  int(1)\n  [2]=>\n  int(3)\n  [4]=>\n  string(3) \"abc\"\n  [5]=>\n  float(5.0)\n\
    }\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| a tags=php,arrays |>\nUse array_filter:\n\
    <code>\n$input = [1, 2, 3, 'abc', 5.0];\nvar_dump(array_filter($input));\n</code>\n\
    Output:\n<code>\narray(5) {\n  [0]=>\n  int(1)\n  [2]=>\n  int(3)\n  [4]=>\n \
    \ string(3) \"abc\"\n  [5]=>\n  float(5.0)\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmspyh2op.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(array_map('intval', $values), function($val) {\n    return is_integer($val);\n\
    \  });\n}\n\n/**\n * Get the largest integer value from an array of values.\n\
    \ * @param  array $values\n * @return integer|null The maximum integer value,\
    \ or null if there are no valid values\n */\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1u_64fob.php:24\n\
    Stack trace:\n#0 /tmp/tmp1u_64fob.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1u_64fob.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_integer($value);\n\
    \    });\n}\n\n/**\n * Return an array with all integer values from the given\
    \ array if they are all integers.\n *\n * @param array $values\n *\n * @return\
    \ array\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbqzw73v.php:26\n\
    Stack trace:\n#0 /tmp/tmpzbqzw73v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzbqzw73v.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_numeric($value)\
    \ && intval($value) == $value;\n    });\n}\n</code>\n<|/ a tags=php,arrays,laravel-4,laravel-5\
    \ dscore=3 |>\n<| c |>\nI like your solution. I used the accepted answer to filter\
    \ out only integer values in my case.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ this out - I changed my example to use `array_filter` instead of `array_map`,\
    \ which should better serve your needs.\n<|/ c |>\n<| c |>\nThe code snippet worked\
    \ for me on Laravel 5.7. I did have to change `is_string` to `is_array`.\n<|/\
    \ c |>\n<| a tags=php,arrays,laravel-4,laravel-5 |>\nThis worked for me in Laravel\
    \ 4.2 :\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpignh34y1.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    foreach\
    \ ($values as &$value) {\n        if (!is_numeric($value)) {\n            $value\
    \ = false;\n        }\n    }\n    return array_filter($values, 'is_numeric');\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyj58g7aw.php:22\n\
    Stack trace:\n#0 /tmp/tmpyj58g7aw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyj58g7aw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      return is_numeric($value);\n\
    \    }\n  );\n}\n\n/**\n * Given a JSON string, convert it to a multidimensional\
    \ associative array.\n *\n * @param string $json JSON-encoded data\n * @return\
    \ array Multidimensional associative array\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlx9y87g.php:28\n\
    Stack trace:\n#0 /tmp/tmpvlx9y87g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvlx9y87g.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  if (is_array($values))\
    \ {\n    $result = [];\n    foreach ($values as $value) {\n      $result[] = filter_var($value,\
    \ FILTER_VALIDATE_INT, FILTER_FLAG_ALLOW_OCTAL | FILTER_FLAG_ALLOW_HEX);\n   \
    \ }\n    return $result;\n  }\n  return [$values];\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nIt doesn't work on floats, just integer values. And it fails on\
    \ string values.\n<|/ c |>\n<| c |>\nIt works fine, my tests says it does. The\
    \ answer says it does not. Also it works great on string values\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for float values, but works on int values.\n<|/ c |>\n\
    <| c |>\nThat's why you add `FILTER_FLAG_ALLOW_HEX`.\n<|/ c |>\n<| c |>\nI added\
    \ the FILTER_FLAG_ALLOW_HEX but it still fails for string values.\n<|/ c |>\n\
    <| a tags=validation,php,filter |>\nThis code should work:\n<code>\n$test = [\n\
    \    'test'         => null,\n    'test2'        => false,\n    'test3'      \
    \  => true,\n    'test4'        => 0,\n    'test5'        => 1,\n    'test6' \
    \       => 1.1,\n    'test7'        => 2,\n    'test8'        => 2.1,\n    'test9'\
    \        => 3,\n    'test10'       => 4.1,\n    'test11'       => 5,\n    'test12'\
    \       => 5.1,\n    'test13'       => 6,\n    'test14'       => 6.1,\n    'test15'\
    \       => 7,\n    'test16'       => 7.1,\n    'test17'       => 8,\n    'test18'\
    \       => 8.1,\n    'test19'       => 9,\n    'test20'       => 10.1,\n    'test21'\
    \       => 11,\n    'test22'       => 11.1,\n    'test23'       => 12,\n    'test24'\
    \       => 12.1,\n    'test25'       => 13,\n    'test26'       => 13.1,\n   \
    \ 'test27'       => 14,\n    'test28'       => 14.1,\n    'test29'       => 15,\n\
    \    'test30'       => 15.1,\n    'test31'       => 16,\n    'test32'       =>\
    \ 16.1,\n    'test33'       => 17,\n    'test34'       => 17.1,\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3anf4pny.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $integers\
    \ = [];\n  foreach ($values as $v) {\n    if (!is_numeric($v)) {\n      continue;\n\
    \    }\n    $integers[] = $v;\n  }\n  return $integers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnevotnh.php:24\n\
    Stack trace:\n#0 /tmp/tmpnnevotnh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnnevotnh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (!is_array($values))\
    \ {\n        return $values;\n    }\n    $values = (array)$values;\n    foreach\
    \ ($values as $k => $v) {\n        $is_int = false;\n        if (is_numeric($v))\
    \ {\n            if (preg_match('/^[+-]?[0-9]+$/', $v)) {\n                $is_int\
    \ = true;\n            }\n        }\n        if (!$is_int) {\n            unset($values[$k]);\n\
    \        }\n    }\n    return (array)$values;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpch_t1fk4.php:32\n\
    Stack trace:\n#0 /tmp/tmpch_t1fk4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpch_t1fk4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_integer($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h8u1qdl.php:19\n\
    Stack trace:\n#0 /tmp/tmp_h8u1qdl.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_h8u1qdl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($value) {\n            return\
    \ !is_null($value) && is_integer($value);\n        },\n        ARRAY_FILTER_USE_BOTH\n\
    \    );\n}\n</code>\n<|/ a tags=php,arrays dscore=5 |>\n<| c |>\nNice, although\
    \ my initial code didn't quite do what I was looking for. I'm sure this would\
    \ work well for the other types of values, though. Thanks.\n<|/ c |>\n<| c |>\n\
    This is perfect for my needs, simple and elegant!\n<|/ c |>\n<| c |>\nThis didn't\
    \ work for me, returning an empty array for me. My array was populated, so I realized\
    \ my array wasn't being populated with the appropriate keys. Once I made sure\
    \ the keys were populated, the function worked perfectly.\n<|/ c |>\n<| a |>\n\
    You can filter a PHP array with a callback function that returns true or false:\n\
    <code>\n$array = [\n    'a' => 'apple',\n    'b' => 'banana',\n    'c' => 'carrot',\n\
    \    'd' => 'donut',\n    'e' => 'egg',\n];\n\n$filtered_array = array_filter($array,\
    \ function($value) {\n    return preg_match('/[aeiou]/i', $value);\n});\n</code>\n\
    The callback function is called for each element of the array:\n<code>\n$filtered_array\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpome70cbs.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        if (is_int($value)) {\n \
    \           return $value;\n        }\n\n        return FALSE;\n    });\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qk4jfps.php:23\n\
    Stack trace:\n#0 /tmp/tmp6qk4jfps.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6qk4jfps.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45g11ulg.php:17\n\
    Stack trace:\n#0 /tmp/tmp45g11ulg.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp45g11ulg.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $integers\
    \ = [];\n  foreach ($values as $value) {\n    if (is_int($value)) {\n      $integers[]\
    \ = $value;\n    }\n  }\n  return $integers;\n}\n</code>\n<|/ a tags=arrays,php,array-walk,filtering\
    \ |>\n<| c |>\nThis only works well with PHP 5.4 or later. With 5.3 or lower you\
    \ will get a fatal error because `array_filter` does not return a boolean.\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe easiest solution is to use the array_filter() function\
    \ like so:\n<code>\n$array = [1, 2, 3, 4.5, \"a\"];\n$result = array_filter($array,\
    \ function ($value) {\n    return !is_string($value);\n});\n</code>\nThis will\
    \ remove all strings from the array. The function callback is a little tricky\
    \ here because it needs to be a callback that takes 1 argument, which is a value\
    \ from the array. The callback is executed for each value in the array, and if\
    \ it returns TRUE, the value will be kept in the array. \nThe function callback\
    \ returns TRUE if the value is a string. If it returns FALSE, then the value will\
    \ be removed from the array.\nThis code can be found here.\n<|/ a tags=arrays,php,array-walk,filtering\
    \ |>\n<| c |>\nJust what I was looking for :)\n<|/ c |>\n<| a tags=arrays,php,array-walk,filtering\
    \ dscore=5 |>\nI realize this is an old question, but thought I'd share my solution\
    \ anyways. I wanted to remove all empty values from a PHP array and here's how\
    \ I did it:\n<code>\n$array = array_filter($array, function($value){\n    return\
    \ !empty($value);\n});\n</code>\n<|/ a |>\n<| c |>\n`array_filter()` does not\
    \ return a boolean. It removes all items from the array.\n<|/ c |>\n<| c |>\n\
    Yes, I know. That's why I said I realize this is an old question. :)\n<|/ c |>\n\
    <| c |>\nWhy do you think it's not returning boolean? It doesn't return a boolean\
    \ value, but only boolean TRUE or FALSE.\n<|/ c |>\n<| c |>\nit returns TRUE or\
    \ FALSE\n<|/ c |>\n<| c |>\n`array_filter()` will always return an array, so the\
    \ code in the answer will always be executed with an empty array. `!empty()` returns\
    \ either TRUE or FALSE, but since you are using it in the `array_filter` callback,\
    \ you are always returning TRUE or FALSE, regardless of how many items the array\
    \ contains.\n<|/ c |>\n<| a tag\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaipfc0rf.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptiwjl2k3.php:19\n\
    Stack trace:\n#0 /tmp/tmptiwjl2k3.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptiwjl2k3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $ret\
    \ = [];\n    foreach ($values as $value) {\n        if (is_integer($value)) {\n\
    \            $ret[] = $value;\n        }\n    }\n    return $ret;\n}\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      return is_numeric($value);\n\
    \    }\n  );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9_jcmqt.php:22\n\
    Stack trace:\n#0 /tmp/tmpy9_jcmqt.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpy9_jcmqt.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  foreach($values\
    \ as $value) {\n    if (is_integer($value)) {\n      unset($values[array_search($value,\
    \ $values)]);\n    }\n  }\n  return $values;\n}\n\n/**\n * Returns the first item\
    \ of the given $values list, which must be an array\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojlwjxb0.php:25\n\
    Stack trace:\n#0 /tmp/tmpojlwjxb0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpojlwjxb0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $values\
    \ = array_filter($values, 'is_int');\n    return $values;\n}\n</code>\nThe second\
    \ part is to test that both PHP files are on the same directory. I created a quick\
    \ bash script to help with this:\n<code>\nfunction candidate(...$args) {\n   \
    \ return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp641ik5rg.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzcc4oxv.php:17\n\
    Stack trace:\n#0 /tmp/tmpqzcc4oxv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpqzcc4oxv.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_integer($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpok9wuf97.php:19\n\
    Stack trace:\n#0 /tmp/tmpok9wuf97.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpok9wuf97.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n      $values,\n      function ($value) {\n        return is_numeric($value);\n\
    \      }\n  );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaolux72e.php:22\n\
    Stack trace:\n#0 /tmp/tmpaolux72e.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpaolux72e.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $result\
    \ = [];\n  foreach ($values as $value) {\n    if (is_int($value)) {\n      $result[]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmsvizrhb.php:19\n\
    Stack trace:\n#0 /tmp/tmpmsvizrhb.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmsvizrhb.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $result\
    \ = [];\n    foreach($values as $value) {\n        if (is_int($value)) {\n   \
    \         $result[] = $value;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $filtered\
    \ = [];\n    foreach ($values as $v) {\n        if (is_string($v)) {\n       \
    \     $filtered[] = filter_int($v);\n        } elseif (is_numeric($v)) {\n   \
    \         $filtered[] = $v;\n        }\n    }\n\n    return $filtered;\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function filter_int()\
    \ in /tmp/tmpj_ws8bwm.php:11\nStack trace:\n#0 /tmp/tmpj_ws8bwm.php(21): filter_integers(Array)\n\
    #1 /tmp/tmpj_ws8bwm.php(26): candidate(Array)\n#2 /tmp/tmpj_ws8bwm.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj_ws8bwm.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_numeric($value)\
    \ && intval($value) === $value;\n    });\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkd8i5wjn.php:19\n\
    Stack trace:\n#0 /tmp/tmpkd8i5wjn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpkd8i5wjn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $values\
    \ = array_map(function($value) {\n    return filter_var($value, FILTER_VALIDATE_INT);\n\
    \  }, $values);\n  return array_filter($values);\n}\n\n/**\n * Return the first\
    \ item of a list\n *\n * @param array\n *\n * @return mixed\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeiswhcgq.php:27\n\
    Stack trace:\n#0 /tmp/tmpeiswhcgq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeiswhcgq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    return is_int($value);\n  });\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7iiyfv5.php:19\n\
    Stack trace:\n#0 /tmp/tmpm7iiyfv5.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpm7iiyfv5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(array_map('intval', $values));\n}\n\n/**\n * Converts an array-like\
    \ to an array.\n *\n * <code>\n * $array = ['foo' => 'bar', 3 => '4', array('five'\
    \ => 5), array('six' => 'seven')];\n * print_r(array_to_array($array));\n * $array\
    \ = [1, 2, 3, 4, 5];\n * print_r(array_to_array($array));\n * </code>\n *\n *\
    \ @param array|string $array\n * @return array\n * @link https://php.net/manual/en/function.array-map.php\n\
    \ */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxrz9_9f.php:31\n\
    Stack trace:\n#0 /tmp/tmpjxrz9_9f.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjxrz9_9f.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $ints\
    \ = [];\n    foreach ($values as $value) {\n        if (!is_integer($value)) {\n\
    \            continue;\n        }\n        $ints[] = $value;\n    }\n    return\
    \ $ints;\n}\n</code>\nThe above PHP code can be translated to Javascript like\
    \ this:\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwmkkcriq.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  foreach\
    \ ($values as $value) {\n    if (is_int($value)) {\n      $values[] = $value;\n\
    \    }\n  }\n  return $values;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1oc421v.php:22\n\
    Stack trace:\n#0 /tmp/tmpf1oc421v.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpf1oc421v.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n\treturn\
    \ array_filter($values, function($value) {\n\t\treturn is_int($value);\n\t});\n\
    }\n\n/**\n * @link http://www.yaml.org/spec/1.2/spec.html#id2759574\n */\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03dwxcjn.php:22\n\
    Stack trace:\n#0 /tmp/tmp03dwxcjn.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp03dwxcjn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\n/**\n * Filter a list of python values\
    \ for any value.\n *\n * If the given values is an array, it will be filtered\
    \ recursively, otherwise\n * it will only be filtered if the value is an instance\
    \ of a supported type of\n * object.\n *\n * @param $values\n *   An array of\
    \ values to filter.\n * @param $filter\n *   An optional filter to be called on\
    \ the values.\n * @return array\n *   The filtered array of values.\n */\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinktwozj.php:31\n\
    Stack trace:\n#0 /tmp/tmpinktwozj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpinktwozj.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      return is_int($value)\
    \ || is_float($value);\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nI have found a solution that is quite simple, just\
    \ create a function in which you pass it an array or object, for example:\n<code>\n\
    $array = array( 'test1', 'test2', 'test3', 'test4');\nprint_r(filter_array_elements_int_string($array));\n\
    \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz83belp8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (!is_array($values))\
    \ {\n        return $values;\n    }\n\n    $values = array_filter($values, function($v)\
    \ {\n        return is_int($v);\n    });\n\n    return array_values($values);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$data = [\n    1 => 'a',\n\
    \    2 => 3.14,\n    3 => 5,\n];\n\n$result = array_filter(\n    $data,\n    function\
    \ ($key) use ($data) {\n        return isset($data[$key]) ? is_int($data[$key])\
    \ : false;\n    }\n);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ dscore=0 |>\ntry this one\n<code>\n$data = [\n    1 => 'a',\n    2 => 3.14,\n\
    \    3 => 5,\n];\n\n$filtered = array_filter(\n    $data,\n    function ($key)\
    \ use ($data) {\n        return isset($data[$key]) ? is_int($data[$key]) : false;\n\
    \    }\n);\n\necho '<pre>';\nprint_r($filtered);\n</code>\n<|/ a |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$data = [\n    1 => 'a',\n    2 => 3.14,\n    3 => 5,\n];\n\nforeach\
    \ ($data as $key => $value) {\n    if (isset($data[$key]) && is_int($data[$key]))\
    \ {\n        unset($data[$key]);\n    }\n}\n\n$data = array_values($data);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$data = [\n    1 => 'a',\n\
    \    2 => 3.14,\n    3 => 5,\n];\n\nforeach ($data as $key => $value) {\n    if\
    \ (isset($data[$key]) && is_int($data[$key])) {\n        unset($data[$key]);\n\
    \    }\n}\n\n$data = array_values($data);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$data = [\n    1 => 'a',\n    2 => 3.14,\n    3 => 5,\n];\n\nforeach\
    \ ($data as $key => $value) {\n    if (isset($data[$key]) && is_int($data[$key]))\
    \ {\n        unset($data[$key]);\n    }\n}\n\n$data = array_values($data);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how \nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9xproy7l.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  if (is_array($values))\
    \ {\n    $values = array_filter(array_map('intval', $values));\n  }\n  return\
    \ $values;\n}\n</code>\n<|/ a tags=wordpress,php |>\n<| c |>\nGood call on the\
    \ `filter_has_var` function, that makes a lot of sense and should be used here\
    \ to filter all non-integer values, not just integers only.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$values = [\n    \"0\",\n    \"1\",\n    \"1.00\",\n    \"100\"\
    ,\n    \"10001\",\n    \"10001.00001\",\n    \"10001.000010\",\n    \"10001.0000100\"\
    ,\n    \"10001.0000100001\",\n    \"10001.00001000010\",\n    \"10001.000010000100\"\
    ,\n    \"10001.000010000100001\",\n    \"10001.0000100001000010\",\n    \"10001.00001000010000100\"\
    ,\n    \"10001.00001000010000100001\",\n    \"10001.000010000100001000010\",\n\
    \    \"10001.0000100001000010000100\",\n    \"10001.0000100001000010000100001\"\
    ,\n    \"10001.00001000010000100001000010\",\n    \"10001.000010000100001000010000100\"\
    ,\n    \"10001.000010000100001000010000100001\",\n    \"10001.0000100001000010000100001000010\"\
    ,\n    \"10001.00001000010000100001000010000100\",\n    \"10001.00001000010000100001000010000100001\"\
    ,\n    \"10001.000010000100001000010000100001000010\",\n    \"10001.0000100001000010000100001000010000100\"\
    ,\n    \"10001.0000100001000010000100001000010000100001\",\n    \"10001.00001000010000100001000010000100001000010\"\
    ,\n    \"10001.000010000100001000010000100001000010000100\",\n    \"10001.000010000100001000010000100001000010000100001\"\
    ,\n    \"10001.0000100001000010000100001000010000100001000010\",\n    \"10001.00001000010000100001000010000100001000010000100\"\
    ,\n    \"10001.00001000010000100001000010000100001000010000100001\",\n    \"10001.000010000100001000010000100001000010000100001000010\"\
    ,\n    \"10001.0000100001000010000100001000010000100001000010000100\",\n    \"\
    10001.0000100001000010000100001000010000100001000010000100001\",\n    \"10001.00001000010000100001000010000100001000010000100001000010\"\
    ,\n    \"10001.000010000100001000010000100001000010000100001000010000100\",\n\
    \    \"10001.000010000100001000010000100001000010000100001000010000100001\",\n\
    \    \"10001.0000100001000010000\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1vpd2kjc.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $results\
    \ = [];\n    foreach ($values as $value) {\n        if (is_integer($value)) {\n\
    \            $results[] = $value;\n        }\n    }\n    return $results;\n}\n\
    \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $integers\
    \ = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n  \
    \          $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n\
    \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt025arie.php:18\n\
    Stack trace:\n#0 /tmp/tmpt025arie.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpt025arie.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $out\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $out[] = $value;\n        }\n    }\n    return $out;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\n/**\n * Filter given list of any python\
    \ values only for strings\n * >>> filter_strings(['a', 3.14, 5])\n * ['a', 'abc',\
    \ 5]\n * >>> filter_strings([1, 2, 3, 'abc', {}, []])\n * ['1', 2, 3, 3, {}]\n\
    \ *\n * @param array $values\n * @return array\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3w5mwfgq.php:27\n\
    Stack trace:\n#0 /tmp/tmp3w5mwfgq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3w5mwfgq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $values\
    \ = (array) $values;\n    foreach ($values as $v) {\n        if (!is_integer($v))\
    \ {\n            unset($values[array_search($v, $values)]); // Remove all unwanted\
    \ values\n        }\n    }\n    return $values;\n}\n</code>\n<|/ a tags=arrays,php,multidimensional-array\
    \ |>\n<| c |>\nThanks for your reply. I am getting empty array. I am using the\
    \ code in the question.\n<|/ c |>\n<| c |>\nOh, I was being an idiot! I thought\
    \ your values were strings, but they were integers. I have fixed the function\
    \ so it now filters integers only. Sorry for the confusion :)\n<|/ c |>\n<| c\
    \ |>\nNice. I also added some notes to my answer (added `filter_integers` function\
    \ and changed the `foreach` loop)\n<|/ c |>\n<| a |>\nYou can try this - \n<code>\n\
    $arr = array(array(\"name\"=>\"abc\", \"phone\"=>\"1234567890\", \"address\"=>array(\"\
    street\"=>\"street1\",\"street2\"=>\"street2\")),\n            array(\"name\"\
    =>\"def\", \"phone\"=>\"1234567891\", \"address\"=>array(\"street\"=>\"street3\"\
    ,\"street2\"=>\"street4\")),\n            array(\"name\"=>\"ghi\", \"phone\"=>\"\
    1234567892\", \"address\"=>array(\"street\"=>\"street5\",\"street2\"=>\"street6\"\
    ))\n            );\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyn_impz9.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55mekly8.php:17\n\
    Stack trace:\n#0 /tmp/tmp55mekly8.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp55mekly8.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return filter_var($value,\
    \ FILTER_VALIDATE_INT) !== false;\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u6albom.php:19\n\
    Stack trace:\n#0 /tmp/tmp8u6albom.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp8u6albom.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgt4bur71.php:17\n\
    Stack trace:\n#0 /tmp/tmpgt4bur71.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpgt4bur71.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $results\
    \ = [];\n  foreach ($values as $value) {\n    if (!is_numeric($value)) {\n   \
    \   throw new \\InvalidArgumentException('Expected an array');\n    }\n    $results[]\
    \ = $value;\n  }\n  return $results;\n}\n\nfunction candidate(...$args) {\n  \
    \  return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: Expected an array in\
    \ /tmp/tmpd5cy4ldh.php:11\nStack trace:\n#0 /tmp/tmpd5cy4ldh.php(19): filter_integers(Array)\n\
    #1 /tmp/tmpd5cy4ldh.php(24): candidate(Array)\n#2 /tmp/tmpd5cy4ldh.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd5cy4ldh.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      if (is_integer($value))\
    \ {\n        return $value;\n      }\n      return null;\n    },\n    ARRAY_FILTER_USE_BOTH\n\
    \  );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvavxwxz2.php:26\n\
    Stack trace:\n#0 /tmp/tmpvavxwxz2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvavxwxz2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n</code>\n<|/ a |>\n<| c |>\nThe second\
    \ parameter to `array_filter()` should be a callable (a function), not a string.\n\
    <|/ c |>\n<| c |>\nYes, it is. http://php.net/array_filter says \"array array_filter\
    \ ( array $array , callable $callback [, array $... ] ) : array\" where callable\
    \ is a PHP function. http://php.net/is_int is a PHP function too.\n<|/ c |>\n\
    <| c |>\nNo, this is a valid PHP function. http://php.net/is_int is a PHP function\
    \ too.\n<|/ c |>\n<| c |>\nYou're right, I misread this. `is_int` works because\
    \ it isn't part of a closure. I guess it's because PHP can infer the callable\
    \ type.\n<|/ c |>\n<| a |>\nUse array_filter to filter the array and return the\
    \ valid array values.\n<code>\n$valid_data = array_filter($array, function($value){\n\
    \    return is_int($value);\n});\n</code>\n<|/ a tags=php,arrays dscore=5 |>\n\
    <| c |>\nThe lambda function is unnecessary in this case.\n<|/ c |>\n<| c |>\n\
    The lambda function is unnecessary in this case if you don't know the name of\
    \ the function that you want to use.\n<|/ c |>\n<| c |>\nIf you don't know what\
    \ function will be used and what it's going to do, lambda isn't really the right\
    \ solution for you. Using `array_filter` with an anonymous function makes it far\
    \ less clear what's going on. Also, if you need to pass multiple functions in,\
    \ that makes it far less clear what's going on (although lambdas are still useful\
    \ in PHP 5.3 and earlier). If you need to pass in an anonymous function and you\
    \ need to pass a lambda, then you'll end up with something that looks unnecessarily\
    \ complex, but it's likely to be far clearer and easier to understand when you're\
    \ looking at it later.\n<|/ c |>\n<| c |>\nAnd if your array of data is too big\
    \ to store in memory and you need a more performant solution, you could always\
    \ use [array_reduce](http://php.net/array_reduce)\n<|/ c |>\n<| c |>\nIf you can\
    \ use a lambda function, you shouldn't be using `array_filter` anyway.\n<|/ c\
    \ |>\n<| a dscore=5 |>\nIf you're trying to filter and then count the results,\
    \ a more general solution could be:\n<code>\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp14v5k3f.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (!is_array($values))\
    \ {\n        return $values;\n    }\n    $integers = [];\n    foreach ($values\
    \ as $v) {\n        if (is_integer($v)) {\n            $integers[] = $v;\n   \
    \     }\n    }\n    return $integers;\n}\n\n/**\n * Check if given string is valid\
    \ python variable name by regex\n * @param string $name Variable name\n * @return\
    \ boolean\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        if (is_numeric($value)) {\n\
    \            return (int) $value == $value;\n        }\n\n        return false;\n\
    \    });\n}\n</code>\n<|/ a dscore=2 tags=php,arrays,laravel,laravel-4,laravel-routing\
    \ |>\n<| c |>\n`array_filter` expects a callback that returns true or false. Since\
    \ you want to test if the value is an integer, you should use `is_int`.\n<|/ c\
    \ |>\n<| c |>\nI didn't know about `is_int`. That's a much better idea than using\
    \ `intval`. Will update my answer. Thanks!\n<|/ c |>\n<| c |>\n`is_int` doesn't\
    \ filter out empty values.\n<|/ c |>\n<| c |>\nThanks for your help! It seems\
    \ that all my values are integers, so I'll be using `array_filter` instead.\n\
    <|/ c |>\n<| c |>\nYes, I used `is_int` in the example. Thanks for pointing it\
    \ out. Updated my answer to use `is_int`.\n<|/ c |>\n<| a dscore=1 tags=php,arrays,laravel,laravel-4,laravel-routing\
    \ |>\nTo check if $value is an integer or a float, you can use is_int() and is_float().\
    \ You should also use type juggling for the comparison:\n<code>\n$routes = Route::getRoutes();\n\
    \n$validIntegerRoutes = array_filter($routes, function($route) {\n    if ( ! is_int($route->getAction()->getName()))\
    \ return false; \n\n    $routeValue = $route->getAction()->getName();\n    if\
    \ (is_float($routeValue)) {\n        // Route value is a float\n        return\
    \ $routeValue === $routeValue;\n    } else {\n        // Route value is an integer\n\
    \        return is_int($routeValue);\n    }\n});\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpocddkaxh.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      return is_integer($value);\n\
    \    }\n  );\n}\n\n/**\n * Get values from any array\n * @param  mixed   $array\n\
    \ * @return array\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qlajz5w.php:27\n\
    Stack trace:\n#0 /tmp/tmp5qlajz5w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5qlajz5w.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (is_null($values))\n\
    \        return $values;\n\n    if (!is_array($values)) {\n        $values = [$values];\n\
    \    }\n\n    $vals = array_map('intval', $values);\n    $vals = array_filter($vals);\n\
    \n    return $vals;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkj5kazcv.php:27\n\
    Stack trace:\n#0 /tmp/tmpkj5kazcv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkj5kazcv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($item) {\n    return is_numeric($item);\n  });\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64xublvp.php:19\n\
    Stack trace:\n#0 /tmp/tmp64xublvp.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp64xublvp.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  foreach\
    \ ($values as &$value) {\n    if (is_integer($value) === true) {\n      $value\
    \ = (int) $value;\n    }\n  }\n  return array_filter($values, 'is_int');\n}\n\
    </code>\n<|/ a tags=json,php dscore=2 |>\n<| c |>\nI've added a filter function\
    \ that I use in my answer.\n<|/ c |>\n<| c |>\nThanks for that function, I like\
    \ it!\n<|/ c |>\n<| a dscore=2 tags=json,php |>\nPHP has a built in function for\
    \ filtering out all values of an array. You could use array_filter instead of\
    \ foreach.\n<code>\n$new_array = array_filter($array);\n</code>\n<|/ a |>\n<|\
    \ c |>\nI've added a filter function that I use in my answer.\n<|/ c |>\n<| c\
    \ |>\nAh... you added it before my edit came in. Sorry.\n<|/ c |>\n<| a tags=json,php\
    \ dscore=1 |>\nI usually use array_map\n<code>\n<?php\n$a = [1,[2,3],4,5];\n$b\
    \ = array_map(function($v){return is_array($v)?$v:false;},$a);\nvar_dump($b);\n\
    </code>\n<|/ a |>\n<| a dscore=0 tags=json,php |>\nA JSON Object is basically\
    \ a associative array in PHP. From there you can just loop through it with a foreach.\n\
    <code>\nforeach($myJsonObject as $key => $value) {\n    if(is_array($value)) {\n\
    \        // Do something with $value\n    } else {\n        // Do something with\
    \ $value\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nI've added a filter function that\
    \ I use in my answer.\n<|/ c |>\n<| a tags=json,php |>\nThis code will work with\
    \ any type of Array. \n<code>\n<?php\n$json = '[{\"name\":\"Jack\"},{\"name\"\
    :\"Tom\"},{\"name\":\"Joe\"}]';\n$array = json_decode($json, true);\n$new_array\
    \ = array();\n\nforeach($array as $item){\n    if(is_array($item)){\n        foreach($item\
    \ as $sub_item){\n            $new_array[] = $sub_item;\n        }\n    } else\
    \ {\n        $new_array[] = $item;\n    }\n}\nprint_r($new_array);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI've added a filter function that I use in my answer.\n\
    <|/ c |>\n<| a tags=\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbh3_djg6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $integer\
    \ = [];\n\n    foreach ($values as $val) {\n        // If val is an int, add it\
    \ to the integer list\n        if (is_int($val)) {\n            $integer[] = $val;\n\
    \        }\n    }\n\n    return $integer;\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv99i0e81.php:19\n\
    Stack trace:\n#0 /tmp/tmpv99i0e81.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpv99i0e81.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzszf809.php:17\n\
    Stack trace:\n#0 /tmp/tmpkzszf809.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpkzszf809.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    return is_int($value);\n  });\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrtxnso4.php:19\n\
    Stack trace:\n#0 /tmp/tmprrtxnso4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprrtxnso4.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $result\
    \ = array();\n    foreach ($values as $value) {\n        if (is_numeric($value))\
    \ {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxl6p9og.php:22\n\
    Stack trace:\n#0 /tmp/tmpqxl6p9og.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqxl6p9og.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function($value) {\n      return is_numeric($value)\
    \ && intval($value) == $value;\n    }\n  );\n}\n</code>\n<|/ a dscore=5 tags=php,arrays,integer\
    \ |>\n<| c |>\nIt's `is_int()`, not `is_int()`. No space before parentheses.\n\
    <|/ c |>\n<| c |>\nIn PHP7.4 you will get `Catchable fatal error: Argument 1 passed\
    \ to filter_integers() must be of type array, object given` if you pass anything\
    \ else than an array.\n<|/ c |>\n<| c |>\nThe PHP 7 solution is `array_filter`\
    \ instead of `array_filter_recursive`.\n<|/ c |>\n<| c |>\nYou might want to check\
    \ if $value is an int, otherwise you will get an array index out of range error\
    \ when passing null or an empty string.\n<|/ c |>\n<| c |>\nThis solution breaks\
    \ on empty arrays with PHP 7. `array_filter_recursive` should work for all versions\
    \ of PHP. https://3v4l.org/PnFUG\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$arr = array(1,\
    \ 2, 3, 'abc', {}, []);\n$arr = array_filter($arr, function($item){\n    if (is_numeric($item))\
    \ {\n        return intval($item) == $item;\n    }\n});\n</code>\n<|/ a tags=php,arrays,integer\
    \ |>\n<| c |>\nThanks, this is exactly what I was looking for\n<|/ c |>\n<| c\
    \ |>\nThis is the only one that worked for me to filter an array containing ints\
    \ and strings\n<|/ c |>\n<| c |>\nFor anyone looking, I used this solution in\
    \ Laravel. http://stackoverflow.com/questions/20309976/laravel-how-to-filter-out-non-numeric-values\n\
    <|/ c |>\n<| a tags=php,arrays,integer dscore=5 |>\nThis is what I use to filter\
    \ all integer elements from a given array:\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt0phd4h5.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $result\
    \ = array();\n  $integer_values = array();\n  foreach ($values as $value) {\n\
    \    if (!is_int($value) && $value != $value) {\n      $integer_values[] = $value;\n\
    \      continue;\n    }\n    $result[] = $value;\n  }\n  foreach ($integer_values\
    \ as $value) {\n    $result[] = $value;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp053ww579.php:29\n\
    Stack trace:\n#0 /tmp/tmp053ww579.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp053ww579.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n</code>\n<|/ a |>\n<| c |>\nYou don't have to check for `is_int()` on `$value`.\
    \ `is_int()` returns `true` for integers, `false` for floats and strings that\
    \ `is_numeric()` doesn't. http://php.net/manual/en/function.is-int.php\n<|/ c\
    \ |>\n<| c |>\nyou're absolutely right, thanks for pointing that out. I've updated\
    \ the answer to reflect your comment\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n$array\
    \ = array( 1.4, 2.6, 3.1, 4.4, 5.3, 6.1, 7.5, 8.2, 9.5, 10.1, 10.6, 11.3, 12.1,\
    \ 12.7, 13.3, 14.2, 14.4, 14.6, 14.8, 15.2, 15.4, 15.6, 16.1, 16.3, 16.6, 17.3,\
    \ 17.7, 17.9, 18.2, 18.4, 18.6, 18.8, 19.2, 19.4, 19.6, 19.8, 20.2, 20.4, 20.6,\
    \ 20.8, 21.2, 21.4, 21.6, 21.8, 22.2, 22.4, 22.6, 22.8, 23.2, 23.4, 23.6, 23.8,\
    \ 24.1, 24.3, 24.5, 24.7, 24.9, 25.1, 25.3, 25.5, 25.7, 25.9, 26.1, 26.3, 26.5,\
    \ 26.7, 26.9, 27.1, 27.3, 27.5, 27.7, 27.9, 28.1, 28.3, 28.5, 28.7, 28.9, 29.1,\
    \ 29.3, 29.5, 29.7, 29.9, 30.1, 30.3, 30.6, 30.9, 31.1, 31.3, 31.5, 31.7, 31.9,\
    \ 32.1, 32.3, 32.5, 32.7, 32.9, 33.1, 33.3, 33.5, 33.7, 33.9, 34.1, 34.3, 34.5,\
    \ 34.7, 34.9, 35.1, 35.3, 35.5, 35.7, 35.9, 36.1, 36.3, 36.5, 36.7, 36.9, 37.1,\
    \ 37.3, 37.5, 37.7, 37.9, 38.1, 38.3, 38.5, 38.7, 38.9, 39.1, 39.3, 39.5, 39.7,\
    \ 39.9, 40.1, 40.3, 40.5, 40.7, 40.9, 41.1, 41.3, 41.5, 41.7, 41.9, 42.1, 42.3,\
    \ 42.5, 42.7, 42.9, 43.1, 43.3, 43.5, 43.7, 43.9, 44.1, 44.3, 44.5, 44.7, 44.9,\
    \ 45.1, 45.3, 45.5, 45.7, 45.9, 46.1, 46.3, 46.5, 46.7, 46.9, 47.1, 47.3, 47.5,\
    \ 47.7, 47.9, 48.1, 48.3, 48.5, 48.7, 48.9, 49.\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyu2m5bkm.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $filtered\
    \ = [];\n    foreach ($values as $value) {\n        if (!is_int($value)) {\n \
    \           $filtered[] = $value;\n        }\n    }\n    return $filtered;\n}\n\
    \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmsmj17pb.php:23\n\
    Stack trace:\n#0 /tmp/tmpmsmj17pb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmsmj17pb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $values\
    \ = array_filter($values, 'is_int');\n    return $values;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4d06h8k.php:17\n\
    Stack trace:\n#0 /tmp/tmpk4d06h8k.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpk4d06h8k.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($item) { return filter_var($item, FILTER_VALIDATE_INT)\
    \ !== false; });\n}\n\n/**\n * Filter given list of any python values only for\
    \ floats\n * >>> filter_floats([1.1, 1.2, 1.3, 'abc', {}, []])\n * [1.2, 1.3]\n\
    \ * >>> filter_floats(['abc'])\n * []\n * >>> filter_floats([])\n * []\n * >>>\
    \ filter_floats(['a', 'a'])\n * ['a', 'a']\n * >>> filter_floats(['a', 'a', 1.3])\n\
    \ * ['a', 'a']\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0f7txa5.php:30\n\
    Stack trace:\n#0 /tmp/tmph0f7txa5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph0f7txa5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $filtered\
    \ = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n  \
    \          $filtered[] = $value;\n        }\n    }\n    return $filtered;\n}\n\
    \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz15zuhm.php:18\n\
    Stack trace:\n#0 /tmp/tmprz15zuhm.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprz15zuhm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    return is_int($value);\n  });\n\
    }\n\n/**\n * Returns any value that evaluates to true.\n *\n * A value is considered\
    \ true if it is \"true-value\", that is,\n * if it exists and does not equal false.\
    \ Booleans are also objects,\n * with a __bool__ method that will return true\
    \ or false as appropriate.\n *\n * @param $value\n *   The value to be evaluated.\n\
    \ *\n * @return\n *   The evaluated value.\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpag030egr.php:32\n\
    Stack trace:\n#0 /tmp/tmpag030egr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpag030egr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  if (!$values)\
    \ return $values;\n  if (!is_array($values)) return $values;\n  $values = array_filter($values,\
    \ 'is_int');\n  return $values;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hnjk3_v.php:20\n\
    Stack trace:\n#0 /tmp/tmp7hnjk3_v.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7hnjk3_v.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($val) {\n        return is_numeric($val);\n \
    \   });\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nGood one! But what happens if\
    \ you want to filter an array, which is also an object, and has also an array\
    \ inside it?\n<|/ c |>\n<| a dscore=4 |>\nI realize this is an older thread but\
    \ I just wanted to throw in my 2 cents as I find this question quite interesting\
    \ because I am also struggling with finding a good solution to this, and it seems\
    \ there is no good answer on SO.\nTo summarize here are some issues I would like\
    \ to point out:\n\nthe array you provide will have to contain an associative array,\
    \ otherwise you'll have to do a bit more work to get the correct value from the\
    \ returned array\nthe array can contain any type of value (associative array,\
    \ object, stdClass, etc)\nyou cannot filter out null values with the array filter\n\
    null values will not be filtered out as with is_null\n\nTo get around this you\
    \ will need to do a foreach loop with an if statement to determine if the current\
    \ value is NULL or not.\n<code>\n$array = array(\n    'id' => 1,\n    'date' =>\
    \ '2018-07-28T23:58:48.0000000Z',\n    'name' => 'John',\n    'age' => 30,\n \
    \   'sex' => 'male',\n    'is_null' => null,\n);\n$array = filter_array($array);\n\
    \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0f1ompvz.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  if (empty($values))\
    \ {\n    return array();\n  }\n\n  return array_filter(array_map('intval', $values));\n\
    }\n/**\n * Filter given list of any python values only for floats\n * >>> filter_floats([1.,\
    \ 2., 3., 'abc', {}, []])\n * [2.0, 3.0]\n * >>> filter_floats([1, 2, 3, 'abc',\
    \ {}, []])\n * [2.0, 3.0]\n * >>> filter_floats(['a', 3.14, 5])\n * []\n * >>>\
    \ filter_floats(['1', 2., '3'])\n * []\n * >>> filter_floats([1, 2, 3, 'abc',\
    \ {}, []])\n * []\n * >>> filter_floats(['a', 3.14, 5])\n * []\n * >>> filter_floats(['1',\
    \ 2., '3'])\n * []\n * >>> filter_floats([1, 2, 3, 'abc', {}, []])\n * []\n */\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kmt36y2.php:39\n\
    Stack trace:\n#0 /tmp/tmp4kmt36y2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4kmt36y2.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      return is_integer($value);\n\
    \    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcw02rn1.php:23\n\
    Stack trace:\n#0 /tmp/tmpbcw02rn1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbcw02rn1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(array_map('intval', $values), function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays dscore=2 |>\n<| c |>\nA bit too complicated\
    \ for a simple question. Thanks for the reply though.\n<|/ c |>\n<| c |>\nI agree\
    \ it's complicated but it is also the most straightforward solution. I've been\
    \ thinking about a solution which wouldn't require any looping but this would\
    \ require some more refactoring in the future.\n<|/ c |>\n<| c |>\nI think it's\
    \ the best solution, too. Thank you!\n<|/ c |>\n<| a dscore=1 |>\nYou can make\
    \ use of array_walk and array_search to get this done.\n<code>\n$integers = array(1,\
    \ 3.14, 5);\narray_walk($integers, function(&$value, $index) use ($integers){\n\
    \   if(array_search($value, $integers) !== FALSE){\n       unset($integers[$index]);\n\
    \   }\n});\nprint_r($integers);\n</code>\nThe output will now be array(3).\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis is really interesting. Do you think it would\
    \ be possible to make it work also on associative arrays (so not only on integer\
    \ indexes) ?\n<|/ c |>\n<| c |>\nNope, just for integer indexes.\n<|/ c |>\n<|\
    \ a tags=php,arrays dscore=1 |>\nHere's my attempt. You have to run it twice,\
    \ once to remove all the values that appear in the other array, then again to\
    \ remove all the values that appear on the array that has already been processed.\n\
    <code>\n<?php\n\n$array = array(1, 3.14, 5);\n\n$array1 = array('a', 'b');\n$array2\
    \ = array('a', 'c', 'd');\n\n$array_to_remove = array_diff($array2, $array1);\n\
    foreach ($array_to_remove as $value) {\n    $array2 = array_diff($array2, array($value));\n\
    }\n\n$array_to_remove_again = array_diff($array1, $array2);\nforeach ($array_to_remove_again\
    \ as $value) {\n    $array1 = array_diff($array1, array($value));\n}\n\nprint_r($array2);\n\
    print_r($array1);\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\nI modified your\
    \ existing function using array_map and array_filter. \n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpccfqut9f.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($value) {\n            return\
    \ filter_var($value, FILTER_VALIDATE_INT) !== false;\n        }\n    );\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxf0uqpb.php:22\n\
    Stack trace:\n#0 /tmp/tmplxf0uqpb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplxf0uqpb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function($val) {\n      return is_int($val);\n\
    \    }\n  );\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for this.  I was hoping to\
    \ not have to do any kind of preg_replaces, but this looks like the easiest way.\
    \  I ended up using this: `return array_filter(\n    $values,\n    function($val)\
    \ {\n      return preg_match('/[^\\d]/', $val);\n    }\n  );`\n<|/ c |>\n<| c\
    \ |>\nI didn't want to do this because it's pretty ugly and unreadable, but I\
    \ like it.\n<|/ c |>\n<| c |>\n`preg_replace(\"/[^\\d]/\", '', $val)` is also\
    \ an option.\n<|/ c |>\n<| c |>\n, your way will work too, but I personally would\
    \ prefer `is_numeric` over `preg_match`.  It was just an alternative.\n<|/ c |>\n\
    <| c |>\n`preg_match` is also very ugly.  I personally like `preg_replace` because\
    \ it's so readable.\n<|/ c |>\n<| a tags=filter,arrays,php dscore=2 |>\nYou might\
    \ want to consider writing a small filter function like:\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprat7g4jh.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return (is_integer($value));\n\
    \    });\n}\n\n/**\n * Sanitizes given python value and returns valid PHP value\n\
    \ * of passed python value\n * \n * If value is scalar, return it as is.\n * If\
    \ value is list or tuple, return joined value of elements\n * If value is dict,\
    \ return joined value of key value pairs\n * If value is None, returns empty string\n\
    \ * If value is a string, return it without single quotes\n * If value is an object,\
    \ returns serialized data\n * \n * @param  mixed  $value   Python value\n * @return\
    \ mixed  Sanitized Python value\n */\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8t0uxuos.php:33\n\
    Stack trace:\n#0 /tmp/tmp8t0uxuos.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8t0uxuos.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value){\n        if (is_int($value)) {\n   \
    \         return $value;\n        }\n    });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96h0hwce.php:20\n\
    Stack trace:\n#0 /tmp/tmp96h0hwce.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp96h0hwce.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $values\
    \ = array_filter($values);\n    return array_values($values);\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThanks!  I spent hours trying to figure out why `array_filter()`\
    \ wasn't filtering my values, and this just made it work :)\n<|/ c |>\n<| c |>\n\
    If you use array_map in place of array_filter it becomes much cleaner, as array_filter\
    \ is a shortcut to array_map anyway.\n<|/ c |>\n<| a |>\nI made a very simple\
    \ solution for you and others that needs a single PHP function.\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc78da85y.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($value) {\n            if\
    \ (is_string($value) && preg_match('/^\\d+$/', $value)) {\n                return\
    \ (int) $value;\n            }\n            return false;\n        },\n      \
    \  ARRAY_FILTER_USE_BOTH\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lp2cybi.php:26\n\
    Stack trace:\n#0 /tmp/tmp2lp2cybi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2lp2cybi.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(array_map('intval', $values));\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14l5wakz.php:17\n\
    Stack trace:\n#0 /tmp/tmp14l5wakz.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp14l5wakz.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (!is_array($values))\
    \ {\n        return $values;\n    }\n    $result = [];\n    foreach ($values as\
    \ $value) {\n        if (is_int($value)) {\n            $result[] = $value;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| a dscore=1 |>\nHere is another answer using array filter and array_reduce.\
    \ Since array filter is destructive, array_reduce is needed if you want to preserve\
    \ the original array.\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpftl2fz3w.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    // Return\
    \ all non-integers\n    return array_filter(array_map('intval', $values), function\
    \ ($value) {\n        return $value != (int) $value;\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyt8p00_.php:20\n\
    Stack trace:\n#0 /tmp/tmplyt8p00_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplyt8p00_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    foreach\
    \ ($values as &$value) {\n        $value = filter_var($value, FILTER_VALIDATE_INT,\
    \ FILTER_NULL_ON_FAILURE);\n    }\n    return $values;\n}\n</code>\n<|/ a tags=filtering,php,arrays\
    \ |>\n<| a dscore=0 |>\nYou can use this code :\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp73lrnq82.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $filtered\
    \ = [];\n    foreach ($values as $value) {\n        if (!is_integer($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\nUse array_filter to remove invalid values\
    \ from an array\n<code>\narray_filter($array, function ($value) {\n    return\
    \ !is_integer($value);\n});\n</code>\n<|/ a tags=arrays,php,filter,integer,string\
    \ dscore=1 |>\n<| a tags=arrays,php,filter,integer,string dscore=0 |>\nIn PHP\
    \ 7 you can use anonymous functions to easily remove invalid values without having\
    \ to write a separate function in each call:\n<code>\n$cleanArray = array_filter($array,\
    \ function($value){\n    return is_int($value);\n});\n</code>\n<|/ a |>\n<| c\
    \ |>\nI doubt that this is more efficient than the accepted answer from 2020.\n\
    <|/ c |>\n<| c |>\nI doubt that, but it's more compact and readable than anything\
    \ else I've seen so I've included it here. You're probably right though.\n<|/\
    \ c |>\n<| a tags=arrays,php,filter,integer,string dscore=0 |>\nIf your array\
    \ is sorted, you can use a simple loop like this one :\n<code>\n$arr = ['hello',\
    \ 3, '7', 4.3];\n$result = [];\n\nforeach ($arr as $key => $value) {\n    if (is_int($value))\
    \ {\n        $result[] = $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/\
    \ a |>\n<| c |>\nI doubt that this is more efficient than the accepted answer\
    \ from 2020.\n<|/ c |>\n<| a tags=arrays,php,filter,integer,string |>\nI agree\
    \ with Gordon Linoff that you should probably go with array_filter. I would like\
    \ to add that you can also use array_reduce, although I am not really sure how\
    \ it compares to array_filter.\n<code>\n$array = [1, 2, 3, 'abc', {}, []];\n$reduced\
    \ = array_reduce($array, function($a, $b) {\n    return (is_integer($b) ? $a :\
    \ $b);\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI doubt that this is more efficient\
    \ than the accepted answer from 2020.\n<|/ c |>\n<| c |>\nYes, it seems so. As\
    \ far as I know, `array_reduce` is implemented as an iterator in PHP, which means\
    \ that it first iterates over \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwas80j41.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $values\
    \ = array_filter($values, function ($value) {\n        return is_numeric($value);\n\
    \    });\n    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuvi_7bs.php:22\n\
    Stack trace:\n#0 /tmp/tmpcuvi_7bs.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcuvi_7bs.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  if (empty($values))\
    \ {\n    return $values;\n  }\n  if (!is_array($values) && !($values instanceof\
    \ Traversable)) {\n    throw new \\InvalidArgumentException('Expected array of\
    \ values');\n  }\n  $result = array();\n  foreach ($values as $key => $value)\
    \ {\n    if (!is_numeric($value)) {\n      if ($value instanceof Traversable)\
    \ {\n        foreach ($value as $v) {\n          $result[$key] = $v;\n       \
    \ }\n      } else {\n        throw new \\InvalidArgumentException(\"Value [$value]\
    \ passed to parameter '$key' is not numeric\");\n      }\n    } else {\n     \
    \ $result[] = $value;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: Value [Array] passed\
    \ to parameter '1' is not numeric in /tmp/tmp589fq3_j.php:22\nStack trace:\n#0\
    \ /tmp/tmp589fq3_j.php(32): filter_integers(Array)\n#1 /tmp/tmp589fq3_j.php(37):\
    \ candidate(Array)\n#2 /tmp/tmp589fq3_j.php(41): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp589fq3_j.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0prz08m8.php:17\n\
    Stack trace:\n#0 /tmp/tmp0prz08m8.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp0prz08m8.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function($value) {\n      return is_numeric($value);\n\
    \    }\n  );\n}\n\n/**\n * Returns an array of values suitable for use in a SQL\
    \ query.\n *\n * @param array $values List of values to be escaped.\n * @return\
    \ array\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_yies60.php:28\n\
    Stack trace:\n#0 /tmp/tmp0_yies60.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0_yies60.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($value) {\n            return\
    \ is_integer($value);\n        }\n    );\n}\n</code>\nTo filter lists recursively\
    \ you can do something like this:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd1vihzuv.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not\
    \ PHP. Also the OP asked for a general solution.\n<|/ c |>\n<| c |>\nThis is an\
    \ elegant solution that would work in any language, and it's definitely not PHP\
    \ specific. Just because PHP is \"a language\" doesn't mean everyone is using\
    \ it exclusively. There are ways to interact with PHP if you need to, but that\
    \ doesn't mean you shouldn't use any native language features to accomplish your\
    \ goals.\n<|/ c |>\n<| a dscore=1 tags=php,filter,arrays |>\nPHP 5.3 introduced\
    \ a new array filtering capability called array_filter. You can give it a callback\
    \ function and pass it the array and it will return the filtered array.\n<|/ a\
    \ |>\n<| c |>\nThis is not PHP. Also the OP asked for a general solution.\n<|/\
    \ c |>\n<| a |>\n<code>\n$a = array(1,2,3,4);\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3b2zhrdb.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function($value) {\n      return is_integer($value);\n\
    \    }\n  );\n}\n\n/**\n * Get the value of an option\n *\n * If no value is passed\
    \ in the options array, it will return the\n * default value of the key provided.\n\
    \ */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcrw92ud.php:28\n\
    Stack trace:\n#0 /tmp/tmpjcrw92ud.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjcrw92ud.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) { return is_numeric($value); });\n}\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hltdphh.php:16\n\
    Stack trace:\n#0 /tmp/tmp6hltdphh.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp6hltdphh.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(array_map('intval', $values), function ($value) { return !is_nan($value);\
    \ });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwyyg805.php:16\n\
    Stack trace:\n#0 /tmp/tmpxwyyg805.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpxwyyg805.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_numeric($value);\n\
    \    });\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=3 |>\nTo check if a variable\
    \ is integer you can use the function is_int() :\n<code>\n$a = 5;\nif (is_int($a))\
    \ {\n    // $a is an integer variable\n} else {\n    // $a is not a integer variable\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThis doesn't check whether the variable\
    \ is numerical. `is_int` also allows other string types to be passed in, such\
    \ as `\"foo\"` and `\"1\"`.\n<|/ c |>\n<| c |>\nBut if he's going to do this a\
    \ lot, he could just make a function and call that.\n<|/ c |>\n<| c |>\nHe is\
    \ looking for a generic solution so he can apply it to multiple variables/values,\
    \ not just integers.\n<|/ c |>\n<| c |>\nIt's not generic. He wants a function\
    \ that accepts the variable as a parameter and he wants it to be able to return\
    \ an array of non-integer variables. That is a bit more generic for me.\n<|/ c\
    \ |>\n<| c |>\nIt's not clear to me why you don't just do `is_numeric($a)` everywhere.\n\
    <|/ c |>\n<| a dscore=3 |>\nIf you want to find out if any input value can be\
    \ converted to an integer then you can use the following\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpugsa92h1.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($value) {\n            return\
    \ is_int($value);\n        }\n    );\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl4kifpcj.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\nYou could use\
    \ array_filter and array_map to create an array of only the integers you need\
    \ then use array_sum to add them together.\n<code>\n$values = array(1, 2, 3, 4,\
    \ 5.5, 6, 7);\n\n$filtered = array_filter(\n    $values,\n    function ($value)\
    \ {\n        return is_integer($value);\n    }\n);\n\n$mapped = array_map(\n \
    \   function ($value) {\n        return $value;\n    },\n    $filtered\n);\n\n\
    $total = array_sum($mapped);\n\necho $total;\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ |>\nHere's a way to do it with array functions:\n<code>\n$array = array(1, 2,\
    \ \"3\", 4.1, 5, 6, 7.1);\n\n$filtered = array_filter($array, function($el){ \n\
    \    return is_int($el);\n});\n\n$total = array_sum($filtered);\n\nvar_dump($total);\n\
    </code>\nThe output is as expected:\n<code>\nint(15)\n</code>\n<|/ a tags=arrays,php\
    \ dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\n$array = array(1, 2,\
    \ 3, 4, 5.5, 6, 7);\n\n$ints = array_filter($array, function($value) {\n    return\
    \ is_int($value);\n});\n\necho array_sum($ints);\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease provide some explanation alongside your answer for the benefit\
    \ of future readers.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$values\
    \ = [1, 2, 3, 4, 'abc', [], [5, 6, 7]];\n\n$filtered = array_filter($values, function($value)\
    \ {\n    return is_int($value);\n});\n\n$total = array_sum($filtered);\n\necho\
    \ \"Total Integers: $total\";\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=arrays,php\
    \ |>\nUse array_reduce() \n<code>\n$array=[1,2,3,'abc',[],[5,6,7]];\n$total=array_reduce($array,\
    \ function($total, $item){ return $total+$item;});\necho $total;\n</code>\n<|/\
    \ a |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a tags=arrays,php dscore=0 |>\nI \nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp00y_56_1.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $integers\
    \ = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n  \
    \          $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\nIn addition to the answers already posted,\
    \ you can filter your array of arrays using the built in PHP function array_filter\
    \ \n<code>\n$array = array(\n    array(\n        'price' => 150,\n        'id'\
    \ => 2\n    ),\n    array(\n        'price' => 200,\n        'id' => 2\n    ),\n\
    );\n\n$filteredArray = array_filter(\n    $array,\n    function($value){\n   \
    \     return $value['id'] == 2; // Will only return arrays where the id equals\
    \ 2\n    }\n);\n\necho '<pre>';\nprint_r($filteredArray);\necho '</pre>';\n</code>\n\
    http://php.net/manual/en/function.array-filter.php\n<|/ a tags=multidimensional-array,arrays,php,filter\
    \ dscore=1 |>\n<| a |>\nI believe I misread your question at first.  I see that\
    \ you are looking for a way to remove all instances where a particular key doesn't\
    \ exist.  In that case, I think array_filter would be best suited for what you\
    \ want to do.\nhttp://us1.php.net/manual/en/function.array-filter.php\n<|/ a dscore=0\
    \ tags=multidimensional-array,arrays,php,filter |>\n<| a |>\nYou can do it using\
    \ array_filter(), but I'd do it using an anonymous function instead:\n<code>\n\
    $output = array_filter($input, function($a) {\n    return !isset($a['id']);\n\
    });\n</code>\n<|/ a dscore=0 tags=multidimensional-array,arrays,php,filter |>\n\
    <| c |>\nIf you're going to use an anonymous function, you should at least make\
    \ it return something meaningful for `array_filter` to use. Otherwise the whole\
    \ array will go through regardless.\n<|/ c |>\n<| c |>\n- Not sure what you mean\
    \ by \"meaningful\".  If the anonymous function returns false, the entire array\
    \ will be filtered.  If the anonymous function returns true, the item will be\
    \ kept.\n<|/ c |>\n<| c |>\n: Yes, I understood that already. What I meant was\
    \ that you should make the anonymous function return something useful, otherwise\
    \ the whole array will go through regardless of the return value.\n<|/ c |>\n\
    <| c |>\n- You mean `$a['id']`?  Yes, that's true.  If the anonymous function\
    \ returns true, the item will be kept.  If the anonymo\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8r0oywu0.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  $integers\
    \ = [];\n  foreach ($values as $value) {\n    $is_integer = is_int($value);\n\
    \    if ($is_integer && $value > 0) {\n      $integers[] = $value;\n    }\n  }\n\
    \  return $integers;\n}\n</code>\n(I used this technique to filter the following\
    \ array for integer values: [\"a\", \"1\", 3.14, true, false, null])\n<code>\n\
    Array\n(\n    [0] => a\n    [1] => 1\n    [2] => 3.14\n    [3] => 1\n    [4] =>\
    \ 1\n    [5] => 1\n)\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\nHere is a quick\
    \ function that will do just what you need:\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgww1ymek.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylhy_nbn.php:16\n\
    Stack trace:\n#0 /tmp/tmpylhy_nbn.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpylhy_nbn.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $filtered\
    \ = array();\n    foreach ($values as $value) {\n        if (is_integer($value))\
    \ {\n            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmzigg6o.php:17\n\
    Stack trace:\n#0 /tmp/tmpbmzigg6o.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbmzigg6o.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  if (!is_array($values))\
    \ {\n    return $values;\n  }\n  return array_filter($values, function($value)\
    \ {\n    return !is_numeric($value) && is_string($value);\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwp_co4a.php:22\n\
    Stack trace:\n#0 /tmp/tmprwp_co4a.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprwp_co4a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($value) {\n            return\
    \ filter_var($value, FILTER_VALIDATE_INT) !== false;\n        }\n    );\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfl3t6vna.php:22\n\
    Stack trace:\n#0 /tmp/tmpfl3t6vna.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfl3t6vna.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter(\n        $values,\n        function ($val) {\n            return\
    \ is_int($val);\n        }\n    );\n}\n</code>\n<|/ a tags=php,arrays,filtering,filter\
    \ dscore=3 |>\n<| c |>\nI think you should change the condition to `is_int($val)\
    \ && $val > 0`\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n  \
    \  return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppirw7lei.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_numeric($value);\n\
    \  });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposzvsku7.php:19\n\
    Stack trace:\n#0 /tmp/tmposzvsku7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmposzvsku7.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n\n/**\n * Convert given array into python lists\n * >>> list(['a', 'b', 1,\
    \ 2, 3])\n * ['a', 'b', 1, 2, 3]\n * >>> list([1, 2, 3])\n * [1, 2, 3]\n * >>>\
    \ list({'a': 1, 'b': 2, 'c': 3, 'd': 4})\n * [{'a': 1, 'b': 2}, {'c': 3, 'd':\
    \ 4}]\n * >>> list({})\n * []\n * >>> list([])\n * []\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gnt92j2.php:32\n\
    Stack trace:\n#0 /tmp/tmp2gnt92j2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2gnt92j2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    return (bool)is_int($value);\n\
    \  });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp796qopar.php:19\n\
    Stack trace:\n#0 /tmp/tmp796qopar.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp796qopar.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  foreach\
    \ ($values as &$v) {\n    if (is_numeric($v) && intval($v) == $v) {\n      $v\
    \ = (int)$v;\n    }\n  }\n  return $values;\n}\n\n/**\n * Filter given list of\
    \ any python values only for floats\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 16 in /tmp/tmpwhnr25wx.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp180m9v89.php:17\n\
    Stack trace:\n#0 /tmp/tmp180m9v89.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp180m9v89.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($item) {\n    return !is_null($item) && is_numeric($item);\n\
    \  });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmd62efv6.php:19\n\
    Stack trace:\n#0 /tmp/tmpmd62efv6.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmd62efv6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqfuwzkc.php:19\n\
    Stack trace:\n#0 /tmp/tmpiqfuwzkc.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpiqfuwzkc.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    if ($value instanceof Integer)\
    \ {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa75xo_iu.php:23\n\
    Stack trace:\n#0 /tmp/tmpa75xo_iu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa75xo_iu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n</code>\nFor float values:\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzt3z6lcn.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    foreach\
    \ ($values as $v) {\n        if (is_numeric($v)) {\n            yield $v;\n  \
    \      }\n    }\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d3sfbb9.php:20\n\
    Stack trace:\n#0 /tmp/tmp2d3sfbb9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2d3sfbb9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpms289dlv.php:17\n\
    Stack trace:\n#0 /tmp/tmpms289dlv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpms289dlv.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    // Return\
    \ only integer values from given list\n    return array_filter(\n        $values,\n\
    \        function ($value) {\n            return filter_var($value, FILTER_VALIDATE_INT)\
    \ !== false;\n        }\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpck44iq1u.php:23\n\
    Stack trace:\n#0 /tmp/tmpck44iq1u.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpck44iq1u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvu211yrg.php:16\n\
    Stack trace:\n#0 /tmp/tmpvu211yrg.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpvu211yrg.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n\n/**\n * Returns string representation\
    \ of given number as decimal, e.g. '0.5' instead of 0.5\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0eqqr8ph.php:20\n\
    Stack trace:\n#0 /tmp/tmp0eqqr8ph.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0eqqr8ph.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vvvp2bu.php:17\n\
    Stack trace:\n#0 /tmp/tmp1vvvp2bu.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp1vvvp2bu.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $integers\
    \ = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n  \
    \          $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n\
    </code>\nAnd here is the test output:\n<code>\nPHPUnit 7.5.2 by Sebastian Bergmann\
    \ and contributors.\nF\n\nTime: 1.32 seconds, Memory: 8.00MB\n\nThere was 1 failure:\n\
    \n1) ExampleTest::testExample\nFailed asserting that null matches expected 3.14.\n\
    Failed asserting that null matches expected false.\nFailed asserting that null\
    \ matches expected true.\nFailed asserting that null matches expected 1.\nFailed\
    \ asserting that null matches expected 2.\nFailed asserting that null matches\
    \ expected array.\nFailed asserting that null matches expected object.\n</code>\n\
    <|/ a tags=php,phpunit dscore=2 |>\n<| c |>\nThanks for your solution! Could you\
    \ please have a look at my edit?\n<|/ c |>\n<| c |>\nI added some more test code\
    \ - does that help?\n<|/ c |>\n<| a tags=php,phpunit dscore=2 |>\nYou can use\
    \ array_filter() and is_int() like this:\n<code>\n$result = array_filter($values);\n\
    $result = array_filter($result, function ($value) {\n    return (is_int($value));\n\
    });\n</code>\nThis should remove any non-integer values from your array.\n<|/\
    \ a |>\n<| c |>\nThanks for your solution! Could you please have a look at my\
    \ edit?\n<|/ c |>\n<| c |>\nYour edit is completely different than the original\
    \ question. Why not create a new question and leave this one open until you get\
    \ it solved?\n<|/ c |>\n<| c |>\nMy bad. Thanks for your help anyway! I already\
    \ marked an answer as accepted because it helped me the most and I used it for\
    \ my question above. But I appreciate your help and will consider to open a new\
    \ question if necessary.\n<|/ c |>\n<| a tags=php,phpunit |>\nUsing Laravel's\
    \ Collection's filter() method with is_int() test should work fine:\n<code>\n\
    $result = collect([1, 2, 3, 'abc', {}, []])->filter(function ($value) {\n    return\
    \ is_int($value);\n})->toArray();\n$this->assertSame([1,2,3], $result);\n</code>\n\
    But if you have many items in your collection then it may be better to use a loop:\n\
    <code>\n$result = collect([1, 2, 3, 'abc', {}, []])->filter(function ($value)\
    \ {\n    return is_\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpss_1jepx.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_integer($value);\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a |>\n\
    <code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyzx8n2gd.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    $filtered\
    \ = [];\n\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $filtered[] = $value;\n        }\n    }\n\n    return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,list dscore=2 |>\n<| a dscore=2 tags=php,arrays,list\
    \ |>\n<code>\n$filtered = array_filter(\n    $values,\n    function ($value) {\n\
    \        return is_int($value);\n    }\n);\n</code>\n<|/ a |>\n<| a tags=php,arrays,list\
    \ |>\n<code>\n$filtered = array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n});\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is the most\
    \ concise and readable code snippet I've seen so far. The others seem to not do\
    \ an array_filter at all.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$values\
    \ = [\n    1,\n    'hello',\n    3.14\n];\n$filtered = array_filter($values, function($value)\
    \ {\n    return is_int($value);\n});\nprint_r($filtered);\n</code>\nPrints:\n\
    <code>\nArray\n(\n    [1] => 1\n)\n</code>\n<|/ a tags=php,arrays,list |>\n<|\
    \ a dscore=1 tags=php,arrays,list |>\n<code>\n$values = [\n    1,\n    'hello',\n\
    \    3.14\n];\n$filtered = array_filter(\n    $values,\n    function($value) {\n\
    \        return is_int($value);\n    }\n);\n</code>\n<|/ a |>\n<| c |>\nThe code\
    \ you provided does not even compile\n<|/ c |>\n<| c |>\nYou are right. I forgot\
    \ a `)` after `$value`. Fixed that.\n<|/ c |>\n<| a tags=php,arrays,list dscore=0\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvwv2fzd1.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter($values, function($value) {\n    return !is_bool($value);\n  });\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7x5k94f.php:19\n\
    Stack trace:\n#0 /tmp/tmps7x5k94f.php(23): test()\n#1 {main}\n  thrown in /tmp/tmps7x5k94f.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n\treturn\
    \ array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8go3mcg4.php:17\n\
    Stack trace:\n#0 /tmp/tmp8go3mcg4.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp8go3mcg4.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nYou can pass php callback to\
    \ array_filter\n<code>\n$array_of_strings = ['1','2','3','4','5','6','7','8','9','10'];\n\
    \n$array_of_strings = array_filter($array_of_strings,function($v) {\n    return\
    \ (is_string($v) && strlen($v) > 7);\n});\n</code>\n<|/ a dscore=2 tags=arrays,php,filter\
    \ |>\n<| c |>\nJust a minor point, you don't need to wrap the return value in\
    \ parenthesis, as this is already a boolean value.\n<|/ c |>\n<| c |>\nThis one\
    \ was just what I needed - I needed to filter out empty arrays and strings. Cheers\n\
    <|/ c |>\n<| a tags=arrays,php,filter dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw1sxwvq7.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    return\
    \ array_filter($values, function ($value) {\n        return is_integer($value);\n\
    \    });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplsx4cak.php:18\n\
    Stack trace:\n#0 /tmp/tmpplsx4cak.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpplsx4cak.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n  return\
    \ array_filter(\n    $values,\n    function ($value) {\n      return is_integer($value);\n\
    \    }\n  );\n}\n\n/**\n * @return bool\n */\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxqedjoxt.php:25\n\
    Stack trace:\n#0 /tmp/tmpxqedjoxt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxqedjoxt.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter given list of any python values only for integers\n//\
    \ >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n    if (!is_array($values))\
    \ {\n        return $values;\n    }\n\n    $return = [];\n    foreach ($values\
    \ as $k => $v) {\n        if (is_array($v)) {\n            $return = array_merge($return,\
    \ filter_integers($v));\n        } elseif (is_numeric($v)) {\n            $return[]\
    \ = $v;\n        }\n    }\n\n    return $return;\n}\n\n/**\n * Converts a string\
    \ to an HTML <abbr> tag.\n *\n * @param string $string\n *\n * @return string\n\
    \ */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfmryg93.php:37\n\
    Stack trace:\n#0 /tmp/tmplfmryg93.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplfmryg93.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
