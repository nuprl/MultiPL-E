name: HumanEval_147_get_max_triples
language: php
prompt: "<?php\n// You are given a positive integer n. You have to create an integer\
  \ array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] =\
  \ i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where\
  \ i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
  \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid\
  \ triple is (1, 7, 13).\nfunction get_max_triples($n) {\n"
tests: "function candidate(...$args) {\n    return get_max_triples(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(5) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(10) !== 36) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(100) !== 53361) { throw new Exception(\"Test failed!\"); }\n\
  }\n\ntest();"
completions: ["  $a = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $a[] = $i;\n  }\n\
    \  return count_triple_three($a);\n}\n", "    $a = [];\n    for ($i = 0; $i <=\
    \ $n; $i++){\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n         \
    \   for ($k = 0; $k < $n; $k++) {\n                if ($a[$i] + $a[$j] + $a[$k]\
    \ % 3 === 0) {\n                    $count++;\n                }\n           \
    \ }\n        }\n    }\n    return $count;\n}", "    $a = array_fill(1, $n, 0);\n\
    \    array_multisort($a, SORT_NUMERIC);\n    $result = 0;\n    for ($i = 1; $i\
    \ < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            for ($k =\
    \ 1; $k < $n; $k++) {\n                $triple = $a[$i] + $a[$j] + $a[$k];\n \
    \               if ($triple < 3) {\n                    $result = $i;\n      \
    \              break;\n                }\n            }\n        }\n    }\n  \
    \  return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis solution takes\
    \ advantage of the fact that the array is sorted in ascending order, so the last\
    \ element of the array is the highest. The idea is to:\n\nStart with the first\
    \ element of the array, which is a[0]. \nAdd the next element a[1] and compare\
    \ it to a[0], which is a[0]+a[1]. \nIf a[0]+a[1] is not < 3, then return the number\
    \ of elements in the array that are less than 3. \n\nThe code below works in PHP\
    \ 7:\n<code>\n<?php", "    $a = array();\n    for($i = 1; $i <= $n; $i++) {\n\
    \        $a[$i] += $i;\n    }\n    $sum = 0;\n    for($i = 1; $i <= $n; $i++)\
    \ {\n        for($j = $i; $j <= $n; $j++) {\n            for($k = $j; $k <= $n;\
    \ $k++) {\n                $sum += $a[$i] * $a[$j] * $a[$k] - $a[$i] + $a[$j]\
    \ + $a[$k];\n            }\n        }\n    }\n    return $sum % 3 == 0;\n}\n",
  "    // write your code here\n    $arr = array();\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $arr[$i] = $i * $i - $i + 1;\n    }\n    sort($arr);\n    $result\
    \ = array();\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = $i\
    \ + 1; $j < count($arr); $j++) {\n            for ($k = $j + 1; $k < count($arr);\
    \ $k++) {\n                if ($arr[$i] + $arr[$j] + $arr[$k] % 3 == 0) {\n  \
    \                  $result[] = array($arr[$i], $arr[$j], $arr[$k]);\n        \
    \        }\n            }\n        }\n    }\n    return count($result);\n}", " \
    \   $a = [];\n    for ($i = 0; $i < $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    asort($a);\n    $n = count($a);\n    $i = 0;\n    $j = $k = 0;\n\
    \    $sum = 0;\n    while($j < $n) {\n        $sum = $sum + $a[$j];\n        if($sum\
    \ == $n * 3) {\n            $i++;\n            $j++;\n        } else {\n     \
    \       $k++;\n            $sum = 0;\n        }\n    }\n    return $i;\n}\n\n\
    echo \"<pre>\";\necho \"The number of triples are: \" . get_max_triples($n) .\
    \ \"\\n\";", "    $res = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if ($i + $j + $k == $i * $i * $i) {\n                    $res++;\n\
    \                }\n            }\n        }\n    }\n    return $res;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYes, that's exactly what I was looking for. Thank you.\n<|/\
    \ c |>\n<| a dscore=0 |>\nOne of the simplest solutions is to use a brute force\
    \ algorithm. It will take O(n^3). You can optimize it by using a hash to keep\
    \ count of already calculated triples. For example, you can keep a hashmap of\
    \ already calculated numbers (O(n)), then you will be able to calculate each new\
    \ number in O(1) (amortized). Something like this :\n<code>\npublic static int\
    \ findMaxTriples(int n)\n{\n    if (n <= 0)\n        return 0;\n\n    HashMap<Integer,\
    \ Integer> m = new HashMap<>();\n    for (int i = 1; i <= n; i++) {\n        if\
    \ (m.containsKey(i * i * i)) {\n            Integer count = getCount(m, i);\n\
    \            int res = i * i * i + count * count;\n            return res > 3?\
    \ res : 3;\n        }\n        m.put(i * i, 1);\n    }\n\n    return 0;\n}\n\n\
    private static int getCount(HashMap<Integer, Integer> m, int num)\n{\n    if (m.containsKey(num))\n\
    \        return m.get(num);\n\n    int res = 1;\n    while (num >= 2 * res ) {\n\
    \        res++;\n    }\n    m.put(num, res);\n    return res;\n}\n</code>\n<|/\
    \ a tags=algorithm,php,dynamic-programming |>\n<| c |>\nIt's actually not O(n^3).\
    \ Hash table is constant time operation in most programming languages, but the\
    \ algorithm is not O(n^3) in general\n<|/ c |>\n<| c |>\nThe complexity of hashmap\
    \ can be O(1) in general. But here we are trying to calculate all numbers in the\
    \ range from 1 to n^3 and we cant use hashmap as there are too many collisions.\
    \ Thats why i said it is O(n^3)\n<|/ c |>\n<| c |>\nWhat you actually do here\
    \ is calculate all numbers in O(n^2), which is obviously not what OP wants.\n\
    <|/ c |>\n<| c |>\nActually i thought the solution would have to be in O(n^3)\
    \ because if i use hashmap, it takes O(n^", "    if ($n <= 0) return 0;\n    $arr\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j\
    \ < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n            \
    \    $arr[$i][$j][$k] = $i * $i * $i + $j * $j * $j + $k * $k * $k;\n        \
    \    }\n        }\n    }\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n \
    \       for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k <\
    \ $n; $k++) {\n                if ($arr[$i][$j][$k] == ($i * $i * $i + $j * $j\
    \ * $j + $k * $k * $k)) {\n                    $sum++;\n                }\n  \
    \          }\n        }\n    }\n    return $sum;\n}\n", "    $array = array();\n\
    \    $array[0] = 1;\n    $max = 0;\n    for($i=1; $i<$n; $i++) {\n        for($j=$i;\
    \ $j<$n; $j++) {\n            $array[$j] = $array[$i] + $array[$j];\n        \
    \    if($array[$i] + $array[$j] + $array[$k] % 3 == 0) {\n                $max++;\n\
    \            }\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=algorithm,php dscore=0 |>\nI used the solution from Jongware to\
    \ solve this problem, since it seemed easier to understand. My solution is below:\n\
    <code>", "    $a = array();\n    $result = 1;\n    for($i = 1; $i <= $n; $i++){\n\
    \        $a[i] = $i*$i-1;\n    }\n    foreach($a as $key => $value){\n       \
    \ for($j=$key; $j<$n; $j++){\n            for($k=$j; $k<$n; $k++){\n         \
    \       if($j<$k){\n                    if($value+$a[$j]+$a[$k] == $value*3){\n\
    \                        $result++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return $result;\n}\necho get_max_triples(6);\n\
    </code>\n<|/ a |>\n<| c |>\nNice solution, just wanted to mention that this isn't\
    \ O(n^2) but O(n), since you loop through the array three times :-)\n<|/ c |>\n\
    <| c |>\nThis is **EXACTLY** what I was looking for.  Thank you!  But I thought\
    \ it might not be O(n^2) because of the nested for loops.  Thank you for teaching\
    \ me how to think about this problem in greater detail.  I understand what you\
    \ are saying about being O(n), but the complexity doesn't seem O(n^2) to me.\n\
    <|/ c |>\n<| c |>\nYou are welcome! It is an O(n^2) because you are doing 3 loops\
    \ in each iteration. Hope you understand why it is O(n^2). Glad to help! :)\n\
    <|/ c |>\n<| c |>\nWhy not just use a hash table?\n<|/ c |>\n<| c |>\nThis is\
    \ **EXACTLY** what I was looking for. I used hash table and was able to solve\
    \ my problem.\n\nThank you!  But I thought it might not be O(n^2) because of the\
    \ nested for loops. Thank you for teaching me how to think about this problem\
    \ in greater detail. I understand what you are saying about being O(n), but the\
    \ complexity doesn't seem O(n^2) to me.\n<|/ c |>\n<| a |>\nI believe you wanted\
    \ the result to be returned in O(n) time.\n<code>", "    $a = [];\n    for($i\
    \ = 0; $i < $n; $i++){\n        $a[] = $i * $i - $i + 1;\n    }\n    $total =\
    \ 0;\n    $res = 0;\n    foreach($a as $k => $v){\n        if($v % 3 == 0 && $v\
    \ != 0){\n            $total += 3;\n            $res++;\n        }\n    }\n  \
    \  return $res;\n}\n", "    $arr = array();\n    for($i=0;$i<$n;$i++){\n     \
    \   for($j=$i;$j<$n;$j++){\n            for($k=$j;$k<$n;$k++){\n             \
    \   if($i+$j+$k==$n){\n                    $arr[$i][$j][$k]=$i+$j+$k;\n      \
    \          }\n            }\n        }\n    }\n    return count($arr);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    $a = array();\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $a[$i] = $i*$i-$i+1;\n    }\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        for ($j = 1; $j <= $n; $j++) {\n            if ($i\
    \ != $j) {\n                if ($a[$i] + $a[$j] + $a[$i]+$a[$j]+$a[$i]+$a[$j]+$a[$i]+$a[$j]+$a[$i]+$a[$j]%3\
    \ ==0) {\n                    return 1;\n                }\n            }\n  \
    \      }\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease\
    \ don't use code formatting for text that isn't code.\n<|/ c |>\n<| c |>\nThank\
    \ you for that input. I was really curious to see if there was a better solution\
    \ than O(n^3). Seems like there is.\n<|/ c |>\n<| c |>\nThis is not a good answer,\
    \ since it relies on an arbitrary number of triples. A better answer would be\
    \ one that computes the number of triples *per triple*.\n<|/ c |>\n<| c |>\nI\
    \ am sorry but can you give an example where my solution breaks down?\n<|/ c |>\n\
    <| c |>\nIf you look at each triple in the for loop, you can see that there are\
    \ two inner loops. Those two inner loops have to check each other triple. The\
    \ outer loop just checks the inner loop results and returns the result. As soon\
    \ as that happens, the inner loop has found a new triple and so a new result has\
    \ be checked by outer loop.\n<|/ c |>\n<| a tags=php,algorithm,combinations,math\
    \ |>\nYou could solve this in O(n\xB2). I will explain the solution using a pen\
    \ and paper, so you can follow along.\n<code>\nfor (i = 0; i<n; i++)\n  for (j=0;\
    \ j<n; j++)\n    for (k=0; k<n; k++)\n      if ((i<j && k<j) || (i>j && k<j) ||\
    \ (i<j && k>j) || (i>j && k>j) || ((i<j && k<j && j<k) || (i>j && k<j && j>k)\
    \ || ((i<j && k<j && i<k) || (i>j && k<j && i>k)))\n        add (i,j,k)\n</code>\n\
    The first for loop iterates n times (first column). We initialize i, j, k as ",
  "    $a = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i -\
    \ $i + 1;\n    }\n    $counter = 0;\n    $triples = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            for ($k\
    \ = 0; $k < $n; $k++) {\n                if ($i == $j && $j == $k && $a[$i] +\
    \ $a[$j] + $a[$k] % 3 == 0) {\n                    $counter++;\n             \
    \       $triples[] = array($i, $j, $k);\n                }\n            }\n  \
    \      }\n    }\n    return $counter;\n}\n", "    $a = [];\n    $a[0] = 1;\n \
    \   $n = $n - 1;\n    for($i = 0; $i < $n; $i++) {\n        $a[i] = $a[i + $i];\n\
    \    }\n    return count($a);\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n\
    <code>\n<?php\n$a = array(1 ,2 ,3 ,4 ,5);\nfor ($i=0; $i<count($a); $i++){\n \
    \   for ($j=0; $j<count($a); $j++){\n        for ($k=0; $k<count($a); $k++){\n\
    \            if((($i==$j) && ($j==$k) && ($i!=j))||(($i!=j) && ($j==$k) && ($i==$k))){\n\
    \                echo $a[$i] . $a[$j] . $a[$k] . \"<br>\";\n            }\n  \
    \      }\n    }\n}", "    $triples = array();\n    $max = array();\n    $a = [];\n\
    \    for($i = 1; $i <= $n; $i++){\n        if(isset($max[$i])){\n            $max[$i]\
    \ += 1;\n            $a[$i] += $max[$i];\n        }else{\n            $max[$i]\
    \ = 1;\n            $a[$i] = $i;\n        }\n    }\n    for($i = 1; $i <= $n;\
    \ $i++){\n        for($j = $i+1; $j <= $n; $j++){\n            for($k = $j+1;\
    \ $k <= $n; $k++){\n                if( ($a[$i] + $a[$j] + $a[$k]) % 3 === 0){\n\
    \                    $triples[] = array($a[$i], $a[$j], $a[$k]);\n           \
    \     }\n            }\n        }\n    }\n    return count($triples);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nHi, thanks for your answer. Unfortunately, I need\
    \ a solution which works with arrays of any length.\n<|/ c |>\n<| c |>\nWhat about\
    \ this : 1) get the max number 2) make your arrays of same length 3) loop over\
    \ the arrays and find the triples?\n<|/ c |>\n<| c |>\n, please see the modified\
    \ answer\n<|/ c |>\n<| c |>\n, can you explain why this doesn't work for you?\n\
    <|/ c |>\n<| c |>\nHi, I still need to find out how to implement your answer into\
    \ my code. I can't seem to find the right syntax for it. :(\n<|/ c |>\n<| a tags=php,arrays,algorithm\
    \ |>\nThis is another solution that uses recursive functions and is as fast as\
    \ it could be:\n<code>\n$arr = [];\n\n$arr[] = 1;\n$arr[] = 2;\n$arr[] = 3;\n\n\
    $arr[] = array(0);\n", "    $arr = array(1);\n    for($i = 1;$i < $n;$i++){\n\
    \        $arr[$i] = $arr[$i-1] * $i - $i + 1;\n    }\n    $res = 0;\n    for($i\
    \ = 1; $i < $n; $i++){\n        for($j = 1; $j < $n; $j++){\n            $k =\
    \ $j;\n            $res = max($arr[$i] + $arr[$j] + $arr[$k], $res);\n       \
    \ }\n    }\n    return $res;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,algorithm\
    \ dscore=0 |>\n<code>", "    $a = [];\n    for($i = 0; $i <= $n; $i++) {\n   \
    \     $a[] = $i * $i - $i + 1;\n    }\n    $sum = 0;\n    for($i = 0; $i <= $n;\
    \ $i++) {\n        $j = 0;\n        for($j = 0; $j <= $n; $j++) {\n          \
    \  $k = 0;\n            for($k = 0; $k <= $n; $k++) {\n                if($i !=\
    \ $j && $j != $k) {\n                    $sum += $a[$i] * $a[$j] * $a[$k];\n \
    \                   break;\n                }\n            }\n        }\n    }\n\
    \    return $sum % 3 == 0;\n}\n", "    $a = (int) array_fill(0, $n, 0);\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n\n   \
    \ $count = 0;\n    $triple = array();\n    foreach ($a as $val) {\n        $triple\
    \ = array($a, $val);\n        if (array_sum($triple) % 3 == 0) {\n           \
    \ $count++;\n        }\n    }\n\n    return $count;\n}", "    for($i = 0; $i <\
    \ $n; $i++){\n        $temp = 2 * $i - $i;\n        while(is_int($temp)){\n  \
    \          $temp++;\n        }\n    }\n    return $temp - 1;\n}", "    $array\
    \ = [];\n    for($i = 1; $i <= $n; $i++) {\n        $array[$i] = 0;\n    }\n \
    \   $array[1] = 1;\n    for($i = 2; $i <= $n; $i++) {\n        $array[$i] /= 3;\n\
    \        for($j = $i + 1; $j <= $n; $j++) {\n            for($k = $j + 1; $k <=\
    \ $n; $k++) {\n                if(($array[$i] * a[$i]) + ($array[$j] * a[$j])\
    \ + ($array[$k] * a[$k]) == $i) {\n                    $array[$i] += 1;\n    \
    \                $array[$j] += 1;\n                    $array[$k] += 1;\n    \
    \            }\n            }\n        }\n    }\n    return count($array);\n}\n\
    </code>\nThe reason I added the if ($i == 1) check is to prevent a division by\
    \ zero error if $i == 0. If your initial array was [0, 0] instead of [1] and you\
    \ didn't add that check, the code would fail when $i == 0 as $array[1] / $array[0]\
    \ is 0.\n<|/ a |>\n<| c |>\nCan you please explain to me how this works. I've\
    \ been trying to work this out all day, but I can't seem to grasp the concept\
    \ of how this works. Thanks\n<|/ c |>\n<| c |>\nThis is an old question from 2014,\
    \ however the solution works. So I thought I could share this with everyone.\n\
    <|/ c |>\n<| a dscore=0 |>\nThe key insight here is that you need to break down\
    \ the problem into steps. \nThe first step is to create a function which takes\
    \ your array and the element you are looking for and returns the number of triplets\
    \ found.\n<code>", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = $i; $j < $n; $j++) {\n            for ($k = $j; $k < $n; $k++)\
    \ {\n                if ($i + $j + $k == $n * 3 && $i + $j + $k == $n * 3 * 2)\
    \ {\n                    $result[] = array($i, $j, $k);\n                }\n \
    \           }\n        }\n    }\n    return count($result);\n}", "    \n    $array\
    \ = [];\n    $array[0] = $n;\n    \n    for($i = 1; $i < $n; $i++) {\n       \
    \ $array[$i] = $array[$i-1] * $array[$i-1] - $array[$i] + 1;\n    }\n    \n  \
    \  for($i = 1; $i < $n; $i++) {\n        for($j = $i+1; $j < $n; $j++) {\n   \
    \         for($k = $j+1; $k < $n; $k++) {\n                if($array[$i] + $array[$j]\
    \ + $array[$k] % 3 == 0) {\n                    return $i+1;\n               \
    \ }\n            }\n        }\n    }\n    \n    return 0;\n}", "    if ($n < 3)\
    \ {\n        return 0;\n    }\n    \n    $a = range(1,$n);\n    $count = array();\n\
    \    $count = array_count_values($a);\n    $count = 0;\n    foreach ($count as\
    \ $k => $v) {\n        foreach ($count as $j => $v2) {\n            foreach ($count\
    \ as $i => $v3) {\n                if ($i==$j && $j==$k && $i!=0 && $j!=0 && $k!=0)\
    \ {\n                    $count = $count + $v;\n                }\n          \
    \  }\n        }\n    }\n    return $count;\n}\n$time = get_max_triples(8);\necho\
    \ microtime(true) - $time;\n</code>\nOutput:\n<code>\n0.703087829898864\n</code>\n\
    <|/ a tags=php,algorithm,arrays,combinations |>\n<| c |>\nCan you explain what\
    \ happens in the `foreach($count as $i => $v2)` loop? What is $i and $v?\n<|/\
    \ c |>\n<| c |>\n`$i` and `$v` are variable names given to the loop's elements\
    \ ($k and $v2). The loop basically loops through the array `$count` from key 0\
    \ to `$n`. It just happens that since you count the number of times a value appears\
    \ in the array (a count), you also have the index in the array ($k) and the value/count\
    \ ($v2). This is how I realized that we can now use the `$v` value to get the\
    \ total number of triples.\n<|/ c |>\n<| a tags=php,algorithm,arrays,combinations\
    \ dscore=0 |>\nYou can do this with recursion.\nThe idea is to have a function\
    \ that will return the number of triplets possible using a single element from\
    \ the array, and then the remaining elements after the first element have been\
    \ used once.\n<code>\n<?php\n", "    $arr = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $arr[$i] = $i * $i - $i + 1;\n    }\n    foreach ($arr as $key =>\
    \ $value) {\n        $arr[$key] = $arr[$key] - 1;\n    }\n    $result = count(array_filter($arr,\
    \ 'is_multiple', 3));\n    return $result;\n}\n", "    $array = range($n);\n \
    \   sort($array);\n    $count = array_count_values($array);\n    $tril = $array[0]+$array[1]+$array[2]-$array[0]*$array[1]*$array[2];\n\
    \    if($tril%3 != 0){\n        return 0;\n    }\n    return count($count);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=math,arrays,php |>\n<code>\n<?php\n\n\
    /**\n * Get a triplet of numbers from the array whose sum of each triplet is multiple\
    \ of 3.\n * \n * array $arr\n * int\n */", "    $a = [1,2,3,4,5];\n    $max_triple\
    \ = 0;\n    for($i = 0; $i<$n;$i++){\n        $j = ($i + 1)%$n;\n        $k =\
    \ (($i+1) % $n) +1;\n        $total = $a[$i] + $a[ $j] + $a[$k];\n        if ($total%3\
    \ == 0){\n            $max_triple++;\n        }\n    }\n    return $max_triple;\n\
    }\n</code>\n<|/ a dscore=0 tags=php |>\n<| a |>\nThe solution using array_filter:\n\
    <code>", "    \n    $a = [];\n    for($i=1; $i <= $n; $i++){\n        $a[] = $i*$i-1;\n\
    \    }\n    $result = 0;\n    foreach($a as $index => $val) {\n        if($val\
    \ + $a[$index-1] + $a[$index] >= 3){\n            $result++;\n        }\n    }\n\
    \    return $result;\n}\n", "    $a = array();\n    for($i = 0; $i<$n; $i++) {\n\
    \        $a[] = $i*$i-$i+1;\n    }\n    $a = array_count_values($a);\n    return\
    \ max($a[$i]==$i ? 0 : $a[$i] + $a[$i-1] + $a[$i-2]);\n}\n", "    $a = array();\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 0; $j < $i; $j++) {\n \
    \           for ($k = $j + 1; $k < $i; $k++) {\n                if ($i % 2 ==\
    \ 0) {\n                    $a[] = $i * $j + $i;\n                    $a[] = $i\
    \ * $k + $j;\n                    $a[] = $i * $j + $k;\n                }\n  \
    \          }\n        }\n    }\n    sort($a);\n    return array_count_values($a)[3];\n\
    }\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nIt would be helpful to give\
    \ some context about what this code does and how it works.\n<|/ c |>\n<| c |>\n\
    Hi, can you please elaborate more about this?\n<|/ c |>\n<| c |>\nHi, please have\
    \ a look here: https://stackoverflow.com/questions/51939176/php-find-the-maximum-triples-in-an-array\n\
    <|/ c |>\n<| a |>\n<code>\npublic function getMaxTriples($n, $arr) {\n    $tempArr\
    \ = array();\n    \n    for($i = 1; $i <= $n; $i++) {\n        \n        if($i\
    \ < $n) {\n            $tempArr[] = $i;\n        }\n        \n        $arr2 =\
    \ array();\n        \n        foreach($tempArr as $key => $value) {\n        \
    \    foreach($tempArr as $key2 => $value2) {\n                if($key == $key2\
    \ && $value == $value2) {\n                    $arr2[] = $key;\n             \
    \   }\n            }\n        }\n        \n        array_push($tempArr, $arr2);\n\
    \    }\n    \n    return count($tempArr);\n}\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=1 |>\n<| a tags=php,algorithm |>\n<code>", "    $array = array();\n \
    \   $count = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        array_push($array,\
    \ 2 * $i - 1 + $i);\n    }\n    array_multisort($array);\n    $array2 = array_slice($array,\
    \ 0, count($array) / 2);\n    $array3 = array_slice($array, count($array) / 2,\
    \ count($array));\n    foreach ($array2 as $key => $value) {\n        if (array_search($value,\
    \ $array3) !== FALSE) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nAwesome. Can you please explain\
    \ what it is doing?\n<|/ c |>\n<| c |>\n, I have added the comments in the code\n\
    <|/ c |>\n<| c |>\nThis does not work for large inputs. Check my answer\n<|/ c\
    \ |>\n<| a |>\nThis is not a problem that can be solved quickly on most modern\
    \ computers.\nThis problem can be solved in O(n log n) time on modern computers\
    \ by using some kind of a data structure that sorts the numbers and then doing\
    \ lookups. Here is a simple implementation of this:\n<code>\n<?php\n\n$n = 100;\
    \ // Your input size here\n\n$data = [];\n\nfor ($i = 1; $i <= $n; $i++) {\n \
    \   $data[$i] = $i * $i - $i + 1;\n}\n\n$sorted = sort($data);\n", "    if ($n\
    \ < 0)\n        return 0;\n\n    $a = array(1 => 1);\n    for ($i = 2; $i <= $n;\
    \ $i++) {\n        for ($j = $i; $j >= 1; $j--) {\n            $k = $j - 1;\n\
    \            $a[i] = $i * $i - $i + 1;\n            if ($i == $j & $i > $k & $j\
    \ > $k)\n                $a[j] = $j * $j - $j + 1;\n            if ($i > $k &\
    \ $j > $k)\n                $a[k] = $k * $k - $k + 1;\n        }\n    }\n    return\
    \ array_count_values($a)[$a[1] ? 1 : 0];\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI'm looking for the output to be the number of triples.\n<|/ c |>\n<| c\
    \ |>\nAh, okay, so you want to count the number of triples? That's pretty simple\
    \ just modify `return array_count_values($a)[$a[1] ? 1 : 0];` to: `return count($a)\
    \ - 1;`\n<|/ c |>\n<| c |>\nAh! It worked! Thanks for your help! I'm still new\
    \ here so I wasn't able to accept the answer but I'll do that as soon as I have\
    \ enough reputation.\n<|/ c |>\n<| c |>\nActually, I just realized that I can't\
    \ accept it for another 6 minutes. I will do so once I have enough reputation.\n\
    <|/ c |>\n<| c |>\nOh okay, I see, so you just want to count the triples, no counting\
    \ how many times they occur in the array. I see.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nTry this... this will give your all possible combinations from n numbers\
    \ that can form a triangle with k sides.\n<code>\n$n = 3;\n$k = 2;\n$arr = [];\n\
    for($i = 0; $i<$k; $i++) {\n    for($j=0; $j<$i; $j++) {\n        for($k=0; $k<$j;\
    \ $k++) {\n            $arr[] = array($i, $j, $k);\n        }\n    }\n}\nprint_r($arr);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your response! I haven't learned\
    \ those things yet and I'm trying to figure out how it works. I appreciate it.\n\
    <|/ c |>\n<| c |>\nWelcome! :) If you have confusion on how this code works, please\
    \ let ", "\t$array = [];\n\t$sum = $i;\n\n\tfor($i = 0; $i < $n; $i++) {\n\t\t\
    $array[] = $sum;\n\t\t$sum += $sum;\n\t\t$sum += $sum;\n\t}\n\n\t$triples = 0;\n\
    \tfor($i = 0; $i < $n; $i++) {\n\t\t$j = $i+1;\n\t\t$k = $n-$i;\n\t\t$triples\
    \ += ($array[$i] + $array[$j] + $array[$k]) % 3 == 0;\n\t}\n\treturn $triples;\n\
    }\n\n$arr1 = [1,2,3,4,5,6,7,8,9,10];\necho get_max_triples(count($arr1));\n\n\
    $arr2 = [1,2,3,4,5,6,7,8,9,10,11,12,13];\necho get_max_triples(count($arr2));\n\
    \n$arr3 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\necho get_max_triples(count($arr3));\n\
    \n$arr4 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,18",
  "    $arr = array();\n    for($i=0;$i<$n;$i++){\n        $arr[$i] = $i * $i - $i\
    \ + 1;\n    }\n    $count = count($arr);\n    $result = array();\n    for($i=0;$i<$count;$i++){\n\
    \        $j = $i + 1;\n        $k = $j + 1;\n        if($arr[$i] + $arr[$j] +\
    \ $arr[$k] == 3*$i*n){\n            $result[] = array($arr[$i], $arr[$j], $arr[$k]);\n\
    \        }\n    }\n    return count($result);\n}", "    $nums = array();\n   \
    \ for($i = 0; $i<$n; $i++){\n        array_push($nums, i*i-i+1);\n    }\n    $ans\
    \ = 0;\n    for($i = 0; $i<count($nums); $i++){\n        $ans = max($ans, max($nums[$i],\
    \ $nums[$i+1]));\n    }\n    return $ans;\n}\n</code>\n<|/ a tags=php |>\n<| c\
    \ |>\nThanks for your answer. It is a nice answer as well, even though I already\
    \ accepted one. I really appreciate your help!\n<|/ c |>\n<| c |>\nThis was a\
    \ nice idea. It took me a little bit to figure out how to implement the code,\
    \ but now I have some ideas how to improve the code. Thank you!\n<|/ c |>\n<|\
    \ a tags=php |>\nHere is a simple solution:\n<code>", "  $arr = array();\n  $tri\
    \ = array();\n  for($i=1;$i<$n;$i++){\n    $arr[floor($i)]=$i*$i-$i+1;\n  }\n\
    \  for($i=1;$i<$n;$i++){\n    for($j=$i+1;$j<$n;$j++){\n      for($k=$j+1;$k<$n;$k++){\n\
    \        if($arr[$i]+$arr[$j]+$arr[$k]==3){\n          $tri[] = array($i,$j,$k);\n\
    \        }\n      }\n    }\n  }\n  if(count($tri)>0){\n    return count($tri);\n\
    \  }else{\n    return 0;\n  }\n}\n$result = get_max_triples(5);\necho $result;",
  "    $arr = array();\n    for($i=1; $i<=$n; $i++){\n        $arr[$i] = $i*$i-1;\n\
    \    }\n    $res = 0;\n    for($i=1; $i<=$n-1; $i++){\n        for($j=$i+1; $j<=$n;\
    \ $j++){\n            $k = $i+$j;\n            if($arr[$i]+$arr[$j]+$arr[$k] %\
    \ 3 === 0){\n                $res++;\n            }\n        }\n    }\n    return\
    \ $res;\n}", "    $a = array();\n    for($i = 0; $i <= $n; $i++) {\n        $a[$i]\
    \ = $i*$i-$i+1;\n    }\n    sort($a);\n    $triple = 0;\n    for($i = 0; $i <\
    \ $n; $i++) {\n        $triple += ($a[$i]-$a[$i+1]-$a[$i+2])==0?1:0;\n    }\n\
    \    return $triple;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is incorrect. You are\
    \ counting only the triples of `i` where `i` is smaller than `n`, but `a[i]-a[i+1]-a[i+2]`\
    \ might be negative (which is not allowed). You have to count the triples of `i`\
    \ where `i` is bigger than `n`.\n<|/ c |>\n<| c |>\nYes, you are right! I have\
    \ corrected my answer. Thanks!\n<|/ c |>\n<| c |>\nThis answer is still incorrect\
    \ (see my comment to the OP's question). There are many ways to realise the correct\
    \ solution.\n<|/ c |>\n<| c |>\nYeah you're right. I didn't see it. Thanks for\
    \ pointing out. Have you got a better solution?\n<|/ c |>\n<| c |>\nYes, but this\
    \ has already been posted 3 times, and it doesn't really answer the OP's question.\
    \ Also, while you are here, you should use the `foreach` loop instead of `for`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    $a = array();\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $max = 0;\n    foreach\
    \ ($a as $key => $val) {\n        if ($val % 3 == 0 && $val >= $max) {\n     \
    \       $max = $val;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=math,algorithm,php\
    \ dscore=0 |>\n<| c |>\nThank you so much, but this is not working.\n<|/ c |>\n\
    <| c |>\nI updated the answer, please try it again. It works. But I thought that\
    \ your question was about the number of triplets instead of the largest triple.\
    \ Now it returns the number of triples and also the largest triple.\n<|/ c |>\n\
    <| c |>\nNo i want to know the largest triple.\n<|/ c |>\n<| c |>\nYes, I see\
    \ now. Sorry, I missed it :)\n<|/ c |>\n<| c |>\nThanks for your time. But this\
    \ code is also not working.\n<|/ c |>\n<| a tags=math,algorithm,php |>\n<code>\n\
    <?php ", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[$i] = $i\
    \ * $i - $i + 1;\n    }\n    $count = 0;\n    foreach ($a as $k => $v) {\n   \
    \     for ($i = 0; $i < $k; $i++) {\n            $j = 0;\n            while ($j\
    \ < $k) {\n                $j++;\n            }\n            do {\n          \
    \      $k++;\n                do {\n                    $k++;\n              \
    \  } while ($k < $j);\n                $k--;\n            } while ($v == $a[$i]\
    \ + $a[$j] + $a[$k]);\n            if ($v % 3 === 0) {\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}\n", "    // your code\
    \ here\n    $a = array_fill(1, $n, 1);\n    $a[1] = 1;\n    for ($i = 1; $i <\
    \ $n; $i++) {\n        for ($j = $i; $j < $n; $j++) {\n            for ($k = $j;\
    \ $k < $n; $k++) {\n                if ($a[j] + $a[k] + $a[$i] % 3 == 0) {\n \
    \                   $a[$i]++;\n                    $a[$j]+=1;\n              \
    \      $a[$k]+=1;\n                    return $i;\n                }\n       \
    \     }\n        }\n    }\n}\nget_max_triples($n);", "    $a = array();\n    for($i\
    \ = 0; $i < $n; $i++){\n        $a[] = $i * $i -$i + 1;\n    }\n    return count(array_filter($a,\
    \ '_is_multiple_of_three'));\n}\n", "    $a = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $a[] = $i * $i - $i + 1;\n    }\n    sort($a);\n    return count($a);\n\
    }\n", "    $a = array();\n    for($i=1;$i<=$n;$i++)\n        $a[$i] = $i*$i-1;\n\
    \    for($i=1;$i<=$n;$i++){\n        for($j=1;$j<=$i;$j++){\n            for($k=1;$k<=$j;$k++)\n\
    \                if($i!=$j && $i!=$k && $j!=$k && $a[$i+$j+$k]==($i*$i*$i-1))\n\
    \                    return $i+$j+$k;\n        }\n    }\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThank you for replying! My original idea was to find a way of doing this\
    \ using only one loop, but it seems that is impossible to do that. Your answer\
    \ was pretty insightful and helped me to think of another way of doing this (without\
    \ using 3 nested loops). Thanks again!\n<|/ c |>\n<| a |>\nIt seems that this\
    \ question can be solved using only 1 nested loop. This can be done using the\
    \ following code:\n<code>\n$a=array();\nfor($i=0;$i<$n;$i++)\n{\n    $a[$i] =\
    \ $i*$i-1;\n}\n\nfor($i=0;$i<$n;$i++)\n{\n    for($j=0;$j<$i;$j++)\n    {\n  \
    \      if($i!=$j && $i!=$k && $j!=$k && $a[$i+$j+$k]==($i*$i*$i-1))\n        \
    \    return $i+$j+$k;\n    }\n}\n</code>\n<|/ a dscore=0 tags=arrays,php,algorithm\
    \ |>\n<| c |>\nIt's not necessary that you must use only one loop. You could use\
    \ 3 loops as well.\n<|/ c |>\n<| c |>\nYes, you are right. My original idea was\
    \ to find a way of doing this using only one loop, but it seems that is impossible\
    \ to do that. Thanks anyway!\n<|/ c |>\n<| a dscore=0 tags=arrays,php,algorithm\
    \ |>\nI believe this can be solved using a single loop, but you need to store\
    \ it into a separate array as you are returning it and you will be returning a\
    \ single value, so I won't go into that, however it can be done this way:\n<code>",
  "    $arr = array();\n    for($i = 0; $i < $n; $i++) {\n        $arr[$i] = $i*$i-$i+1;\n\
    \    }\n    sort($arr);\n    for($i = 1; $i < $n; $i++) {\n        if($i == $n-1\
    \ || $arr[$i-1] != $arr[$i]) {\n            foreach($arr as $k => $v) {\n    \
    \            if($arr[$i] == ($arr[$i-1] + $arr[$k])) {\n                    return\
    \ $arr[$i];\n                }\n            }\n        }\n    }\n    return 0;\n\
    }\n", "    $a = array();\n    for ($i = 1; $i <= $n; ++$i) {\n        $a[$i] =\
    \ $i * $i - $i + 1;\n    }\n    $s = $a[1] + $a[3] + $a[5];\n    sort($a);\n \
    \   $result = 0;\n    for ($i = 1; $i < $n; ++$i) {\n        for ($j = 0; $j <\
    \ $i; ++$j) {\n            for ($k = 0; $k < $j; ++$k) {\n                if ($a[$i]\
    \ + $a[$j] + $a[$k] == $s) {\n                    ++$result;\n               \
    \ }\n            }\n        }\n    }\n    return $result;\n}", "    $a = array();\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n\
    \    $counter = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            for ($k = 0; $k < $n; $k++) {\n                if\
    \ ($i + $j + $k === $a[$i] + $a[$j] + $a[$k]) {\n                    $counter++;\n\
    \                }\n            }\n        }\n    }\n    return $counter;\n}\n\
    $n = $argv[1];\n$sum = get_max_triples($n);\necho $sum;", "    if ($n < 3) {\n\
    \        return 0;\n    }\n    $a = array_fill(0, $n, 0);\n    $a[0] = -1;\n \
    \   \n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = $i; $j < $n; $j++)\
    \ {\n            for ($k = $j; $k < $n; $k++) {\n                if ($a[$i] +\
    \ $a[$j] + $a[$k] == 0) {\n                    $a[$i] = $j;\n                \
    \    $a[$j] = $k;\n                    $a[$k] = $i;\n                }\n     \
    \       }\n        }\n    }\n    \n    return count($a);\n}\n", "    if($n < 3\
    \ || $n%3 != 0){\n        return 0;\n    }\n    \n    $max = 0;\n    $a = [];\n\
    \    \n    for($i = 0; $i < $n; $i++){\n        $a[] = $i*$i-$i+1;\n    }\n\n\
    \    for($i = 0; $i < $n; $i++){\n        for($j = 0; $j < $n; $j++){\n      \
    \      for($k = 0; $k < $n; $k++){\n                if($i < $j && $j < $k){\n\
    \                    if($a[$i] + $a[$j] + $a[$k] == 3*($i+$j+$k)){\n         \
    \               $max++;\n                    }\n                }\n          \
    \  }\n        }\n    }\n    \n    return $max;\n}\n", "    $a = array();\n   \
    \ for($i=1; $i<$n; $i++) {\n        $a[$i] = $i*$i-$i+1;\n    }\n    $count =\
    \ 0;\n    for($i=0; $i<$n; $i++) {\n        for($j=0; $j<$n; $j++) {\n       \
    \     for($k=0; $k<$n; $k++) {\n                if(($i+$j+$k)%3==0) {\n      \
    \              $count++;\n                }\n            }\n        }\n    }\n\
    \    return $count;\n}\n", "    $a = array();\n    $a[0] = -$n; \n    for($i =\
    \ 1; $i <= $n; ++$i){\n        $a[i] = $i*$i-$i+1;\n    }\n    for($i = 0; $i\
    \ < $n; ++$i){\n        for($j = 0; $j < $n; ++$j){\n            for($k = 0; $k\
    \ < $n; ++$k){\n                if(($i+$j+$k) > $a[0]){\n                    return\
    \ 0;\n                }\n                if($a[0]%3 != 0){\n                 \
    \   return 0;\n                }\n                $a[0] -= $a[0]%3;\n        \
    \        $a[i] += $a[j]%3;\n                $a[j] += $a[k]%3;\n              \
    \  $a[k] += $a[0]%3;\n            }\n        }\n    }\n    return $a[0];\n}\n\
    </code>\n<|/ a tags=optimization,php |>\n<| c |>\nI think your second solution\
    \ is better than mine, it runs in O(n^3) which is better than my O(n^2)\n<|/ c\
    \ |>\n<| c |>\n- I just realized that `if(($i+$j+$k) > $a[0])` isn't needed and\
    \ also that `$a[0]` should be `($i*$i+$j*$j+$k*$k)%3`\n<|/ c |>\n<| c |>\nYeah,\
    \ that condition doesn't make sense since you already have your `a[0]` value.\
    \ I was just trying to optimize my code\n<|/ c |>\n<| c |>\n- Ohhh I see what\
    \ you did there. Yea `$a[0]` is always `0` because you initialized to -$n.\n<|/\
    \ c |>\n<| c |>\nThis is O(n^2) but also O(n^3) because the condition that I used\
    \ is `if(($i+$j+$k) > $a[0])` which means `if(($i+$j+$k) > $a[0]%3)`. So the complexity\
    \ is O(n^3)\n<|/ c |>\n<| a tags=optimization,php |>\nOne solution could be to\
    \ simply sort all possible triplets then just loop through them to find the maximum.\n\
    Sorting the triplets would give you (I believe) a O(nlogn) solution to finding\
    \ the maximum.\n<|/ a dscore=1 |>\n<| a tags=optimization,php |>\nThis is a solution\
    \ in O(n^2) that uses O(n^3) memory by building sets of triplets in sorted order.\n\
    <code>\n", "    $arr = array_fill(0,$n, 0);\n    $sum = 0;\n    for($i = 0; $i\
    \ < $n ; $i++) {\n        $arr[$i] = $i * $i - $i + 1;\n        \n    }\n    $sum\
    \ = 0;\n    for($i = 0; $i < $n ; $i++) {\n        $j = $i + 1;\n        while($j\
    \ < $n) {\n            $k =  $j + 1;\n            while($k < $n && $arr[$i] +\
    \ $arr[$j] + $arr[$k] < 3 ) {\n                $k++;\n            }\n        \
    \    \n            $arr[$j] = $arr[$k];\n            $sum += $arr[$i] + $arr[$j]\
    \ + $arr[$k];\n            $j++;\n            $k++;\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI wonder whether that would be O(n^2),\
    \ or something else?\n<|/ c |>\n<| c |>\nO(n^2). `for` is O(n) also.\n<|/ c |>\n\
    <| c |>\nYeah, I know, I should probably ask my own question\n<|/ c |>\n<| c |>\n\
    I hope you dont mind, i added a O(n) solution to my answer :)\n<|/ c |>\n<| c\
    \ |>\nThis code has a bug that will lead to wrong results. `for ($i = 0; $i <\
    \ $n; $i++)` will give the same result as `for ($i = 0; $i < $n; $i++) { $sum\
    \ = 0; }`\n<|/ c |>\n<| a tags=arrays,php |>\nThis solution is O(n), uses no additional\
    \ memory.\nThe code below goes over every possible 3 values, and calculates all\
    \ possible 3 triples (without duplicates) and adds them to the running total.\n\
    <code>\n$a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\n\n$sum = 0;\n\
    for ($i = 0; $i < 20; $i++) {\n  for ($j = 0; $j < 20; $j++) {\n    for ($k =\
    \ 0; $k < 20; $k++) {\n      $sum = $sum + $a[$i] * $a[$j] * $a[$k];\n    }\n\
    \  }\n}\necho $sum;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhat if there were millions\
    \ of numbers? Would you still want to create an array of every possible triple?\n\
    <|/ c |>\n<| c |>\nThis is not O", "    $a = [];\n    for($i = 1; $i <= $n; $i++){\n\
    \        $a[$i] = 0;\n    }\n    for($i = 1; $i <= $n; $i++){\n        for($j\
    \ = 1; $j <= $n; $j++){\n            $k = 1;\n            for($k = 1; $k <= $n;\
    \ $k++){\n                $a[i + $j + $k] = $a[i + $j + $k] + 1;\n           \
    \     if($a[i + $j + $k] > 3){\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return $a[$i];\n}", "    $a = range(1, $n);\n\
    \    $count = 0;\n    $i = 1;\n    while(isset($a[$i])) {\n        $j = array_search($a[$i],\
    \ $a);\n        if(isset($a[$j]) && isset($a[$i] + $a[$j])) {\n            $k\
    \ = array_search($a[$i] + $a[$j], $a);\n            if($k !== false && $k > $i\
    \ && $k > $j) {\n                $count += 3;\n            }\n        }\n    \
    \    $i++;\n    }\n    return $count;\n}\n", "    $a = array();\n    $a[0] = 1;\n\
    \    for($i = 1; $i < $n; $i++) {\n        $a[i] = $i*$i-$i+1;\n    }\n    $count\
    \ = 0;\n    foreach($a as $val) {\n        if($val % 3 == 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n", "    $array = array();\n    for($i\
    \ = 0; $i < $n; ++$i) {\n        $array[] = $i * $i - $i + 1;\n    }\n    return\
    \ count_triplets($array);\n}\n", "    $a = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n    $res = 0;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n        \
    \    $k = $j + 1;\n            while ($a[$i] + $a[$j] + $a[$k] >= 3) {\n     \
    \           $k++;\n            }\n            if ($a[$i] + $a[$j] + $a[$k] ==\
    \ 3) {\n                $res++;\n            }\n        }\n    }\n    return $res;\n\
    }", "    $a = [0 => 1];\n    $a[1] = 1;\n    for($i = 2; $i < $n; $i++) {\n  \
    \      $b = [0 => 0];\n        for($j = 1; $j < $i; $j++) {\n            $b[$j]\
    \ = $b[$j] + $a[$i];\n        }\n        $a = $b;\n    }\n    return $a[$n-1];\n\
    }", "    $res = 0;\n    $arr = array_fill(0,$n,0);\n    for($i = 1; $i < $n; $i++){\n\
    \        if($arr[$i]==0){\n            $arr[$i] = $i*$i-$i+1;\n        }else{\n\
    \            $j = $i;\n            $k = 0;\n            $max = 0;\n          \
    \  while($j < $n){\n                while($arr[$j]==0){\n                    $j++;\n\
    \                }\n                if($arr[$k]>$max){\n                    $max\
    \ = $arr[$k];\n                    $j = $k;\n                }\n             \
    \   $k++;\n            }\n            if($arr[$i]>$max){\n                $res++;\n\
    \            }\n            $arr[$i] = $max;\n        }\n    }\n    return $res;\n\
    }\n", "    $a = range(1, $n);\n    $count = 0;\n    foreach($a as $i) {\n    \
    \    foreach($a as $j) {\n            foreach($a as $k) {\n                if($i\
    \ > $j && $i > $k && $j > $k) {\n                    if($i + $j + $k == 3 * $i)\
    \ {\n                        $count++;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n", "    $array =\
    \ array();\n    for($i = 1; $i <= $n; $i++){\n        array_push($array, $i *\
    \ $i - $i + 1);\n    }\n\n    $triples = count(array_filter($array, function($item){\n\
    \        return $item % 3 == 0;\n    }));\n\n    return $triples;\n}\n</code>\n\
    <|/ a dscore=1 tags=php,arrays |>\n<| a tags=php,arrays |>\nI did it in a way\
    \ that's not so readable:\n<code>\n$array = [1, 3, 7, 13, 21];\n$result = [];\n\
    foreach ($array as $i => $val) {\n    for ($j = $i+1; $j < count($array); $j++)\
    \ {\n        for ($k = $j+1; $k < count($array); $k++) {\n            $temp =\
    \ $val + $array[$j] + $array[$k];\n            if ($temp % 3 == 0) {\n       \
    \         $result[] = [$val, $array[$j], $array[$k]];\n            }\n       \
    \ }\n    }\n}\n</code>\nIt works fine, but I'm not sure it's good code. And I'm\
    \ not even sure it's efficient.\n<|/ a dscore=0 |>\n<| c |>\nThat's not my code...\
    \ I'm just saying it's not the best solution to the problem.\n<|/ c |>\n<| c |>\n\
    I think this code is efficient too. Your code will run on O(n^3) which is not\
    \ efficient at all.\n<|/ c |>\n<| c |>\nI think it's fast enough but it's not\
    \ the most readable one\n<|/ c |>\n<| c |>\n: Oh, that's true. I've just checked\
    \ it. Your code is faster, but not as fast as mine.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nYou can do that in O(n^2) time using hash table\n<code>\n$array = [1, 3,\
    \ 7, 13, 21];\n$result = [];\n$map = [];\nfor ($i = 0; $i < count($array); $i++)\
    \ {\n    $map[$i] = $i;\n}\nfor ($i = 0; $i < count($array); $i++) {\n    for\
    \ ($j = $i + 1; $j < count($array); $j++) {\n        for ($k = $j + 1; $k < count($array);\
    \ $k++) {\n            $temp = $array[$i] + $array[$j] + $array[$k];\n       \
    \     if ($temp % 3 == 0) {\n                if (!isset($map[$temp])) {\n    \
    \                $result[] = [$array[$i], $array[$j], $array[$k]];\n         \
    \       }\n                unset($map[", "    if ($n == 3) {\n        return 1;\n\
    \    }\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i *\
    \ $i - $i + 1;\n    }\n    $result = 0;\n    $i = 1;\n    $j = 1;\n    $k = 1;\n\
    \    while ($i < $n && $j < $n && $k < $n) {\n        if ($a[$i] + $a[$j] + $a[$k]\
    \ % 3 == 0) {\n            $result++;\n        }\n        $i++;\n        $j++;\n\
    \        $k++;\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\n`function\
    \ get_max_triples($n) {\n    if ($n == 3) {\n        return 1;\n    }\n    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $result = 0;\n    $i = 1;\n    $j = 1;\n    $k = 1;\n    while ($i\
    \ < $n && $j < $n && $k < $n) {\n        if ($a[$i] + $a[$j] + $a[$k] % 3 == 0)\
    \ {\n            $result++;\n        }\n        $i++;\n        $j++;\n       \
    \ $k++;\n    }\n    return $result;\n}`\n<|/ c |>\n<| a dscore=0 tags=php,arrays\
    \ |>\nMy solution using array_filter and array_map functions:\n<code>\n<?php\n",
  "    // write your code here\n    $arr = [];\n    for($i=1;$i<=$n;$i++)\n    {\n\
    \        $arr[$i] = $i*$i-$i+1;\n    }\n    return array_count_values($arr);\n\
    }", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = 0; $j < $n; $j++) {\n            for ($k = 0; $k < $n; $k++) {\n\
    \                if ($i < $j && $j < $k && $i < $k) {\n                    if\
    \ ($a[$i] + $a[$j] + $a[$k] == 0) {\n                        $count++;\n     \
    \                   break;\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return $count;\n}\n\nvar_dump(get_max_triples(5));\n\
    </code>\n<|/ a |>\n<| a tags=arrays,php,math dscore=0 |>\nIf you want the number\
    \ of triples, you can do this:\n<code>\n<?php", "    $a = array();\n    for ($i\
    \ = 0; $i <= $n; $i++){\n        $a[] = $i * $i - $i + 1;\n    }\n    $m = count($a);\n\
    \    $count = 0;\n    for ($j = 1; $j <= $n; $j++){\n        for ($k = $j; $k\
    \ <= $n; $k++){\n            if ($j + $k + $a[$j] > 3 * $a[$k]){\n           \
    \     $count += 1;\n            }\n        }\n    }\n    return $count;\n}\n$result\
    \ = get_max_triples(5);\necho $result;", "    if ($n == 0) {\n        return 0;\n\
    \    }\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i *\
    \ $i - $i + 1;\n    }\n    return count(array_filter($a, 'is_prime'));\n}\n</code>\n\
    <|/ a |>\n<| c |>\ni don't think this is what OP wants, since this code gives\
    \ you all prime numbers and counts the number of triples including those that\
    \ aren't primes\n<|/ c |>\n<| a tags=php |>\nWe can write this as a recursive\
    \ algorithm:\n<code>", "    $a = array();\n    $a[0] = 1;\n    for($i = 1; $i\
    \ < $n; $i++){\n        $a[i] = $a[i-1] * $a[i-1] - $i + 1;\n    }\n    \n   \
    \ $max_triple = 0;\n    for($i = 1; $i <= $n; $i++){\n        for($j = $i; $j\
    \ <= $n; $j++){\n            $total = 0;\n            for($k = $i; $k <= $j; $k++){\n\
    \                $total += $a[$i] * $a[$j] * $a[$k];\n            }\n        \
    \    if($total%3 == 0){\n                $max_triple++;\n            }\n     \
    \   }\n    }\n    return $max_triple;\n}\n\n$time = get_max_triples(1000);\necho\
    \ \"The time required for \" . $n . \" triples is \" . ($time * 0.000001) . \"\
    \ milliseconds.\";\n</code>\n<|/ a |>\n<| c |>\nI tested it on https://www.phpfiddle.org/,\
    \ and it took 98 seconds. I think it's because of the for loops.\n<|/ c |>\n<|\
    \ c |>\nThe time increases exponentially, it's pretty much the same.\n<|/ c |>\n\
    <| a dscore=0 tags=php,algorithm,arrays |>\nHere is a solution in O(n) with a\
    \ single loop and O(1) additional storage.\n<code>", "    $arr = array(1);\n \
    \   for($i = 1; $i <= $n; $i++) {\n        $arr = array_merge($arr, array($i *\
    \ $i - ($i + 1)));\n    }\n    $result = 0;\n    $j = 0;\n    while($j < count($arr))\
    \ {\n        $result = max($result, ($arr[$j] + $arr[$j + 1] + $arr[$j + 2]) %\
    \ 3);\n        $j += 3;\n    }\n    return $result;\n}\n", "    // write your\
    \ code here\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $j = 0;\n        $c = 0;\n        $k = $i;\n        while ($j < $n && $k <\
    \ $n) {\n            if ($j == $k) {\n                $c++;\n                $j++;\n\
    \                $k++;\n            }\n            elseif (($i + 1) < $n && $j\
    \ > 0) {\n                if ($j % 3 == 0) {\n                    $c++;\n    \
    \            }\n                if ($k % 3 == 0) {\n                    $c++;\n\
    \                }\n            }\n            elseif (($i + 1) < $n && $j < $n)\
    \ {\n                if ($j % 3 == 0) {\n                    $c++;\n         \
    \       }\n                if ($k % 3 == 0) {\n                    $c++;\n   \
    \             }\n            }\n            elseif (($i + 1) < $n && $j >= 0)\
    \ {\n                if ($j % 3 == 0) {\n                    $c++;\n         \
    \       }\n                if ($k % 3 == 0) {\n                    $c++;\n   \
    \             }\n            }\n            elseif (($i + 1) < $n && $k >= 0)\
    \ {\n                if ($j % 3 == 0) {\n                    $c++;\n         \
    \       }\n                if ($k % 3 == 0) {\n                    $c++;\n   \
    \             }\n            }\n            else {\n                break;\n \
    \           }\n            $j++;\n            $k++;\n        }\n        if ($c\
    \ == 2) {\n            $result[] = $i + $j;\n        }\n    }\n    return count($result);\n\
    }\n", "    // Write your code here\n    $array = array();\n    $array[0] = -1;\n\
    \    for($i=1; $i<=$n; $i++){\n        $array[$i] = $i*$i-$i+1;\n    }\n    \n\
    \    $triple = 0;\n    for($i=1; $i<=$n; $i++){\n        for($j=1; $j<=$n; $j++){\n\
    \            for($k=1; $k<=$n; $k++){\n                if($array[$i]+$array[$j]+$array[$k]==0\
    \ && $i<$j && $i<$k && $j<$k){\n                    $triple++;\n             \
    \   }\n            }\n        }\n    }\n    return $triple;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nIt should be mentioned, that your code does not count all triples\
    \ (where `i < j < k`, but only triples where `i < k && j < k`, i.e. only `(i,\
    \ j, k) = (1, 2, 3)` is counted)\n<|/ c |>\n<| a |>\nYou can try the below solution\
    \ in JavaScript\n\n<code>", "    $array = [];\n    $a = 0;\n    $b = 0;\n    $c\
    \ = 0;\n    $result = 0;\n    for($i = 0; $i < $n; $i++) {\n        $array[] =\
    \ $i;\n    }\n    for($i = 0; $i < $n; $i++) {\n        for($j = 0; $j < $n; $j++)\
    \ {\n            for($k = 0; $k < $n; $k++) {\n                $a = ($i * $i)\
    \ + ($j * $j) + ($k * $k);\n                if($array[$i] + $array[$j] + $array[$k]\
    \ == $a) {\n                    $b = $array[$i] + $array[$j] + $array[$k];\n \
    \                   if($b > $c) $c = $b;\n                    if($c == 3) $result\
    \ = $result + 1;\n                }\n            }\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,algorithm,arrays |>\n<| c |>\nHi this is\
    \ giving me a wrong answer. Your array is [1, 3, 7, 13, 21] and your answer is\
    \ 2. But I get this answer as 3 when I run your code\n<|/ c |>\n<| c |>\nI have\
    \ edited the code now please try it again\n<|/ c |>\n<| c |>\nYou dont need to\
    \ declare a, b, c at start and you dont need $array[], you can directly use it\
    \ in the inner loop. Also your code is giving answer as 6 when I run your code\n\
    <|/ c |>\n<| c |>\nI have made some changes in the code please try it again and\
    \ tell me\n<|/ c |>\n<| a |>\nThe most efficient way to solve this problem is\
    \ by using a binary search to find the minimum value that sums to n. Once you\
    \ have that, you can binary search to find the number of triplets you can make\
    \ with that number. \n<code>\n<?php", "    $max_triples = 0;\n    $a = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n\
    \    \n    $res = array_filter($a, function($val) use($a){\n        $ret = 0;\n\
    \        for($i = 0; $i < count($a); $i++) {\n            $j = $i + 1;\n     \
    \       $k = $i + 2;\n            if ($j > count($a) || $j === $k) {\n       \
    \         continue;\n            }\n            $ret += $a[$i] + $a[$j] + $a[$k];\n\
    \        }\n        return ($ret == 0);\n    });\n    \n    return count($res);\n\
    }\n", "    $arr = array();\n    for ($i = 1; $i <= $n; ++$i) {\n        $arr[$i]\
    \ = $i * $i - $i + 1;\n    }\n    $max_triples = 0;\n    for ($i = 0; $i < $n;\
    \ ++$i) {\n        for ($j = $i+1; $j < $n; ++$j) {\n            for ($k = $j+1;\
    \ $k < $n; ++$k) {\n                $triples = $arr[$i] + $arr[$j] + $arr[$k];\n\
    \                if ($triples % 3 == 0) {\n                    ++$max_triples;\n\
    \                }\n            }\n        }\n    }\n    return $max_triples;\n\
    }", "    $arr = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $arr[$i]\
    \ = $i*$i-1;\n    }\n    $result = 1;\n    foreach ($arr as $key => $value) {\n\
    \        for ($j = $key; $j < $n; $j++) {\n            for ($k = $key; $k <$n;\
    \ $k++) {\n                if ($arr[$key] + $arr[$j] + $arr[$k] == $value*$value)\
    \ {\n                    $result++;\n                }\n            }\n      \
    \  }\n    }\n    return $result;\n}", "    $a = [];\n    $sum = 0;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n        $sum += $a[$i];\n\
    \    }\n    \n    $c = $sum / 3;\n    $n = 1;\n    foreach ($a as $i) {\n    \
    \    $n++;\n        for ($j = $i; $j < $n; $j++) {\n            $c = $c - $a[$j]\
    \ * $a[$j];\n        }\n    }\n    return $n;\n}\n", "    $a = array();\n    for($i\
    \ = 0; $i < $n; $i++) {\n        $a[] = $i*$i-2 + 1;\n    }\n    return count(array_filter($a,\
    \ 'is_triple'));\n}", "    $result = array();\n    for($i = 1; $i <= $n; $i++)\
    \ {\n        for($j = 1; $j <= $n; $j++) {\n            for($k = 1; $k <= $n;\
    \ $k++) {\n                if($j < $k && $i < $k) {\n                    if( ($i*\
    \ $i - $j * $j) % 3 == 0 ) {\n                        $result[] = array($i, $j,\
    \ $k);\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count($result);\n}", "    $a = array();\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $a[] = array_sum(array_slice($a, 0, $i)) + 1;\n    }\n\
    \    $res = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j\
    \ < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n            \
    \    if ($i + $j + $k == array_sum(array_slice($a, $i, $j, $k)) and $i + $j +\
    \ $k * 3 == array_sum(array_slice($a, $i, $j, $k))) {\n                    $res++;\n\
    \                }\n            }\n        }\n    }\n    return $res;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks, I didn't know how to solve it that way. I'll\
    \ post my solution shortly.\n<|/ c |>\n<| a tags=algorithm,php |>\nThe previous\
    \ answers didn't really help me solve the problem, but I'll post my solution anyway\
    \ since it does solve the problem and it might help others.\nThe idea is to start\
    \ by finding the max triplet and from that find the max pair. I'm pretty sure\
    \ there's a more efficient way of doing this, but here's what I've come up with\
    \ (PHP):\n<code>", "    $a = array();\n    for($i = 1; $i <= $n; $i++){\n    \
    \    array_push($a, $i * $i - $i + 1);\n    }\n    $count = 0;\n    for($i = 0;\
    \ $i < $n; $i++){\n        for($j = $i + 1; $j < $n; $j++){\n            $sum\
    \ = $a[$i] + $a[$j] + $a[$k];\n            if($sum % 3 == 0){\n              \
    \  $count++;\n            }\n        }\n    }\n    return $count;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThank you, its working. But I cannot understand your\
    \ code exactly.\n<|/ c |>\n<| a dscore=0 tags=php |>\n<code>\n<?php\n    $n =\
    \ 5;\n    $a = array();\n    for($i = 1; $i <= $n; $i++){\n        array_push($a,\
    \ $i * $i - $i + 1);\n    }\n    $count = 0;\n    for($i = 0; $i < $n; $i++){\n\
    \        for($j = $i + 1; $j < $n; $j++){\n            $sum = $a[$i] + $a[$j]\
    \ + $a[$k];\n            if($sum % 3 == 0){\n                $count++;\n     \
    \       }\n        }\n    }\n    echo $count;", "    $a = array();\n    for($i\
    \ = 0; $i < $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n    return\
    \ count($a) - 1;\n}\n$n = $input->getInt();\n$a = array();\nfor($i = 0; $i < $n;\
    \ $i++) {\n    $a[$i] = $i * $i - $i + 1;\n}\necho get_max_triples($n) . \"\\\
    n\";\n</code>\n<|/ a tags=php |>\n<| c |>\nYour code is wrong on the first line.\
    \ `$n = $input->getInt();` should be `$n = $input->getInts()[0];`\n<|/ c |>\n\
    <| c |>\nThanks for the comment and sorry for the typo. I'll fix that.\n<|/ c\
    \ |>\n<| c |>\nThis does not work if the input is greater than 1000 and the solutions\
    \ found are less than 1000.\n<|/ c |>\n<| c |>\nThis is really a good solution.\
    \  I've used it for my programming problems.  And it always comes out with correct\
    \ answers, no matter how many loops I've used.\n<|/ c |>\n<| a |>\n<code>", " \
    \   $array = array();\n    for($i=1;$i<=$n;$i++){\n        $array[$i]=$i*$i-$i+1;\n\
    \    }\n    $result = 0;\n    for($i=0;$i<$n;$i++){\n        for($j=0;$j<$n;$j++){\n\
    \            for($k=0;$k<$n;$k++){\n                if($i+$j+$k==$array[$i]+$array[$j]+$array[$k]){\n\
    \                    $result++;\n                }\n            }\n        }\n\
    \    }\n    return $result;\n}", "    $array = array_fill(0, $n, 0);\n    for($i\
    \ = 0; $i <= $n; $i++) {\n        for($j = $i + 1; $j <= $n; $j++) {\n       \
    \     for($k = $j + 1; $k <= $n; $k++) {\n                if($array[$i] + $array[$j]\
    \ + $array[$k] == $i * $i + $j * $j + $k * $k) {\n                    $array[$i]\
    \ = $j;\n                    $array[$j] = $k;\n                    $array[$k]\
    \ = $i;\n                }\n            }\n        }\n    }\n    return count($array);\n\
    }\n\n$result = get_max_triples(5);\necho $result;", "    // write your code here\n\
    \    $a = [];\n    for($i=1; $i<=$n; $i++) {\n        $a[] = $i*$i-3*$i+1;\n \
    \   }\n    return count($a);\n}", "    $array = array_fill(1, $n, 0);\n    for\
    \ ($i=1; $i<=$n; $i++) {\n        for ($j=$i; $j<=$n; $j++) {\n            for\
    \ ($k=$j; $k<=$n; $k++) {\n                if ($array[$i] + $array[$j] + $array[$k]\
    \ == 3*($i-1)) {\n                    $array[$k] = $array[$j];\n             \
    \       $array[$j] = $array[$i];\n                    $array[$i] = $array[$k];\n\
    \                }\n            }\n        }\n    }\n    return count($array);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,optimization,algorithm |>\nI think\
    \ a recursive solution is faster than a loop:\n<code>\n<?php\n", "    $array =\
    \ array_fill(0, $n, 0);\n    $array[0] = 1;\n    $array[1] = 1;\n    $array[2]\
    \ = 1;\n    $array[3] = 1;\n    for($i = 3; $i <= $n; $i++) {\n        for($j\
    \ = 1; $j <= $i; $j++) {\n            $array[$i] = $array[$j] + $array[$i];\n\
    \            $array[$i] = $array[$i] + 3;\n        }\n    }\n    return $array[$n];\n\
    }\n", "    $res = 0;\n    for ($i = 0; $i < $n; $i++)\n        $res += $a[i] %\
    \ 3 == 0;\n    return $res;\n}\n</code>\n<|/ a tags=php,arrays,sum |>\n<| c |>\n\
    Hi, thank you for your reply. I am having difficulties understanding the code.\
    \ Could you please explain your code with some comments? Thanks.\n<|/ c |>\n<|\
    \ a dscore=0 tags=php,arrays,sum |>\n<code>\n$array = array( 0 , 1, 1, 3 , 6,\
    \ 9 , 15 , 18, 20);\n", "  $count = array();\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    $count[$i] = $i * $i - $i + 1;\n  }\n\n  $result = 0;\n  $res = array();\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $j = $i + 1;\n    $k = $n - 1;\n    if\
    \ ($count[$i] % 3 == 0) {\n      array_push($res, $i);\n      array_push($res,\
    \ $j);\n      array_push($res, $k);\n      foreach ($res as $k => $v) {\n    \
    \    if ($v % 3 == 0) {\n          $result += $v - $k + 1;\n          break;\n\
    \        }\n      }\n    }\n  }\n\n  return $result;\n}\n", "    $a = array();\n\
    \    for($i = 0; $i < $n; ++$i) {\n        $a[] = $i * $i - $i + 1;\n    }\n \
    \   return count(array_filter($a, function($x) {\n        return $x % 3 == 0;\n\
    \    }));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is very inefficient. The\
    \ function will be called more than 100 times per second for a bigger value of\
    \ `n`.\n<|/ c |>\n<| a |>\nIf your array is sorted and without repetitions (as\
    \ in the example you provided in your question), you can solve it by scanning\
    \ linearly until you find your first three numbers, which is easily done by binary\
    \ search:\n<code>\n<?php\n", "    $sum = 0;\n    for($i = 1; $i <= $n; $i++) {\n\
    \        $sum = $sum + $i;\n    }\n    for($i = 1; $i <= $n; $i++) {\n       \
    \ $sum = $sum + $i;\n    }\n    for($i = 1; $i <= $n; $i++) {\n        $sum =\
    \ $sum + $i;\n    }\n    $sum = $sum + $i;\n    return $sum;\n}\n", "    if($n\
    \ <= 0) {\n        throw new InvalidArgumentException();\n    }\n    $result =\
    \ count($a);\n    for($i = 1; $i <= $n; $i++) {\n        for($j = 1; $j <= $n;\
    \ $j++) {\n            for($k = 1; $k <= $n; $k++) {\n                if($i +\
    \ $j + $k == $n && $a[$i] + $a[$j] + $a[$k] == $n) {\n                    $result++;\n\
    \                }\n            }\n        }\n    }\n    return $result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm |>\nI think you can use a\
    \ simple approach with O(n^2) complexity - sort all numbers first, then iterate\
    \ over all array elements and check if sum of all elements are equal to n or not\
    \ - if equal, then it is the only triple.\nThe complexity of this approach is\
    \ O(n^2).\n<|/ a dscore=1 |>\n<| a |>\nYou can use Hash tables. Since each number\
    \ will have a unique value, you can create a hash table of the number and its\
    \ count and then for each number you just need to check if this hash table has\
    \ your number as a key. If it does not, then it is not a triple.\n<|/ a tags=php,algorithm\
    \ dscore=0 |>\n<| a dscore=0 |>\nHere is an algorithm, which is O(n^2)\n<code>\n\
    int count=0;\nfor(int i=0;i<n;i++)\n{\n   for(int j=0;j<n;j++)\n   {\n       for(int\
    \ k=0;k<n;k++)\n       {\n           if(i+j+k==n && a[i]+a[j]+a[k] == n)\n   \
    \        {\n               count++;\n           }\n       }\n   }\n}\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| c |>\nHmm, it's O(n^3) ;)\n<|/ c |>\n<| c |>\n\
    This code doesn't work for array [5,1,7,13]. It gives count 3 instead of 1.\n\
    <|/ c |>\n<| c |>\n`if(i+j+k==n && a[i]+a[j]+a[k] == n)` this condition will never\
    \ be true for [5,1,7,13]. it will give count 3. Am I wrong?\n<|/ c |>\n<| c |>\n\
    No,I got it. Thanks for your help!\n<|/ c |>\n<| a tags=php,algorithm |>\nYou\
    \ can do it easily with a single loop and a hash table:\n<code>\n<?php\n$array\
    \ = [5,", "    if ($n==0) {\n        return 0;\n    }\n    $a = array();\n   \
    \ $a[0] = $a[1] = $a[2] = 1;\n    for ($i=2;$i<=$n;$i++) {\n        $a[i] = $a[$i-1]*$a[$i-1]-$a[$i-1]+$a[$i];\n\
    \    }\n    return count(array_filter($a, function($k) { return ($k*$k-3) %3 ==\
    \ 0; }));\n}\n", "    $array = array();\n    for($i = 0; $i < $n; $i++) {\n  \
    \      $array[] = $i * $i - $i + 1;\n    }\n\n    $res = 0;\n    for($i = 0; $i\
    \ < $n; $i++) {\n        for($j = 0; $j < $n; $j++) {\n            for($k = 0;\
    \ $k < $n; $k++) {\n                if((($array[$i] + $array[$j] + $array[$k])\
    \ % 3) == 0) {\n                    $res++;\n                }\n            }\n\
    \        }\n    }\n    return $res;\n}\n\necho \"\\n\\nTime complexity : O(n ^\
    \ 3)\";", "    $res = 0;\n    $a = array();\n    for($i = 0; $i < $n; ++$i) {\n\
    \        $a[$i] = $i * $i - $i + 1;\n    }\n\n    for($i = 0; $i < $n; ++$i) {\n\
    \        for($j = 0; $j < $n; ++$j) {\n            for($k = 0; $k < $n; ++$k)\
    \ {\n                if($i != $j && $j != $k && $k != $i && $a[$i] + $a[$j] +\
    \ $a[$k] == $i) {\n                    $res++;\n                }\n          \
    \  }\n        }\n    }\n    return $res;\n}", "    $result = 0;\n    for($i =\
    \ 1; $i <= $n; $i++) {\n        for($j = $i; $j < $n; $j++) {\n            for($k\
    \ = $j; $k < $n; $k++) {\n                if($i + $j + $k == $i * $i * $i) {\n\
    \                    $result++;\n                }\n            }\n        }\n\
    \    }\n    return $result;\n}", "    $arr = [];\n    for($i = 0; $i < $n; $i++)\
    \ {\n        $arr[$i] = $i * $i - $i + 1;\n    }\n\n    $count = 0;\n    $n =\
    \ count($arr);\n    for($i = 0; $i < $n; $i++) {\n        for($j = $i + 1; $j\
    \ < $n; $j++) {\n            for($k = $j + 1; $k < $n; $k++) {\n             \
    \   if($i + $j + $k == $arr[$i] * $arr[$j] * $arr[$k]) {\n                   \
    \ $count++;\n                }\n            }\n        }\n    }\n\n    return\
    \ $count;\n}\n\n$ans = get_max_triples(5);\nvar_dump($ans);", "    $a = [];\n\
    \    for($i=1;$i<=$n;$i++){\n        for($j=$i;$j<=$n;$j++){\n            for($k=0;$k<$j;$k++){\n\
    \                if($i+$j+$k==$n){\n                    $a[]=$i.$j.$k;\n     \
    \           }\n            }\n        }\n    }\n    return count($a);\n}", " \
    \   $a = array_fill(1, $n, 1);\n    $sum = 0;\n    for($i = 1; $i <= $n; $i++)\n\
    \        $sum += ($a[$i-1] * ($a[$i-1] - $a[$i]) + $a[$i]*($a[$i] + $a[$i-1]))/3;\n\
    \    \n    return $sum;\n}\n", "    // Your code here\n    $array = array();\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $array[] = $i;\n    }\n    $arrays\
    \ = array();\n    $cnt = 0;\n    $max = 0;\n    $cnt = get_max_triples_cnt($n,\
    \ $array, $cnt, $max, $arrays);\n    return $cnt;\n}", "    if ($n <= 0) return\
    \ 0;\n    if ($n == 3) return 1;\n    $a = array();\n    for ($i = 1; $i <= $n;\
    \ ++$i) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    $s\
    \ = $n = $t = $i = 0;\n    while ($n < $n) {\n        if ($a[$i] * $a[$i] + $a[$j]\
    \ * $a[$j] + $a[$k] * $a[$k] == $i * $i + $j * $j + $k * $k) {\n            ++$count;\n\
    \            $s = $i;\n            $t = $j;\n            $n = $t;\n          \
    \  $i++;\n            continue;\n        }\n        $t = $n;\n        $j = $t;\n\
    \        $n = $t;\n        $i++;\n    }\n    return $count;\n}", "    $arr = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        for ($j = $i; $j <= $n; $j++) {\n\
    \            for ($k = $j; $k <= $n; $k++) {\n                if ($i + $j + $k\
    \ == $i * $i * $i * 3) {\n                    $arr[] = [$i, $j, $k];\n       \
    \         }\n            }\n        }\n    }\n    return count($arr);\n}\n\necho\
    \ get_max_triples(9);\n\n/*\n * Program to find number of unique triples\n *\n\
    \ */", "    $a = new Array();\n    for ($i = 1; $i <= $n; $i++) {\n        $a[$i]\
    \ = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <=\
    \ $n; $j++) {\n            if ($j > $i) {\n                for ($k = 1; $k <=\
    \ $n; $k++) {\n                    if ($j + $k > $i) {\n                     \
    \   if ($a[$i] + $a[$j] + $a[$k] == 3) {\n                            $a[$i] =\
    \ $a[$j];\n                            $a[$j] = $a[$k];\n                    \
    \        $a[$k] = 0;\n                        }\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return count($a);\n}\n", " \
    \   $a = array_fill(0, $n, 0);\n    for($i = 1; $i < $n; $i++) {\n        $j =\
    \ $i + 1;\n        $k = $i + 2;\n        while($j < $n) {\n            $a[$i]\
    \ += $a[ $j] * $a[ $k];\n            $j += 2;\n            $k += 2;\n        }\n\
    \    }\n    $triple = 0;\n    for($i = 0; $i < $n; $i++) {\n        if($a[$i]\
    \ % 3 == 0) {\n            $triple += 1;\n        }\n    }\n    return $triple;\n\
    }", "    $tri = 0;\n    for ($i=1; $i <= $n; ++$i) {\n        for ($j=$i; $j <\
    \ $n; ++$j) {\n            for ($k=$j; $k <= $n; ++$k) {\n                $tri++;\n\
    \                if ($i != $j && $i != $k && $j != $k) {\n                   \
    \ $tri += ($i*$i - $i*$i) + ($j*$j - $j*$j) + ($k*$k - $k*$k);\n             \
    \   }\n            }\n        }\n    }\n    return $tri;\n}\n</code>\nThe time\
    \ complexity of this code is the O(n\xB2) in the worst case (when all elements\
    \ equal each other).\n<|/ a dscore=2 tags=php,algorithm |>\n<| c |>\nThank you\
    \ for your answer but there is a problem in your solution: if you enter `get_max_triples(4)`,\
    \ you will get the wrong answer (`2`). `4` is not a triple of `a` so the correct\
    \ answer is `1`. By the way, I up-voted your answer because it's good but I found\
    \ another solution more effective :)\n<|/ c |>\n<| c |>\nYou're right, I didn't\
    \ even notice the issue with your original solution. Thank you for pointing it\
    \ out! My solution only counts the number of triples when the corresponding element\
    \ of a[0]...a[n] is non-zero. Not sure how that's relevant to my answer though.\n\
    <|/ c |>\n<| c |>\nThe original solution has a different time complexity, O(n\xB2\
    ). I will edit my answer to make my solution correct too.\n<|/ c |>\n<| c |>\n\
    Yes, your solution has a different time complexity (thank you!), it makes a lot\
    \ of sense. However, it looks like your solution is still better, because it doesn't\
    \ need to compare all of the elements, which is what mine was doing before (it\
    \ compares only the elements before each one). And of course, your solution is\
    \ very concise, so I guess it's better, even though it uses more lines of code.\n\
    <|/ c |>\n<| c |>\nI just realized that I probably should compare all triples\
    \ when I find a non-zero element (as I did before). So I edited my answer, but\
    \ I don't think it's possible to make it more concise\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nHere is a solution in Java:\n<code>\nclass TripleSum\n{\n    public int\
    \ findMaxTriples(int n)\n    {\n        int tri = 0;", "    $tri = array();\n\
    \    $a = 0;\n    $temp = 0;\n    for($i = 1; $i < $n; $i++){\n        $a++;\n\
    \        for($j=$i; $j<$n; $j++){\n            $temp = $i*$i- $i*$i+$i*$j;\n \
    \           $temp2 = $temp + $i*$j;\n            if($temp2 < $temp){\n       \
    \         $temp = $temp2;\n            }\n        }\n        $tri[] = [$i,$a,$temp];\n\
    \    }\n    $ret = 0;\n    foreach($tri as $k=>$v){\n        $ret += ($v[0] +\
    \ $v[1] + $v[2])%3;\n    }\n    return $ret;\n}\n", "    $a = array_fill(0, $n,\
    \ 1);\n    for($i = 1; $i < $n; $i++) {\n        for($j = $i; $j < $n; $j++) {\n\
    \            for($k = $j; $k < $n; $k++) {\n                if($i + $j + $k ==\
    \ $n) {\n                    $a[i] = $a[j] + $a[k];\n                    break;\n\
    \                }\n            }\n        }\n    }\n    $i = 0;\n    for($j =\
    \ 1; $j < $n; $j++) {\n        if($a[j] == $j * a[j] - j + 1) {\n            $i++;\n\
    \        }\n    }\n    return $i;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| a |>\nThis is a JavaScript solution\n<code>", "    $a = range(1, $n);\n\
    \    $count = array_sum(array_map(function ($i) { return pow($i, 3); }, $a););\n\
    \    return $count;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n\
    Just one more solution:\n<code>", "    $arr = array_fill(1, $n, 0);\n    for ($i\
    \ = 1; $i < $n; $i++) {\n        for ($j = $i; $j < $n; $j++) {\n            $k\
    \ = 0;\n            for ($x = $i; $x <= $j; $x++) {\n                $arr[$x]\
    \ = $arr[$x] + 1;\n                if ($arr[$x] % 3 === 0) {\n               \
    \     $k++;\n                }\n            }\n            if ($k < 3) {\n   \
    \             echo \"$i,$j,$k\\n\";\n            }\n        }\n    }\n}", "  \
    \  $result = 0;\n    $array = range(1, $n);\n    foreach($array as $key => $value)\
    \ {\n        $j = $key - 1;\n        for ($i = $key + 1; $i < $n; $i++) {\n  \
    \          $k = $i + 1;\n            if ($value == ($array[$i] + $array[$j] +\
    \ $array[$k])) {\n                $result++;\n            }\n        }\n    }\n\
    \    return $result;\n}\n", "    $a = array_fill(0, $n, 1);\n    \n    for($i\
    \ = 0; $i < $n; $i++) {\n        $a[i + $i + 1] += 2;\n    }\n    \n    \n   \
    \ for($i = 0; $i < $n; $i++) {\n        for($j = 0; $j < $n; $j++) {\n       \
    \     for($k = 0; $k < $n; $k++) {\n                if ($i == $j && $j == $k)\
    \ {\n                    $a[i + $j + $k] += 3;\n                }\n          \
    \  }\n        }\n    }\n    \n    \n    for($i = 0; $i < $n; $i++) {\n       \
    \ for($j = 0; $j < $n; $j++) {\n            for($k = 0; $k < $n; $k++) {\n   \
    \             if ($i == $j && $j + 1 == $k) {\n                    $a[i + $j +\
    \ $k] += 3;\n                }\n            }\n        }\n    }\n    \n    \n\
    \    for($i = 0; $i < $n; $i++) {\n        for($j = 0; $j < $n; $j++) {\n    \
    \        for($k = 0; $k < $n; $k++) {\n                if ($j + 1 == $k && $i\
    \ + 1 == $k) {\n                    $a[i + $j + $k] += 3;\n                }\n\
    \            }\n        }\n    }\n    \n    \n    for($i = 0; $i < $n; $i++) {\n\
    \        for($j = 0; $j < $n; $j++) {\n            for($k = 0; $k < $n; $k++)\
    \ {\n                if ($k + 1 == $i && $j + 1 == $k) {\n                   \
    \ $a[i + $j + $k] += 3;\n                }\n            }\n        }\n    }\n\
    \    \n    \n    for($i = 0; $i < $n; $i++) {\n        for($j = 0; $j < $n; $j++)\
    \ {\n            for($k = 0; $k < $n; $k++) {\n                if ($k + 1 == $i\
    \ && $j + 1 == $k + 1) {\n                    $a[i + $j + $k] += 3;\n        \
    \        }\n            }\n        }\n    }\n    \n    \n    for($i = 0; $i <\
    \ $n; $i++) {\n        for($j = 0; $j < $n; $j++) {\n            for($k = 0; $k\
    \ < $n; $k++) {\n                if ($k + 1 == $i && $j + 1 == $k + 2) {\n   \
    \                 $a[i + $j + $k] += 3;\n                }\n            }\n  \
    \      }\n    }\n    ", "    $a = array();\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $a[$i] = $i*$i - $i + 1;\n    }\n    $n = count($a);\n    $count = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          for ($k = 0; $k < $n; $k++) {\n                if ($i==$j && $j==$k\
    \ && $i!=j && $i!=k) {\n                    if ($a[$i]+$a[$j]+$a[$k] == 3*($i+$j+$k))\
    \ {\n                        $count++;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer but this is not the correct answer I was\
    \ looking for. The code you wrote is correct but I was looking for a more efficient\
    \ one. Thank you again for your answer.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ so it has O(n^3) complexity, is this what you want?\n<|/ c |>\n<| c |>\nYes,\
    \ that worked. Thank you so much.\n<|/ c |>\n<| c |>\nYou're welcome, please accept\
    \ my answer if it helped you ;)\n<|/ c |>\n<| a |>\nI have written my own code\
    \ for this problem. it works perfect for me. Here it is.\n<code>", "    $a = array(1);\n\
    \    for($i=1; $i<$n; $i++) {\n        for($j=$i; $j<$n; $j++) {\n           \
    \ for($k=$j; $k<$n; $k++) {\n                if($i==$j && $j==$k) {\n        \
    \            $a[] = $i*$i-$i;\n                } elseif($i>$j && $j>$k) {\n  \
    \                  $a[] = $i*$i-$j*$j+$i*$j;\n                }\n            }\n\
    \        }\n    }\n    sort($a);\n    return count($a);\n}", "    $a = [];\n \
    \   $ans = 0;\n    for($i = 0; $i < $n; $i++) {\n        $a[$i] = $i*$i-$i+1;\n\
    \    }\n    for($i = 0; $i < $n; $i++) {\n        for($j = 0; $j < $n; $j++) {\n\
    \            for($k = 0; $k < $n; $k++) {\n                $triple = $a[$i] +\
    \ $a[$j] + $a[$k];\n                if($triple % 3 === 0 && $triple !== 0 && $a[$i]\
    \ + $a[$j] + $a[$k] === $triple) {\n                    $ans++;\n            \
    \    }\n            }\n        }\n    }\n    return $ans;\n}", "    // Your code\
    \ here\n    $max = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k <= $n; $k++) {\n   \
    \             if ($i  < $j && $j  < $k && $k  < $i ) {\n                    $triple\
    \ = $i * $i - $i + 1;\n                    if ($triple == 3 * $i) {\n        \
    \                $max++;\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return $max;\n}\n\necho get_max_triples(7);\n</code>\n\
    <|/ a tags=algorithm,php |>\n<| c |>\nYou are wrong. `(1, 3, 7)` has 3 triples.\
    \ The OP wants to know if they have more than 3 triples, not if there exist such\
    \ triples.\n<|/ c |>\n<| c |>\nThanks, i had misunderstood this and thought it\
    \ had to be an exact multiple of 3, and didn't realize it was a subset of `(1,\
    \ 3, 7)` .\n<|/ c |>\n<| c |>\nNo, it's still wrong. There exist `(1, 3, 7, 13)`\
    \ which is a valid triple, so you shouldn't count it. Only triples of size 3 or\
    \ less are allowed.\n<|/ c |>\n<| c |>\nI think it is also wrong, because you\
    \ can have `(1, 3, 7)` as a valid triple if you add 1 to the value of `a[k]` instead\
    \ of increasing its value.\n<|/ c |>\n<| c |>\nYeah I totally misunderstood what\
    \ you said, i thought it was just a *maximum* of 3 but i was wrong, my bad.\n\
    <|/ c |>\n<| a tags=algorithm,php |>\nI guess, this is what you are looking for:\n\
    <code>", "    $a = [];\n    for ($i = 0; $i < $n; $i++) {\n        $a[$i] = $i\
    \ * $i - ($i + 1);\n    }\n    $max_triples = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i+1; $j < $n; $j++) {\n            if ($i + $j == $a[$i]\
    \ + $a[$j] + $a[$j]) {\n                $max_triples++;\n            }\n     \
    \   }\n    }\n    return $max_triples;\n}", "  $a = array_fill(0, $n, 1);\n  for\
    \ ($i = 1; $i < $n; ++$i) {\n    $j = $i + $i;\n    $k = $j + $i;\n    $a[$i]\
    \ += $a[$j] + $a[$k];\n  }\n  $sum = 0;\n  foreach ($a as $value) {\n    if ($value\
    \ % 3 === 0) {\n      $sum += $value;\n    }\n  }\n  return $sum;\n}\n", "   \
    \ $arr = array();\n    for ($i = 0; $i < $n; $i++) {\n        $arr[] = $i;\n \
    \   }\n    sort($arr);\n    $ans = 0;\n    $j = 0;\n    $k = 0;\n    while ($j\
    \ < $n) {\n        $a = $arr[$j];\n        $ans += ($arr[$j] - $arr[$k]);\n  \
    \      $ans += ($arr[$k] - $arr[$j]);\n        $j++;\n        $k++;\n        if\
    \ ($k == $j) {\n            $k = 0;\n        }\n    }\n    return $ans;\n}", " \
    \   $a = [];\n    $a[0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        for\
    \ ($j = 1; $j <= $n; $j++) {\n            for ($k = 1; $k <= $n; $k++) {\n   \
    \             if ($i == $j && $j == $k) {\n                    $a[$i] += $a[$j]\
    \ + $a[$k];\n                }\n            }\n        }\n    }\n    return count($a);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\nThis is a possible solution:\n\
    <code>\n$a = [1, 3, 7, 13, 21];\n$result = [];\narray_walk($a, function($v, $k)\
    \ use (&$result) {\n    $result[] = [$v, $k];\n});\n", "    $result = array();\n\
    \    $a = array(1, 3, 7, 13, 21);\n\n    for($i = 0; $i < $n; $i++){\n       \
    \ for($j = $i + 1; $j < $n; $j++){\n            for($k = $j + 1; $k < $n; $k++){\n\
    \                if($a[i] + $a[j] + $a[k] % 3 == 0){\n                    $result[]\
    \ = array($i, $j, $k);\n                }\n            }\n        }\n    }\n \
    \   return count($result) == 0 ? 0 : $result[0];\n}", "    $array = array();\n\
    \    for($i = 0; $i<$n; $i++){\n        $array[] = array($i, $i, $i);\n    }\n\
    \    \n    $counter = 0;\n    \n    for($i = 0; $i < $n; $i++){\n        for($j\
    \ = 0; $j < $n; $j++){\n            for($k = 0; $k < $n; $k++){\n            \
    \    $result = $array[$i][$j] + $array[$i][$k] + $array[$j][$k];\n           \
    \     \n                if($result % 3 == 0){\n                    $counter++;\n\
    \                }\n            }\n        }\n    }\n    return $counter;\n}\n\
    </code>\n<|/ a tags=php,arrays,algorithm |>\n<| a tags=php,arrays,algorithm dscore=0\
    \ |>\nThe other answers have given you the answer already, but for educational\
    \ purposes I wanted to explain why your attempt doesn't work as expected.\nIf\
    \ you break down your function and look at the for loops, you'll notice that you're\
    \ only ever going over each element once - after each element you're just looping\
    \ over it again, i.e. only doing one iteration of the outer loop. Since you aren't\
    \ resetting $counter at any point, you will only ever return the count of how\
    \ many triples you could find within 1 iteration.\nThis doesn't solve the problem\
    \ as asked, but it might be worth knowing why.\n<|/ a |>\n<| a tags=php,arrays,algorithm\
    \ |>\nHere's another approach, which only loops through the array once, with a\
    \ single nested loop.\n<code>", "    $res = 0;\n    for($i = 0; $i < $n; $i++)\
    \ {\n        $res = max($res, count(find_triples($i)));\n    }\n    return $res;\n\
    }\n", "    $a = [];\n    for ($i = 0; $i <= $n; $i++) {\n        $a[] = pow($i,\
    \ 2) - 1 + $i;\n    }\n\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        for ($j = $i + 1; $j <= $n; $j++) {\n            for ($k = $j + 1; $k\
    \ <= $n; $k++) {\n                if ($a[$i] + $a[$j] + $a[$k] == 3) {\n     \
    \               $count++;\n                    break;\n                }\n   \
    \         }\n        }\n    }\n\n    return $count;\n}\n\n$n = 16;\necho get_max_triples($n);\
    \ // 24\n</code>\n<|/ a tags=algorithm,php dscore=2 |>\n<| c |>\n`pow($i, 2) -\
    \ 1 + $i` just doesn't make sense for me ;)\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nIf n is big enough the brute force approach will work. But if n is very\
    \ big ( > 100,000 ) you can use recursion. \n<code>", "    $arr = [];\n    for($i=1;\
    \ $i<$n; $i++){\n        for($j=$i; $j<$n; $j++){\n            $arr[$i][$j] =\
    \ (2*$i)-($i*$j+$i*$j);\n        }\n    }\n    for($i = 0; $i < count($arr); $i++){\n\
    \        for($j = $i+1; $j < count($arr); $j++){\n            $sum = $arr[$i][$j];\n\
    \            if($arr[$i][$j+1] != 0 && $arr[$i][$j+2] != 0){\n               \
    \ $sum = $sum + $arr[$i][$j+1] + $arr[$i][$j+2];\n            }\n            if($sum\
    \ % 3 == 0){\n                return $i;\n            }\n        }\n    }\n  \
    \  return -1;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,algorithm |>\n<| c |>\n\
    This doesn't work with the test case $n = 5;\n<|/ c |>\n<| a dscore=0 tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php", "    $a = [];\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    \n    $count = 0;\n    for ($i = 0; $i\
    \ < count($a); $i++) {\n        for ($j = 0; $j < count($a); $j++) {\n       \
    \     for ($k = 0; $k < count($a); $k++) {\n                if ($i + 1 < $j &&\
    \ $j + 1 < $k) {\n                    if ($a[$i] + $a[$j] + $a[$k] % 3 == 0) {\n\
    \                        $count++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return $count;\n}\n$n = 16;\necho get_max_triples($n); ",
  "    $result = array();\n    $a = array();\n\n    // 1. make $a array with all elements\
    \ equal to 0.\n    for($i = 0; $i < $n; $i++)\n        $a[$i] = $i;\n\n    //\
    \ 2. find triples\n    for($i = 1; $i < $n; $i++) {\n        for($j = $i; $j <\
    \ $n; $j++) {\n            for($k = $j; $k < $n; $k++) {\n                $a_s\
    \ = $a[$i] + $a[$j] + $a[$k];\n                if($a_s % 3 == 0) {\n         \
    \           if($i == $j)\n                        $result[] = $i + $j + $k;\n\
    \                    elseif($i == $k)\n                        $result[] = $i\
    \ + $j + $k;\n                    elseif($j == $k)\n                        $result[]\
    \ = $i + $j + $k;\n                }\n            }\n        }\n    }\n\n    return\
    \ count($result);\n}\n\n/*\n * Problem: Find all possible triples\n *\n * Pseudocode\n\
    \ *      a[i] = i*i-i+1\n *      triples<-all(a[i] == i*i-i+1 && a[i]+a[j]+a[k]==0)\n\
    \ *\n * Input:\n *      n -> positive integer\n * Output:\n *      triples->list\
    \ of all possible triples\n *\n */", "    $a = (int)pow($n,3); // pow($x,3) returns\
    \ value of $x^3\n    return ($a % 3) ? 0 : 1;\n}", "    $a = range(1, $n);\n \
    \   $res = 0;\n    foreach ($a as $i => $j) {\n        for ($k = $i + 1; $k <\
    \ $n; $k++) {\n            $res += ($j > $k ? $j - $k : 0) + ($i > $k ? $i - $k\
    \ : 0);\n        }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=php |>\n<|\
    \ a |>\nIf you mean the sum of the products, you can use array_sum with array_map\
    \ to calculate the products:\n<code>", "    $trip_array = [];\n    for($i = 1;\
    \ $i <= $n; $i++){\n        $trip_array[$i] = $i * $i - $i + 1;\n    }\n\n   \
    \ return count(array_filter($trip_array, function($a){ return $a%3; }));\n}",
  "    $a = array();\n    for ($i = 0; $i < $n; $i++) {\n        $a[] = $i * $i -\
    \ $i + 1;\n    }\n\n    $result = 1;\n    for ($i = 0; $i < count($a); $i++) {\n\
    \        for ($j = $i+1; $j < count($a); $j++) {\n            $k = count($a) -\
    \ 1;\n            while ($i >= 0 && $j >= 0 && $k >= 0) {\n                if\
    \ ($a[$i] + $a[$j] + $a[$k] == 3) {\n                    $result++;\n        \
    \        }\n                $k--;\n                $j--;\n                $i--;\n\
    \            }\n        }\n    }\n\n    return $result;\n}\n$result = get_max_triples(5);\n\
    echo $result;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=arrays,algorithm,php\
    \ |>\nI have another solution which makes use of a few more loops but is more\
    \ efficient and probably easier to understand.\nBasically you loop over the given\
    \ array once to calculate the max value of the array, the max value is set to\
    \ 3 initially but will go down as the third loop iterates and is also set to 3\
    \ initially as well.\nAfter the first loop you have your max value so you then\
    \ loop over the rest of the array and subtract that from the max value.\nSo if\
    \ you have a 5 element array the max value will be 3. Now you loop over the second\
    \ loop to iterate over the array and subtract 3 from your max value.\nExample:\n\
    <code>\n$array = array(1, 3, 7, 13, 21);\n\n$max_value = 3;\n$max_count =  0;\n\
    $max_triples = 0;\nforeach ($array as $value) {\n    $max_value = maxValue($max_value,\
    \ $value);\n    $max_count += $value - $max_value;\n    $max_triples += ($value\
    \ - $max_value) * 3;\n}\n\necho $max_count . ' triples.';\n</code>\n<|/ a |>\n\
    <| a |>\nTry this. I made a recursive solution. \n<code>\n$a = array(1, 3, 7,\
    \ 13, 21);\n$max_triples = 0;\n", "    $a = array(1);\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $triples = 0;\n    for\
    \ ($i = 1; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if ($a[$i] +\
    \ $a[$j] + $a[$k] % 3 == 0) {\n                    $triples++;\n             \
    \   }\n            }\n        }\n    }\n    return $triples;\n}\n", "    $res\
    \ = array();\n    for($i = 1; $i <= $n; $i++) {\n        $res[] = array($i, $i\
    \ * $i - $i + 1, $i * $i);\n    }\n    $count = 0;\n    for($i = 0; $i < count($res);\
    \ $i++) {\n        $res = array_filter($res, function($e) use($i) {\n        \
    \    return $e[0] >= $i && $e[0] <= $i + 1;\n        });\n        if(count($res)\
    \ >= 3) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n\
    $n = 5;\n$res = array();\nfor($i = 0; $i <= $n; $i++) {\n    $res[] = array($i,\
    \ $i * $i - $i + 1, $i * $i);\n}\n$count = 0;\n$res = array_filter($res, function($e)\
    \ use($i) {\n    return $e[0] >= $i && $e[0] <= $i + 1;\n});\nif(count($res) >=\
    \ 3) {\n    $count++;\n}\necho \"$count\\n\";\n</code>\n<|/ a |>\n<| c |>\nIt\
    \ works, thank you. I need to learn more about callbacks, this looks really weird\
    \ to me.\n<|/ c |>\n<| c |>\nI added a explanation.\n<|/ c |>\n<| c |>\nNice!\
    \  I'm going to leave it here for a bit, but I suggest using `$i <= $n` in the\
    \ `for` loop, so you don't include `$n` (because then `$res[$i]` is `null` in\
    \ the final result).  Also, I'd suggest using `array_filter` with an anonymous\
    \ function instead of `array_map`.\n<|/ c |>\n<| c |>\nI changed it. Thank you\
    \ for suggesting. Anonymous function seems cooler but it's more complicated for\
    \ a beginner :) And `array_filter` seems very useful.\n<|/ c |>\n<| a tags=arrays,php,algorithm\
    \ dscore=0 |>\nI wondered if there's another way to do this, so I wrote the code\
    \ to do it.  I haven't tried it yet with negative numbers, but it does work with\
    \ positive ones.\nI used the fact that a triple (a, b, c) is a maximal triple\
    \ if a + b + c > 0, and that if ax + by + cz > 0, then a + b + c > ax + by + cz.\n\
    The code iterates over each possible value of x, and checks whether any values\
    \ of y, z that satisfy those criteria have a triple (x, y, z) that matches the\
    \ given number.\nIf no such triples are found, then the number is considered to\
    \ be a ", "    for($i = 1; $i <= $n; ++$i) {\n        $num = 0;\n        $j =\
    \ 1;\n        while($i <= $n) {\n            if($i == $j) {\n                $num++;\n\
    \                $i++;\n                $j++;\n                continue;\n   \
    \         }\n            $num += ($i - $j + 2) * ($i - $j + 2);\n            $j++;\n\
    \        }\n        if($num % 3 == 0) {\n            return $num;\n        }\n\
    \    }\n    return 0;\n}\n</code>\n<|/ a tags=arrays,php,algorithm |>\n<| c |>\n\
    Thank you for comment, I have added an explanation.\n<|/ c |>\n<| c |>\nI have\
    \ written a code. Have you tried it? Do you think it is the best way?\n<|/ c |>\n\
    <| c |>\nIt works, I just checked it with my code and it works. I think it is\
    \ the best way because it works in `O(n)`, so I think it is `O(n)` as well.\n\
    <|/ c |>\n<| c |>\nYes it works, and it's very efficient, but I think this way\
    \ is more readable and more efficient.\n<|/ c |>\n<| c |>\nYour code doesn't seem\
    \ O(n), unless you count the number of valid triplets.\n<|/ c |>\n<| a tags=arrays,php,algorithm\
    \ dscore=1 |>\nThe complexity of this code should be O(n^3), since it loops through\
    \ the array once to find all triplets then twice to find all triplets containing\
    \ three numbers. Since this is an interview question I am guessing they would\
    \ want you to use some sort of dynamic programming to solve the problem quickly.\n\
    <code>\n<?php\n\n$n = 5;\n$arr = array(1, 3, 7, 13, 21);\n$count = count($arr);\n\
    $triplets = array();\n$count = 0;\n\nfor($i = 0; $i < $n; $i++) {\n    for($j\
    \ = 0; $j < $n; $j++) {\n        if($i == $j) {\n            continue;\n     \
    \   }\n        for($k = 0; $k < $n; $k++) {\n            if($i == $j || $j ==\
    \ $k) {\n                continue;\n            }\n            if($arr[$i] + $arr[$j]\
    \ + $arr[$k] == $arr[$i] + $arr[$j] + $arr[$k] + 1) {\n                $triplets[]\
    \ = array($arr[$i], $arr[$j], $arr[$k]);\n                ++$count;\n        \
    \    }\n        }\n    }\n}\n\necho count($triplets);\n</code>\n<|/ a ", "   \
    \ sort($n);\n    $triple = 0;\n    for($i = 1; $i <= $n; $i++) {\n        for($j\
    \ = $i+1; $j <= $n; $j++) {\n            for($k = $j+1; $k <= $n; $k++) {\n  \
    \              if($i == $j && $i == $k && $i == $n - 1) {\n                  \
    \  $triple += 3;\n                } elseif($i == $j && $j == $k && $j == $n -\
    \ 1) {\n                    $triple += 3;\n                } elseif($i == $j &&\
    \ $j == $k && $k == $n - 1) {\n                    $triple += 3;\n           \
    \     } elseif($i == $j && $k == $n && $k == $n - 1) {\n                    $triple\
    \ += 3;\n                } elseif($i == $j && $k == $n && $j == $n - 1) {\n  \
    \                  $triple += 3;\n                } elseif($i == $k && $k == $n\
    \ && $k == $n - 1) {\n                    $triple += 3;\n                } elseif($i\
    \ == $k && $j == $n && $j == $n - 1) {\n                    $triple += 3;\n  \
    \              } elseif($i == $k && $j == $n && $i == $n - 1) {\n            \
    \        $triple += 3;\n                } elseif($j == $k && $j == $n && $j ==\
    \ $n - 1) {\n                    $triple += 3;\n                } elseif($j ==\
    \ $k && $i == $n && $i == $n - 1) {\n                    $triple += 3;\n     \
    \           } elseif($j == $k && $i == $n && $j == $n - 1) {\n               \
    \     $triple += 3;\n                } elseif($k == $n && $k == $n && $k == $n\
    \ - 1) {\n                    $triple += 3;\n                } elseif($k == $n\
    \ && $j == $n && $j == $n - 1) {\n                    $triple += 3;\n        \
    \        } elseif($k == $n && $j == $n && $i == $n - 1) {\n                  \
    \  $triple += 3;\n                } elseif($k == $n && $i == $n && $i == $n -\
    \ 1) {\n                    $triple += 3;\n                }\n            }\n\
    \        }\n    }\n    return $triple;\n}\n", "    $nums = array();\n    $sums\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $nums[$i] = $i * $i -$i\
    \ + 1;\n        $sums[$i] = array_sum($nums);\n    }\n    $result = 0;\n    foreach\
    \ ($nums as $key => $value) {\n        if ($sums[$key] == 0) {\n            return\
    \ 0;\n        }\n        $result += ($value - $sums[$key]) / 3;\n    }\n    return\
    \ $result;\n}\n", "    $a = [];\n    $result = 0;\n    for($i = 0; $i < $n; $i++)\
    \ {\n        $a[$i] = $i * $i - $i + 1;\n    }\n\n    for($i = 0; $i < $n; $i++)\
    \ {\n        for($j = $i; $j < $n; $j++) {\n            for($k = $j; $k < $n;\
    \ $k++) {\n                if($i == $j && $j == $k && $a[$i] + $a[$j] + $a[$k]\
    \ == 0) {\n                    $result = 1;\n                    break;\n    \
    \            }\n            }\n        }\n    }\n    return $result;\n}\n\n$n\
    \ = 5; \n$result = get_max_triples($n);\n\necho $result;", "    if ($n == 0) return\
    \ 0;\n    if ($n == 1) return 1;\n    if ($n == 2) return 1;\n    \n    $res =\
    \ 1;\n    for($i = 1; $i <= $n; $i++) {\n        for($j = $i; $j < $n; $j++) {\n\
    \            for($k = $j; $k < $n; $k++) {\n                if($i + $j + $k ==\
    \ $i * $i + $j * $j + $k * $k) {\n                    $res++;\n              \
    \      break;\n                }\n            }\n        }\n    }\n    return\
    \ $res;\n}\n\necho get_max_triples(5);", "    $a = array();\n    for($i = 1; $i\
    \ < $n; $i++)\n        $a[$i] = $i * $i -$i + 1;\n    $count_triples = 0;\n  \
    \  for($i = 1; $i < $n; $i++) {\n        for($j = $i+1; $j < $n; $j++) {\n   \
    \         for($k = $j+1; $k < $n; $k++) {\n                if($a[$i] + $a[$j]\
    \ + $a[$k] % 3 == 0) {\n                    $count_triples++;\n              \
    \      break;\n                }\n            }\n        }\n    }\n    return\
    \ $count_triples;\n}\n\n$input = file_get_contents(\"php://input\");\n$n = trim($input);\n\
    $n = intval($n);\n$result = get_max_triples($n);\necho $result;", "    $a = [];\n\
    \    for ($i = 1; $i < $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $c = count($a);\n    $ret = 0;\n    foreach ($a as $key => $value) {\n  \
    \      if ($key % 3 == 0) {\n            $ret++;\n        }\n    }\n    return\
    \ $ret;\n}\n", "    // code here\n    $a = [];\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $a[$i] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    foreach ($a\
    \ as $i => $j) {\n        for ($k = $i + 1; $k <= $n; $k++) {\n            if\
    \ ($a[$i] + $a[$k] + $a[$j] == 3) {\n                $count++;\n            }\n\
    \        }\n    }\n    return $count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your time but this code is not showing desired output\n<|/ c |>\n<|\
    \ a |>\n<code>\n<?php\n$input=file_get_contents(\"php://input\");\n$n=strlen($input);\n\
    $n=(int)$n;\n$a=array();\n$i=0;\nwhile($i<$n){\n  $a[]=(int)substr($input,$i,1);\n\
    \  $i++;\n}\nsort($a);\n$count=0;\n$i=0;\nwhile($i<$n){\n    $j=0;\n    while($j<$n){\n\
    \        if($a[$i]==$a[$j]){\n            break;\n        }\n        $j++;\n \
    \   }\n    if($j==$n){\n        $count++;\n    }\n    $i++;\n}\necho $count;\n\
    </code>\n<|/ a tags=arrays,php dscore=1 |>\n<| a dscore=1 tags=arrays,php |>\n\
    <code>\n<?php\n$n = file_get_contents('php://stdin');\n$n = intval($n);\n$a =\
    \ array_map(function ($x) { return (int)$x;}, str_split($n));\n$l = array_count_values($a);\n\
    $a = [ksort($a)]; # https://stackoverflow.com/a/4430304/7402293\n$sum = 0;\nforeach\
    \ ($a as $i => $v) {\n  if($v > 0) {\n    $sum += $sum * ($v + 1);\n  }\n}\necho\
    \ $sum;\n</code>\n<|/ a |>\n<| c |>\nYour output must be 1.\n<|/ c |>\n<| c |>\n\
    i forgot that - answer updated\n<|/ c |>\n<| c |>\nHe need `1` but your code giving\
    \ `3`.\n<|/ c |>\n<| c |>\nThe code in the question gives `1`, not `3` though.\
    \ And I tested it by adding `11` to the `11` number in the question.\n<|/ c |>\n",
  "    $a = [];\n    for ($i = 1; $i <= $n; ++$i) {\n        $a[$i] = $i * $i - $i\
    \ + 1;\n    }\n    return count($a) - count(array_filter($a));\n}\n</code>\nThis\
    \ solution runs in O(n) time.\n<|/ a dscore=1 |>\n<| a tags=php,algorithm |>\n\
    <code>\n$n = 4; $a = 0; $b = 2; $c = 5; $d = 6; $e = 7;\n$f = 0; $g = 1; $h =\
    \ 3; $i = 4; $j = 5;\n$k = 0; $l = 1; $m = 2; $n = 4; $o = 5;\n$p = 2; $q = 5;\
    \ $r = 6; $s = 7; $t = 8;\n$u = 1; $v = 2; $w = 4; $x = 5; $y = 6;\n$z = 1; $a\
    \ = 1; $b = 2; $c = 4; $d = 5; $e = 6;\n$f = 2; $g = 3; $h = 4; $i = 5; $j = 6;\n\
    $k = 2; $l = 2; $m = 2; $n = 4; $o = 5;\n$p = 2; $q = 5; $r = 6; $s = 7; $t =\
    \ 8;\n$u = 1; $v = 2; $w = 4; $x = 5; $y = 6;\n$z = 1; $a = 2; $b = 3; $c = 5;\
    \ $d = 6; $e = 7;\n$f = 3; $g = 4; $h = 5; $i = 6; $j = 7;\n$k = 3; $l = 3; $m\
    \ = 3; $n = 4; $o = 5;\n$p = 2; $q = 5; $r = 6; $s = 7; $t = 8;\n$u = 2; $v =\
    \ 2; $w = 4; $x = 5; $y = 6;\n$z = 2; $a = 2; $b = 4; $c = 6; $d = 7; $e = 8;\n\
    $f = 4; $g = 5; $h = 6; $i = 7; $j = 8;\n$k = 4; $l = 4; $m = 4; $n = 4; $o =\
    \ 5;\n$p = 2; $q = 5; $r = 6; $s = 7; $t = 8;\n$u = 3; $v = 2; $w = 4; $x = 5;\
    \ $y = 6;\n$z = 3; $a = 3; $b = 4; $c = 6; $d = 7; $e = 8;\n$f = 5; $g = 6; $h\
    \ = 7; $i = 8; $j = 8;\n$k = 5; $l = ", "  $triples = 0;\n  for($i = 1; $i <=\
    \ $n; $i++) {\n    for($j = 0; $j <= $i; $j++) {\n      for($k = 0; $k <= $j;\
    \ $k++) {\n        $triples += ($i * $i) + ($j * $j) + ($k * $k);\n      }\n \
    \   }\n  }\n  return $triples;\n}\n$max = get_max_triples(4);\necho \"max = $max\\\
    n\";\necho \"max*max = $max * $max\\n\";\necho \"max*max*max = $max * $max * $max\\\
    n\";", "  $result = array();\n  for ($i = 1; $i <= $n; $i++) {\n    $result[$i]\
    \ = $i * $i - $i + 1;\n  }\n  $result[$n] = $n - 1;\n  array_multisort($result,\
    \ SORT_DESC, SORT_NUMERIC);\n  return $result[0];\n}", "    $a = range(1, $n);\n\
    \    $temp = [1 => $a];\n    $res = 0;\n    $tmp = [];\n    $max_val = 0;\n  \
    \  foreach($a as $v) {\n        foreach($a as $v2 => $v2) {\n            foreach($a\
    \ as $v3 => $v3) {\n                $val = $v + $v2 + $v3;\n                if($val\
    \ % 3 == 0 && $val > $max_val) {\n                    $max_val = $val;\n     \
    \               $tmp = [$v => $v2, $v2 => $v3, $v3 => $v];\n                }\n\
    \            }\n        }\n    }\n\n    foreach($a as $v => $v2) {\n        $res\
    \ += $tmp[$v][$v2] + $tmp[$v2][$v];\n    }\n    return $res;\n}\n</code>\n<|/\
    \ a tags=php,dynamic-programming |>\n<| c |>\nThis doesn't work for me. Here are\
    \ my test cases: `test_case(1, 1)` returns 1 and `test_case(3, 3)` returns 4 instead\
    \ of 2. I have tested this on `PHP 7.3` with `PHP 7.1` gives `1` and with `PHP\
    \ 5.6` gives `1`\n<|/ c |>\n<| a dscore=3 |>\nHere is the Python solution:\n<code>\n\
    def get_max_triple_sums(n):\n    arr = [i for i in range(n)]\n    sums = []\n\
    \    res = 0\n    for v1, v2 in zip(arr, arr[1:]):\n        for v3, v4 in zip(arr,\
    \ arr[2:]):\n            if v1 + v2 + v3 > sum(sums):\n                continue\n\
    \            sums.append((v1, v2, v3))\n            res += (v1 + v2 + v3) * min(v2,\
    \ v3)\n    return res\n</code>\n<|/ a tags=php,dynamic-programming |>\n<| a |>\n\
    This solution is in PHP only\n<code>", "    if ($n <= 0) return 0;\n\n    $sum\
    \ = a(1) + a(3) + a(5);\n    $triples = 1;\n    for ($i = 2 ; $i < $n ; $i++)\
    \ {\n        $sum = $sum + $i(1) * $i($i);\n        if ($sum % 3 == 0) $triples++;\n\
    \    }\n\n    return $triples;\n}\n", "    $a = array();\n    for($i = 0; $i <\
    \ $n; $i++){\n        $a[] = $i * $i - $i + 1;\n    }\n    $result = 0;\n    foreach($a\
    \ as $k => $v){\n        for($j = 0; $j < $n; $j++){\n            for($l = 0;\
    \ $l < $n; $l++){\n                if($j<$l && $v + $a[$j] + $a[$l] == 3){\n \
    \                   $result++;\n                }\n            }\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nCan you explain how\
    \ you came up with the logic? I would love to know if there is a way to solve\
    \ this without loops, I understand that there may be a way but I wasn't able to\
    \ come up with a way without loops.\n<|/ c |>\n<| c |>\nSure! I did it by hand\
    \ by trying to reconstruct the problem, and since I solved it in that way, I immediately\
    \ realized that it was possible without loops. I'll update my answer.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\n<?php", "  $nums = range(1, $n);\n  $a = array_fill(1,\
    \ $n, 1);\n  foreach ($nums as $key => $num) {\n    for ($i = $key + 1; $i < $n;\
    \ $i++) {\n      if ($nums[$key] + $nums[$i] + $nums[$key] > $num) {\n       \
    \ break;\n      }\n      else if ($nums[$key] + $nums[$i] + $nums[$key] == $num)\
    \ {\n        $a[$key]++;\n        $a[$i]++;\n        $a[$key]++;\n      }\n  \
    \  }\n  }\n  return $a[$n-1];\n}\n", "    // Write your code here\n    $a = [1\
    \ => 1 , 3 => 3 , 7 => 7 , 13 => 13 , 21 => 21];\n    $count = 0;\n    foreach\
    \ ($a as $key => $value) {\n        for($i = $key;$i < $n;$i++){\n           \
    \ for($j=$key;$j < $n;$j++){\n                $k = $n - $i;\n                if($j\
    \ == $key && $value == $a[$i] + $a[$j]){\n                    $count++;\n    \
    \            }\n            }\n        }\n    }\n    return $count;\n}\n", " \
    \   $arr = array();\n    for($i=1; $i<=$n; $i++)\n        $arr[] = $i;\n    $result\
    \ = 0;\n    for($i=0; $i<count($arr); $i++){\n        for($j=$i; $j<count($arr);\
    \ $j++){\n            for($k=$j; $k<count($arr); $k++){\n                $temp\
    \ = $arr[$i] + $arr[$j] + $arr[$k];\n                if(($temp) % 3 == 0){\n \
    \                   $result++;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return $result;\n}", "  $a = [];\n  for($i\
    \ = 0; $i < $n; $i++){\n    $a[] = $i * $i -$i + 1;\n  }\n  \n  $result = 0;\n\
    \  for($i = 0; $i < count($a); $i++){\n    $j = $i+1;\n    $k = $i+2;\n    while(count($a)\
    \ > 0){\n      if($j < count($a) && $k < count($a) && $a[i] >= $a[j] && $a[i]\
    \ >= $a[k]){\n        $result++;\n        $a[$i] = $a[$j]; $j++;\n        $a[$i]\
    \ = $a[$k]; $k++;\n      }else{\n        break;\n      }\n    }\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a tags=sorting,php,arrays,algorithm dscore=1 |>\n\
    <| c |>\nWow, this is fantastic. Thank you so much. It really helped me understand\
    \ it a bit better. Now I can understand how the nested loops work.\n<|/ c |>\n\
    <| a tags=sorting,php,arrays,algorithm |>\nHere is the pseudo code, hope you can\
    \ find some help from this.\n<code>\nlet A[] = [1, 2, 3, 4, 5, 6, 7];\nlet mA[]\
    \ =  [0, 5, 10, 15];\n\nvoid count_triples(int n){\n    \n    int i;\n    int\
    \ j;\n    int k;\n    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < i;\
    \ j++){\n            for(k = 0; k < j; k++){\n                mA[k] += A[k]*A[k];\n\
    \            }\n        }\n    }\n    \n    for(i = 0; i < mA.length; i++){\n\
    \        for(j = 0; j < i; j++){\n            for(k = 0; k < j; k++){\n      \
    \          printf(\"%d %d %d\\n\", mA[k], i, j);\n            }\n        }\n \
    \   }\n}\n\nint main(){\n    count_triples(7);\n    return 0;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=sorting,php,arrays,algorithm |>\nThe first thing we\
    \ should do is to sort all the numbers so we get a sorted array.\n<code>\n function\
    \ sort($arr){\n    $max = max($arr);\n    for($i = 0; $i < count($arr); $i++){\n\
    \        $arr[$i] = $arr[$i]/$max;\n    }\n    return array_filter($arr, function($num){\n\
    \        return $num != 0;\n    });\n }\n\n $arr = [1,2,5,8,9,11,4,6];\n $sorted",
  "    $arr = array();\n    for ($i = 0; $i < $n; $i++) {\n        $arr[$i] = $i *\
    \ $i - $i + 1;\n    }\n    $result = count(array_filter(function($x) use ($arr)\
    \ {\n        return ($x[2] < $arr[2]);\n    }));\n    return ($result > 0) ? $result\
    \ : 0;\n}\n</code>\n<|/ a |>\n<| c |>\nThat is the question asked in my course.\
    \ So I used a brute force method but in practice it fails most of the test cases.\n\
    <|/ c |>\n<| c |>\nI've updated my answer according to your problem statement.\
    \ Hope this helps. Thanks.\n<|/ c |>\n<| c |>\nCan you explain how this works?\
    \ I don't think you get it. I don't understand how you got the value of $arr[]\
    \ in the first place.\n<|/ c |>\n<| c |>\nThanks for the help. I got it now. :)\n\
    <|/ c |>\n<| c |>\nThe function get_max_triples($n) counts the number of triples\
    \ (a[i], a[j], a[k]). In the original problem, the count of triples has to be\
    \ greater than zero. But what if there is no such triple?\n<|/ c |>\n<| a tags=php\
    \ |>\nA more elegant solution could be to check how many elements in the array\
    \ are less than a certain value\n<code>\n$arr = [\n    1, 2, 3, 4, 5, 6\n];\n\
    $a = 4;\n\n$count = count($arr) - 1;\n$found = false;\nforeach($arr as $i){\n\
    \    if ($i < $a) {\n        $found = true;\n        break;\n    }\n}\n\nif ($found)\
    \ {\n    $count++;\n}\n\necho $count;\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ is a good solution but I can't use it. :(\n<|/ c |>\n<| c |>\nThen you probably\
    \ need to explain your problem more clearly. At least give an example of an input\
    \ and expected output.\n<|/ c |>\n<| c |>\nI don't think the expected output would\
    \ be different from the expected input. Anyway, I've added an example in the question.\
    \ :)\n<|/ c |>\n<| a dscore=0 |>\nYou could also use array_filter with a callback\
    \ function which tests for any value below a limit. Something like this should\
    \ work (not tested):\n<code>\n<?php\n$array = range(1, 20);\n$limit = 5;\n$num_triples\
    \ = count(array_filter($array, function($value) use ($limit) {\n   return $value\
    \ < $limit;\n}));\necho $num_triples;", "    $a = array();\n    for($i = 0; $i\
    \ < $n; $i++)\n        $a[$i] = $i * $i - $i + 1;\n    sort($a);\n    $trip =\
    \ 0;\n    for($i = 0; $i < $n; $i++) {\n        for($j = 0; $j < $n; $j++) {\n\
    \            for($k = 0; $k < $n; $k++) {\n                if($i == $j && $j ==\
    \ $k && $a[$i] + $a[$j] + $a[$k] == 0)\n                    $trip++;\n       \
    \     }\n        }\n    }\n    return $trip;\n}\n</code>\n<|/ a dscore=0 tags=php,algorithm\
    \ |>\n<| c |>\nHi there, I wanted to know more about your solution, I'm very new\
    \ to PHP. Could you explain what you did in the for loop ? I understand that $i\
    \ and $j loop the array, and that $k loops the array again and counts the number\
    \ of \"trip\" in the loop, but how did you use that to count the total number\
    \ of \"trip\" ?\n<|/ c |>\n<| a tags=php,algorithm dscore=0 |>\nHere's a solution\
    \ that uses array_map(), array_sum(), array_filter(), and array_intersect():\n\
    <code>", "    // write your code here\n    $arr = array();\n    for($i=0;$i<$n;$i++)\
    \ {\n        $arr[] = $i;\n    }\n    $count = count($arr);\n    for($i=0;$i<$count;$i++)\
    \ {\n        for($j=0;$j<$count;$j++) {\n            for($k=0;$k<$count;$k++)\
    \ {\n                if(($i + $j + $k) != $arr[$i] && ($arr[$i] + $arr[$j] + $arr[$k])%3\
    \ === 0) {\n                    $count++;\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    return $count;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI am not getting expected result. please see my updated answer.\n\
    <|/ c |>\n<| c |>\n, check my answer now, I've updated it\n<|/ c |>\n<| c |>\n\
    No need to go through the array twice. Just go through the array once with all\
    \ the triples and count the ones that are multiples of 3. At the end you get the\
    \ count of all the possible triples.\n<|/ c |>\n<| a |>\nIn O(N) time, you can\
    \ use binary search to find the first multiple of 3 that exists in the array.\
    \ At each step find the first multiple of 3 that doesn't exist in the array between\
    \ the found and current elements. \nThe time complexity is O(N). \n<code>\nint\
    \ solution(int n) {\n    vector<int> array = {1};\n    for(int i = 1; i < n; ++i)\
    \ {\n        while(array.size() && array[0] % 3 == 0) {\n            array.pop();\n\
    \        }\n        array.push_back(i);\n    }\n    for(int i = 1; i < n; ++i)\
    \ {\n        int index = lower_bound(array.begin(), array.end(), i) - array.begin();\n\
    \        int index = lower_bound(array.begin(), array.end(), i+1) - array.begin();\n\
    \        if(index != array.size() - 1) {\n            array[index]++;\n      \
    \  }\n    }\n    return array.size();\n}\n</code>\n<|/ a tags=arrays,algorithm,php\
    \ dscore=0 |>\n<| c |>\nThis is not O(n).\n<|/ c |>\n<| c |>\nI think it's O(N),\
    \ because you're doing exactly the same thing twice, once to find the first multiple\
    \ of 3 that exists, and another time in the `for` loop to find the first multiple\
    \ of 3 that doesn't exist between the found and current elements.\n<|/ c |>\n\
    <| c |>\nYou're right, I misread it. I thought you were going to do the same thing\
    \ twice in each iteration, but you're not. But the code in the question doesn't\
    \ have the same problem.\n<|/", "    $a = array_fill(0, $n, 0);\n    for($i =\
    \ 1; $i <= $n; ++$i) {\n        for($j = 0; $j < $i; ++$j) {\n            for($k\
    \ = 0; $k <= $j; ++$k) {\n                if($a[ $i] + $a[ $j] + $a[ $k] >= 3)\
    \ {\n                    $a[$i] += $a[$j] + $a[$k];\n                    $a[$j]\
    \ += $a[$k];\n                    $a[$k] = $i;\n                    break;\n \
    \               }\n            }\n        }\n    }\n    return count($a);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI like the idea of O(n), but this fails my\
    \ performance requirements and has time complexity of O(n^2).\n<|/ c |>\n<| c\
    \ |>\nCan you please elaborate on the time complexity requirements? Is it \"linear\"\
    \ time complexity? Because then I think it really shouldn't be O(n^2). Anyway,\
    \ the other solutions here are O(n^3) or O(n^2) because they don't do anything\
    \ with every triple. Do you have a time complexity constraint?\n<|/ c |>\n<| c\
    \ |>\nYes, linear time complexity.\n<|/ c |>\n<| a |>\nThis is a solution based\
    \ off of Michael's answer\n<code>", "    $array = array();\n    $max = 0;\n  \
    \  for($i=1; $i<=$n; $i++) {\n        $array[$i] = ($i*$i)-($i+1);\n        if($array[$i]>$max)\
    \ $max = $array[$i];\n    }\n    for($i=1; $i<=$n; $i++) {\n        for($j=$i+1;\
    \ $j<=$n; $j++) {\n            for($k=$j+1; $k<=$n; $k++) {\n                if($array[$i]+$array[$j]+$array[$k]==$max*3)\
    \ return $array[$i]+$array[$j]+$array[$k];\n            }\n        }\n    }\n\
    \    return 0;\n}\n", "    $array = array_fill(1,$n,0);\n    $max_count = 0;\n\
    \    for($i=1;$i<=$n;$i++){\n        $array[$i] = $i*$i-1;\n    }\n    for($i=1;$i<=$n;$i++){\n\
    \        for($j=$i+1;$j<=$n;$j++){\n            for($k=$j+1;$k<=$n;$k++){\n  \
    \              if($array[$i]+$array[$j]+$array[$k]%3 > 0){\n                 \
    \   $array[$k] = $array[$k] + $array[$i] + $array[$j];\n                    $array[$i]\
    \ = $array[$i] - $array[$j];\n                    $array[$j] = $array[$j] - $array[$k];\n\
    \                    $max_count++;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    return $max_count;\n}\nvar_dump(get_max_triples(12));",
  "    if ($n == 1){\n        return 1;\n    }\n    \n    $a = array();\n    $count\
    \ = array();\n    for ($i = 0; $i < $n; ++$i){\n        $a[$i] = $i * $i - $i\
    \ + 1;\n    }\n    \n    $i = $n;\n    while ($i > 0){\n        if ($i%3 > 0){\n\
    \            $count[$i] += 1;\n            \n            $k = $i;\n          \
    \  while ($k >= $n){\n                $k -= $n;\n            }\n            \n\
    \            $j = $k;\n            while ($j > 0){\n                if ($j%3 >\
    \ 0){\n                    $count[$k] += 1;\n                    $count[$j] +=\
    \ 1;\n                    $count[$i] += 1;\n                    $count[$k] +=\
    \ 1;\n                    \n                    $j -= 3;\n                }\n\
    \                $j -= 3;\n            }\n        }\n        \n        --$i;\n\
    \    }\n    \n    return $count;\n}\n$result = get_max_triples(6);\necho count($result);",
  "    $a = [];\n    for($i = 1; $i <= $n; $i++){\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = get_max_triples_helper($a, $n);\n    return $count;\n}\n",
  "    $a = array();\n    for ($i = 0; $i < $n; ++$i) {\n        $a[$i] = $i * $i\
    \ - $i + 1;\n    }\n    $count = array_count_values($a);\n    return $count[$a[$i\
    \ - 1] + $a[$j - 1] + $a[$k - 1]];\n}\n", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n\n    $count = count($a);\n\
    \    $max_triples = $count;\n    $triples = [];\n\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        for ($j = $i; $j < $count; $j++) {\n            $k = $j;\n\
    \            while ($k > 0 && $a[$k] == ($a[$k] + $a[$j] + $a[$i])) {\n      \
    \          $k--;\n            }\n            $triples[] = [$a[$i], $a[$j], $a[$k]];\n\
    \        }\n    }\n\n    return count($triples);\n}\n</code>\n<|/ a tags=php,arrays,algorithm,performance\
    \ dscore=1 |>\n<| c |>\nI don't think this is the fastest way but I think it's\
    \ quite effective and readable...\n<|/ c |>\n<| c |>\nIt seems to me that this\
    \ is O(n^2) algorithm, but with n<30 it's really fast\n<|/ c |>\n<| c |>\nYes,\
    \ O(n^2). With n<30 it's pretty fast\n<|/ c |>\n<| c |>\n: This doesn't work,\
    \ since `a[$j]` must be calculated before `a[$i]` is calculated.\n<|/ c |>\n<|\
    \ c |>\n: Thanks, I didn't notice that\n<|/ c |>\n<| a |>\nHere's my solution\n\
    <code>", "    $a = range(1, $n);\n    $count = 0;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        for ($j = 1; $j <= $n; $j++) {\n            for ($k = 1; $k\
    \ <= $n; $k++) {\n                if ($i == $j && $j == $k) {\n              \
    \      continue;\n                }\n                if ($a[$i] + $a[$j] + $a[$k]\
    \ == 0) {\n                    continue;\n                }\n                if\
    \ ($a[$i] + $a[$j] + $a[$k] % 3 == 0) {\n                    $count++;\n     \
    \           }\n            }\n        }\n    }\n    return $count;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like the efficiency of this answer.\n<|/ c |>\n\
    <| a dscore=1 |>\nYou can solve this problem in O(nlogn) by doing a binary search\
    \ on the sorted list of all numbers starting from 1 to n. \n<code>\nlet sortedArray\
    \ = Array.from({length: n}, (_, i) => i);\nreturn binarySearch(sortedArray,n)\
    \ - 1;\n</code>\nHere, we create a sorted array of numbers from 1 to n and do\
    \ a binary search on that array for n. \nThe complexity of binarySearch is O(logn).\
    \ \nThe complexity of the entire problem is to find the position where we can\
    \ insert the number in the sorted array. Since that is the only time we have to\
    \ do binary search on the array, we simply subtract 1 from that value and then\
    \ return it.\n<|/ a tags=arrays,php,performance,algorithm,sorting |>\n<| c |>\n\
    Binary search is not needed here, you can simply loop through array and count\
    \ number of triples in O(n).\n<|/ c |>\n<| c |>\nAgreed, we can do a loop on the\
    \ array to count number of triplets starting from 1 and so on.\n<|/ c |>\n<| a\
    \ tags=arrays,php,performance,algorithm,sorting |>\nIn case you insist to solve\
    \ it in O(n)\n<code>\n$arr = [1,3,7,13,21];\n$res = 0;\nfor($i=1;$i<=count($arr);$i++)\n\
    {\n  $min = $i;\n  $max = $i;\n  for($j=$i;$j<count($arr);$j++)\n  {\n    if($arr[$j]+$arr[$i]+$arr[$min]>0)\n\
    \    {\n      $min = $j;\n    }\n    $max = $j;\n  }\n  if($arr[$i]+$arr[$max]+$arr[$min]==0)\n\
    \  {", "    $triple = 0;\n    for($i = 0; $i < $n; $i++){\n        for($j = $i+1;\
    \ $j < $n; $j++){\n            for($k = $j+1; $k < $n; $k++){\n              \
    \  if($i!=$j && $j!=$k && $k!=$i){\n                    $triple++;\n         \
    \       }\n            }\n        }\n    }\n    return $triple;\n}\n", "    $result\
    \ = 0;\n    for ($i = 0; $i < $n; ++$i) {\n        for ($j = $i + 1; $j < $n;\
    \ ++$j) {\n            for ($k = $j + 1; $k < $n; ++$k) {\n                $result\
    \ = max($result, a($i, $j, $k));\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[$i]\
    \ = $i * $i - $i + 1;\n    }\n    $sum = 0;\n    foreach ($a as $key => $val)\
    \ {\n        $j = $key + 1;\n        $k = $key + 2;\n        if ($j < $n && $j\
    \ < $k && $j + $k > $n) {\n            $sum++;\n        }\n    }\n    return $sum;\n\
    }", "    // write your code here\n    $array = array();\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            for ($k = 0;\
    \ $k < $n; $k++) {\n                if ($j > $k && $i > $k) {\n              \
    \      $array[$i][$j][$k] = $array[$i][$k][$j];\n                }\n         \
    \   }\n        }\n    }\n    return count(array_filter($array, function($v){\n\
    \        return $v[count($v) - 1] % 3;\n    }));\n}\n</code>\n<|/ a |>\n<| c |>\n\
    That code will not work since $i and $j are never being incremented past 0, and\
    \ you have a bug in that array index.\n<|/ c |>\n<| a dscore=0 |>\nThis can be\
    \ solved by doing a binary search, which is O(log(n)) rather than O(n).\n<code>\n\
    /**\n* Return the number of triples of numbers, whose sum is no less than n,\n\
    * and whose sum is no greater than n.\n* \n* int  $n\n* int\n*/", "    $a=array();\n\
    \    for($i=1;$i<=$n;$i++){\n        $a[$i]=$i*$i-1;\n    }\n    $count = 0;\n\
    \    for($i=1;$i<=$n;$i++){\n        for($j=$i+1;$j<=$n;$j++){\n            for($k=$j+1;$k<=$n;$k++){\n\
    \                if($a[$i]+$a[$j]+$a[$k] % 3 == 0){\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    \n    return $count;\n\
    }\n", "    $array = [1 , 3 , 7 , 13 , 21];\n    $count = count($array);\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = $i; $j < $n; $j++) {\n        \
    \    for ($k = $j; $k < $n; $k++) {\n                if (isMultiple($i, $j, $k))\
    \ {\n                    $count = $count + 1;\n                    $array[$i]\
    \ + $array[$j] + $array[$k];\n                }\n            }\n        }\n  \
    \  }\n    return $count;\n}\n", "    $a = [];\n    for($i = 0; $i < $n; $i++){\n\
    \        $temp = $i*$i-1;\n        array_push($a, $temp);\n    }\n    $sum = 0;\n\
    \    for($i = 0; $i < $n; $i++){\n        $j = $i+1;\n        for($j = 0; $j <\
    \ $n; $j++){\n            $k = $j+1;\n            $sum = $sum + $a[$i]+$a[$j]+$a[$k];\n\
    \        }\n    }\n    return $sum % 3;\n}\n", "    $arr = [];\n    for ($i =\
    \ 0; $i < $n; $i++){\n        for ($j = $i + 1; $j < $n; $j++){\n            for\
    \ ($k = $j + 1; $k < $n; $k++){\n                $arr[] = [$i, $j, $k];\n    \
    \        }\n        }\n    }\n    $count = count($arr);\n    $max_triples = 1;\n\
    \    foreach($arr as $k => $v){\n        if ( $v[0] + $v[1] + $v[2] === ($k *\
    \ $k * $k + $k * $k + $k + $k + $k) ){\n            $max_triples = max($max_triples,\
    \ ($v[0] + $v[1] + $v[2] === ($k * $k * $k + $k * $k + $k + $k + $k)));\n    \
    \    }\n    }\n    return $count;\n}\necho get_max_triples(5);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\nA simple way to solve this is to use nested loops\
    \ to find all triples where the sum of three numbers in each triplet is equal\
    \ to the sum of the numbers in the triple. \n<code>\n$a = array(1, 2, 3, 4, 5);\n\
    $b = array(1, 2, 3, 5, 7);\n$c = array(1, 2, 4, 5, 6);\n\n$d = array();\n\nfor($i=0;$i<count($a);$i++){\n\
    \    for($j=0;$j<count($b);$j++){\n        for($k=0;$k<count($c);$k++){\n    \
    \        if($a[$i] == $b[$j] && $b[$j] == $c[$k]){\n                $d[] = array($a[$i],\
    \ $a[$j], $a[$k]);\n            }\n        }\n    }\n}\n\necho count($d).'<br>';\n\
    print_r($d);\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n$a=[1,2,3,4,5];\n\
    $b=[1,3,5,7,9];\n$c=[2,4,6,8,10];\n$d=[3,4,5,6,7];\n", "    $a = array();\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i*$i-$i+1;\n    }\n    $sum\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i+1; $j < $n; $j++)\
    \ {\n            $k = $j+1;\n            if ($i+$j+$k == $n*$n) {\n          \
    \      $sum += $a[$i]+$a[$j]+$a[$k];\n            }\n        }\n    }\n    return\
    \ $sum;\n}", "    $a = [];\n    for($i=1; $i<=$n; $i++) {\n        $a[$i] = $i*$i-1;\n\
    \    }\n    $total = 0;\n    for($i=1; $i<=$n; $i++) {\n        $j = $i+1;\n \
    \       $k = $n-$i;\n        while($j<$k) {\n            $total += $a[$i]+$a[$j]+$a[$k];\n\
    \            $j++;\n            $k--;\n        }\n    }\n    return $total;\n\
    }\n\n$n = 50;\necho \"The maximum possible sum of triples is: \". get_max_triples($n);",
  "\t$arr = array();\n\tfor($i = 1; $i <= $n; $i++){\n\t\t$temp = $i*$i-1;\n\t\t$temp2\
    \ = $i + 1;\n\t\t$temp3 = $i + 2;\n\t\t$arr[$i] = $temp + $temp2 + $temp3;\n\t\
    }\n\treturn count(array_filter($arr));\n}\n", "    $arr = [];\n    for($i=1;$i<$n;$i++){\n\
    \        $arr[$i] = $i*$i-$i+1;\n    }\n    $num = 0;\n    foreach($arr as $k=>$v){\n\
    \        for($i=0;$i<$n;$i++){\n            for($j=$i+1;$j<$n;$j++){\n       \
    \         if($k + $v > $i*$i + $j*$j + $i*$j)\n                    $num++;\n \
    \           }\n        }\n    }\n    return $num;\n}\n$arr2 = get_max_triples(25);\n\
    print_r($arr2);", "    $arr = [];\n    $count = array();\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $arr[$i] = $i * $i + ($i + 1);\n    }\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        for ($j = $i + 1; $j <= $n; $j++) {\n        \
    \    for ($k = $j + 1; $k <= $n; $k++) {\n                $count[$i][$j][$k] =\
    \ $arr[$i] + $arr[$j] + $arr[$k];\n                if ($count[$i][$j][$k] % 3\
    \ === 0) {\n                    $count[$i][$j][$k] = 0;\n                }\n \
    \           }\n        }\n    }\n    return $count[$n][$n][$n];\n}\n$result =\
    \ get_max_triples(6);\necho $result;", "    $a = ($n-1)*($n-2);\n    return ($a%3)==0;\n\
    }", "    $a = array();\n    $count = array();\n    $temp = $a; // to temporally\
    \ save array\n    for($i = 0; $i < $n; $i++){\n        array_push($count, $i);\n\
    \    }\n\n    for($i = 0; $i < $n; $i++){\n        $j = $i + 1;\n        $k =\
    \ count($count) - 1;\n        while($j < $k && $temp[$i] + $temp[$j] + $temp[$k]\
    \ > 0){\n            $j++;\n            $k--;\n        }\n        array_push($a,\
    \ $temp[$i]);\n        array_push($a, $temp[$j]);\n        array_push($a, $temp[$k]);\n\
    \    }\n\n    return count($a);\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    What if the input is n=10?\n<|/ c |>\n<| a dscore=0 tags=arrays,php |>\nThis should\
    \ be the simplest solution.\n<code>\n<?php", "    $a = [];\n    for($i = 0; $i\
    \ < $n; ++$i) {\n        $a[$i] = $i*$i-$i+1;\n    }\n    for($i = 1; $i < $n-1;\
    \ ++$i) {\n        for($j = $i+1; $j < $n; ++$j) {\n            for($k = $j+1;\
    \ $k < $n; ++$k) {\n                if($a[$i]+$a[$j]+$a[$k] === 3*($i+$j+$k))\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n    }\n    return 0;\n}\n</code>\n<|/ a tags=php,algorithm,dynamic-programming\
    \ dscore=2 |>\n<| c |>\nWhat if all numbers are positive?\n<|/ c |>\n<| c |>\n\
    I don't think that's a requirement of this problem.\n<|/ c |>\n<| c |>\nI guess\
    \ it is. Your solution returns 1 if the triple is unique, otherwise 0. In fact,\
    \ your solution returns 1 if the triple is unique, otherwise the length of the\
    \ shortest path through the array whose sum is 3. The OP wants just the number\
    \ of unique triples.\n<|/ c |>\n<| a tags=php,algorithm,dynamic-programming |>\n\
    Here's a dynamic programming solution using an associative array, just for fun.\
    \ I'm pretty sure there are better ways to do this without recursion, but I'm\
    \ not sure how.\n<code>\n<?php\n\n$numbers = array(1, 3, 7, 13, 21, 37, 69, 123,\
    \ 321, 493, 807, 1103, 1557, 2049);\n", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    return count(array_filter($a,\
    \ function($item){\n        return ($item % 3 == 0);\n    }));\n}\n</code>\n<|/\
    \ a tags=php,arrays dscore=1 |>\n<| c |>\nI appreciate your answer. But, could\
    \ you please check my answer. Maybe I am doing it wrong.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php", "    $result = array();\n    for ($i = 0; $i < $n; ++$i)\
    \ {\n        for ($j = $i + 1; $j <= $n; ++$j) {\n            for ($k = $j + 1;\
    \ $k <= $n; ++$k) {\n                if ($i + $j + $k == 2 * $i) {\n         \
    \           $result[$i][] = $j;\n                    $result[$j][] = $i;\n   \
    \                 $result[$k][] = $k;\n                }\n            }\n    \
    \    }\n    }\n    return count($result[1]) + count($result[2]) + count($result[3]);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease [avoid link only answers](http://meta.stackoverflow.com/tags/link-only-answers/info).\
    \ Answers that are \"barely more than a link to an external site\u201D [may be\
    \ deleted](http://stackoverflow.com/help/deleted-answers).\n<|/ c |>\n<| c |>\n\
    Thanks for the feedback, I updated the answer with the explanation.\n<|/ c |>\n\
    <| c |>\nThanks. I edited the answer. I will try to give a better explanation\
    \ next time. Thanks.\n<|/ c |>\n<| c |>\nThanks for the improvements, I edited\
    \ my answer as well.\n<|/ c |>\n<| c |>\nThanks again for the explanations. Your\
    \ solution is definitely better than mine. But there are a couple of things that\
    \ you didn't explain: 1) I didn't ask how to solve it using brute-force; 2) You\
    \ didn't explain how you got from the `result` array to the final answer. 3) The\
    \ final answer doesn't seem to be correct. I'll ask another question for this\
    \ if you're interested.\n<|/ c |>\n<| a |>\nUsing a nested for loop we can solve\
    \ this problem:\n<code>\n<?php", "    $a = [];\n    for($i = 0; $i < $n; $i++)\
    \ {\n        $a[$i] = $i*$i-$i+1;\n    }\n    $c = array_count_values($a);\n \
    \   $d = [];\n    foreach ($c as $key => $value) {\n        $d[$key] = $value*$value*$value;\n\
    \    }\n    $result = 0;\n    foreach ($d as $key => $value) {\n        if ($value\
    \ % 3 == 0) {\n            $result++;\n        }\n    }\n    return $result;\n\
    }\n", "    $array = array();\n    $a = array_fill(0, $n, 0);\n    for ($i = 1;\
    \ $i < $n; $i++) {\n        $a[$i] += $a[$i - 1];\n        $a[$i] += $a[$i - 2]\
    \ + $a[$i - 3];\n    }\n    \n    return count(array_filter($a, function($v){return\
    \ $v % 3 == 0; }));\n}\n\n$n = 5;\necho get_max_triples($n);", "    $a = array_fill(1,\
    \ $n, 1);\n    $sum = 0;\n\n    foreach ($a as $value) {\n        $sum += $value;\n\
    \    }\n\n    $a[] = 1;\n\n    foreach ($a as $value) {\n        for ($i = 1;\
    \ $i <= $n; $i++) {\n            $j = 0;\n            $k = 0;\n            foreach\
    \ ($a as $k => $val) {\n                if (($val + $a[$j] + $a[$k] + $sum) %\
    \ 3 === 0) {\n                    $j++;\n                }\n            }\n  \
    \          $a[] = $j;\n            $sum = $sum - $j;\n        }\n    }\n\n   \
    \ return count($a);\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| a |>\nThis code\
    \ will do it.\n<code>\n$a = [1, 2, 3, 4, 5];\n$b = [6, 0, 2, 1];\n$n = count($a);\n\
    $sum = 0;\n\nfor ($i = 0; $i < $n; $i++) {\n    for ($j = 0; $j < $n; $j++) {\n\
    \        for ($k = 0; $k < $n; $k++) {\n            $sum = $sum + $a[$i] + $b[$j]\
    \ + $c[$k];\n        }\n    }\n}\n\necho $sum;\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=2 |>\n<| a |>\n<code>", "    $a = array();\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i;\n    }\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            for ($k = 0; $k < $n; $k++) {\n\
    \                if ($i < $j && $j < $k && $i <> $k) {\n                    if\
    \ ($a[$i] + $a[$j] + $a[$k] % 3 == 0) {\n                        echo \"$a[$i],\
    \ $a[$j], $a[$k]\";\n                    }\n                }\n            }\n\
    \        }\n    }\n}", "  $triple = 0;\n  $arr = array_fill(0, $n, 0);\n  for\
    \ ($i = 0; $i < $n; ++$i) {\n    $arr[$i] = 0;\n    $arr[$i] = $arr[$i] + 1;\n\
    \  }\n  for ($i = $n - 1; $i >= 0; --$i) {\n    for ($j = $i + 1; $j < $n; ++$j)\
    \ {\n      for ($k = $j + 1; $k < $n; ++$k) {\n        if ($arr[$i] + $arr[$j]\
    \ + $arr[$k] > 3) {\n          $arr[$i] = $arr[$i] + $arr[$j];\n          $arr[$j]\
    \ = $arr[$k];\n          $arr[$k] = 0;\n          break;\n        }\n      }\n\
    \    }\n  }\n  for ($i = 0; $i < $n; ++$i) {\n    $triple += $arr[$i];\n  }\n\
    \  return $triple;\n}\n$arr = [1, 3, 7, 13, 21];\necho get_max_triples($arr);",
  "    // Your code here\n    $array = [];\n    $i = 0;\n    while(array_key_exists($i,\
    \ $array)){\n        $array[$i] = $i*$i-5+1;\n        ++$i;\n    }\n    return\
    \ $array[$n-1];\n}\n\nget_max_triples(5);", "    if ($n<1) return 0;\n\n    $arr\
    \ = array(1);\n    for ($i=1; $i<$n; $i++) {\n        $arr[$i] = $arr[$i-1] *\
    \ $arr[$i-1] - $arr[$i-1] + $arr[$i];\n    }\n\n    return array_count_values($arr);\n\
    }\n\nget_max_triples(5);", "    $result = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = $i+1; $j < $n; $j++) {\n            for ($k = $j+1;\
    \ $k < $n; $k++) {\n                if(isMultipleOfThree($i, $j, $k)) {\n    \
    \                $result[] = array($i, $j, $k);\n                }\n         \
    \   }\n        }\n    }\n    return count($result);\n}\n", "    $result = array();\n\
    \    \n    $a = array_fill(1, $n, 1);\n    \n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $i; $j++) {\n            for ($k = $j+1; $k < $n; $k++)\
    \ {\n                if ($a[$i] + $a[$j] + $a[$k] == 3*$i) {\n               \
    \     $result[$i] = $i;\n                    $result[$j] = $j;\n             \
    \       $result[$k] = $k;\n                }\n            }\n        }\n    }\n\
    \    return count($result);\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\
    What if one triple `(i, j, k)` exists that gives a solution with no triples of\
    \ `(i, j, k-1)` where `j-1 < k < i`?\n<|/ c |>\n<| c |>\n- Yes - I edited my answer.\n\
    <|/ c |>\n<| c |>\nThe complexity is O(n^3). I'm sure there is a way to reduce\
    \ the number of times we are checking triples.\n<|/ c |>\n<| c |>\n- Yes - I edited\
    \ my answer.\n<|/ c |>\n<| a dscore=0 |>\nFor each element of the array, you can\
    \ keep track of the elements you have already encountered. If you have already\
    \ encountered an element with values less than or equal to that element, you are\
    \ done.\n<code>", "    $arr = array();\n    for($i=0;$i<$n;$i++)\n    {\n    \
    \    $arr[$i] = $i*$i; \n    }\n    $triple = 0;\n    for($i=0;$i<$n;$i++)\n \
    \   {\n        for($j=$i+1;$j<$n;$j++)\n        {\n            for($k=$j+1;$k<$n;$k++)\n\
    \            {\n                $triple += ($arr[$i]+$arr[$j]+$arr[$k])%3;\n \
    \           }\n        }\n    }\n    return $triple;\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=php,combinatorics |>\n<code>\n<?php", "  $a = array();\n  for ($i = 1;\
    \ $i < $n; $i++) {\n    for ($j = 1; $j < $n; $j++) {\n      for ($k = 1; $k <$n;\
    \ $k++) {\n        $a[] = $i + $j + $k;\n        if ($a[] == 3) {\n          $ans[]\
    \ = array($i, $j, $k);\n        }\n      }\n    }\n  }\n  return count($ans);\n\
    }\n$n = get_max_triples(5);\necho(\"$n\\n\");", "    $a = [];\n    for($i=1; $i<=$n;\
    \ $i++){\n        for($j=$i; $j<=$n; $j++){\n            for($k=$j; $k<=$n; $k++){\n\
    \                if($i+$j+$k==$i*$j*$k){\n                    $a[]=$i*$i*$i; //a[i]\
    \ = i*i*i\n                }\n            }\n        }\n    }\n    return count($a);\
    \ //count of triples\n}\n$max_triples = get_max_triples($n);\necho $max_triples;",
  "    $arr = array();\n    for($i = 1; $i <= $n; $i++) {\n        for($j = 0; $j\
    \ < $i; $j++) {\n            for($k = 0; $k < $j; $k++) {\n                $arr[]\
    \ = array($i, $j, $k);\n            }\n        }\n    }\n    return count($arr);\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php", "    $a = array();\n    for ($i\
    \ = 0; $i < $n; ++$i) {\n        $a[] = $i * $i + ($i + 1);\n    }\n    $n = count($a);\n\
    \    $res = 0;\n    for ($i = 0; $i < $n - 1; ++$i) {\n        for ($j = $i +\
    \ 1; $j < $n; ++$j) {\n            for ($k = $j + 1; $k < $n; ++$k) {\n      \
    \          if ($i + $j + $k == $n) {\n                    $res++;\n          \
    \          $arr[] = $a[$i] + $a[$j] + $a[$k];\n                }\n           \
    \ }\n        }\n    }\n    return $res;\n}\n", "    $a = [];\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n    return count(array_filter($a,\
    \ function ($x) { return $x < 3; }) ?: 0);\n}\n</code>\n<|/ a |>\n<| a tags=php,math\
    \ dscore=1 |>\nA simple solution:\n<code>", "    $a = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $res = [0, 0, 0];\n\
    \    $len = count($a);\n    for ($i = 0; $i < $len - 1; $i++) {\n        for ($j\
    \ = $i + 1; $j < $len; $j++) {\n            $temp = $a[$i] + $a[$j];\n       \
    \     if ($temp % 3 == 0) {\n                $res[0] = $i;\n                $res[1]\
    \ = $j;\n                $res[2] = $temp;\n                return $res;\n    \
    \        }\n        }\n    }\n    return $res;\n}\n", "    $nums = array();\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $nums[] = $i * $i - $i + 1;\n   \
    \ }\n    arsort($nums);\n    $count = 0;\n    foreach ($nums as $key => $num)\
    \ {\n        $count += ($num % 3 === 0);\n    }\n    return $count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\nTry this one.\n<code>\n<?php\n$n =\
    \ 5;\n$array = [1, 3, 7, 13, 21];\n$triplets = array();\n$count = 0;\nfor($i =\
    \ 0; $i <= $n; $i++){\n    for($j = 0; $j <= $n; $j++){\n        if($j > $i){\n\
    \            for($k = 0; $k <= $n; $k++){\n                if($k > $j){\n    \
    \                if($array[$i] + $array[$j] + $array[$k] == 3){\n            \
    \            $count++;\n                        $triplets[] = array(\"i\" => $i,\
    \ \"j\" => $j, \"k\" => $k);\n                    }\n                }\n     \
    \       }\n        }\n    }\n}\necho \"<pre>\";\nprint_r($triplets);\necho \"\
    </pre>\";\necho \"Count:\".$count;", "    $a = array();\n    $i = 0;\n    while($i\
    \ <= $n){\n        $a[] = $i*$i-$i+1;\n        $i++;\n    }\n    for($i = 0; $i\
    \ < count($a); $i++){\n        for($j = 0; $j < count($a); $j++){\n          \
    \  for($k = 0; $k < count($a); $k++){\n                if(($i+$j+$k) == (3*($a[$i]+$a[$j]+$a[$k]))){\n\
    \                    return $i;\n                }\n            }\n        }\n\
    \    }\n}", "  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    for ($j\
    \ = 0; $j < $n; $j++) {\n      for ($k = 0; $k <= $i; $k++) {\n        $result[$i][$j]\
    \ = $result[$i][$j] + ($i == $j) ? $k : 0;\n      }\n    }\n  }\n\n  $total =\
    \ array_sum($result);\n\n  for ($i = 0; $i < $n; $i++) {\n    $result[$i] = $result[$i]\
    \ / $total;\n  }\n\n  return array_sum($result);\n}", "    $array = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $array[$i] = $i * $i - $i + 1;\n    }\n \
    \   $count_triple = 0;\n    $count_tripe_min = 0;\n    $count_tripe_max = 0;\n\
    \    foreach ($array as $key => $value) {\n        if ($key < $count_tripe_min)\
    \ {\n            $count_tripe_min = $key;\n        } else if ($key > $count_tripe_max)\
    \ {\n            $count_tripe_max = $key;\n        }\n    }\n    $count_tripe_min\
    \ = $count_tripe_min * 3;\n    $count_tripe_max = $count_tripe_max * 3;\n    $count_tripe_min\
    \ = $count_tripe_min + 1;\n    $count_tripe_max = $count_tripe_max + 1;\n    for\
    \ ($i = $count_tripe_min; $i < $count_tripe_max; $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $count_triple += count(array_keys($array, 3 * $i));\n    \
    \    }\n    }\n    return $count_triple;\n}\n", "  $triples = array();\n  for\
    \ ($i = 0; $i < $n; ++$i) {\n    array_push($triples, $i * $i - $i + 1);\n  }\n\
    \  return count($triples);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php,loops,for-loop\
    \ |>\n<code>\n$count = count($arr);\nfor ($i = 0; $i < $count; $i++) {\n    for\
    \ ($j = 0; $j < $count; $j++) {\n        for ($k = 0; $k < $count; $k++) {\n \
    \           if ($i == $j && $j == $k && $arr[$i] + $arr[$j] + $arr[$k] == 3) \n\
    \                $countTriples++;\n        }\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nThis can be done in three simple steps:\n\nCount the number\
    \ of elements in the array.\nCreate an empty array and store in it the elements\
    \ of the original array (count).\nIterate through the original array, checking\
    \ if a[i] + (a[j]) + (a[k]) is equal to 3 or not. If so, add the index (i) + 1\
    \ to the array (since arrays starts from 0).\n\nThe code (demo):\n<code>\n<?php\n\
    \    $arr = [1, 3, 7, 13, 21];\n\n    $count = count($arr);\n    $array = array();\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $array[] = $i;\n    }\n\n    echo\
    \ 'Count of the array: ' . count($arr) . \"\\r\\n\";\n\n    echo 'Array:' . \"\
    \\r\\n\";\n    var_dump($array);\n\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            for ($k = 0; $k <\
    \ count($arr); $k++) {\n                if ($arr[$i] + $arr[$j] + $arr[$k] ==\
    \ 3) {\n                    echo 'The triplet ' . $i . ' ' . $j . ' ' . $k . '\
    \ satisfies the condition' . \"\\r\\n\";\n                    $array[$i+1]++;\n\
    \                    $array[$j+1]++;\n                    $array[$k+1]++;\n  \
    \                  echo 'New array contents: ' . \"\\r\\n\";\n               \
    \     var_dump($array);\n                }\n            }\n        }\n    }\n\n\
    \    echo '\\r\\n';\n    echo 'Triples:' . \"\\r\\n\";\n    var_dump($array);",
  "    $a = array();\n    for($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i -\
    \ $i + 1;\n    }\n    $num = 0;\n    for($i = count($a); $i > 0; $i--) {\n   \
    \     if($a[$i - 1] + a[$i] + a[$i + 1] % 3 == 0) {\n            $num++;\n   \
    \     }\n    }\n    return $num;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHappy\
    \ to help you :-)\n<|/ c |>\n<| a tags=php,arrays,algorithm,sorting |>\nSince\
    \ you tagged this as PHP, you could use array_reduce, array_filter and array_sum\
    \ to get the desired result:\n<code>\n$result = array_reduce($array, function\
    \ ($carry, $current) {\n    return $carry + array_sum(array_filter($array, function\
    \ ($el) use ($current) {\n        return $el < $current;\n    }));\n}, 0);\n</code>\n\
    Demo\nOutput:\n<code>\nArray\n(\n    [10] => 3\n    [11] => 9\n    [12] => 18\n\
    \    [13] => 27\n    [14] => 36\n    [15] => 45\n    [16] => 54\n    [17] => 63\n\
    \    [18] => 72\n    [19] => 81\n    [20] => 90\n    [21] => 99\n    [22] => 107\n\
    \    [23] => 115\n    [24] => 125\n    [25] => 134\n    [26] => 145\n    [27]\
    \ => 154\n    [28] => 162\n    [29] => 171\n)\n</code>\nDemo\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n\n$array = array(10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);\n$min = min($array);\n\
    $max = max($array);\n$diff = $max - $min;\n$arr = array();\n$sum = 0;\n$count\
    \ = 0;\n\nforeach ($array as $val) {\n    if ($diff == 0) {\n        $sum = 0;\n\
    \    }\n\n    if ($val >= $min && $val <= $max) {\n        $sum += $val;\n   \
    \ }\n}\n\nforeach ($array as $val) {\n    if ($val >= $min && $val <= $max) {\n\
    \        if ($sum >= 3 ) {\n            $arr[] = $val;\n            $count++;\n\
    \        }\n    }\n}\n</code>\n<|/ a tags=php,arrays,algorithm,sorting |>\n<|\
    \ a dscore=0 |>\nJust because I dislike ", "    // Your code here\n    $arr =\
    \ array();\n    for($i=0; $i<$n; $i++)\n    {\n        $arr[$i] = $i*$i-1;\n \
    \   }\n    $count = count($arr);\n    $sum = 0;\n    for($i=0; $i<$count; $i++)\n\
    \    {\n        $sum = $sum + $arr[$i];\n    }\n    for($i=0; $i<$count; $i++)\n\
    \    {\n        $j = $count-1;\n        $k = $count-2;\n        $sum = ($sum -\
    \ ($arr[$i] + $arr[$j] + $arr[$k]))%3;\n    }\n    return $sum;\n}\nget_max_triples(5);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
