name: HumanEval_85_add
language: php
prompt: "<?php\n// Given a non-empty list of integers lst. add the even elements that\
  \ are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return add(...$args);\n}\n\nfunction test():\
  \ void {\n    if (candidate(array(4, 88)) !== 88) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(4, 5, 6, 7, 2, 122)) !== 122) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 0, 6, 7)) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 4, 6, 8)) !== 12) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    // TODO\n    return null;\n}\n", "    $evenIndices = array_filter($lst,\
    \ function($i) use($lst) {\n        return ($i % 2 == 0);\n    });\n    sort($evenIndices);\n\
    \    return array_sum($evenIndices);\n}\n", "    return $lst[$lst % 2 ? 0 : 1]\
    \ + add( array_slice($lst, 1, count($lst)) );\n}", "    // code here\n}", "  \
    \  $res = 0;\n    $count = (count($lst) + 1) >> 1;\n    foreach ($lst as $key\
    \ => $val)\n    {\n        $res += $val;\n        if ((($key & 1) == 1) && $count\
    \ > 1) {\n            $res -= $lst[$count - 1];\n        }\n        $count >>=\
    \ 1;\n    }\n    return $res;\n}", "    $res = 0;\n    foreach ($lst as $idx =>\
    \ $val) {\n        if ($idx % 2 == 0)\n            $res += $val;\n    }\n    return\
    \ $res;\n}\n", "    $result = 0;\n    foreach ($lst as $k => $v) {\n        if\
    \ ($k % 2 === 0) {\n            $result += $v;\n        }\n    }\n    return $result;\n\
    }", "    foreach ($lst as $k => $v) {\n        if ($k % 2 == 0) {\n          \
    \  $lst[$k] += $v;\n        }\n    }\n    return $lst;\n}\n", "    $result = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if (isset($lst[$i])) {\n\
    \            if ($i % 2 == 0) {\n                $result += $lst[$i];\n      \
    \      }\n        }\n    }\n    return $result;\n}\n</code>\nIt could have been\
    \ made shorter using the ternary operator ($i % 2 == 0) ? $lst[$i] : $0; but the\
    \ ternary operator is unfamiliar to most people. \nThe code also shows how to\
    \ add all elements in an array, and also how to add all elements in an associative\
    \ array.\nThe $sum in the code above is the sum of all elements in the given list,\
    \ which means it would be the sum of all elements in the array returned by the\
    \ array_sum function. \nThe array_sum function returns an array, and you can add\
    \ all elements in the array by using the + operator. \nIf you needed to add the\
    \ sum of all elements in the associative array returned by the array_sum function\
    \ to the sum of all elements in the given list, you could use the array_merge\
    \ function.\n<|/ a tags=arrays,php |>\n<| a |>\nThis code worked for me\n<code>\n\
    $array_counts = [];\n$array_counts[0] = $array[0];\n$array_counts[1] = $array[1];\n\
    $array_counts[2] = $array[2];\n$array_counts[3] = $array[3];\n$array_counts[4]\
    \ = $array[4];\n$array_counts[5] = $array[5];\n$array_counts[6] = $array[6];\n\
    $array_counts[7] = $array[7];\n$array_counts[8] = $array[8];\n$array_counts[9]\
    \ = $array[9];\n$array_counts[10] = $array[10];\n$array_counts[11] = $array[11];\n\
    $array_counts[12] = $array[12];\n$array_counts[13] = $array[13];\n$array_counts[14]\
    \ = $array[14];\n$array_counts[15] = $array[15];\n$array_counts[16] = $array[16];\n\
    $array_counts[17] = $array[17];\n$array_counts[18] = $array[18];\n$array_counts[19]\
    \ = $array[19];\n$array_counts[20] = $array[20];\n\n$sum = 0;\nfor ($i = 1; $i\
    \ <= 20; $i++) {\n    $sum = $sum + $array_counts[$i];\n}\n\necho $sum;\n</code>\n\
    <|/ a tags=arrays,php dscore=2 |>\n<| a dscore=2 tags=arrays,php |>\n<code>\n\
    $a = [1, 2, 3, 4, 5];\n$a = array_map('sqrt', $a);\n", "    sort($lst);\n    foreach\
    \ ($lst as $i => $e) if ($i % 2) $result[] = $e;\n    return $result;\n}", " \
    \   foreach ($lst as $i => $val) {\n        if ($val % 2) {\n            echo\
    \ $val, \"\\n\";\n        }\n    }\n}\n", "  sort($lst);\n  foreach($lst as $i\
    \ => $e) {\n    if($i%2==1) {\n      $lst_odd_elements[] = $e;\n    }\n  }\n \
    \ $even_elements = array();\n  foreach($lst_odd_elements as $e) {\n    array_push($even_elements,\
    \ $e);\n  }\n  return $even_elements;\n}", "    foreach ($lst as $key => $val)\
    \ {\n        if ($key % 2 == 1)\n            $lst[$key] = $val + $lst[$key + 1];\n\
    \    }\n    return $lst;\n}\n", "    $even = $lst[count($lst) - 1];\n    foreach\
    \ ($lst as $k => $i) {\n        if ($k % 2 == 0) $even += $i;\n    }\n    return\
    \ $even;\n}\n</code>\nI hope this solves your question.\n<|/ a dscore=0 |>\n<|\
    \ a tags=php dscore=0 |>\nAnother alternative is array_walk\n<code>\n<?php\n",
  "\t$result = 0;\n\tfor($i = 0, $n = count($lst); $i < $n; $i++) {\n\t\tif($i % 2\
    \ === 0) {\n\t\t\t$result += $lst[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n", " \
    \ $sum = 0;\n  foreach($lst as $i => $v) {\n    if (($i % 2) == 1) {\n      $sum\
    \ += $v;\n    }\n  }\n  return $sum;\n}\n", "  $even_sum = 0;\n  foreach ($lst\
    \ as $index => $value) {\n    if ($index % 2 == 1) {\n      $even_sum += $value;\n\
    \    }\n  }\n  return $even_sum;\n}\n", "  foreach ($lst as $k => $i) {\n    if\
    \ ($k % 2 == 1)\n      $lst[$k] = $lst[$k] + $i;\n  }\n  return $lst;\n}", " \
    \   $sum = 0;\n    foreach ($lst as $i => $e) {\n        if ($i % 2 != 0) {\n\
    \            $sum += $e;\n        }\n    }\n    return $sum;\n}\n", "    $evens\
    \ = $odds = array();\n    for ($i = 0, $j = count($lst); $i < $j; $i += 2) {\n\
    \        $evens[] = $lst[$i];\n    }\n    for ($i = $j; $i < count($lst); $i +=\
    \ 2) {\n        $odds[] = $lst[$i];\n    }\n    return $evens + $odds;\n}\n\n\
    $arr = [4, 2, 6, 7];\necho \"Given list: \" . join(\", \", $arr) . \"\\n\";\n\n\
    echo \"\\nEvens: \" . join(\", \", add($arr)) . \"\\n\";", "  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 == 0) {\n      $sum += $lst[$i];\n\
    \    }\n  }\n  return $sum;\n}", "    foreach($lst as $v) {\n        if (($v &\
    \ 1) != 0) {\n            $lst += $v;\n        }\n    }\n    return $lst;\n}\n",
  "    $result = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        $result\
    \ = $lst[$i] + $result;\n    }\n    return $result;\n}", "  $even = 0;\n  $odd\
    \ = 1;\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i%2 === 0) {\n    \
    \  $even += $lst[$i];\n    } else {\n      $odd += $lst[$i];\n    }\n  }\n  return\
    \ $even+$odd;\n}", "    $newLst = [];\n    foreach ($lst as $key => $value) {\n\
    \        $newLst[$key] = $value;\n        if ($key % 2 === 0) {\n            $newLst[$key]\
    \ = $newLst[$key] + 1;\n        }\n    }\n    return $newLst;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\nYou can just use array_slice()\
    \ to remove unneeded elements from an array:\n<code>\n$newArray = array_slice($oldArray,\
    \ 0, count($oldArray) - 1, true);\n</code>\nIn above statement second parameter\
    \ - is the offset where unneeded elements will be removed and third parameter\
    \ - is the length (number of elements to remove). We set third parameter to true\
    \ to remove all unneeded elements from array.\n<|/ a dscore=0 |>\n<| a |>\narray_map\
    \ can do it for you.\n<code>\n$nums = array(1,2,3,4,5);\n$numsEven = array_map(\"\
    addEven\",$nums);\nprint_r($numsEven);\n", "    $even = false;\n    foreach($lst\
    \ as $key => $value) {\n        if($key % 2 == 0) {\n            if($even) {\n\
    \                $lst_even[] = $value;\n            }\n            $even = true;\n\
    \        } else {\n            if($even) {\n                $lst_odd[] = $value;\n\
    \            }\n            $even = false;\n        }\n    }\n    \n    $total\
    \ = array_sum($lst_odd);\n    $total += array_sum($lst_even);\n    return $total;\n\
    }\n", "  foreach ($lst as $i => $e) {\n    $sum = 0;\n    $even = true;\n    if\
    \ ($i % 2 == 0) {\n      $even = false;\n    }\n    for ($j = 1; $j < $i; $j++)\
    \ {\n      if ($j < $i && $even && $i % 2 == 0) {\n        $sum += $e;\n     \
    \ }\n      if ($j % 2 == 0 && $even && !($i % 2)) {\n        $sum += $e;\n   \
    \   }\n    }\n    $lst[$i] = $sum;\n  }\n  return $lst;\n}\n$arr1 = [4, 5, 6,\
    \ 7];\n$arr2 = [2, 4, 6];\n$arr3 = [1, 5, 6, 9, 10, 11];\n$arr4 = [1, 3, 5, 7,\
    \ 9, 11, 13, 15];\n\necho '<pre>';\nprint_r(add($arr1));\nprint_r(add($arr2));\n\
    print_r(add($arr3));\nprint_r(add($arr4));\necho '</pre>';", "    $even_indices\
    \ = [];\n    foreach ($lst as $index => $value) {\n        if ($index % 2 == 0)\
    \ {\n            $even_indices[] = $index;\n        }\n    }\n    return array_sum($lst)\
    \ - array_sum($even_indices);\n}", "  if ($lst == null) {\n    return 0;\n  }\n\
    \  $sum = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    if (isset($lst[$i])\
    \ && $lst[$i] % 2 === 0) {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n\
    }\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a dscore=0 tags=arrays,php |>\n\
    Here is a solution using a foreach loop. First I convert your integer array to\
    \ a string with implode() and explode() functions. After that I explode the string\
    \ with preg_split() function to split the array into separate strings. Then I\
    \ loop through the array and check if the string has a even number. Then I add\
    \ it to the total. Below is the code:\n<code>\n<?php\n$arr = [1, 2, 3, 4, 5];\n\
    \n$odd_nums = implode(\",\", $arr);\n$odd_nums = explode(\",\", $odd_nums);\n\n\
    $even_nums = \"\";\n\nforeach($odd_nums as $odd_num){\n    $even_nums .= $odd_num;\n\
    }\n$even_nums = explode(\",\", $even_nums);\n$sum = 0;\nforeach($even_nums as\
    \ $even_num){\n    $sum += $even_num;\n}\n\necho $sum; // 9\n</code>\nHere is\
    \ an example with your array:\n<code>\n<?php\n$arr = [1, 2, 3, 4, 5];\n\n$odd_nums\
    \ = implode(\",\", $arr);\n$odd_nums = explode(\",\", $odd_nums);\n\n$even_nums\
    \ = \"\";\n\nforeach($odd_nums as $odd_num){\n    $even_nums .= $odd_num;\n}\n\
    $even_nums = explode(\",\", $even_nums);\n$sum = 0;\nforeach($even_nums as $even_num){\n\
    \    $sum += $even_num;\n}\n\necho $sum; // 9\n</code>\n<|/ a |>\n<| a |>\nI would\
    \ first convert the array to a string with implode, then explode the string with\
    \ explode. Then loop through the exploded array, if even number add that to the\
    \ final sum like this:\n<code>\n<?php\n\n    $arr = [1, 2, 3, 4, 5];\n\n    $total\
    \ = array_sum(explode(',', implode(',', $arr)));\n\n    if ($total % 2 == 0){\n\
    \        echo $total;\n    }", "  // Your code here\n  return null;\n}\n", "\t\
    $odd = array_filter($lst, function($value) { return !($value % 2); });\n\tif (count($odd)\
    \ === count($lst))\n\t\treturn $lst;\n\telse\n\t\treturn array_merge($odd, array_filter($lst,\
    \ function($value) { return !($value % 2); }));\n}\n", "    $sum = 0;\n    $size\
    \ = count($lst);\n    for ($i=0; $i<$size; $i++) {\n        $sum = $lst[$i] +\
    \ $sum;\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ is really helpful, but I figured it out. Thanks though!\n<|/ c |>\n<| c |>\n\
    Please post your answer so others can see the solution, and learn something for\
    \ themselves.\n<|/ c |>\n<| c |>\n`l` is actually a list - I guess you meant `lst`\
    \ ?\n<|/ c |>\n<| c |>\nYeah, it's been a long day.\n<|/ c |>\n<| a tags=arrays,sum,php\
    \ |>\nA slightly less esoteric way to do it is:\n<code>", "    $evenIndexes =\
    \ array_filter($lst, function ($value) {\n        return $value % 2 == 0;\n  \
    \  });\n    foreach ($evenIndexes as $value) {\n        $lst[] = $value;\n   \
    \ }\n    return $lst;\n}\n</code>\n<|/ a dscore=0 tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\nThis should do it:\n<code>", "    // Write your code here.\n    return $lst;\n\
    }", "    $evens = 0;\n    foreach ($lst as $val) {\n        if ($val % 2 == 0)\
    \ {\n            $evens += $val;\n        }\n    }\n    return $evens;\n}", " \
    \ $sum = 0;\n  foreach ($lst as $index => $value) {\n    if ($index % 2 !== 0)\
    \ {\n      $sum += $value;\n    }\n  }\n  return $sum;\n}", "    $result = 0;\n\
    \    foreach($lst as $index => $value) {\n        if ($index % 2 == 1)\n     \
    \       $result += $value;\n    }\n    return $result;\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    foreach ($lst as $i => $number) {\n        if ($i % 2 == 0)\
    \ {\n            $even++;\n        }\n        else {\n            $odd++;\n  \
    \      }\n    }\n    return $even + ($odd + $even);\n}\n", "  return array_filter($lst,\
    \ 'is_odd');\n}\n", "    $evens = $odds = $lst;\n    for ($i=0; $i < count($lst);\
    \ $i++) {\n        if (isset($odds[$i]) && $odds[$i] % 2 == 0) {\n           \
    \ $evens[$i] = $odds[$i] + $evens[$i];\n            unset($odds[$i]);\n      \
    \  }\n    }\n    return $evens;\n}\n", "    // ...\n}\n", "   $result=0;\n   for($i=0;$i<count($lst);$i++)\
    \ {\n      $result+=$lst[$i];\n      if ($i%2==1) {\n         $result+=$lst[$i];\n\
    \      }\n   }\n   return $result;\n}\n", "    $result = 0;\n    $odd = 0;\n \
    \   foreach ($lst as $n) {\n        if ($n & 1) {\n            $result += $n;\n\
    \        } else {\n            $odd += $n;\n        }\n    }\n    return $result\
    \ + $odd;\n}\n", "    $evenIdxs = array_filter(range(0, count($lst) - 1), function($idx)\
    \ { return $idx % 2 == 0; }); \n    $sum = 0;\n    foreach ($evenIdxs as $idx)\
    \ {\n        $sum += $lst[$idx];\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,sum,arrays\
    \ dscore=0 |>\n<| c |>\nthank you very much, very helpful. :) this is what i was\
    \ looking for.\n<|/ c |>\n<| a tags=php,sum,arrays |>\nThis is my solution using\
    \ array_sum with array_map in PHP 7.4+\n<code>\n$numbers = [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26];\n\
    \n$result = [];\n", "  $even_count = 0;\n  foreach($lst as $num) {\n    if ($num\
    \ %2 == 0) {\n      $even_count++;\n    }\n  }\n  return $even_count;\n}\n", " \
    \   $arr = [];\n    foreach ($lst as $val) {\n        $arr[] = $val;\n    }\n\
    \    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if (($i % 2)\
    \ == 1) {\n            $arr[$i] += $arr[$i + 1];\n            unset($arr[$i +\
    \ 1]);\n        }\n    }\n    return $arr;\n}\necho json_encode(add($arr));",
  "    foreach ($lst as $k => $v)\n        if ($k % 2 != 0)\n            $lst[$k]\
    \ += $v;\n    return $lst;\n}\n", "    $sum = 0;\n    $len = count($lst);\n\n\
    \    if ($len == 0) return 0;\n    if ($len == 1) return $lst[0];\n\n    for ($i\
    \ = 0; $i < $len; $i += 2) {\n        $sum += $lst[$i];\n    }\n\n    return $sum;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis answer doesn't seem to answer the\
    \ question. The OP wanted \"the sum of the odd elements\" not \"the sum of the\
    \ elements that are odd\".\n<|/ c |>\n<| a |>\nThe way I see it, there are two\
    \ ways of doing this:\n1) Using a map or hash table to hold the results. This\
    \ would be O(n), so very good for small numbers of elements, but not that good\
    \ for large numbers. The big O notation would just say that this method is O(n\xB2\
    ).\n2) Using a nested for loop. This would be O(n\xB2) but would allow you to\
    \ compute the sum without a map/hash table. This is actually a good solution to\
    \ the problem, and I think the complexity is O(n).\n<|/ a tags=language-agnostic,algorithm,php\
    \ dscore=2 |>\n<| c |>\nHow about using a nested for loop?\n<|/ c |>\n<| a |>\n\
    As mentioned by Aaron, this is a pretty straight forward application of reduce.\
    \ \n<code>", "  $result = 0;\n  $even = $lst;\n  $odd = array_diff($lst, [$even[0]]);\n\
    \n  foreach ($even as $key => $value) {\n    if ($key % 2 == 0) {\n      $result\
    \ += $value;\n    }\n  }\n\n  foreach ($odd as $key => $value) {\n    if ($key\
    \ % 2 != 0) {\n      $result += $value;\n    }\n  }\n\n  return $result;\n}\n",
  "    $even = [];\n    $odd = [];\n    $result = [];\n\n    foreach($lst as $index=>$number)\
    \ {\n        if($index % 2 == 0) {\n            $even[] = $number;\n        }\
    \ else {\n            $odd[] = $number;\n        }\n    }\n\n    foreach($even\
    \ as $index=>$number) {\n        if(isset($odd[$index])) {\n            $result[]\
    \ = $number + $odd[$index];\n        }\n    }\n\n    return $result;\n}\n\n$result\
    \ = add([4, 2, 6, 7]);", "    // your code here\n    \n}\n", "    $sum = 0;\n\
    \    $evenIndices = [];\n\n    for ($i = 0; $i < count($lst); $i++) {\n      \
    \  if ($i % 2 == 0) {\n            $sum += $lst[$i];\n            $evenIndices[]\
    \ = $i;\n        }\n    }\n\n    $evenIndices = array_filter($evenIndices); //\
    \ remove indices that don't have even elements.\n    $evenIndices = array_values($evenIndices);\
    \ // reset the indices.\n\n    return $sum + array_sum(array_intersect_key($lst,\
    \ array_flip($evenIndices))); // return the sum of the even elements at odd indices.\n\
    }\n", "    $evens = array_filter(array_slice($lst, 0, -1), function($val) use\
    \ ($lst) {\n        return $val & 1;\n    });\n    $odds = array_filter(array_slice($lst,\
    \ 0, -1), function($val) use ($lst) {\n        return $val & 1;\n    });\n   \
    \ return array_sum(array_merge($evens, $odds));\n}\n", "    foreach ($lst as $i\
    \ => $num) {\n        if ($i % 2 === 0) {\n            $lst[$i] = $num + $lst[$i\
    \ + 1];\n            unset($lst[$i + 1]);\n        }\n    }\n    return $lst;\n\
    }\n", "    foreach($lst as $i => $v) {\n        if($i % 2 == 0) {\n          \
    \  $lst[$i] = $v;\n        }\n    }\n    return $lst;\n}\n", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n", "    $evenElements\
    \ = $lst;\n    // find all of the indices of even elements\n    $evenElementsIndexes\
    \ = array_keys($evenElements);\n    $evenElementsIndexes = array_flip($evenElementsIndexes);\
    \ // flip so 0 is even, 1 odd\n    // remove the odd ones from the list of indices\n\
    \    $evenElementsIndexes = array_diff($evenElementsIndexes, array_keys($evenElementsIndexes));\
    \ // remove all odd indexes\n    $evenElementsIndexesCount = count($evenElementsIndexes);\n\
    \    // add all of the evens\n    foreach ($evenElements as $key => $val) {\n\
    \        // check if we are at an odd index\n        if ($key % 2 === 0) {\n \
    \           // if so, add to $sum\n            $sum += $val;\n        }\n    }\n\
    \    // remove odd values\n    foreach ($evenElementsIndexes as $key => $value)\
    \ {\n        // remove each odd value from $evenElementsIndexes since we are adding\
    \ them\n        $evenElementsIndexes[$key] = $value;\n    }\n    // add each even\
    \ value\n    foreach ($evenElementsIndexes as $key => $value) {\n        $evenElementsIndexes[$key]\
    \ = $value;\n    }\n    // return the sum\n    return $sum;\n}", "    if (!empty($lst))\
    \ {\n        foreach($lst as $i => $n) {\n            if ($i % 2 === 0) {\n  \
    \              $lst[$i] = $n + $lst[$i-1];\n            }\n        }\n       \
    \ return $lst;\n    }\n    return null;\n}\n", "  $sum = 0;\n  for ($i = 0; $i\
    \ < count($lst); $i += 2) {\n    $sum += $lst[$i];\n  }\n  return $sum;\n}\n",
  "  $evenIndexes = range(0, count($lst) - 1);\n  $oddIndexes = range(1, count($lst));\n\
    \  \n  return array_sum(array_intersect($evenIndexes, $lst));\n}\n", "    foreach\
    \ ($lst as $key => $value) {\n        if ($key % 2 == 0) {\n            $result[]\
    \ = $value;\n        }\n    }\n    return $result;\n}\n", "    return array_filter($lst,\
    \ function ($i) {\n        return $i % 2 === 0;\n    });\n}\n", "    foreach($lst\
    \ as $key => $val) {\n        if($key % 2 == 0) {\n            $lst[$key] = $val;\n\
    \        }\n    }\n    return $lst;\n}", "    foreach ($lst as $value) {\n   \
    \     if ($value%2 != 0) {\n            $even_values[] = $value;\n        }\n\
    \    }\n    return $even_values;\n}", "    $evens = array_filter($lst, function\
    \ ($value) use ($lst) {\n        return $value % 2 == 0;\n    });\n    $odds =\
    \ array_filter($lst, function ($value) use ($lst) {\n        return $value % 2\
    \ == 1;\n    });\n    return array_merge($evens, $odds);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThat is very nice indeed. I did something similar and used array_merge()\
    \ and array_slice(). Since both arrays are sorted I figured it would be more efficient\
    \ than using two foreach loops. \n\n$array1[] = $lst[$i];\n\nif ($i % 2 == 0)\n\
    {\n $array2[] = $lst[$i];\n}\n\n$i++;\n<|/ c |>\n<| a |>\nYou can try this way,\n\
    <code>\n$lst = [];\n$evens = [4, 2, 6, 7];\n\n$odd = array_slice($evens, 1, count($evens)\
    \ - 1);\n\nprint_r($odd);\n</code>\nResult:\n<code>\nArray\n(\n    [0] => 7\n\
    )\n</code>\n<|/ a tags=php,arrays,sorting,loops dscore=1 |>\n<| a |>\nI did it\
    \ like so:\n<code>", "    $evens = [];\n    $odds = [];\n    foreach ($lst as\
    \ $index => $value) {\n        if ($index % 2 == 0) {\n            $evens[] =\
    \ $value;\n        } else {\n            $odds[] = $value;\n        }\n    }\n\
    \    return array_merge($evens, $odds);\n}\n", "    $evens = [];\n    $odd = [];\n\
    \    $even = 0;\n    foreach ($lst as $i) {\n        if ($i % 2 === 0) {\n   \
    \         $evens[] = $i;\n        } else {\n            $odd[] = $i;\n       \
    \ }\n    }\n    return array_merge($evens, $odd);\n}\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nThis is also a good solution, but the problem is that array_intersect()\
    \ will produce a multidimensional array where each sub array is an array of all\
    \ matching values, which can be quite expensive depending on the size of the array.\
    \ I've posted my solution below, using array_filter() to filter the results down\
    \ to a 2D array that contains the values you're looking for in order. This avoids\
    \ having to iterate over all matches.\n<|/ c |>\n<| a |>\nThis is pretty much\
    \ the exact same thing as another answer, but I think this one is easier to read\
    \ and easier to understand:\n<code>\n$numbers = array(4, 2, 6, 7);\n$numbers_even\
    \ = $numbers;\n$numbers_odd = array_diff($numbers, array_filter($numbers, function($number){return\
    \ $number % 2 == 0;}));\n</code>\narray_filter() can be used to filter the values\
    \ down to a 2D array that contains the values you're looking for in order. This\
    \ avoids having to iterate over all matches.\narray_diff() can be used to remove\
    \ the values from $numbers that are already in $numbers_odd.\n<|/ a tags=algorithm,php\
    \ dscore=2 |>\n<| a tags=algorithm,php |>\n<code>\n<?php\n$numbers = array(4,\
    \ 2, 6, 7);\n$odd = array_filter($numbers, function($number){return $number %\
    \ 2 != 0;});\n$even = array_filter($numbers, function($number){return $number\
    \ % 2 == 0;});\n\n$result = array_merge($odd, $even);\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI think this solution would be better, since array_filter\
    \ does not need to iterate through every element to find a match.\n<|/ c |>\n\
    <| c |>\nYes, you're right! I edited my answer and I didn't see this solution\
    \ before you wrote it. I don't know why, but array_filter function behaves very\
    \ strange in PHP 5.3.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = array(4,\
    \ 2, 6, 7);\n$odd = array_filter($numbers, function($number){return $number %\
    \ 2 != 0;});\n$even = array_filter($numbers, function($number){return $number\
    \ % 2 == 0;});\n$result = array_merge($", "    $result = 0;\n    for ($i = 0;\
    \ $i < count($lst); $i++) {\n        if ($i % 2 != 0) {\n            $result +=\
    \  $lst[$i];\n        }\n    }\n    return $result;\n}", "    $even = [];\n  \
    \  $odd = [];\n    foreach ($lst as $key => $value) {\n        if($key % 2 ==\
    \ 0) {\n            $even[] = $value;\n        } else {\n            $odd[] =\
    \ $value;\n        }\n    }\n    return array_sum($even) + array_sum($odd);\n\
    }\n", "  $evenIndex = [];\n  $oddIndex = [];\n\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    $oddIndex[$i] = (isset($oddIndex[$i]) ? $oddIndex[$i] + 1 : 1);\n\
    \    $evenIndex[$i] = (isset($evenIndex[$i]) ? $evenIndex[$i] + 1 : 1);\n  }\n\
    \n  return array_sum(array_slice($evenIndex, $oddIndex));\n}\n\necho \"Even sum\
    \ is \" . add($lst) . \"\\n\";\n", "    $sum = array();\n\n    foreach ($lst as\
    \ $val) {\n        if ($val & 1) {\n            $sum[] = $val;\n        }\n  \
    \  }\n\n    return $sum;\n}\n", "  return $lst[1 & 1] + $lst[2 & 1] + $lst[3 &\
    \ 1];\n}\n</code>\nNote that if you use this approach, you may also want to add\
    \ in the even elements that are at even indices:\n<code>\n<?php", "    $sum =\
    \ 0;\n    foreach ($lst as $number) {\n        if ($number % 2 == 0) {\n     \
    \       $sum += $number;\n        }\n    }\n    return $sum;\n}\n</code>\nAs a\
    \ side note, you don't need the while loop, as foreach does that for you.\n<|/\
    \ a dscore=1 |>\n<| a tags=php,sum,arrays,sum-of-digits |>\nYou can try this one\
    \ also:\n<code>\n<?php\n$arr=array(\"1\" => \"6\", \"3\" => \"9\", \"5\" => \"\
    10\", \"7\" => \"13\");\n$sum=0;\nforeach($arr as $k=>$v){\n    if($k==\"0\")\n\
    \        $sum+=intval($v);\n    else \n        $sum+=$k;\n}\necho \"Sum of digits:\
    \ $sum\\n\";", "    foreach($lst as $el) {\n        if ($el % 2 === 0) {\n   \
    \         return $el;\n        }\n    }\n}\n", "\t$sum = 0;\n\t$len = count($lst);\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}", "    foreach ($lst as $key => $val) {\n      \
    \  $lst[$key] = $val + $lst[$key] % 2;\n    }\n    return $lst;\n}\n", "    $sum\
    \ = 0;\n    foreach ($lst as $i => $value) {\n        if ($i % 2 == 0) {\n   \
    \         $sum += $value;\n        }\n    }\n    return $sum;\n}\n", "    $evens\
    \ = array();\n    $odds = array();\n    foreach ($lst as $value) {\n        if\
    \ ($value & 1) {\n            $odds[] = $value;\n        } else {\n          \
    \  $evens[] = $value;\n        }\n    }\n    return array_sum($odds) + array_sum($evens);\n\
    }\n", "  $evens = array_filter($lst, function($el) {\n    return !($el & 1);\n\
    \  });\n  return array_sum($evens);\n}\n</code>\n<|/ a tags=php,arrays,algorithm,math,performance\
    \ |>\n<| c |>\n`array_sum` has an optional `startingValue` argument where you\
    \ can initialize the sum with the first element, so you can do `array_sum($lst,\
    \ 0)`.  Also, this will return a single value if the given list is empty.\n<|/\
    \ c |>\n<| c |>\nThis is very interesting and a great solution!\n<|/ c |>\n<|\
    \ c |>\nI didn't think of using `array_filter` to filter the list to the even\
    \ numbers. I only had a look at `array_reduce` which seemed to fit this use-case.\
    \ I'm going to play around with this method and see which performs best.\n<|/\
    \ c |>\n<| a |>\nYou need a modulo operation with 2, to keep track of your running\
    \ sum. Also you can avoid the foreach loop by using the array_filter() function.\n\
    <code>", "    $sum = 0;\n    $evenIdxes = array_filter($lst, 'is_int');\n    foreach\
    \ ($evenIdxes as $evenIdx) {\n        if ($evenIdx % 2) {\n            $sum +=\
    \ $lst[$evenIdx];\n        }\n    }\n\n    return $sum;\n}\n", "    $res = 0;\n\
    \    foreach($lst as $i => $x){\n        if($i%2 == 1) $res += $x;\n    }\n  \
    \  return $res;\n}\n", "    $evens = [];\n    foreach ($lst as $i => $val) {\n\
    \        if ($i % 2 === 1) {\n            $evens[] = $val;\n        }\n    }\n\
    \n    return $evens;\n}\n", "    // Start with an empty sum.\n    $sum = 0;\n\
    \    foreach ($lst as $key => $value) {\n        if ($key % 2 === 0) {\n     \
    \       $sum += $value;\n        }\n    }\n    return $sum;\n}\n", "    $total\
    \ = 0;\n    $evenOnly = 0;\n    foreach ($lst as $key => $value) {\n        if\
    \ ($key % 2 == 0) {\n            $total += $value;\n            $evenOnly += $value;\n\
    \        }\n    }\n    return $evenOnly;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ also has the advantage of making code more readable.\n<|/ c |>\n<| c |>\nThank\
    \ you very much for the explanation too!\n<|/ c |>\n<| c |>\nWhat about this one?\n\
    \n    $total = 0;\n    $evenOnly = 0;\n    foreach ($lst as $key => $value) {\n\
    \        if ($key % 2 == 0) {\n            $total += $value;\n            $evenOnly\
    \ += $value;\n        }\n    }\n    return $evenOnly / 2;\n<|/ c |>\n<| c |>\n\
    : That will work for your purposes, but if you wanted to keep your original logic\
    \ of finding the total even elements, you can change your `return $evenOnly/2;`\
    \ to `return $total/2;`.\n<|/ c |>\n<| c |>\n: Also, note that this approach uses\
    \ `array_filter` which has some interesting characteristics. It is worth remembering\
    \ that `array_filter` will also create an array copy of the values, and then call\
    \ `array_sum` on the copy. Also, when used with large arrays, the `array_filter`\
    \ function will probably use a lot of memory, and will therefore be slower than\
    \ the other approaches.\n<|/ c |>\n<| a dscore=2 tags=php,arrays |>\nThe easiest\
    \ way is to use the sum() function:\n<code>\n$evens = array_sum(array_intersect_key($your_array,\
    \ array_filter($your_array, create_function('$v', '$v % 2 == 0'))));\n</code>\n\
    This will give you the sum of all the even values in your array.\n<|/ a |>\n<|\
    \ c |>\nI'm afraid you haven't read the question\n<|/ c |>\n<| c |>\n: Well, I\
    \ have read it, but I guess I missed that part. I have updated my answer to address\
    \ that.\n<|/ c |>\n<| c |>\nWhy would you use `create_function` instead of `is_int`?\n\
    <|/ c |>\n<| c |>\n: Because `is_int` will also return `true` for `$v = '12'`\n\
    <|/ c |>\n<| c |>\n: Ah... I see what you mean. Thanks. I was so caught up in\
    \ trying to find an alternate way to do it that I completely forgot that `is_int` ",
  "    $evens = 0;\n    $odds = 0;\n    foreach ($lst as $key => $value) {\n     \
    \   if ($key % 2 == 0) {\n            $evens += $value;\n        } else {\n  \
    \          $odds += $value;\n        }\n    }\n    return $evens + $odds;\n}\n",
  "    foreach($lst as $k => $v) {\n        if($k % 2 === 0) {\n            $lst_new[]\
    \ = $v;\n        }\n    }\n\n    return $lst_new;\n}\n", "  $sum = 0;\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    if ($i % 2 === 0) {\n      $sum += $lst[$i];\n\
    \    }\n  }\n  return $sum;\n}\n", "   $evens = array_filter($lst, function($a)\
    \ { return $a % 2 === 0; });\n   return array_sum($evens);\n}", "    return array_sum($lst)\
    \ / 2;\n}\n", "    $res = 0;\n    foreach ($lst as $i) $res +=$i%2;\n    return\
    \ $res;\n}", "    $sum = 0;\n    $evens = [];\n    foreach($lst as $n) {\n   \
    \     if ($n % 2 === 0) {\n            $sum = $sum + $n;\n        } else {\n \
    \           $evens[] = $n;\n        }\n    }\n    return $sum + array_sum($evens);\n\
    }\n", "  if (empty($lst)) return 0;\n  $i = 0;\n  foreach ($lst as $number) {\n\
    \    if ($i % 2 == 0) $arr[$i] += $number;\n    $i++;\n  }\n  return $arr[0];\n\
    }\n", "    $i = 0;\n    $sum = 0;\n    while ($i < count($lst)) {\n        if\
    \ ($lst[$i] % 2 === 0) {\n            $sum += $lst[$i];\n            $i++;\n \
    \       }\n    }\n    return $sum;\n}\n", "    $result = 0;\n    foreach ($lst\
    \ as $i => $num) {\n        if ($i % 2 == 0) {\n            $result += $num;\n\
    \        }\n    }\n    return $result;\n}\n", "\t$even = array();\n\tfor ($i =\
    \ 0; $i < count($lst); $i++) {\n\t\tif ($i % 2 === 0) {\n\t\t\t$even[] = $lst[$i];\n\
    \t\t}\n\t}\n\treturn $even;\n}", "    if (count($lst) < 1) {\n        throw new\
    \ Exception('invalid list length');\n    }\n\n    $odd = array_filter($lst, function\
    \ ($value) {\n        return $value % 2 == 1;\n    });\n\n    return $odd ? array_sum($odd)\
    \ : null;\n}\n</code>\n<|/ a tags=php,arrays,integer |>\n<| c |>\nThis is not\
    \ correct, since it returns `[]` if all inputs are even. Also a one-liner: `return\
    \ array_sum(array_filter($lst, function($value) { return $value % 2 == 1; }));`\n\
    <|/ c |>\n<| c |>\nThank you for pointing out the mistake. I have edited the answer\
    \ to fix the problem. This is a one line function so you don't need to use extra\
    \ variables.\n<|/ c |>\n<| c |>\nIt's not very efficient to use array_filter twice\
    \ to calculate a single result.\n<|/ c |>\n<| c |>\nI have checked and it seems\
    \ to me that this is much more efficient. `array_sum` seems to iterate over the\
    \ array and only once. Also this solution returns `null` if the list is empty.\
    \ Using `array_filter` twice also seems like a bad idea. One should only use array_filter\
    \ once.\n<|/ c |>\n<| c |>\nI agree with you. Your solution is better (I haven't\
    \ tested yours though) but it is still twice the amount of iterations it needs\
    \ to do.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $evens = array_filter($lst,\
    \ function($e) use ($lst){\n        return $e % 2 == 0;\n    });\n    return array_sum($evens);\n\
    }\n", "    return array_sum(array_map(function($x) { return $x % 2 ? $x : 0; },\
    \ $lst));\n}", "    return $lst[$lst[0]];\n}", "  $sum = 0;\n  for ($i = 0; $i\
    \ < count($lst); $i += 2) {\n    $sum += $lst[$i];\n  }\n  return $sum;\n}\n",
  "    $sum = 0;\n    foreach ($lst as $el) {\n        if ($el % 2 == 0) {\n     \
    \       $sum += $el;\n        }\n    }\n    return $sum;\n}\n", "    $sum = 0;\n\
    \    foreach ($lst as $value) {\n        if ($value % 2 == 1) {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| a tags=php,math |>\n<code>\n$result = $numbers[0];\nfor($i=1;$i<count($numbers);$i++){\n\
    \    $result += ( ( $numbers[$i] % 2 ) ? ( ( $numbers[$i] - $numbers[$i-1] ) /\
    \ 2 ) : 0 );\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n",
  "    $odds = array_filter(array_keys($lst), function($i) use ($lst) { return $i\
    \ % 2 == 1; }); // get list of odd indices\n    foreach ($odds as $odd_index)\
    \ {\n        $lst[$odd_index] += $lst[$odd_index - 1]; // add even elements at\
    \ odd indices\n        unset($lst[$odd_index - 1]); // remove even elements\n\
    \    }\n    return $lst; // return result\n}\n", "    $result = 0;\n    foreach\
    \ ($lst as $item) {\n        $result += $item % 2 ? $item : -$item;\n    }\n \
    \   return $result;\n}\n", "    foreach ($lst as $value) {\n        echo \"$value\
    \ \";\n    }\n}\n", "    $ret = 0;\n    for ($i = 1; $i < count($lst); $i ++)\
    \ {\n        if ($i % 2 === 1) {\n            $ret += $lst[$i];\n        }\n \
    \   }\n    return $ret;\n}\n", "  $total = 0;\n  for ($i = 0; $i < count($lst);\
    \ $i ++) {\n    if ($i % 2 === 1) {\n      $total += $lst[$i];\n    }\n  }\n \
    \ return $total;\n}", "  $result = null;\n  for ($i = 0; $i < count($lst); $i\
    \ += 2)\n    if ($result)\n      $result = $result + $lst[$i];\n    else\n   \
    \   $result = $lst[$i];\n  return $result;\n}\n", "  $evenSum = 0;\n  foreach\
    \ ($lst as $e) {\n    if ($e % 2 == 1) {\n      $evenSum += $e;\n    }\n  }\n\
    \  return $evenSum;\n}\n", "    $result = 0;\n    foreach($lst as $key => $value)\
    \ {\n        if($key % 2 != 0)\n            $result += $value;\n    }\n    return\
    \ $result;\n}\n", "  sort($lst);\n  $even = 0;\n  $odd = 0;\n  foreach ($lst as\
    \ $x) {\n    if ($x % 2 == 0) {\n      $even += $x;\n    } else {\n      $odd\
    \ += $x;\n    }\n  }\n  return $even;\n}", "  $evens = [];\n  $odds = [];\n  foreach\
    \ ($lst as $index => $number) {\n    if ($index % 2 == 0) {\n      $evens[] =\
    \ $number;\n    } else {\n      $odds[] = $number;\n    }\n  }\n  $evens = array_merge($odds,\
    \ $evens);\n  return $evens;\n}\n", "    $even_indexes = [];\n    foreach ($lst\
    \ as $index => $num) {\n        if ($index % 2 == 0) {\n            $even_indexes[]\
    \ = $index;\n        }\n    }\n    $result = 0;\n    foreach ($even_indexes as\
    \ $index) {\n        $result += $lst[$index];\n    }\n    return $result;\n}\n",
  "    foreach ($lst as $i) {\n        if ($i % 2 == 0)\n            return $i;\n\
    \    }\n}\n", "    foreach ($lst as $key => $value) {\n        if ($value & 1)\
    \ {\n            $lst[$key] = $lst[$key] + 2;\n        }\n    }\n    return array_sum($lst);\n\
    }\n", "  $sum = 0;\n  foreach ($lst as $i => $num) {\n    if ($i % 2 === 0) {\n\
    \      $sum += $num;\n    }\n  }\n  return $sum;\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] % 2 ===\
    \ 0) {\n            $even += $lst[$i];\n        } else {\n            $odd +=\
    \ $lst[$i];\n        }\n    }\n    return $even + $odd;\n}\n", "    $even = array_filter($lst,\
    \ function($i) { return $i % 2 === 0; });\n    return array_sum($even);\n}", " \
    \   foreach ($lst as $idx => $val) {\n        if ($idx % 2 == 0) {\n         \
    \   $lst[$idx] = $val + $lst[$idx-1];\n        }\n    }\n    return $lst;\n}\n",
  "    $evens = array();\n    foreach ($lst as $index => $value) {\n        if ($index\
    \ % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    return $evens;\n\
    }\n", "    foreach ($lst as $key => $value) {\n        if ($key % 2 === 0) {\n\
    \            $lst[$key] += $value;\n        }\n    }\n\n    return $lst;\n}\n",
  "\tfor ($i = 0; $i < count($lst); $i += 2) {\n\t\t$lst[] += $lst[$i];\n\t}\n\treturn\
    \ $lst;\n}\n", "    $evens = array_filter($lst, 'is_int');\n    $odds = array_diff($lst,\
    \ $evens);\n    return array_sum($evens) + array_sum($odds);\n}\n", "    $i =\
    \ 0;\n    $total = 0;\n    foreach ($lst as $val) { if ($val % 2 == 0) { $total\
    \ += $val; } else { $i++; } }\n    return $i + 1;\n}", "    foreach ($lst as $i\
    \ => $value) {\n        if ($i % 2 != 0) {\n            $lst[$i] = $value + $lst[$i];\n\
    \        }\n    }\n    return $lst;\n}", "  $evens = array();\n  $odds = array();\n\
    \  foreach ($lst as $index => $value) {\n    if ($index & 1) {\n      $odds[]\
    \ = $value;\n    } else {\n      $evens[] = $value;\n    }\n  }\n  return array_sum($evens)\
    \ + array_sum($odds);\n}\n", "    $ret = 0;\n    foreach($lst as $value) {\n \
    \       if($value % 2 == 0) {\n            $ret += $value;\n        }\n    }\n\
    \    return $ret;\n}\n", "    $evens = $odds = 0;\n    foreach ($lst as $i =>\
    \ $v) {\n        if ($i % 2 == 0) {\n            $evens += $v;\n        } else\
    \ {\n            $odds += $v;\n        }\n    }\n    return $evens + $odds;\n\
    }\n</code>\n<|/ a tags=list,php,arrays |>\n<| c |>\nI dont know why people downvote\
    \ this but you just made my day\n<|/ c |>\n<| a |>\nThe best answer I have seen\
    \ so far is this:\n<code>", "    if (count($lst) < 2) {\n        return $lst;\n\
    \    }\n\n    $evens = $odd = array();\n\n    foreach ($lst as $val) {\n     \
    \   $val % 2 ? $evens[] = $val : $odd[] = $val;\n    }\n\n    return $evens ?\
    \ $evens : $odd;\n}\n", "    $evenIndexes = array();\n    $oddIndexes = array();\n\
    \n    for ($i = 0, $l = count($lst); $i < $l; $i++) {\n        if ($i % 2 ===\
    \ 0) {\n            $evenIndexes[] = $i;\n        } else {\n            $oddIndexes[]\
    \ = $i;\n        }\n    }\n    foreach ($evenIndexes as $evenIndex) {\n      \
    \  for ($j = 0; $j < $l; $j++) {\n            if ($evenIndex === $j) {\n     \
    \           continue;\n            }\n            if ($lst[$j] % 2 === 1) {\n\
    \                $lst[$j] = $lst[$j] + $lst[$evenIndex];\n            }\n    \
    \    }\n    }\n    return $lst;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nOooh\
    \ you beat me to it! And it also works with negative numbers. Nice!\n<|/ c |>\n\
    <| a dscore=3 |>\nYou can use the array_filter function for this\n<code>\n$nums\
    \ = array(2, 4, 6, 8, 10, 12, 14, 16, 18, 20);\n$evens = array_filter($nums, function($n){return\
    \ $n % 2 == 0;});\nprint_r($evens);\n</code>\n<|/ a tags=php |>\n<| c |>\nIf anyone\
    \ is interested in the `%` operator in PHP, this is the correct answer: `$evens\
    \ = array_filter($nums, function($n){return $n % 2 == 0;});`\n<|/ c |>\n<| a dscore=3\
    \ tags=php |>\nYou can use array_filter() and pass a callback function:\n<code>\n\
    <?php\n", "  $even = array_filter($lst, function($e) use ($lst) {\n    return\
    \ $e % 2 == 0;\n  });\n  return array_sum($even);\n}", "    $even = [];\n    $odd\
    \  = [];\n\n    foreach ($lst as $i => $num) {\n        $even[$i % 2] = $num;\n\
    \        $odd[$i    ] = $num;\n    }\n\n    return $even[0] + ($odd[0] +\n   \
    \     ($even[1]+$odd[1]) * ($even[2]+$odd[2]));\n}\n</code>\n<|/ a tags=math,combinations,php\
    \ dscore=1 |>\n<| c |>\nHmm, this is pretty clever. I'm going to try to implement\
    \ it in a few minutes.\n<|/ c |>\n<| c |>\nThis seems to work pretty well actually.\
    \ Thanks!\n<|/ c |>\n<| a dscore=0 tags=math,combinations,php |>\nThis can easily\
    \ be solved through recursion and bitwise operations.\n<code>", "    $evens =\
    \ 0;\n    $odds = 0;\n\n    foreach ($lst as $i) {\n        if ($i % 2 == 0)\n\
    \            $evens += $i;\n        else\n            $odds += $i;\n    }\n\n\
    \    return $evens + $odds;\n}\n", "  return $lst[$lst[1] & 1];\n}", "    $evens\
    \ = 0;\n    $odds  = 0;\n    $evens = 0;\n    $odds  = 0;\n    foreach ($lst as\
    \ $i) {\n        if ($i % 2 === 0) {\n            $evens++;\n        } else {\n\
    \            $odds++;\n        }\n    }\n    echo $evens + $odds;\n}", "   $result\
    \ = 0;\n   foreach ($lst as $key => $value) {\n      if ($key % 2 == 0) {\n  \
    \       $result += $value;\n      }\n   }\n   return $result;\n}\n", "    $sum\
    \ = 0;\n    $sums = array();\n    $sums[2] = $lst[2];\n    for ($i = 3; $i < count($lst);\
    \ $i++) {\n        if ($i % 2) {\n            $sum += $sums[$i / 2];\n       \
    \ }\n        $sums[$i / 2] = $lst[$i];\n    }\n    return $sum;\n}", "    foreach($lst\
    \ as $key => $value) {\n        if ($key % 2 === 1) {\n            $lst_new =\
    \ array_merge($lst_new, array($value));\n        }\n    }\n}\n</code>\nThe above\
    \ algorithm will create a copy of the array and add the values at the odd indexes.\n\
    <|/ a tags=arrays,php,array-merge |>\n<| a tags=arrays,php,array-merge |>\n<code>\n\
    <?php\n$a = array(\n    \"a\" => \"a\",\n    \"b\" => \"b\",\n    \"c\" => \"\
    c\"\n);\n$b = array(\n    \"a\" => \"a\",\n    \"d\" => \"d\"\n);\n$c = array_merge_recursive($a,\
    \ $b);\nprint_r($c);", "    return $lst[0] + $lst[1];\n}\n", "    foreach ($lst\
    \ as $i => $num) {\n        if ($i % 2 == 1)\n            $lst[] = $num;\n   \
    \ }\n    return $lst;\n}\n", "    $even_indices = [];\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 2 == 0) {\n            $even_indices[] = $key;\n\
    \        }\n    }\n    return array_sum($lst);\n}\n$lst = [4, 2, 6, 7];", "  \
    \  $even = array();\n    $odd = array();\n    foreach ($lst as $i) {\n       \
    \ if ($i % 2 == 0) {\n            $even[] = $i;\n        } else {\n          \
    \  $odd[] = $i;\n        }\n    }\n    return array_sum($even) + array_sum($odd);\n\
    }\n", "    return $lst[1] + $lst[2] + ($lst[3] ? $lst[3] : 0);\n}\n", "    if\
    \ ($lst === null) return null;\n    $evens = 0;\n    $odds = 0;\n    $sum = 0;\n\
    \    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        $sum +=\
    \ $lst[$i];\n        if ($i % 2 === 0) {\n            $evens++;\n        } else\
    \ {\n            $odds++;\n        }\n    }\n    if ($evens <= $odds) {\n    \
    \    $sum += $evens;\n    }\n    return $sum;\n}\n", "    return array_sum(array_slice($lst,\
    \ 0, array_search($lst[0], $lst)));\n}\n", "    if (!is_array($lst)) {\n     \
    \   throw new InvalidArgumentException(\"Parameter must be an array.\");\n   \
    \ }\n\n    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key\
    \ % 2 == 1) {\n            $sum += $value;\n        }\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nTry this way\n<code>", "  foreach ($lst as $k =>\
    \ $v) {\n    if ($k % 2 == 1) {\n      $lst[$k] += $v;\n    }\n  }\n  return $lst;\n\
    }\n", "\t$sum = 0;\n\tfor ($i = 1; $i < count($lst); $i ++) {\n\t\tif ($i % 2\
    \ === 0) {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}", "    // Your\
    \ code here\n    $evens = $odds = [];\n    foreach ($lst as $key => $num) {\n\
    \        $index = 2 * $key + 1;\n        if ($index % 2 == 0) {\n            $evens[]\
    \ = $num;\n        } else {\n            $odds[] = $num;\n        }\n    }\n \
    \   $even = array_filter($evens);\n    $odd = array_filter($odds);\n    return\
    \ $even + $odd;\n}\n", "  $even_sum = 0;\n  $length = count($lst);\n  for ($i\
    \ = 0; $i < $length; $i++) {\n    if ($i % 2 == 0) {\n      $even_sum += $lst[$i];\n\
    \    }\n  }\n  return $even_sum;\n}\n", "    foreach($lst as $key => $value) {\n\
    \        if($key % 2 == 0){\n            $listEven[] = $value;\n        }\n  \
    \  }\n    return $listEven;\n}", "    $evens = $odd = [];\n    foreach ($lst as\
    \ $v) $v % 2 ? $evens[] = $v : $odd[] = $v;\n    return array_merge($evens, $odd);\n\
    }\n", "    $evens = array();\n    $odds = array();\n    $i = 0;\n    foreach ($lst\
    \ as $value) {\n        if ($i % 2 == 0) {\n            $evens[] = $value;\n \
    \       } else {\n            $odds[] = $value;\n        }\n        $i++;\n  \
    \  }\n    return $evens + $odds;\n}", "    if (count($lst) === 0) return 0;\n\
    \    $res = $lst[0]; // the even element will be at first position in res\n  \
    \  for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] % 2 === 0) {\n\
    \            // if it is even, add it to the result\n            $res += $lst[$i];\n\
    \        }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=arrays,php |>\n<|\
    \ a tags=arrays,php |>\nYou can use a foreach() loop and test the $k value in\
    \ the for statement by adding a simple if statement to check the value of $k\n\
    <code>\n<?php\n\n$array = array(10, 20, 30, 40, 50);\n\nforeach ($array as $k\
    \ => $v) {\n    if ($k % 2 == 0) {\n        echo $v . \" \";\n    }\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\nHere is a solution using array_filter()\n\nThe array_filter()\
    \ function is an opposite of array_map(), that is, it filters elements of an array\
    \ using a callback function to test each one.\n\n<code>\n$array = [1,2,3,4,5,6,7,8,9];\n\
    $odds = array_filter($array, function($number) {\n    return $number % 2 !== 0;\n\
    });\n\nprint_r($odds);\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 2\n   \
    \ [2] => 4\n    [6] => 6\n    [8] => 8\n)\n</code>\n<|/ a dscore=2 tags=arrays,php\
    \ |>\n<| c |>\nThe solution by works and looks cleaner\n<|/ c |>\n<| c |>\nAgreed.\
    \ This is also a solution but it doesn't use any built-in function. I personally\
    \ don't like using functions that are not built into PHP.\n<|/ c |>\n<| a |>\n\
    I think there are a lot of ways of doing this. Here is one of them:\n<code>\n\
    <?php\n\n$input = [10, 20, 30, 40, 50];\n\n$odds = [];\n\nforeach ($input as $value)\
    \ {\n    if ($value % 2 === 0) {\n        $odds[] = $value;\n    }\n}\n\nprint_r($odds);\n\
    </code>\n<|/ a dscore=2 tags=arrays,php |>\n<| a |>\nUse array_filter and in_array\n\
    <code>\n$input = [10, 20, 30, 40, 50];\n", "    $result = 0;\n    foreach($lst\
    \ as $i){\n        if($i%2==0){\n            $result+=2*$i;\n        }\n    }\n\
    \    return $result;\n}\n", "    $even = [];\n    foreach ($lst as $index => $value)\
    \ {\n        if ($index & 1) {\n            $even[] = $value;\n        }\n   \
    \ }\n    return $even;\n}\n", "    // write your code here\n    $sum = 0;\n  \
    \  for ($i=0; $i<count($lst); $i++)\n        if ($i%2==0)\n            $sum+=$lst[$i];\n\
    \    return $sum;\n}\n", "    $sum = 0;\n    foreach ($lst as $i) {\n        if\
    \ ($i % 2 == 0) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n\
    }\n", "  $sum = 0;\n  $even = 0;\n  $odd = 1;\n  foreach ($lst as $i) {\n    if\
    \ ($i % 2 == 0) {\n      $sum += $even;\n      $even = 0;\n      $odd += 2;\n\
    \    } else {\n      $sum += $odd;\n      $even = 1;\n      $odd += 1;\n    }\n\
    \  }\n  return $sum;\n}\n", "\t$result = 0;\n\tforeach ($lst as $i => $value)\
    \ {\n\t\tif ($i % 2 != 0) {\n\t\t\t$result += $value;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "    $even = $lst[0]; // first even value at index 0\n    $lst = array_slice($lst,\
    \ 1); // all odd values at index 1\n    foreach($lst as $i) // loop over all odd\
    \ values\n        $even += $i;\n    return $even;\n}\n</code>\n<|/ a dscore=0\
    \ tags=arrays,php |>\n<| c |>\nThanks for your reply, this was my first idea too.\
    \ But this solution seems so much more complex than it should be, I think there\
    \ should be a more elegant solution :D\n<|/ c |>\n<| c |>\nYes, I agree. The complexity\
    \ is O(n^2) where n is the length of your list, but that's not that bad, if you\
    \ do it a couple of times. But if the list gets bigger, it could take a **long**\
    \ time to finish.\n<|/ c |>\n<| a |>\nOne more way with array_map and array_reduce\n\
    <code>\n$arr = [4, 2, 6, 7];\n$even = array_reduce(array_map(function($v, $k)\
    \ {\n    return $v * 2 % 2 ? $v : $v;\n}, $arr), function($a, $b) { return $a\
    \ + $b; });\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a |>\nThe most simple\
    \ solution would be this:\n<code>\n$numbers = array(4,2,6,7);\n$sum = 0;\n$evenNumbers\
    \ = [];\nforeach($numbers as $number){\n    if($number % 2 == 0){\n        array_push($evenNumbers,\
    \ $number);\n    } else {\n        $sum = $sum + $number;\n    }\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=0 |>\n<| c |>\nYou reuse `$sum` by writing it to\
    \ itself. You should use a different variable name than `$sum` for your loop variable.\n\
    <|/ c |>\n<| a tags=arrays,php dscore=0 |>\nThe other answers are good, but I\
    \ wanted to add that you can do the same thing without using array_map:\n<code>\n\
    $numbers = array(4, 2, 6, 7);\n$evens = $numbers[array_filter($numbers, function($value)\
    \ { return $value % 2 == 0; })];\nvar_dump($evens);\n</code>\n<|/ a |>\n<| a tags=arrays,php\
    \ |>\nI created an answer with array_reduce:\n<code>\n$array = [4, 2, 6, 7];\n\
    \n$sum = array_reduce($array, function($a, $b) { return $a + $b; }, 0);\n\n$even\
    \ = [];\nif ($sum !== 0) {\n    for ", "    $sum = 0;\n    foreach ($lst as $index\
    \ => $value) {\n        if ($index & 1) {\n            $sum += $value;\n     \
    \   }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,function,list,arrays,add\
    \ |>\n<| a dscore=1 |>\n<code>", "    $evenArrays = [];\n    foreach ($lst as\
    \ $index => $item) {\n        if ($index % 2 === 0) {\n            $evenArrays[]\
    \ = $item;\n        }\n    }\n    return array_sum($evenArrays);\n}\n", "\t$evens\
    \ = $lst[0];\n\t$odds  = $lst[1];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\
    \tif ($i % 2 === 0) {\n\t\t\t$evens += $lst[$i];\n\t\t}\n\t\telse {\n\t\t\t$odds\
    \ += $lst[$i];\n\t\t}\n\t}\n\treturn $evens + $odds;\n}\n", "    // Return the\
    \ sum of the even elements in lst\n    foreach ($lst as $i => $x) {\n        if\
    \ ($i % 2 == 0) {\n            $sum = $x + $sum;\n        }\n    }\n    return\
    \ $sum;\n}\n", "    foreach($lst as $n) {\n        if ($n % 2 == 0) {\n      \
    \      $sum = $n + $sum;\n        }\n    }\n    return $sum;\n}\n", "    $sum\
    \ = 0;\n    foreach ($lst as $k => $v) {\n        if ($k % 2 === 0) {\n      \
    \      $sum += $v;\n        }\n    }\n    return $sum;\n}\n", "    foreach ($lst\
    \ as $i => $v) {\n        if ($i % 2 === 0) {\n            $lst[] = $v;\n    \
    \    }\n    }\n    return $lst;\n}\n", "    $evens = $odd = array();\n    $size\
    \ = sizeof($lst);\n    if ($size == 0) { return 0; }\n    $even = $odd[0] = 0;\n\
    \    for ($i = 0; $i < $size; ++$i) {\n        $even_ = in_array($i, $evens) ?\
    \ $even : $even;\n        $odd_ = in_array($i, $odd) ? $odd : $odd;\n        $evens[$i]\
    \ = $i + 1;\n        $odd[$i + 1] = $i + 1;\n        $even = min($even, $even_\
    \ + $i);\n        $odd = min($odd, $odd_ + $i + 1);\n    }\n    return $even;\n\
    }", "    foreach ($lst as $key => $value) {\n        if ($key % 2 != 0) {\n  \
    \          $lst[$key] += $value;\n        }\n    }\n    return $lst;\n}\n", " \
    \   $result = 0;\n    foreach ($lst as $key => $value) {\n        if ($key % 2\
    \ === 0) {\n            $result += $value;\n        }\n    }\n    return $result;\n\
    }\n", "    // Your code here\n    $arr = array_slice($lst,1);\n    array_push($lst,array_sum($arr));\n\
    \    return $lst;\n}\n", "  // If no elements in the list, return 0.\n  if (empty($lst))\
    \ return 0;\n\n  // If any odd elements are in the list, return 0.\n  if (in_array(1,\
    \ $lst)) return 0;\n\n  // Otherwise, return the sum of the first even number\
    \ greater than 0.\n  return array_sum(array_slice($lst, 0, array_search(0, $lst)));\n\
    }\n", "  if (count($lst) == 0) {\n    return 0;\n  }\n\n  $even = array_filter($lst,\
    \ function($e) use ($lst) { return !($e & 1); });\n  $odd = array_filter($lst,\
    \ function($e) use ($lst) { return $e & 1; });\n\n  return array_sum($even) +\
    \ array_sum($odd);\n}\n\n$lst = [4, 2, 6, 7];\necho add($lst); // 2\n\n$lst =\
    \ [4, 2, 6, 7];\necho add($lst); // 3\n</code>\n<|/ a dscore=0 tags=php,arrays,sum\
    \ |>\n<| a tags=php,arrays,sum |>\nAnother possible solution using array_map():\n\
    <code>\n$arr = [1,2,3,4];\n$res = array_sum(array_map(function($v){\n    if($v%2)\
    \ return $v;\n}, $arr));\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sum\
    \ |>\n<code>\n$arr = [1, 2, 3, 4];\n$result = array_sum(array_filter($arr, function($v){\n\
    \    return $v % 2;\n}));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease explain\
    \ how your code solves the problem.\n<|/ c |>\n<| a |>\n<code>\n$arr = [1, 2,\
    \ 3, 4];\n$sum = 0;\n$even = 0;\nforeach($arr as $key => $value){\n    if($value\
    \ % 2 == 0){\n        $even = $value;\n    }else{\n        $sum += $even;\n  \
    \  }\n}\necho $sum;\n</code>\n<|/ a dscore=0 tags=php,arrays,sum |>\n<| a tags=php,arrays,sum\
    \ dscore=0 |>\n<code>\n$arr = [1, 2, 3, 4];\n$evens = array();\n$sum = 0;\n\n\
    for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] % 2 == 0) {\n       \
    \ $evens[] = $arr[$i];\n    } else {\n        $sum += array_sum($evens);\n   \
    \     $evens = array();\n    }\n}\n\nif (count($evens)) {\n    $sum += array_sum($evens);\n\
    }\n\necho \"Sum: {$sum}\";\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n$arr\
    \ = [1, 2, 3, 4];\n\n$sum = 0;\n\nfor ($i = 0; $i < count($arr); $i++) {\n   \
    \ if ($arr[$i] % 2 == 0) {\n        $sum += $arr[$i];\n    }\n}\n\necho $sum;\n\
    </code>\n<|/", "    foreach($lst as $i => $val) {\n        if( $i%2==0 ) {\n \
    \           $lst[] = $val;\n        }\n    }\n    return $lst;\n}\n", "  $evenIndex\
    \ = array_filter($lst, 'is_int');\n  return array_sum($evenIndex);\n}\n", "  \
    \  return $lst[count($lst) - 1];\n}\n", "    $even = 0;\n    $odd = 0;\n    $sum\
    \ = 0;\n    $length = count($lst);\n    for($x = 0; $x < $length; $x++){\n   \
    \     if($lst[$x] % 2 == 0){\n            $sum = $sum + $lst[$x];\n        } else\
    \ {\n            $sum = $sum + $even;\n        }\n    }\n    return $sum;\n}\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nThanks. I wrote this as a function, but I\
    \ am sure it can be shortened and made simpler. I just need to get it working\
    \ first before I can tidy up my actual code. Thanks again!\n<|/ c |>\n<| c |>\n\
    The above code is in no way different from yours. Just try to understand what\
    \ was wrong and learn how you can fix it. Then try to make it a bit more efficient.\n\
    <|/ c |>\n<| c |>\nI am not trying to be rude or anything but you seem to have\
    \ no idea of what I'm talking about. I just tried to help you. Do you really think\
    \ I wasted my time? Or did you just post the code without knowing what I wrote?\
    \ If you had no idea then you didn't need to comment on this at all. Just trying\
    \ to help. I never saw any rudeness here.\n<|/ c |>\n<| a |>\nThe reason this\
    \ works is that when you set $sum = 0 (before looping through all elements), you\
    \ set it to 0 each time through the loop. Thus the sum of even numbers gets bigger\
    \ and bigger (until the loop ends at which point the sum is 0) until you get the\
    \ correct sum.\n<|/ a tags=php dscore=0 |>\n<| c |>\nThis is wrong. There is no\
    \ \"each time through the loop\". That's what happens in the given code. `if($lst[$x]\
    \ % 2 == 0)` only gets evaluated once per each value of `$x`.\n<|/ c |>\n<| c\
    \ |>\nYes it's wrong. You're right that it only gets evaluated once, but that's\
    \ not what it does here. OP is setting $sum to 0 inside the loop and then immediately\
    \ using it for comparison in addition to incrementing it. That will give incorrect\
    \ results as OP intended.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php", "    $evens\
    \ = array();\n    $odds = array();\n    foreach($lst as $i) {\n        if($i%2==0)\
    \ $evens[] = $i;\n        else $odds[] = $i;\n    }\n    return array_sum($evens)\
    \ + array_sum($odds);\n}\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| c |>\n\
    The function `add()` does not return any value, so how would you use it afterwards?\n\
    <|/ c |>\n<| c |>\nI added an example for how to use the function after it's been\
    \ defined :)\n<|/ c |>\n<| a tags=php,arrays dscore=0 |>\nYou can achieve that\
    \ using array_filter and array_map.\n<code>\n$array1 = [1, 2, 3, 4, 5, 6, 7];\n\
    $array2 = [5, 6, 10, 8, 10];\n", "    return $lst[count($lst) - 1];\n}\n", " \
    \ $result = 0;\n  for ($i = 0; $i < count($lst); $i += 2) {\n    $result += $lst[$i];\n\
    \  }\n  return $result;\n}", "  if (empty($lst)) {\n    return 0;\n  }\n\n  $evenSum\
    \ = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    if (($i % 2) === 0) {\n\
    \      $evenSum += $lst[$i];\n    }\n  }\n\n  return $evenSum;\n}\n</code>\n<|/\
    \ a dscore=0 tags=arrays,php |>\n<| a |>\nI came up with this solution which uses\
    \ array_reduce:\n<code>\n$result = array_reduce($arr, function($acc, $x) {\n \
    \ return $acc + $x % 2 === 0 ? $x + $acc : 0;\n}, 0);\n</code>\nIt loops over\
    \ the array, counts the even values and sums them up. It then returns the result\
    \ of the addition.\n<|/ a tags=arrays,php dscore=0 |>\n<| c |>\n`array_reduce()`\
    \ iterates over all elements of the array which is unnecessary, a simple `foreach`\
    \ loop is enough.\n<|/ c |>\n<| c |>\n.mokadd.im Agreed, I was merely answering\
    \ the question by providing a solution that uses `array_reduce` which might be\
    \ useful for someone else looking for the same thing.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  $evens = array_filter($lst, function ($a) use ($lst) { return\
    \ $a % 2 == 0; });\n  return $evens[count($evens) - 1];\n}\n\n$lst = array(10,\
    \ 3, 9, 5, 1);\necho \"First number: \" . $lst[0] . \"\\n\";\necho \"Last number:\
    \ \" . end($lst) . \"\\n\";\necho \"First even number: \" . add($lst) . \"\\n\"\
    ;\n", "  $sum = 0;\n  foreach ($lst as $index => $value) {\n    if ($index % 2\
    \ == 0) {\n      $sum += $value;\n    }\n  }\n  return $sum;\n}", "   foreach\
    \ ($lst as $key => $value) {\n     if ($key % 2 == 0)\n       $lst[$key] += $value;\n\
    \   }\n   return $lst;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nUse array_sum()\
    \ to add all values of array\n<code>\n$sum = 0;\nforeach ($array as $key => $value)\
    \ {\n  $sum += $value['field'];\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ tags=php,arrays |>\nHere is how you can do that\n<code>\n<?php\n\n$arr = [\n\
    \  [\n    \"id\" => 1,\n    \"name\" => \"xyz\",\n    \"field\" => 0\n  ],\n \
    \ [\n    \"id\" => 2,\n    \"name\" => \"abc\",\n    \"field\" => 1\n  ],\n  [\n\
    \    \"id\" => 3,\n    \"name\" => \"pqr\",\n    \"field\" => 2\n  ],\n];\n$newArr\
    \ = [];\n$sum = [];\nforeach($arr as $value){\n  array_push($sum, $value['field']);\n\
    }\n$newArr = array_filter($sum,function($value){\n  return !is_null($value);\n\
    });\n$newArr = array_map('array_sum', $newArr);\nprint_r($newArr);", "  $even\
    \ = [];\n  foreach ($lst as $value) {\n    if ($value % 2 == 0) {\n      $even[]\
    \ = $value;\n    }\n  }\n  return $even;\n}\n</code>\n<|/ a tags=php,algorithm,arrays\
    \ |>\n<| c |>\nThank you for this suggestion. I am not allowed to use any built\
    \ in functions or loops. I have to do it in an algorithm.\n<|/ c |>\n<| a tags=php,algorithm,arrays\
    \ |>\nYou can use array_filter to filter even numbers and then array_sum to get\
    \ sum of all numbers greater than 0.\n<code>\n<?php", "  $sum = 0;\n  foreach($lst\
    \ as $n) {\n    if($n % 2 == 0) $sum += $n;\n  }\n  return $sum;\n}\n", "    //\
    \ your code here\n    $even = array();\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 2 === 0) {\n            $even[] = $lst[$i];\n        }\n\
    \    }\n    return array_sum($even);\n}\n", "  foreach ($lst as $key => $value)\
    \ {\n    if ($key & 1) {\n      $lst[$key] += $value;\n    }\n  }\n  return $lst;\n\
    }\n", "    $evenIndices = array();\n    foreach($lst as $i => $value) {\n    \
    \    if($i % 2 == 0) {\n            $evenIndices[] = $value;\n        }\n    }\n\
    \    return $evenIndices;\n}", "    $result = 0;\n    $size = count($lst);\n \
    \   $i = 0;\n    while($i < $size) {\n        $result = $result + $lst[$i];\n\
    \        if($i%2==1) {\n            $result = $result + $lst[$i];\n          \
    \  $i++;\n        }\n        $i++;\n    }\n    return $result;\n}\n", "    foreach($lst\
    \ as $key => $value) {\n        if($key & 1) {\n            $lst += $value;\n\
    \        }\n    }\n    return $lst;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array,sum\
    \ |>\n<| c |>\n`array(4){\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(6)\n\
    \  [3]=>\n  int(7)\n}` should return `array(4){\n  [0]=>\n  int(4)\n  [1]=>\n\
    \  int(4)\n  [2]=>\n  int(8)\n  [3]=>\n  int(10)\n}`\n<|/ c |>\n<| c |>\n`array_filter()`\
    \ returns `Array` and not a `list` like `list($even, $odd) = array_filter($lst);`\n\
    <|/ c |>\n<| c |>\nI see, I misunderstood what that function returns. It would\
    \ have returned a list if there were only two elements. I've edited my answer\
    \ to avoid confusion.\n<|/ c |>\n<| c |>\nI understand your `array_filter()` solution,\
    \ but I guess this is much less efficient/readable than the `for` loop.\n<|/ c\
    \ |>\n<| a tags=php,arrays,multidimensional-array,sum |>\nIf you're open to using\
    \ array_map(), and since you only want to add even elements, you could do this:\n\
    <code>\narray_map(function($n) {\n    return ($n % 2 == 0) ? ($n + 1) : $n;\n\
    }, $array);\n</code>\nThis is functionally equivalent to:\n<code>\nforeach($array\
    \ as $n) {\n    if ($n % 2 == 0) {\n        $new[] = ($n + 1);\n    }\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis solution only works if `array_map()` can get\
    \ every element of the array and execute the anonymous function on it. But this\
    \ is not the case. See here: https://3v4l.org/i7lT8\n<|/ c |>\n<| c |>\nI see,\
    \ this is indeed the case. Still, I think it's much better than the `for` loop.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$nums = [1, 2, 3, 10];\n\n$new_nums = [];\n\
    \nforeach ($nums as $num) {\n    if ($num % 2 == 0) {\n        $new_nums[] = $num\
    \ + 1;\n    }\n}\n\nvar_dump($new_nums);\n</code>\nOutput:\n<code>\narray(", " \
    \ return array_sum(array_filter(\n    array_map(\n      'mod',\n      array_slice($lst,\
    \ 0, count($lst) / 2),\n      array_slice($lst, count($lst) / 2)\n    ),\n   \
    \ function ($val) { return $val > 0; }\n  ));\n}\n</code>\n<|/ a tags=php,sum,arrays\
    \ |>\n<| c |>\nI love this! I never thought about this `array_filter` method!\n\
    <|/ c |>\n<| a dscore=4 |>\nFor those interested in a PHP 8 solution using array_map\
    \ and array_filter:\n<code>\n$evenSum = array_sum(\n    array_filter(\n      \
    \  array_map(\n            fn($x) => ($x & 1), // filter odd numbers\n       \
    \     range(0,count($numbers)) // map even numbers\n        ),\n        fn($x)\
    \ => (bool)$x // filter non-boolean results\n    )\n);\n</code>\n<|/ a tags=php,sum,arrays\
    \ |>\n<| c |>\nIt doesn't work for this case: `$numbers = [1, 5, 3, 8, 2];`. Output:\
    \ `10`, where it should output: `7`\n<|/ c |>\n<| c |>\nIt doesn't work for this\
    \ case: `$numbers = [5, 3, 8, 2];`. It outputs `10`, where it should output: `7`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for this case: `$numbers = [5, 3, 8, 5, 8,\
    \ 2];`. It outputs `8`, where it should output: `9`\n<|/ c |>\n<| a |>\nYou can\
    \ use array_walk to accomplish this:\n<code>\n$a = [1, 2, 3, 4];\narray_walk($a,\
    \ function($item, $key) use (&$a) {\n    if ($key % 2 === 0) {\n        $a[$key]\
    \ -= $item;\n    }\n});\n$sum = $a[0];\nforeach ($a as $key => $value) {\n   \
    \ $sum += $value;\n}\necho $sum;\n</code>\nOutputs:\n<code>\n6\n</code>\n<|/ a\
    \ tags=php,sum,arrays dscore=3 |>\n<| c |>\nIt's better to use an array_map to\
    \ filter out all odd numbers first, then reduce them to a sum.\n<|/ c |>\n<| c\
    \ |>\nYes, I agree with this answer. Thanks.\n<|/ c |>\n<| a dscore=3 tags=php,sum,arrays\
    \ |>\n<code>\n$myArray = array(5,4,7,6,8,4);\n", "    $add = 0;\n    foreach ($lst\
    \ as $key => $value) {\n        if ($key % 2 === 0) {\n            $add += $value;\n\
    \        }\n    }\n    return $add;\n}\n", "  $res = 0;\n  for ($i = 0; $i < count($lst);\
    \ $i += 2)\n    $res += $lst[$i];\n  return $res;\n}", "    $sum = 0;\n    foreach\
    \ ($lst as $value) {\n        if ($value & 1) {\n            $sum += $value;\n\
    \        }\n    }\n    return $sum;\n}\n", "\tforeach ($lst as $key => $value)\
    \ {\n\t\tif ($key % 2 == 0)\n\t\t\t$lst[] = $value + $lst[$key + 1];\n\t}\n\t\
    return $lst;\n}\n", "    $evens = array_filter($lst, 'is_int');\n    sort($evens);\n\
    \    return $evens[count($evens) - 2];\n}\n</code>\n<|/ a tags=php dscore=0 |>\n\
    <| a tags=php |>\nYou can use array_search\n<code>\n$myarray = array('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100');\n\
    $value = \"56\";\n\nif(array_search($value,$myarray)) {\n    echo $value;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\nHere is another solution that uses array_intersect():\n\
    <code>\n<?php\n", "    $even = 0;\n    foreach ($lst as $key => $value) {\n  \
    \      $even += ($key % 2);\n    }\n    return $even;\n}\n", "    $even_elements\
    \ = $even_elements_indexed = array();\n\n    foreach ($lst as $key => $val) {\n\
    \        if ($key % 2 == 0) {\n            $even_elements[] = $val;\n        \
    \    $even_elements_indexed[$val] = $key;\n        }\n    }\n\n    return array_sum($even_elements_indexed);\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
