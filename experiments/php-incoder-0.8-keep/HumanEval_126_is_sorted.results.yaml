name: HumanEval_126_is_sorted
language: php
results:
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$len = count($lst);\n\
    \tif ($len < 2) {\n\t\treturn true;\n\t}\n\n\t// Sort the array first\n\tsort($lst);\n\
    \n\t// If there are any duplicates, return false\n\t$count = array_count_values($lst);\n\
    \tforeach ($count as $num => $count) {\n\t\tif ($count > 1) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\n\t// If no duplicates, return true\n\treturn true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2aliqs7.php:42\n\
    Stack trace:\n#0 /tmp/tmpt2aliqs7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpt2aliqs7.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (sizeof($lst)\
    \ == 1) {\n        if ($lst[0] == $lst[0]) {\n            return true;\n     \
    \   } else {\n            return false;\n        }\n    }\n    $count = count($lst)\
    \ - 1;\n    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($value\
    \ == $lst[$key]) {\n            $sum++;\n            if ($sum == $count) {\n \
    \               return true;\n            }\n        } else {\n            $sum\
    \ = 0;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ih66s08.php:44\n\
    Stack trace:\n#0 /tmp/tmp3ih66s08.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3ih66s08.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    foreach ($count as $key => $value) {\n        if ($value !== 1) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0a3b2c9.php:31\n\
    Stack trace:\n#0 /tmp/tmpo0a3b2c9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo0a3b2c9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $num => $nums) {\n        if (count($nums) === 1) {\n\
    \            continue;\n        }\n        if ($sorted[$num] > 1) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo44rq1qb.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo44rq1qb.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo44rq1qb.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo44rq1qb.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo44rq1qb.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo44rq1qb.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo44rq1qb.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo44rq1qb.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo44rq1qb.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo44rq1qb.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo44rq1qb.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo44rq1qb.php:34\nStack trace:\n#0 /tmp/tmpo44rq1qb.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo44rq1qb.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = 0; $i\
    \ < count($lst); $i++) {\n    $flag = false;\n    for ($j = $i + 1; $j < count($lst);\
    \ $j++) {\n      if ($lst[$i] <= $lst[$j]) {\n        $flag = true;\n        break;\n\
    \      }\n    }\n    if (!$flag) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwspyg8a.php:35\n\
    Stack trace:\n#0 /tmp/tmpuwspyg8a.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpuwspyg8a.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $map = array_count_values($lst);\n\
    \    return count($map) == 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1k0vmer9.php:25\n\
    Stack trace:\n#0 /tmp/tmp1k0vmer9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1k0vmer9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (empty($lst))\
    \ {\n        return false;\n    }\n    $hash = array_count_values($lst);\n   \
    \ foreach ($hash as $num => $nums) {\n        if (count($nums) > 1) {\n      \
    \      return false;\n        }\n    }\n    foreach ($hash as $num => $nums) {\n\
    \        if ($num > 1) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a tags=performance,sorting,php |>\n<| c |>\nWhat about\
    \ the fact that `count($hash)` has to run through the entire array? If you could\
    \ tell me how many times `count` has to run through the array, I'll accept your\
    \ answer.\n<|/ c |>\n<| c |>\n`count()` doesn't iterate through the entire array.\
    \ Its only iterating through the values within the array.\n<|/ c |>\n<| c |>\n\
    `count($hash)` does not iterate through all the values in the array, it goes through\
    \ all the values in the array, and for each of those values, it counts how many\
    \ times it occurs in the array.\n<|/ c |>\n<| c |>\nYou're right. I've misread\
    \ the code in the docs. I didn't realize `array_count_values` ran through all\
    \ the values.\n<|/ c |>\n<| a tags=performance,sorting,php |>\nHere's a version\
    \ using array_reduce() that doesn't require you to pass an array to the function:\n\
    <code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe3051coe.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $first = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $first) {\n\
    \            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1kfsxd4.php:32\n\
    Stack trace:\n#0 /tmp/tmpr1kfsxd4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpr1kfsxd4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$set = array_count_values($lst);\n\
    \t$last = array_pop($set);\n\n\treturn ($set[$last] == 1);\n}\n</code>\n<|/ a\
    \ tags=sorting,arrays,php |>\n<| a dscore=2 tags=sorting,arrays,php |>\n<code>\n\
    $arr = array(1,2,3,4,5,5,5,5,6,6,6,6,6,7);\n$res = array();\nforeach ($arr as\
    \ $num) {\n    $count = array_search($num,$res);\n    if ($count !== FALSE) {\n\
    \         $res[$count]++;\n    } else {\n         $res[] = $num;\n    }\n}\n</code>\n\
    $res contains an array containing the number of occurrences of each number.\n\
    <|/ a |>\n<| c |>\nThis will only work correctly if every number is unique. It\
    \ will fail for 1,2,3\n<|/ c |>\n<| c |>\nThanks mate for the correction! I have\
    \ edited my answer\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqe13jgbk.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    return is_sorted_helper($lst,\
    \ [], 0, count($lst) - 1);\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_sorted_helper()\
    \ in /tmp/tmp5zu7o2rh.php:15\nStack trace:\n#0 /tmp/tmp5zu7o2rh.php(19): is_sorted(Array)\n\
    #1 /tmp/tmp5zu7o2rh.php(23): candidate(Array)\n#2 /tmp/tmp5zu7o2rh.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5zu7o2rh.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $counts = array_count_values($lst);\n\
    \    if ($counts == array_fill_keys(array_keys($counts), 1)) return false;\n \
    \   return array_keys($counts) == range(0, count($counts)-1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjme9_rem.php:25\n\
    Stack trace:\n#0 /tmp/tmpjme9_rem.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjme9_rem.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted_array =\
    \ array_count_values($lst);\n  $duplicates = array_keys($sorted_array);\n  return\
    \ count($duplicates) < count($lst);\n}\n\n$arr = [1,2,3,2,3,4,5,5,6,6];\nprint_r(is_sorted($arr));\n\
    </code>\n<|/ a dscore=4 tags=php,sorting,algorithm |>\n<| c |>\n`array_count_values`\
    \ does the trick. Your function will return a false negative for arrays that only\
    \ have unique values -- e.g., `[1,2,2,3,4,5]`.\n<|/ c |>\n<| c |>\nThe idea of\
    \ checking for duplicates works well here. It makes it more efficient. However,\
    \ it does introduce one more issue: It makes it impossible to detect a duplicate\
    \ in a \"stable sort\" (like PHP's sort does) because you cannot know whether\
    \ the second and subsequent items are already sorted or unsorted.\n<|/ c |>\n\
    <| c |>\nGood point on \"stable sort\" -- I updated the answer to include a solution\
    \ that doesn't rely on sorting algorithms that make sorting stable.  It's still\
    \ O(N) but doesn't require any sorting algorithm that makes it stable.\n<|/ c\
    \ |>\n<| c |>\nNice and simple! It might be worth mentioning that the sort is\
    \ also O(n log n) where n is the number of items in the array.  So if your array\
    \ has more than half a million items, it will take a long time to sort.\n<|/ c\
    \ |>\n<| c |>\nI guess I should have mentioned that I'm working in PHP :)\n<|/\
    \ c |>\n<| a tags=php,sorting,algorithm |>\nHere's an answer that doesn't rely\
    \ on sorting algorithms that make sorting stable.\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx825m2k5.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $seen = [];\n    foreach ($lst as $item) {\n        if (in_array($item, $seen))\
    \ {\n            $sorted = false;\n            break;\n        }\n        $seen[]\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpalyns02q.php:34\n\
    Stack trace:\n#0 /tmp/tmpalyns02q.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpalyns02q.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $num => $freq) {\n        if ($freq == 1) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgel7dqi.php:31\n\
    Stack trace:\n#0 /tmp/tmpmgel7dqi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmgel7dqi.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    foreach($count as $cnt => $v) {\n        if ($cnt > 1) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtb4xyz3.php:29\n\
    Stack trace:\n#0 /tmp/tmpbtb4xyz3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbtb4xyz3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach($lst as\
    \ $key => $val) {\n        if ($val == $lst[$key-1]) {\n            unset($lst[$key]);\n\
    \        } else {\n            break;\n        }\n    }\n    return (count($lst)\
    \ == 0);\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2n1rkna.php:30\n\
    Stack trace:\n#0 /tmp/tmpt2n1rkna.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpt2n1rkna.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (empty($lst)\
    \ || count($lst) === 1) {\n        return false;\n    }\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $cur) {\n        if ($cur == $last) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Just tested your implementation and it works great for my purposes also.\n<|/\
    \ c |>\n<| a dscore=1 |>\nMy answer to the question \"does it exist a function\
    \ that determines if an array is sorted\", where you can pass a callback function\
    \ to the function is_sorted():\n<code>\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp18dwg9ph.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $cnt = 0;\n  \
    \  $dups = array();\n    foreach ($lst as $x) { $cnt++; $dups[$x] = $cnt; }\n\
    \    sort($lst);\n    $cnt = 0;\n    foreach ($lst as $x) { if ($cnt < $dups[$x])\
    \ return false; $cnt++; }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tdsut40.php:29\n\
    Stack trace:\n#0 /tmp/tmp3tdsut40.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3tdsut40.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted_array =\
    \ array_count_values($lst);\n  foreach ($sorted_array as $key => $value) {\n \
    \   if ($sorted_array[$key] < 2) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou don't need to check all numbers\
    \ in `$lst`. You can just check if there is a number that appear once (or more\
    \ times) in the list. Thus you can just go through `$lst` and count how many times\
    \ each number appears.\n<|/ c |>\n<| a tags=sorting,arrays,php |>\nI created a\
    \ function which sorts an array of objects by an attribute (property) you define.\
    \ Here, I used the string property name \"name\".\n<code>\n<?php \n\n$users =\
    \ [\n    ['name' => 'foo', 'username' => 'john'],\n    ['name' => 'bar', 'username'\
    \ => 'bob'],\n    ['name' => 'baz', 'username' => 'frank'],\n];\n\n$users = array_column($users,\
    \ null, 'name');\nsort($users);\n\necho json_encode($users);\n\n/* result:\n \
    \   [\n      {\n        \"name\": \"bar\",\n        \"username\": \"bob\"\n  \
    \    },\n      {\n        \"name\": \"foo\",\n        \"username\": \"john\"\n\
    \      },\n      {\n        \"name\": \"baz\",\n        \"username\": \"frank\"\
    \n      }\n    ]\n*/\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI think you mixed up\
    \ `array_column` and `array_reduce` here? Also, this will give you the list of\
    \ users, not the sorted one..\n<|/ c |>\n<| a dscore=0 tags=sorting,arrays,php\
    \ |>\nThere are a few different approaches you can take to solve this problem.\
    \ I would recommend the following:\n<code>\n/**\n * Sort an array of objects by\
    \ any property\n *\n * array $array Array to sort\n * string $property Property\
    \ to sort by\n * string $orderBy ASC or DESC\n * array\n */\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb3frotti.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (empty($lst))\
    \ {\n        return false;\n    }\n    $last_val = array_shift($lst);\n    if\
    \ ($last_val != $last_val) {\n        return false;\n    }\n    $count = count($lst);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if ($lst[$i] > $last_val) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9a3wnru.php:36\n\
    Stack trace:\n#0 /tmp/tmpz9a3wnru.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpz9a3wnru.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = false;\n\
    \    foreach($lst as $val) {\n        if ($val != $sorted) {\n            $sorted\
    \ = true;\n        } else {\n            $sorted = false;\n            break;\n\
    \        }\n    }\n    return $sorted;\n}\n\n$list = array(1, 2, 3, 4, 3, 6, 5,\
    \ 3);\n$is_sorted = is_sorted($list);\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbajx4qg0.php:36\n\
    Stack trace:\n#0 /tmp/tmpbajx4qg0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbajx4qg0.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_shift($lst);\n    foreach ($lst as $number) {\n        $sorted\
    \ = false;\n        if ($number != $last) {\n            $sorted = true;\n   \
    \     }\n        $last = $number;\n    }\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitq1su85.php:33\n\
    Stack trace:\n#0 /tmp/tmpitq1su85.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpitq1su85.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted_array\
    \ = array_count_values($lst);\n    $num_unique_vals = array_count_values($sorted_array);\n\
    \    return $sorted_array === $num_unique_vals;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmrv0cx_u.php:24\n\
    Stack trace:\n#0 /tmp/tmpmrv0cx_u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmrv0cx_u.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $last = count($lst)\
    \ - 1;\n  for ($i = 0; $i < $last; $i++) {\n    for ($j = $i + 1; $j < $last;\
    \ $j++) {\n      if ($lst[$i] == $lst[$j]) {\n        return false;\n      }\n\
    \    }\n  }\n  return true;\n}\n</code>\n<|/ a tags=php,sorting dscore=1 |>\n\
    <| a |>\nHere's an O(n) solution. It involves counting the number of consecutive\
    \ occurrences of each number. Once those counts equal the total number then they're\
    \ sorted.\n<code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4cgzvfno.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Find any duplicate\
    \ number\n    $duplicates = [];\n    foreach ($lst as $i => $el) {\n        if\
    \ (array_search($el, $duplicates) !== false) {\n            return false;\n  \
    \      }\n        $duplicates[] = $el;\n    }\n    // If only 1 duplicate number\
    \ found, return True\n    return count($duplicates) === 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizq2y5u9.php:33\n\
    Stack trace:\n#0 /tmp/tmpizq2y5u9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpizq2y5u9.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $len = count($lst)\
    \ - 1;\n    $first = $lst[0];\n    for ($i = 0; $i <= $len; $i++) {\n        $currVal\
    \ = $lst[$i];\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($currVal\
    \ >= $lst[$j]) {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnak8qv9.php:43\n\
    Stack trace:\n#0 /tmp/tmphnak8qv9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphnak8qv9.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (empty($lst))\
    \ {\n        return false;\n    }\n\n    $num_count = count($lst) - 1;\n    $last_num\
    \ = end($lst);\n    $last_key = array_search($last_num, $lst);\n    $is_sorted\
    \ = true;\n\n    foreach ($lst as $num => $key) {\n        if ($key >= $last_key)\
    \ {\n            $is_sorted = false;\n            break;\n        }\n    }\n\n\
    \    return $is_sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8yww7un0.php:39\n\
    Stack trace:\n#0 /tmp/tmp8yww7un0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8yww7un0.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $arr = array_count_values($lst);\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > 1) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp839datcx.php:31\n\
    Stack trace:\n#0 /tmp/tmp839datcx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp839datcx.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    // If all values occur only once, sort should be ascending\n    if (count($count)\
    \ == 1) {\n        return array_keys($count) === range(0, count($count) - 1);\n\
    \    }\n    // If there are repeated values but not in order, return False\n \
    \   else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1i94fv_.php:31\n\
    Stack trace:\n#0 /tmp/tmpr1i94fv_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr1i94fv_.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if ($lst == array_count_values($lst))\
    \ {\n        $res = true;\n    } else {\n        $res = false;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnh7p1jm3.php:28\n\
    Stack trace:\n#0 /tmp/tmpnh7p1jm3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnh7p1jm3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  // check list size\n\
    \  if (sizeof($lst) == 0 || count($lst) == 0) {\n    return false;\n  }\n  //\
    \ check for duplicate values\n  $set = array();\n  for ($i = 0; $i < sizeof($lst);\
    \ $i++) {\n    if (array_key_exists($lst[$i], $set)) {\n      return false;\n\
    \    }\n    $set[] = $lst[$i];\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9i6369c_.php:37\n\
    Stack trace:\n#0 /tmp/tmp9i6369c_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp9i6369c_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    sort($lst);\n\
    \    $lst_count = count($lst);\n    if ($lst_count == 1) {\n        return true;\n\
    \    }\n    // If there are more than 1 duplicate of the same number,\n    //\
    \ this array must not already be sorted. Otherwise, check\n    // the original\
    \ array and sort it.\n    $counts = array_count_values($lst);\n    $counts_keys\
    \ = array_keys($counts);\n    return ($lst_count - 1 == count($counts_keys));\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj8dqh06.php:34\n\
    Stack trace:\n#0 /tmp/tmpdj8dqh06.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdj8dqh06.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ === 1) {\n        return $lst[0] === $lst[count($lst) - 1];\n    }\n\n    $first\
    \ = $lst[0];\n    foreach ($lst as $val) {\n        if ($val == $first) {\n  \
    \          continue;\n        }\n        if ($val < $first) {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2iy9sln.php:39\n\
    Stack trace:\n#0 /tmp/tmpy2iy9sln.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpy2iy9sln.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Check for empty\
    \ list\n    if (empty($lst)) {\n        return true;\n    }\n    // Get list of\
    \ all unique values\n    $values = array_unique($lst);\n    // Check to make sure\
    \ all values are not the same\n    $same = count($values) === count(array_unique($lst));\n\
    \    // If all values are the same, return True\n    return $same;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8unwbny.php:34\n\
    Stack trace:\n#0 /tmp/tmph8unwbny.php(47): test()\n#1 {main}\n  thrown in /tmp/tmph8unwbny.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if ($lst[0] ==\
    \ $lst[$lst->length - 1]) {\n        return true;\n    }\n    $count = 0;\n  \
    \  $first = $lst[0];\n    for ($i = 0; $i < $lst->length; $i++) {\n        if\
    \ ($lst[$i] == $first) {\n            $count++;\n            if ($count > 1) {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29s4q2iz.php:38\n\
    Stack trace:\n#0 /tmp/tmp29s4q2iz.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp29s4q2iz.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    $keys = array_keys($count);\n    $last = array_pop($keys);\n    foreach ($keys\
    \ as $i) {\n        if ($count[$i] > 1) {\n            return false;\n       \
    \ }\n    }\n    return ($last == $lst[0]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72tf2g7y.php:32\n\
    Stack trace:\n#0 /tmp/tmp72tf2g7y.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp72tf2g7y.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $count = count($lst);\n\
    \  $i = 0;\n\n  for ($i = 1; $i < $count; $i++) {\n    if ($lst[$i] <= $lst[$i\
    \ - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyvl7oh2.php:42\n\
    Stack trace:\n#0 /tmp/tmppyvl7oh2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppyvl7oh2.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $arr_count = array_count_values($lst);\n\
    \    $keys = array_keys($arr_count);\n    $arr_count = array_flip($arr_count);\n\
    \n    for ($i = 0; $i < count($keys); $i++) {\n        if ($arr_count[$keys[$i]]\
    \ > 1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvv77a9e7.php:34\n\
    Stack trace:\n#0 /tmp/tmpvv77a9e7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvv77a9e7.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    return is_sorted($lst,\
    \ false);\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ < 2) return true;\n    $last_id = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] == $last_id) {\n            $last_id = $lst[$i\
    \ - 1];\n        } else {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like how this does not require\
    \ recursion.\n<|/ c |>\n<| c |>\nWhy do you need recursion for this? Isn't it\
    \ simpler to compare first and last element, then if they match, check if first\
    \ and last elements are the same?\n<|/ c |>\n<| c |>\nNot really. Because it is\
    \ *not* possible to know whether or not a list is sorted. `is_sorted` will happily\
    \ accept `[1, 2, 3, 4, 5]` but reject `[1, 3, 2, 4, 5]`. This is not the case\
    \ for `is_sorted([1, 2, 3, 4, 5])`. So it must be able to be applied multiple\
    \ times. But yes, if you already know that it is sorted, then you do not need\
    \ recursion. Recursion is a useful tool, but here it is not the right tool for\
    \ this job.\n<|/ c |>\n<| c |>\nNot to mention that this answer does not actually\
    \ answer the question \"is it sorted?\" but rather the question \"is *any* list\
    \ sorted?\" which is not the same as \"is it sorted?\". Hence this answer should\
    \ not be accepted.\n<|/ c |>\n<| c |>\nPlease don't use [code-only answers](https://meta.stackoverflow.com/a/298811/2666887).\
    \ Include an explanation of how your code solves the problem and why it's a good\
    \ idea.\n<|/ c |>\n<| a |>\nThe only solution I can think of would be to iterate\
    \ over the list until it stops changing.  For example:\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc_psbuz8.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $hash = [];\n\
    \    foreach ($lst as $key => $value) {\n        if (!isset($hash[$value])) {\n\
    \            $hash[$value] = true;\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6ydu29r.php:29\n\
    Stack trace:\n#0 /tmp/tmpi6ydu29r.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpi6ydu29r.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ === 0) {\n\t\treturn true;\n\t}\n\t$last = array_pop($lst);\n\t$is_sorted =\
    \ true;\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($lst[$i]\
    \ == $last) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ($lst[$i] < $last) {\n\t\t\t$is_sorted\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $is_sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1h3p4sg.php:39\n\
    Stack trace:\n#0 /tmp/tmpo1h3p4sg.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpo1h3p4sg.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_count_values($lst);\n\
    \t$dupes = array_keys($arr);\n\tif (count($dupes) > 1) {\n\t\treturn false;\n\t\
    } else {\n\t\treset($arr);\n\t\t$val = current($arr);\n\t\t$count = 0;\n\t\twhile\
    \ ($count < count($arr)) {\n\t\t\tif ($arr[$val] > 1) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\t$count++;\n\t\t\t\tnext($arr);\n\t\t\t\t$val = current($arr);\n\
    \t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4m3q4o3m.php:41\n\
    Stack trace:\n#0 /tmp/tmp4m3q4o3m.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4m3q4o3m.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $keys = array_count_values($lst);\n\
    \  if (count($keys) > 1) {\n    return false;\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp923aed4t.php:28\n\
    Stack trace:\n#0 /tmp/tmp923aed4t.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp923aed4t.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tsort($lst);\n\t\
    $cnt = array_count_values($lst);\n\tforeach($cnt as $k=>$v) {\n\t\tif($cnt > 1)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0cvhg_p.php:30\n\
    Stack trace:\n#0 /tmp/tmpy0cvhg_p.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpy0cvhg_p.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $elem) {\n        if ($elem != $lst[$elem - 1]) {\n    \
    \        $sorted = false;\n            break;\n        }\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm87th9lt.php:30\n\
    Stack trace:\n#0 /tmp/tmpm87th9lt.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpm87th9lt.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $len = count($lst);\n\
    \    if ($len < 2) {\n        return true;\n    }\n\n    // Build a map of duplicates\n\
    \    // This map has (# of duplicates, position of duplicate in list)\n    $map\
    \ = array();\n    for ($i = 1; $i < $len; $i++) {\n        $key = $lst[$i];\n\
    \        if (isset($map[$key])) {\n            $map[$key]++;\n        } else {\n\
    \            $map[$key] = 1;\n        }\n    }\n\n    // If the number of duplicates\
    \ is not even, return False\n    if ($len % 2 != 0) {\n        return false;\n\
    \    }\n\n    // If there is only one number in the list, it is sorted\n    return\
    \ $len == 1 && $map[1] == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpejfrka20.php:47\n\
    Stack trace:\n#0 /tmp/tmpejfrka20.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpejfrka20.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = count($lst)\
    \ - 1; $i > 0; $i--) {\n    if ($lst[$i] == $lst[$i - 1]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1o12wf9i.php:30\n\
    Stack trace:\n#0 /tmp/tmp1o12wf9i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1o12wf9i.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach ($lst\
    \ as $i => $x) {\n        if ((($i-1) > -1) &&\n            ($lst[$i-1] == $x))\n\
    \            return false;\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zne3ved.php:29\n\
    Stack trace:\n#0 /tmp/tmp2zne3ved.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2zne3ved.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted_array\
    \ = array_slice($lst,0,count($lst));\n    sort($sorted_array);\n    return $sorted_array\
    \ == $lst;\n}\n\n$test = [1, 2, 3, 4, 5]; \nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u6_6cee.php:35\n\
    Stack trace:\n#0 /tmp/tmp8u6_6cee.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8u6_6cee.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  foreach ($lst as\
    \ $key => $val) {\n    for ($i = 0; $i < count($lst) -1; $i++) {\n      if ($lst[$i]\
    \ == $lst[$i+1]) {\n        $count ++;\n      }\n    }\n  }\n\n  return $count\
    \ >= count($lst);\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64w266x0.php:30\n\
    Stack trace:\n#0 /tmp/tmp64w266x0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp64w266x0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $count = array_count_values($lst);\n\
    \  foreach ($count as $num => $numCount) {\n    if ($numCount > 1) {\n      return\
    \ false;\n    }\n  }\n  foreach ($lst as $key => $val) {\n    if ($val != $key)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxht0ick6.php:34\n\
    Stack trace:\n#0 /tmp/tmpxht0ick6.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxht0ick6.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (empty($lst))\
    \ {\n        echo \"empty list\\n\";\n        return false;\n    }\n    // If\
    \ there are no duplicate numbers, return true.\n    // If there is more than one\
    \ duplicate number, return false.\n    // If there's only one duplicate number,\
    \ then they are sorted.\n    $arr = array_count_values($lst);\n    if (count($arr)\
    \ > 1) {\n        echo \"multiple duplicates\\n\";\n        return false;\n  \
    \  }\n    if (count($arr) == 1) {\n        echo \"one duplicate\\n\";\n      \
    \  return true;\n    }\n    // If there's only one number in list, it's sorted.\n\
    \    sort($lst);\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "one duplicate\nmultiple duplicates\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_fyig5qv.php:42\nStack trace:\n#0 /tmp/tmp_fyig5qv.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_fyig5qv.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $is_sorted = false;\n\
    \    $dup_count = count(array_count_values($lst));\n    if ($dup_count > 1) {\n\
    \        $is_sorted = false; \n    } else {\n        $is_sorted = true;\n    }\n\
    \    return $is_sorted;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nPlease explain\
    \ how your code works. Thanks!\n<|/ c |>\n<| c |>\nHi Nick, I have added some\
    \ comments in the code so you can understand better. Hope it helps :)\n<|/ c |>\n\
    <| a tags=php |>\nThe simplest and most efficient way of sorting an array using\
    \ PHP would be:\n<code>\nusort($array, function($a, $b) {\n    return $a - $b;\n\
    });\n</code>\nIt uses no loops, loops just to sort. No other comparisons are necessary.\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer as it is more optimized.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer as it uses native array\
    \ functions instead of implementing a custom sorting algorithm. Also this works\
    \ well for arrays of different types (string, int, float, arrays, ...).\n<|/ c\
    \ |>\n<| c |>\nThis answer does work, but it doesn't answer the question.\n<|/\
    \ c |>\n<| c |>\nThis is the accepted answer. Thanks!\n<|/ c |>\n<| a tags=php\
    \ dscore=5 |>\nA simple solution would be to sort the array and check the previous\
    \ values with the current values using an if:\n<code>\n$array = array(5, 4, 3,\
    \ 2, 1);\nsort($array);\n$is_sorted = true;\nfor ($i = 0; $i < count($array);\
    \ $i++) {\n    if ($array[$i] !== $array[$i - 1]) {\n        $is_sorted = false;\n\
    \        break;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution is best in\
    \ my opinion. Works perfectly for me.\n<|/ c |>\n<| c |>\nI believe that `foreach`\
    \ will loop it for you\n<|/ c |>\n<| c |>\nThis approach is very good but `sort($array);`\
    \ takes some time to execute because it uses quicksort.\n<|/ c |>\n<| c |>\nNot\
    \ necessarily, PHP already sorts the array in place, thus no additional memory\
    \ allocation is required (only a pointer to an array gets copied).\n<|/ c |>\n\
    <| c |>\nThis approach doesn't work. Try it\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqg42fthr.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach ($lst\
    \ as $i => $e) {\n        $prev = $e; // store the previous element\n        for\
    \ ($j = $i + 1; $j < count($lst); $j++) {\n            if ($e == $lst[$j]) {\n\
    \                return true; // if the current element matches return the flag\n\
    \            }\n            if ($prev < $lst[$j]) {\n                return false;\
    \ // if the previous element has already exceeded the current element, return\
    \ false\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqcg8vgn.php:35\n\
    Stack trace:\n#0 /tmp/tmpzqcg8vgn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpzqcg8vgn.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  foreach ($lst as\
    \ $i => $elt) {\n    $previous_elt = $lst[$i - 1];\n    if ($previous_elt == $elt)\
    \ continue;\n\n    $prev_cmp = substr_compare($previous_elt, $elt, 0, 1);\n  \
    \  if ($prev_cmp == 0) {\n      return true;\n    }\n    if ($prev_cmp < 0) return\
    \ false;\n  }\n\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkyr6leh.php:34\n\
    Stack trace:\n#0 /tmp/tmphkyr6leh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmphkyr6leh.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = [];\n\
    \    $i = 0;\n    foreach ($lst as $k => $v) $count[$k]++;\n    foreach ($count\
    \ as $k => $v) if ($v === 1) return false;\n    do {\n        $j = 0;\n      \
    \  foreach ($count as $k => $v) if ($v > 1) return false;\n        $j++;\n   \
    \ } while (++$i < $j);\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeijm43lg.php:32\n\
    Stack trace:\n#0 /tmp/tmpeijm43lg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpeijm43lg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ < 1) return false;\n    $prev = $lst[0];\n    foreach ($lst as $num) if ($num\
    \ != $prev) return false;\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66ylg8yh.php:27\n\
    Stack trace:\n#0 /tmp/tmp66ylg8yh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp66ylg8yh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  return is_array(($lst))\
    \ ? $lst : false;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3xazzpd.php:23\n\
    Stack trace:\n#0 /tmp/tmpi3xazzpd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi3xazzpd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $last = array_pop($lst);\n\
    \  foreach ($lst as $n) {\n    if ($n <= $last) return false;\n    $last = $n;\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_syyjxdz.php:29\n\
    Stack trace:\n#0 /tmp/tmp_syyjxdz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_syyjxdz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  // Find duplicates\
    \ first\n  $dupes = array();\n  for ($i = 0; $i < count($lst); $i++) {\n    if\
    \ (in_array($lst[$i], $dupes)) {\n      return false;\n    }\n    $dupes[] = $lst[$i];\n\
    \  }\n\n  // Remove duplicates, sort and compare against original.\n  $dupes =\
    \ array_unique($dupes);\n  if (is_array($dupes) && count($dupes) === 0) {\n  \
    \  return true;\n  }\n\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2sabo7p.php:38\n\
    Stack trace:\n#0 /tmp/tmpc2sabo7p.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpc2sabo7p.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $set = array_count_values($lst);\n\
    \    foreach($set as $count => $x) {\n        if ($x > 1) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuvfzmky.php:31\n\
    Stack trace:\n#0 /tmp/tmpfuvfzmky.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfuvfzmky.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ < 2) return true;\n    $a = array_count_values($lst);\n    $aKeys = array_keys($a);\n\
    \    foreach ($aKeys as $k) {\n        if ($a[$k] == count($lst) - 1) {\n    \
    \        return true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8vh4b8ha.php:32\n\
    Stack trace:\n#0 /tmp/tmp8vh4b8ha.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8vh4b8ha.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$nums = array_count_values($lst);\n\
    \tif (count($nums) === 1)\n\t\treturn false;\n\tforeach ($nums as $num => $count)\n\
    \t\tif ($count > 1)\n\t\t\treturn false;\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm5ob49j.php:29\n\
    Stack trace:\n#0 /tmp/tmpwm5ob49j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwm5ob49j.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $last = null;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($last !== null && $lst[$i]\
    \ == $last) {\n            return false;\n        }\n        $last = $lst[$i];\n\
    \    }\n    return true;\n}\n</code>\nTo test this function on some different\
    \ inputs, I wrote the following program that prints out the numbers in descending\
    \ order with some output for various edge cases:\n<code>\n<?php\n$numbers = [\n\
    \    1,\n    2,\n    5,\n    8,\n    11,\n    15,\n    20,\n    30,\n    40,\n\
    \    51,\n    60,\n    70,\n    80,\n    89,\n    92,\n    100,\n    101,\n  \
    \  102,\n    103,\n    106,\n    107,\n    108,\n    109,\n    111,\n    113,\n\
    \    115,\n    120,\n    121,\n    122,\n    124,\n    126,\n    128,\n    129,\n\
    \    130,\n    132,\n    135,\n    136,\n    137,\n    138,\n    139,\n    140,\n\
    \    141,\n    143,\n    144,\n    146,\n    147,\n    148,\n    150,\n    151,\n\
    \    152,\n    154,\n    155,\n    157,\n    158,\n    159,\n    160,\n    161,\n\
    \    162,\n    164,\n    165,\n    167,\n    169,\n    170,\n    171,\n    172,\n\
    \    173,\n    174,\n    175,\n    176,\n    177,\n    178,\n    179,\n    181,\n\
    \    182,\n    183,\n    184,\n    185,\n    186,\n    188,\n    189,\n    191,\n\
    \    192,\n    193,\n    195,\n    196,\n    197,\n    198,\n    199,\n    200,\n\
    \    201,\n    202,\n    203,\n    204,\n    205,\n    206,\n    207,\n    208,\n\
    \    209,\n    210,\n    211,\n    212,\n    213,\n    215,\n    216,\n    217,\n\
    \    218,\n    220,\n    221,\n    222,\n    223,\n    \nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp123whcmg.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if ($lst) {\n  \
    \  $count = count($lst);\n    if ($count > 1) {\n      $seen = [];\n      foreach\
    \ ($lst as $key => $value) {\n        $seen[$value] = $key;\n      }\n      $sorted\
    \ = true;\n      foreach ($lst as $key => $value) {\n        $sorted = false;\n\
    \        if (! isset($seen[$value])) {\n          break;\n        }\n      }\n\
    \      if ($sorted) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotdkt12n.php:42\n\
    Stack trace:\n#0 /tmp/tmpotdkt12n.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpotdkt12n.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach ($lst\
    \ as $value) {\n        if ($value != $lst[count($lst) - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrvvk7h7.php:29\n\
    Stack trace:\n#0 /tmp/tmpjrvvk7h7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpjrvvk7h7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $last = array_pop($lst);\n\
    \  foreach ($lst as $current) {\n    if ($last > $current) {\n      return false;\n\
    \    }\n    $last = $current;\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsybqfmn.php:31\n\
    Stack trace:\n#0 /tmp/tmpwsybqfmn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwsybqfmn.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    return is_array($lst)\
    \ && count(array_unique($lst)) == count($lst);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyq_6scj.php:25\n\
    Stack trace:\n#0 /tmp/tmpeyq_6scj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpeyq_6scj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Initialize\
    \ an array to hold all the unique numbers\n    $nums = array();\n    // Count\
    \ the number of occurrences of each unique number\n    foreach ($lst as $num)\
    \ {\n        $nums[$num] = isset($nums[$num]) ? $nums[$num] + 1 : 1;\n    }\n\n\
    \    // If all of the numbers are the same, then the list is sorted\n    // and\
    \ has 1 or more duplicates.\n    // If there are more than 1 duplicates, then\
    \ we have to\n    // be more careful because we could be sorting an unsorted list\n\
    \    if (count($nums) == 1) {\n        return true;\n    }\n\n    // Otherwise,\
    \ there are some unsorted list elements...\n    // Initialize two pointers\n \
    \   $idx = 0;\n    $last = count($lst) - 1;\n    foreach ($lst as $num => $count)\
    \ {\n        // If the element we are looking at is greater than our current\n\
    \        // element, swap them and advance our current pointer ahead\n       \
    \ if ($idx > $last || ($count == $nums[$lst[$idx]])) {\n            list($lst[$idx],\
    \ $lst[$last]) = array($lst[$last], $lst[$idx]);\n            $last = count($lst)\
    \ - 1;\n            $idx++;\n        }\n    }\n\n    // If we have not returned\
    \ True above, then the list is not sorted.\n    // If we have returned True above,\
    \ but the list IS sorted, then\n    // that means one of the numbers in the list\
    \ appears more than once.\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays dscore=1 |>\nHere is an example:\n<code>\n$array = array(\n\
    \    'test' => 1,\n    'test' => 2,\n    'test' => 3,\n    'test' => 4,\n    'test'\
    \ => 5,\n    'test' => 6\n);\n\n$array_unique = array_unique($array);\n$array_unique_count\
    \ = count($array_unique);\n$array_unique_count_zero = count(array_filter($array_unique,\
    \ function($item) {\n    return $item == 0;\n}));\n\nif ($array_unique_count ==\
    \ $array_unique_count_zero) {\n    echo 'all numbers are 0';\n}\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_jhu3q0m.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Sort the list\n\
    \    sort($lst);\n    // Use array_search to check for duplicates\n    return\
    \ array_search($lst[0], $lst) !== false;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=arrays,php,sorting |>\n<code>\n$unsorted = [\n    'cats',\n    'dogs',\n\
    \    'rabbits',\n    'cats',\n    'rabbits',\n    'cats',\n    'dogs'\n];\nsort($unsorted);\n\
    \n$unique = array_unique($unsorted);\n\nvar_dump($unique);\n</code>\nOutput:\n\
    <code>\narray(5) {\n  [0]=>\n  string(4) \"cats\"\n  [1]=>\n  string(5) \"dogs\"\
    \n  [2]=>\n  string(6) \"rabbits\"\n  [3]=>\n  string(4) \"cats\"\n  [4]=>\n \
    \ string(5) \"dogs\"\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe OP did not ask\
    \ for an array_unique function.\n<|/ c |>\n<| c |>\nYes, I didn't see that detail\
    \ in my comment to the OP.\n<|/ c |>\n<| a |>\nYou can use array_unique function\n\
    <code>\n<?php\n$array = array(1,1,2,3,1,2,3); \nprint_r(array_unique($array));\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp007w41vh.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach($lst as\
    \ $k => $v) {\n        if($k != $lst[$k-1]) return false;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37k7xiwr.php:37\n\
    Stack trace:\n#0 /tmp/tmp37k7xiwr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp37k7xiwr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (!is_array($lst))\
    \ {\n        return false;\n    }\n    $counts = array_count_values($lst);\n \
    \   arsort($counts);\n    return array_keys($counts) === $lst;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2y26oc8.php:30\n\
    Stack trace:\n#0 /tmp/tmpl2y26oc8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpl2y26oc8.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $uniq = array_unique($lst);\n\
    \  if (count($uniq) > count($lst)) return false;\n  foreach ($lst as $key => $val)\
    \ {\n    if ($key > $val) return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6fomu93.php:30\n\
    Stack trace:\n#0 /tmp/tmpv6fomu93.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv6fomu93.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = 1; $i\
    \ <= count($lst); $i++) {\n    if ($lst[$i] == $lst[$i - 1]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn5p4o25.php:30\n\
    Stack trace:\n#0 /tmp/tmppn5p4o25.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppn5p4o25.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  // Sort and check\
    \ if it's equal to itself.\n  return is_sorted($lst) === sort($lst);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tforeach ($lst as $val){\n\t\t$sorted = ($val == $sorted);\n\t}\n\treturn $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3i_1ueqk.php:29\n\
    Stack trace:\n#0 /tmp/tmp3i_1ueqk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3i_1ueqk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $len = count($lst);\n\
    \  \n  for ($i = 0; $i < $len - 1; $i++) {\n    if ($lst[$i] == $lst[$i+1]) {\n\
    \      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1a7c3fzt.php:33\n\
    Stack trace:\n#0 /tmp/tmp1a7c3fzt.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1a7c3fzt.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    return is_array($lst)\
    \ && array_unique($lst) === $lst;\n}\n$arr = array(\n    2, \n    2, \n    1,\
    \ \n    3, \n    1, \n    6, \n    6, \n    2, \n    5, \n    1, \n    8, \n \
    \   3, \n    2, \n    9, \n    3, \n    1, \n    4, \n    2, \n    2, \n    3,\
    \ \n    2, \n    3, \n    5, \n    1, \n    5, \n    1, \n    8, \n    4, \n \
    \   9, \n    2, \n    1, \n    8, \n    3, \n    1, \n    1, \n    9, \n    3,\
    \ \n    2, \n    1, \n    2, \n    1, \n    2, \n    1, \n    9, \n    3, \n \
    \   1, \n    1, \n    9, \n    2, \n    8, \n    4, \n    2, \n    9, \n    4,\
    \ \n    2, \n    1, \n    4, \n    2, \n    1, \n    2, \n    1, \n    8, \n \
    \   3, \n    1, \n    1, \n    9, \n    3, \n    2, \n    1, \n    2, \n    1,\
    \ \n    2, \n    1, \n    9, \n    3, \n    1, \n    1, \n    9, \n    2, \n \
    \   8, \n    4, \n    2, \n    9, \n    4, \n    2, \n    1, \n    4, \n    2,\
    \ \n    1, \n    2, \n    1, \n    8, \n    3, \n    1, \n    1, \n    9, \n \
    \   3, \n    2, \n    1, \n    2, \n    1, \n    2, \n    1, \n    9, \n    3,\
    \ \n    1, \n    1, \n    9, \n    2, \n    8, \n    4, \n    2, \n    9, \n \
    \   4, \n    2, \n    1, \n    4, \n    2, \n    1, \n    2, \n    1, \n    8,\
    \ \n    3, \n    1, \n    1, \n    9, \n    3, \n    2, \n    1, \n    2, \n \
    \   1, \n    2, \n    1, \n    9, \n    3, \n    1, \n    1, \n    9, \n    2,\
    \ \n    8, \n    4, \n    2, \n    9, \n    4, \n    2, \n    1, \n    4, \n \
    \   2, \n    1, \n    2, \n    1, \n    8, \n    3, \n    1, \n    1, \n    9,\
    \ \n    3, \n    2, \n    1, \n    2, \n    1, \n    2, \n    1, \n    9, \nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn9bric04.php on line 182\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $v => $v) {\n        if ($v > 1) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33a611ry.php:29\n\
    Stack trace:\n#0 /tmp/tmp33a611ry.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp33a611ry.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $last = array_pop($lst);\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    $current = $lst[$i];\n    if ($current\
    \ == $last) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n\
    }\n\n/**\n * Returns a random integer in range from 0 to [high - low]\n */\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp605us6xp.php:35\n\
    Stack trace:\n#0 /tmp/tmp605us6xp.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp605us6xp.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Store the list\
    \ as a set to remove duplicate entries\n    // Set will automatically remove all\
    \ duplicate entries\n    $unique_set = array_flip($lst);\n    if (count($unique_set)\
    \ > 1) {\n        return false;\n    }\n\n    // Get all of the unique numbers\
    \ in the list\n    $unique_numbers = array_keys($unique_set);\n\n    // Sort them\
    \ by their position\n    sort($unique_numbers);\n\n    // Return whether or not\
    \ the unique numbers are sorted\n    return $unique_numbers === range(0, count($unique_numbers)\
    \ - 1);\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdurlh11y.php:36\n\
    Stack trace:\n#0 /tmp/tmpdurlh11y.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpdurlh11y.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (!is_array($lst))\
    \ {\n        return false;\n    }\n    $sortedArr = array_count_values($lst);\n\
    \    foreach($sortedArr as $key => $value) {\n        if ($value >= 2) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8576umnf.php:34\n\
    Stack trace:\n#0 /tmp/tmp8576umnf.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8576umnf.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (!is_array($lst))\
    \ {\n        return false;\n    }\n\n    $sorted = array_count_values($lst);\n\
    \    asort($sorted);\n    return $sorted !== array_count_values($lst);\n}\n</code>\n\
    The code above will work for arrays of any length, including ones with no duplicates.\
    \ If you want to handle that case as well, add this before you call is_sorted():\n\
    <code>\nif (count($lst) < 2) {\n    return false;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nThis has O(n^2) complexity, which can be very bad for large input\
    \ sets.\n<|/ c |>\n<| c |>\nYes, but in most cases, it might be faster then O(n^2)\
    \ because it will avoid having to sort each time the function is called.\n<|/\
    \ c |>\n<| a dscore=5 tags=php |>\n<code>\n<?php \nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpew1c803w.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ < 2) {\n\t\treturn true;\n\t}\n\n\tsort($lst);\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($lst[$i] == $lst[$i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9wukt2ou.php:35\n\
    Stack trace:\n#0 /tmp/tmp9wukt2ou.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9wukt2ou.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach ($lst\
    \ as $number) {\n        if ($lst == range($number - 1, 0, -1)) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvg78eeff.php:27\n\
    Stack trace:\n#0 /tmp/tmpvg78eeff.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvg78eeff.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$cnt = 0;\n\tforeach\
    \ ($lst as $val){\n\t\tif ($cnt > 1){\n\t\t\treturn false;\n\t\t}\n\t\t$cnt++;\n\
    \t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2c2hbi8s.php:30\n\
    Stack trace:\n#0 /tmp/tmp2c2hbi8s.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2c2hbi8s.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $counts = array_count_values($lst);\n\
    \n    foreach ($counts as $val => $count) {\n        if ($count > 1) {\n     \
    \       return false;\n        }\n    }\n\n    return true;\n}\n</code>\n<|/ a\
    \ tags=php |>\n<| c |>\n`array_count_values()` is your friend here. Don't think\
    \ you need a loop for that.\n<|/ c |>\n<| c |>\nThanks for your help guys, your\
    \ are great\n<|/ c |>\n<| c |>\nI think I misunderstood your question at first.\
    \ I'll update my answer.\n<|/ c |>\n<| c |>\nThanks for your answer it works for\
    \ me as well, but can you explain more about array_count_values?\n<|/ c |>\n<|\
    \ c |>\n`array_count_values()` returns a count for each unique value in an array.\
    \  I've added some examples to the answer.\n<|/ c |>\n<| a |>\nMy way would probably\
    \ be something like:\n<code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp23_ioo01.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Check for any\
    \ duplicate number in the list\n    $is_sorted = true;\n    foreach ($lst as $number)\
    \ {\n        if (count(array_filter($lst, \"is_same\", $number)) > 1) {\n    \
    \        $is_sorted = false;\n        }\n    }\n    return $is_sorted;\n}\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 2 to be a valid callback, function\
    \ 'is_same' not found or invalid function name in /tmp/tmphnucwzl8.php on line\
    \ 18\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmphnucwzl8.php on line 18\n\nWarning: array_filter() expects\
    \ parameter 2 to be a valid callback, function 'is_same' not found or invalid\
    \ function name in /tmp/tmphnucwzl8.php on line 18\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmphnucwzl8.php\
    \ on line 18\n\nWarning: array_filter() expects parameter 2 to be a valid callback,\
    \ function 'is_same' not found or invalid function name in /tmp/tmphnucwzl8.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphnucwzl8.php on line 18\n\nWarning: array_filter()\
    \ expects parameter 2 to be a valid callback, function 'is_same' not found or\
    \ invalid function name in /tmp/tmphnucwzl8.php on line 18\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmphnucwzl8.php\
    \ on line 18\n\nWarning: array_filter() expects parameter 2 to be a valid callback,\
    \ function 'is_same' not found or invalid function name in /tmp/tmphnucwzl8.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphnucwzl8.php on line 18\n\nWarning: array_filter()\
    \ expects parameter 2 to be a valid callback, function 'is_same' not found or\
    \ invalid function name in /tmp/tmphnucwzl8.php on line 18\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmphnucwzl8.php\
    \ on line 18\n\nWarning: array_filter() expects parameter 2 to be a valid callback,\
    \ function 'is_same' not found or invalid function name in /tmp/tmphnucwzl8.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphnucwzl8.php on line 18\n\nWarning: array_filter()\
    \ expects parameter 2 to be a valid callback, function 'is_same' not found or\
    \ i"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $last = array_shift($lst);\n\
    \    foreach ($lst as $x) {\n        if ($x == $last) return false;\n        $last\
    \ = $x;\n    }\n    return true;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    I added another solution that works even when the array contains floating point\
    \ numbers :)\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\n$arr = [5,4,1,3,2,1,4,9,2,5];\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_bp15ek9.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $len = count($lst);\n\
    \    $unique_vals = array_unique($lst);\n    if ($len > 1) {\n        foreach\
    \ ($unique_vals as $key => $val) {\n            if ($val != $lst[$key]) {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=0 tags=php |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj73x837u.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // The algorithm\
    \ below works by starting at the first element and\n    // working backwards,\
    \ checking if each number is less than the last.\n    // If they are, we return\
    \ True. If not, we continue to the next\n    // element. Notice how we check until\
    \ we either find an answer, or we\n    // go through the list once.\n\n    $first\
    \ = $lst[0];\n    for($x = count($lst) - 1; $x > 0 ; $x--) {\n        $current\
    \ = $lst[$x];\n        if($current < $first) {\n            $first = $current;\n\
    \        }\n    }\n    return $first == $lst[0];\n}\n</code>\nAnd here is an example\
    \ of a unit test:\n<code>\n<?php\n\nclass IsSortedTest extends PHPUnit_Framework_TestCase\
    \ {\n\n    public function testIsSorted() {\n        $this->assertTrue(is_sorted([1,\
    \ 3, 2, 4, 5]));\n        $this->assertTrue(is_sorted([1, 3, 2, 4, 5, 6, 7]));\n\
    \        $this->assertTrue(is_sorted([1, 3, 2, 4, 5, 6, 7]));\n        $this->assertTrue(is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]));\n        $this->assertTrue(is_sorted([1, 2, 2, 3, 3, 4]));\n\
    \        $this->assertTrue(is_sorted([1, 2, 2, 2, 3, 4]));\n        $this->assertFalse(is_sorted([1,\
    \ 3, 2, 4, 5]));\n        $this->assertFalse(is_sorted([1, 3, 2, 4, 5]));\n  \
    \  }\n}\n</code>\n<|/ a |>\n<| c |>\nIt's important to note that this is O(n)\
    \ time complexity whereas the question was specifically asked for O(1) time complexity.\n\
    <|/ c |>\n<| c |>\nThis algorithm is still O(n) complexity (even if it doesn't\
    \ use the $arr array).\n<|/ c |>\n<| a dscore=5 tags=sorting,algorithm |>\nThe\
    \ answer is in pseudocode of the Python sort() method:\n<code>\ndef is_sorted(x):\n\
    \    return (x[0] == sorted(x)[0])\n</code>\n<|/ a |>\n<| c |>\n`return (x[0]\
    \ == sorted(x)[0])` can just be `return x[0] < x[-1]`\n<|/ c |>\n<| c |>\nNo,\
    \ that would only work if the sorting algorithm used is guaranteed to sort in\
    \ a stable way. Since this is just asking if something is sorted, the Python sort\
    \ is unstable.\n<|/ c |>\n<| c |>\n: That's a great point, thank you! I always\
    \ forget that Python `sort()` doesn't guarantee the stability of the sort algorithm\
    \ and will probably get into trouble with it if used incorrectly.\n<|/ c |>\n\
    <| c |>\nThis answ\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptbb59z41.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  sort($lst);\n  $cnt\
    \ = count($lst);\n  for ($i = 0; $i < $cnt; $i++) {\n    if ($lst[$i] == $lst[$i])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxrfduesa.php:29\n\
    Stack trace:\n#0 /tmp/tmpxrfduesa.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxrfduesa.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ === 1) {\n        if ($lst[0] === $lst[0]) {\n            return true;\n   \
    \     }\n        return false;\n    }\n    $sorted = 0;\n    $not_sorted = 0;\n\
    \    $unique_nums = [];\n    foreach ($lst as $x) {\n        if (in_array($x,\
    \ $unique_nums)) {\n            $not_sorted++;\n        } else {\n           \
    \ $unique_nums[] = $x;\n            $sorted++;\n        }\n    }\n    return $sorted\
    \ === count($unique_nums);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| c\
    \ |>\nThis works only if the list is unique and sorted, which is what the OP asked\
    \ for.  Otherwise it returns false positives.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\nHere's a version that takes any array and returns true if the array is sorted\
    \ and unique by checking the number of occurrences of each item in the array:\n\
    <code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz32v1t0e.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $len = count($lst);\n\
    \  for($i = 1; $i <= $len; $i++) {\n    for($j = $i; $j < $len; $j++) {\n    \
    \  if ($lst[$i] < $lst[$j]) {\n        return true;\n      } elseif ($i == $j)\
    \ {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1s_upq6.php:45\n\
    Stack trace:\n#0 /tmp/tmpx1s_upq6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpx1s_upq6.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $keys = array_count_values($lst);\n\
    \    foreach ($keys as $key => $count) {\n        if ($count > 1) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjngv9823.php:31\n\
    Stack trace:\n#0 /tmp/tmpjngv9823.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjngv9823.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $val) {\n        if ($val === $last) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgn46l7yz.php:31\n\
    Stack trace:\n#0 /tmp/tmpgn46l7yz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgn46l7yz.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  foreach($lst as\
    \ $val) {\n    if ($val < $lst[0]) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHi, thanks for your comment,\
    \ unfortunately the problem here is that I am not allowed to use any language\
    \ function other than those in PHP\n<|/ c |>\n<| c |>\nThat's fine! But I'm curious,\
    \ what kind of solution are you looking for? A PHP solution, or a JS solution,\
    \ or a general solution?\n<|/ c |>\n<| c |>\nI'm looking for an answer in PHP\
    \ as I can easily convert it to a PHP solution for my understanding\n<|/ c |>\n\
    <| c |>\nOkay, I added a PHP solution for you too.\n<|/ c |>\n<| c |>\nThanks\
    \ so much for your help I will test it out\n<|/ c |>\n<| a tags=javascript,arrays,php\
    \ |>\nSo I figured it out myself as you can see below, though not perfectly as\
    \ it is in JS and I'm sure there might be a better solution\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv_5k_5w1.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$hash = [];\n\t\
    foreach ($lst as $value) {\n\t\tif (!isset($hash[$value])) {\n\t\t\t$hash[$value]\
    \ = true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfctybf60.php:33\n\
    Stack trace:\n#0 /tmp/tmpfctybf60.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfctybf60.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted_array\
    \ = array_count_values($lst);\n    if (count($sorted_array) != count($lst)) {\n\
    \        return false;\n    }\n    foreach ($sorted_array as $key => $value) {\n\
    \        if ($value == 1) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8fbi3kh.php:34\n\
    Stack trace:\n#0 /tmp/tmpn8fbi3kh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpn8fbi3kh.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if (empty($lst))\
    \ {\n    return false;\n  }\n  $sorted = true;\n  foreach ($lst as $elem) {\n\
    \    if ($elem != $sorted) {\n      $sorted = false;\n      break;\n    }\n  }\n\
    \  return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzf1rmgvs.php:35\n\
    Stack trace:\n#0 /tmp/tmpzf1rmgvs.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzf1rmgvs.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $last_value = $lst[0];\n\
    \  for ($i = 1; $i < count($lst); $i++) {\n    if ($last_value <> $lst[$i]) {\n\
    \      return false;\n    }\n    $last_value = $lst[$i];\n  }\n  return true;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7araq8s.php:30\n\
    Stack trace:\n#0 /tmp/tmpu7araq8s.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpu7araq8s.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    sort($lst);\n\
    \    return $lst === array_unique($lst);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy33d62ix.php:26\n\
    Stack trace:\n#0 /tmp/tmpy33d62ix.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpy33d62ix.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  // Initialize two\
    \ pointers to beginning of list.\n  $a = 0;\n  $b = count($lst) - 1;\n\n  // Compare\
    \ adjacent elements.\n  for (; $a <= $b; ++$a) {\n    // If current element is\
    \ less than or equal to the next element,\n    // then it's not sorted.\n    if\
    \ ($a <= $b) return false;\n    // If current element is greater than the next\
    \ element, then\n    // it's sorted.\n    if ($lst[$a] > $lst[$b]) return false;\n\
    \  }\n\n  // If all elements are equal, then it's sorted.\n  return true;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdtksx3r.php:38\n\
    Stack trace:\n#0 /tmp/tmpqdtksx3r.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqdtksx3r.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Write your\
    \ code in PHP7\n    $lst = array_count_values($lst);\n    return array_keys($lst)\
    \ === range(0, count($lst) - 1);\n}\n\n$arr = [1, 2, 3, 4, 4, 3, 4, 5];\n\n$sorted\
    \ = is_sorted($arr);\nif ($sorted) {\n    echo 'Sorted';\n} else {\n    echo 'Not\
    \ sorted';\n}\n</code>\n<|/ a dscore=0 tags=php |>\n<| c |>\nThanks for answering,\
    \ but I cannot use a for loop to do so. I need to use only `in_array`, `array_search`,\
    \ `array_keys`, `array_values`, `array_count_values`, `array_diff`, etc. functions\
    \ only.\n<|/ c |>\n<| c |>\nYou still cant use that array function, but you can\
    \ loop through the array and run them in order and see if the result is as expected.\
    \ There isn't an easy way to check this without using the for loop.\n<|/ c |>\n\
    <| a tags=php |>\n<code>\n$list = [1, 2, 3, 4, 4, 3, 4, 5];\n\n$result = false;\n\
    \nforeach($list as $i => $val) {\n    if ($list[$i] == $list[$i + 1]) {\n    \
    \    $result = true;\n    } else {\n        $result = false;\n    }\n}\n\necho\
    \ $result;\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for answering, but I cannot\
    \ use a for loop to do so. I need to use only in_array, array_search, array_keys,\
    \ array_values, array_count_values, array_diff, etc. functions only.\n<|/ c |>\n\
    <| c |>\nYou still cant use that array function, but you can loop through the\
    \ array and run them in order and see if the result is as expected. There isn't\
    \ an easy way to check this without using the for loop\n<|/ c |>\n<| a dscore=0\
    \ tags=php |>\nI dont know why u must use a for loop for this. \nBut you can try\
    \ this:\n<code>\n<?php\n    $list = [1, 2, 3, 4, 4, 3, 4, 5];\n    $array = array();\n\
    \    foreach($list as $key => $value){\n       $array[] = $value;\n    }\n   \
    \ sort($array);\n    if($array[0] == $array[1]){\n       echo 'sorted';\n    }else{\n\
    \       echo 'not sorted';\n    }\n</code>\n<|/ a |>\n<| c |>\nThanks for answering,\
    \ but I cannot use a for loop to do so. I need to use only in_array, array_search,\
    \ array_keys, array_values, array_count_values, array_diff, etc. functions only.\n\
    <|/ c |>\n<| c |>\nWhy not? I dont see any loop in this.\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt5p8lf3i.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  sort($lst);\n  return\
    \ $lst == array_unique(sort($lst));\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_unique() expects parameter 1 to be array, bool given in\
    \ /tmp/tmph2mz69cu.php on line 16\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmph2mz69cu.php:24\nStack trace:\n#0 /tmp/tmph2mz69cu.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmph2mz69cu.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // If the list\
    \ is empty, its sorted\n    if (count($lst) == 0) {\n        return true;\n  \
    \  }\n    // If the first element is equal to the last element, its sorted\n \
    \   if ($lst[0] == $lst[count($lst) - 1]) {\n        return true;\n    }\n   \
    \ // If there are equal elements on the list, it is not sorted\n    $unique_elements\
    \ = [];\n    // Keep adding each element to $unique_elements until we reach the\
    \ end of the list\n    foreach ($lst as $element) {\n        if (!in_array($element,\
    \ $unique_elements)) {\n            $unique_elements[] = $element;\n        }\
    \ else {\n            return false;\n        }\n    }\n    // If we got here,\
    \ all elements were unique, therefore the list is sorted\n    return true;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis is unnecessarily complicated. Why bother with\
    \ the `is_sorted` function at all? Just do `$a === $b` instead.\n<|/ c |>\n<|\
    \ c |>\nThe \"is sorted\" function is a useful abstraction to allow for a simple\
    \ and readable solution in the case that a user doesn't have a solid understanding\
    \ of all of the nuances of sorting algorithms.\n<|/ c |>\n<| c |>\nI agree with.\
    \ The reason why is simple is because it allows to write something that would\
    \ look exactly the same if done in a more primitive way. Sometimes you don't need\
    \ to do everything in a simple way. I don't see this being an issue in this particular\
    \ case. Your answer is the best solution for this particular case. However, if\
    \ one wanted to know if a list was sorted or not in general and didn't care about\
    \ what was going on, that \"is sorted\" function would still be useful. Just saying...\n\
    <|/ c |>\n<| c |>\nI agree with you - it's not the most efficient way. Still,\
    \ the question asked for a solution that could apply to many different sorting\
    \ algorithms - the best solution for this particular case. Thus it is the best\
    \ solution.\n<|/ c |>\n<| c |>\nI understand what you mean and I agree that your\
    \ answer is more elegant than this one. However, I would suggest you re-write\
    \ your code as I have it below and you might not even have to make a `is_sorted()`\
    \ function.\n<|/ c |>\n<| a tags=algorithm,sorting,php dscore=2 |>\n<code>\n$arr\
    \ = [5,5,4,4,3,2,1,2,3];\n$isSorted = true;\nforeach($arr as $key=>$element){\n\
    \    if($key != $arr[$key-1])\n        $isSorted = false;\n}\nif($isSorted)\n\
    \    echo \"Sorted array\";\nelse\n    echo \"Not sorted array\";\n</code>\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpitw9ly4t.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if (is_array($lst)\
    \ && count($lst) > 1) {\n    sort($lst);\n    return true; // duplicate number\
    \ exists - return false\n  } else {\n    return false; // no duplicate - return\
    \ true\n  }\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsw_7_u8h.php:28\n\
    Stack trace:\n#0 /tmp/tmpsw_7_u8h.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsw_7_u8h.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $seen = array();\n\
    \    $first = $lst[0];\n    for ($i = 0; $i < count($lst); $i++) {\n        if\
    \ ($seen === array()) {\n            $seen = $lst;\n            $first = $lst[$i];\n\
    \        } else if ($seen[$i] === $first) {\n            $seen[] = $lst[$i];\n\
    \        } else {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8aa8lzmk.php:36\n\
    Stack trace:\n#0 /tmp/tmp8aa8lzmk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8aa8lzmk.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (!is_array($lst)\
    \ || count($lst) === 0) return false;\n\n    $first = $lst[0];\n    $rest = array_slice($lst,\
    \ 1);\n\n    return $first == $rest[0] && is_sorted($rest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbggm6gsa.php:28\n\
    Stack trace:\n#0 /tmp/tmpbggm6gsa.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbggm6gsa.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  global $numbers;\n\
    \  \n  if (count($lst) < 2) return true;\n  \n  $seen = [];\n  \n  foreach($lst\
    \ as $v) {\n    if (!isset($seen[$v])) $seen[$v] = 1;\n    else return false;\n\
    \  }\n  \n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpj_h5wh.php:36\n\
    Stack trace:\n#0 /tmp/tmpvpj_h5wh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvpj_h5wh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tsort($lst);\n\t\
    for ($i = 0; $i < count($lst) - 2; $i++) {\n\t\tif ($lst[$i] == $lst[$i + 1])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31nodd0f.php:30\n\
    Stack trace:\n#0 /tmp/tmp31nodd0f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp31nodd0f.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $len = count($lst);\n\
    \    for ($i = 1; $i < $len; ++$i) {\n        if ($lst[$i] > $lst[$i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqq5iugfb.php:29\n\
    Stack trace:\n#0 /tmp/tmpqq5iugfb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqq5iugfb.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $len = count($lst);\n\
    \  \n  for ($i = 1; $i < $len; $i++) {\n    $first = $lst[$i];\n    $j = $i;\n\
    \    \n    while ($j > 0 && $lst[$j - 1] == $first) {\n      $lst[$j - 1] = $lst[$j];\n\
    \      $lst[$j] = $first;\n      $j--;\n    }\n  }\n  \n  return $len <= 1;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitll0uyr.php:37\n\
    Stack trace:\n#0 /tmp/tmpitll0uyr.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpitll0uyr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if (is_null($lst))\
    \ return false;\n  $last = array_pop($lst);\n  $sorted = true;\n  foreach ($lst\
    \ as $v) {\n    if ($v != $last) return false;\n    $sorted = false;\n  }\n  return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_dnp502.php:31\n\
    Stack trace:\n#0 /tmp/tmpu_dnp502.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu_dnp502.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $last_value = $lst[0];\n\
    \  $unique_vals = [];\n\n  for ($i = 1; $i < sizeof($lst); $i++) {\n    if ($lst[$i]\
    \ == $last_value) {\n      return false;\n    }\n    else {\n      $unique_vals[]\
    \ = $lst[$i];\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0axqcvz.php:36\n\
    Stack trace:\n#0 /tmp/tmpw0axqcvz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpw0axqcvz.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  return is_sorted(array_count_values($lst));\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $cnt = count($lst);\n\
    \  if ($cnt < 2) {\n    return true;\n  }\n  foreach ($lst as $key => $val) {\n\
    \    // if val is repeated in list, return False\n    if (array_search($val, $lst)\
    \ !== $key) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzynwkpb7.php:35\n\
    Stack trace:\n#0 /tmp/tmpzynwkpb7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzynwkpb7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $map = array();\n\
    \    foreach ($lst as $k => $v) {\n        if (!isset($map[$v])) {\n         \
    \   $map[$v] = $k;\n        }\n    }\n    foreach ($map as $k => $v) {\n     \
    \   if ($k != $v) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylbt9b5d.php:34\n\
    Stack trace:\n#0 /tmp/tmpylbt9b5d.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpylbt9b5d.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    return $lst ==\
    \ array_unique($lst);\n}\n</code>\n<|/ a |>\n<| a |>\nYou can use an algorithm\
    \ for finding kth-largest element in a sorted array.\nA naive approach is O(n^2)\
    \ (which takes O(n) if you sort the array).\nA better approach is O(n * log n)\
    \ (sort takes O(n * log n) time).\nA pseudo code for the naive approach -\n<code>\n\
    for i from 0 to n-1\n   j = i\n   while j > 0 and arr[j-1] > arr[j]\n       j\
    \ = j-1\n   if j > k\n      kth-highest element = arr[j]\n      break\n</code>\n\
    <|/ a tags=sorting,algorithm dscore=4 |>\n<| c |>\nCan you explain how this works?\
    \  I don't understand why you keep track of the largest value in the array as\
    \ you go.  Shouldn't you just keep track of `i` as the index of its current largest\
    \ value?  Then you only need to find `k` as the index of the largest value, which\
    \ should be trivial.\n<|/ c |>\n<| c |>\n- I didn't write the pseudo-code, so\
    \ I was looking for a better one.\n<|/ c |>\n<| c |>\n: You don't need to keep\
    \ track of the largest value. Just the index of its current largest value. `j\
    \ = i; while (j > 0 and arr[j-1] > arr[j]) j = j - 1; if (j > k) kth-highest element\
    \ = arr[j]`\n<|/ c |>\n<| c |>\nI added some comments to the answer. I hope that\
    \ helps. Thanks.\n<|/ c |>\n<| c |>\nThanks - I see what you're saying.  Just\
    \ out of curiosity, is there a faster way besides a sort?\n<|/ c |>\n<| a tags=sorting,algorithm\
    \ |>\nHere is simple implementation for k-th largest:\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp563u0z31.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  return !empty($lst)\
    \ && count(array_unique($lst)) === count($lst);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uf_fl46.php:25\n\
    Stack trace:\n#0 /tmp/tmp_uf_fl46.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_uf_fl46.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // write code\
    \ here\n    $seen = [];\n    $counts = [];\n    foreach ($lst as $num) {\n   \
    \     $counts[$num] = $counts[$num] ?? 0;\n        $counts[$num] += 1;\n    }\n\
    \    for ($i = 0; $i < count($counts); $i++) {\n        if ($counts[$i] >= 2)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6bni4ir.php:37\n\
    Stack trace:\n#0 /tmp/tmpy6bni4ir.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpy6bni4ir.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$n = count($lst);\n\
    \tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($lst[$i - 1] == $lst[$i]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyylw1qy.php:31\n\
    Stack trace:\n#0 /tmp/tmpuyylw1qy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpuyylw1qy.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$first = current($lst);\n\
    \tforeach ($lst as $item) {\n\t\tif ($item != $first) return false;\n\t}\n\treturn\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi70b9kc3.php:28\n\
    Stack trace:\n#0 /tmp/tmpi70b9kc3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpi70b9kc3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  // write your code\
    \ here\n  $arr = array_count_values($lst);\n  $arr2 = array_count_values($arr);\n\
    \  if ($arr2 === $arr) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n</code>\n<|/ a tags=sorting,php |>\n<| c |>\nThanks Pankaj! This works quite\
    \ well, but I noticed you did not include a case for when $arr === $arr2, so I\
    \ added it to my original code. See below.\n<|/ c |>\n<| c |>\nI added the check\
    \ for that condition. Thanks!\n<|/ c |>\n<| a tags=sorting,php |>\nThis code will\
    \ solve your problem\n<code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3sdzd8ch.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted     =\
    \ false;\n    $unique      = array_count_values($lst);\n    $keys        = array_keys($unique);\n\
    \    $unique_count = array_count_values($keys);\n    if ($unique_count[0] ===\
    \ 1) {\n        $sorted       = true;\n        foreach ($keys as $k) {\n     \
    \       if (!isset($unique[$k])) {\n                $sorted = false;\n       \
    \         break;\n            }\n        }\n    } else {\n        foreach ($unique\
    \ as $k => $v) {\n            if ($v === 1) {\n                $sorted = false;\n\
    \                break;\n            }\n        }\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgsjbx759.php:43\n\
    Stack trace:\n#0 /tmp/tmpgsjbx759.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpgsjbx759.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n    if ($lst[$i] == $lst[$i + 1]) {\n      continue;\n\
    \    }\n    return false;\n  }\n  return true;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Why not just `return count($lst) - 1 == end($lst);`?\n<|/ c |>\n<| c |>\n, that's\
    \ also one way to do it, and is probably more efficient as well.\n<|/ c |>\n<|\
    \ c |>\nJust remember that `count($lst)` runs a loop anyway, so this should be\
    \ more efficient.\n<|/ c |>\n<| c |>\n: It depends on what you're expecting it\
    \ to do and what you're doing. Generally speaking, `count()` shouldn't be used\
    \ outside of debugging, so I wouldn't worry too much about that when it's actually\
    \ more efficient.\n<|/ c |>\n<| c |>\nIt depends what you're expecting it to do.\
    \ Some people (myself included) use PHP's `count()` to count the number of things\
    \ in a collection. Other people use it to count the things in a database query,\
    \ etc. If you're just counting, then I guess it's fine, but if you're using it\
    \ to check a list to see if it's sorted, then you might want to be careful. I've\
    \ done this in PHP a few times, it's easy to make mistakes.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI used the above solutions. I added an extra check for empty array and negative\
    \ numbers. \n<code>\n<?php\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7125sws_.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = array_count_values($lst);\n\
    \    foreach($sorted as $count => $countValue) {\n        if($countValue !== $count)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqcc2w1s.php:29\n\
    Stack trace:\n#0 /tmp/tmpjqcc2w1s.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjqcc2w1s.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return ($lst[0] == $lst[0]);\n    }\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($lst[$key] > $value) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3ipmdnr.php:35\n\
    Stack trace:\n#0 /tmp/tmpj3ipmdnr.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpj3ipmdnr.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Count how many\
    \ times each number appears\n    $count = array_count_values($lst);\n    // If\
    \ there are more than 1 duplicate numbers\n    // (i.e. there are 2 2's), then\
    \ it is unsorted\n    if (count($count) > 1) {\n        return false;\n    }\n\
    \    // If there are only 2 duplicates\n    // (i.e. there are 2 2's), then it\
    \ must be sorted\n    elseif (count($count) == 2) {\n        return true;\n  \
    \  }\n    // If there are only 1 duplicate\n    // (i.e. there is 1 2), then it\
    \ is sorted\n    else {\n        $first = reset($count);\n        $second = next($count);\n\
    \        // If first and second are equal\n        if ($first == $second) {\n\
    \            return true;\n        }\n        // If first is greater than second\n\
    \        else if ($first > $second) {\n            return false;\n        }\n\
    \        // If first is less than second\n        else {\n            return is_sorted($lst);\n\
    \        }\n    }\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nHi Alexander, thanks\
    \ so much for this. I understand what you did but I'm getting an error with the\
    \ code. I understand what the code is doing (I think), but I'm getting an error.\
    \ I'm thinking that it's due to the fact that there are duplicates in the array.\
    \ Can you help with that?\n<|/ c |>\n<| c |>\nHi Alex, I just updated the code\
    \ a bit. Just let me know if that works for you now.\n<|/ c |>\n<| c |>\nThanks\
    \ Alex so much for this. I think I understand what I need to do. I just need to\
    \ figure out how to implement it. I appreciate your help!\n<|/ c |>\n<| c |>\n\
    I just tried the code. Unfortunately it didn't work. There are still some problems,\
    \ but I think I can fix that myself. Thanks so much for you help so far. I've\
    \ been trying to figure this out for a while!\n<|/ c |>\n<| c |>\nI added some\
    \ comments and fixed the errors. I hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n\
    This is my solution:\n<code>\n$array = array_count_values($array);\n$result =\
    \ false;\n$arrayUnique = array_unique($array);\nforeach($array as $key=>$value)\n\
    {\n    if(isset($arrayUnique[$key]))\n    {\n        $result = $result && $arrayUnique[$key]\
    \ == $value;\n    }\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| a dscore=1\
    \ |>\nI made a quick script that should work. My algorithm is:\n\nLoop through\
    \ \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppzmhskn4.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    sort($lst);\n\
    \    $first = array_shift($lst);\n    if ($first == $first) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgsj9nstb.php:30\n\
    Stack trace:\n#0 /tmp/tmpgsj9nstb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpgsj9nstb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // The first and\
    \ last element can never be duplicates\n    // as they are both less than or equal\
    \ to one another\n    if (count(array_unique($lst)) == count($lst)) return true;\n\
    \n    // If there are any duplicates, this one is not sorted\n    if (isset($lst[0])\
    \ && isset($lst[$lst - 1])) return false;\n\n    // The array is already sorted,\
    \ so all elements are unique\n    if (isset($lst[0])) return true;\n\n    // If\
    \ there is only one element, its sorted, and no duplicates,\n    // so return\
    \ true\n    if (count($lst) == 1) return true;\n\n    // Sort the rest of the\
    \ array\n    $sorted = sort($lst);\n\n    // If the first and last elements are\
    \ equal, return true\n    if ($sorted[0] == $sorted[$lst - 1]) return true;\n\n\
    \    // Otherwise, return false\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3mz1kk33.php:46\n\
    Stack trace:\n#0 /tmp/tmp3mz1kk33.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp3mz1kk33.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  return $lst == array_unique($lst);\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi54qocvw.php:25\n\
    Stack trace:\n#0 /tmp/tmpi54qocvw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi54qocvw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  foreach ($lst as\
    \ $num) {\n    if ($num == $num) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpww8pxnue.php:28\n\
    Stack trace:\n#0 /tmp/tmpww8pxnue.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpww8pxnue.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$last = end($lst);\n\
    \tfor($i=0,$len=count($lst);$i<$len;$i++) {\n\t\tif($lst[$i] == $last) {\n\t\t\
    \t$i--;\n\t\t\t$len--;\n\t\t\tunset($lst[$i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ empty($lst) ? true : false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ze2f5vv.php:32\n\
    Stack trace:\n#0 /tmp/tmp2ze2f5vv.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2ze2f5vv.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $val) {\n        if ($sorted) {\n            if\
    \ ($val !== $lst[$key - 1]) {\n                $sorted = false;\n            \
    \    break;\n            }\n        } else {\n            $sorted = true;\n  \
    \          if ($val > $lst[$key - 1]) {\n                $sorted = false;\n  \
    \              break;\n            }\n        }\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1z5vs5s2.php:38\n\
    Stack trace:\n#0 /tmp/tmp1z5vs5s2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1z5vs5s2.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach($lst as\
    \ $v) {\n        $found = false;\n        foreach($lst as $v2) {\n           \
    \ if($v >= $v2) {\n                $found = true;\n                break;\n  \
    \          }\n        }\n        if(!$found) return false;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghpwsmm1.php:35\n\
    Stack trace:\n#0 /tmp/tmpghpwsmm1.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpghpwsmm1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (sizeof($lst)\
    \ == 0) return true;\n    if (sizeof($lst) == 1) return ($lst[0] == $lst);\n \
    \   \n    $i = 0;\n    $j = $i+1;\n    \n    while ($j < sizeof($lst)) {\n   \
    \     if ($lst[$i] == $lst[$j]) return false;\n        $i++;\n        $j++;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouro0uo1.php:34\n\
    Stack trace:\n#0 /tmp/tmpouro0uo1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpouro0uo1.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Write your\
    \ code here\n    if (count($lst) < 2) {\n        return true;\n    }\n    $countMap\
    \ = array_count_values($lst);\n    foreach ($countMap as $k => $v){\n        if\
    \ ($v == 1) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqni0c42.php:35\n\
    Stack trace:\n#0 /tmp/tmptqni0c42.php(48): test()\n#1 {main}\n  thrown in /tmp/tmptqni0c42.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if (is_array($lst)\
    \ && count($lst) > 1) {\n    foreach ($lst as $key => $val) {\n      if ($val\
    \ != $lst[$key]) {\n        return false;\n      }\n    }\n    return true;\n\
    \  }\n  return false;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2105d24.php:30\n\
    Stack trace:\n#0 /tmp/tmpb2105d24.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb2105d24.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $arr = $lst;\n\
    \    $n = count($arr);\n    $count = 0;\n    foreach ($arr as $elem) {\n     \
    \   if ($elem == $arr[0]) {\n            $count++;\n        } else {\n       \
    \     if ($count > 0) {\n                return false;\n            }\n      \
    \  }\n    }\n    return $count == $n;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ub_by7i.php:36\n\
    Stack trace:\n#0 /tmp/tmp1ub_by7i.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1ub_by7i.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if ($lst === [])\
    \ {\n        return true;\n    }\n    $sorted = array_count_values($lst);\n  \
    \  return array_filter(\n        $sorted,\n        function ($count) {\n     \
    \       return $count < 2;\n        }\n    ) === [];\n}\n</code>\n<|/ a dscore=2\
    \ tags=php |>\n<| a tags=php |>\n<code>\nif(count($array)>1){\n    foreach($array\
    \ as $key => $value) {\n        if($value == $array[$key-1]){\n            $result[]\
    \ = $value;\n        }else{\n            $result[] = $value;\n        }\n    }\n\
    }else{\n    $result = $array;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=0 tags=php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmo8pm9_v.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $hash = [];\n\
    \    $duplicates = array_count_values($lst);\n    if (array_filter($duplicates,\
    \ function ($x) { return $x > 1; }));\n    if (array_filter($duplicates, function\
    \ ($x) { return $x > 1; })) {\n        return false;\n    }\n    foreach ($lst\
    \ as $i => $number) {\n        if (!isset($hash[$number])) {\n            $hash[$number]\
    \ = true;\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepyeo8cx.php:37\n\
    Stack trace:\n#0 /tmp/tmpepyeo8cx.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpepyeo8cx.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $hash = [];\n\
    \    foreach ($lst as $value) {\n        $hash[$value] = true;\n    }\n\n    foreach\
    \ ($hash as $key => $value) {\n        $prev = $value;\n        foreach ($hash\
    \ as $key2 => $value2) {\n            if ($key === $key2 && $prev > $value2) {\n\
    \                return false;\n            }\n        }\n    }\n\n    return\
    \ true;\n}\n\n/**\n * Given a sorted array and a target value, return a new array\n\
    \ * containing only the values that would sort that target value\n * into the\
    \ same position in the unsorted array.\n * Examples\n * array_value_position([1,\
    \ 2, 3, 4, 5], 3) \u279E [4, 5, 5]\n * array_value_position([1, 2, 3, 4, 5], 2)\
    \ \u279E [1, 2]\n * array_value_position([1, 2, 3, 4, 5], 0) \u279E [1, 2, 3]\n\
    \ * array_value_position([1, 2, 3, 4, 5], 1) \u279E [1, 2, 3, 4, 5]\n */\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb15ww_wa.php:49\n\
    Stack trace:\n#0 /tmp/tmpb15ww_wa.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpb15ww_wa.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ === 0) {\n        return true;\n    }\n    $n = array_shift($lst);\n    foreach\
    \ ($lst as $v) {\n        if ($v === $n) {\n            continue;\n        }\n\
    \        if ($v < $n) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7y3gi9n8.php:37\n\
    Stack trace:\n#0 /tmp/tmp7y3gi9n8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp7y3gi9n8.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $last = array_pop($lst);\n\
    \    sort($lst);\n    $flag = array_pop($lst);\n    if ($flag != $last) {\n  \
    \      return false;\n    }\n    return count($lst) == 0;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nOh, I forgot some test cases, now I edited the answer. Thank you!\n\
    <|/ c |>\n<| c |>\nStill not working correctly:\n`is_sorted([1, 2, 3, 4, 5]) \u279E\
    \ True\nis_sorted([1, 3, 2, 4, 5]) \u279E False\nis_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\nis_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E True\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nis_sorted([1, 2, 3, 4, 5]) \u279E True\nis_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\nis_sorted([1, 3, 2, 4, 5]) \u279E False\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False`\n\
    <|/ c |>\n<| c |>\nI edited my answer and I gave another code. Hope this time\
    \ it's working correctly.\n<|/ c |>\n<| a tags=performance,sorting,algorithm,php\
    \ dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4zlquc3x.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  return array_count_values($lst)\
    \ === array_count_values(array_unique($lst));\n}\n\n$lists = array();\n$lists['fruit']\
    \ = array();\n$lists['vegetable'] = array();\n$lists['animal'] = array();\n$lists['numbers']\
    \ = array();\n\n$lists['fruit'] = array('apple', 'orange', 'pineapple', 'tomato');\n\
    $lists['vegetable'] = array('carrot', 'tomato', 'broccoli');\n$lists['animal']\
    \ = array('cat', 'dog', 'snake', 'snake');\n$lists['numbers'] = array(5, 1, 2,\
    \ 3);\n\n$lists['numbers'] = array(1, 3, 2);\n$lists['fruit'] = array('orange',\
    \ 'apple');\n$lists['vegetable'] = array('carrot', 'tomato');\n$lists['animal']\
    \ = array('cat', 'dog');\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpoj26qs.php:40\n\
    Stack trace:\n#0 /tmp/tmpqpoj26qs.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqpoj26qs.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  foreach ($lst as\
    \ $key => $val)\n    if ($val == $lst[$key + 1]) return false;\n  return true;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkiqe0rct.php:26\n\
    Stack trace:\n#0 /tmp/tmpkiqe0rct.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkiqe0rct.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $len = count($lst);\n\
    \  sort($lst);\n  for ($i = 0; $i < $len; $i++) {\n    if ($lst[$i] != $lst[$len\
    \ - $i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgelmmi47.php:30\n\
    Stack trace:\n#0 /tmp/tmpgelmmi47.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgelmmi47.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  // Use a set to\
    \ count the frequency of every unique integer\n  $set = array_count_values($lst);\n\
    \  // If the frequency of an integer is greater than 1, then it\n  // is not sorted\n\
    \  if ($set['1'] > 1) {\n    return false;\n  }\n  // Otherwise, sort the list\
    \ and return True\n  return true;\n}\n</code>\nThe complexity is O(n), meaning\
    \ it runs in O(n) time. The other answers run in O(n\xB2) and have terrible runtime\
    \ complexity. This answer runs in O(n), in other words, it runs in constant time,\
    \ which is much better.\n<|/ a |>\n<| a |>\nHere's my solution\n<code>\n<?php\n\
    $arr = range(1,15);\n$newArray = array_count_values($arr);\n$firstKey = array_keys($newArray)[0];\n\
    if ($firstKey < count($newArray) - 1) {\n    echo \"Yeah, its a sorted array\"\
    ;\n}\n</code>\n<|/ a tags=arrays,php dscore=4 |>\n<| a |>\nA simple one-line answer:\n\
    <code>\nif(array_count_values($array)['1'] > 1) {\n  echo 'sorry dude';\n} else\
    \ {\n  echo 'yeah';\n}\n</code>\n<|/ a tags=arrays,php dscore=4 |>\n<| c |>\n\
    Nice answer. Should be the accepted one. :)\n<|/ c |>\n<| a tags=arrays,php |>\n\
    You could create an array which maps the array indices to the values. Then use\
    \ the array_count_values to count the number of occurrences of each item in the\
    \ array. \nIf that value is higher than 1, then your array is not sorted. \n<code>\n\
    $a = array(\n    'a',\n    'b',\n    'a',\n    'b');\n$unique = array();\nfor($i\
    \ = 0; $i < count($a); $i++) {\n    if(!array_key_exists($i, $unique)) {\n   \
    \     $unique[$i] = $a[$i];\n    }\n}\n$counts = array_count_values($unique);\n\
    \nif($counts['a'] > 1) {\n   echo 'Not sorted.';\n} else {\n   echo 'Sorted.';\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nI've just discovered that you\
    \ can do it in O(n) using an in-place sort algorithm.\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsq40leiv.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Write your\
    \ code here\n    $first = array_shift($lst);\n    foreach ($lst as $item) {\n\
    \        if ($item != $first) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmtji18f.php:31\n\
    Stack trace:\n#0 /tmp/tmpdmtji18f.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdmtji18f.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $hash = [];\n\n\
    \  foreach ($lst as $item) {\n    if (in_array($item, $hash)) {\n      return\
    \ false;\n    }\n\n    $hash[] = $item;\n  }\n\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6giwyke.php:35\n\
    Stack trace:\n#0 /tmp/tmpa6giwyke.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpa6giwyke.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ < 2) return true;\n    $len = count($lst);\n    for ($i = 1; $i < $len; $i++)\
    \ {\n        if ($lst[$i] != $lst[$i - 1]) return false;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppzh8zwbc.php:29\n\
    Stack trace:\n#0 /tmp/tmppzh8zwbc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppzh8zwbc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  // Sort the list\
    \ if it's not already sorted and if it has more than 1 duplicate of the same number.\n\
    \  if (!is_sorted($lst) && count(array_count_values($lst)) > 1) {\n    return\
    \ false;\n  }\n\n  // Sort the list if it's already sorted.\n  if (!is_sorted($lst))\
    \ {\n    sort($lst);\n  }\n\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Initialize\
    \ a flag to keep track of whether we've seen a number\n    // before\n    $seen_num\
    \ = false;\n    $count = 0;\n    foreach ($lst as $num) {\n        // If we haven't\
    \ seen this number before, add it to\n        // the array\n        if (!$seen_num)\
    \ {\n            $seen_num = true;\n            $lst_numbers[] = $num;\n     \
    \   }\n        // Otherwise, if the number we saw before\n        // is less than\
    \ this number, it isn't sorted\n        elseif ($num < $lst_numbers[$count]) {\n\
    \            $seen_num = false;\n        }\n        // Otherwise, if the number\
    \ we saw before\n        // is greater than this number, it *is* sorted\n    \
    \    elseif ($num > $lst_numbers[$count]) {\n            $count++;\n        }\n\
    \    }\n    // If the flag indicates that there were duplicate values\n    //\
    \ in the list, return false to indicate that the\n    // list is not sorted\n\
    \    return $seen_num;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky1yqi_u.php:50\n\
    Stack trace:\n#0 /tmp/tmpky1yqi_u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpky1yqi_u.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $unique = [];\n\
    \  $len = count($lst);\n  for ($i = 0; $i < $len; $i++) {\n    if (!in_array($lst[$i],\
    \ $unique)) {\n      $unique[] = $lst[$i];\n    }\n  }\n  return count($unique)\
    \ == 1;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblf6eab4.php:30\n\
    Stack trace:\n#0 /tmp/tmpblf6eab4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpblf6eab4.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$seen = array();\n\
    \tforeach ($lst as $item) {\n\t\tif (isset($seen[$item])) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$seen[$item] = true;\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8z9j3zv.php:32\n\
    Stack trace:\n#0 /tmp/tmps8z9j3zv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmps8z9j3zv.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $unique_numbers\
    \ = array();\n  foreach ($lst as $key => $value) {\n    if (!in_array($value,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $value;\n    }\n  }\n  if (count($unique_numbers)\
    \ === 1) {\n    return true;\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd7khqwn.php:32\n\
    Stack trace:\n#0 /tmp/tmpfd7khqwn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfd7khqwn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Initialize\
    \ and count the number of duplicates\n    $counts = array_count_values($lst);\n\
    \    if ($counts == []) return false;\n    $nums = array_keys($counts);\n\n  \
    \  // If the number of duplicates equals the number of unique numbers,\n    //\
    \ then they're sorted.\n    return count($nums) == count($counts);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5f5xo8gx.php:32\n\
    Stack trace:\n#0 /tmp/tmp5f5xo8gx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5f5xo8gx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $val) {\n        if ($val !== $lst[$key + 1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7l880m5l.php:30\n\
    Stack trace:\n#0 /tmp/tmp7l880m5l.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7l880m5l.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// Base case: if\
    \ list is empty\n\tif (empty($lst)) return true;\n\t// Find the first duplicate\
    \ number, starting from the end\n\t$first = 0;\n\twhile ($lst[$first] == $lst[$first\
    \ + 1]) {\n\t\t$first++;\n\t}\n\t// If there are at least 2 duplicates, return\
    \ false\n\tif ($first > 1) return false;\n\t// Return the sorted array\n\t$sorted\
    \ = array_reverse($lst);\n\treturn is_array($sorted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_ac987g.php:36\n\
    Stack trace:\n#0 /tmp/tmpb_ac987g.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpb_ac987g.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // If there's\
    \ only one item, it's sorted\n    if (count($lst) < 2) { return true; }\n\n  \
    \  // If there are duplicates, return false\n    if (count($lst) > 1) { return\
    \ false; }\n\n    // Assign the current item we're checking value to $current\n\
    \    $current  = array_shift($lst);\n    $sorted = false;\n\n    // If our current\
    \ item is less than the previous one, they aren't sorted\n    if ($current <=\
    \ array_shift($lst)) {\n        $sorted = true;\n    }\n\n    // Continue checking\
    \ using the rest of the array\n    while (count($lst) > 0) {\n        $current\
    \  = array_shift($lst);\n        if ($current < $current) { $sorted = false; }\n\
    \    }\n\n    // Return whether or not the array is sorted\n    return $sorted;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1yxvz4v1.php:45\n\
    Stack trace:\n#0 /tmp/tmp1yxvz4v1.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp1yxvz4v1.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (sizeof($lst)\
    \ === 1) {\n        return false;\n    }\n    $len = sizeof($lst);\n    $duplicates\
    \ = array();\n    $hashTable = array();\n    for ($i = 0; $i < $len; $i++) {\n\
    \        if ($i == 0) {\n            $hashTable[$i] = $lst[0];\n        } else\
    \ {\n            $hashTable[$i] = $lst[$i - 1];\n        }\n    }\n    for ($i\
    \ = 1; $i < $len; $i++) {\n        if ($lst[$i] != $hashTable[$i]) {\n       \
    \     if (sizeof($duplicates) == 0) {\n                $duplicates[] = $lst[$i];\n\
    \            } else {\n                if ($i > 1) {\n                    return\
    \ false;\n                }\n            }\n        }\n    }\n    if (sizeof($duplicates)\
    \ > 0) {\n        return false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=sorting,algorithm,php\
    \ dscore=2 |>\n<| c |>\nThe time complexity of your solution is `O(N^2)`\n<|/\
    \ c |>\n<| c |>\n.Baker: Yes, I see that now. Fixed.\n<|/ c |>\n<| c |>\nThanks\
    \ for the solution, much appreciated. As pointed out below though, your solution\
    \ does not work for an array with duplicate entries, as it only checks for a single\
    \ duplicate. I'll post an update soon.\n<|/ c |>\n<| c |>\nYour new solution works\
    \ perfectly for duplicate entries. Thanks again.\n<|/ c |>\n<| a tags=sorting,algorithm,php\
    \ dscore=2 |>\nThe problem is that the array could be very large, so the solution\
    \ with sorting would be inefficient. You could do it like this:\n<code>\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphsuhreqj.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $cnt = array_count_values($lst);\n\
    \  if (count($cnt) > 1) {\n    return false;\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4upg32zh.php:28\n\
    Stack trace:\n#0 /tmp/tmp4upg32zh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4upg32zh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value < $lst[$key]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n</code>\nApart from that, it is also a good idea to name your functions\
    \ so they make sense to a person reading the code. For example is_sorted can be\
    \ seen as a sort function that checks if a list is sorted. is_unique or is_duplicated\
    \ can be seen as functions to check whether a list contains duplicates and whether\
    \ a list contains unique elements. \n<code>\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqrhe7wjf.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (!is_array($lst))\
    \ return true;\n    sort($lst);\n    if (count($lst) < 2) return true;\n    $prev\
    \ = reset($lst);\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ == $prev) return false;\n        $prev = $lst[$i];\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_at6rym.php:33\n\
    Stack trace:\n#0 /tmp/tmpr_at6rym.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr_at6rym.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted_array\
    \ = array_count_values($lst);\n    if (count($sorted_array) > 1) {\n        return\
    \ false;\n    } else {\n        return current($sorted_array) == 1;\n    }\n}\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1m147gi.php:28\n\
    Stack trace:\n#0 /tmp/tmpq1m147gi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpq1m147gi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ === 0) {\n        return false;\n    }\n\n    $last = array_pop($lst);\n   \
    \ $count = 1;\n    $found = false;\n\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] === $last) {\n            $count++;\n            if\
    \ ($count > 2) {\n                return false;\n            }\n        } else\
    \ {\n            $found = true;\n            if ($count === 2) {\n           \
    \     break;\n            }\n        }\n    }\n\n    return $found;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,sorting |>\nYou can use usort and a callback\
    \ function to compare the two values and return 0 if the first value is greater\
    \ than the second, 1 if the second is greater than the first, -1 if the first\
    \ is less than the second\n<code>\n$input = [2,5,6,1,4,7];\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgq0of2mn.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $len = count($lst);\n\
    \    for ($i=0; $i < $len; $i++) {\n        $prev = $lst[$i];\n        for ($j=$i+1;\
    \ $j < $len; $j++) {\n            if ($lst[$j] < $prev) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj2tq_ol.php:41\n\
    Stack trace:\n#0 /tmp/tmplj2tq_ol.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplj2tq_ol.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if (count(array_count_values($lst))\
    \ > 1) {\n    return false;\n  }\n\n  // If there are no duplicates, return True\n\
    \  if (count($lst) == 1) {\n    return true;\n  }\n\n  // Otherwise, assume all\
    \ duplicates are equal\n  // and check for any duplicate less than the one being\n\
    \  // checked\n  $check = 1;\n  for ($i = 0; $i < count($lst); $i++) {\n    if\
    \ ($lst[$i] <= $lst[$check]) {\n      return false;\n    }\n\n    // Increment\
    \ the counter to check to see if we have the\n    // last duplicate value\n  \
    \  $check++;\n  }\n\n  // If we reach this point, it means that all duplicates\n\
    \  // are greater or equal than the one being checked.\n  return true;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI'm sorry to say I couldn't get it to work.  I did\
    \ just find out that array_count_values was a PHP 7 feature, which isn't an option\
    \ for me.  Can you please tell me how I would implement this as a function?\n\
    <|/ c |>\n<| c |>\nI added a function version to the answer as well.\n<|/ c |>\n\
    <| c |>\nThank you so much!  I'm still struggling with how it works, but I will\
    \ be able to make this work.  I will also try to break it down to better understand\
    \ it so I can understand it for future reference.  Again, thank you so much!!\n\
    <|/ c |>\n<| c |>\nYou're welcome! The main thing that you need to understand\
    \ is that the `array_count_values` function counts the occurrences of each unique\
    \ value in the list. So `[1, 2, 3, 4, 5]` would return `3` and `[2, 2, 2, 2, 2]`\
    \ would return `2`. The `is_sorted` function checks to see how many unique values\
    \ there are. If there are more than one, it's not a sorted list. If there are\
    \ 1, it's sorted (assuming that all the duplicates are the same). Otherwise it\
    \ checks to see if the values are ordered.\n<|/ c |>\n<| c |>\nI'm just curious,\
    \ how did you come up with that answer?  Would you mind explaining how you came\
    \ up with it? I'm kind of new and want to learn a lot of new things.  Also, would\
    \ you mind explaining the \"is_sorted\" function?  I'm still not quite understanding\
    \ how it works.\n<|/ c |>\n<| a tags=sorting,php,arrays |>\nThe question has a\
    \ lot of duplicates. Here is another approach that is more efficient (less comparisons)\
    \ but it takes more time to execute. I'm sure there are better algorithms. \n\
    <code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqnyahy8l.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $unique_nums =\
    \ [];\n    $i = 0;\n    for ($j=0; $j<count($lst)-1; $j++) {\n        if ($lst[$j]\
    \ == $lst[$j+1]) {\n            $unique_nums[$j] = $lst[$j];\n        } else {\n\
    \            $unique_nums[$j] = $lst[$j];\n        }\n    }\n    for ($j=0; $j<count($unique_nums)-1;\
    \ $j++) {\n        if ($unique_nums[$j] > $unique_nums[$j+1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmsl13k6.php:45\n\
    Stack trace:\n#0 /tmp/tmpwmsl13k6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwmsl13k6.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj227l6cb.php:29\n\
    Stack trace:\n#0 /tmp/tmpj227l6cb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpj227l6cb.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// return early\
    \ if empty array\n\tif (empty($lst)) {\n\t\treturn true;\n\t}\n\n\t// return false\
    \ if has more than 1 duplicate of the same number\n\t$arr = array_count_values($lst);\n\
    \treturn (count($arr) > 1);\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfqg1abk.php:30\n\
    Stack trace:\n#0 /tmp/tmpqfqg1abk.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqfqg1abk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach($lst as\
    \ $key => $val) {\n        if ($val == $lst[$key + 1]) {\n            continue;\n\
    \        }\n        if ($key + 1 != count($lst)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeagwoa6w.php:32\n\
    Stack trace:\n#0 /tmp/tmpeagwoa6w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpeagwoa6w.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  // write your code\
    \ here\n  return array_count_values($lst) == sort($lst);\n}\n\n$arr = array(1,\
    \ \"2\", 3);\nvar_dump(is_sorted($arr));\n\n$arr = array(1 => \"foo\", 2 => \"\
    bar\", 3 => \"baz\", 4 => \"qux\");\nvar_dump(is_sorted($arr));\n\n$arr = array(1\
    \ => \"foo\", 2 => \"bar\", 3 => \"baz\", 4 => \"qux\");\nvar_dump(is_sorted($arr));\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(true)\nbool(true)\nbool(true)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1ox8uk1u.php:34\nStack trace:\n#0 /tmp/tmp1ox8uk1u.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1ox8uk1u.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Your code here\n\
    \    if(count($lst) == 0 || count($lst) == 1){\n        return count($lst) ===\
    \ 1;\n    }\n    $sortArray = array_count_values($lst);\n    $sortArray = array_slice($sortArray,1);\n\
    \    foreach ($sortArray as $key => $value) {\n        if($key != 0 && $value\
    \ == 1){\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a |>\n<| a tags=sorting,arrays,php dscore=0 |>\nI wrote a function that checks\
    \ if an array is sorted.\n<code>\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppj1kq8no.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$hash = [];\n\t\
    foreach ($lst as $item) {\n\t\t$hash[$item] = $item;\n\t}\n\tasort($hash);\n\t\
    foreach ($hash as $key => $val) {\n\t\tif ($val != $key) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijnhc0az.php:35\n\
    Stack trace:\n#0 /tmp/tmpijnhc0az.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpijnhc0az.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    return array_reduce($lst,\n\
    \        function($a, $b) {\n            return $a ? $a <= $b ? $a : $b : $b;\n\
    \        }, true);\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46sknu1w.php:28\n\
    Stack trace:\n#0 /tmp/tmp46sknu1w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp46sknu1w.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if (count($lst)\
    \ <= 1)\n    return false;\n\n  $last = $lst[0];\n\n  foreach ($lst as $item)\
    \ {\n    if ($item == $last)\n      return false;\n    $last = $item;\n  }\n\n\
    \  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ja7syuv.php:34\n\
    Stack trace:\n#0 /tmp/tmp_ja7syuv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_ja7syuv.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $unique_elements\
    \ = array_unique($lst);\n  if (count($unique_elements) === count($lst)) {\n  \
    \  return true;\n  }\n\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpao5ys1we.php:30\n\
    Stack trace:\n#0 /tmp/tmpao5ys1we.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpao5ys1we.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    sort($lst);\n\
    \    $num_dup = array_count_values($lst);\n    foreach ($num_dup as $val => $count)\
    \ {\n        if ($count > 1) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lant8cb.php:32\n\
    Stack trace:\n#0 /tmp/tmp9lant8cb.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9lant8cb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ === 0) {\n        return true;\n    }\n    $first = $lst[0];\n    for ($i =\
    \ 1; $i < count($lst); $i++) {\n        if ($lst[$i] !== $first) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tlpmydn.php:33\n\
    Stack trace:\n#0 /tmp/tmp6tlpmydn.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6tlpmydn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$dupes = array();\n\tforeach ($lst as $key => $num) {\n\t\tif ($sorted) {\n\t\
    \t\tif ($num != $sorted[0]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\
    \t\t\t$sorted = false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif ($num == $sorted[0])\
    \ {\n\t\t\t\t$dupes[] = $key;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($dupes) > 1) {\n\
    \t\treturn false;\n\t}\n\telse {\n\t\treturn $sorted;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7t3veegi.php:45\n\
    Stack trace:\n#0 /tmp/tmp7t3veegi.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7t3veegi.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ > 1) {\n        foreach ($lst as $key => $value) {\n            if ($lst[$key]\
    \ == $lst[$key-1]) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm_j09e4.php:31\n\
    Stack trace:\n#0 /tmp/tmpvm_j09e4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvm_j09e4.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Sorts a duplicate\
    \ of the last element in a list\n    // if the list is longer than the duplicate\
    \ number.\n    $last_item = array_pop($lst);\n\n    $sorted_lst = array_reverse($lst);\n\
    \    return array_diff($sorted_lst, array($last_item))===[];\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0s3w3ca.php:29\n\
    Stack trace:\n#0 /tmp/tmpk0s3w3ca.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk0s3w3ca.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    return is_array($lst)\
    \ && count($lst) <= 1 &&\n        array_count_values($lst) == array_count_values($lst);\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_eya1fx.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_eya1fx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1_eya1fx.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $counts = array_count_values($lst);\n\
    \    foreach ($counts as $number => $count) {\n        if ($count > 1) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2241mukm.php:31\n\
    Stack trace:\n#0 /tmp/tmp2241mukm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2241mukm.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  sort($lst);\n  foreach\
    \ ($lst as $key => $val) {\n    if ($val != $lst[$key]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyn0a24x.php:31\n\
    Stack trace:\n#0 /tmp/tmpoyn0a24x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpoyn0a24x.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $first = array_shift($lst);\n\
    \  $length = count($lst);\n  $passed = $first === $lst[0];\n  for ($i = 1; $i\
    \ < $length; ++$i) {\n    $passed = ($lst[$i] <= $first && $passed) || !$passed;\n\
    \  }\n  return $passed;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptg7fs2ao.php:28\n\
    Stack trace:\n#0 /tmp/tmptg7fs2ao.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptg7fs2ao.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$length = count($lst);\n\
    \tif ($length < 1) return true;\n\n\t$sorted_keys = array_keys($lst);\n\t$sorted_keys[$length\
    \ - 1] = $length;\n\n\tforeach ($sorted_keys as $key => $sorted_key) {\n\t\t$count\
    \ = 0;\n\t\tforeach ($lst as $value) {\n\t\t\tif ($value == $sorted_key) {\n\t\
    \t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count > 1) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9wm3pqsz.php:43\n\
    Stack trace:\n#0 /tmp/tmp9wm3pqsz.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9wm3pqsz.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ === 1) return true;\n    if ($lst[0] === $lst[1]) return false;\n    sort($lst);\n\
    \    if ($lst[0] !== $lst[1]) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbx027rq.php:29\n\
    Stack trace:\n#0 /tmp/tmpxbx027rq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxbx027rq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach ($lst\
    \ as $i => $n) {\n        if ($i == $n) return false;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflj4gytz.php:34\n\
    Stack trace:\n#0 /tmp/tmpflj4gytz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpflj4gytz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach ($lst\
    \ as $element) {\n        $prevElement = $element;\n        $nextElement = $element;\n\
    \        $found = true;\n        for ($i = 1; $i < count($lst); $i++) {\n    \
    \        if ($lst[$i] <= $prevElement) {\n                $found = false;\n  \
    \              break;\n            } else if ($lst[$i] >= $prevElement) {\n  \
    \              $found = false;\n                break;\n            } else if\
    \ ($lst[$i] == $prevElement) {\n                $prevElement = $prevElement >\
    \ $nextElement ? $prevElement : $nextElement;\n                $nextElement =\
    \ $nextElement < $prevElement ? $nextElement : $prevElement;\n            } else\
    \ {\n                $found = false;\n                break;\n            }\n\
    \        }\n        if (!$found) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7oqkbqy.php:46\n\
    Stack trace:\n#0 /tmp/tmpj7oqkbqy.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpj7oqkbqy.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    foreach ($count as $num => $count) {\n        if ($count > 1) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_b5hzrg.php:31\n\
    Stack trace:\n#0 /tmp/tmpv_b5hzrg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpv_b5hzrg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (is_array($lst))\
    \ {\n        $cnt = 0;\n        foreach ($lst as $num) {\n            if ($cnt\
    \ === 1) {\n                return false;\n            }\n            ++$cnt;\n\
    \        }\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8tcdy0e.php:34\n\
    Stack trace:\n#0 /tmp/tmpl8tcdy0e.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl8tcdy0e.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if (count($lst)\
    \ === 1) return true;\n  $last = end($lst);\n  return $lst[0] < $last;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzm_lp998.php:27\n\
    Stack trace:\n#0 /tmp/tmpzm_lp998.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpzm_lp998.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// Loop through\
    \ each number in the array\n\tforeach($lst as $num) {\n\t\t// If this is the first\
    \ time we've seen this number, return True\n\t\tif(isset($nums[$num])) {\n\t\t\
    \treturn true;\n\t\t}\n\t\t// Add the number to the list\n\t\t$nums[$num] = true;\n\
    \t}\n\t// If no duplicate numbers were found, return True\n\treturn false;\n}\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fddlvb9.php:32\n\
    Stack trace:\n#0 /tmp/tmp4fddlvb9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4fddlvb9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted = true;\n\
    \  for ($i = 0, $count = count($lst); $i < $count - 1; ++$i) {\n    $sorted =\
    \ $sorted && (($lst[$i] <= $lst[$i + 1]));\n  }\n  return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9poea360.php:36\n\
    Stack trace:\n#0 /tmp/tmp9poea360.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9poea360.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tsort($lst);\n\t\
    $result = true;\n\tforeach ($lst as $v) {\n\t\tif ($v != $lst[0]) {\n\t\t\t$result\
    \ = false;\n\t\t}\n\t}\n\treturn $result;\n}\n$result = is_sorted($arr);\nif ($result)\
    \ echo \"$arr sorted in ascending order\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, null given in /tmp/tmp8moj3yq4.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp8moj3yq4.php\
    \ on line 17\n sorted in ascending order\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp8moj3yq4.php:32\nStack trace:\n#0 /tmp/tmp8moj3yq4.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8moj3yq4.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  foreach ($lst as\
    \ $el) {\n    if ($el != $el) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0rwk94b.php:30\n\
    Stack trace:\n#0 /tmp/tmpx0rwk94b.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpx0rwk94b.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
