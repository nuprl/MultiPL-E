name: HumanEval_5_intersperse
language: php
results:
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $list = [];\n    foreach ($numbers as $number) {\n        $list[] = $number;\n\
    \        if ($delimeter) {\n            $list[] = $delimeter;\n        }\n   \
    \ }\n    return $list;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsi12qs4.php:24\n\
    Stack trace:\n#0 /tmp/tmpcsi12qs4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcsi12qs4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) === 0) {\n        return $numbers;\n    }\n    $result\
    \ = array_merge(array($numbers[0]), $numbers);\n    $index = 2;\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $delimeter . $value . $delimeter;\n\
    \        $index += 1;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqbsf10x.php:26\n\
    Stack trace:\n#0 /tmp/tmpgqbsf10x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgqbsf10x.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers === []) {\n        return [];\n    }\n    return array_merge(array_slice($numbers,\
    \ 0, -1), [$delimeter], array_slice($numbers, -1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4v3aeok9.php:20\n\
    Stack trace:\n#0 /tmp/tmp4v3aeok9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4v3aeok9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (!is_array($numbers)) {\n\t\tthrow new InvalidArgumentException(__METHOD__\
    \ . '() expects parameter 1 to be array, ' . gettype($numbers) . ' given');\n\t\
    }\n\n\tif (!is_numeric($delimeter)) {\n\t\tthrow new InvalidArgumentException(__METHOD__\
    \ . '() expects parameter 2 to be numeric, ' . gettype($delimeter) . ' given');\n\
    \t}\n\n\t$numbers_copy = array_flip($numbers);\n\t$result = [];\n\tforeach ($numbers_copy\
    \ as $key => $value) {\n\t\tif ($key == 0 || $key % $delimeter == 0) {\n\t\t\t\
    $result[] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/**\n * Intersperses\
    \ elements in a list with another list into a third list until all elements of\n\
    \ * the first list have been exhausted\n *\n * When an element is encountered\
    \ that does not appear in the first list, it will be appended\n * to the second\
    \ list\n *\n * When an element is encountered that does appear in the first list,\
    \ the element from the first\n * list will be appended to the third list, unless\
    \ the third list is exhausted\n *\n * Example 1:\n * >>> intersperse([3, 5, 7],\
    \ [2], [1, 2, 3])\n * [2, 5, 3, 7]\n * >>> intersperse([3, 2, 1], [5, 6, 7], [1,\
    \ 2, 3])\n * [1, 2, 3, 5, 6, 7]\n *\n * Example 2:\n * >>> intersperse([2, 4,\
    \ 6], [3, 7], [1])\n * [1, 3, 2, 4, 6, 7]\n * >>> intersperse([5, 8], [4, 5],\
    \ [0])\n * [4, 0, 5, 8]\n */\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqghrp6p0.php:54\n\
    Stack trace:\n#0 /tmp/tmpqghrp6p0.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpqghrp6p0.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(\n        $numbers,\n        function ($carry, $current)\
    \ use ($delimeter) {\n            return array_slice($carry, 0, -1) . $delimeter\
    \ . $current;\n        },\n        []\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, string given\
    \ in /tmp/tmpla0y_dam.php on line 11\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, string given in /tmp/tmpla0y_dam.php on line 11\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, string given in /tmp/tmpla0y_dam.php on line\
    \ 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla0y_dam.php:23\n\
    Stack trace:\n#0 /tmp/tmpla0y_dam.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpla0y_dam.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_reduce($numbers, function ($numbers, $value) {\n    return $numbers\
    \ !== null ? array_merge($numbers, [$value]) : [$value];\n  }, []);\n}\n</code>\n\
    <|/ a tags=laravel,php,laravel-collection |>\n<| a dscore=0 tags=laravel,php,laravel-collection\
    \ |>\nYou can use this code.\n<code>\n$a = collect(array(\"1\", \"2\", \"3\",\
    \ \"4\"));\n$a->each(function ($x, $y) use (&$a){\n    $a->put($y,$x.$y);\n});\n\
    dd($a);\n</code>\n<|/ a |>\n<| a |>\nTry this one:\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5gibglbh.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_chunk($numbers, ceil(count($numbers) / 2))\n         + array_chunk($numbers,\
    \ ceil(count($numbers) / 2 + 1));\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_chunk(): Size parameter expected to be greater than 0\
    \ in /tmp/tmp6a4q4bcd.php on line 8\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmp6a4q4bcd.php:9\nStack trace:\n#0 /tmp/tmp6a4q4bcd.php(13):\
    \ intersperse(Array, 7)\n#1 /tmp/tmp6a4q4bcd.php(17): candidate(Array, 7)\n#2\
    \ /tmp/tmp6a4q4bcd.php(22): test()\n#3 {main}\n  thrown in /tmp/tmp6a4q4bcd.php\
    \ on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $output = [];\n    foreach ($numbers as $number) {\n        $output[] = $number;\n\
    \        if ($number != $delimeter) {\n            $output[] = $delimeter;\n \
    \       }\n    }\n    return $output;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a |>\nI got here searching for an answer to the same question, but with regards\
    \ to array values instead of indices. This is what I came up with:\n<code>\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp234qygc9.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function($numbers, $number) {\n        return\
    \ is_array($numbers) ? array_merge($numbers, array($number)) : array($number);\n\
    \    }, array($delimeter));\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wzwsbaf.php:18\n\
    Stack trace:\n#0 /tmp/tmp3wzwsbaf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3wzwsbaf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \treturn implode($delimeter, array_merge(\n\t\tarray_fill(0, count($numbers) /\
    \ 2, $delimeter),\n\t\t$numbers,\n\t\tarray_fill(count($numbers) / 2, count($numbers),\
    \ $delimeter)\n\t));\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tt0bc3r.php:20\n\
    Stack trace:\n#0 /tmp/tmp5tt0bc3r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5tt0bc3r.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function($numbers, $num) use ($delimeter) {\n\
    \        return array_map(function($num) use ($delimeter) { return $num . $delimeter;\
    \ }, $numbers, $num);\n    }, []);\n}\n</code>\nSee it in action\n<|/ a dscore=4\
    \ |>\n<| a |>\nUsing Laravel's array_chunk function:\n<code>\narray_chunk(range(1,\
    \ 10), 2);\n</code>\nResults in:\n<code>\n[\n    1 => [2 => 3, 3 => 4],\n    2\
    \ => [3 => 5, 4 => 6],\n    3 => [4 => 7, 5 => 8],\n    4 => [5 => 9, 6 => 10],\n\
    ]\n</code>\n<|/ a tags=php,arrays dscore=4 |>\n<| a |>\n<code>\n$numbers = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$numberCount = count($numbers);\n$chunkSize =\
    \ max($numberCount/2, 1);\n\n$newArray = array();\nfor($i=0; $i<$numberCount;\
    \ $i++){\n    if($i%$chunkSize){\n        $newArray[] = $numbers[$i];\n    } else\
    \ {\n        $newArray[] = $numbers[$i].','.$numbers[$i+$chunkSize];\n    }\n\
    }\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 1,2,3\n    [1] => 4,5,6\n  \
    \  [2] => 7,8,9\n    [3] => 10,\n)\n</code>\n<|/ a dscore=4 tags=php,arrays |>\n\
    <| c |>\nThis answer is not what was asked for\n<|/ c |>\n<| c |>\n, This is not\
    \ what was asked for. Maybe it was changed by someone. Anyways, I edited my answer\
    \ to include the requested output.\n<|/ c |>\n<| a dscore=4 |>\nUsing array_chunk()\
    \ you can split an array into chunks. An example is given below.\n<code>\n$array\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$chunks = array_chunk($array, 2);\n\nforeach\
    \ ($chunks as $key => $value){\n    echo $value[0].\"\\n\";\n    echo $value[1].\"\
    \\n\";\n}\n</code>\nOutput:\n<code>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThe \"2\" you pass to array_chunk() will make\
    \ it only split by 2 items, and not into chunks of any size\n<|/ c |>\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl1jpv4ce.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $n) {\n        $result[] = $n;\n\
    \        if ($n === $delimeter) {\n            $result[] = $delimeter;\n     \
    \   }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer - it works exactly how it should.\n<|/ c |>\n\
    <| c |>\nI agree, this is much cleaner. Thanks!\n<|/ c |>\n<| c |>\nIt's not that\
    \ clean in other languages such as javascript or typescript. This answer is better\
    \ in those languages.\n<|/ c |>\n<| c |>\nThis is not an answer, this is simply\
    \ a comment. Your answer simply tells how to make a custom function which will\
    \ do what `array_combine` does. It doesn't solve the problem of writing it yourself\
    \ and also doesn't explain why your solution is better, or why `array_combine`\
    \ doesn't exist in the first place.\n<|/ c |>\n<| c |>\n: I did not say that this\
    \ function is better, just an answer to the question that OP asked. I also explained\
    \ why `array_combine` doesn't exist in my answer :-)\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nThe only solution I found was by using the array_combine function, which\
    \ creates an array keyed by the first argument:\n<code>\n$array1 = [1, 2, 3];\n\
    $array2 = ['a', 'b', 'c'];\n\n$array1 = array_combine($array1, $array2);\nprint_r($array1);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [1] => a\n    [2] => b\n    [3] => c\n\
    )\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIt doesn't answer the question at all,\
    \ just shows another method.\n<|/ c |>\n<| c |>\nThe only correct answer here.\
    \ Since you asked the question, you know the answer, and are just saying \"it\
    \ won't work\". So please stop complaining about this.\n<|/ c |>\n<| c |>\nAs\
    \ far as I can tell, the question was answered here: https://stackoverflow.com/a/35104066/1348994\n\
    <|/ c |>\n<| c |>\nIf you have many arrays, you can combine them before creating\
    \ a new array using array_merge() method.\n<|/ c |>\n<| a tags=arrays,php |>\n\
    In case you need this in more complicated scenarios, where you have more arrays\
    \ and want to merge them with a specific key. You can use the below function:\n\
    <code>\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp25to82bs.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) < 2)\n        return $numbers;\n    return array_merge(array_chunk($numbers,\
    \ count($numbers) / 2)\n        , $numbers[count($numbers) / 2 .. count($numbers)],\
    \ array_chunk($numbers, count($numbers) / 2, true));\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpma2y27x_.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return $numbers == null ? '' : implode($delimeter, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbnj5hhn.php:16\n\
    Stack trace:\n#0 /tmp/tmpjbnj5hhn.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpjbnj5hhn.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $numbers = array_values($numbers);\n  return implode($delimeter, $numbers);\n\
    }\n</code>\n<|/ a dscore=5 tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ dscore=5 |>\nThis works for me:\n<code>\n$array = array(1, 3, 4, 6, 7, 8);\n\
    sort($array, SORT_NUMERIC);\n$sortedArray = array_merge($array, array());\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays,sorting dscore=5 |>\narray_push() only accepts\
    \ 1 parameter so you can't use it to insert 2 items.  Try this:\n<code>\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1v6il_2t.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) == 0) {\n        return $numbers;\n    }\n    $first\
    \ = $numbers[0];\n    if (is_numeric($first)) {\n        return array_map(function($e)\
    \ use ($delimeter) {\n            return $e + $delimeter;\n        }, $numbers);\n\
    \    }\n    return array_map(function($e) use ($delimeter) {\n        return $e\
    \ + $delimeter + $delimeter;\n    }, $numbers);\n}\n</code>\nAnd we have:\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpba1na4mz.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_merge(\n        $numbers,\n        array_map(\n            function\
    \ ($number) {\n                return $number.$delimeter;\n            },\n  \
    \          $numbers\n        )\n    );\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7ef0rb3.php:25\n\
    Stack trace:\n#0 /tmp/tmpd7ef0rb3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd7ef0rb3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  if ($numbers == null || !is_array($numbers)) return $numbers;\n  if (empty($numbers))\
    \ return $numbers;\n\n  $interspersed_numbers = [];\n  $last = $numbers[0];\n\
    \  foreach ($numbers as $number) {\n    if ($number == $last) {\n      $interspersed_numbers[]\
    \ = $last;\n    } else {\n      $interspersed_numbers[] = $last;\n      $interspersed_numbers[]\
    \ = $number;\n    }\n\n    $last = $number;\n  }\n\n  if ($last == $delimeter)\
    \ {\n    $interspersed_numbers[] = $last;\n  }\n\n  return $interspersed_numbers;\n\
    }\n\n/**\n * Return a 'natural' number in base 'base'.\n */\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiry4wpgw.php:40\n\
    Stack trace:\n#0 /tmp/tmpiry4wpgw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpiry4wpgw.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $key => $value) {\n        $result[]\
    \ = $value;\n        if (count($result) >= 2) {\n            $result[] = $delimeter;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo06_78hg.php:24\n\
    Stack trace:\n#0 /tmp/tmpo06_78hg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpo06_78hg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = array_map('intval', $numbers);\n\n    return array_chunk($numbers,\
    \ ceil(count($numbers) / 2))\n        ? array_map(function ($chunk) {\n      \
    \      return implode($delimeter, $chunk);\n        }, $numbers)\n        : [];\n\
    }\n</code>\n<|/ a dscore=1 tags=php,arrays,math |>\n<| c |>\nThanks! Just to point\
    \ out that `$delimeter` needs to be an integer.\n<|/ c |>\n<| c |>\nThanks, but\
    \ it's only adding 1 for each set of 3 numbers. `intersperse([1, 4, 5], 3)` returns\
    \ `[3, 4, 5, 4, 5, 3]`.\n<|/ c |>\n<| c |>\nI see. It looks like I misunderstood\
    \ your question, then. I thought you wanted each number to have it's own separate\
    \ \"chunk\". Is that a bad assumption?\n<|/ c |>\n<| c |>\nActually yes, that's\
    \ it. It should read like \"add 1 for each set of 2 numbers, add 1 for each set\
    \ of 3 numbers, etc.\"\n<|/ c |>\n<| c |>\nSorry, I didn't realize you wanted\
    \ each number to be in it's own chunk.\n<|/ c |>\n<| a |>\nI wrote my own recursive\
    \ solution.\n<code>\n<?php\n\n/**\n * Helper function to get every N elements\
    \ from an array\n * $array array source array\n * int $offset offset\n * int $stride\
    \ stride of the array\n * array result of every Nth element\n */\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe6hzji_q.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        $result[] = $delimeter;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7k1orozo.php:22\n\
    Stack trace:\n#0 /tmp/tmp7k1orozo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7k1orozo.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    array_push($result,\
    \ $number);\n    array_push($result, $delimeter);\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr44eayg.php:22\n\
    Stack trace:\n#0 /tmp/tmpwr44eayg.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwr44eayg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(\n        $numbers,\n        function ($carry, $number)\
    \ {\n            return $carry ? array_merge(array($number), $carry) : array($number);\n\
    \        },\n        array()\n    );\n}\n</code>\n<|/ a |>\n<| c |>\nThat is so\
    \ great! I really like how you used array_reduce to create your intersperse method.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer, especially considering\
    \ the performance of `array_reduce` (which, while a little slow, can still be\
    \ faster than writing a custom function). +1 for array_reduce.\n<|/ c |>\n<| a\
    \ dscore=5 tags=php,arrays |>\nHow about using a foreach loop instead? \n<code>\n\
    foreach($array as $key => $value) {\n    if($key % 2 == 0) {\n        $evens[]\
    \ = $value;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nI love this solution. I used\
    \ it to insert a comma after every 2 items in an array, and it worked wonders.\
    \ Thank you!\n<|/ c |>\n<| a dscore=5 tags=php,arrays |>\nA solution using array_filter\
    \ and array_map functions:\n<code>\n$myArray = array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10);\n\n$filteredArray = array_filter($myArray, function($item){\n    return\
    \ ($item % 2 != 0); // filter even numbers only\n});\n\n$evenArray = array_map(function($item){\n\
    \    return $item; // map even numbers back\n}, $filteredArray);\n</code>\nThe\
    \ result is:\n<code>\narray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 7, 8, 9, 10, 10,\
    \ 10, 10, 10, 10)\n</code>\n<|/ a |>\n<| c |>\nGreat solution! The only problem\
    \ is that array_filter does not take callbacks for its second argument, so you'll\
    \ need to define that function first.\n<|/ c |>\n<| c |>\nIt's not obvious to\
    \ me how to define `array_filter()` and `array_map()` as callback functions, but\
    \ this works nicely!\n<|/ c |>\n<| a dscore=5 tags=php,arrays |>\nThe most straightforward\
    \ solution is probably a for loop:\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $evens = array();\nfor($i = 0; $i < count($array); $i++){\n    if ($i % 2 ===\
    \ 0) {\n        $evens[] = $array[$i];\n    }\n}\n</code>\n<|/ a |>\n<| c |>\n\
    You \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprp5nyoeh.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (is_null($numbers)) {\n        return $numbers;\n    }\n    $numbers =\
    \ array_filter($numbers);\n    return array_map(\n        function ($value) use\
    \ ($delimeter) {\n            return $value . $delimeter;\n        },\n      \
    \  array_chunk($numbers, 2)\n    );\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ a tags=php,arrays |>\nHere is a solution I came up with:\n<code>\n<?php\n\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpagcbpwp6.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n\n    return array_map(function\
    \ ($number) {\n        return $number . $delimeter;\n    }, $numbers);\n}\n\n\
    /**\n * Creates a string containing the most number of items in an array.\n *\n\
    \ * >>> most_count([5, 6, 2, 1])\n * 6\n *\n * @param array  $array   An array\n\
    \ * @param string $delimeter A delimeter\n *\n * @return int\n */\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb36lziqi.php:34\n\
    Stack trace:\n#0 /tmp/tmpb36lziqi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb36lziqi.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_map(function ($number) {\n        return $number . $delimeter;\n\
    \    }, $numbers);\n}\n</code>\n<|/ a |>\n<| a |>\nWith array_map\n<code>\n$arr\
    \ = [1, 2, 3];\n$res = [];\narray_map(function ($v) use (&$res) {\n    $res[]\
    \ = $v * 2;\n}, $arr);\nprint_r($res);\n</code>\n<|/ a tags=arrays,php dscore=3\
    \ |>\n<| a tags=arrays,php |>\nIf you have PHP 5.5+ you can use the splat operator\
    \ for this:\n<code>\n$arr = [1, 2, 3];\n$res = [$arr[0]];\n\nfor ($i = 1; $i <\
    \ count($arr); $i++) {\n    $res[] = $arr[$i] * 2;\n}\n\nvar_dump($res);\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nI don't have 5.5 :D\n<|/ c |>\n<| c |>\nIf you don't\
    \ have 5.5, you can install a package that provides it. It's called [SPL](http://php.net/spl)\n\
    <|/ c |>\n<| c |>\n: You can use this code with the [ArrayIterator Class](http://php.net/manual/en/class.arrayiterator.php)\
    \ on older versions of PHP.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\nforeach($arr\
    \ as $k=>$v){\n    $res[] = $v*2;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nthis\
    \ can be even simplified as $res = array_map(function($v){ return $v*2; }, $arr);\n\
    <|/ c |>\n<| c |>\n, that's why I put it in a foreach loop\n<|/ c |>\n<| a |>\n\
    <code>\n$arr = array(1,2,3);\n$arr = array_map(function($el){ return $el*2; },\
    \ $arr);\n</code>\n<|/ a dscore=2 tags=arrays,php |>\n<| c |>\nPlease add some\
    \ comments to your answer to explain why this answers the question.\n<|/ c |>\n\
    <| a |>\n<code>\n$arr = [1,2,3];\n$result = [];\nforeach($arr as $a){\n    $result[]\
    \ = $a * 2;\n}\nvar_dump($result);\n</code>\n<|/ a tags=arrays,php dscore=2 |>\n\
    <| c |>\nThis will give a warning on the first iteration\n<|/ c |>\n<| a dscore=2\
    \ \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpws2y8s3y.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $out = [];\n\n    foreach ($numbers as $number) {\n        $out[] = $number;\n\
    \n        if ($numbers[$number]->isEmpty()) {\n            continue;\n       \
    \ }\n\n        $out = array_merge($out, $numbers[$number]->intersperse($delimeter));\n\
    \    }\n\n    return $out;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function isEmpty() on null\
    \ in /tmp/tmpj0l2z7qx.php:13\nStack trace:\n#0 /tmp/tmpj0l2z7qx.php(24): intersperse(Array,\
    \ 8)\n#1 /tmp/tmpj0l2z7qx.php(29): candidate(Array, 8)\n#2 /tmp/tmpj0l2z7qx.php(33):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpj0l2z7qx.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $results = [];\n    $last_item = null;\n    foreach ($numbers as $number)\
    \ {\n        $results[] = $last_item ?? $number;\n        $last_item = $number;\n\
    \    }\n    return array_merge(array_slice($results, 0, $delimeter + 1), [$delimeter\
    \ => $last_item], array_slice($results, $delimeter + 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rpasbks.php:22\n\
    Stack trace:\n#0 /tmp/tmp0rpasbks.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp0rpasbks.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \treturn implode('', array_map('strval', array_chunk($numbers, 2)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenvb_tnz.php:16\n\
    Stack trace:\n#0 /tmp/tmpenvb_tnz.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpenvb_tnz.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $output = $numbers[0];\n    foreach ($numbers as $number) {\n        $output\
    \ .= $delimeter . $number;\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3rfh49m.php:20\n\
    Stack trace:\n#0 /tmp/tmpw3rfh49m.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpw3rfh49m.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_map(function($number) {\n        return $number . $delimeter;\n\
    \    }, $numbers);\n}\n</code>\nThe advantage of this approach is that we do not\
    \ need to change any existing code, and we just add a new method, which is less\
    \ \"magical\" than our initial attempt at the method. Also, we can easily make\
    \ use of array_reduce for this very purpose.\nThe disadvantage is that array_map\
    \ only accepts one function as an argument, and we would need a different method\
    \ for each different type of delimeter (for example, a space, or a comma, or a\
    \ dash). If we were to add a new delimeter, we'd need to add a new method to our\
    \ intersperse method, which is somewhat cumbersome and repetitive.\nIn order to\
    \ solve this, we can use a combination of array_reduce, array_map and array_slice.\
    \ Instead of accepting a delimeter, we simply accept the delimiter as an argument,\
    \ and use array_slice to remove the first element from the array before we apply\
    \ the array_reduce method.\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpokdq9o7x.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $key => $num) {\n        $result[$key]\
    \ = $num;\n        if ($key < count($numbers) - 1) {\n            $result[$key]\
    \ .= $delimeter;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcazx6zxm.php:24\n\
    Stack trace:\n#0 /tmp/tmpcazx6zxm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcazx6zxm.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) < 2) return $numbers;\n    $output = $numbers[0];\n \
    \   foreach ($numbers as $number) {\n        $output .= $delimeter. $number;\n\
    \    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2qzkhwr.php:22\n\
    Stack trace:\n#0 /tmp/tmpb2qzkhwr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb2qzkhwr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $count = $delimeter - 1;\n    foreach ($numbers as $number)\
    \ {\n        $result[] = $number;\n        if ($count < 0) {\n            $count\
    \ = $delimeter - abs($count);\n        }\n        $count -= 1;\n    }\n    return\
    \ $result;\n}\n\n/**\n * Remove all characters from the beginning of the string\
    \ until the specified character\n * is encountered or the end of the string is\
    \ reached.\n *\n * Strings are assumed to contain one or more characters, and\
    \ are immutable.\n *\n * @since 4.7.0\n *\n * @param string $string\n * @param\
    \ string $character\n * @return string\n */\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzdg0s8i.php:38\n\
    Stack trace:\n#0 /tmp/tmplzdg0s8i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplzdg0s8i.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = [];\n  foreach ($numbers as $number) {\n    if ($number !== $delimeter)\
    \ {\n      $result[] = $number;\n    } else {\n      $result[] = '';\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6x9b5s2.php:25\n\
    Stack trace:\n#0 /tmp/tmpo6x9b5s2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpo6x9b5s2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(\n        $numbers,\n        function($carry, $item)\
    \ use ($delimeter) {\n            return array_merge(\n                array_slice($carry,\
    \ 0, $delimeter),\n                array($item),\n                array_slice($carry,\
    \ $delimeter)\n            );\n        },\n        []\n    );\n}\n</code>\n(Demo)\n\
    <|/ a tags=php |>\n<| a dscore=1 |>\nYou can use array_merge_recursive like this:\n\
    <code>\n$numbers = [1, 2, 3, 10, 11, 12];\n\n$result = array_merge_recursive(\n\
    \    array_slice($numbers, 0, 2),\n    [4],\n    array_slice($numbers, 2)\n);\n\
    </code>\nIf you want a more generic approach that allows an array of values instead\
    \ of a fixed number of values, use array_pad:\n<code>\n$result = array_merge_recursive(\n\
    \    array_pad($numbers, 2, []),\n    [4],\n    array_pad($numbers, 2, [])\n);\n\
    </code>\n<|/ a tags=php |>\n<| a |>\nTry this\n<code>\n$numbers = [1,2,3,4,5,6,7,8,9,10];\n\
    $numbers = array_map(function($number) { return $number + 1; }, $numbers);\n$numbers\
    \ = array_merge($numbers, [4,5]);\n\nprint_r($numbers);\n</code>\noutput:\n<code>\n\
    Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 [5] => 6 [6] => 7 [7] =>\
    \ 8 [8] => 9 [9] => 10 )\n</code>\n<|/ a dscore=1 tags=php |>\n<| a tags=php |>\n\
    I would say use array_chunk for your problem, it will split your array into chunks\
    \ and then you can easily add your element.\n<code>\narray_chunk($myArray, 2)\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nTry this code:\n<code>\n$array = array(1,\
    \ 2, 3, 10, 11, 12);\n\narray_push($array, 4);\narray_push($array, 5);\n\n$newArray\
    \ = array_merge($array);\n</code>\n<|/ a dscore=1 tags=php |>\n<| a |>\n<code>\n\
    $numbers = array(1, 2, 3, 4, 5,6,7,8,9,10);\n$numbers = array_merge($numbers,\
    \ [4,5]);\n\necho '<pre>';\nprint_r($numbers);\n</code>\n<|/ a tags=php dscore=1\
    \ |>\n<| a |>\n<code>\n$numbers = [1, 2, 3, 10, 11, 12];\n\n$numbers = array_merge($numbers,\
    \ [4,5]);\n\necho '<pre>';\nprint_r($numbers);\n</code>\n<|/ a dscore\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5u9dboph.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (!is_array($numbers) || empty($numbers)) {\n\t\treturn [];\n\t}\n\t$result\
    \ = [];\n\t$i = 0;\n\t$length = count($numbers);\n\twhile ($i < $length) {\n\t\
    \t$result[] = $numbers[$i];\n\t\t$i += $delimeter;\n\t}\n\treturn $result;\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pfwk36u.php:27\n\
    Stack trace:\n#0 /tmp/tmp9pfwk36u.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9pfwk36u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $list = array_map(function($number) use ($delimeter) {\n    return $number\
    \ . $delimeter;\n  }, $numbers);\n  return array_chunk($list, 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpype_e68u.php:20\n\
    Stack trace:\n#0 /tmp/tmpype_e68u.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpype_e68u.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = $number;\n\
    \    if (isset($numbers[$i + 1]) && $numbers[$i + 1] === $delimeter) {\n     \
    \ $result[] = $delimeter;\n      $i++;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1104ygp0.php:24\n\
    Stack trace:\n#0 /tmp/tmp1104ygp0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1104ygp0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $first = true;\n    $ret = [];\n\n    foreach ($numbers as $number) {\n \
    \       if ($first) {\n            $ret[] = $number;\n            $first = false;\n\
    \        } else {\n            $ret[] = $delimeter;\n            $ret[] = $number;\n\
    \        }\n    }\n\n    return $ret;\n}\n</code>\n<|/ a |>\n<| a tags=php |>\n\
    I solved this a little differently but this solution also works.  I took some\
    \ of the other answers and combined them:\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpixsyps6b.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($result, $number) {\n        return\
    \ $result + $number . $delimeter;\n    }, '');\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9apkomz.php:18\n\
    Stack trace:\n#0 /tmp/tmpu9apkomz.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpu9apkomz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n\n    return array_map(function\
    \ ($i) use ($numbers, $delimeter) {\n        return $i + $delimeter * (count($numbers)\
    \ - 1 - $i);\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabp_2q5n.php:23\n\
    Stack trace:\n#0 /tmp/tmpabp_2q5n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpabp_2q5n.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = array_filter($numbers);\n    return array_chunk($numbers, ceil(count($numbers)\
    \ / 2)) + array_chunk($numbers, ceil(count($numbers) / 2), $delimeter);\n}\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: array_chunk(): Size parameter expected to be greater than 0\
    \ in /tmp/tmp8rsfohm0.php on line 9\n\nWarning: array_chunk(): Size parameter\
    \ expected to be greater than 0 in /tmp/tmp8rsfohm0.php on line 9\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8rsfohm0.php:16\nStack trace:\n\
    #0 /tmp/tmp8rsfohm0.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp8rsfohm0.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(\n        array_map(\n            function($numbers)\
    \ {\n                return [$numbers => $numbers];\n            },\n        \
    \    array_chunk($numbers, 2)\n        ),\n        function($numbers) {\n    \
    \        return array_map(function($number) {\n                return $number\
    \ + $delimeter;\n            }, $numbers);\n        },\n        []\n    );\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: Illegal offset type in /tmp/tmpkdhzl7f7.php on line 11\n\nWarning:\
    \ Illegal offset type in /tmp/tmpkdhzl7f7.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpkdhzl7f7.php:30\nStack trace:\n#0 /tmp/tmpkdhzl7f7.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkdhzl7f7.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!$numbers) return $numbers;\n    return array_reduce($numbers, function($carry,\
    \ $item) {\n        return $carry .= $delimeter. $item;\n    });\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's a PHP solution that will handle non-numeric\
    \ or non-integer values like \"abc\".\n<code>\n$numbers = array(\n    \"0\",\n\
    \    0,\n    1,\n    1.5,\n    1.75,\n    2,\n    2.25,\n    2.5,\n    2.75,\n\
    \    3,\n    3.25,\n    3.5,\n    3.75,\n    4,\n    4.25,\n    4.5,\n    4.75,\n\
    \    5,\n    5.25,\n    5.5,\n    5.75,\n    6,\n    6.25,\n    6.5,\n    6.75,\n\
    \    7,\n    7.25,\n    7.5,\n    7.75,\n    8,\n    8.25,\n    8.5,\n    8.75,\n\
    \    9,\n    9.25,\n    9.5,\n    9.75,\n    10,\n    10.25,\n    10.5,\n    10.75,\n\
    \    11,\n    11.25,\n    11.5,\n    11.75,\n    12,\n    12.25,\n    12.5,\n\
    \    12.75,\n    13,\n    13.25,\n    13.5,\n    13.75,\n    14,\n    14.25,\n\
    \    14.5,\n    14.75,\n    15,\n    15.25,\n    15.5,\n    15.75,\n    16,\n\
    \    16.25,\n    16.5,\n    16.75,\n    17,\n    17.25,\n    17.5,\n    17.75,\n\
    \    18,\n    18.25,\n    18.5,\n    18.75,\n    19,\n    19.25,\n    19.5,\n\
    \    19.75,\n    20,\n    20.25,\n    20.5,\n    20.75,\n    21,\n    21.25,\n\
    \    21.5,\n    21.75,\n    22,\n    22.25,\n    22.5,\n    22.75,\n    23,\n\
    \    23.25,\n    23.5,\n    23.75,\n    24,\n    24.25,\n    24.5,\n    24.75,\n\
    \    25,\n    25.25,\n    25.5,\n    25.75,\n    26,\n    26.25,\n    26.5,\n\
    \    26.75,\n    27,\n    27.25,\n    27.5,\n    27.\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzie2ok5t.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // return if the list has only one element or is empty\n    if (count($numbers)\
    \ <= 1 || is_null($numbers[0]))\n        return [];\n\n    // initialize new empty\
    \ list to return\n    $result = [];\n\n    // loop through the input list adding\
    \ elements to the new list\n    foreach ($numbers as $value) {\n        // append\
    \ the new element to the list\n        $result[] = $value;\n\n        // if the\
    \ new element is the same as the previous add a new delimeter to the list\n  \
    \      if ($value === $numbers[$resultCount - 1])\n            $result[] = $delimeter;\n\
    \n        // increment the counter for next time\n        $resultCount++;\n  \
    \  }\n\n    // return the new list\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xllk62t.php:38\n\
    Stack trace:\n#0 /tmp/tmp5xllk62t.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5xllk62t.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $intersected = [];\n  $numbersWithDelimiter = [];\n  foreach ($numbers as $number)\
    \ {\n    $numbersWithDelimiter[] = $number;\n    if ($numbersWithDelimiter) {\n\
    \      $intersected[] = ($numbersWithDelimiter[0] = $delimeter);\n      $numbersWithDelimiter\
    \ = [];\n    }\n  }\n  return $intersected;\n}\n\n/**\n * Returns the sum of a\
    \ given list of numbers, using 'add' as a default\n * aggregate function.\n *\n\
    \ * @param int[] $numbers\n *\n * @return int\n */\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnoudeq3.php:34\n\
    Stack trace:\n#0 /tmp/tmpbnoudeq3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbnoudeq3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $length = count($numbers);\n    $interspersedNumbers = $interspersedResults\
    \ = array();\n    for ($i = 0; $i < $length; ++$i) {\n        $interspersedNumbers[]\
    \ = $numbers[$i];\n        $interspersedResults[$i] = '';\n    }\n    $numbers\
    \ = $interspersedNumbers;\n    $results = $interspersedResults;\n    $delimIndex\
    \ = 0;\n    foreach ($numbers as $number) {\n        $results[$delimIndex++] =\
    \ $number . $delimeter;\n    }\n    return $results;\n}\n\n/**\n * Convert a delimited\
    \ string into an array using a callback function.\n *\n * @param string $string\n\
    \ *   The string to be converted\n * @param string $delimiter\n *   The delimiter\
    \ used to separate the input string\n * @param callable $callback\n *   The callback\
    \ that will transform a portion of the string\n * @param string|null $indexDelimiter\n\
    \ *   (optional) The string used to separate items in $index. Defaults to ' '.\n\
    \ * @param bool $skipIndex\n *   (optional) If true $index will not be included\
    \ in the result.\n * @return array\n *   The resulting array of values.\n */\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_o7s3c1.php:45\n\
    Stack trace:\n#0 /tmp/tmpm_o7s3c1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpm_o7s3c1.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers) {\n        foreach (array_chunk($numbers, 2) as $number) {\n\
    \            $numbers[] = $delimeter;\n            $numbers[] = $number;\n   \
    \     }\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n  \
    \  return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgbkp4cwb.php:23\n\
    Stack trace:\n#0 /tmp/tmpgbkp4cwb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgbkp4cwb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($carry, $value) {\n        $carry[]\
    \ = $value;\n        return $carry;\n    }, []);\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gf5tifx.php:20\n\
    Stack trace:\n#0 /tmp/tmp3gf5tifx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3gf5tifx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  if (empty($numbers)) {\n    return [];\n  }\n\n  $result = [];\n\n  foreach\
    \ ($numbers as $number) {\n    $result[] = $number;\n    $result[] = $delimeter;\n\
    \  }\n\n  return array_slice($result, 0, -2);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 tags=php,loops,arrays |>\nJust another variation, this one uses\
    \ array_fill to populate the result, and uses array_slice to trim off the last\
    \ element.\n<code>\n<?php\n$nums = array(1, 2, 3, 5, 7, 11, 13, 17, 19);\n$nums2\
    \ = array();\n$nums2 = array_fill(0, count($nums)-1, array_slice($nums, 0, count($nums)-1));\n\
    print_r($nums2);\n</code>\noutput:\n<code>\nArray\n(\n    [0] => Array\n     \
    \   (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n    \
    \    )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] =>\
    \ 7\n            [2] => 11\n        )\n\n    [2] => Array\n        (\n       \
    \     [0] => 13\n            [1] => 17\n            [2] => 19\n        )\n\n)\n\
    </code>\n<|/ a |>\n<| c |>\nThis one is definitely the best for my situation,\
    \ since it's an easy way to trim off the last element of an array. Thanks!\n<|/\
    \ c |>\n<| a dscore=1 |>\nHere is a solution that uses a single foreach() statement:\n\
    <code>\n$array = array(1, 2, 3, 5, 7, 11, 13, 17, 19);\n$result = [];\n\nforeach\
    \ ($array as $n => &$a) $a = [$a, $array[$n+1]];\nunset($array[$n+1]);\nunset($a[$n]);\n\
    \n$result = $array;\n</code>\n<|/ a tags=php,loops,arrays |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$nums = array(1,2,3,5,7,11,13,17,19);\n$newArray = array();\n$length=\
    \ count($nums);\nfor ($i = 0; $i <= $length; $i++) {\n    $newArray[] = $nums[$i];\n\
    \    $newArray[] = $nums[$i+1];\n}\n</code>\n<|/ a tags=php,loops,arrays |>\n\
    <| a tags=php,loops,arrays |>\nUse array_chunk\n<code>\n$newArray = array_chunk($nums,\
    \ 2);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,loops,arrays \nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa4fn1olz.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(\n        array_map(\n            function($carry, $number)\
    \ {\n                return array_slice($carry, 0, -1 + $delimeter) .\n      \
    \              array($number) .\n                    array_slice($carry, -1 +\
    \ $delimeter);\n            },\n            $numbers,\n            range(0, count($numbers)\
    \ - 1) // -1 is for last number in list\n        ),\n        function($carry)\
    \ use ($delimeter) {\n            return $delimeter . implode($delimeter, $carry);\n\
    \        },\n        array([])\n    );\n}\n</code>\n<|/ a dscore=1 tags=php,array-intersect\
    \ |>\n<| a dscore=0 |>\nTry this, it works with the input array as you provided:\n\
    <code>\n$array1 = [\n    1 => [\n        0 => [\n            'id' => 1,\n    \
    \        'text' => 'Test 1',\n        ],\n        1 => [\n            'id' =>\
    \ 2,\n            'text' => 'Test 2',\n        ],\n        2 => [\n          \
    \  'id' => 3,\n            'text' => 'Test 3',\n        ],\n        3 => [\n \
    \           'id' => 4,\n            'text' => 'Test 4',\n        ],\n        4\
    \ => [\n            'id' => 5,\n            'text' => 'Test 5',\n        ],\n\
    \    ],\n    2 => [\n        0 => [\n            'id' => 6,\n            'text'\
    \ => 'Test 6',\n        ],\n        1 => [\n            'id' => 7,\n         \
    \   'text' => 'Test 7',\n        ],\n    ],\n];\n$array2 = [\n    1 => [\n   \
    \     0 => [\n            'id' => 1,\n            'text' => 'Test 1',\n      \
    \  ],\n        1 => [\n            'id' => 2,\n            'text' => 'Test 2',\n\
    \        ],\n        2 => [\n            'id' => 3,\n            'text' => 'Test\
    \ 3',\n        ],\n        3 => [\n            'id' => 4,\n            'text'\
    \ => 'Test 4',\n        ],\n        4 => [\n            'id' => 5,\n         \
    \   'text' => 'Test 5',\n        ],\n    ],\n    2 => [\n        0 => [\n    \
    \        'id' => 6,\n            'text' => 'Test 6',\n        ],\n        1 =>\
    \ [\n            'id' => 7,\n            'text' => 'Test 7',\n        ],\n   \
    \ ],\n];\n$array3 = array();\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg34ql67o.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $results = [];\n    $numbers = (array)$numbers;\n    $delimeter = (int)$delimeter;\n\
    \n    for ($i = 0, $count = count($numbers); $i < $count; $i++) {\n        $results[]\
    \ = $numbers[$i];\n        if ($i + 1 < $count) {\n            $results[] = $delimeter;\n\
    \        }\n    }\n    return $results;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php\
    \ dscore=0 |>\nYou could do something like this\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpul6wu10q.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) === 1) {\n        return $numbers;\n    }\n    return\
    \ array_chunk($numbers, 2, $delimeter);\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvr5s_m3.php:20\n\
    Stack trace:\n#0 /tmp/tmpfvr5s_m3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfvr5s_m3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $length = count($numbers);\n  $result = [];\n\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    $result[] = $numbers[$i];\n    if ($i < ($length - 1)) {\n    \
    \  $result[] = $delimeter;\n    }\n  }\n\n  return $result;\n}\n</code>\n<|/ a\
    \ tags=php,arrays dscore=1 |>\n<| a dscore=1 |>\nA functional approach using array_reduce()\
    \ and array_merge():\n<code>\n$numbers = range(1, 10);\n$result = array_reduce($numbers,\
    \ function($carry, $item) use ($numbers) {\n    return array_merge($carry, $numbers[$item]);\n\
    }, []);\nprint_r($result);\n</code>\nhttps://3v4l.org/s8iKI\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\nI think it's impossible to do that using array_map.\n\
    However, you can do that using array_walk and a for loop.\n<code>\n<?php\n\n$numbers\
    \ = array(1, 2, 3, 4, 5);\n$result = array();\narray_walk($numbers, function(&$item,\
    \ $key) use(&$result, $numbers) {\n    if($key === 0) {\n        $item = $numbers[$key];\n\
    \        $result[] = $item;\n    } else {\n        $result[] = $numbers[$key-1];\n\
    \    }\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a |>\nYou can\
    \ do this, but with a little more code:\n<code>\n<?php\n$numbers = array(1, 2,\
    \ 3, 4, 5);\n$result = array();\n$length = 0;\n$lastItem = 0;\n\nforeach($numbers\
    \ as $key=>$number) {\n    if ($key === 0) {\n        $result[] = $number;\n \
    \   } else {\n        $result[] = $numbers[$key-1];\n    }\n}\n\nvar_dump($result);\n\
    </code>\n<|/ a dscore=0 tags=php,arrays |>\n<| c |>\nWhat about the first item?\
    \ This just skips it, not puts it in the first index.\n<|/ c |>\n<| c |>\nThat's\
    \ not what the OP asked for. He asked for a function that will return the array\
    \ in the example above, that is `[1, 4, 2, 4, 3]`\n<|/ c |>\n<| a dscore=0 |>\n\
    A more general solution using array_reduce:\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgbpxjpap.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($numbers, $number) {\n        return\
    \ array_map(function ($number) use ($numbers, $delimeter) {\n            return\
    \ $number . $delimeter;\n        }, $numbers);\n    }, $numbers);\n}\n\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,function dscore=0 |>\nA slight modification\
    \ of solution from Nicarus\n<code>\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp63t_x575.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = array();\n    $len = count($numbers);\n    $i = 0;\n    while (count($result)\
    \ < $len) {\n        $result[$i++] = array_shift($numbers);\n        if (count($numbers)\
    \ === 0) {\n            break;\n        }\n        $result[$i] += $delimeter;\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=2\
    \ |>\nI created a recursive function which can deal with any number of arrays\
    \ and even nested arrays and it also returns a unique array containing the array\
    \ elements that has been interleaved.\n<code>\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp08vrrtnq.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = array_map(function ($number) {\n        return $number;\n    },\
    \ $numbers);\n\n    $results = [];\n    $i = 0;\n\n    foreach ($numbers as $key\
    \ => $number) {\n        if ($i < $key) {\n            $results[] = $number;\n\
    \        }\n\n        if ($i == $key) {\n            $results[] = $delimeter;\n\
    \        }\n\n        $i++;\n    }\n\n    return array_slice($results, 0, -$delimeter\
    \ + 1);\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27a9cdd1.php:36\n\
    Stack trace:\n#0 /tmp/tmp27a9cdd1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp27a9cdd1.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    array_walk($numbers, function(&$v) { $v = $v * $delimeter; });\n    return\
    \ $numbers;\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkn7futv.php:17\n\
    Stack trace:\n#0 /tmp/tmpdkn7futv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdkn7futv.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($result, $number) {\n        return\
    \ $result ? [$number, $delimeter, $result] : $number;\n    });\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ywaou9s.php:18\n\
    Stack trace:\n#0 /tmp/tmp8ywaou9s.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp8ywaou9s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_merge(...array_chunk($numbers, ceil($numbers.length / $delimeter)));\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmp2hguh2pt.php on line 8\n\
    \nWarning: A non-numeric value encountered in /tmp/tmp2hguh2pt.php on line 8\n\
    \nWarning: array_chunk(): Size parameter expected to be greater than 0 in /tmp/tmp2hguh2pt.php\
    \ on line 8\n\nWarning: Only arrays and Traversables can be unpacked in /tmp/tmp2hguh2pt.php\
    \ on line 8\n\nWarning: Use of undefined constant length - assumed 'length' (this\
    \ will throw an Error in a future version of PHP) in /tmp/tmp2hguh2pt.php on line\
    \ 8\n\nWarning: A non-numeric value encountered in /tmp/tmp2hguh2pt.php on line\
    \ 8\n\nWarning: array_chunk(): Size parameter expected to be greater than 0 in\
    \ /tmp/tmp2hguh2pt.php on line 8\n\nWarning: Only arrays and Traversables can\
    \ be unpacked in /tmp/tmp2hguh2pt.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp2hguh2pt.php:17\nStack trace:\n#0 /tmp/tmp2hguh2pt.php(21):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2hguh2pt.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n\n    if (is_string($numbers))\
    \ {\n        $numbers = explode($delimeter, $numbers);\n    }\n\n    $first =\
    \ true;\n    $ret = array();\n    foreach ($numbers as $number) {\n        if\
    \ (is_string($number)) {\n            $number = str_replace($delimeter, $delimeter\
    \ . $delimeter, $number);\n        }\n\n        if ($first) {\n            $first\
    \ = false;\n            $ret[] = $number;\n        } else {\n            $ret[]\
    \ = $number;\n        }\n    }\n\n    return $ret;\n}\n\n/**\n * Reverse the given\
    \ string.\n *\n * @param string $str\n * @return string\n */\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr99mqz5f.php:46\n\
    Stack trace:\n#0 /tmp/tmpr99mqz5f.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpr99mqz5f.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function($carry, $number) {\n        return\
    \ $carry .= $number . $delimeter;\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_julbo0.php:18\n\
    Stack trace:\n#0 /tmp/tmp3_julbo0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3_julbo0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \treturn array_chunk(array_merge($numbers, array_fill(0, count($numbers), $delimeter)),\
    \ 2);\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for this!  I'm just curious\
    \ about your use of array_chunk, does it just split an array into multiple equal\
    \ chunks?  What if there's more than 2 elements in the array?\n<|/ c |>\n<| c\
    \ |>\nYes, it just splits it into chunks of two elements and then merges them\
    \ back together at the end. This is probably the best way to do it, since it only\
    \ requires one pass over the original array\n<|/ c |>\n<| c |>\nThis is also the\
    \ best solution, but since you already have the chunk array, you can just use\
    \ array_merge to merge them back together at the end\n<|/ c |>\n<| a tags=arrays,php,algorithm\
    \ |>\nSince PHP >= 5.3 you can simply use array_map and array_merge\n<code>\n\
    $arr = [1,2,3,4,5,6,7,8,9,10];\n\n$chunks = array_chunk($arr, 2);\n\n$merged =\
    \ array_merge($chunks[0], $chunks[1]);\n\nprint_r($merged);\n</code>\nOutput\n\
    <code>\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n        \
    \    [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 3\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 5\n            [1] => 6\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 7\n            [1] => 8\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 9\n            [1] => 10\n        )\n\n)\n</code>\n<|/\
    \ a dscore=3 |>\n<| a |>\nIf you have access to array_walk then you can easily\
    \ do this with array_slice, array_slice, and array_merge:\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl2h6osp6.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_merge(\n    array_slice($numbers, 0, -1 * $delimeter),\n    [$delimeter],\n\
    \    array_slice($numbers, -1)\n  );\n}\n\nfunction candidate(...$args) {\n  \
    \  return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfi04f23.php:20\n\
    Stack trace:\n#0 /tmp/tmpmfi04f23.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmfi04f23.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return implode($delimeter, array_fill(0, count($numbers) / 2, $numbers[0]))\
    \ .\n        array_fill(0, count($numbers) % 2, $numbers[count($numbers) - 1]);\n\
    }\n</code>\n<|/ a tags=php,arrays,loops,while-loop |>\n<| c |>\nThanks, but my\
    \ code is not working correctly. \nIt should return \"4 , 2 , 3 , 5\" instead\
    \ it returns \"4 , 2 , 3 , 5 , 1 , 2 , 3 , 4 , 5\" it also prints spaces between\
    \ elements. I cannot solve this problem.\n<|/ c |>\n<| c |>\nAha, you are right!\
    \ I missed that `array_fill()` has `offset` and `length` arguments. Fixed my answer.\n\
    <|/ c |>\n<| c |>\nWorks great thanks! Can you please explain the function you\
    \ used? I really don't understand it\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to my answer.\n<|/ c |>\n<| c |>\nThis is so much simpler!\n<|/ c |>\n<| a tags=php,arrays,loops,while-loop\
    \ dscore=2 |>\n<code>\n<?php\n$nums = [4,5,6,7];\n$nums_str = implode(\" \",$nums);\n\
    \necho preg_replace('!\\s+!', ' ', $nums_str);\n</code>\n<|/ a |>\n<| a tags=php,arrays,loops,while-loop\
    \ dscore=2 |>\nThis should do it:\n<code>\n<?php\n$myArray = array(4,5,6,7);\n\
    $string = $myArray[0];\nfor ($i=1; $i<count($myArray); $i++) {\n    $string .=\
    \ \" \" . $myArray[$i];\n}\necho $string;\n</code>\n<|/ a |>\n<| c |>\nThanks,\
    \ but my code is not working correctly. It should return \"4 , 2 , 3 , 5\" instead\
    \ it returns \"4 , 2 , 3 , 5 , 1 , 2 , 3 , 4 , 5\" it also prints spaces between\
    \ elements.\n<|/ c |>\n<| a dscore=2 |>\nYou can use implode for that:\n<code>\n\
    <?php\n$nums = [4,5,6,7];\n$nums_str = implode(' ',$nums);\necho $nums_str;\n\
    </code>\n<|/ a tags=php,arrays,loops,while-loop |>\n<| c |>\nThanks, but my code\
    \ \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwmoe6jan.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    foreach ($numbers as $key => $number) {\n        if ($key == 0) {\n     \
    \       $new[$key] = $number;\n        } else {\n            $new[$key] = $delimeter;\n\
    \        }\n    }\n    return $new;\n}\n</code>\n<|/ a tags=php,arrays,loops |>\n\
    <| a dscore=1 |>\nYou can use implode to achieve this. \n<code>\n$a = array (1,\
    \ 3, 6, 9, 15, 30, 60);\necho implode(',', $a);\n</code>\n<|/ a tags=php,arrays,loops\
    \ |>\n<| a dscore=1 |>\n<code>\nforeach($a as $key => $value) {\n    $b[] = $value;\n\
    \    if($key != ($acount($a) - 1)){\n        $b[] = ',';\n    }\n}\n\nprint_r($b);\n\
    </code>\n<|/ a tags=php,arrays,loops |>\n<| a dscore=1 |>\n<code>\n$a = array(1,2,3,4,5);\n\
    $b = array();\n\n$i = 0;\nforeach($a as $value) {\n    $b[$i] = $value;\n    $i++;\n\
    \    if($i % 2 == 0) {\n        $b[$i-1] = ',';\n    }\n}\n\necho implode(\",\"\
    , $b);\n</code>\n<|/ a tags=php,arrays,loops |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $array = array(1, 3, 6, 9, 15, 30, 60);\n$array = array_chunk($array, 2, true);\n\
    $array = array_map(function ($v) { return $v[0]; }, $array);\n$array = array_values($array);\n\
    echo implode(\",\", $array);\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplxs8qt6_.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // Get number of elements we want to intersperse\n    $count = count($numbers);\n\
    \n    // If no elements are passed in, return an empty array\n    if (!$count)\
    \ {\n        return [];\n    }\n\n    // Create an empty array for the results\n\
    \    $results = [];\n\n    // For every number in 'numbers' array (first loop),\
    \ add that number to every element of 'results' array (second)\n    for ($i =\
    \ 0; $i < $count; ++$i) {\n        $results[] = $numbers[$i];\n    }\n\n    //\
    \ For every number in 'results' array (second loop), add $delimeter to every element\
    \ of 'results' array (second)\n    for ($i = 0; $i < $count; ++$i) {\n       \
    \ $results[] = $delimeter . $results[$i];\n    }\n\n    // Return result\n   \
    \ return $results;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzb0g_1s2.php:39\n\
    Stack trace:\n#0 /tmp/tmpzb0g_1s2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzb0g_1s2.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_map(function ($number) use ($delimeter) {\n    return $number\
    \ . $delimeter;\n  }, array_chunk($numbers, 2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbvdu90c.php:19\n\
    Stack trace:\n#0 /tmp/tmprbvdu90c.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprbvdu90c.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = array_filter($numbers);\n    $numbers = array_map(function($n)\
    \ { return ++$n; }, $numbers);\n\n    return array_map(function($first, $second)\
    \ use ($delimeter) {\n        return $first . $delimeter . $second;\n    }, $numbers,\
    \ array_slice($numbers, 1));\n}\n</code>\nThis way you don't need to mess around\
    \ with looping over array indexes or with adding additional delimiters.\n<|/ a\
    \ tags=arrays,php |>\n<| a tags=arrays,php |>\nUse array_map\n<code>\narray_map(function($x)\
    \ {\n    return \"<p>\" . $x . \"</p>\";\n}, $arr);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 tags=arrays,php |>\n<code>\n$arr1 = array(\"1\",\"2\",\"3\");\n\
    $arr2 = array(\"4\",\"5\",\"6\");\n$arr3 = array(\"7\",\"8\",\"9\");\n$arrays\
    \ = array($arr1,$arr2,$arr3);\n$array = array_map(function($var){\n    return\
    \ \"<p>\".$var.\"</p>\";\n},$arrays);\nprint_r($array);\n</code>\n<|/ a |>\n<|\
    \ a dscore=1 |>\nAnother way for adding elements without loops or creating another\
    \ array would be to convert them into strings. But this does not preserve order.\n\
    <code>\n$array1 = array(1,2,3);\n$array2 = array(4,5,6);\n$array3 = array(7,8,9);\n\
    \n$arrays = array($array1,$array2,$array3);\n\n$array = array();\narray_walk($arrays,function($e)\
    \ use (&$array) {$array[] = \"<p>\".implode(\"</p>\\n\",$e).\"</p>\";});\n\nprint_r($array);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\nA quick and easy way to do\
    \ this is as follows:\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprqkgwyov.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = array_values($numbers);\n    foreach ($numbers as $key => $number)\
    \ {\n        if ($number != 0) {\n            $numbers[$key] = $number . $delimeter;\n\
    \        }\n    }\n    return $numbers;\n}\n</code>\n<|/ a tags=arrays,php dscore=2\
    \ |>\n<| c |>\nPlease read carefully what I wrote: I want a function that does\
    \ the same thing you wrote above (but without using `implode`). I need to loop\
    \ through the array in order to replace all the zeroes with numbers (1, 2, 3...),\
    \ and then put that result back into the array, so that I end up with an array\
    \ that looks like this: `[0,0,1,2,3,4,0,1,2,3]`\n<|/ c |>\n<| a dscore=2 |>\n\
    You can use array_walk and array_fill to achieve this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg08gs4y2.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n\
    \        $result .= $delimeter . $numbers[$i];\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxktwnoh.php:20\n\
    Stack trace:\n#0 /tmp/tmpdxktwnoh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpdxktwnoh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $numbers = array_reverse($numbers);\n  $result = [];\n  $i = 0;\n  while ($i\
    \ < count($numbers)) {\n    $result[] = $numbers[$i++];\n    if ($i === count($numbers))\
    \ {\n      $result[] = $delimeter;\n      $i = 0;\n    }\n  }\n  $result = array_merge($result,\
    \ array_slice($numbers, $i));\n  $result = array_reverse($result);\n  return $result;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\nI wrote this function\
    \ some time ago, maybe it will help you and someone else:\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkzbet2lh.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($carry, $num) {\n        return $carry\
    \ === null ? $num : [$carry, $num];\n    }, null);\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hoe86an.php:18\n\
    Stack trace:\n#0 /tmp/tmp7hoe86an.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7hoe86an.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_chunk($numbers, count($numbers), $delimeter);\n}\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_chunk(): Size parameter expected to be greater than 0\
    \ in /tmp/tmp3jbwt8sh.php on line 8\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3jbwt8sh.php:15\nStack trace:\n#0 /tmp/tmp3jbwt8sh.php(20): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3jbwt8sh.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        $result[] = $delimeter;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuniq5ld.php:22\n\
    Stack trace:\n#0 /tmp/tmpxuniq5ld.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxuniq5ld.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = array();\n    $first = true;\n    foreach ($numbers as $number)\
    \ {\n        if ($first) {\n            $first = false;\n        } else {\n  \
    \          $result[] = $delimeter;\n        }\n        $result[] = $number;\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\nThis is my\
    \ solution:\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplq3yxenb.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) < 2) {\n        return $numbers;\n    }\n    $res = array_fill(0,\
    \ $delimeter, array_slice($numbers, 0, -1));\n    return array_merge(\n      \
    \  $res,\n        array_slice($numbers, -1),\n        array_fill(0, $delimeter,\
    \ $numbers)\n    );\n}\n</code>\n<|/ a dscore=5 tags=php,arrays,algorithm |>\n\
    <| a |>\nThis can be done using array functions. Just concatenate all the arrays\
    \ together (using array_merge) and then use array_slice:\n<code>\n$array1 = array(1,2,3);\n\
    $array2 = array(4,5,6);\n$array3 = array(7,8,9);\n$arrays = array($array1, $array2,\
    \ $array3);\necho implode($arrays, \" \");\necho \"<br/>\";\necho implode(array_slice($arrays,\
    \ 0, 1), \" \");\necho \"<br/>\";\necho implode(array_slice($arrays, 1, 2), \"\
    \ \");\necho \"<br/>\";\necho implode(array_slice($arrays, 1, 3), \" \");\necho\
    \ \"<br/>\";\necho implode(array_slice($arrays, 1, 4), \" \");\necho \"<br/>\"\
    ;\necho implode(array_slice($arrays, 1, 5), \" \");\necho \"<br/>\";\necho implode(array_slice($arrays,\
    \ 1, 6), \" \");\necho \"<br/>\";\necho implode(array_slice($arrays, 1, 7), \"\
    \ \");\necho \"<br/>\";\necho implode(array_slice($arrays, 1, 8), \" \");\necho\
    \ \"<br/>\";\necho implode(array_slice($arrays, 1, 9), \" \");\necho \"<br/>\"\
    ;\n</code>\nOutput:\n<code>\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6\
    \ 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6\
    \ 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ dscore=4 |>\n<| a dscore=3 |>\nUse array_merge, and then array_splice twice:\n\
    <code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4du_6za6.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $output = [];\n  foreach ($numbers as $number) {\n    $output[] = $number;\n\
    \    if ($delimeter) {\n      $output[] = $delimeter;\n    }\n  }\n  return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcn5yft2.php:24\n\
    Stack trace:\n#0 /tmp/tmplcn5yft2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplcn5yft2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \treturn array_reduce(\n\t\t$numbers,\n\t\tfunction ($numbers, $number) {\n\t\t\
    \t$numbers[] = $number;\n\t\t\t$numbers[] = $delimeter;\n\t\t\treturn $numbers;\n\
    \t\t},\n\t\t[]\n\t);\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhpe3962.php:25\n\
    Stack trace:\n#0 /tmp/tmpvhpe3962.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvhpe3962.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = array();\n    foreach ($numbers as $key => $number) {\n       \
    \ $result[] = $number;\n        if ($key % 2 != 0) {\n            $result[] =\
    \ $delimeter;\n        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=php,laravel,arrays\
    \ |>\n<| a tags=php,laravel,arrays |>\nYou could use a simple foreach loop:\n\
    <code>\nforeach ($array as $index => $element) {\n    if ($index % 2 == 0) {\n\
    \        $result[] = $element;\n    } else {\n        $result[] = $separator;\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,laravel,arrays |>\nOne liner\
    \ :\n<code>\n$result = array_map(function($index, $element){\n    return $index%2?$element:'';\n\
    }, array_map(function($v){return $v*2}, array_chunk($a, 2)),\narray_chunk($a,\
    \ 2));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$input = array('a',\
    \ 'b', 'c', 'd', 'e');\n$newInput = array();\n$i = 0;\nforeach ($input as $key\
    \ => $value) {\n    if ($i % 2 == 0) {\n        $newInput[] = $value;\n    }\n\
    \    else {\n        $newInput[] = ', '.$value;\n    }\n    $i++;\n}\nvar_dump($newInput);\n\
    </code>\n<|/ a tags=php,laravel,arrays |>\n<| c |>\n$newInput[] = ', '.$value;\
    \ this line will concatenate all values with comma\n<|/ c |>\n<| c |>\ni was thinking\
    \ to avoid that line, but if you just want to concatenate your values, the example\
    \ i gave you works as well\n<|/ c |>\n<| c |>\nOh I see, sorry my mistake. Thank\
    \ you so much for your help\n<|/ c |>\n<| a dscore=0 |>\nYou Can Use array_chunk\n\
    <code>\n<?php\n    $array = array('a','b','c','d','e');\n\n    $array1 = array_chunk($array,\
    \ 2, true);\n    print_r($array1);\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmp_m9uat.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        $result[] = $delimeter;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuza1nd07.php:22\n\
    Stack trace:\n#0 /tmp/tmpuza1nd07.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpuza1nd07.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) < 2) {\n        return $numbers;\n    }\n\n    foreach\
    \ ($numbers as $i => $number) {\n        if ($i < count($numbers) - 1) {\n   \
    \         $numbers[$i] = $number . $delimeter;\n        }\n    }\n\n    return\
    \ array_slice($numbers, 1);\n}\n</code>\nTest:\n<code>\n$numbers = [1, 2, 3, 4,\
    \ 5];\n$delimeter = '';\nvar_dump(intersperse($numbers, $delimeter));\n\n$numbers\
    \ = [1, 2, 3, 4, 5];\n$delimeter = '.';\nvar_dump(intersperse($numbers, $delimeter));\n\
    \n$numbers = [1, 2, 3, 4, 5];\n$delimeter = ',';\nvar_dump(intersperse($numbers,\
    \ $delimeter));\n\n$numbers = [1, 2, 3, 4, 5];\n$delimeter = ',';\nvar_dump(intersperse($numbers,\
    \ $delimeter));\n\n$numbers = [1, 2, 3, 4, 5];\n$delimeter = ' ';\nvar_dump(intersperse($numbers,\
    \ $delimeter));\n\n$numbers = [1, 2, 3, 4, 5];\n$delimeter = ' ';\nvar_dump(intersperse($numbers,\
    \ $delimeter));\n</code>\n<|/ a tags=arrays,php dscore=5 |>\n<| a tags=arrays,php\
    \ dscore=5 |>\nI know that some others have already answered the question, but\
    \ I found this to be the simplest way to do this, and was able to easily add or\
    \ subtract a number from the array without having to know the length of the array.\n\
    <code>\n$myArray = [1,2,3,4,5,6,7,8,9,10];\n$myArray = array_pad($myArray, (count($myArray)+1),\
    \ null);\n</code>\n<|/ a |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcns4cttl.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_map(\n        function ($number) {\n            return $number\
    \ . $delimeter;\n        },\n        array_chunk(\n            $numbers,\n   \
    \         ceil($numbers->length / $delimeter)\n        )\n    );\n}\n</code>\n\
    <|/ a tags=arrays,php,math |>\n<| c |>\nHe didn't state he needed to remove an\
    \ item from the array. Just that the output should contain no items at all. Also,\
    \ if there are less than two items in `$numbers` the function should return an\
    \ empty array\n<|/ c |>\n<| c |>\n: I updated my answer, as per your comment,\
    \ now it works as expected.\n<|/ c |>\n<| a dscore=2 tags=arrays,php,math |>\n\
    The solutions using array_chunk() will require a lot of memory when $numbers is\
    \ big, because a chunk will create an array of all elements of $numbers and then\
    \ remove the extra elements from it. array_chunk() is good to use in situations\
    \ where you need to split a big array into multiple smaller arrays.\nA faster\
    \ solution for big arrays is to iterate through the array, keeping track of the\
    \ number of elements you already processed. On each iteration, you increase the\
    \ $last by one. Every iteration that increases $last by one will result in a division\
    \ by $delimeter and the $last will be 0 if the $numbers is empty.\n<code>\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc22t8lta.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(array_slice($numbers, 0, -1), function ($result, $number)\
    \ {\n        return array_merge([$number], $result, array_slice($numbers, -1));\n\
    \    }, []);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me (PHP 7.3.19).\
    \ I get this error:\n```PHP Fatal error:  array_merge(): Argument #1 is not an\
    \ array ```\n<|/ c |>\n<| c |>\nThis was a bug in the code, I've updated my answer.\n\
    <|/ c |>\n<| a tags=arrays,php |>\nThis is quite funny solution. Maybe there are\
    \ some better ones but this one worked for me:\n<code>\n<?php\n$numbers = array(1,2,3);\n\
    $result = array();\n\nfor($i = 1; $i < count($numbers); $i++) {\n    $result[]\
    \ = $numbers[$i];\n    if($i < count($numbers)) {\n        $result[] = $delimeter;\n\
    \    }\n}\n\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=arrays,php |>\nUsing array_map():\n<code>\n<?php\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgan3sjv6.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // Remove duplicates\n    $numbers = array_unique($numbers);\n    $numbers\
    \ = array_merge([$delimeter], $numbers);\n    // Intersperse using $delimeter\n\
    \    return array_reduce($numbers, function($result, $number) {\n        return\
    \ array_merge($result, array_slice($number, 0, -2));\n    }, []);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nI think this answer deserves some elaboration.\
    \  And an explanation would go a long way in getting this answer upvoted.\n<|/\
    \ c |>\n<| c |>\nThis has nothing to do with PHP version or performance or other\
    \ issues, it's simply an elegant and beautiful piece of code which answers the\
    \ question in a clean and simple way.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$numbers\
    \ = [1,2,3,4,5,6,7];\n$result = array();\nforeach($numbers as $key=>$number) {\n\
    \    if($key == 0) continue;\n    $result[] = $numbers[$key-1];\n    $result[]\
    \ = $number;\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=5 tags=php,arrays\
    \ |>\n<| c |>\nVery nice and easy to understand.\n<|/ c |>\n<| a dscore=4 |>\n\
    This would do it : \n<code>\n$result = array();\n$input = $array;\n$i = 0;\n$length\
    \ = count($input);\nwhile($i < $length)\n{\n  if($i == 0)\n  {\n    $result[]\
    \ = $input[$i];\n  }\n  else\n  {\n    $result[] = $input[$i];\n    $result[]\
    \ = $input[$i-1];\n  }\n  $i++;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=4\
    \ |>\n<code>\n<?php\n$arr = array('a', 'b', 'c', 'd', 'e');\nprint_r($arr);\n\n\
    $result = [];\nfor ($i = 0; $i < count($arr); $i++) {\n   if($i == 0)\n   {\n\
    \     $result[] = $arr[$i];\n   }\n   else\n   {\n     $result[] = $arr[$i];\n\
    \     $result[] = $arr[$i-1];\n   }\n}\n\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpem76qtin.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n\n    $return =\
    \ [];\n    $length = count($numbers);\n    for ($i = 0; $i < $length; $i += 2)\
    \ {\n        $return[] = $numbers[$i];\n    }\n\n    return $return + [$delimeter]\
    \ + intersperse($numbers[$i + 1], $delimeter);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThe accepted answer uses `array_splice`, which is slower than `array_reduce`\n\
    <|/ c |>\n<| c |>\nThank you for your comment! The accepted answer uses `array_reduce`\
    \ indeed, but I agree with you that `array_splice` is slightly slower.\n<|/ c\
    \ |>\n<| c |>\nFor small arrays, array_reduce is faster than  array_splice. Tested\
    \ with array_reduce vs array_splice with a few thousand items. array_splice took\
    \ about 1ms,array_reduce was about 2ms.\n<|/ c |>\n<| c |>\nFor large arrays,\
    \ array_reduce will run much faster. Tested with array_reduce vs array_splice\
    \ with 100k items. array_splice took about 5ms,array_reduce was about 3ms.\n<|/\
    \ c |>\n<| a |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n\n$result = [];\n$index\
    \ = 0;\n\nforeach ($array as $item) {\n    $result[$index++] = $item;\n    if\
    \ ($index >= 2) {\n        $result[$index++] = $item;\n    }\n}\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 tags=php,arrays |>\n<| a tags=php,arrays |>\nTo answer\
    \ your question \"Is there a more efficient way of doing the following without\
    \ a for loop?\"\nYou can use array_map and array_chunk to do the same thing in\
    \ a single line.\n<code>\n$arr = array_map(null, array_chunk($arr, 1));\n</code>\n\
    See it in action\n<|/ a dscore=1 |>\n<| c |>\nWhile this does answer the question,\
    \ it's worth noting that this solution would not be more efficient than array_splice.\
    \ array_splice is O(n), while array_reduce is O(n + k). Think of array_reduce\
    \ as an abstraction layer that gives the best case for array_reduce. In the best\
    \ case, array_reduce would have to iterate the entire array to find out if there\
    \ are any more items following it. In the worst case, the array_reduce would have\
    \ to keep searching until it found one that didn't follow the current one, but\
    \ it's still O(n).\n<|/\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpngy_6v7i.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = $numbers === []? [] : $numbers;\n\n    foreach($numbers as $number)\
    \ {\n        $numbers[$number] = $delimeter;\n    }\n\n    return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6i6o4psv.php:23\n\
    Stack trace:\n#0 /tmp/tmp6i6o4psv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6i6o4psv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return [];\n    }\n\n    if ($numbers[0]\
    \ === null) {\n        return [];\n    }\n\n    $return = [$numbers[0]];\n   \
    \ $numbers = array_slice($numbers, 1);\n\n    foreach ($numbers as $number) {\n\
    \        $return[] = $number->value . $delimeter;\n    }\n\n    return $return;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpz6pa8l.php:32\n\
    Stack trace:\n#0 /tmp/tmpzpz6pa8l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzpz6pa8l.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // If no numbers are given, return an empty array\n    if (empty($numbers))\
    \ {\n        return [];\n    }\n    // If there is only one number, return it\
    \ in a single element array\n    if (count($numbers) === 1) {\n        $numbers\
    \ = [$numbers[0]];\n    }\n    // If there is only a single number, return it\
    \ in a single element array\n    if (count($numbers) === 0) {\n        return\
    \ [];\n    }\n    // Get the total length of the array\n    $length = count($numbers);\n\
    \    // Split the array into two, returning the first part for all the numbers\n\
    \    // and the second part with the 'delimter' between them\n    $part1 = array_splice($numbers,\
    \ 0, $length);\n    $part2 = array_splice($numbers, 0, $length);\n    // Combine\
    \ the two parts into a single array\n    return array_merge($part1, [$delimeter],\
    \ $part2);\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fam12qf.php:35\n\
    Stack trace:\n#0 /tmp/tmp9fam12qf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9fam12qf.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(array_slice($numbers, 0, -1), (function ($carry, $number)\
    \ {\n        return $carry == null ? [$number] : [$carry, $delimeter, $number];\n\
    \    }), array_slice($numbers, -1));\n}\n\nfunction candidate(...$args) {\n  \
    \  return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaac38rxh.php:19\n\
    Stack trace:\n#0 /tmp/tmpaac38rxh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpaac38rxh.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  if (!is_iterable($numbers)) {\n    throw new Exception('Parameter \\'numbers\\\
    ' must be an iterable');\n  }\n  $result = array();\n  $number = reset($numbers);\n\
    \  foreach ($numbers as $number) {\n    $result[] = $number;\n    $result[] =\
    \ $delimeter;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphb6dd0a7.php:26\n\
    Stack trace:\n#0 /tmp/tmphb6dd0a7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphb6dd0a7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \treturn array_map(function($number) {\n\t\treturn $number . $delimeter;\n\t},\
    \ $numbers);\n}\n\n/**\n * Create a unique ID\n *\n * A microtime and memory based\
    \ approach is used for creating a unique ID.\n * This is because most of the time,\
    \ the user doesn't have access to the $_SESSION or\n * any other PHP based variables,\
    \ and this makes it more secure to generate an ID based on this data.\n *\n *\
    \ @return string A unique ID.\n */\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeycvlkmk.php:28\n\
    Stack trace:\n#0 /tmp/tmpeycvlkmk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpeycvlkmk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $numbers = is_array($numbers) ? $numbers : [$numbers];\n\n  return array_reduce(\n\
    \    $numbers,\n    function ($numbers, $number) {\n      return is_numeric($number)\
    \ ? array_map(function ($number) use ($delimeter) { return $number . $delimeter;\
    \ }, $numbers) : $numbers;\n    },\n    []\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjy7ncytw.php:25\n\
    Stack trace:\n#0 /tmp/tmpjy7ncytw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjy7ncytw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers) || empty($delimeter)) {\n        return false;\n    }\n\
    \n    $first = 1;\n    $last = count($numbers) - 1;\n\n    return array_merge(\n\
    \        array_slice($numbers, 0, $first),\n        array($delimeter),\n     \
    \   array_slice($numbers, $first, $last - $first + 1),\n        array_slice($numbers,\
    \ $last + 1)\n    );\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk63tcued.php:28\n\
    Stack trace:\n#0 /tmp/tmpk63tcued.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpk63tcued.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $results = [];\n  foreach ($numbers as $number) {\n    $results[] = $number;\n\
    \    if (count($results) === 2)\n      $results[] = $delimeter;\n  }\n  return\
    \ $results;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cbsjcdr.php:23\n\
    Stack trace:\n#0 /tmp/tmp4cbsjcdr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4cbsjcdr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) return $numbers;\n    if ($numbers[0] === null) $numbers[0]\
    \ = 0;\n    if ($numbers[count($numbers) - 1] === null) $numbers[count($numbers)\
    \ - 1] = 0;\n    $numbers = array_map(function ($number) use ($delimeter) {\n\
    \        if ($number === null) return $number;\n        return $number . $delimeter;\n\
    \    }, $numbers);\n    return array_map(function ($number) { return substr($number,\
    \ 0, strlen($number) - strlen($delimeter)); }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxry8mn2m.php:24\n\
    Stack trace:\n#0 /tmp/tmpxry8mn2m.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxry8mn2m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = [];\n  $resultCount = count($numbers);\n  for ($i = 0; $i < $resultCount;\
    \ $i++) {\n    $result[] = $numbers[$i];\n    $result[] = $delimeter;\n  }\n \
    \ return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks, I've updated the question\
    \ with a better example. My `numbers` might have several items and I didn't want\
    \ to use `foreach`.\n<|/ c |>\n<| c |>\nSure, just remove the `foreach` loop and\
    \ use the `for` loop to keep track of the `result` array index. I'll update the\
    \ answer soon.\n<|/ c |>\n<| c |>\nI did that, but `result` contains extra delimeter.\
    \ I've updated the question. Thanks anyway.\n<|/ c |>\n<| c |>\nI see. I will\
    \ edit the answer.\n<|/ c |>\n<| a dscore=1 |>\nYou can use array_chunk for this:\n\
    <code>\n$numbers = array(1,2,3,4,5);\n$result = array_map(function($v, $k){return\
    \ $v . $k;}, array_chunk($numbers, 2), range(1,count($numbers)-2));\nvar_dump($result);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers =\
    \ array(1,2,3,4,5,6,7,8);\n$result = array();\n$delimeter = ',';\nfor ($i = 0;\
    \ $i < count($numbers); $i++) {\n    $result[] = $numbers[$i];\n    $result[]\
    \ = $delimeter;\n}\n\necho implode(',', $result);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 tags=arrays,php |>\n<code>\n$numbers = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9);\n$result = array();\n$delimeter = ',';\n$length = count($numbers);\n\
    \nfor($i = 0; $i < $length; $i++) {\n    $result[] = $numbers[$i];\n    $result[]\
    \ = $delimeter;\n}\n\necho implode(',', $result);\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nThis one might be a bit more flexible than the other answers. It will add\
    \ an extra number to the end if it does not divide equally\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnkwgo6m8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($carry, $item) {\n        if ($carry)\
    \ {\n            $carry = $delimeter . $carry;\n        }\n        return $carry\
    \ . $item;\n    }, \"\");\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcb5xwk6a.php:21\n\
    Stack trace:\n#0 /tmp/tmpcb5xwk6a.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcb5xwk6a.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        $result[] = $delimeter;\n    }\n    return $result;\n}\n\n$list = intersperse([1,2,3,4],\
    \ ',');\nforeach ($list as $item) {\n    echo $item . PHP_EOL;\n}\n</code>\nResult:\n\
    <code>\n1\n2\n3\n4\n1,\n2,\n3,\n4\n1,2\n3\n4,\n1,2\n3,4\n</code>\n<|/ a tags=php,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\nIf you don't want a loop or a functional programming\
    \ approach (although they work) then you might look at array_chunk:\n<code>\n\
    $input = [1,2,3,4,5];\n$output = array_chunk($input, 2);\nvar_dump($output);\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplxvfzqqz.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_map(function ($number) use ($delimeter) {\n    return $number\
    \ . $delimeter;\n  }, $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis works great!\
    \ Just a quick question, does this only work with PHP 5.6+?\n<|/ c |>\n<| c |>\n\
    Yes, it only works with PHP 5.6+ as array_reduce requires 5.6+ and PHP 5.5 does\
    \ not have `array_reduce`.\n<|/ c |>\n<| c |>\nI've also added a solution based\
    \ on array_reduce, which is essentially the same but uses less memory and doesn't\
    \ suffer from array_reduce requiring PHP 5.6+ which would make it useless for\
    \ production use.\n<|/ c |>\n<| a dscore=2 |>\nI used array_map and explode and\
    \ got result as expected. Just check below code.\n<code>\n$numbers = array();\n\
    $numbers[] = \"4\";\n$numbers[] = \"5\";\n$numbers[] = \"6\";\n$numbers[] = \"\
    7\";\n$numbers[] = \"8\";\n$numbers[] = \"9\";\n$numbers[] = \"10\";\n\necho implode(\"\
    \\n\", array_map(function($el){\n    return $el.\"\\n\";\n}, explode(\"\\n\",\
    \ $numbers)));\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\nTry\
    \ this\n<code>\n    $arr = array(0 => 4, 1 => 5, 2 => 6, 3 => 7, 4 => 8, 5 =>\
    \ 9, 6 => 10);\n    var_dump($arr);\n    var_dump($arr);\n    var_dump($arr);\n\
    \    $str = implode(\",\", $arr);\n    var_dump($str);\n</code>\nOutput :\n<code>\n\
    array(10) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(5)\n  [2]=>\n  int(6)\n  [3]=>\n\
    \  int(7)\n  [4]=>\n  int(8)\n  [5]=>\n  int(9)\n  [6]=>\n  int(10)\n}\narray(10)\
    \ {\n  [0]=>\n  int(4)\n  [1]=>\n  int(5)\n  [2]=>\n  int(6)\n  [3]=>\n  int(7)\n\
    \  [4]=>\n  int(8)\n  [5]=>\n  int(9)\n  [6]=>\n  int(10)\n}\narray(10) {\n  [0]=>\n\
    \  int(4)\n  [1]=>\n  int(5)\n  [2]=>\n  int(\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpox248geo.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // if list is empty or null, return empty list\n    if (empty($numbers) ||\
    \ $numbers == null) {\n        return [];\n    }\n    // if not a number, throw\
    \ error\n    if (!is_numeric($delimeter)) {\n        throw new Exception('delimeter\
    \ must be a number');\n    }\n    // declare empty output list\n    $out = [];\n\
    \    // iterate through each element in input list\n    foreach ($numbers as $n)\
    \ {\n        // add to output list\n        $out[] = $n;\n        // if this is\
    \ the last element in input list, add to output list\n        if (end($numbers)\
    \ == $n) {\n            $out[] = $delimeter;\n        }\n    }\n    // return\
    \ output list\n    return $out;\n}\n\n/**\n * Calculates the factorial of the\
    \ input integer number.\n * It starts with the number 1, then double it every\
    \ time, resulting in factorials.\n * For example for input of 6, it returns 120.\n\
    \ *\n * @param int $n number\n *\n * @return int factorial\n */\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmrsgo97.php:46\n\
    Stack trace:\n#0 /tmp/tmpfmrsgo97.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpfmrsgo97.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) return [];\n    $numbers = array_filter($numbers);\n\
    \    return array_map(function($number, $i) use ($delimeter) {\n        return\
    \ ($i % 2) === 0 ? $number . $delimeter . $number : $number . $delimeter;\n  \
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,grouping,arraylist,array-merge\
    \ |>\n<| a tags=php,arrays,grouping,arraylist,array-merge dscore=3 |>\nThis should\
    \ do it:\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9pcbdd3g.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = array();\n    $last = null;\n    foreach ($numbers as $number)\
    \ {\n        if ($last !== null && $last != $delimeter) {\n            $result[]\
    \ = $last;\n        }\n        $last = $number;\n    }\n    if ($last !== null)\
    \ {\n        $result[] = $last;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgfgmrah.php:28\n\
    Stack trace:\n#0 /tmp/tmppgfgmrah.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppgfgmrah.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_merge(array_fill(0, count($numbers) / 2, $delimeter), $numbers,\
    \ array_fill(0, count($numbers) / 2, $delimeter));\n}\n\n/**\n * Returns an array\
    \ of all unique items in an array or array-like object\n *\n * @param array|object\
    \ $arr Array, or object to extract items from\n *\n * @return array\n */\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5u7stmz.php:24\n\
    Stack trace:\n#0 /tmp/tmph5u7stmz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph5u7stmz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_reduce($numbers, function ($numbers, $number) {\n    return $numbers\
    \ + $delimeter + $number;\n  }, '');\n}\n\n/*\n * Map the given function over\
    \ each element of an input array and concatenate the results into a string\n *\
    \ >>> map([1,2,3], \"fn\", [\"foo\", \"bar\"]) // => \"fn:foo,fn:bar\"\n */\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnl_d6br.php:22\n\
    Stack trace:\n#0 /tmp/tmpmnl_d6br.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmnl_d6br.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!is_array($numbers)) {\n        throw new \\InvalidArgumentException(\"\
    'numbers' must be an array!\");\n    }\n    if ($numbers[0] instanceof Number)\
    \ {\n        $numbers = array_slice($numbers, 1);\n    }\n    if (!is_integer($delimeter))\
    \ {\n        throw new \\InvalidArgumentException(\"'delimeter' must be an integer!\"\
    );\n    }\n\n    $result = [];\n    foreach ($numbers as $number) {\n        $result[]\
    \ = $number;\n        $result[] = $delimeter;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvwi716x.php:32\n\
    Stack trace:\n#0 /tmp/tmpdvwi716x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdvwi716x.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_merge(\n        array_fill(0, $delimeter, []), $numbers, array_fill(0,\
    \ $delimeter, [])\n    );\n}\n\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdfw_a7qx.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = [];\n  foreach ($numbers as $number) {\n    $result[] = $number;\n\
    \    $result[] = $delimeter;\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,list,arrays,spl,foreach\
    \ |>\n<| c |>\nThis should definitely be an answer.\n<|/ c |>\n<| a |>\nYou can\
    \ use array_chunk to split an array into smaller arrays and then use array_map\
    \ to iterate over the chunks and add \"-\" between each one. Something like:\n\
    <code>\n$result = [1,2,3];\n$chunks = array_chunk($result, 2);\n$result2 = array_map(function($item){\n\
    \    return $item[0].'-'.$item[1];\n}, $chunks);\nvar_dump($result2);\n</code>\n\
    <|/ a dscore=5 tags=php,list,arrays,spl,foreach |>\n<| c |>\nThat would work,\
    \ but a little more complicated than it needs to be.  `$result` already has two\
    \ items in it, so just use a loop.\n<|/ c |>\n<| a dscore=5 |>\nIf you know that\
    \ your array will be a multiple of 2 you can do something like:\n<code>\n$array\
    \ = array(1, 2, 3, 4, 5, 6);\n$array2 = array_chunk($array, 2);\nforeach ($array2\
    \ as $key => $values) {\n  $array2[$key] = implode('-', $values);\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbx380q1h.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = $numbers[0];\n  for ($i = 1; $i < count($numbers); $i++) {\n    $result\
    \ .= $delimeter;\n    $result .= $numbers[$i];\n  }\n  return $result;\n}\n\n\
    /**\n * Returns a substring of a string between offset and length, inclusive.\n\
    \ *\n * Note: Substrings use zero-based indexing.\n *\n * If offset and length\
    \ are omitted, the substring will be the entire string\n *\n * @codeCoverageIgnore\n\
    \ * @see http://php.net/substr, http://php.net/substr_count\n * @param  string\
    \ $str\n * @param  int    $offset\n * @param  int    $length\n * @return string\
    \ Substring of a string\n */\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplz4a5hc_.php:35\n\
    Stack trace:\n#0 /tmp/tmplz4a5hc_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplz4a5hc_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = [];\n  $numberLength   = count($numbers);\n  for ($i = 0; $i < $numberLength;\
    \ $i += 1) {\n    if ($i > 0) {\n      $result[] = $delimeter;\n    }\n    $result[]\
    \ = $numbers[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $output = [];\n    foreach ($numbers as $number) {\n        $output[] = $number;\n\
    \        if (is_array($numbers) && count($numbers) >= 2) {\n            $output[]\
    \ = $delimeter;\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphu9g4_l4.php:24\n\
    Stack trace:\n#0 /tmp/tmphu9g4_l4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphu9g4_l4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_map(function($item) use ($numbers, $delimeter) {\n        $exploded\
    \ = explode($delimeter, $item);\n        return implode($delimeter, $exploded)\
    \ . $numbers[$exploded[0]];\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_da3jkzq.php:20\n\
    Stack trace:\n#0 /tmp/tmp_da3jkzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_da3jkzq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($carry, $number) {\n        return\
    \ $carry != null ? array_slice($carry, 0, 2) : $number + array($delimeter, $carry);\n\
    \    }, array());\n}\n</code>\nThe array_reduce function calls a function and\
    \ passes in an accumulator - an accumulator is the value that results from running\
    \ the previous function - and the current number - in this case, the number we're\
    \ dealing with.\nFor every element of the input array, we check if the accumulator\
    \ is null, if so we return it - otherwise we return the rest of the array after\
    \ the previous function was called - a slice of the accumulator at the start of\
    \ the array and $number + the rest of the array - and then we add an array containing\
    \ the delimiter to the beginning of this array. This array is then passed to the\
    \ next iteration of the reduce function, and passed as the accumulator.\n<|/ a\
    \ tags=arrays,php dscore=1 |>\n<| c |>\nYour code produced an array with only\
    \ two elements. Please see my original post to see what I'm looking for.\n<|/\
    \ c |>\n<| c |>\nAh I misunderstood - I thought you wanted an array with elements\
    \ that had an extra element at the start that had a delimiter after the number.\
    \ Sorry about that.\n<|/ c |>\n<| c |>\nNo problem. I appreciate your help.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(0 => 'one', 1 => 'two', 2 =>\
    \ 'three');\n$result = array();\nforeach ($array as $value) {\n    $result[] =\
    \ array($value, '-');\n}\nprint_r($result);\n</code>\noutput\n<code>\nArray\n\
    (\n    [0] => Array\n        (\n            [0] => one\n            [1] => -\n\
    \        )\n\n    [1] => Array\n        (\n            [0] => two\n          \
    \  [1] => -\n        )\n\n    [2] => Array\n        (\n            [0] => three\n\
    \            [1] => -\n        )\n\n)\n</code>\n<|/ a tags=arrays,php |>\n<| a\
    \ tags=arrays,php |>\nUse array_reduce()\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpge5_nzpf.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = $number;\n        if (count($result) >= $delimeter) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,recursion\
    \ |>\n<| c |>\nIt's worth noting that this works because arrays are passed by\
    \ reference, so each element in the result will actually be pointing to a different\
    \ element in the original array.\n<|/ c |>\n<| c |>\nThis works just fine, but\
    \ it only works when there's a way to \"intersperse\" the array with the delimiter.\
    \ If you do `echo intersperse([1,2,3],4);` it will only output `[1,4,2,4,3]`,\
    \ which is not the order OP needs.\n<|/ c |>\n<| c |>\nThanks for the suggestion.\
    \ I updated my answer with a more generic solution.\n<|/ c |>\n<| c |>\nI think\
    \ you can remove the `if ($delimeter)` since it's redundant.\n<|/ c |>\n<| c |>\n\
    : You are right. `$delimeter` is always true.\n<|/ c |>\n<| a tags=php,arrays,recursion\
    \ |>\nThis function will work for any number of elements and will also work for\
    \ the empty arrays:\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9qhjsptb.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_reduce(\n    $numbers,\n    function ($carry, $num) {\n      return\
    \ $carry ? [$carry, $num] : $num;\n    },\n    []\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8gv26r7.php:23\n\
    Stack trace:\n#0 /tmp/tmpv8gv26r7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpv8gv26r7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return $numbers[0]\n        ? [$numbers[0]]\n            . array_map(function($number,\
    \ $i) use ($numbers, $delimeter) {\n                return array_slice($numbers,\
    \ $i, $i + 2)\n                    . [$delimeter]\n                    . array_slice($numbers,\
    \ $i + 1, null, $i + 1);\n            }, array_merge(array_slice($numbers, 1),\
    \ [null, null, $numbers[2]]))\n            . $numbers[1];\n}\n</code>\n<|/ a |>\n\
    <| c |>\nGreat answer, but the question was about performance. My code is quite\
    \ inefficient in performance, especially on larger arrays. For small arrays, you\
    \ get a huge speedup by calling `array_map()` once per array element, for larger\
    \ arrays, it becomes a bottleneck.\n<|/ c |>\n<| c |>\nI'm glad you liked it.\
    \ My code is a bit more efficient in terms of speed for small arrays (2-4 elements)\
    \ compared to your code. I guess that's because you avoid `array_map()` per array\
    \ element, but I wouldn't worry about it for larger arrays. My code is actually\
    \ faster for smaller arrays, but slower for larger arrays. In terms of memory\
    \ efficiency, your code is faster for small arrays, slower for larger arrays.\
    \ In terms of CPU efficiency, my code is faster for small arrays, slower for larger\
    \ arrays.\n<|/ c |>\n<| c |>\nAs for readability, I have very strong opinions\
    \ about my code compared to the original answer in the question you linked. I\
    \ think that the code is much clearer than the original answer and it also solves\
    \ the problems that I mentioned. I don't know what's your opinion, but I think\
    \ it's important to be aware of all the reasons that you mentioned and to always\
    \ have a strong opinion about your code and don't spread misconceptions about\
    \ performance without actually trying to prove that there's anything wrong with\
    \ the performance.\n<|/ c |>\n<| c |>\nI'm going to mark this as the correct answer.\
    \ My original question didn't include enough information to actually make this\
    \ useful. I was specifically concerned with performance, and this does address\
    \ performance problems. My use case was a very large array, and this was indeed\
    \ the bottleneck.\n<|/ c |>\n<| c |>\nIf this answer solved your problem, you\
    \ should mark it as correct by clicking the check mark to the left of the answer.\
    \ If you don't know how to do this, you can check out [this question](https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work)\
    \ on how to do it.\n<|/ c |>\n<| a dscore=0 tag\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7s2397v6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \t$numbers = array_reverse($numbers);\n\t$numbers = array_map(function($e) use\
    \ ($delimeter) { return $e . $delimeter; }, $numbers);\n\treturn array_shift($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6whquhr1.php:18\n\
    Stack trace:\n#0 /tmp/tmp6whquhr1.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6whquhr1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function($numbers, $number) {\n        return\
    \ $numbers + $delimeter . sprintf('%0d', $number);\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptz9uym2s.php:18\n\
    Stack trace:\n#0 /tmp/tmptz9uym2s.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptz9uym2s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    foreach ($numbers as $number) {\n        yield $number;\n        yield $delimeter;\n\
    \    }\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n`return array_filter(...);` is\
    \ also a nice way of expressing what you want.\n<|/ c |>\n<| c |>\nThis is exactly\
    \ what I needed!\n<|/ c |>\n<| c |>\nAwesome, thanks! But what happens if the\
    \ separator is the same as what is already in the array?\n<|/ c |>\n<| c |>\n\
    If you have an array with several equal values, you will get only one of them\
    \ in output: `[1, 1, 2, 3]` -> `[1, \"1\", 2, 3]`\n<|/ c |>\n<| c |>\nHow can\
    \ we make this work with an array like `array('first','second','third','fourth','fifth','sixth')`?\
    \ If I do `[1 => 1, 2 => 1, 3 => 1, 4 => 2, 5 => 2, 6 => 3]` it works, but it\
    \ returns `array(1,2,3,4,5,6)`\n<|/ c |>\n<| a tags=arrays,php |>\nHere are two\
    \ more ways to do this:\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfcv8albz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (!is_array($numbers)) {\n\t\tthrow new InvalidArgumentException('Intersperse\
    \ expects parameters to be an array');\n\t}\n\t$result = [];\n\tforeach ($numbers\
    \ as $key => $value) {\n\t\tif (is_int($key)) {\n\t\t\t$result[] = $value;\n\t\
    \t} else {\n\t\t\t$result[] = $value;\n\t\t\t$result[] = $delimeter;\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\n/**\n * Takes an associative array as input, and returns\
    \ the array as a comma-separated list of its keys.\n *\n * @param array $array\
    \ Array to convert into a comma-separated list\n *\n * @return string Comma-separated\
    \ list of keys\n */\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93gbg6uf.php:36\n\
    Stack trace:\n#0 /tmp/tmp93gbg6uf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp93gbg6uf.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (!is_array($numbers)) {\n\t\tthrow new Exception('First parameter must be\
    \ an array.');\n\t}\n\n\tarray_walk($numbers, 'intval');\n\t$numbers = array_map(function\
    \ ($number) { return $number; }, $numbers);\n\treturn array_chunk($numbers, $delimeter,\
    \ true);\n}\n\n/**\n * Maps a callback on a list of objects (arrays).\n * Callback\
    \ is invoked with one argument, the array item.\n *\n * @param  array  $list\n\
    \ * @param  callable $callback\n * @param  array  $context\n * @return array List\
    \ after callback is applied to each item\n * @throws \\Exception on invalid $callback\
    \ provided\n * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::map\n\
    \ */\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwerzmzlk.php:34\n\
    Stack trace:\n#0 /tmp/tmpwerzmzlk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwerzmzlk.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_reduce($numbers, function($carry, $number) {\n    return $carry\
    \ ? [$delimeter => $carry] : $carry;\n  }, []);\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gy2dqoc.php:19\n\
    Stack trace:\n#0 /tmp/tmp4gy2dqoc.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4gy2dqoc.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $index => $number) {\n        if\
    \ ($index === 0) $result[] = $number;\n        else {\n            $result[] =\
    \ $number;\n            $result[] = $delimeter;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\nUsage:\n<code>\n$list = intersperse([1,2,3,4,5,6,7,8,9,10],\
    \ \",\");\necho $list;\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0_7p8a47.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = is_array($numbers) ? $numbers : [$numbers];\n    $delimeter =\
    \ is_string($delimeter) ? $delimeter : ',';\n    $result = [];\n    foreach ($numbers\
    \ as $number) {\n        $result[] = $number;\n        $result[] = $delimeter;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_odk8ug.php:24\n\
    Stack trace:\n#0 /tmp/tmpy_odk8ug.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpy_odk8ug.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_map(function ($num) use ($delimeter) {\n        return $num\
    \ . $delimeter;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_24u5bjq.php:19\n\
    Stack trace:\n#0 /tmp/tmp_24u5bjq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_24u5bjq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(\n        $numbers,\n        function($carry, $number)\
    \ {\n            return $carry != null ? array_merge($carry, [$number]) : array_push($carry,\
    \ $number);\n        },\n        []\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmpm9v3p4q_.php on line 11\n\nWarning: array_push() expects parameter\
    \ 1 to be array, null given in /tmp/tmpm9v3p4q_.php on line 11\n\nWarning: array_push()\
    \ expects parameter 1 to be array, null given in /tmp/tmpm9v3p4q_.php on line\
    \ 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9v3p4q_.php:23\n\
    Stack trace:\n#0 /tmp/tmpm9v3p4q_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpm9v3p4q_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers === []) {\n        return [];\n    }\n    $result = [];\n  \
    \  $index = 0;\n    $leng = $numbers.length;\n    while ($leng > 0) {\n      \
    \  $result[$index] = $numbers[$index];\n        $index++;\n        $index = $index\
    \ % $leng + $leng;\n        $leng--;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpdzfzc9vr.php on line 13\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzfzc9vr.php:29\nStack\
    \ trace:\n#0 /tmp/tmpdzfzc9vr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdzfzc9vr.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(array_chunk($numbers, $delimeter, true), function ($result,\
    \ $item) {\n        return array_merge($result, array_slice($item, 0, $delimeter\
    \ + 1), [$item[$delimeter + 1]], array_slice($item, $delimeter + 2));\n    },\
    \ []);\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfzfnpjng.php:19\n\
    Stack trace:\n#0 /tmp/tmpfzfnpjng.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfzfnpjng.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $results = [];\n  $numbers = array_values($numbers);\n  array_walk($numbers,\
    \ function(&$n) { $n = (string) $n; });\n  $numbers = array_chunk($numbers, 2);\n\
    \  array_walk($numbers, function(&$n, $i) { $n[] = $delimeter[$i]; });\n  $numbers\
    \ = array_chunk($numbers, 2);\n  array_walk($numbers, function(&$n) { $n = array_merge($n,\
    \ [$n[0], $n[1]]); });\n  array_walk($numbers, function(&$n) { $n = array_unique($n);\
    \ });\n  array_walk($numbers, function(&$n) { $n = array_intersect($n, $results);\
    \ });\n  array_walk($numbers, function(&$n) { $n = array_filter($n, 'strlen');\
    \ });\n  $numbers = array_values($numbers);\n  return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: array_intersect(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmpfds85f47.php on line 16\n\nWarning: array_filter() expects\
    \ parameter 1 to be array, null given in /tmp/tmpfds85f47.php on line 17\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpfds85f47.php:28\nStack trace:\n\
    #0 /tmp/tmpfds85f47.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfds85f47.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  if ($numbers == null || !is_array($numbers)) {\n    throw new Error('The `numbers`\
    \ argument must be an non-empty array.');\n  }\n  if ($delimeter == null || !is_int($delimeter))\
    \ {\n    throw new Error('The `delimeter` argument must be an integer.');\n  }\n\
    \n  $result = [];\n\n  // Iterate over each element of the input array\n  foreach\
    \ ($numbers as $key => $value) {\n    // Add value if it is not the last element\
    \ in input array\n    if (!isset($numbers[$key + 1])) {\n      $result[] = $value;\n\
    \    }\n\n    // Add delimeter between consecutive elements of input array if\
    \ not the last element in input array\n    if ($key + 1 < count($numbers)) {\n\
    \      $result[] = $delimeter;\n    }\n  }\n\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: The `numbers` argument must be an non-empty\
    \ array. in /tmp/tmpqjez1drb.php:9\nStack trace:\n#0 /tmp/tmpqjez1drb.php(34):\
    \ intersperse(Array, 7)\n#1 /tmp/tmpqjez1drb.php(38): candidate(Array, 7)\n#2\
    \ /tmp/tmpqjez1drb.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpqjez1drb.php\
    \ on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($delimeter < 0) {\n        throw new Exception(\"Cannot intersperse negative\
    \ numbers\");\n    }\n    $result = array();\n    foreach($numbers as $number)\
    \ {\n        array_push($result, $number);\n        if (count($result) % $delimeter\
    \ == 0) {\n            array_push($result, $delimeter);\n        }\n    }\n  \
    \  return $result;\n}\n</code>\nNote that this is not the most efficient way to\
    \ do this, however, because it uses a loop. This can easily be fixed by using\
    \ a loop instead, which I leave as an exercise for the reader.\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nHmm. Your solution is almost right but not quite. It's returning\
    \ the wrong results. I updated my question with the results. Any thoughts on why\
    \ I'm getting wrong results?\n<|/ c |>\n<| c |>\n- you're right. My bad. There\
    \ was a small bug in my original post, which I fixed. Your code should work now.\n\
    <|/ c |>\n<| c |>\n- It may take a little while to get my head wrapped around\
    \ PHP array functions and iterators. Here's a solution using only loops: http://codepad.org/Rt3n9yZj\n\
    <|/ c |>\n<| c |>\nI updated my question with the new code. Could you have a look\
    \ and see why I'm getting wrong results?\n<|/ c |>\n<| c |>\n- Looks like your\
    \ code has some issues. I've updated my answer with one that should work now.\
    \ Also, I believe that my solution was incorrect, and that you need only a single\
    \ loop, not two.\n<|/ c |>\n<| a dscore=2 |>\nTry something like this:\n<code>\n\
    foreach($arr as $val) {\n    $count++;\n    if ($count == 1) {\n        echo $val.\"\
    \\n\";\n    } else {\n        echo $val;\n    }\n}\n</code>\nThe $count variable\
    \ keeps track of whether you are at first element in the array or not. If you\
    \ want to make it work for any number of elements you can simply make another\
    \ $counter variable and use it in place of $count.\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis is only giving me the first value in the array. I updated my question\
    \ to include the results I'm getting.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I have edited my answer.\n<|/ c |>\n<| c |>\nThanks again, but it's\
    \ not working correctly. My updated code shows the results. Any idea why I'm getting\
    \ wrong results?\n<|/ c |>\n<| c |>\nOh, I just realised you're missing a semicolon\
    \ after your \nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi45h2rs0.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    foreach ($numbers as $index => $number) {\n        if ($index > 0) {\n  \
    \          array_push($numbers, $delimeter);\n        }\n        array_push($numbers,\
    \ $number);\n    }\n    return $numbers;\n}\n</code>\n<|/ a dscore=4 |>\n<| c\
    \ |>\nVery nice, and very helpful, thank you. I do however have two questions\
    \ about the code. Firstly, what is the difference between the two solutions? Secondly,\
    \ is there a way to do this without using the \"range\" function? Or to accomplish\
    \ the same goal in an alternative way?\n<|/ c |>\n<| c |>\nThe main difference\
    \ is the use of [array_slice](http://php.net/array_slice) and [array_map](http://php.net/array_map).\
    \ These functions are very powerful, but I personally don't like them because\
    \ they are too complicated for the simple task. My solution uses the \"range\"\
    \ function, but I personally think it looks better. I don't think there is an\
    \ alternative way.\n<|/ c |>\n<| c |>\nThat makes a lot more sense. Thanks for\
    \ clarifying that for me.\n<|/ c |>\n<| a dscore=4 |>\nHere's a PHP 7 solution\
    \ using iterators:\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpibwipls9.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $numberList = array_slice($numbers, 0, -1);\n  $numberList[] = $delimeter;\n\
    \  return array_merge($numberList, array_slice($numbers, -1));\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4guw5zp7.php:18\n\
    Stack trace:\n#0 /tmp/tmp4guw5zp7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4guw5zp7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function($result, $element) {\n        return\
    \ array_merge([$element], $result);\n    }, []);\n}\n</code>\n<|/ a dscore=1 tags=function,php\
    \ |>\n<| c |>\nThis looks promising, but I get a fatal error with it.\n\nFatal\
    \ error: Cannot use object of type stdClass as array\n<|/ c |>\n<| c |>\nHi, I\
    \ made a small edit. `array_merge` now accepts a list instead of a single object.\
    \ Sorry about that. Give it a shot.\n<|/ c |>\n<| c |>\nAhh, I see, thank you.\
    \ Unfortunately, I'm still getting an error on the line where I call `$newArray\
    \ = array_merge($resultArray, $newArray);`\n\nFatal error: Cannot use object of\
    \ type stdClass as array\n<|/ c |>\n<| c |>\nWhat version of PHP are you using?\n\
    <|/ c |>\n<| c |>\nPHP Version 5.3.24 (cli)\n<|/ c |>\n<| a |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu02y81r2.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = array_pad($numbers, count($numbers) + 1, null);\n    $numbers[0]\
    \ = $delimeter;\n    return array_slice($numbers, 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbxqaai9.php:19\n\
    Stack trace:\n#0 /tmp/tmpkbxqaai9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpkbxqaai9.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(array_chunk($numbers, 2), function ($carry, $number)\
    \ {\n        return $carry\n            ? [$delimeter.$number.$carry]\n      \
    \      : [$number];\n    }, []);\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubk6gca7.php:21\n\
    Stack trace:\n#0 /tmp/tmpubk6gca7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpubk6gca7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($carry, $item) {\n        return\
    \ array_merge([$item], $carry);\n    }, []);\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7qn3pez4.php:19\n\
    Stack trace:\n#0 /tmp/tmp7qn3pez4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7qn3pez4.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \tif (!is_array($numbers)) return false;\n\t$numbers = array_reverse($numbers);\n\
    \tforeach ($numbers as $i => $number) {\n\t\t$results[] = $number;\n\t\tif ($i\
    \ > 0 && $i % $delimeter == 0) {\n\t\t\t$results[] = $delimeter;\n\t\t}\n\t}\n\
    \treturn array_reverse($results);\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, null given\
    \ in /tmp/tmpzifqiefr.php on line 16\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpzifqiefr.php:24\nStack trace:\n#0 /tmp/tmpzifqiefr.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzifqiefr.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers_count = count($numbers);\n    $interspersed_numbers = $interspersed_numbers\
    \ = array();\n    for ($i = 0; $i < $numbers_count; $i++) {\n        if ($i !==\
    \ 0) {\n            $interspersed_numbers[] = $delimeter;\n        }\n       \
    \ $interspersed_numbers[] = $numbers[$i];\n    }\n    return $interspersed_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(\n        $numbers,\n        function ($carry, $number)\
    \ {\n            return $carry ? [$carry, $number] : [$number];\n        },\n\
    \        []\n    );\n}\n</code>\n<|/ a |>\n<| c |>\nThat's interesting, but I\
    \ do want them to be the same length. Also, this still assumes I already have\
    \ the numbers I'm working with -- I'm looking for a more generic solution that\
    \ will work on any array for me.\n<|/ c |>\n<| c |>\nThanks for the answer. I\
    \ was thinking more or less of the same thing -- just didn't know if there was\
    \ some clever way of doing it using PHP's built-in functions. Your answer looks\
    \ more elegant than mine.\n<|/ c |>\n<| a dscore=2 tags=arrays,php,function |>\n\
    <code>\n$array = array(1, 2, 3);\n$array2 = array();\nforeach($array as $key=>$val){\n\
    \    array_push($array2, $val);\n    if($key+1 < count($array)){\n        array_push($array2,\
    \ $array[$key+1]);\n    }\n}\n</code>\n<|/ a |>\n<| a |>\nI realize this isn't\
    \ very efficient, but I'm pretty sure the fastest would be to just use array_splice()\n\
    <code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3w503wh8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    foreach (array_chunk($numbers, 2) as $numbers) {\n        yield $numbers[0];\n\
    \        foreach ($numbers as $number) {\n            yield $delimeter;\n    \
    \        yield $number;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wbg6f1u.php:22\n\
    Stack trace:\n#0 /tmp/tmp7wbg6f1u.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7wbg6f1u.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $n) {\n        $result[] = $n;\n\
    \        if (count($result) > 2) {\n            $result[] = $delimeter;\n    \
    \    }\n    }\n    return $result;\n}\n\n$a = array_map(\n    function ($el) {\n\
    \        return $el % 2 == 0;\n    },\n    array_filter(\n        range(0, 30),\n\
    \        function ($el) {\n            return $el >= 3;\n        }\n    )\n);\n\
    \n$a = array_map(\n    function ($el) {\n        return $el % 2 == 0;\n    },\n\
    \    array_filter(\n        range(0, 30),\n        function ($el) {\n        \
    \    return $el >= 3;\n        }\n    )\n);\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdvnru34.php:47\n\
    Stack trace:\n#0 /tmp/tmpvdvnru34.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpvdvnru34.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    foreach ($numbers as $number) {\n        $numbers[] = $number;\n    }\n\n\
    \    $numbers = array_map(function ($number) {\n        return $delimeter . $number;\n\
    \    }, $numbers);\n\n    return $numbers;\n}\n</code>\n<|/ a dscore=4 |>\n<|\
    \ c |>\nthanks for the code but the thing is I need to use a foreach loop in my\
    \ function so I cant use explode\n<|/ c |>\n<| c |>\nwhat do you mean by \"foreach\
    \ loop\"? If you need `explode`, then use it\n<|/ c |>\n<| c |>\ni need foreach\
    \ loop in my function so I cant use explode\n<|/ c |>\n<| c |>\nforeach is just\
    \ a loop, the same for loop as in other languages such as python, C#, java etc\n\
    <|/ c |>\n<| a dscore=4 tags=arrays,php |>\nHere's another possible solution using\
    \ a closure\n<code>\n/**\n * Intersperse a delimited string into an array.\n *\n\
    \ * array $array\n * string $delim\n * string $value\n * string\n */\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphc2e_s5g.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!is_array($numbers)) {\n        throw new Exception('First argument must\
    \ be an array');\n    }\n\n    $result = [];\n    foreach ($numbers as $number)\
    \ {\n        $result[] = $number;\n        $result[] = $delimeter;\n    }\n\n\
    \    return $result;\n}\n</code>\nThe array_slice() function is used to cut off\
    \ the first and last element from the input array, but I didn't find any more\
    \ elegant solution to avoid this.\n<|/ a dscore=2 |>\n<| c |>\nI like your first\
    \ solution. It doesn't rely on the use of an intermediate array. I would just\
    \ add `array_pop` after the first `array_slice` call though.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI see that there were quite a few answers already posted for this question\
    \ but I decided to take a different approach and use an iterator (which also uses\
    \ less memory and doesn't require a temporary array):\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvh1wv3_6.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        if ($number != $delimeter) {\n            $result[] = $delimeter;\n \
    \       }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php dscore=1 |>\n\
    <| a tags=php |>\nI suggest you to use array_chunk() function. \n<code>\n$chunks\
    \ = array_chunk($numbers, 2); // chunking your $numbers to two\n</code>\nand then\
    \ you can iterate over each chunk:\n<code>\nforeach ($chunks as $chunk) {\n  \
    \  echo implode(', ', $chunk);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI think\
    \ he wants 1 to be in the first position, not 2, 3 in the first and 4 in the second.\n\
    <|/ c |>\n<| c |>\nThanks everyone! This was the simplest and most effective solution.\
    \ Working like a charm. Happy Holidays!\n<|/ c |>\n<| a |>\n<code>\n<?php\n$numbers=array(1,2,3,4,5,6,7);\n\
    $new_numbers=array();\nforeach ($numbers as $number)\n{\n $new_numbers[]=$number;\n\
    }\n$new_numbers[count($numbers)-1]=$numbers[count($numbers)-1];\n$new_numbers[count($numbers)-2]=$numbers[count($numbers)-2];\n\
    $new_numbers=array_slice($new_numbers,0,count($numbers)-2);\n$new_numbers=array_merge($new_numbers,array($numbers[count($numbers)-1]));\n\
    $new_numbers=array_merge($new_numbers,array_slice($new_numbers,count($numbers)-1,count($numbers)));\n\
    print_r($new_numbers);\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp230yl54b.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $list = array_slice($numbers, 0, -1);\n    foreach ($numbers as $number =>\
    \ $value) {\n        $list[] = $value;\n        if ($number < count($numbers)\
    \ - 1) {\n            $list[count($list) - 1] .= $delimeter;\n        }\n    }\n\
    \    return $list;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php,sorting |>\n<code>\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprrl0iveo.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $out = array();\n    $last = null;\n    $size = count($numbers);\n    for\
    \ ($i = 0; $i < $size; $i++) {\n        $out[$i] = $numbers[$i];\n        if ($last\
    \ !== null) {\n            if ($last + 1 !== $i) $out[$i] = $delimeter;\n    \
    \    }\n        $last = $i;\n    }\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkx2bani.php:27\n\
    Stack trace:\n#0 /tmp/tmphkx2bani.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphkx2bani.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // If `delimeter' is not an integer, then throw an error\n    if (intval($delimeter)\
    \ !== $delimeter) {\n        throw new InvalidArgumentException('Delimiter must\
    \ be an integer');\n    }\n    // If `numbers' is not a list, then throw an error\n\
    \    if (!is_array($numbers)) {\n        throw new InvalidArgumentException('Numbers\
    \ must be a list');\n    }\n    // Create a new list containing an empty string\
    \ in each element\n    $result = [];\n    foreach ($numbers as $number) {\n  \
    \      $result[] = '';\n    }\n    // The last element in `numbers'\n    $last_number\
    \ = array_pop($numbers);\n    // If `last_number' is empty, then set it to `delimeter`\n\
    \    if (!$last_number) {\n        $last_number = $delimeter;\n    }\n    // Re-loop\
    \ through the numbers, appending each element to `$result` until we get to the\
    \ last one\n    $result = $result;\n    foreach ($numbers as $number) {\n    \
    \    $result[] = $number;\n    }\n    // Append the last number\n    $result[]\
    \ = $last_number;\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpquydxi0r.php:42\n\
    Stack trace:\n#0 /tmp/tmpquydxi0r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpquydxi0r.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_map(function ($number) {\n        return $number . $delimeter;\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz_4i7tv.php:19\n\
    Stack trace:\n#0 /tmp/tmpbz_4i7tv.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpbz_4i7tv.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers == NULL) {\n        return [];\n    }\n\n    if ( ! is_int($delimeter)\
    \ || $delimeter <= 0) {\n        throw new InvalidArgumentException('Invalid delimeter,\
    \ must be an integer greater than zero');\n    }\n\n    list($first, ) = array_pad(explode($delimeter,\
    \ $numbers), 1, 0);\n\n    return array_merge([$first], array_map(function($number)\
    \ {\n        return $number . $delimeter;\n    }, $numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmprgk7wimy.php\
    \ on line 16\n\nWarning: array_pad() expects parameter 1 to be array, null given\
    \ in /tmp/tmprgk7wimy.php on line 16\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmprgk7wimy.php:29\nStack trace:\n#0 /tmp/tmprgk7wimy.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprgk7wimy.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = $number;\n        $result[] = $delimeter;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bmdnn_8.php:22\n\
    Stack trace:\n#0 /tmp/tmp_bmdnn_8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_bmdnn_8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n    return array_merge(...array_chunk($numbers,\
    \ ceil(count($numbers) / 2)), array_slice($numbers, 0, -1 * $delimeter));\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use positional argument after argument unpacking\
    \ in /tmp/tmporvzuga7.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        $result[] = $delimeter;\n    }\n\n    return $result;\n}\n</code>\n<|/\
    \ a tags=arrays,php dscore=2 |>\n<| a dscore=2 |>\narray_chunk\n<code>\n$chunk\
    \ = array_chunk($arr, 4);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$chunk = array_chunk($numbers,\
    \ 4);\n\nvar_dump($chunk);\n</code>\nOutput:\n<code>\narray(3) {\n  [0]=>\n  array(4)\
    \ {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n    [2]=>\n    int(3)\n   \
    \ [3]=>\n    int(4)\n  }\n  [1]=>\n  array(4) {\n    [0]=>\n    int(5)\n    [1]=>\n\
    \    int(6)\n    [2]=>\n    int(7)\n    [3]=>\n    int(8)\n  }\n  [2]=>\n  array(4)\
    \ {\n    [0]=>\n    int(9)\n  }\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ tags=arrays,php |>\nUse array_chunk\n<code>\n$result = array_chunk($numbers,\
    \ 4);\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\nyou can try this also.\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsp4sky0v.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = [];\n  $number = array_shift($numbers);\n  while ($number !== FALSE)\
    \ {\n    $result[] = $number;\n    $number = array_shift($numbers);\n  }\n  return\
    \ $result + intersperse($numbers, $delimeter);\n}\n</code>\n<|/ a tags=php dscore=2\
    \ |>\n<| c |>\nI find this solution more elegant than the one I proposed, as it\
    \ doesn't require the usage of multiple variables and is also easier to understand.\
    \ +1\n<|/ c |>\n<| c |>\nThis is a good solution - but for those reading this\
    \ in the future, the second parameter to the `intersperse` function is the separator\
    \ for the interspersed elements. I used `'.'` and it worked for me.\n<|/ c |>\n\
    <| c |>\nI've added the second parameter as well, to show how you can specify\
    \ what to intersperse with (in this case a period).\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpurxgccbg.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = [];\n  foreach ($numbers as $number) {\n    $result[] = $number;\n\
    \    if ($number != $numbers[count($numbers) - 1]) {\n      $result[] = $delimeter;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30x5lovc.php:24\n\
    Stack trace:\n#0 /tmp/tmp30x5lovc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp30x5lovc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    $length = 0;\n\n    foreach ($numbers as $number) {\n\
    \        if ($delimeter) {\n            if ($length > 0) {\n                $result[]\
    \ = $delimeter;\n            }\n            $length++;\n        }\n        $result[]\
    \ = $number;\n    }\n\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ is a bad idea, especially when the input is an array.\n<|/ c |>\n<| c |>\nWhat\
    \ do you mean by \"bad\"? The function just takes an array and returns an array\
    \ with added `delimeter` between every two consecutive elements. I don't see anything\
    \ wrong with it.\n<|/ c |>\n<| c |>\nThe function will fail if the array contains\
    \ any elements that is not a number.\n<|/ c |>\n<| c |>\nThat's why I added the\
    \ comment \"// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\". I thought the question was about numbers, not string\
    \ elements.\n<|/ c |>\n<| a tags=arrays,php |>\nA solution with array_reduce()\n\
    <code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgxx601n0.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($carry, $number) {\n        return\
    \ $carry ? $carry . [$delimeter, $number] : $number; // use arrays to concatenate\
    \ numbers if needed\n    }, []);\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1lepp_i.php:19\n\
    Stack trace:\n#0 /tmp/tmpj1lepp_i.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpj1lepp_i.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        $result[] = $delimeter;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqk5iero.php:22\n\
    Stack trace:\n#0 /tmp/tmpyqk5iero.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyqk5iero.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = [];\n  foreach($numbers as $n) {\n    if ($n > 0) {\n      $result[]\
    \ = $n;\n    } else {\n      $result[] = $delimeter;\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4rq6qc1d.php:24\n\
    Stack trace:\n#0 /tmp/tmp4rq6qc1d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4rq6qc1d.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = $number;\n\
    \    array_push($result, $delimeter);\n  }\n  return $result;\n}\n</code>\n<|/\
    \ a dscore=2 tags=arrays,php |>\n<| a dscore=2 tags=arrays,php |>\nHere's an alternative\
    \ which I think can be slightly more efficient.\n<code>\n/**\n * Intersperses\
    \ a value between every two members of an array.\n *\n * array $array An array\
    \ to intersperse the element into.\n * $value The value to intersperse.\n * array\n\
    \ */\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps79tlyvd.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(array_slice($numbers, 1), function ($carry, $item) {\n\
    \        return $carry .= $delimeter . $item;\n    }, array_shift($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue60h7i0.php:18\n\
    Stack trace:\n#0 /tmp/tmpue60h7i0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpue60h7i0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \treturn array_merge(array_fill(0, count($numbers) + 1, $delimeter), $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_hrych2.php:16\n\
    Stack trace:\n#0 /tmp/tmpf_hrych2.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpf_hrych2.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) return $numbers;\n    $result = [$numbers[0]];\n   \
    \ $numbers = array_slice($numbers, 1);\n    foreach ($numbers as $number) {\n\
    \        $result[] = $delimeter;\n        $result[] = $number;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = $numbers;\n    foreach ($numbers as $key => $number) {\n     \
    \   list($first, $second) = array_slice($numbers, 0, $key + 1);\n        $numbers[$key]\
    \ = $first . $delimeter . $second;\n    }\n\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp315cpr3q.php:23\n\
    Stack trace:\n#0 /tmp/tmp315cpr3q.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp315cpr3q.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!is_array($numbers)) {\n        throw new InvalidArgumentException(\"\
    Input must be an array\");\n    }\n\n    $result = [];\n    foreach ($numbers\
    \ as $number => $i) {\n        $result[] = $number;\n        if ($i < count($numbers)\
    \ - 1) {\n            $result[] = $delimeter;\n        }\n    }\n\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,arrays,split |>\n<| a dscore=0 |>\nA possible\
    \ solution is to use array_map and array_chunk.\nUsing array_map and array_chunk,\
    \ you will create an array of arrays, where each inner array is composed of two\
    \ elements.\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpow0eficz.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!is_array($numbers)) {\n        throw new InvalidArgumentException('Input\
    \ must be a list.');\n    }\n    $output = [];\n    foreach ($numbers as $key\
    \ => $number) {\n        if ($key % 2 == 0) {\n            $output[$key / 2] =\
    \ $number;\n        } else {\n            $output[] = $number;\n        }\n  \
    \  }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusjg938s.php:28\n\
    Stack trace:\n#0 /tmp/tmpusjg938s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpusjg938s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n\
    \        $result += $delimeter + $numbers[$i];\n    }\n    return $result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\nMy suggestion is to use recursion. In the\
    \ following code I use recursion to build a tree from a string of integers separated\
    \ by delimiter (here a space, ','). \n<code>\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa3unl3ai.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return $numbers[count($numbers) - 1] . implode($delimeter, $numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi865vy1.php:16\n\
    Stack trace:\n#0 /tmp/tmpyi865vy1.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpyi865vy1.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce(\n        $numbers,\n        function ($carry, $item)\
    \ use ($delimeter) {\n            return array_merge($carry, array($item, $delimeter));\n\
    \        },\n        array()\n    );\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n\
    Here is a recursive solution.\n<code>\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvp9aqa9h.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = [];\n  foreach($numbers as $number) {\n    $result[] = $number;\n\
    \    $result[] = $delimeter;\n  }\n  return $result;\n}\n</code>\nIn your specific\
    \ case:\n<code>\n$result = intersperse($numbers, $delimeter);\n</code>\n<|/ a\
    \ dscore=2 tags=php |>\n<| c |>\nThis would be very simple if that function could\
    \ be passed an array. How do you do this? Could you please modify your answer\
    \ to reflect this? I know how to do it with a single number, I just don't know\
    \ how to pass an array into a function.\n<|/ c |>\n<| c |>\n.Davis You would have\
    \ to write your own version of `array_fill()`\n<|/ c |>\n<| c |>\nThanks for this,\
    \ I really appreciate it. I was actually able to get it to work, thanks to your\
    \ help. :)\n<|/ c |>\n<| a tags=php dscore=1 |>\nYou could use array_map for this:\n\
    <code>\n$numbers = array(1, 2, 3, 4, 5);\n$result = array_map(function($number)\
    \ {\n    return $number . \"|\";\n}, $numbers);\necho implode('', $result);\n\
    </code>\n<|/ a |>\n<| a |>\nAs suggested, try array_map function and implode function\
    \ as such\n<code>\n$numbers = array(1, 2, 3, 4, 5);\n$result=array_map(function($a){\n\
    \    return $a . '|';\n},$numbers);\necho implode('', $result);\n</code>\n<|/\
    \ a tags=php dscore=1 |>\n<| a tags=php |>\nTry this \n<code>\n$result = array();\n\
    $number = array();\n\nfor ($i = 0; $i < count($numbers); $i++) {\n    $result[]\
    \ = $numbers[$i] . $delimeter;\n}\n\n$result = implode($result);\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php |>\n<code>\n<?php\n$number = array(1, 2, 3, 4,\
    \ 5);\n$result = array();\nfor ($i=0; $i<count($number); $i++) {\n    $result[]\
    \ = $number[$i] . '|';\n}\n$result = implode('', $result);\necho $result;\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2yzist0s.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[]\
    \ = $delimeter;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI ended up implementing this in my project with little modification.\
    \ Thanks!\n<|/ c |>\n<| a tags=arrays,php dscore=1 |>\nI ended up using array_chunk\
    \ and array_map functions from php array functions:\n<code>\n$chunks = array_chunk($numbers,\
    \ 2);\n$chunks_mapped = array_map(function ($chunk) { return $chunk[0] . ($chunk[1]?'.':'');\
    \ }, $chunks);\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\narray_chunk is your\
    \ friend here.  It will split your array in to an array of smaller arrays and\
    \ you can use the implode function to build the new array.\n<code>\n$numbers =\
    \ array(1,2,3,4);\n$chunks = array_chunk($numbers, 2); // Split your array into\
    \ $chunks of size 2\n$numbers_with_delimters = array();\nforeach ($chunks as $key\
    \ => $chunk) {\n    $numbers_with_delimters[] = implode('.',$chunk);\n}\n\nprint_r($numbers_with_delimters);\n\
    \nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6lfvxglv.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $numbers = array_filter($numbers);\n  $numbers = array_map(function ($number)\
    \ {\n    return $delimeter . $number;\n  }, $numbers);\n  return $numbers;\n}\n\
    </code>\n<|/ a dscore=3 tags=arrays,php,php-7,array-map |>\n<| a |>\nJust for\
    \ the records, here are two more solutions that use array_map.\n\narray_map\n\n\
    <code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5guukmgo.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (count($numbers) === 0) {\n        return $numbers;\n    }\n\n    // Get\
    \ length of longest sublist, starting from the beginning of input numbers\n  \
    \  $maxLength = 0;\n    foreach ($numbers as $num) {\n        $maxLength = $num\
    \ > $maxLength ? $num : $maxLength;\n    }\n\n    // Add length of delimeter to\
    \ maxLength, adding numbers to output list until it becomes more than maxLength\n\
    \    $result = [];\n    $currentIndex = 0;\n    foreach ($numbers as $num) {\n\
    \        while ($num > $maxLength) {\n            if ($currentIndex < count($numbers))\
    \ {\n                $result[] = $numbers[$currentIndex];\n            }\n   \
    \         $currentIndex++;\n        }\n        $result[] = $num;\n    }\n\n  \
    \  return $result;\n}\n</code>\n<|/ a tags=php,arrays,loops |>\n<| a tags=php,arrays,loops\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpenlh1hkq.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $output = [];\n    $last = $numbers[0];\n    foreach ($numbers as $number)\
    \ {\n        $output[] = $last;\n        $last = $number;\n    }\n    return $output.$delimeter.$last;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThis is an old thread but I ran across\
    \ this when I was searching for a solution to the same problem and I thought I\
    \ would share my solution.\n<code>\n<?php\n$arr = [1, 2, 3, 4];\n$arr2 = ['b',\
    \ 'c', 'd'];\n$arr3 = ['a', 'b', 'c', 'd'];\n\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpisbctjf5.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \treturn array_map(function($number) {\n\t\treturn $delimeter . $number;\n\t},\
    \ $numbers);\n}\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yups2px.php:18\n\
    Stack trace:\n#0 /tmp/tmp7yups2px.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp7yups2px.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_reduce($numbers, function($carry, $item) use ($delimeter) {\n\
    \    return $carry .= $delimeter + $item;\n  }, \"\");\n}\n</code>\n<|/ a tags=arrays,php,function\
    \ |>\n<| a dscore=2 |>\n<code>\n$a = array();\n$numbers = array(1, 2, 3);\n$result\
    \ = \"\";\nforeach($numbers as $key=>$number)\n{\n    $result .= $number;\n  \
    \  if(isset($numbers[$key+1]) && $number == $numbers[$key+1])\n    {\n       \
    \ $result .= $key;\n    }\n    $result .= \", \";\n}\n$result = substr($result,\
    \ 0, -2);\necho $result;\n</code>\n<|/ a tags=arrays,php,function |>\n<| c |>\n\
    The array is unordered and your condition will fail.\n<|/ c |>\n<| c |>\nI assumed\
    \ ordered from his description\n<|/ c |>\n<| a dscore=2 tags=arrays,php,function\
    \ |>\nThis should work:\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5ek7vlv2.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function($carry, $item) { return $carry ? [$carry,\
    \ $item] : [$item]; }, []);\n}\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4 tags=php\
    \ |>\nA simple way\n<code>\nlist($first,$second)=explode(\" \",$yourstring);\n\
    </code>\n<|/ a |>\n<| a tags=php dscore=4 |>\nIf you have an array like that :\n\
    <code>\n$strArray = array(\"first\" => \"foo\", \"second\" => \"bar\");\n</code>\n\
    You can use : \n<code>\n$strArray = array_map(function($v){return str_replace(\"\
    \ \",\"\",$v);}, $strArray);\n</code>\n<|/ a |>\n<| c |>\nThis is elegant, but\
    \ it's also an expensive solution.  Just imagine if you have 1000000 items, this\
    \ would take ~10 seconds vs ~0.01 seconds if you just had to loop through each\
    \ one.  For this simple situation, I wouldn't bother with it.  If you don't need\
    \ the speed of str_replace, this is a good solution.\n<|/ c |>\n<| a tags=php\
    \ dscore=3 |>\n<code>\nforeach($array as $key => $value) {\n    $newArray[$key]\
    \ = $value;\n}\n</code>\n<|/ a |>\n<| c |>\nThat is the same as array_walk_recursive(array_flip($array))\n\
    <|/ c |>\n<| c |>\nWhat does `array_flip` do?\n<|/ c |>\n<| a dscore=3 |>\nThe\
    \ fastest solution is the one posted by G. Salikhov.\nBut you also could use this:\n\
    <code>\n$array['first'] = \"foo\";\n$array['second'] = \"bar\";\n$array['third']\
    \ = \"foobar\";\n\n$array = array_map('trim', $array);\n</code>\nThis will trim\
    \ all elements of the array and leave you with this:\n<code>\nArray\n(\n    [first]\
    \ => foo\n    [second] => bar\n    [third] => foobar\n)\n</code>\n<|/ a tags=php\
    \ |>\n<| a tags=php dscore=2 |>\nJust try this code:\n<code>\n$array = array(\"\
    first\" => \"foo\", \"second\" => \"bar\");\n\n$array = array_map(\"trim\", $array);\n\
    </code>\n<|/ a |>\n<| a tags=php |>\nYou could also use a regular expression to\
    \ do it:\n<code>\n$string = \"first second third\";\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq2mfi9yj.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers = array_map('intval', $numbers);\n    return array_reduce($numbers,\
    \ function($carry, $number) {\n        return array_map(function($element) use\
    \ ($number, $delimeter) {\n            return $element . $delimeter;\n       \
    \ }, $carry) . [$number];\n    }, []);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$arr1=[1,2,3,4,5,6,7,8,9,10];\n$arr2=[];\nfor ($i=0;$i<count($arr1);$i++)\n\
    {\n    for ($j=$i;$j<count($arr1);$j++)\n    {\n        $arr2[]=$arr1[$i].$arr1[$j];\n\
    \    }\n}\n\necho \"<pre>\";\nprint_r($arr2);\n</code>\n<|/ a tags=php |>\n<|\
    \ c |>\nThis does not work for all inputs, see my answer for a working solution\n\
    <|/ c |>\n<| a tags=php |>\nFor anyone who is still looking for an answer. The\
    \ solution I found is the following:\n<code>\n<?php \n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1vek3qa2.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // If the length of the given list is less than 2, return an empty list\n\
    \    if (count($numbers) < 2) {\n        return [];\n    }\n\n    // Initialize\
    \ a new list which we will return\n    $return = [];\n\n    // Initialize a new\
    \ variable `index' which tracks current index of input list `numbers'\n    $index\
    \ = 0;\n\n    // Loop through the given list\n    foreach ($numbers as $number)\
    \ {\n        // If the current index is not the last index\n        if ($index\
    \ !== count($numbers) - 1) {\n            // Append the given number 'delimeter'\
    \ between the current element and next element in the given list\n           \
    \ $return[] = $number . $delimeter;\n        }\n        // If the current index\
    \ is last index\n        else {\n            // Append the given number 'delimeter'\
    \ at the end of the return list\n            $return[] = $number;\n        }\n\
    \        // Increment the index by one\n        $index++;\n    }\n\n    // Return\
    \ the return list\n    return $return;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nYour solution is nice but unfortunately doesn't work on all cases. For\
    \ example: intersperse([1,2,3], [1,2,3])\n<|/ c |>\n<| c |>\nOops, it looks like\
    \ I copied the wrong function from my answer, I've edited my answer with the correct\
    \ one.\n<|/ c |>\n<| c |>\nHaha, yes, I just saw it. I just posted my solution.\
    \ Nevertheless, I appreciate your effort. Thank you.\n<|/ c |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp11wtej6.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    foreach ($numbers as $index => $number) {\n        if ($index === 0) {\n\
    \            $newNumbers[] = $number;\n        } else {\n            $newNumbers[]\
    \ = $delimeter;\n            $newNumbers[] = $number;\n        }\n    }\n    return\
    \ $newNumbers;\n}\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpavqc70cg.php:24\n\
    Stack trace:\n#0 /tmp/tmpavqc70cg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpavqc70cg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_map(function ($item, $index) use ($delimeter) {\n    return is_null($index)\
    \ ? $item : $item . $delimeter;\n  }, $numbers);\n}\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a dscore=4 tags=arrays,php,string |>\nFor those who like functional programming\
    \ here is a PHP 8 version with array_fill and array_map functions:\n<code>\narray_fill(0,\
    \ count($items), $delimiter);\narray_map(function ($item, $index) use ($delimiter)\
    \ {\n    return $index ? $item : $delimiter . $item;\n}, $items);\n</code>\nor\
    \ with reduce:\n<code>\narray_reduce($items, function ($carry, $item, $index)\
    \ use ($delimiter) {\n    return $index ? $carry : $carry . $delimiter;\n}, '');\n\
    </code>\n<|/ a |>\n<| a tags=arrays,php,string |>\nI wanted a one liner, but this\
    \ also works. \n<code>\n$a = implode(\"\", $arr); \n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nThis is exactly what I was looking for. Works perfectly!\n<|/ c |>\n\
    <| c |>\nThis is exactly what I was looking for. Works perfectly!\n<|/ c |>\n\
    <| a |>\nAn alternative to Pekka's answer would be to use the implode() function.\
    \ It also takes any number of arguments and puts them between each of the items\
    \ in the array.\nExample:\n<code>\n$array = array('a', 'b', 'c');\necho implode('',\
    \ $array); // outputs abc\necho implode(' ', $array); // outputs a b c\necho implode(\"\
    \\n\", $array); // outputs a\noutput: a\nb\nc\n</code>\n<|/ a tags=arrays,php,string\
    \ dscore=4 |>\n<| c |>\nThis is the best answer here. The other one should be\
    \ deleted.\n<|/ c |>\n<| c |>\n`implode()` was introduced in PHP 5.3.0 - http://php.net/manual/en/function.implode.php\
    \ - this answer would have worked fine in earlier versions of PHP, but is no longer\
    \ valid.\n<|/ c |>\n<| a dscore=3 tags=arrays,php,string |>\nI've come up with\
    \ the following one-line code which I find very readable:\n<code>\nimplode(',',\
    \ array_map(function($v){return '\"'.$v.'\"';}, $arr));\n</code>\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkd5bdujj.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $interspersed = [];\n  foreach ($numbers as $number) {\n    $interspersed[]\
    \ = $number;\n    $interspersed[] = $delimeter;\n  }\n  return $interspersed;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7nieklz.php:22\n\
    Stack trace:\n#0 /tmp/tmpy7nieklz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpy7nieklz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function ($carry, $item) {\n        return\
    \ $carry ? [$item, $delimeter, $carry] : $item;\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp52_k99l.php:18\n\
    Stack trace:\n#0 /tmp/tmpp52_k99l.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpp52_k99l.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (empty($numbers)) {\n        return $numbers;\n    }\n\n    $result =\
    \ $numbers[0];\n    $numbers = array_slice($numbers, 1);\n    $delimeter = $delimeter\
    \ ?? ', ';\n\n    foreach ($numbers as $number) {\n        $result .= $delimeter\
    \ . $number;\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=php,algorithm,sorting\
    \ |>\n<| c |>\nI like this solution, because it doesn't rely on `array_splice`.\n\
    <|/ c |>\n<| a tags=php,algorithm,sorting dscore=4 |>\nI've come up with the following\
    \ function:\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp47ezpo1k.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = array();\n    $i = 0;\n    $len = count($numbers);\n\n    foreach\
    \ ($numbers as $number) {\n        if (!isset($result[$i])) {\n            $result[$i]\
    \ = $number;\n        } else {\n            $result[$i] += $delimeter + $number;\n\
    \        }\n        $i++;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmxnuykou.php:30\n\
    Stack trace:\n#0 /tmp/tmpmxnuykou.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmxnuykou.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function($carry, $item) {\n        return is_array($carry)\
    \ ? array_merge($carry, $item) : array($carry, $item);\n    }, function($a, $b)\
    \ { return $a.$delimeter.$b; });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1\
    \ |>\nMy approach is using array_chunk and array_map functions:\n<code>\n<?php\n\
    $input = [\n    1,\n    2,\n    3\n];\n\n$output = array_map(function($value)\
    \ use ($input) {\n    return implode(array_slice($input, 0, $value), $input[$value]);\n\
    }, array_chunk(array_keys($input), 2));\n\nvar_dump($output);\n</code>\nThe output:\n\
    <code>\narray(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\n \
    \ [2]=>\n  string(1) \"3\"\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks\
    \ for your help and for providing an alternative solution :)\n<|/ c |>\n<| a dscore=0\
    \ |>\nYou can use array_splice and array_merge to get the desired result.\n<code>\n\
    <?php\n$a = [1,2,3,4,5,6];\n$b = array_splice($a, 2, 2);\n$c = array_merge([2,3],$a);\n\
    print_r($c);\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn0srm5ck.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers_count = count($numbers);\n    if ($numbers_count === 0) {\n    \
    \    return $numbers;\n    }\n    $first_number = array_shift($numbers);\n   \
    \ $last_numbers = array_pop($numbers);\n\n    if ($numbers_count === 0 || $first_number\
    \ === 0) {\n        return [$first_number, $delimeter, $last_numbers];\n    }\n\
    \n    return array_map(function ($number) {\n        return $number . $delimeter;\n\
    \    }, $numbers) +\n        [$first_number, $last_numbers];\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThank you very much for this. I used it in a small project\
    \ of mine which I wrote on github https://github.com/cthomh/Bench-Array-Functions\n\
    <|/ c |>\n<| c |>\nThis works well for me.  But, it seems like there is an issue\
    \ when the input array has less than 3 elements.  It returns an array with only\
    \ 2 elements.  How can this be fixed?  Thanks\n<|/ c |>\n<| c |>\nWhat is the\
    \ expected behaviour when $numbers is less than 3?\n<|/ c |>\n<| c |>\nI tested\
    \ the code on php 7.2.22 and php 8.0.7 and the output is the same. PHP 7.2.22\
    \ returns `[]` PHP 8.0.7 returns `[1, 4, 2, 4, 3]`\n<|/ c |>\n<| c |>\n, It should\
    \ be an accepted answer. Thanks for providing the example code. :)\n<|/ c |>\n\
    <| a tags=arrays,php dscore=5 |>\nAn alternative to all the answers posted here,\
    \ that I just discovered is array_chunk().\n<code>\n$array = array(1, 2, 3, 4,\
    \ 5);\nprint_r(array_chunk($array, 2));\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa77ezxis.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $return = [];\n    foreach($numbers as $number) {\n        $return[] = $number;\n\
    \        $return[] = $delimeter;\n    }\n    return $return;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis is actually a great answer and I believe this is the most\
    \ \"functional\" answer so far. Although I think it is overkill to require a library\
    \ for something that could be easily done in 3 lines.\n<|/ c |>\n<| c |>\nIt can\
    \ be done in 3 lines, but this way the function is reusable. Also, this is easily\
    \ expanded to allow for an extra argument, such as a space or something, to separate\
    \ numbers. You could also write your own `implode` function as I did in this answer\
    \ [here](https://stackoverflow.com/a/48142581/1794376).\n<|/ c |>\n<| a tags=arrays,php,functional-programming\
    \ |>\nIf you're just looking to print out the array, you can simply use print_r($array);.\n\
    If you are looking to create a new array from your existing one with the spacing\
    \ added, you can use:\n<code>\n$newArray = array_map(function($a, $b) {\n    return\
    \ $a . $b;\n}, $array, $delimeter);\n</code>\n<|/ a dscore=4 |>\n<| c |>\n+1 for\
    \ print_r(). It doesn't add any extra spaces or new lines between the array elements.\n\
    <|/ c |>\n<| a dscore=4 |>\nHere's a function that does the same thing as array_map()\
    \ but using implode() instead of array_map():\n<code>\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_jmuxnwu.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (is_array($numbers) && !empty($numbers) && !is_numeric($delimeter)) {\n\
    \        $delimeter = array_shift($numbers);\n    }\n    $out = array();\n   \
    \ foreach ($numbers as $number) {\n        $out[] = $number;\n        $out[] =\
    \ $delimeter;\n    }\n    return $out;\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThanks for showing me another interesting way. But I prefer Sarfraz's\
    \ answer. It just looks nicer. :)\n<|/ c |>\n<| a tags=arrays,php |>\nUse array_chunk\n\
    <code>\n$arr = array_chunk(range(0, 100), 10);\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nAwesome, simple and straight forward, thanks!\n<|/ c |>\n<| c |>\nthis\
    \ should be the top answer. short and easy to implement.\n<|/ c |>\n<| c |>\n\
    I think you meant `array_chunk(range(0, 100), 10);` instead of `array_chunk(range(100,\
    \ 0), 10);` ?\n<|/ c |>\n<| c |>\nyep you are right. thanks for pointing out.\n\
    <|/ c |>\n<| a |>\nOne of the most useful array functions you can utilize in PHP\
    \ is array_reduce.\nExample:\n<code>\n<?php\n\n$numbers = array(1, 2, 3, 4, 5);\n\
    \n$result = array_reduce($numbers, function($carry, $val) {\n    return $carry\
    \ . ($val + 1);\n});\n\nvar_dump($result);\n</code>\nResult:\n<code>\nint(6)\n\
    </code>\nThis approach allows you to take any array and reduce it into one value\
    \ by accumulating each value while preserving any array structure.\n<|/ a dscore=5\
    \ tags=arrays,php |>\n<| a tags=arrays,php |>\nSince PHP 7.4 you can use array_column:\n\
    <code>\n$array = array_column($array, null, 'key');\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nNice one! Should be the answer.\n<|/ c |>\n<| c |>\nThis is what I was\
    \ looking for\n<|/ c |>\n<| c |>\nThis is better than my answer - very succinct\
    \ and works with associative arrays\n<|/ c |>\n<| c |>\nThis is nice and elegant!\
    \ This should be the accepted answer.\n<|/ c |>\n<| a dscore=5 |>\nPHP has array_chunk\
    \ and array_chunk-docs. \narray_chunk-docs:\nfunction candidate(...$args) {\n\
    \    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_nd0fhwf.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = array();\n  foreach ($numbers as $key => $value) {\n    $result[]\
    \ = $value;\n    if ($key < count($numbers)) {\n      $result[] = $delimeter;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx__maipe.php:23\n\
    Stack trace:\n#0 /tmp/tmpx__maipe.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpx__maipe.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    return array_reduce($numbers, function($carry, $item) {\n        return array_merge($carry,\
    \ array($delimeter => $item));\n    }, array());\n}\n</code>\nI personally hate\
    \ functional programming style with side-effects so I wouldn't use them in production\
    \ code (it makes it harder to debug, harder to reuse, harder to test).\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis is actually a great idea!  I just added a little\
    \ bit of extra functionality by adding a second parameter to `intersperse` to\
    \ specify the number of items to add between each item.\n<|/ c |>\n<| c |>\n:\
    \ Yes, `array_splice` can do the same thing as `array_map` but will modify the\
    \ array instead of creating a new one. :-)\n<|/ c |>\n<| a tags=arrays,php,recursion\
    \ |>\nA more generic version using array_walk(), array_map() and anonymous functions:\n\
    <code>\n$data = [1,2,3,4,5,6,7,8];\n$count = 3;\n\narray_walk($data, function(&$item)\
    \ use ($count) {\n    if($count) {\n        $item = array_shift($item).','.$item;\n\
    \    }\n\n    $count--;\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php,recursion\
    \ |>\nA little more general:\n<code>\nfunction candidate(...$args) {\n    return\
    \ intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpomf94mm1.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if (!$numbers || !$delimeter) {\n        return $numbers;\n    }\n    $result\
    \ = array();\n    foreach ($numbers as $number) {\n        $result[] = $number;\n\
    \        $result[] = $delimeter;\n    }\n    return $result;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't work for arrays of different lengths.\
    \ e.g. intersperse([1], [2, 3], [4]) returns [1, 4], intersperse([1, 2], [3],\
    \ [4]) returns [1, 4, 2]\n<|/ c |>\n<| c |>\nYou can try intersperse with $numbers\
    \ = array_merge(array_fill(0, count($numbers) - 1, null), $numbers);\n<|/ c |>\n\
    <| a tags=php,arrays |>\nFor PHP 7.0+ you can use the array_replace_recursive()\
    \ and array_replace() functions like so:\n<code>\n$array = [1, 2, 3];\n$array\
    \ = array_replace_recursive(...$array);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    But how do we do it in PHP 5.6?\n<|/ c |>\n<| a |>\nA solution to your problem\
    \ will involve using a recursive function and a flag. Here is a sample recursive\
    \ function:\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkvaanuig.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $result = array();\n    $previous = array_shift($numbers);\n    foreach ($numbers\
    \ as $number) {\n        $result[] = $previous;\n        $previous = $number;\n\
    \    }\n    $result[] = $previous;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobwii777.php:23\n\
    Stack trace:\n#0 /tmp/tmpobwii777.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpobwii777.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    // If input array is empty or has a single value, return empty array\n  \
    \  if (empty($numbers) || (count($numbers) == 1)) {\n        return [];\n    }\n\
    \    // Return first element of input list with interspersed values as delimeter\n\
    \    return [$numbers[0]];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    Use array_map and str_repeat:\n<code>\n$numbers = [1,2,3,4];\n$result = array_map(function($item)\
    \ use ($numbers, $delimiter) {\n    return $delimiter . str_repeat($item, $numbers);\n\
    }, $numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\nThe simplest\
    \ solution will be to use array_map. First of all you need a delimeter for every\
    \ element in the array. For example a comma.\n<code>\n$delimiter = ',';\n</code>\n\
    Then you need to create a function that will return a string with the element\
    \ and the number of times it must be repeated. For example for a number:\n<code>\n\
    function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl94t2x6d.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    if ($numbers === []) {\n        return [];\n    }\n    if ($numbers === [[]])\
    \ {\n        return [[]];\n    }\n    $lastItem = array_pop($numbers);\n    $returnArray\
    \ = array_merge(\n        array_fill(0, $delimeter, $lastItem),\n        $numbers,\n\
    \        array_fill(0, $delimeter, $lastItem)\n    );\n    return $returnArray;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0dj8f21.php:29\n\
    Stack trace:\n#0 /tmp/tmpj0dj8f21.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpj0dj8f21.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $result = array();\n  $numberCount = count($numbers);\n  for ($i = 0; $i <\
    \ $numberCount; $i++) {\n    $result[] = $numbers[$i];\n    if ($i < $numberCount\
    \ - 1) {\n      $result[] = $delimeter;\n    }\n  }\n  return $result;\n}\n</code>\n\
    And here is the benchmark results when running them in PHP7.3 (PHP 5.6 versions\
    \ are shown here):\n<code>\nBenchmarking intersperse() on 100000 iterations with\
    \ 10000 iterations/s\n                     memory usage % time  relative memory\n\
    intersperse() 100000 iterations  105.61 MB    98.63 MB\nintersperse() 100000 iterations\
    \  138.65 MB    94.63 MB\nintersperse() 100000 iterations  158.07 MB    94.63\
    \ MB\nintersperse() 100000 iterations  198.42 MB    94.63 MB\nintersperse() 100000\
    \ iterations  246.99 MB    94.63 MB\nintersperse() 100000 iterations  289.25 MB\
    \    94.63 MB\nintersperse() 100000 iterations  329.76 MB    94.63 MB\nintersperse()\
    \ 100000 iterations  360.35 MB    94.63 MB\nintersperse() 100000 iterations  399.67\
    \ MB    94.63 MB\nintersperse() 100000 iterations  442.15 MB    94.63 MB\nintersperse()\
    \ 100000 iterations  473.74 MB    94.63 MB\nintersperse() 100000 iterations  504.31\
    \ MB    94.63 MB\nintersperse() 100000 iterations  544.88 MB    94.63 MB\nintersperse()\
    \ 100000 iterations  575.37 MB    94.63 MB\nintersperse() 100000 iterations  605.86\
    \ MB    94.63 MB\nintersperse() 100000 iterations  646.38 MB    94.63 MB\nintersperse()\
    \ 100000 iterations  676.86 MB    94.63 MB\nintersperse() 100000 iterations  707.37\
    \ MB    94.63 MB\nintersperse() 100000 iterations  737.86 MB    94.63 MB\nintersperse()\
    \ 100000 iterations  778.37 MB    94.63 MB\nintersperse() 10000\nfunction candidate(...$args)\
    \ {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3c0ld8bp.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \    $numbers_length = count($numbers);\n    for ($i = 0; $i < $numbers_length;\
    \ $i++) {\n        array_push($numbers, $i, $delimeter);\n    }\n    return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return intersperse(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), 7) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !==\
    \ array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxc47ph_b.php:21\n\
    Stack trace:\n#0 /tmp/tmpxc47ph_b.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxc47ph_b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  return array_reduce($numbers, static function ($result, $number) {\n    return\
    \ $result ? [$delimeter, $number, $result] : [$number];\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6,\
    \ 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sit1wcf.php:18\n\
    Stack trace:\n#0 /tmp/tmp5sit1wcf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5sit1wcf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1,\
    \ 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse($numbers, $delimeter) {\n\
    \  $return = array();\n  foreach ($numbers as $index => $value) {\n    $return[]\
    \ = $value;\n    if ($index % 2 == 0) {\n      $return[] = $delimeter;\n    }\n\
    \  }\n  return $return;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis\
    \ could be helpful\n<code>\nfunction candidate(...$args) {\n    return intersperse(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8)\
    \ !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2ouwx06s.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
