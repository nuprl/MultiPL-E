name: HumanEval_130_tri
language: php
results:
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = array(2);\n    for($i\
    \ = 1; $i <= $n; $i++){\n        if ($i % 2 == 0){\n            $arr[] = tri($i-2)\
    \ + tri($i-1);\n        } else {\n            $arr[] = $i;\n        }\n    }\n\
    \    return $arr;\n}\n</code>\n<|/ a tags=php,recursion dscore=2 |>\n<| a |>\n\
    Here is another recursive solution, that doesn't require to store any values or\
    \ variables. \n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9l4m65lj.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $list  = [];\n    $a = $b =\
    \ $c;\n    for ($i = 0; $i < $n + 1; $i++) {\n        $list[] = $a;\n        if\
    \ ($a === 0) {\n            $b = 1;\n            $c = 1;\n        } else {\n \
    \           $c = $a + $b - $c;\n            $a = $b;\n            $b = $c;\n \
    \       }\n    }\n    return $list;\n}\n\nfunction candidate(...$args) {\n   \
    \ return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnllpx5eu.php:39\n\
    Stack trace:\n#0 /tmp/tmpnllpx5eu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpnllpx5eu.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $list = [];\n    if ($n < 1)\
    \ {\n        return $list;\n    }\n    $a = tri($n - 1);\n    $b = tri($n - 2);\n\
    \    $c = $n;\n    $list[$n] = $a + $b + $c;\n    return $list;\n}\n$sequences\
    \ = tri(5);\necho '<pre>';\nprint_r($sequences);\necho '</pre>';\n</code>\n<|/\
    \ a |>\n<| a tags=php |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_ayn_1o9.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = array();\n    if ($n\
    \ == 0) {\n        $result[] = 1;\n        $result[] = 1;\n        $result[] =\
    \ 2;\n        return $result;\n    }\n\n    $result[] = 1;\n    $result[] = $n;\n\
    \    $result[] = $n;\n    $result[] = 1;\n    $result[] = tri($n - 1) + tri($n\
    \ - 2);\n    $result[] = tri($n + 1);\n\n    return $result;\n}\n</code>\n<|/\
    \ a dscore=3 tags=php,performance,fibonacci,algorithm |>\n<| a dscore=2 tags=php,performance,fibonacci,algorithm\
    \ |>\nThe basic algorithm for getting a Fibonacci number is the following:\n<code>\n\
    fib(0) = 0\nfib(1) = 1\nfib(n) = fib(n-1) + fib(n-2) \n</code>\nIn your case you\
    \ want to use a variable called $n\n<code>\nfib($n) = fib($n-1) + fib($n-2)\n\
    </code>\nTherefore the algorithm becomes:\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuwe09ine.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  if ($n == 1) return array(3);\n\
    \  if ($n % 2 == 0) return tri($n-2) + tri($n-1);\n  return tri($n-3) + tri($n-2);\n\
    }\n\n$n = 13;\n$result = tri($n);\necho $result[4].'<br>';\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 1) {\n        return\
    \ [];\n    }\n\n    $first = array_fill(1, $n);\n    $second = array_fill(1, $n);\n\
    \    $third = array_fill(1, $n);\n\n    $first[0] = 1;\n    $second[0] = 1;\n\
    \    $third[0] = 1;\n\n    for ($i = 1; $i < $n; $i++) {\n        $first[$i] =\
    \ $third[$i - 1] + $second[$i - 1];\n        $second[$i] = $third[$i - 1] - $second[$i\
    \ - 1];\n        $third[$i] = $first[$i] - $second[$i] + $third[$i - 1];\n   \
    \ }\n\n    return $third;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_fill() expects exactly 3 parameters, 2 given in /tmp/tmp9lqckl5y.php\
    \ on line 22\n\nWarning: array_fill() expects exactly 3 parameters, 2 given in\
    \ /tmp/tmp9lqckl5y.php on line 23\n\nWarning: array_fill() expects exactly 3 parameters,\
    \ 2 given in /tmp/tmp9lqckl5y.php on line 24\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9lqckl5y.php:44\nStack trace:\n#0 /tmp/tmp9lqckl5y.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9lqckl5y.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $a1 = 1;\n\
    \    $a2 = 1;\n    $a3 = 1;\n    $sum = 1;\n    while($a1 < $n + 1) {\n      \
    \  $a1 += 2;\n        $a2 = $a1 + $a2;\n        $a3 = $a1 + $a2 + $a3;\n     \
    \   $sum = $sum + $a1;\n        $result[] = $sum;\n    }\n    return $result;\n\
    }\n\n$a = 3;\n$b = 1;\n\nfor($i = 1; $i < 10; $i++) {\n    $a = $a + $b;\n   \
    \ $b = $a + $b - 1;\n    echo $a . \"<br/>\";\n}\n\n$a = 3;\n$b = 1;\n\nfor($i\
    \ = 1; $i < 10; $i++) {\n    $a = $a + $b;\n    $b = $a + $b - 1;\n    echo $a\
    \ . \"<br/>\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,algorithm\
    \ |>\nThe original question was asking for an algorithm that runs in O(n) time\
    \ and O(1) space.\nThe simplest solution is:\n<code>\n$a = 3;\n$b = 1; \nfor ($i\
    \ = 1; $i < 10; $i++) { \n    $a = $a + $b; \n    $b = $a + $b - 1; \n    echo\
    \ $a . \"<br/>\"; \n}\n</code>\nThe algorithm is basically:\n<code>\n$a = 3;\n\
    $b = 1; \n$c = 0;\nwhile ($c < 10) {\n    $a = $a + $b;\n    $b = $a + $b - 1;\n\
    \    $c = $c + 1;\n    echo $a . \"<br/>\";\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 tags=php,arrays,algorithm |>\nTry this - \n<code>\n$a = 3;\n$b =\
    \ 1; \n$c = count($a); \nfor($i=0; $i < $c; $i++) { \n    $a = $a + $b; \n   \
    \ $b = $a + $b - 1; \n    $x = $a[i]; \n    unset($a); \n    $a[$i]=$x;\n    $c--;\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\n$a = 3;\n$b = 1; \nfor($i = 0; $i < 10;\
    \ $i++) { \n    $a = $a + $b;\n    $b = $a + $b - 1;\n    echo $a . \"<br/>\"\
    ;\n}\n</code>\n<|/ a tags=php,arrays,algorithm dscore=0 |>\n<| c |>\nAlthough\
    \ this code may help to solve the problem, it doesn't explain _why_ and/or \n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqxeam16w.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = array_fill(1, $n, 0);\n\
    \    $a[1] = 1;\n    foreach (range(1, $n) as $v) {\n        $tmp = $a[$v-1] +\
    \ $a[$v-2] + $a[$v-1];\n        $a[$v] = $tmp;\n    }\n    return $a;\n}\n$seq\
    \ = [1,3,5,8];\necho join(', ', tri($n));\nfunction candidate(...$args) {\n  \
    \  return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0, 0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjf70uylx.php:33\n\
    Stack trace:\n#0 /tmp/tmpjf70uylx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjf70uylx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\tstatic $table = [\n\t\t[1,3,1],\n\
    \t\t[2,5,5],\n\t\t[4,9,9]\n\t];\n\t\n\tif ($n < 3) {\n\t\treturn [];\n\t} \n\t\
    \n\t$n2 = $n / 2;\n\t$n3 = $n2 / 2;\n\t$n4 = $n3 + $n;\n\t\n\treturn array_merge([$n],\
    \ \n\t\ttri($n3), \n\t\ttri($n4));\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp8ua0p_07.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array[] = 1;\n    if ($n<=1)\
    \ {\n        return $array;\n    }\n\n    $array[] = 2;\n    $array[] = 3;\n \
    \   return array_merge($array, tri(array_slice($n, 1)) + tri(array_slice($n, 2)));\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmp5buvgt5h.php on line 25\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmp5buvgt5h.php on line 25\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5buvgt5h.php:32\nStack trace:\n\
    #0 /tmp/tmp5buvgt5h.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5buvgt5h.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [1,3];\n    $even = ($n%2\
    \ == 0);\n    if($even) {\n        $n = $n/2;\n    }\n    while($n) {\n      \
    \  $arr[] = $arr[$n] + $arr[$n-2] + $arr[$n-1];\n        $n--;\n    }\n    return\
    \ $arr;\n}\n</code>\n<|/ a tags=php,recursion |>\n<| c |>\nI find this to be the\
    \ most elegant solution. Plus, you can shorten the code a little bit by removing\
    \ $arr[$n] and $arr[$n-2] and $arr[$n-1] from the while loop.\n<|/ c |>\n<| a\
    \ tags=php,recursion dscore=3 |>\nHere's a recursive solution that should run\
    \ in O(n).\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp50ri92cc.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n\n    $result = array();\n    for($i = 0; $i < $n; $i++){\n        $result[]\
    \ = $a;\n        $a = $a + $b;\n        $b = $a + $c;\n        $c = $a - $b;\n\
    \    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_36rw7pa.php:38\n\
    Stack trace:\n#0 /tmp/tmp_36rw7pa.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_36rw7pa.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 2) {\n        return\
    \ [];\n    }\n\n    return array_merge(\n        tri($n - 1),\n        tri($n\
    \ - 2),\n        [$n]\n    );\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere's\
    \ a solution which uses recursion and doesn't have to calculate triangular numbers.\
    \  This solution uses the nth fibonacci number directly.\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkzo4tn1l.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <\
    \ 3) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = $n+1;\n\
    \    $result[] = $n+1;\n    return $result;\n}\n$triNumbers = [1,2,3,4,5,6,8,12,19,28,38,58,77,95,104,141,158,186,209,\n\
    \    233,257,296,342,369,400,439,477,526,576,615,674,726,777,826,\n    885,937,998,1047,1105,1175,1265,1353,1444,1523,1618,1714,1811,\n\
    \    1910,1988,2087,2169,2268,2365,2455,2554,2643,2731,2820,2919,3018,\n    3109,3216,3325,3443,3539,3636,3733,3831,3928,4025,4124,4229,4320,\n\
    \    4419,4517,4616,4715,4813,4911,5009,5108,5209,5308,5405,5512,\n    5601,5699,5797,5904,6001,6101,6201,6301,6401,6501,6602,6702,\n\
    \    6803,6903,7003,7109,7210,7301,7402,7502,7603,7703,7804,7905,\n    8005,8107,8207,8308,8405,8510,8606,8707,8808,8905,9006,9107,\n\
    \    9208,9310,9411,9512,9613,9702,9803,9903,10003,10104,10204,10304,\n    10404,10505,10605,10706,10806,10906,11006,11107,11208,11309,11401,\n\
    \    11502,11603,11703,11804,11905,12005,12096,12207,12308,12408,12508,\n    12609,12709,12801,12901,13001,13101,13202,13303,13403,13504,13604,\n\
    \    13705,13805,13906,14006,14108,14209,14314,14417,14521,14629,14729,\n    14830,14941,15003,15124,15230,15331,15431,15542,15642,15743,15\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp858utrg4.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $arr = array(3); // the base case\n\
    \  if ($n <= 2)\n    return $arr;\n  else\n    return array_merge($arr, tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1));\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=arrays,php,recursion\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq4_2ou_4.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = array();\n    $a = 1\
    \ ;\n    $b = 3 ;\n    for ($i = 3; $i <= $n; $i++) {\n        $arr[] = $a;\n\
    \        if ($i%2==0) {\n            $b = $a + $b ;\n        }\n        $a = $b\
    \ ;\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xtqpw4e.php:36\n\
    Stack trace:\n#0 /tmp/tmp1xtqpw4e.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1xtqpw4e.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = [];\n    $sum[0] = 3;\n\
    \    $sum[1] = 1;\n    $sum[2] = $sum[1]+1;\n    $sum[3] = (1+$sum[2])+$sum[1]+$sum[3];\n\
    \    $sum[4] = (1+$sum[3]+$sum[1])+$sum[3]+$sum[4];\n    $sum[5] = (1+$sum[4]+$sum[3]+$sum[1])+$sum[4]+$sum[5];\n\
    \    $sum[6] = (1+$sum[5]+$sum[4]+$sum[3]+$sum[1])+$sum[5]+$sum[6];\n    $sum[7]\
    \ = (1+$sum[6]+$sum[5]+$sum[4]+$sum[3]+$sum[1])+$sum[6]+$sum[7];\n    \n    $result\
    \ = [];\n    $i=0;\n    while($i<$n+1){\n        $result[] = $sum[$i];\n     \
    \   $i++;\n    }\n    return $result;\n}\nvar_dump(tri(10));\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nA simple solution would be to recursively compute Fibonacci\
    \ numbers:\n<code>\n/**\n * int $n\n * int[]\n */\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnxvonkxx.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = 1;\n    $result =\
    \ [];\n    for ($i = 1; $i < $n; $i++) {\n        $result[] = $a + $b;\n     \
    \   $a = $b;\n        $b = $result[$i] + $result[$i - 1];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h27r6ce.php:33\n\
    Stack trace:\n#0 /tmp/tmp_h27r6ce.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_h27r6ce.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = array_fill(1, $n, 1);\n\
    \    $b = array_fill(2, $n, 1);\n    $sum = array_fill(0, $n + 1, 0);\n    foreach\
    \ ($a as $i => $v) {\n        $sum[$i] += $v;\n    }\n    foreach ($b as $i =>\
    \ $v) {\n        $sum[$i + 1] += $v;\n    }\n    foreach ($sum as $i => $v) {\n\
    \        $sum[$i] = ($v === 0) ? 0 : ($v > $sum[$i - 1]) ? $v : $sum[$i];\n  \
    \  }\n    return $sum;\n}\nvar_dump(tri(5));\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(8) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(2)\n  [6]=>\n  int(1)\n \
    \ [7]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmper_aao9_.php:38\n\
    Stack trace:\n#0 /tmp/tmper_aao9_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmper_aao9_.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [];\n    if ($n <= 1)\n\
    \        return $tri;\n    for ($i = 0; $i <= $n; $i += 2)\n        $tri[] = $i;\n\
    \    for ($i = 1; $i <= $n; $i += 2)\n        $tri[] = $tri[$i - 1] + $tri[$i\
    \ - 2];\n    return $tri;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlfdbxr8.php:32\n\
    Stack trace:\n#0 /tmp/tmprlfdbxr8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprlfdbxr8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = [1, 3, 2, 8];\n\n    return\
    \ $a[$n];\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_lj58ja.php:28\n\
    Stack trace:\n#0 /tmp/tmp6_lj58ja.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6_lj58ja.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if($n<=0) return [];\n    if($n%2==0)\
    \ return [tri($n-1)+tri($n-2),tri($n-1)+tri($n-1)+tri($n)];\n    else return [tri($n-1)+tri($n-1)+tri($n)];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nAs a note, this is O(n^2) in the number of operations.\
    \ There is a way to do it in O(n) where n is the number you input (where n is\
    \ the length of the number you input), but this requires using a recursive function\
    \ and recursion. Also, in the case that n is even it can be done in O(n log n)\
    \ by doing the calculations backward. There are also ways you can do this in O(n)\
    \ by using a hash table or by using the Fibonacci function.\n<|/ c |>\n<| c |>\n\
    Thanks I fixed the function and now it's O(n)\n<|/ c |>\n<| a |>\n<code>\n<?php\n\
    \nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_xyaacfj.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$a = 3; // First number in the\
    \ sequence. Always 0.\n\t$b = 1; // Second number in the sequence. Always 1.\n\
    \t$c = 2; // Third number in the sequence. Always 2.\n\t\n\tfor ($i = 1; $i <=\
    \ $n; $i++){\n\t\t$a = ($a + $c) % 3;\n\t\t$b = ($b + $b) % 3;\n\t\t$c = ($c +\
    \ $a) % 3;\n\t\t\n\t\t$result[] = $a;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp92re9lr.php:37\n\
    Stack trace:\n#0 /tmp/tmpp92re9lr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpp92re9lr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = array_fill(1, $n +\
    \ 1, 1);\n    $result[1] = 3;\n    \n    for ($i = 2; $i <= $n; $i++) {\n    \
    \    $result[] = array_sum($result);\n    }\n\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpih2w_y2v.php:32\n\
    Stack trace:\n#0 /tmp/tmpih2w_y2v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpih2w_y2v.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sequence = [];\n    $sequence[]\
    \ = 3;\n    \n    for ($i = 1; $i <= $n; $i++) {\n        $sequence[] = array_sum(array_slice($sequence,\
    \ -1, 1)) + array_sum(array_slice($sequence, 0, -1));\n    }\n\n    return $sequence;\n\
    }\n\necho tri(2); //[1, 3, 2, 8]\necho tri(4); //[3, 7, 11, 23]\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nI came up with something like this: \n$sequence = [];\n\
    $sequence[] = 3;\n    \nfor ($i = 1; $i <= $n; $i++) {\n    $sequence[] = array_sum(array_slice($sequence,\
    \ -1, 1)) + array_sum(array_slice($sequence, 0, -1));\n}\n\nreturn $sequence;\n\
    <|/ c |>\n<| c |>\nI added the code in the post. Now you should accept the answer\
    \ to your question by clicking on the green checkmark on the left side.\n<|/ c\
    \ |>\n<| c |>\nThe question was about Tribonacci sequence not Fibonacci sequence.\
    \ You code does not handle Tribonacci sequence at all. Also I didn't understand\
    \ why do you need array_slice?\n<|/ c |>\n<| c |>\nTribonacci sequence can be\
    \ found here: http://www.codewars.com/kata/55f9da41b2ff499a0006f55/train/php It's\
    \ just my way of solving the problem instead of writing recursive solution.\n\
    <|/ c |>\n<| c |>\nI understand your point and you are right, I should have used\
    \ `array_sum` instead of `array_sum` on the first part. Fixed that.\n<|/ c |>\n\
    <| a dscore=4 tags=php,algorithm,sequence,math,math |>\nHere's a recursive solution:\n\
    <code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkxcleev1.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [1];\n    if ($n ===\
    \ 0 || $n === 1) {\n        return $result;\n    }\n    for ($i = 2; $i < $n +\
    \ 1; $i++) {\n        $result[] = tri($i - 1) + tri($i - 2) + tri($i + 1);\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpzn3xrrn9.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return array_merge(\n      \
    \  array_slice($n, 0, 1),\n        array_slice($n, 1, 1),\n        array_slice($n,\
    \ 2, 1)\n    );\n}\n</code>\nThe above function will work if your array is sorted\
    \ (which your example is not), but since it uses array_slice, you are guaranteed\
    \ that it will work, even if your array is not sorted. \nTo understand how this\
    \ works I used the step-by-step debugger tool and wrote down the process on paper\
    \ to better understand how it works.\n\nIf you don't feel like writing all the\
    \ code out, here is a great tool that helps visualize these functions and other\
    \ PHP array functions. \nhttps://3v4l.org/EUfQe\n<|/ a tags=php |>\n<| a tags=php\
    \ dscore=2 |>\nThe other solutions fail for input values of n greater than 2.\
    \ \nHere is a solution that works for all inputs, including the ones where the\
    \ input array is sorted in descending order, for example, \n<code>\n$n = 3;\n\
    $input = range($n);\nsort($input);\necho tri($input);\n\nArray\n(\n    [0] =>\
    \ 0\n    [1] => 1\n    [2] => 3\n)\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7mb9_c3u.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    \n    // Your code here\n  \
    \  \n    for ($i = 1; $i <= $n; $i++) {\n        if ($n % 2 == 0) {\n        \
    \    $tri[] = $i;\n            $tri[] = $i + $i;\n            $tri[] = $i + $i\
    \ + $i;\n        } else {\n            $tri[] = $i;\n            $tri[] = $i +\
    \ $i;\n        }\n    }\n    return $tri;\n}\n\n$input = array();\nwhile (!feof($stdin))\
    \ {\n  $input = array_merge($input, fgets($stdin));\n}\nvar_dump(tri($input));\n\
    </code>\n<|/ a tags=php,algorithm dscore=4 |>\n<| c |>\nThis looks like a good\
    \ solution, but isn't there a more \"direct\" way? Because this one needs several\
    \ loops to iterate over an array.\n<|/ c |>\n<| a tags=php,algorithm |>\nIf you\
    \ want the most elegant solution then you should try the following:\n<code>\n\
    <?php\n$input = array();\nwhile (!feof($stdin)) {\n  $input = array_merge($input,\
    \ fgets($stdin));\n}\n$input = explode(\" \", $input);\n$input = array_map(\"\
    trim\", $input);\n$input = array_filter(array_map(\"intval\", $input));\nvar_dump(tri($input));\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy_ku69w_.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = array();\n    if($n\
    \ == 1) {\n        $result[] = 1;\n        $result[] = 2;\n    }\n    else {\n\
    \        $result[] = 1;\n        $result[] = 2;\n        if($n % 2 == 0) {\n \
    \           $result[] = 3;\n        }\n        else {\n            $result[] =\
    \ tri($n - 1) + tri($n - 2) + tri($n + 1);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnh5goxir.php:41\n\
    Stack trace:\n#0 /tmp/tmpnh5goxir.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnh5goxir.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $res = [];\n  if ($n <= 1) {\n\
    \    return [];\n  }\n  $n = floor($n);\n  $a[$n] = $a[1] = $a[2] = 1;\n  for\
    \ ($i = 3; $i >= 1; $i--) {\n    $a[$i] = $a[$i - 1] + $a[$i - 2];\n  }\n  array_push($res,\
    \ $a[1]);\n  if ($n % 2) {\n    $res[] = $a[$n];\n  }\n  array_push($res, ...array_slice($a,\
    \ $n + 1));\n  return $res;\n}\n\n$result = tri(11);\necho implode(',', $result);\n\
    </code>\nOutput\n<code>\n1,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97\n\
    </code>\n<|/ a tags=arrays,php,function dscore=0 |>\n<| a |>\nTry this way\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk2cqq6p4.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = array(0,\
    \ 1);\n    $arr[1] = 1;\n    \n    $i = 2;\n    while($i <= $n) {\n        $arr[$i]\
    \ = $arr[$i-1] + $arr[$i-2] + $arr[$i+1];\n        $i++;\n    }\n    \n    return\
    \ $arr;\n}\n\necho tri(2);\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp9cpwh6cw.php:24\n\
    Stack trace:\n#0 /tmp/tmp9cpwh6cw.php(31): tri(2)\n#1 {main}\n  thrown in /tmp/tmp9cpwh6cw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  if ($n == 0) {\n    return [0,\
    \ 0, 0];\n  }\n  if ($n == 3) {\n    return [0, 0, 1];\n  }\n  if ($n == 1) {\n\
    \    return [0, 1, 0];\n  }\n  if ($n % 2 == 0) {\n    return tri($n - 1) + tri($n\
    \ - 2) + tri($n + 1);\n  }\n  return tri($n - 1) + tri($n - 2) + tri($n + 1) +\
    \ tri($n) + tri($n - 1) + tri($n - 2);\n}\n\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_i0jlrs.php:38\n\
    Stack trace:\n#0 /tmp/tmp9_i0jlrs.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp9_i0jlrs.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $arr[] = $i + 1;\n        $arr[] = $arr[$i - 1] +\
    \ $arr[$i] + $arr[$i - 1];\n    }\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26azzjvb.php:30\n\
    Stack trace:\n#0 /tmp/tmp26azzjvb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp26azzjvb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = [];\n    if ($n < 2)\
    \ {\n        return $array;\n    }\n    for($i = 1; $i <= $n; $i++) {\n      \
    \  $array[] = $i;\n    }\n    return array_merge($array, tri($n - 1), tri($n -\
    \ 2), tri($n + 1));\n}\n\n$array = tri(3);\nvar_dump($array);\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpx21g9syo.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    $last = 3 + 2 / 2;\n    $next = 1;\n    while ($next < $n) {\n   \
    \     $result[] = $next;\n        $last = $next;\n        $next = $last + $next;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjhqubxb.php:35\n\
    Stack trace:\n#0 /tmp/tmpvjhqubxb.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvjhqubxb.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $list = array();\n    if ($n\
    \ == 1) return array(3);\n    if ($n % 2 == 0) return array(tri($n-1),tri($n-2),tri($n+2));\n\
    \    return array(tri($n-2) + tri($n-1) + tri($n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp3w33skkw.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $f[] = 3;\n    if ($n%2==0)\
    \ {\n        $f[] = 1 + $n / 2;\n    }\n    return $f;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppj0brj1d.php:30\n\
    Stack trace:\n#0 /tmp/tmppj0brj1d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppj0brj1d.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = 3;\n    if ($n === 1)\
    \ {\n        return $sum;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n       \
    \ $sum = $sum + $i / 2;\n    }\n    return $sum;\n}\n</code>\nThe function above\
    \ gives you the fibonacci sequence, however the function below the function gives\
    \ you the tribonacci sequence:\n<code>\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjxs82si9.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 2) return [];\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n - 3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmppc4o_kua.php on line 19\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmppc4o_kua.php on line 19\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmppc4o_kua.php on line 19\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmppc4o_kua.php on line 19\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmppc4o_kua.php on line 19\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmppc4o_kua.php on line 19\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmppc4o_kua.php:27\nStack trace:\n#0 /tmp/tmppc4o_kua.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppc4o_kua.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n === 1) return array(3);\n\
    \    if ($n === 2) return array(1);\n    return tri($n - 1) + tri($n - 2) + tri($n\
    \ + 1);\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp3gw4w9h9.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n%2 == 0) {\n        //\
    \ n is even.\n        $return = range(1,$n);\n    } else {\n        // n is odd.\n\
    \        $return = array_merge(tri(tri(tri(tri(tri($n-1)+$n+1)+1)+1),1),[1]);\n\
    \    }\n    return $return;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp4udo2zur.php:23\n\
    Stack trace:\n#0 /tmp/tmp4udo2zur.php(28): tri(3)\n#1 /tmp/tmp4udo2zur.php(32):\
    \ candidate(3)\n#2 /tmp/tmp4udo2zur.php(44): test()\n#3 {main}\n  thrown in /tmp/tmp4udo2zur.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n === 0) {\n        return\
    \ [];\n    }\n    if ($n === 1) {\n        return [3];\n    }\n    if ($n ===\
    \ 2) {\n        return [1, 3];\n    }\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpc3_exlr6.php on line 27\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpc3_exlr6.php on line 27\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpc3_exlr6.php\
    \ on line 27\n\nWarning: A non-numeric value encountered in /tmp/tmpc3_exlr6.php\
    \ on line 27\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpc3_exlr6.php on line 27\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpc3_exlr6.php on line 27\n\
    \nWarning: Use of undefined constant n - assumed 'n' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: A\
    \ non-numeric value encountered in /tmp/tmpc3_exlr6.php on line 27\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpc3_exlr6.php on line 27\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpc3_exlr6.php\
    \ on line 27\n\nWarning: A non-numeric value encountered in /tmp/tmpc3_exlr6.php\
    \ on line 27\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a fut"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = 0;\n    \n    // Initialize\
    \ sums\n    if ($n == 1) {\n        $sum = 1;\n    } else if ($n == 2) {\n   \
    \     $sum = 3;\n    } else {\n        $sum = $sum + tri($n - 1);\n        if\
    \ ($n % 2 == 0) {\n            $sum = $sum + tri($n - 1) + tri($n - 2);\n    \
    \    }\n    }\n    \n    return $sum;\n}\n\nfunction candidate(...$args) {\n \
    \   return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszof_rb2.php:40\n\
    Stack trace:\n#0 /tmp/tmpszof_rb2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpszof_rb2.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 2){\n        return\
    \ [];\n    }\n    return [ 1, ($n-1+$n-2+$n+2)/3 ];\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84e_pmal.php:29\n\
    Stack trace:\n#0 /tmp/tmp84e_pmal.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp84e_pmal.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$r = [];\n\tif ($n == 1) {\n\t\
    \treturn $r;\n\t}\n\tif ($n == 2) {\n\t\treturn [1, 1];\n\t}\n\tif ($n % 2 ==\
    \ 0) {\n\t\t$r[] = 1;\n\t\t$r[] = tri(3 - 1) + tri(3 - 2);\n\t}\n\telse {\n\t\t\
    $r[] = 1;\n\t\t$r[] = tri(3 - 1) + tri(3 - 2) + tri(3 + 1);\n\t}\n\treturn $r;\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bymhr9c.php:40\n\
    Stack trace:\n#0 /tmp/tmp4bymhr9c.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4bymhr9c.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$n--;\n\t$a = $b = $c = 3;\n\t\
    if ($n == 0) {\n\t\treturn [3, 1];\n\t}\n\tif ($n & 1) {\n\t\t$c = $a + $b;\n\t\
    \t$b = $a;\n\t\t$a = $c;\n\t}\n\treturn [tri($n - 1) + $a, tri($n - 2) + $b];\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpej3to_o8.php:28\n\
    Stack trace:\n#0 /tmp/tmpej3to_o8.php(32): tri(2)\n#1 /tmp/tmpej3to_o8.php(36):\
    \ candidate(3)\n#2 /tmp/tmpej3to_o8.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpej3to_o8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 1) return [];\n  \
    \  return array_merge(tri(--$n), tri(--$n) + tri(++$n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp525piln1.php:27\n\
    Stack trace:\n#0 /tmp/tmp525piln1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp525piln1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $numbers = array();\n    $numbers[]\
    \ = 3;\n    for ($i = 1; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $numbers[] = 1 + $i / 2;\n        } else {\n            $numbers[] = tri($i\
    \ - 1) + tri($i - 2) + tri($i + 1);\n        }\n    }\n    return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpwbrcop82.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$r = [];\n\t\n\tfor($i = 1; $i\
    \ <= $n; $i++) {\n\t\t$a = ($n - $i) % 2 == 0 ? $n : $n + $i;\n\t\t$b = ($n +\
    \ $i + 1) % 2 == 0 ? $n : $n + $i + 1;\n\t\t$r[] = $a + $b;\n\t}\n\t\n\treturn\
    \ $r;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5fukysn.php:33\n\
    Stack trace:\n#0 /tmp/tmpp5fukysn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp5fukysn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return $n + array_merge(range(1,3),\
    \ array_slice(range(1,$n),1));\n}\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpw_3pr8pz.php:18\n\
    Stack trace:\n#0 /tmp/tmpw_3pr8pz.php(21): tri(3)\n#1 /tmp/tmpw_3pr8pz.php(25):\
    \ candidate(3)\n#2 /tmp/tmpw_3pr8pz.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpw_3pr8pz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$a = [3,1];\n\tfor($i=2;$i<=$n;$i++){\n\
    \t\t$a[] = $a[$i-1] + $a[$i-2] + $a[$i];\n\t}\n\treturn $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgzylob8.php:30\n\
    Stack trace:\n#0 /tmp/tmpdgzylob8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdgzylob8.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $previous\
    \ = $next = 0;\n    $result = array_merge($result, tri($previous), tri($next));\n\
    \    return $result;\n}\necho tri(3);\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp7x8fmp0e.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    // write your code here\n  \
    \  $array = [];\n    $array[0] = 1;\n    $array[1] = 3;\n    $array[2] = 1 + $n\
    \  / 2;\n    $array[3] = $array[2] + $array[1];\n    for($i=4;$i<=$n;$i++){\n\
    \        $array[$i] = $array[$i-1] + $array[$i-2] + $array[$i+1];\n    }\n   \
    \ return $array;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9wdg7p6.php:35\n\
    Stack trace:\n#0 /tmp/tmpi9wdg7p6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpi9wdg7p6.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$a = 1;\n\t$b = 1;\n\t$c = 0;\n\
    \n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$c = $a + $b;\n\t\t$b = $c;\n\t\t$a =\
    \ $c;\n\t}\n\n\treturn array_slice($a, 0, $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpvdbit993.php on line 28\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpvdbit993.php:36\nStack trace:\n#0 /tmp/tmpvdbit993.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvdbit993.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n === 0) return [1, 2,\
    \ 3];\n    if ($n % 2 === 0) return [tri($n / 2), $n, tri($n / 2 + 1)];\n    return\
    \ [$n, tri($n - 1) + tri($n - 2) + tri($n + 1), tri($n - 1) + tri($n + 2)];\n\
    }\n$sequence = [];\nfor($i = 0; $i < $n; $i++) {\n    $sequence[] = tri($i);\n\
    }\necho implode(\", \", $sequence);\n</code>\n<|/ a tags=php,algorithm |>\n<|\
    \ a dscore=2 tags=php,algorithm |>\nThe correct answer is in the comments below,\
    \ but here is my attempt to explain what the code is doing.\nThe code calculates\
    \ the first $n numbers in the Tribonacci sequence. The first two numbers of the\
    \ sequence are 1 and 3. You start with n = 1, then 2, then 3, then 4 and so on.\
    \ \nThe sequence is calculated as\n\ntri(1), tri(2), tri(3), tri(4)\n\nIn our\
    \ example 1, 3, 5, 7, and 9 are the numbers of the sequence.\n<code>\n$sequence\
    \ = [];\n\nfor($i = 1; $i <= $n; $i++) {\n  $sequence[] = tri($i); // calculates\
    \ tri($i)\n}\n</code>\nThe variable $sequence is then converted into an array,\
    \ so the above line can be written as \n<code>\n$sequence = [tri(1), tri(2), tri(3),\
    \ tri(4)];\n</code>\nThis is then repeated for every value of $n. \n<code>\n$n\
    \ = 2;\n$sequence = [\n  tri(1),\n  tri(2),\n  tri(3),\n  tri(4)\n]\n</code>\n\
    The first two elements of the tribonacci sequence are 1 and 3, so the entire sequence\
    \ is \n<code>\n$sequence = [\n  tri(1),\n  tri(2),\n  tri(3),\n  tri(4),\n  tri(5),\n\
    \  tri(6),\n  tri(7),\n  tri(8),\n  tri(9),\n]\n</code>\n<|/ a |>\n<| a dscore=2\
    \ |>\nA more readable version using while loop:\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1g6fspi9.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    for($i =\
    \ 1; $i <= $n; $i++){\n        if($n % 2 == 0){\n            $result[] = $i;\n\
    \            $result[] = $result[1] - $result[0];\n        }else{\n          \
    \  $result[] = $result[0] + $result[1] + $result[2];\n        }\n    }\n    return\
    \ $result;\n}\necho tri(4);\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjr3mznt7.php:35\n\
    Stack trace:\n#0 /tmp/tmpjr3mznt7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjr3mznt7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $arr[] = $i;\n    }\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        $arr[] = $arr[$i - 1] + $arr[$i - 2];\n    }\n    return $arr;\n\
    }\n\n$n = 1;\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fvncjom.php:34\n\
    Stack trace:\n#0 /tmp/tmp9fvncjom.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9fvncjom.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = array();\n    $array[]\
    \ = $n;\n    if ($n % 2 == 0) {\n        $array[] = $n / 2;\n        $array[]\
    \ = $array[0] + $array[1] + $array[2];\n    } else {\n        $array[] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    }\n    return $array;\n}\n$n = 5;\nprint_r(tri($n));\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpfsckw9wp.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = array();\n    $result[0]\
    \ = 1;\n    if ($n <= 2) {\n        $result[1] = 3;\n    } else {\n        $result[1]\
    \ = 3 + $n / 2;\n        $result[2] = tri($n / 2) + tri(n / 2) + tri(n / 2);\n\
    \    }\n    return $result;\n}\n\n$input = 4;\nforeach ($result as $key => $value)\
    \ {\n    echo $key.' => '.$value.'<br>';\n}\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp6ripmn5n.php\
    \ on line 30\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmp6ripmn5n.php on line 24\n\
    \nWarning: A non-numeric value encountered in /tmp/tmp6ripmn5n.php on line 24\n\
    \nWarning: Use of undefined constant n - assumed 'n' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmp6ripmn5n.php on line 24\n\nWarning: A\
    \ non-numeric value encountered in /tmp/tmp6ripmn5n.php on line 24\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp6ripmn5n.php:38\nStack trace:\n\
    #0 /tmp/tmp6ripmn5n.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6ripmn5n.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = $c = 1;\n    $result\
    \ = [];\n    for ($i = 0; $i < $n + 1; $i++) {\n        $result[] = $a;\n    \
    \    if ($i % 2 === 0) {\n            $a = ($b + $c) + 1;\n            $b = $c;\n\
    \        } else {\n            $c = $b;\n            $b = $a;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrgjj89f.php:38\n\
    Stack trace:\n#0 /tmp/tmpqrgjj89f.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqrgjj89f.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $n--;\n    if ($n<0) return\
    \ [];\n    if ($n==0) return [2];\n    if ($n==1) return [3];\n    return array_merge($tri($n-2),[$n+1],$tri($n-1));\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp5brykevw.php:22\n\
    Stack trace:\n#0 /tmp/tmp5brykevw.php(26): tri(2)\n#1 /tmp/tmp5brykevw.php(30):\
    \ candidate(3)\n#2 /tmp/tmp5brykevw.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp5brykevw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 0; $b = 1; $c = 3; $d =\
    \ 6; $sum = 0;\n    for($i=1;$i<$n;$i++){\n        $sum = $a + $b + $c;\n    \
    \    if($i%2==0){\n            $a = $sum;\n        }else{\n            $b = $sum;\n\
    \        }\n        $c = $d + $c;\n        $d = $sum;\n    }\n    return array($a,$b,$c,$d);\n\
    }\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\nThanks, this is perfect and\
    \ exactly what I was looking for!\n<|/ c |>\n<| a tags=algorithm,php |>\nI solved\
    \ this problem in my way (PHP 7.1.16):\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4a92myd0.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = $c = $tri = new stdClass();\n\
    \    $tri->value = $tri->value2 = 1;\n    \n    if ($n->value <= 3) {\n      \
    \  if ($n->value == 1) {\n            $tri->value = 1;\n        }\n        $tri->value\
    \ = $tri->value + $n->value;\n    }\n    else {\n        if ($n->value % 2 ==\
    \ 1) {\n            $a = $tri->value2;\n            $b = $n->value - 1;\n    \
    \        $tri->value = $a + $b + tri($b);\n            $tri->value2 = $a + $b;\n\
    \        }\n        else {\n            $c = $tri->value2;\n            $b = $n->value\
    \ - 1;\n            $tri->value = $c + $b + tri($b);\n            $tri->value2\
    \ = $c + $b;\n        }\n    }\n    \n    return $tri;\n}\n\nvar_dump(tri(3),\
    \ tri(3));\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "object(stdClass)#1 (2) {\n  [\"value2\"]=>\n  int(1)\n  [\"value\"]=>\n\
    \  int(1)\n}\nobject(stdClass)#2 (2) {\n  [\"value2\"]=>\n  int(1)\n  [\"value\"\
    ]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ogyn94x.php:51\n\
    Stack trace:\n#0 /tmp/tmp4ogyn94x.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp4ogyn94x.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    // your code here\n    $result\
    \ = [];\n    if ($n === 1) {\n        $result[] = 1;\n    } else {\n        $result[]\
    \ = 1;\n        $result[] = 2;\n    }\n    for ($i = 3; $i < $n; $i++) {\n   \
    \     $result[] = 1 + $i / 2;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zqdv9aq.php:37\n\
    Stack trace:\n#0 /tmp/tmp2zqdv9aq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp2zqdv9aq.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$a = $c = 1;\n\t$b = $d = 1;\n\
    \tif ($n<=1)\n\t{\n\t\treturn [$a, $b, $c, $d];\n\t}\n\t$n = $n - 1;\n\t\n\tfor\
    \ ($i = 1; $i <= $n; $i++)\n\t{\n\t\t$a = $a + $c;\n\t\t$c = $c - $b;\n\t\t$b\
    \ = $c + $d;\n\t\t$d = $a - $b;\n\t}\n\t\n\treturn [$a, $b, $c, $d];\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp205phg_2.php:42\n\
    Stack trace:\n#0 /tmp/tmp205phg_2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp205phg_2.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  if ($n < 3) {\n    return [];\n\
    \  }\n  if ($n === 3) {\n    return [1 ,3 ,2 ,8];\n  }\n  \n  return  tri($n -\
    \ 1) + tri($n - 2) + tri($n + 1);\n}\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpyutqn966.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n === 0) return array(1);\n\
    \    if ($n === 1) return array(3);\n    $c = $n-1;\n    $t = array();\n    $t[]\
    \ = array(1);\n    $t[] = array($n / 2);\n    $t[] = array($n);\n    $t[] = array($c\
    \ / 2);\n    return array_merge($t, tri($c - 1));\n}\n$result = tri($n);\nprint_r($result);\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp7sgxiw0v.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n === 1) {\n        return\
    \ [1, 3];\n    }\n\n    if ($n === 2) {\n        return [1, 1];\n    }\n\n   \
    \ if ($n % 2 === 0) {\n        return tri($n - 1) + tri($n - 2) + tri($n + 1);\n\
    \    }\n\n    return tri($n - 1) + tri($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbud3502z.php:38\n\
    Stack trace:\n#0 /tmp/tmpbud3502z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbud3502z.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $result = array();\n  if ($n==0)\
    \ $result[]=3;\n  else if ($n==1) $result[]=1;\n  else {\n    $result[]=1;\n \
    \   $result[]=$result[-1]+$result[-2]+$result[-3];\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ycedj7c.php:33\n\
    Stack trace:\n#0 /tmp/tmp9ycedj7c.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9ycedj7c.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $nums = [];\n    if ($n == 1)\n\
    \        return $nums;\n    for ($i = 0; $i < $n; $i++) {\n        $nums[] = $i\
    \ + 1;\n        if ($i % 2 == 0) {\n            $nums[] = $nums[$i - 1] + $nums[$i\
    \ - 1];\n        }\n    }\n    return $nums;\n}\n</code>\nTest\n<code>\n$tests\
    \ = [\n    '2' => [1, 3, 2, 8],\n    '3' => [1, 3, 5],\n    '4' => [1, 3, 4, 5],\n\
    \    '5' => [1, 3, 5, 6],\n    '6' => [1, 3, 5, 6],\n    '7' => [1, 3, 5, 7, 8],\n\
    \    '8' => [1, 3, 5, 7, 10],\n    '9' => [1, 3, 5, 7, 10, 13],\n];\nforeach ($tests\
    \ as $test => $answer) {\n    $result1 = tri($test);\n    $result2 = tri($test);\n\
    \    if ($result1 === $answer) {\n        echo \"Passed [{$test}] with expected\
    \ result [{$result1}].\\n\";\n    } else {\n        echo \"Failed [{$test}] expected\
    \ result [{$answer}] actual result [{$result1}].\\n\";\n    }\n    echo \"\\n---------\\\
    n\";\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nHere's a JavaScript version\
    \ of a function that does it:\n<code>\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpziq61tcd.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 2)\n    {\n       \
    \ return array(1);\n    }\n    $tri_arr = array();\n    $tri_arr[] = 3;\n    \n\
    \    if ($n & 1)\n    {\n        $tri_arr[] = 1;\n    }\n    \n    for ($i = 3;\
    \ $i < $n; $i++)\n    {\n        $tri_arr[] = $tri_arr[$i - 1] + $tri_arr[$i -\
    \ 2] + $tri_arr[$i + 1];\n    }\n    return $tri_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42yh7hm3.php:42\n\
    Stack trace:\n#0 /tmp/tmp42yh7hm3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp42yh7hm3.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $sum += $i;\n   \
    \     }\n        if ($i % 2 == 1) {\n            $sum -= $i;\n        }\n    }\n\
    \    return $sum;\n}\n\n$arrTri = array();\nfor ($i = 2; $i <= 10; $i++) {\n \
    \   $arrTri[] = tri($i);\n}\n\nvar_dump($arrTri);\necho \"<br><br>\";\nvar_dump(array_sum($arrTri));\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nI love this answer. Thanks for sharing :)\n\
    <|/ c |>\n<| c |>\nThis code doesn't work for n=10, as in the question description.\
    \ `tri(10)` returns `8`, but the answer is `9`.\n<|/ c |>\n<| c |>\nThis code\
    \ actually fails when the $n is equal to 0.\n<|/ c |>\n<| c |>\nYes, it does fail,\
    \ please read the question description carefully.\n<|/ c |>\n<| c |>\nThe question\
    \ doesn't say what to do about 0 but this answer does.  It would probably be better\
    \ to add a condition like `if($n<1) return 0;` to the beginning of tri.\n<|/ c\
    \ |>\n<| a dscore=4 tags=php,recursion,fibonacci |>\nA simple recursive approach\
    \ using static methods and an array:\n<code>\nclass Fibonacci {\n    public static\
    \ $cache = [];\n\n    public static function fibonacci($n){\n        if(isset(self::$cache[$n]))\n\
    \            return self::$cache[$n];\n        elseif($n<0) return [];\n     \
    \   else self::$cache[$n] = array_sum(array_map('self::fibonacci', $n-1)) + array_sum(array_map('self::fibonacci',\
    \ $n-2))\n    }\n}\n\necho Fibonacci::fibonacci(3);\n</code>\n<|/ a |>\n<| c |>\n\
    Nice solution, I think it's pretty simple. Though, for larger numbers it's very\
    \ expensive to store a big array in memory. On the other hand this is really straightforward\
    \ and easy to understand, so +1 from me.\n<|/ c |>\n<| c |>\nIt also fails if\
    \ the $n is equal to 0.\n<|/ c |>\n<| a tags=php,recursion,fibonacci |>\nYou can\
    \ try this using recursive functions:\n<code>\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfy2awbss.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 2;\n    $c\
    \ = 1;\n    $result = [];\n    \n    for($i = 1; $i <= $n; $i++) {\n        $result[$i]\
    \ = $c;\n        \n        $c = $a + $b;\n        $a = $b;\n        $b = $c;\n\
    \    }\n    \n    return $result;\n}\n\n$result = tri(3);\nprint_r($result);\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [1] => 1\n    [2] => 3\n    [3] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsnv0j5t3.php:41\nStack trace:\n#0 /tmp/tmpsnv0j5t3.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsnv0j5t3.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n == 0) {\n        return\
    \ [];\n    }\n    if ($n == 5) {\n        return [1, 2, 5];\n    }\n    $tri1\
    \ = tri($n - 1);\n    $tri2 = tri($n - 2);\n    $tri3 = $tri1 + $tri2;\n    return\
    \ array_merge($tri1, $tri2, $tri3);\n}\n</code>\n<|/ a tags=recursion,php |>\n\
    <| c |>\nYour answer is missing explanation and example. Where is explanation\
    \ and example ?\n<|/ c |>\n<| c |>\nIt's better to include an explanation as to\
    \ why this solves the question.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5labb2xv.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $list = [];\n    $i = 1;\n \
    \   while ($i <= $n + 1) {\n        $list[$i] = $list[$i - 1] + $list[$i - 2]\
    \ + $list[$i - 3];\n        ++$i;\n    }\n    return $list;\n}\n</code>\n<|/ a\
    \ tags=php,triangular,math |>\n<| c |>\nThis code doesn't work. Why?\n<|/ c |>\n\
    <| c |>\nSorry for my mistake. It should work now (after I've fixed the missing\
    \ $n).\n<|/ c |>\n<| a tags=php,triangular,math |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjjaj8dit.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $a = $b = $c = 1;\n  for($i =\
    \ 0; $i < $n; $i++) {\n    if ($i % 2 == 0) {\n      $c = $a + $b;\n      $a =\
    \ $b;\n      $b = $c;\n    } else {\n      $c = $a + $b;\n      $a = $b;\n   \
    \   $b = $c;\n    }\n  }\n  return [$c, $a + $b, $a + $c + $b, $a + $c + $b, $a\
    \ + $b];\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmcsi0pz.php:38\n\
    Stack trace:\n#0 /tmp/tmptmcsi0pz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptmcsi0pz.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a=$b=1;\n    $c=1;\n    for($i=1;$i<=$n;$i++){\n\
    \        $a=$b;\n        $b=$c;\n        $c=$a+$b+$c;\n    }\n    return $b;\n\
    }\necho tri(3); \nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "7\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3t5zqk9a.php:33\n\
    Stack trace:\n#0 /tmp/tmp3t5zqk9a.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3t5zqk9a.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n\n    if ($n\
    \ <= 3) {\n        $result = [1, 3];\n    } else {\n        $result[] = 1;\n \
    \       $result[] = 3 + $n / 2;\n        $result[] = $this->tri($n - 2) + $this->tri($n\
    \ - 1) + $this->tri($n + 1);\n    }\n\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4zi6lzx.php:35\n\
    Stack trace:\n#0 /tmp/tmpu4zi6lzx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpu4zi6lzx.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = 0; \n    $tmp = $n;\n\
    \    while($tmp !== 0) {\n        $sum += $tmp;\n        $tmp %= $tmp;\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI realise that this\
    \ is not the answer to the question \"how do you implement this in PHP\", but\
    \ since I saw this question pop up in a search result, and I wanted to share an\
    \ alternative solution (which doesn't use recursion) to this problem I thought\
    \ I'd offer it. I wanted to give credit for this answer to the original poster\
    \ in the comments above and to the original poster in the answer below (https://stackoverflow.com/a/4925810/1064635)\
    \ but I don't have the reputation to do that, so here it is as answer to the question.\n\
    In other words, I took this answer here https://stackoverflow.com/a/4925810/1064635\
    \ and wrapped it in a function in PHP to solve this problem.\n<code>\n<?php\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps20b2uhr.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return array_slice(\n      \
    \  range(3, 3 + $n, 2),\n        0,\n        $n\n    );\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gpe97rz.php:29\n\
    Stack trace:\n#0 /tmp/tmp9gpe97rz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9gpe97rz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $list = [];\n  for($i = 1; $i\
    \ <= $n; $i++) {\n    $list[] = $i;\n    if($i & 1) $list[] = $i + $i - 1;\n \
    \ }\n  return $list;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1jzykr8.php:31\n\
    Stack trace:\n#0 /tmp/tmpv1jzykr8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv1jzykr8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $numbers = [];\n    for ($i\
    \ = 1; $i < $n + 1; $i++) {\n        $fibonacci = ($i <= 1)\n            ? 1\n\
    \            : $i + $fibonacci;\n        $numbers[] = $fibonacci;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppty7ditd.php:33\n\
    Stack trace:\n#0 /tmp/tmppty7ditd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppty7ditd.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n === 1) {\n        return\
    \ [1, 3];\n    }\n    $x = tri(--$n) + tri(--$n) + tri(--$n);\n    $x[] = $x;\n\
    \    return $x;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmphng1u04o.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $list = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $temp = $a\
    \ + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $temp;\n      \
    \  $list[] = $temp;\n    }\n    return $list;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbuyp4qo.php:36\n\
    Stack trace:\n#0 /tmp/tmphbuyp4qo.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphbuyp4qo.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $n = $n % 2;\n    if ($n ==\
    \ 0)\n        return [1, 2, 3];\n\n    return tri(tri(tri($n - 1) + tri($n - 2)\
    \ + tri($n + 1)) + $n) + $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpg_eirssk.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <\
    \ 2) {\n        $result[] = 1;\n        return $result;\n    }\n\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $result[] = $i + $i / 2;\n    }\n\n    return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\nYou shouldn't use recursion when you're\
    \ not going to return anything. Just use a loop.\n<|/ c |>\n<| c |>\n`function\
    \ tri($n) {\n    $result = [];\n    if ($n < 2) {\n        return $result;\n \
    \   }\n\n    for ($i = 2; $i <= $n; $i++) {\n        $result[] = $i + $i / 2;\n\
    \    }\n\n    return $result;\n}`\n<|/ c |>\n<| c |>\nThis answer is terrible\
    \ and should be removed. No explanation whatsoever.\n<|/ c |>\n<| c |>\nWhy should\
    \ it be removed? The explanation is in the comments.\n<|/ c |>\n<| c |>\nThe explanation\
    \ is in the comments.\n<|/ c |>\n<| a tags=php,recursion dscore=4 |>\n<code>\n\
    <?php\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphdsv5edm.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if($n <= 1){\n        return\
    \ array(1);\n    }\n    $a1 = $a2 = 1;\n    $b1 = $b2 = 2;\n    $c1 = 1;\n   \
    \ $c2 = 1;\n    $d = 1;\n    while($n >= 1){\n        $d = $c1*$c2 + $a*$b1;\n\
    \        $a = $a2;\n        $b = $b2;\n        $a2 = $b;\n        $b2 = $d;\n\
    \        $c1 = $c2;\n        $c2 = $d;\n        $n--;\n    }\n    return array($c1,\
    \ $a2, $b2, $n);\n}\n</code>\n<|/ a dscore=5 tags=php,arrays |>\n<| c |>\nThis\
    \ is awesome. Thanks a ton !\n<|/ c |>\n<| c |>\nI think you can also optimize\
    \ your `tri()` function to get rid of the unnecessary variables. Something like\
    \ this: `function tri($n) { $a = $b = $c = 0; $d = 1; while ($n > 0)  { $d = $c\
    \ * $a + $b; $a = $b; $b = $d; $c++; $n--; } return array($a, $b, $c, $n);}`\n\
    <|/ c |>\n<| c |>\nYou also don't need to initialize $a and $b to 0.\n<|/ c |>\n\
    <| a tags=php,arrays dscore=5 |>\nHere is a one liner that doesn't need recursion:\n\
    <code>\narray_map(function($val) { return $val + 1; }, range(1,10))\n</code>\n\
    The above will output:\n<code>\nArray ( \n    [0] => 1 \n    [1] => 2 \n    [2]\
    \ => 3 \n    [3] => 4 \n    [4] => 5 \n    [5] => 6 \n    [6] => 7 \n    [7] =>\
    \ 8 \n    [8] => 9 \n)\n</code>\n<|/ a |>\n<| c |>\nNice. I guess this is cleaner\
    \ in the context of the question than my answer.\n<|/ c |>\n<| c |>\nThe one liner\
    \ can only handle a single array element.  If you want to loop over several elements\
    \ or have more than one array element, use array_walk and apply this to an anonymous\
    \ function.\n<|/ c |>\n<| c |>\nthis should be the answer imho\n<|/ c |>\n<| c\
    \ |>\nI agree this is the best, fastest, simplest answer for this problem. Simple,\
    \ simple. Just for you. +1\n<|/ c |>\n<| c |>\nYou don't even need a map function,\
    \ you could just do `return $val + 1;`\n<|/ \nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7evws05t.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[] = 3;\n\
    \    if ($n % 2 == 1) {\n        $arr[] = $n / 2;\n        $arr[] = tri($n / 2)\
    \ + tri($n / 2) + tri($n + 1);\n    } else {\n        $arr[] = tri($n / 2) + tri($n\
    \ / 2) + tri($n + 1);\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpqyupl96w.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if($n <= 1)\n        return\
    \ $n;\n    return tri($n-1) + tri($n-2) + tri($n+1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 3;\n    $b = 1;\n    $c\
    \ = 0;\n    $list = [];\n    for($i = 1; $i <= $n; $i++) {\n        $c = $a +\
    \ $b + $c;\n        $a = $b;\n        $b = $c;\n        $list[] = $c;\n    }\n\
    \    return $list;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nI solved it by doing\
    \ this:\n<code>\n<?php\n$n=13;\n$list = [];\nfor($i=0;$i<$n;$i++){\n    if($i%2==1){\n\
    \        $list[$i]=$i;\n    }\n    else{\n        $list[$i]=($n-$i)+($i-1)+($i+1);\n\
    \    }\n}\necho \"<pre>\";\nprint_r($list);\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7qf36w1p.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 3) return [];\n   \
    \ return array_merge(tri($n - 1), tri($n - 2), [tri($n + 1)]);\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 0) {\n        return\
    \ array();\n    }\n    if ($n % 2 === 0) {\n        $result[] = 1;\n    }\n  \
    \  return tri(ceil($n / 2)) + tri(ceil($n / 2) - 1) + tri(ceil($n / 2) + 1);\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp8i8n49cu.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = array(1);\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $result[] = array_sum($result);\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn90m2h30.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\tif ($n<=2) {\n\t\treturn array(1);\n\
    \t}\n\tif ($n%2==0) {\n\t\t$a=tri(3);\n\t\t$b=tri(4);\n\t\t$c=tri(3);\n\t\tarray_push($a,\
    \ $b);\n\t\tarray_push($a, $c);\n\t\treturn $a;\n\t} else {\n\t\t$a=tri(3);\n\t\
    \t$c=tri(2);\n\t\t$b=tri(1);\n\t\tarray_push($a, $c);\n\t\tarray_push($a, $b);\n\
    \t\treturn $a;\n\t}\n}\n\n$fibo_arr = tri(2);\necho print_r($fibo_arr, true);\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n)\n"
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = [3, 1];\n    $array2\
    \ = [0, 2];\n\n    for ($i = 1; $i < $n + 1; $i++) {\n        $array[] = $array2[$i\
    \ % 2];\n        $array2[] = $array[$i % 2] + $array2[$i / 2];\n    }\n\n    return\
    \ $array;\n}\n\n$tests = [\n    [1, 3, 6, 10, 15],\n    [1, 2, 6, 10, 15],\n \
    \   [2, 1, 6, 10, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 10, 15],\n    [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 15],\n    [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],\n];\n\nforeach\
    \ ($tests as $test) {\n    echo \"Input test: \" . implode(', ', $test) . \"\\\
    n\";\n    foreach ($test as $val) {\n        echo \"Output: \" . implode(', ',\
    \ tri($val)) . \"\\n\";\n    }\n}\n</code>\n<|/ a |>\n<| a dscore=3 tags=php,algorithm\
    \ |>\nHere is my solution for those who can use recursion.\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6rtbde5h.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return array_merge(\n      \
    \  array_slice(range(1, $n + 1), 0, 1),\n        [$n],\n        tri($n - 2) +\
    \ tri($n - 1)\n    );\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis worked like\
    \ a charm!\n<|/ c |>\n<| a tags=php,fibonacci |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1pjcdhd0.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 1) {\n        return\
    \ [];\n    }\n    if ($n === 0) {\n        return [1];\n    }\n\n    if ($n ===\
    \ 1) {\n        return [];\n    }\n    \n    $left = [1, 2, 1];\n    $right =\
    \ array_slice($left, 0, -1);\n\n    return array_merge($left, tri($left), tri($right));\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp53fkdvys.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 0) return null;\n \
    \   if ($n == 0) return [];\n    if ($n == 1) return [1];\n    $r = [];\n    $r[0]\
    \ = tri($n - 1);\n    if ($n % 2 == 0) {\n        $r[1] = tri($n - 2) + tri($n\
    \ - 1) + tri($n + 1);\n    } else {\n        $r[1] = tri($n - 3) + tri($n - 2)\
    \ + tri($n - 1) + tri($n + 1);\n    }\n    return $r;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmppgitgdis.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [1, 3];\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $result[] = $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxg9i_a1e.php:30\n\
    Stack trace:\n#0 /tmp/tmpxg9i_a1e.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxg9i_a1e.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $seq = [];\n    if ($n === 0\
    \ || $n === 1) {\n        array_push($seq, $n);\n        return $seq;\n    }\n\
    \n    $tri_num = tri_num($n); // get tribonacci number\n    array_push($seq, $tri_num);\n\
    \    for ($i = 1; $i < $n; $i++) {\n        if ($i % 2 === 0) {\n            $tri_num\
    \ = tri_num($i);\n            array_push($seq, $tri_num);\n        } else {\n\
    \            $tri_num = tri_num($i - 1) + tri_num($i - 2);\n            array_push($seq,\
    \ $tri_num);\n        }\n    }\n    return $seq;\n}\n$number = tri(5); // returns\
    \ [1, 1, 2, 3, 5, 8, 13]\n</code>\n<|/ a dscore=4 |>\n<| c |>\nYour answer was\
    \ perfectly clear but it was very complicated and difficult to understand for\
    \ me. Now I understood. I will now read it and try to understand the logic. Thanks.\n\
    <|/ c |>\n<| a dscore=4 |>\nHere is a non-recursive solution.\n<code>\n$num =\
    \ tri(5);\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeufgaz5y.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = 1;\n    for ($i = 0;\
    \ $i <= $n; $i++){\n        $sum += ($i / $n) * $sum;\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nAwesome solution. I had to change the\
    \ for loop to go from 2 to n, instead of 0 to n-1, because if I started it with\
    \ 0, it gives me an answer that's less than n!\n<|/ c |>\n<| c |>\nWhat a clever\
    \ solution. I would have never thought of doing it this way.\n<|/ c |>\n<| c |>\n\
    I love this solution. My only question is, why are you using a while loop rather\
    \ than a for loop?\n<|/ c |>\n<| c |>\nI believe that the while loop is more efficient:\
    \ it just calculates sum of first $n numbers and exits, instead of calculating\
    \ sum till $n numbers and adding it up with sum of first $n-1 numbers.\n<|/ c\
    \ |>\n<| c |>\nThis is the best solution for me, for those of us who don't know\
    \ the Tribonacci Sequence.\n<|/ c |>\n<| a dscore=5 |>\nThe naive implementation\n\
    <code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps3829z6n.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [3,1];\n    for($i =\
    \ 1; $i <= $n; $i++){\n        if($i%2 != 0){\n            $arr[] = $arr[$i-1]\
    \ + $arr[$i-2];\n        }else{\n            $arr[] = $arr[$i-1];\n        }\n\
    \    }\n    return $arr;\n}\n</code>\n<|/ a dscore=1 tags=php,fibonacci,arrays\
    \ |>\n<| a tags=php,fibonacci,arrays |>\nJust in case someone came across this\
    \ in search of a JavaScript implementation of Fibonacci sequence that didn't use\
    \ recursion or a for loop. Here is the implementation.\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjexdn95o.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$result = array();\n\tfor ($i\
    \ = 1; $i <= $n; $i += 2)\n\t\t$result[] = $i + $n;\n\tfor ($i = 1; $i <= $n;\
    \ $i += 2)\n\t\t$result[] = $result[$i - 1] + $result[$i + 1];\n\treturn $result;\n\
    }\n\n$n = 3;\n\nprint_r(tri($n));\n</code>\nOutput\n<code>\nArray\n(\n    [0]\
    \ => 1\n    [1] => 3\n    [2] => 2\n    [3] => 8\n)\n</code>\n<|/ a |>\n<| c |>\n\
    This does not output the desired output. `tri(8)` returns `[0, 1, 1, 2, 3, 5,\
    \ 8]` but yours returns `[0, 1, 1, 2, 3, 5, 6, 8]`\n<|/ c |>\n<| a tags=php,fibonacci,loops\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxv1th68e.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 1) {\n        return\
    \ $n;\n    }\n    $tri_sum = 0;\n    $tri_sum = $tri_sum + tri(array_pop(array_keys($n)))\
    \ + tri(array_pop(array_keys($n))) + tri(array_pop(array_keys($n)));\n    return\
    \ array_merge(array($tri_sum), $n);\n}\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_keys() expects parameter 1 to be array, int given in /tmp/tmpa5p27te0.php\
    \ on line 22\n\nWarning: array_pop() expects parameter 1 to be array, null given\
    \ in /tmp/tmpa5p27te0.php on line 22\n\nWarning: array_keys() expects parameter\
    \ 1 to be array, int given in /tmp/tmpa5p27te0.php on line 22\n\nWarning: array_pop()\
    \ expects parameter 1 to be array, null given in /tmp/tmpa5p27te0.php on line\
    \ 22\n\nWarning: array_keys() expects parameter 1 to be array, int given in /tmp/tmpa5p27te0.php\
    \ on line 22\n\nWarning: array_pop() expects parameter 1 to be array, null given\
    \ in /tmp/tmpa5p27te0.php on line 22\n\nWarning: array_merge(): Expected parameter\
    \ 2 to be an array, int given in /tmp/tmpa5p27te0.php on line 23\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpa5p27te0.php:30\nStack trace:\n\
    #0 /tmp/tmpa5p27te0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa5p27te0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $returnArray = array();\n  \
    \  if ($n % 2 == 1) {\n        for ($i = 0; $i < $n; $i++) {\n            $returnArray[]\
    \ = $i;\n        }\n        return $returnArray;\n    }\n    $returnArray = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $returnArray[] = tri($i) + tri($i\
    \ + 1) + tri($i + 2);\n    }\n    return $returnArray;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnfmvixx.php:37\n\
    Stack trace:\n#0 /tmp/tmppnfmvixx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppnfmvixx.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $ret=array();\n    \n    if(($n==1)\
    \ || ($n==2))\n        $ret[]=$n;\n    elseif($n%2==1)\n        $ret[]=tri($n-1)+tri($n-2);\n\
    \    else\n        $ret[]=tri($n-1)+tri($n-1)+tri($n+1);\n    \n    return $ret;\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6gn4t02.php:34\n\
    Stack trace:\n#0 /tmp/tmpr6gn4t02.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr6gn4t02.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = array();\n    if ($n\
    \ == 0) {\n        $result[] = 3;\n    } else if ($n==1) {\n        $result[]\
    \ = 1;\n    } else {\n        $result[] = 1 + intval(ceil($n/2));\n    }\n   \
    \ if ($n%2==0) {\n        $result[] = tri(tri(tri($n-1) + tri($n-2) + tri($n+1)));\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvu3xmbkq.php:37\n\
    Stack trace:\n#0 /tmp/tmpvu3xmbkq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvu3xmbkq.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 3; $b = 1; $sum = 0; $i\
    \ = 0; \n    while($i <= $n) { $sum = $a + $b; $b = $sum; $a++; $i++; } \n   \
    \ return $a; \n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74vct1t9.php:28\n\
    Stack trace:\n#0 /tmp/tmp74vct1t9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp74vct1t9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    \n    //if ($n <= 2) {\n   \
    \ //    return [1, n];\n    //}\n    // return array_merge(\n    //    tri($n\
    \ - 1)\n    //    , tri($n - 2)\n    //    , [1, $n - 1 + $n - 2 + $n]);\n   \
    \ \n    // return array_merge(\n    //    [1, $n - 1 + $n - 2 + $n]\n    //  \
    \  , [tri($n - 1)[0], tri($n - 2)[1], tri($n - 3)[2], tri($n - 4)[3]]);\n    \n\
    \    $ret = [];\n    \n    if ($n <= 2) {\n        $ret = [$n];\n    } else {\n\
    \        $ret = [\n            tri($n - 1)\n            , tri($n - 2)\n      \
    \      , tri($n - 3)\n            , tri($n - 4)\n        ];\n    }\n    \n   \
    \ return $ret;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxho64k1.php:51\n\
    Stack trace:\n#0 /tmp/tmpxxho64k1.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpxxho64k1.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $seq = [3,1];\n    if($n<=1)\
    \ {\n        return $seq;\n    }\n    else {\n        $seq[0] = $seq[1] + $n/(2+$n)/2;\n\
    \        for($i=2;$i<$n;$i++) {\n            $seq[$i] = $seq[$i-1] + $seq[$i-2];\n\
    \        }\n        return $seq;\n    }\n}\nfunction candidate(...$args) {\n \
    \   return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7j5aj0u.php:35\n\
    Stack trace:\n#0 /tmp/tmpf7j5aj0u.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpf7j5aj0u.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 1) {\n        return\
    \ [];\n    }\n    $a = tri($n - 1) ?? 0;\n    $b = tri($n - 2) ?? 0;\n    $c =\
    \ $a + $b;\n    if ($n % 2 === 1) {\n        return [$c];\n    }\n    $d = $c\
    \ + $b;\n    return [$a, $d, $b, $c];\n}\n</code>\nThe result will be a list of\
    \ fibonacci sequences from 0 to n\n<code>\n$input = 50;\nforeach (range(0, $input)\
    \ as $i) {\n    echo sprintf('%3d', array_sum(tri($i))) . PHP_EOL;\n}\n</code>\n\
    <code>\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nHere's a very simple solution using only recursive functions.\n\
    <code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptnbr1pwe.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $list = [];\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $list[] = $i / 2;\n    if ($i % 2 == 0) {\n      $list[]\
    \ = $i + $i;\n    }\n  }\n  return $list;\n}\n\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidtmzo4t.php:33\n\
    Stack trace:\n#0 /tmp/tmpidtmzo4t.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpidtmzo4t.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = [];\n    for($i = 0;\
    \ $i < $n; $i++) {\n        if($i % 2 == 0) {\n            $array[] = $i;\n  \
    \      }\n        else {\n            $array[] = $i + $i;\n        }\n    }\n\
    \    return $array;\n}\n</code>\n<|/ a tags=php,arrays,algorithm dscore=1 |>\n\
    <| a |>\nHere's an example of a recursive implementation which avoids loops, though\
    \ it still does require a loop. I'm sure someone else will provide a non-recursive\
    \ approach that doesn't require any loops.\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzsth9fpm.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 2) {\n        return\
    \ [\n            $n\n        ];\n    }\n    $a = [\n        1,\n        1 + $n\
    \ / 2,\n    ];\n    $b = [\n        1,\n        1 + $n / 2,\n        1 + $n /\
    \ 2,\n    ];\n    $out = array_merge($a, $b, [\n        1 + $n / 2,\n        $out[1],\n\
    \    ]);\n    $out[1] = $out[1] + $out[2];\n    return $out;\n}\nvar_dump(tri(5));\n\
    var_dump(tri(6));\nvar_dump(tri(7));\nvar_dump(tri(8));\nvar_dump(tri(9));\nvar_dump(tri(10));\n\
    var_dump(tri(11));\nvar_dump(tri(12));\nvar_dump(tri(13));\nvar_dump(tri(14));\n\
    var_dump(tri(15));\nvar_dump(tri(16));\nvar_dump(tri(17));\nvar_dump(tri(18));\n\
    var_dump(tri(19));\nvar_dump(tri(20));\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(7) {\n  [0]=>\n  int(1)\n  [1]=>\n  float(4.5)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  float(3.5)\n  [4]=>\n  float(3.5)\n  [5]=>\n  float(3.5)\n  [6]=>\n\
    \  NULL\n}\narray(7) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(4)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  NULL\n}\n\
    array(7) {\n  [0]=>\n  int(1)\n  [1]=>\n  float(5.5)\n  [2]=>\n  int(1)\n  [3]=>\n\
    \  float(4.5)\n  [4]=>\n  float(4.5)\n  [5]=>\n  float(4.5)\n  [6]=>\n  NULL\n\
    }\narray(7) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(6)\n  [2]=>\n  int(1)\n  [3]=>\n\
    \  int(5)\n  [4]=>\n  int(5)\n  [5]=>\n  int(5)\n  [6]=>\n  NULL\n}\narray(7)\
    \ {\n  [0]=>\n  int(1)\n  [1]=>\n  float(6.5)\n  [2]=>\n  int(1)\n  [3]=>\n  float(5.5)\n\
    \  [4]=>\n  float(5.5)\n  [5]=>\n  float(5.5)\n  [6]=>\n  NULL\n}\narray(7) {\n\
    \  [0]=>\n  int(1)\n  [1]=>\n  int(7)\n  [2]=>\n  int(1)\n  [3]=>\n  int(6)\n\
    \  [4]=>\n  int(6)\n  [5]=>\n  int(6)\n  [6]=>\n  NULL\n}\narray(7) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  float(7.5)\n  [2]=>\n  int(1)\n  [3]=>\n  float(6.5)\n \
    \ [4]=>\n  float(6.5)\n  [5]=>\n  float(6.5)\n  [6]=>\n  NULL\n}\narray(7) {\n\
    \  [0]=>\n  int(1)\n  [1]=>\n  int(8)\n  [2]=>\n  int(1)\n  [3]=>\n  int(7)\n\
    \  [4]=>\n  int(7)\n  [5]=>\n  int(7)\n  [6]=>\n  NULL\n}\narray(7) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  float(8.5)\n  [2]=>\n  int(1)\n  [3]=>\n  float(7.5)\n \
    \ [4]=>\n  float(7.5)\n  [5]=>\n  float(7.5)\n  [6]=>\n  NULL\n}\narray(7) {\n\
    \  [0]=>\n  int(1)\n  [1]=>\n  int(9)\n  [2]=>\n  int(1)\n  [3]=>\n  int(8)\n\
    \  [4]=>\n  int(8)\n  [5]=>\n  int(8)\n  [6]=>\n  NULL\n}\narray(7) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  float(9.5)\n  [2]=>\n  int(1)\n  [3]=>\n  float(8.5)\n \
    \ [4]=>\n  float(8.5)\n  [5]=>\n  float(8.5)\n  [6]=>\n  NULL\n}\narray(7) {\n\
    \  [0]=>\n  int(1)\n  [1]=>\n  int(10)\n  [2]=>\n  int(1)\n  [3]=>\n  int(9)\n\
    \  [4]=>\n  int(9)\n  [5]=>\n  int(9)\n  [6]=>\n  NULL\n}\narray(7) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  float(10.5)\n  [2]=>\n  int(1)\n  [3]=>\n  float(9.5)\n\
    \  [4]=>\n  float(9.5)\n  [5]=>\n  float(9.5)\n  [6]=>\n  NULL\n}\narray(7) {\n\
    \  [0]=>\n  int(1)\n  [1]=>\n  int(11)\n  [2]=>\n  int(1)\n  [3]=>\n  int(10)\n\
    \  [4]=>\n  int(10)\n  [5]=>\n  int(10)\n  [6]=>\n  NULL\n}\narray(7) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  float(11.5)\n  [2]=>\n  int(1)\n  [3]=>\n  float(10.5)\n\
    \  [4]=>\n  float(10.5)"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 2) {\n        return\
    \ [1, $n];\n    }\n    $a = [1, $n];\n    $b = [$n, $n + $n];\n    $c = $a + $b;\n\
    \    return $c;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38p94td0.php:31\n\
    Stack trace:\n#0 /tmp/tmp38p94td0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp38p94td0.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = array_fill(0, $n, 3);\n\
    \    $a[0] = 3;\n    array_map(function($v, $k) use ($a, $n) {\n        $v = $a[0]+$a[$k-1]+$a[$k-2];\n\
    \        if ($v > $n) $v = $n;\n        $a[$k] = $v;\n    }, $a, array_keys($a));\n\
    \    return $a;\n}\necho tri(2);\n</code>\n<|/ a tags=php,fibonacci,algorithm,math\
    \ dscore=5 |>\n<| c |>\nThe function does a lot of unnecessary calculations, it\
    \ could be much more efficient if you just calculated the last two numbers of\
    \ the sequence and added them to the last one.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Not everyone has a math background. Most people have\
    \ seen the Fibonacci sequence before.\n<|/ c |>\n<| c |>\nWhy not $a[$k] = $a[$k-1]\
    \ + $a[$k-2] ?\n<|/ c |>\n<| c |>\nI didn't know this was possible. Thanks!\n\
    <|/ c |>\n<| c |>\nNice solution. Could you please explain a bit what it does?\n\
    <|/ c |>\n<| a dscore=5 |>\nThe Fibonacci sequence is just the sum of its two\
    \ previous numbers:\n<code>\nf(1) = 0\nf(2) = 1\nf(n) = f(n-1) + f(n-2)\n</code>\n\
    So, to find nth fibonacci number the algorithm would be like this:\n<code>\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp30wcdn_e.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $numbers = array();\n    //\
    \ $numbers[1] = 3;\n    // $numbers[2] = 1;\n    // $numbers[3] = 1;\n    // $numbers[4]\
    \ = 2;\n    \n    if ($n == 0) {\n        $numbers[0] = 0;\n        $numbers[1]\
    \ = 1;\n        $numbers[2] = 2;\n    } else if ($n%2 == 0) {\n        $numbers[$n]\
    \ = $numbers[$n - 1] + $numbers[$n - 2];\n        $numbers[$n] = $numbers[$n-1];\n\
    \    } else {\n        $numbers[$n] = $numbers[$n - 2] + $numbers[$n - 1];\n \
    \   }\n    \n    return $numbers;\n}\n\necho implode(',', $tri(3)) . \"\\n\";\
    \ // echo implode(',', $tri(3));\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp74y7kjus.php:38\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmp74y7kjus.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = array_fill(1, $n, 1);\n\
    \    $b = array_fill(1, $n, 2);\n    $c = array_fill(1, $n, 3);\n    $res = array();\n\
    \    array_walk($a, function($value, $key) use (&$res) {\n        if ($key % 2\
    \ === 1) {\n            $res = array_merge($res, array_slice($value, $key, $key\
    \ + 1));\n        } else {\n            $res = array_merge($res, array_slice($value,\
    \ $key, $key + 2));\n        }\n    });\n    return $res;\n}\n\n$res = tri(3);\n\
    print_r($res);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nWhy do you think this is\
    \ the accepted answer? I mean it does exactly what the OP asks for.\n<|/ c |>\n\
    <| c |>\nThis is very inefficient. You're calling `array_merge` three times on\
    \ every call!\n<|/ c |>\n<| c |>\nYeah, you're right. Thought about it on another\
    \ way. I've changed the accepted answer. Sorry about that.\n<|/ c |>\n<| c |>\n\
    I like the solution with the array slices better than the solution with the array_walk\
    \ function. Thanks guys.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more efficient\n<|/ c |>\n<| a tags=arrays,php,trigonometry |>\nYou can\
    \ do it like that using a recursive function:\n<code>\n$arr = [0,1,1,1];\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd01qya37.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 3) {\n        return\
    \ array();\n    }\n    $sequences = array();\n    $sequences[] = $n;\n    for\
    \ ($i = 1; $i < $n; $i ++) {\n        $sequences[] = $sequences[$i - 1] + $sequences[$i\
    \ - 2] + $sequences[$i + 1];\n    }\n    return $sequences;\n}\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nNice solution, though it may be worth explaining how it\
    \ works, to help the OP understand how it works.\n<|/ c |>\n<| c |>\nNice, but\
    \ your solution is still recursive.\n<|/ c |>\n<| c |>\nIt's not recursive. It\
    \ just creates the sequence in one shot.\n<|/ c |>\n<| c |>\nThis solution is\
    \ better. Also it requires less space than the other solution.\n<|/ c |>\n<| a\
    \ dscore=4 tags=php,arrays,recursion,function |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpil93y19_.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 3) return range(1,\
    \ $n);\n    $arr = [1, 3, 3];\n    $arr2 = [];\n    for ($i = 0; $i < $n; $i +=\
    \ 2) {\n        $arr2[] = $arr[0] + $arr[1];\n        $arr[] = $arr[1];\n    }\n\
    \    return $arr2;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nYour solution\
    \ doesn't give the expected result for n=1 as you might expect. Try this: tri(1).\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3s10sr8w.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $tri = [];\n    if ($n<=0) return [];\n    if ($n==1 || $n==2) {\n\
    \        return $tri;\n    }\n    for ($i = 3; $i<=$n; $i++) {\n        $tri[]\
    \ = $a+$b+$c;\n        $a = $b;\n        $b = $c;\n        $c = $tri[$i-1];\n\
    \    }\n    return $tri;\n}\necho \"<pre>\";\nprint_r(tri(10));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 0\n\
    \    [4] => 0\n    [5] => 0\n    [6] => 0\n    [7] => 0\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpl9asapw6.php:42\nStack trace:\n\
    #0 /tmp/tmpl9asapw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl9asapw6.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if($n == 1) {\n        return\
    \ [1,3];\n    }\n    if($n == 2) {\n        return [1,2];\n    }\n    if($n %\
    \ 2 == 1) {\n        return [tri($n-1), tri($n-2), tri($n+1)];\n    }\n    else\
    \ {\n        return [tri($n-1), tri($n-1), tri($n-1)];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\tif ($n <= 2) {\n\t\treturn [$n];\n\
    \t}\n\t$tri = [1, 1];\n\tfor ($i=2; $i <= $n; $i++) {\n\t\t$tri[] = $tri[$i-1]\
    \ + $tri[$i-2];\n\t}\n\treturn $tri;\n}\n\nfunction candidate(...$args) {\n  \
    \  return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhcn85g4.php:33\n\
    Stack trace:\n#0 /tmp/tmpyhcn85g4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyhcn85g4.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sequence = [];\n    $sequence[]\
    \ = 3; // base case\n    for ($i = 1; $i <= $n; $i++) {\n        $sequence[] =\
    \ 1 + $i / 2;\n    }\n    return $sequence;\n}\n\nprint_r(tri(2));\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 1.5\n    [2] => 2\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxyxufbzb.php:32\nStack trace:\n\
    #0 /tmp/tmpxyxufbzb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxyxufbzb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\tif ($n == 0) {\n\t\treturn [3,\
    \ 2, 1];\n\t} else if ($n == 1) {\n\t\treturn [1, 1, 3];\n\t} else if ($n == 2)\
    \ {\n\t\treturn [1, 1, 1];\n\t}\n\treturn tri($n - 1) + tri($n - 2) + tri($n +\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp58bdagix.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$list = [];\n\tfor ($i = 0; $i\
    \ <= $n; $i++) {\n\t\t$list[] = $i;\n\t\tif ($i % 2 === 0) {\n\t\t\t$list[] =\
    \ $i + $i / 2;\n\t\t}\n\t}\n\treturn $list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivp2cy1h.php:33\n\
    Stack trace:\n#0 /tmp/tmpivp2cy1h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpivp2cy1h.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n == 1) {\n        return\
    \ array(3);\n    }\n    $first = tri($n - 1);\n    $second = tri($n - 2);\n  \
    \  $third = $n + 1;\n    return array_merge($first, $second, $third);\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if($n <= 2) {\n        return\
    \ array($n);\n    }\n    else {\n        $num = $n;\n        $tri = array($n);\n\
    \        $tri[1] = $tri[2] = $tri[3] = 1;\n        $tri[$num] = $tri[$num-1] +\
    \ $tri[$num-2] + $tri[$num+1];\n        for($i = $num-2; $i >= 0; $i--) {\n  \
    \          $tri[$i] = $tri[$i-1] + $tri[$i-2] + $tri[$i+1];\n        }\n     \
    \   return $tri;\n    }\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwgyek3m.php:38\n\
    Stack trace:\n#0 /tmp/tmpgwgyek3m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgwgyek3m.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = $c = 1;\n    $result\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $result[] = $a;\n       \
    \ $a = $b;\n        $b += $c;\n        $c = $b - $a;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9wbzkhi.php:34\n\
    Stack trace:\n#0 /tmp/tmpf9wbzkhi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpf9wbzkhi.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return range(1, ($n+2));\n}\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzy964wzd.php:25\n\
    Stack trace:\n#0 /tmp/tmpzy964wzd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzy964wzd.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    if ($n < 3)\
    \ {\n        return $arr;\n    }\n    $arr[] = 1;\n    $arr[] = 2;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n    }\n    $arr[] = $arr[$n - 1];\n    return $arr;\n}\n</code>\n<|/\
    \ a dscore=3 tags=algorithm,php |>\n<| a dscore=2 |>\nThe Fibonacci sequence is\
    \ defined recursively by two expressions:\n<code>\nF(0) = 0\nF(1) = 1\nF(n) =\
    \ F(n-1) + F(n-2), for n >= 2\n</code>\nYou can easily generate the first n Fibonacci\
    \ numbers using recursion in O(1) time per each number.\nThe Tribonacci sequence\
    \ is defined by a recurrence relation:\n<code>\nT(0) = 0\nT(1) = 1\nT(n) = T(n-1)\
    \ + T(n-2) + T(n-3), for n >= 3\n</code>\nYou can easily generate the first n\
    \ Tribonacci numbers using recursion in O(1) time per each number.\n<|/ a tags=algorithm,php\
    \ |>\n<| a |>\nAs others have already stated a tribonacci sequence is defined\
    \ recursively, so you can easily generate the first n tribonacci numbers using\
    \ recursion in O(1) time per each number.\nTo illustrate that this is an O(1)\
    \ per each number solution, let's have a look at the following PHP implementation\
    \ of the fibonacci sequence:\n<code>\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbo8fggj8.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = array();\n    for($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i % 2 == 0 ?\n            $a[$i - 1] +\
    \ $a[$i - 2] :\n            $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n    }\n   \
    \ return $a;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $nums = array(\n    1, 2, 3,\n    4, 5, 6,\n    7, 8, 9,\n    );\n$arr = [];\n\
    foreach ($nums as $key => $val) {\n    $arr[$key] = $val;\n    if ($val % 2 ==\
    \ 0) {\n        $arr[$key] .= $arr[$key + 1];\n    }\n}\necho \"<pre>\";\nprint_r($arr);\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg46_fx16.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return array_map(function($x)\
    \ { return 1 + $x / 2; }, range(0, $n));\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8_o538z_.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 1) return [];\n\n\
    \    $r = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i += 2) {\n        $r[] = $r[$i\
    \ - 1] + $r[$i - 2] + $r[$i + 1];\n    }\n\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82yigbyc.php:33\n\
    Stack trace:\n#0 /tmp/tmp82yigbyc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp82yigbyc.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $list = range(1, $n + 1);\n\
    \    if ($n % 2 == 0) {\n        $list[0] = 3;\n        $list[1] = 3;\n      \
    \  $list[2] = $list[0] + $list[1];\n        $list[3] = $list[1] + $list[2];\n\
    \    }\n    return $list;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhe71itf.php:33\n\
    Stack trace:\n#0 /tmp/tmpjhe71itf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjhe71itf.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    if ($n < 3)\
    \ {\n        return $arr;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $result\
    \ = $arr;\n    \n    for ($i = 2; $i < $n + 1; $i++) {\n        $a = $b;\n   \
    \     $b = $c;\n        $c = $a + $b + $c; // c = a + b + c\n        array_push($result,\
    \ $c);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,algorithm,math\
    \ |>\n<| c |>\nThe `foreach` loop is only iterating up to `2` whereas the question\
    \ asks for `n + 2` as far as I can tell. Besides that, this is a good answer :)\n\
    <|/ c |>\n<| c |>\nGood point about the loop - I originally had it go up to $n+2\
    \ but forgot to change the final $i in the array_push\n<|/ c |>\n<| a dscore=4\
    \ |>\nPHP Code\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0ggj5uhj.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n === 0 || $n === 1) {\n\
    \        return [1];\n    }\n    $result = [1];\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        $result[] = $result[$i - 1] + $result[($i - 1) + ($i - 2)];\n   \
    \ }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nA good example where\
    \ you can get the expected answer and actual answer in the same answer is [here](https://stackoverflow.com/questions/68458744/php-recursion-not-returning-expected-result/68458755?noredirect=1#comment120871569_68458755).\
    \ Though this answer is in Perl, I hope you can see the idea of implementing the\
    \ same logic in PHP.\n<|/ c |>\n<| a tags=php,recursion,math,algorithm |>\nI believe\
    \ this is a recursive formula.\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgmqa173j.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a[] = 3 + $n / 2;\n    $a[]\
    \ = $a[count($a) - 1] + $a[count($a) - 2] + $a[count($a) - 3];\n    return $a;\n\
    }\n\nprint_r(tri(5));\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5.5\n    [1] => 5.5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp2_m0mkvr.php:29\nStack trace:\n#0 /tmp/tmp2_m0mkvr.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2_m0mkvr.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n == 1) {\n        return\
    \ array(1, 2, 3);\n    } else if ($n == 2) {\n        return array(1, 2, 1);\n\
    \    } else if ($n <= 3) {\n        return array(1, $n - 1, $n);\n    } else {\n\
    \        $result = array();\n        $n1 = $n - 2;\n        $n2 = $n1 + 1;\n \
    \       $n3 = $n2 + 1;\n        $n4 = $n3 + $n;\n        $n5 = $n4 + $n;\n   \
    \     $result[] = $n1;\n        $result[] = $n2;\n        $result[] = $n3;\n \
    \       $result[] = $n4;\n        $result[] = $n5;\n        return $result;\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nThis code is a bit complex for me. Could\
    \ you give me more detail?\n<|/ c |>\n<| a tags=php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf4givx2h.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    // Tribonacci sequence has n+1\
    \ terms\n    $triB = 1;\n    \n    // Since all tribonacci numbers have the same\
    \ two terms, \n    // and since n / 2 = 1 - 2 * n, just use n / 2 to determine\
    \ the next two terms\n    $triA = 2 * $n;\n    $triB = 2 * $triA;\n    \n    //\
    \ Loop through all the terms and add the sequence numbers\n    for ($i = 3; $i\
    \ <= $n; $i++) {\n        $triB += $triA;\n        $triA += $triB;\n    }\n  \
    \  \n    return $triB;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkiv_tf_7.php:40\n\
    Stack trace:\n#0 /tmp/tmpkiv_tf_7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkiv_tf_7.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n == 1) {\n        return\
    \ array(3);\n    }\n    if ($n % 2 == 0) {\n        $tri_seq = array($n);\n  \
    \      for ($i = 1; $i <= $n/2; $i++) {\n            $tri_seq[] = $tri_seq[$i-1]\
    \ + $tri_seq[$i-2];\n        }\n        return $tri_seq;\n    }\n    $tri_seq\
    \ = array($n);\n    $tri_seq[] = $tri_seq[$n-1] + $tri_seq[$n-2];\n    for ($i\
    \ = 1; $i <= $n/2; $i++) {\n        $tri_seq[] = $tri_seq[$i-1] + $tri_seq[$i-2];\n\
    \    }\n    return $tri_seq;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvw7_mh9l.php:41\n\
    Stack trace:\n#0 /tmp/tmpvw7_mh9l.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvw7_mh9l.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = [];\n    $array[1]\
    \ = 3; // 1\n    if($n % 2 == 0) {\n        $array[2] = tri($n - 1) + tri($n -\
    \ 2) + tri($n + 1);\n    } else {\n        $array[2] = tri($n - 1) + tri($n +\
    \ 1) + tri($n + 2);\n    }\n    $array[$n + 1] = tri($n);\n    return $array;\n\
    }\n</code>\n<|/ a tags=php,recursion |>\n<| a |>\n<code>\n<?php\n\nclass Recursion\
    \ {\n\n    public static function factorial($n) {\n        if ($n == 0) {\n  \
    \          return 1;\n        } elseif($n == 1) {\n            return 1;\n   \
    \     } else {\n            return $n * self::factorial($n - 1);\n        }\n\
    \    }\n\n    public static function fibonacci($n) {\n        if ($n == 0) {\n\
    \            return 0;\n        } elseif($n == 1) {\n            return 1;\n \
    \       } else {\n            return self::fibonacci($n - 2) + self::fibonacci($n\
    \ - 1);\n        }\n    }\n\n    public static function tribonacci($n) {\n   \
    \     if ($n == 0) {\n            return 0;\n        } elseif($n == 1) {\n   \
    \         return 1;\n        } else {\n            return self::tribonacci($n\
    \ - 3) + self::tribonacci($n - 2) + self::tribonacci($n - 1);\n        }\n   \
    \ }\n\n    public static function power($x, $y) {\n        if ($y == 0) {\n  \
    \          return 1;\n        } else {\n            return $x * self::power($x,\
    \ $y - 1);\n        }\n    }\n\n    public static function fib($n) {\n       \
    \ if ($n == 0) {\n            return 0;\n        } elseif ($n == 1) {\n      \
    \      return 1;\n        } else {\n            return self::power(self::fibonacci($n),\
    \ $n) / self::factorial($n);\n        }\n    }\n\n    public static function pow($x,\
    \ $y) {\n        if ($y == 0) {\n            return 1;\n        } else {\n   \
    \         return $x * self::pow($x, $y - 1);\n        }\n    }\n\n    public static\
    \ function pow($x, $y) {\n        if ($y == 0) {\n            return 1;\n    \
    \    } else {\n            return $x * self::pow($x, $y - 1);\n        }\n   \
    \ }\n\n    public static function pow($x, $y) {\n        if ($y == 0) {\n    \
    \        return 1;\n        } else {\n            return $x * self::pow($x, $y\
    \ - 1);\n        }\n    }\n\n    public static function pow($x, $y) {\n      \
    \  if ($y == 0) {\n            return 1;\n        } else {\n            return\
    \ $x * self::pow($x, $y - 1);\n        }\n    }\n}\n</code>\n<|/ a dscore=2 tags=php,recursion\
    \ |>\n<| a |>\n<code>\n<?php\n\nclass recursion\n{\n\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfvtu9wa4.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [1,3,2];\n    $k = 0;\n\
    \    if ($n > 0) {\n        $k++;\n        $tri[] = $tri[count($tri)-1] + $tri[count($tri)-2]\
    \ + $tri[count($tri)-3];\n        $k++;\n    }\n    $k++;\n    return $tri;\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuepa9o3y.php:33\n\
    Stack trace:\n#0 /tmp/tmpuepa9o3y.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpuepa9o3y.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $list = new Array();\n    $list[]\
    \ = 3;\n    \n    if($n % 2 == 0) {\n        $list[] = 1 + $n / 2;\n    }\n  \
    \  elseif($n % 2 ==1) {\n        for($i=0;$i<count($list)-1;$i++) {\n        \
    \    $list[] = $list[$i] + $list[$i+1];\n        }\n    }\n    return $list;\n\
    }\n\n$result = tri($n);\nprint_r($result);\nfunction candidate(...$args) {\n \
    \   return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzows0f_v.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $n-1;\n    $b = $n-2;\n\
    \    $c = $n+1;\n    $list = [];\n    for($i = 0; $i < $n; $i++) {\n        $list[$i]\
    \ = $a+$b+$c;\n        $a = $b;\n        $b = $c;\n        $c = $list[$i];\n \
    \   }\n    return $list;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is the\
    \ answer for Tribonacci sequence and the question is for Fibonacci sequence\n\
    <|/ c |>\n<| a tags=php,fibonacci |>\n<code>\n$n = 5;\n$first = 0;\n$second =\
    \ 1;\n$third = $first + $second;\n$fourth = $second + $third;\n$fifth = $third\
    \ + $fourth;\n$answer = [\n    'first' => $first,\n    'second' => $second,\n\
    \    'third' => $third,\n    'fourth' => $fourth,\n    'fifth' => $fifth,\n];\n\
    echo \"Fibonacci Series: \\n\";\necho $answer['first'];\necho \"\\n\";\necho $answer['second'];\n\
    echo \"\\n\";\necho $answer['third'];\necho \"\\n\";\necho $answer['fourth'];\n\
    echo \"\\n\";\necho $answer['fifth'];\necho \"\\n\";\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\n<?php \necho \"Fibonacci Series: \\n\";\n$n = 5;\n$first\
    \ = 0;\n$second = 1;\n$third = $first + $second;\n$fourth = $second + $third;\n\
    $fifth = $third + $fourth;\necho $first.'<br>';\necho $second.'<br>';\necho $third.'<br>';\n\
    echo $fourth.'<br>';\necho $fifth.'<br>';\n</code>\n<|/ a tags=php,fibonacci dscore=2\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a |>\nThis code might help someone who has faced this situation.\n\
    <code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgb_g9dvp.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n === 0 || $n === 1) {\n\
    \        return [1,1];\n    }\n    return tri($n - 1) + tri($n - 2) + tri($n +\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpsx7k5su3.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 2) return array();\n\
    \    return array($n + 1, $n / 2, tri($n - 1) + tri($n - 2) + tri($n + 1));\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpsrmsnt2t.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return array_slice(fibonacci($n),\
    \ 0, $n + 1);\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fibonacci() in\
    \ /tmp/tmpnkzeiiaq.php:18\nStack trace:\n#0 /tmp/tmpnkzeiiaq.php(22): tri(3)\n\
    #1 /tmp/tmpnkzeiiaq.php(26): candidate(3)\n#2 /tmp/tmpnkzeiiaq.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnkzeiiaq.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $list = array(1);\n  for ($i =\
    \ 2; $i <= $n; $i++) {\n    $list[] = $list[$i - 1] + $list[$i - 2] + $list[$i\
    \ + 1];\n  }\n  return $list;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzck4g24i.php:30\n\
    Stack trace:\n#0 /tmp/tmpzck4g24i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzck4g24i.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    // Write your code here\n  \
    \  $array = array(3);\n    if ($n <= 1) {\n        return $array;\n    }\n   \
    \ if ($n % 2 == 0) {\n        array_push($array, ($n / 2));\n    }\n    else {\n\
    \        $array[] = $tri($n - 1) + $tri($n - 2) + $tri($n + 1);\n    }\n    return\
    \ $array;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpnc59r7fu.php:27\n\
    Stack trace:\n#0 /tmp/tmpnc59r7fu.php(32): tri(3)\n#1 /tmp/tmpnc59r7fu.php(36):\
    \ candidate(3)\n#2 /tmp/tmpnc59r7fu.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpnc59r7fu.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = array(1 => 3);\n    for($i\
    \ = 2; $i <= $n; $i++) {\n        $arr[$i] = $arr[$i - 1] + $arr[$i - 2];\n  \
    \  }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxoqu5q8y.php:30\n\
    Stack trace:\n#0 /tmp/tmpxoqu5q8y.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxoqu5q8y.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = 1;\n    $c = $a +\
    \ $b;\n    if ($n % 2 === 0)\n        $c = $c;\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        $c = $a + $b + $c; // $c = 3 + 2 + 8\n        $b = $c;\n        $a\
    \ = $c;\n    }\n    $tri = [$a];\n    foreach (range(1, $n + 1) as $i) {\n   \
    \     $tri[] = $tri[$i - 1] + $tri[$i];\n    }\n    return $tri;\n}\n\n$arr =\
    \ [];\nfor ($i = 1; $i <= 10; $i++) {\n    $arr = array_merge($arr, tri($i));\n\
    }\n\nprint_r($arr);\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 1\n    [1]\
    \ => 1\n    [2] => 2\n    [3] => 3\n    [4] => 6\n    [5] => 11\n    [6] => 16\n\
    \    [7] => 21\n    [8] => 28\n    [9] => 35\n    [10] => 42\n)\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nYou don't need `array_map` for the first 2 numbers,\
    \ just `array_merge` will suffice and save an extra call.\n<|/ c |>\n<| c |>\n\
    This answer was extremely helpful and educational. Thank you very much.\n<|/ c\
    \ |>\n<| c |>\nWhat do you mean by `array_merge`? If I use array_merge on the\
    \ first two numbers, I'm getting an array with 3 elements, instead of just 2 elements.\n\
    <|/ c |>\n<| c |>\n, yes, I meant `array_merge()`, sorry. I fixed it.  And thanks\
    \ for your helpful feedback! :-)\n<|/ c |>\n<| c |>\nGreat solution, thanks! It\
    \ took me a while to understand how this works, but it works perfectly for the\
    \ problem I have. Thank you!\n<|/ c |>\n<| a |>\nI realize this was already answered,\
    \ but I wanted to share my solution anyway. I've been working on this for a few\
    \ hours and I thought I should share what I've come up with. It can be cleaned\
    \ up a lot, but this works. I used recursion to make it a little more readable.\
    \ I've tested it on some large numbers and it seems to work. \nThe first two numbers\
    \ in the triangle are always 1 and 1 (the second number is the sum of two other\
    \ numbers). Then, the numbers in the triangle are calculated by adding two numbers\
    \ at a time.\n\nI start with \nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp77nac21c.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $n = $n + 1;\n    return array($n,\
    \ $n / 2, $n - $n / 2);\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8pq8gem.php:27\n\
    Stack trace:\n#0 /tmp/tmpw8pq8gem.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpw8pq8gem.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if($n === 0 || $n === 1){\n\
    \        return 1;\n    }\n    if($n % 2 === 0){\n        return tri($n - 1) +\
    \ (tri($n - 2)  + tri($n + 1))/3;\n    }\n    return tri($n-1) + tri($n-2) + tri($n+1);\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp141iakga.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n    $first = $second = $third = 1;\n    $last_is_odd = 1;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $third = $first + $second + $third;\n   \
    \     if ($third % 2 === 0) {\n            $last_is_odd = !$last_is_odd;\n   \
    \         $second = $first;\n            $first = $third;\n        } else {\n\
    \            $second = $third;\n        }\n    }\n    $result = $first;\n    if\
    \ ($last_is_odd) {\n        $result .= '+' . $second;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lyyu6d3.php:45\n\
    Stack trace:\n#0 /tmp/tmp7lyyu6d3.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7lyyu6d3.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $arr = array();\n  if ($n < 3)\n\
    \    return $arr;\n  if ($n%2==0) {\n    $arr[] = $n;\n    $arr[] = $n+1+$n/2;\n\
    \    return $arr;\n  } else {\n    $arr[] = $n;\n    $arr[] = $n+1+$n+1+$n/4+$n+1+$n/4;\n\
    \    return $arr;\n  }\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm_g6jjo.php:37\n\
    Stack trace:\n#0 /tmp/tmpvm_g6jjo.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvm_g6jjo.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri[] = 1;\n    for($i=2;$i<=$n;$i++)\n\
    \        $tri[] = $tri[$i-1] + $tri[$i-2] + $tri[$i];\n    return $tri;\n}\n\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3_c76rx.php:29\n\
    Stack trace:\n#0 /tmp/tmpj3_c76rx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpj3_c76rx.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = array();\n    if ($n\
    \ % 2 == 1) {\n        $array[] = $n;\n        $array[] = $n / 2;\n    } else\
    \ {\n        $array[] = $n / 2;\n        $array[] = tri($n - 1) + tri($n - 2)\
    \ + tri($n + 1);\n    }\n    return $array;\n}\n\nprint_r(tri(21));\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 21\n    [1] => 10.5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp47_le6eu.php:35\nStack trace:\n#0 /tmp/tmp47_le6eu.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp47_le6eu.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $nums = [1];\n    if ($n < 3)\
    \ {\n        return $nums;\n    }\n    foreach (range($n - 1, $n + 2) as $value)\
    \ {\n        if ($n % 2 == 1) {\n            $nums[] = $nums[$value - 1] + $nums[$value\
    \ + 1];\n        } else {\n            $nums[] = $nums[$value - 1] + $nums[$value\
    \ - 2] + $nums[$value + 1];\n        }\n    }\n    return $nums;\n}\n$result =\
    \ tri(3);\nprint_r($result);\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjj3khhj0.php:38\n\
    Stack trace:\n#0 /tmp/tmpjj3khhj0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjj3khhj0.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 1) {\n        return\
    \ $n;\n    }\n\n    $triArray = array(1);\n    $triArray[] = $triArray[0] + $triArray[1];\n\
    \n    for ($i = 3; $i <= $n; $i += 2) {\n        $triArray[] = $triArray[$i -\
    \ 1] + $triArray[$i - 2] + $triArray[$i + 1];\n    }\n\n    return $triArray;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr73vqjag.php:37\n\
    Stack trace:\n#0 /tmp/tmpr73vqjag.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpr73vqjag.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 1) return [];\n\n \
    \   $tri_array = [];\n    $tri_array[] = 3;\n    if ($n & 1) $tri_array[] = 1;\n\
    \    for ($i = 3; $i <= $n; $i += 2) {\n        $tri_array[] = $tri_array[$i -\
    \ 1] + $tri_array[$i - 2];\n    }\n    return $tri_array;\n}\n\n$tri_array = tri(3);\n\
    \nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkd107p4o.php:36\n\
    Stack trace:\n#0 /tmp/tmpkd107p4o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkd107p4o.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = array(3);\n    for($i=1;\
    \ $i<=2; $i++) {\n        $array = array_merge($array, array(($i/$i == (1 + $i)/2)\
    \ * $i + ((1 + $i)/2) + ($i/$i)));\n    }\n    return $array;\n}\n</code>\n<|/\
    \ a tags=php,recursion |>\n<| a dscore=0 |>\nHere is what I came up with. It does\
    \ use recursion, so I'm not entirely sure if it's efficient and I doubt it is\
    \ tail recursion, but it's a nice little exercise for me anyway!\n<code>\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvf_58bu1.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = $result[0] + $n / 2;\n    if ($n % 2 == 0) {\n       \
    \ $result[] = $result[0];\n        $result[] = $result[0] + $n / 2;\n    }\n \
    \   return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\nHere's a simple solution\
    \ that doesn't require a loop:\n<code>\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl8fd8kvu.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 0)\n        return\
    \ null;\n    if ($n <= 3)\n        return array(1);\n    $array = array();\n \
    \   $array[] = 1;\n    $a = $b = $array[0];\n    $c = 1;\n    $array[] = $c;\n\
    \    $array[] = $c;\n    for ($i = 1; $i <= $n; ++$i) {\n        $array[] = $b\
    \ + $a + $c;\n        $a = $b;\n        $b = $c;\n        $c = $array[$i];\n \
    \   }\n    return $array;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1iuetqm.php:41\n\
    Stack trace:\n#0 /tmp/tmpv1iuetqm.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpv1iuetqm.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = array(3);\n    if ($n%2\
    \ == 0){\n        $sum[] = tri($n-1);\n        $sum[] = tri($n-2);\n        $sum[]\
    \ = tri($n+1);\n    }else{\n        $sum[] = tri($n-3)+tri($n-1)+tri($n-2)+tri($n+1);\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\nThis is very\
    \ simple algorithm, it takes just 3 lines of code but if you can't figure out\
    \ how it works then you are very new to programming languages and you should take\
    \ some time to learn the basics of programming languages, it makes life a lot\
    \ easier. \nYou just have to create a function that returns an array of n numbers\
    \ and then just call the function for the first n numbers.\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3cz7l0fv.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = [];\n    $fibonacci\
    \ = function ($n) {\n        return $n % 2 == 0 ? $n - 1 : $n + 1;\n    };\n\n\
    \    $n = $fibonacci($n);\n    while ($n > 2) {\n        $array[--$n] = $fibonacci($n);\n\
    \    }\n\n    return array_merge(array_fill(1, $n, $array[0]), array_slice($array,\
    \ 0, $n + 1));\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1d34zdle.php:36\n\
    Stack trace:\n#0 /tmp/tmp1d34zdle.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1d34zdle.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $num = range(1, $n);\n    $num[]\
    \ = $num[$n - 1] + $num[$n - 2];\n    return $num;\n}\n</code>\n<|/ a dscore=0\
    \ tags=php |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp81yah85q.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $n-1;\n    $b = $n-2;\n\
    \    $c = $n+2;\n    $arr = [];\n    while($a > 1) {\n        $arr[] = $a;\n \
    \       $a = $b-1;\n        $b = $c-1;\n        $c = $a+2;\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzg2q51av.php:36\n\
    Stack trace:\n#0 /tmp/tmpzg2q51av.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzg2q51av.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = array($n, $n + 1, $n\
    \ + 1, $n);\n    sort($arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp43bxz121.php:28\n\
    Stack trace:\n#0 /tmp/tmp43bxz121.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp43bxz121.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    // Write your code here\n  \
    \  $sums = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $sums[] = $i\
    \ + $i + $i;\n    }\n    array_pop($sums);\n    return $sums;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxfz_3x9.php:31\n\
    Stack trace:\n#0 /tmp/tmpoxfz_3x9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpoxfz_3x9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    // Create empty array.\n   \
    \ $numbers = array();\n    // Loop through all numbers from 3 to n+1.\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        // Store number in array.\n        $numbers[]\
    \ = $i;\n    }\n    // Loop through all numbers from 1 to n.\n    for ($i = 1;\
    \ $i < $n; $i++) {\n        // Add numbers from array to array.\n        $numbers[]\
    \ = $numbers[$i - 1] + $numbers[$i - 2] + $numbers[$i + 1];\n    }\n    // Return\
    \ array.\n    return $numbers;\n}\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbbu8_t.php:38\n\
    Stack trace:\n#0 /tmp/tmpivbbu8_t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpivbbu8_t.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return array_merge([1], [$n],\
    \ (array_slice(array_merge(tri($n - 1), tri($n - 2)), 0, $n) + array_slice(array_merge(tri($n\
    \ + 1), tri($n + 2)), 0, $n))/2);\n}\n</code>\n<|/ a tags=php,fibonacci,math,math\
    \ |>\n<| a dscore=2 |>\nAs you say, the Fibonacci sequence is defined by:\n<code>\n\
    F(0) = 0\nF(1) = 1\nF(n) = F(n-1) + F(n-2)\n</code>\nSo you can do it as follows:\n\
    <code>\n$n = 5;\n$fib = array(0, 1, 1, 2);\n$fib[$n] = $fib[$n - 1] + $fib[$n\
    \ - 2];\nvar_dump($fib[$n]);\n</code>\n<|/ a tags=php,fibonacci,math,math |>\n\
    <| c |>\nYes, but how does this address the \"n+1\" part?\n<|/ c |>\n<| c |>\n\
    He didn't ask for \"n+1\" specifically, he asked for \"first n numbers of the\
    \ Fibonacci sequence\". That's what my code does. But I'm confused that he said\
    \ \"You have to return the numbers from the Fibonacci sequence starting with the\
    \ first $n numbers\". I'm sure he's not expecting the first n numbers but rather\
    \ the first n numbers of the Fibonacci sequence. That's why I added the `$n-1`\
    \ and `$n-2` so he could just plug it in and get the first n numbers of the sequence.\n\
    <|/ c |>\n<| c |>\nAh I see what you mean now. The OP never said he wanted the\
    \ _first_ n numbers of the sequence, but rather he said he wanted to return the\
    \ numbers from the sequence starting with $n numbers. My bad, sorry.\n<|/ c |>\n\
    <| c |>\nI think it's clear from the question that he wants the first $n numbers,\
    \ not the first.\n<|/ c |>\n<| c |>\nOh yeah, it seems I misunderstood the question.\
    \ Thanks :)\n<|/ c |>\n<| a |>\nThe first n numbers of the Fibonacci sequence\
    \ is given by\n<code>\nF(0) = 0\nF(1) = 1\nF(n) = F(n-1) + F(n-2)\n</code>\nso\
    \ you can do something like this:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg6h18fqd.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n == 1) {\n        return\
    \ [3];\n    }\n    if ($n % 2 == 0) {\n        $n--;\n        $list1 = tri($n);\n\
    \        $list2 = tri($n);\n        $list2 = $list1 + $list2;\n        return\
    \ $list2;\n    }\n    $list1 = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    $list2\
    \ = tri($n - 1) + tri($n - 2) + tri($n - 1);\n    return $list1 + $list2;\n}\n\
    $input = tri(5);\nforeach ($input as $value) {\n    echo $value . \"<br>\";\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpe051amim.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $list = [];\n    $counter =\
    \ 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n        \
    \    $list[$counter] = $i;\n            $counter++;\n        } elseif ($i % 2\
    \ == 1) {\n            $list[$counter] = $list[$counter - 1] + $list[$counter\
    \ - 2];\n            $counter++;\n        }\n    }\n    return $list;\n}\n</code>\n\
    <|/ a dscore=2 tags=php,javascript |>\n<| c |>\nI understand that my function\
    \ only returns all the fibonacci numbers (which are in the sequence), however\
    \ I'm looking for a more practical solution (meaning one that returns the Fibonacci\
    \ numbers as well, without changing the function at all)\n<|/ c |>\n<| c |>\n\
    This is not what OP asked.\n<|/ c |>\n<| a dscore=1 |>\nThis is a recursive function,\
    \ which is an extremely useful tool to have in your arsenal.\nThe basic idea is\
    \ to have your function call itself. To accomplish this, we need to pass the current\
    \ number and the number we are adding to, to our function. The function returns\
    \ our new number and we pass it back into our next call. The function calls itself\
    \ until we get to the end of the sequence.\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvrlguzew.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    \n    if($n<2) {\n        return\
    \ $n;\n    }\n    $a = 1;\n    $b = 1;\n    $c = 0;\n    $tri = [1,2];\n    \n\
    \    $sum = 0;\n    for($i = 2; $i<$n+2; $i++) {\n        $sum = $a + $b + $c;\n\
    \        $b = $a;\n        $a = $c;\n        $c = $sum;\n        $tri[] = $sum;\n\
    \    }\n    return $tri;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmopc7__f.php:42\n\
    Stack trace:\n#0 /tmp/tmpmopc7__f.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmopc7__f.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  $result = [];\n  for ($i = 1;\
    \ $i <= $n; $i ++) {\n    $result[] = ($i % 2 === 0) ? ($n - ($n / 2) + $i) :\
    \ (($n + 1) - $i - $n);\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 tags=php,algorithm,fibonacci\
    \ |>\n<| a |>\nThe answer provided by is great! \nI made it into a PHP version\
    \ that can be called recursively.\n<code>\nfunction candidate(...$args) {\n  \
    \  return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuvsc19t8.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $fib = [1,3,1];\n    $result\
    \ = [];\n    for($i = 2; $i <= $n; $i++) {\n        array_push($result, $fib[count($fib)-1]\
    \ + $fib[count($fib)-2] + $fib[count($fib)-1]);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsetp3f1.php:30\n\
    Stack trace:\n#0 /tmp/tmphsetp3f1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphsetp3f1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n    $nums = [1,3,2];\n    $nums[] = $nums[] + ($n - 1) * $nums[]\
    \ / ($n - 1);\n    foreach ($nums as $key => $value) {\n        $nums[$key] =\
    \ $nums[$key] + $nums[$key + 1] + $nums[$key + 2];\n    }\n    return $nums;\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use [] for reading in /tmp/tmp1n0tj9gx.php on line\
    \ 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = array();\n    if ($n\
    \ == 0) return $array;\n    $array[] = 1;\n    $array[] = 2;\n    if ($n % 2 ==\
    \ 0) $array[] = ($n / 2) + 1;\n    $n2 = $n - 1;\n    for ($i = 3; $i <= $n2;\
    \ $i += 2) {\n        $array[] = $array[$i - 1] + $array[$i - 2] + $array[$i +\
    \ 1];\n    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zhz71n7.php:35\n\
    Stack trace:\n#0 /tmp/tmp3zhz71n7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3zhz71n7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri_result = array_fill(0,\
    \ $n + 2, 0);\n    $tri_result = array_merge($tri_result, tri($n - 1));\n    $tri_result\
    \ = array_merge($tri_result, tri($n - 2));\n    return $tri_result;\n}\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_fill(): Number of elements can't be negative in /tmp/tmpmcp69xsl.php\
    \ on line 18\n\nWarning: array_fill(): Number of elements can't be negative in\
    \ /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill(): Number of elements\
    \ can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill():\
    \ Number of elements can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\n\
    Warning: array_fill(): Number of elements can't be negative in /tmp/tmpmcp69xsl.php\
    \ on line 18\n\nWarning: array_fill(): Number of elements can't be negative in\
    \ /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill(): Number of elements\
    \ can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill():\
    \ Number of elements can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\n\
    Warning: array_fill(): Number of elements can't be negative in /tmp/tmpmcp69xsl.php\
    \ on line 18\n\nWarning: array_fill(): Number of elements can't be negative in\
    \ /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill(): Number of elements\
    \ can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill():\
    \ Number of elements can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\n\
    Warning: array_fill(): Number of elements can't be negative in /tmp/tmpmcp69xsl.php\
    \ on line 18\n\nWarning: array_fill(): Number of elements can't be negative in\
    \ /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill(): Number of elements\
    \ can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill():\
    \ Number of elements can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\n\
    Warning: array_fill(): Number of elements can't be negative in /tmp/tmpmcp69xsl.php\
    \ on line 18\n\nWarning: array_fill(): Number of elements can't be negative in\
    \ /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill(): Number of elements\
    \ can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\nWarning: array_fill():\
    \ Number of elements can't be negative in /tmp/tmpmcp69xsl.php on line 18\n\n\
    Warning: array_fill(): Number of elements can't be negative in /tmp/tmpmcp69xsl.php\
    \ on line 18\n\nWarning: array_fill(): Number o"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\tlist($first, $second) = array(3,\
    \ 1);\n\twhile($n--) {\n\t\t$first = $second + $first;\n\t\t$second = $first +\
    \ $second;\n\t\t$first = $second + $first;\n\t}\n\treturn $first;\n}\n\n/*\n *\
    \ Sieve of Eratosthenes implementation\n */\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7v9q4zq.php:35\n\
    Stack trace:\n#0 /tmp/tmpo7v9q4zq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo7v9q4zq.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n  if ($n<=1) return [];\n  $a=($n-1)\
    \ / 3;\n  $b=tri($n-2) + $a;\n  return array_merge(array(1, $n-2), $b, array($n+1));\n\
    }\n$test=tri(3);\nforeach ($test as $v) {\n  echo \"$v, \";\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmptf694npg.php:20\n\
    Stack trace:\n#0 /tmp/tmptf694npg.php(23): tri(3)\n#1 {main}\n  thrown in /tmp/tmptf694npg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n==0) return [1];\n   \
    \ if ($n==1) return [2];\n    if ($n==2) return [3,1];\n    return tri(tri(tri(tri($n-1)))+tri(tri($n-2))+tri($n+1));\n\
    }\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpyy91pr0j.php:21\n\
    Stack trace:\n#0 /tmp/tmpyy91pr0j.php(21): tri(Array)\n#1 /tmp/tmpyy91pr0j.php(24):\
    \ tri(3)\n#2 /tmp/tmpyy91pr0j.php(28): candidate(3)\n#3 /tmp/tmpyy91pr0j.php(40):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpyy91pr0j.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$res = [];\n\tfor ($i = 1; $i\
    \ <= $n; $i++) {\n\t\t$sum = ($i + $i) / 2;\n\t\tif ($i % 2 == 0) {\n\t\t\t$sum\
    \ += $i;\n\t\t}\n\t\t$res[] = $sum;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8kzf8wa.php:34\n\
    Stack trace:\n#0 /tmp/tmpo8kzf8wa.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpo8kzf8wa.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = 0;\n    if ($n % 2 ==\
    \ 0) {\n        $sum += $n / 2;\n    }\n    $sum = $sum + $n / 2;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        if ($n % 2 == 0) {\n            $sum += $n;\n\
    \        }\n        $sum = $sum + $n;\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwy6al6ra.php:36\n\
    Stack trace:\n#0 /tmp/tmpwy6al6ra.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpwy6al6ra.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $sum = 0;\n    for($i = 1;$i<=n+1;$i++)\
    \ {\n        $sum = $sum + $i;\n        if($i % 2 == 0) {\n            $sum =\
    \ $sum + $i/2;\n        }\n    }\n    return $sum;\n}\n\n$numbers = [];\nfor ($i\
    \ = 0; $i <= 10; $i++) {\n    $numbers[] = tri($i);\n}\n\n$sum = 0;\nfor ($i =\
    \ 1; $i <= 10; $i++) {\n    $sum += $numbers[$i];\n}\necho $sum;\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpb_ily154.php on line 19\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpb_ily154.php on line 19\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpb_ily154.php on line 19\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpb_ily154.php on line 19\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpb_ily154.php on line 19\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpb_ily154.php on line 19\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpb_ily154.php\
    \ on line 19\n\nWarning: A non-numeric value encountered in /tmp/tmpb_ily154.php\
    \ on line 19\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpb_ily154.php on line 19\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpb_ily154.php on line 19\n\
    \nWarning: Use of undefined constant n - assumed 'n' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmpb_ily154.php on line 19\n\nWarning: A\
    \ non-numeric value encountered in /tmp/tmpb_ily154.php on line 19\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpb_ily154.php on line 19\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpb_ily154.php on line 19\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpb_ily154.php on line 19\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpb_ily154.php on line 19\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpb_ily154.php\
    \ on line 19\n\nWarning: A non-numeric value encountered in /tmp/tmpb_ily154.php\
    \ on line 19\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a fut"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if($n < 2) {\n        return\
    \ [];\n    }\n    $a = [1];\n    $b = [1];\n    $n = $n - 1;\n    for($i=1;$i<$n;$i++)\
    \ {\n        $a[] = array_sum($b);\n        $b[] = $a[$i] + $b[$i] + $a[$i + 1];\n\
    \    }\n    $a[] = $a[$n];\n    $a[] = $a[$n - 1];\n    return $a;\n}\n\n$result\
    \ = tri(15);\n$expected = [\n    1, 3, 2, 8, 5, 10, 13, 20, 22, 34, 55, 89, 144,\
    \ 233, 377, 610, 1383\n];\nassert($result === $expected);\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert($result === $expected) failed in /tmp/tmphojcpllo.php\
    \ on line 37\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphojcpllo.php:43\n\
    Stack trace:\n#0 /tmp/tmphojcpllo.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphojcpllo.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    return array_slice(array_filter(range(1,\
    \ $n+1), 'is_int'), 0, $n+1);\n}\n\n$triangles = tri(3);\nfor ($i = 0; $i < count($triangles);\
    \ ++$i) {\n    echo \"Triangle $i: $triangles[$i] \\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Triangle 0: 1 \nTriangle 1: 2 \nTriangle 2: 3 \nTriangle 3: 4 \n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpyxc5cd5z.php:30\nStack trace:\n\
    #0 /tmp/tmpyxc5cd5z.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyxc5cd5z.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $array = array();\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $array[] = $i;\n    }\n    return $array;\n\
    }\n\n$tri = tri($n);\nprint_r($tri);\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdcf64y_w.php:32\nStack trace:\n#0 /tmp/tmpdcf64y_w.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdcf64y_w.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = array();\n    $result[0]\
    \ = 1;\n    $result[1] = 1 + $n;\n    if ($n % 2) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpzfuze7c2.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 3) {\n        $result = [$n];\n    } else if ($n == 1) {\n        $result =\
    \ [3, 2, 1];\n    } else {\n        $result = [\n            $result[$n - 1] +\
    \ $result[$n - 2],\n            $result[$n - 2] + $result[$n - 1]\n        ];\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a tags=php,fibonacci,math\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpml13aw12.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = [3, 2, 1];\n    $a[1] =\
    \ 3;\n    $a = array_merge($a, array_slice($a, 0, $n));\n    return $a;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for the explanation.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3zy3buye.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <\
    \ 2) {\n        return $result;\n    }\n    $result[] = 1;\n    if ($n % 2 ===\
    \ 0) {\n        $result[] = 2;\n    }\n    array_push($result, tri(floor($n /\
    \ 2) - 1) + tri(floor($n / 2) - 2) + tri(floor($n / 2) + 1));\n    return $result;\n\
    }\nvar_dump(tri(10));\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpuwrtwpn2.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $prev = 0;\n\
    \    $curr = 0;\n    $i = 1;\n    $max = (int) ($n + 1);\n    while ($i <= $max)\
    \ {\n        if ($i % 2 == 0) {\n            $prev = $curr;\n            $curr\
    \ = $prev + $curr;\n        } else {\n            $prev = $curr;\n           \
    \ $curr = $prev - $curr;\n        }\n        $result[] = $curr;\n        $i++;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9t29qlnh.php:42\n\
    Stack trace:\n#0 /tmp/tmp9t29qlnh.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp9t29qlnh.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $d = 1;\n    \n    if ($n >= 3) {\n        $a = 3;\n        $c = 2;\n\
    \        $b = $a + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n       \
    \ $c = $a + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n        $c = $a\
    \ + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n        $c = $a + $c;\n\
    \        $d = $c + $b;\n        $a = $d + $a;\n        $c = $a + $c;\n       \
    \ $d = $c + $b;\n        $a = $d + $a;\n        $c = $a + $c;\n        $d = $c\
    \ + $b;\n        $a = $d + $a;\n        $c = $a + $c;\n        $d = $c + $b;\n\
    \        $a = $d + $a;\n        $c = $a + $c;\n        $d = $c + $b;\n       \
    \ $a = $d + $a;\n        $c = $a + $c;\n        $d = $c + $b;\n        $a = $d\
    \ + $a;\n        $c = $a + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n\
    \        $c = $a + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n       \
    \ $c = $a + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n        $c = $a\
    \ + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n        $c = $a + $c;\n\
    \        $d = $c + $b;\n        $a = $d + $a;\n        $c = $a + $c;\n       \
    \ $d = $c + $b;\n        $a = $d + $a;\n        $c = $a + $c;\n        $d = $c\
    \ + $b;\n        $a = $d + $a;\n        $c = $a + $c;\n        $d = $c + $b;\n\
    \        $a = $d + $a;\n        $c = $a + $c;\n        $d = $c + $b;\n       \
    \ $a = $d + $a;\n        $c = $a + $c;\n        $d = $c + $b;\n        $a = $d\
    \ + $a;\n        $c = $a + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n\
    \        $c = $a + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n       \
    \ $c = $a + $c;\n        $d = $c + $b;\n        $a = $d + $a;\n        $c = $a\
    \ + $c;\n        $d = $c + $b;\n        $a = $\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpztayl5gy.php on line 95\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    // Your code here\n    if ($n\
    \ == 0) return [];\n    $a = [1];\n    if ($n % 2 == 0) {\n        $b = [3, 1];\n\
    \    }\n    else {\n        $b = [1, 3];\n    }\n    $c = $a + $b;\n    foreach\
    \ ($c as $value) {\n        if ($value % 2 == 0) {\n            $d = 3;\n    \
    \    }\n        else {\n            $d = 1;\n        }\n        $c = $c + [($value\
    \ + $d) % $n, $value % $n];\n    }\n    return $c;\n}\n\n$result = tri(20);\n\
    print_r($result);\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpx01qmcs9.php:48\nStack trace:\n#0 /tmp/tmpx01qmcs9.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx01qmcs9.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n\t$arr = array();\n\tif ($n >= 2)\
    \ {\n\t\t$arr[] = 1;\n\t\tif ($n >= 4) {\n\t\t\t$arr[] = 1;\n\t\t\tif ($n >= 6)\
    \ {\n\t\t\t\t$arr[] = 2;\n\t\t\t\t$arr[] = 3;\n\t\t\t\t$arr[] = 6;\n\t\t\t\t$arr[]\
    \ = tri($n - 3);\n\t\t\t} else {\n\t\t\t\t$arr[] = 2;\n\t\t\t\t$arr[] = tri($n\
    \ - 3) + tri($n - 1);\n\t\t\t}\n\t\t} else {\n\t\t\t$arr[] = 1;\n\t\t\t$arr[]\
    \ = tri($n - 1) + tri($n - 2);\n\t\t}\n\t} else {\n\t\t$arr[] = 1;\n\t}\n\treturn\
    \ $arr;\n}\n$result = tri(5);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 2\n    [3] => Array\n\
    \        (\n            [0] => 1\n            [1] => 1\n            [2] => Array\n\
    \                (\n                    [0] => 1\n                )\n\n      \
    \      [3] => Array\n                (\n                    [0] => 1\n       \
    \             [1] => 1\n                    [2] => Array\n                   \
    \     (\n                            [0] => 1\n                            [1]\
    \ => 1\n                            [2] => Array\n                           \
    \     (\n                                    [0] => 1\n                      \
    \          )\n\n                        )\n\n                )\n\n        )\n\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnocx6x4e.php:50\n\
    Stack trace:\n#0 /tmp/tmpnocx6x4e.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpnocx6x4e.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 1)\n        return\
    \ $n;\n    return tri($n - 1) + tri($n - 2) + tri($n + 1);\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = [];\n    for($i = 1;$i <= $n;$i++){\n        $result[] =\
    \ $a;\n        if($i%2 == 0){\n            $a = $b;\n            $b = $c;\n  \
    \          $c = $a + $b;\n        }else{\n            $a = $c;\n            $c\
    \ = $a + $b;\n            $b = $c;\n        }\n    }\n    return $result;\n}\n\
    $tri = tri(20);\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpauyw5fyf.php:42\n\
    Stack trace:\n#0 /tmp/tmpauyw5fyf.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpauyw5fyf.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $fibs = array_fill(0, $n, 0);\n\
    \    array_walk($fibs, function(&$a, $b) { $a += $b = $a + $b; });\n    return\
    \ array_slice($fibs, 1, $n);\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| a |>\n\
    Here is my solution using the PHP library for arbitrary-precision arithmetic:\n\
    <code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph6ui7xpp.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
