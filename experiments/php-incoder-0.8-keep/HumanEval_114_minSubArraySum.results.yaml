name: HumanEval_114_minSubArraySum
language: php
results:
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    $minSum = INF;\n    foreach ($nums as $n) {\n        if\
    \ ($n < 0) {\n            $sum += $n;\n            $minSum = max(0, $sum - $minSum);\n\
    \            continue;\n        }\n        $sum += $n;\n        if ($sum < $minSum)\
    \ {\n            $minSum = $sum;\n        }\n    }\n    return $minSum;\n}\n\n\
    class MinSubArraySum {\n    public function __construct() {\n        $this->sum\
    \ = 0;\n        $this->minSum = INF;\n    }\n\n    public function __destruct()\
    \ {\n    }\n\n    public function run($nums) {\n        foreach ($nums as $n)\
    \ {\n            if ($n < 0) {\n                $this->sum += $n;\n          \
    \      $this->minSum = max(0, $this->sum - $this->minSum);\n                continue;\n\
    \            }\n            $this->sum += $n;\n            if ($this->sum < $this->minSum)\
    \ {\n                $this->minSum = $this->sum;\n            }\n        }\n \
    \       return $this->minSum;\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwbpohsf.php:54\n\
    Stack trace:\n#0 /tmp/tmpxwbpohsf.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpxwbpohsf.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $min = array_shift($nums);\n    foreach ($nums as $n)\
    \ {\n        if ($n < $min) {\n            $min = $n;\n        }\n    }\n    return\
    \ $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqchjbt8z.php:24\n\
    Stack trace:\n#0 /tmp/tmpqchjbt8z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqchjbt8z.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  if (empty($nums)) {\n    return 0;\n  }\n  $min = array_shift($nums);\n\
    \  $sum = 0;\n  foreach ($nums as $num) {\n    $sum += $num;\n    if ($sum < $min)\
    \ {\n      $min = $sum;\n    }\n  }\n  return $min;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyesv8vek.php:26\n\
    Stack trace:\n#0 /tmp/tmpyesv8vek.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyesv8vek.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = min($nums);\n    foreach ($nums as $key => $val) {\n        if\
    \ ($val >= $min) {\n            $min = $val + minSubArraySum(array_slice($nums,\
    \ $key + 1));\n        }\n    }\n    return $min;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmpkjnyb5bo.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkjnyb5bo.php:22\n\
    Stack trace:\n#0 /tmp/tmpkjnyb5bo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkjnyb5bo.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here\n    $min = PHP_INT_MAX;\n    $minSum = 0;\n\
    \    foreach($nums as $num){\n        if($minSum > $num){\n            $min =\
    \ $num;\n            $minSum = $num;\n        }else{\n            $minSum = $minSum\
    \ + $num;\n        }\n    }\n    return $min;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8o9v001q.php:27\n\
    Stack trace:\n#0 /tmp/tmp8o9v001q.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8o9v001q.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $sum = 0;\n  foreach ($nums as $num) {\n    $sum += $num;\n  }\n  $ans\
    \ = $sum;\n  $n = count($nums);\n  for ($i = 0; $i < $n; ++$i) {\n    $sum -=\
    \ $nums[$i];\n    $ans = max($ans, $sum);\n  }\n  return $ans;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8625rb1f.php:25\n\
    Stack trace:\n#0 /tmp/tmp8625rb1f.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8625rb1f.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min_sum = 0;\n    foreach ($nums as $num) {\n        $min_sum += minSubArraySumSub($num);\n\
    \    }\n    return $min_sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function minSubArraySumSub()\
    \ in /tmp/tmpeuzwdd2y.php:10\nStack trace:\n#0 /tmp/tmpeuzwdd2y.php(16): minSubArraySum(Array)\n\
    #1 /tmp/tmpeuzwdd2y.php(20): candidate(Array)\n#2 /tmp/tmpeuzwdd2y.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeuzwdd2y.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = PHP_INT_MIN;\n    foreach ($nums as $key => $num) {\n     \
    \   // Check if the current element exceeds the minimum sum.\n        if ($num\
    \ + $minSum > PHP_INT_MAX) {\n            break;\n        }\n        $minSum =\
    \ max($minSum + $num, $num);\n    }\n    return $minSum;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fqq8xfa.php:23\n\
    Stack trace:\n#0 /tmp/tmp6fqq8xfa.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6fqq8xfa.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // code here\n    $sum = 0;\n    foreach($nums as $key => $num) {\n \
    \       if(!isset($sum)) {\n            $sum = $num;\n        } else if($sum +\
    \ $num < 0){\n            $sum = $num;\n        }\n    }\n    return $sum;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not correct, consider this input\
    \ array: `$nums = array(4, 2, -2, -4);`. Your function will return `0` instead\
    \ of `4`.\n<|/ c |>\n<| c |>\nGood catch, thanks.\n<|/ c |>\n<| c |>\nWhy you\
    \ used $key => $num at the foreach loop? Is it necessary?\n<|/ c |>\n<| c |>\n\
    Yes, it is necessary to loop through all elements of the array. I added the comment\
    \ for clarity. If you're just learning PHP, I recommend learning by example. Also,\
    \ if you are looking for other ways to solve the problem, check out [this answer](https://stackoverflow.com/a/44539706/4352515)\n\
    <|/ c |>\n<| c |>\nThis answer is not correct. Consider: `$nums = array(4, 2,\
    \ -2, -4);`.\n<|/ c |>\n<| a tags=php |>\nYou can use array_reduce:\n<code>\n\
    $result = array_reduce($nums, function($c, $v) { return $v >= $c ? $v : $c; });\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not correct. Consider: `$nums = array(4,\
    \ 2, -2, -4);`.\n<|/ c |>\n<| a tags=php |>\nThe accepted answer is the best.\
    \ But you can also use min() with array_reduce.\n<code>\n$result = array_reduce($nums,\
    \ function($c, $v) { return min($v, $c); });\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis is not correct. Consider: `$nums = array(4, 2, -2, -4);`.\n<|/ c |>\n\
    <| a dscore=0 tags=php |>\nOne of the easiest ways to solve the problem is to\
    \ find the minimum value of an array using array_reduce():\n<code>\n<?php\n  \
    \  $array = array(\n        1 => 2,\n        3 => 4,\n        5 => 6,\n      \
    \  7 => 8,\n        9 => 0\n    );\n\n    $result = array_reduce($array, function($a,\
    \ $v){\n        return ($v < $a) ? $v : $a;\n    });\n\n    var_dump($result);\n\
    \nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !==\
    \ -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2skrp7jd.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $n) {\n        if ($n < $min)\
    \ {\n            $min = $n;\n        }\n    }\n    return $min;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpau62gbf9.php:23\n\
    Stack trace:\n#0 /tmp/tmpau62gbf9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpau62gbf9.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums)) {\n        return 0;\n    }\n    $min_sum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < count($nums); $i++) {\n        for ($j = max(1, $i - (PHP_INT_MAX\
    \ + 1) / 2);\n             $j < $i + PHP_INT_MAX / 2;\n             $j++) {\n\
    \            $sum = $nums[$i] + $nums[$j];\n            if ($sum < $min_sum) {\n\
    \                $min_sum = $sum;\n            }\n        }\n    }\n    return\
    \ $min_sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nTry this code:\n\
    <code>\n<?php\n\n$array = [1, 4, 10, 2, 3];\n\n$sum = 0;\n$min_value = $array[0];\n\
    $min_value_index = 0;\n\nforeach ($array as $key => $value) {\n    if ($value\
    \ < $min_value) {\n        $min_value = $value;\n        $min_value_index = $key;\n\
    \    }\n\n    $sum = $sum + $value;\n}\n\nvar_dump($min_value_index, $min_value,\
    \ $sum);\n</code>\n<|/ a tags=arrays,php,sum |>\n<| a dscore=1 tags=arrays,php,sum\
    \ |>\ntry this\n<code>\n<?php\n$nums=array(1,4,10,2,3);\n$sum=0;\nfor($i=0;$i<sizeof($nums);$i++)\n\
    {\n if($nums[$i]>$sum)\n  {\n    $sum=$nums[$i];\n    $min=$i;\n  }\n\n  if($nums[$i]==$sum)\n\
    \  {\n   $sum=$nums[$i]+$sum;\n  }\n}\necho \"min num=\".$nums[$min];\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbhh4angf.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // The key here is to use $nums[$n] to store the sum of the nth number\
    \ in the array\n    $sums = array_fill(0, count($nums), '0');\n    $min = $sums[0];\n\
    \    foreach ($nums as $n) {\n        $min = $nums[$n] < $min ? $nums[$n] : $min;\n\
    \        $sums[$n] = $sums[$n] + $n;\n    }\n    return $min;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbkpala8.php:23\n\
    Stack trace:\n#0 /tmp/tmpjbkpala8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjbkpala8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n\n    $min_sum = 0;\n    $last_index = -1;\n    $cur_sum\
    \ = 0;\n\n    for ($i = 0; $i < count($nums); $i++) {\n        if ($nums[$i] ==\
    \ $last_index) {\n            $cur_sum = $nums[$i];\n        } else {\n      \
    \      $cur_sum += $nums[$i];\n            if ($cur_sum < $min_sum) {\n      \
    \          $min_sum = $cur_sum;\n                $last_index = $nums[$i];\n  \
    \          }\n        }\n    }\n    return $min_sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnohm_7j.php:33\n\
    Stack trace:\n#0 /tmp/tmplnohm_7j.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplnohm_7j.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    $min = 0;\n    for ($i = 0; $i < count($nums); $i++) {\n\
    \        $sum += $nums[$i];\n        if ($sum < $min) {\n            $min = $sum;\n\
    \        }\n    }\n    return $min;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcsnt1urs.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  ksort($nums);\n  $m = $nums[0]; // The minimum value.\n  foreach ($nums\
    \ as $n) {\n    $m = max($m, $n + $m);\n  }\n  return $m;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05fony8g.php:21\n\
    Stack trace:\n#0 /tmp/tmp05fony8g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp05fony8g.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = PHP_INT_MAX;\n    foreach($nums as $num) {\n        $minSum\
    \ = min($minSum, sum($num));\n    }\n    return $minSum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nCan you please explain the solution ?\n<|/ c |>\n<| c |>\nIt takes each\
    \ sub array of numbers (nums) as argument, loops over each element and finds the\
    \ sum, then takes min of sums. I suppose it works as per definition of min :)\n\
    <|/ c |>\n<| c |>\nNo, that's not a solution. It's a nice way to say \"it looks\
    \ like you're learning to code, but can you explain it better?\" :)\n<|/ c |>\n\
    <| c |>\nIt's O(n) solution. I wanted to find it on O(1) because that would mean\
    \ I wouldn't need to keep 2 arrays in memory (one with the sum values and one\
    \ with the min values). And the most important thing about it is that it works\
    \ with arrays of any length, not just for positive integers.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've added the explanation now.\n<|/ c |>\n<| a dscore=1\
    \ tags=php,algorithm |>\nIt would seem that this is one of the problems where\
    \ you should be using O(n), not O(1), because your current solution is O(n^2).\n\
    I believe the following is closer to what you want:\n<code>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpboc4sst8.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    sort($nums);\n    $sum = 0;\n    $start = 0;\n\
    \    $end = 0;\n    $i = 1;\n    foreach ($nums as $item) {\n        if ($item\
    \ == 0) {\n            $sum += $nums[$start];\n            $start = $i;\n    \
    \    }\n        $i++;\n    }\n    if ($start == $end) {\n        $sum += $nums[$start];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaeempa6k.php:33\n\
    Stack trace:\n#0 /tmp/tmpaeempa6k.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpaeempa6k.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    $size = count($nums);\n    for($i = 0; $i < $size; $i++)\
    \ {\n        if($nums[$i] > 0) {\n            $sum += $nums[$i];\n        } else\
    \ {\n            $sum -= $nums[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrga552m.php:25\n\
    Stack trace:\n#0 /tmp/tmpkrga552m.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkrga552m.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $min = PHP_INT_MAX;\n  foreach ($nums as $key => $num) {\n    if ($num\
    \ < $min) {\n      $min = $num;\n    }\n  }\n  return $min;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl76fz98y.php:23\n\
    Stack trace:\n#0 /tmp/tmpl76fz98y.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpl76fz98y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $numsArray = array_map('intval', $nums);\n    $minSum = PHP_INT_MIN;\n\
    \    foreach($numsArray as $n) {\n        if ($n > 0) {\n            $currentMinSum\
    \ = minSubArraySum($numsArray);\n            if ($n < $currentMinSum) {\n    \
    \            $minSum = $currentMinSum;\n            }\n        }\n    }\n    return\
    \ $minSum;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI know that this is an old\
    \ question but I needed a solution that was O(n) and was also very similar to\
    \ the O(n^2) solutions.\nThe two key points are:\n\nThe original question was\
    \ to find the minimum sum of any non-negative integer in a sub-array of size n.\n\
    The original problem statement was to find the minimum of every sub-array of size\
    \ n.\n\nThe O(n) solution would need to find the minimum sum in each sub-array.\
    \ This is done by sorting the sub-arrays in O(n*lg(n)) time. Sorting itself is\
    \ O(n lg(n)) time and can be done in O(n) time.\nThen for each non-negative integer\
    \ in the original array, we can find the minimum sum in every sub array in O(n).\n\
    The O(n) solution would look something like this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_tbdhedq.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    return array_sum($nums);\n}\n$result = minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]);\necho \"The minimum sum is: \" . $result;\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The minimum sum is: 16\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpw_4b5qd_.php:18\nStack trace:\n#0 /tmp/tmpw_4b5qd_.php(32): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw_4b5qd_.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    $min = min($min, array_sum(array_filter($nums,\
    \ function($v){return $v>0;})));\n    foreach($nums as $key=>$val){\n        if($val<0){\n\
    \            $val*=-1;\n            $min*=-1;\n        }\n        $min+=$val;\n\
    \    }\n    return $min;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3zurm12.php:24\n\
    Stack trace:\n#0 /tmp/tmp_3zurm12.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_3zurm12.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $res = $nums[0];\n    for ($i = 1; $i < count($nums);\
    \ $i++) {\n        $res = max($res, $nums[$i] + $nums[$i - 1]);\n    }\n    return\
    \ $res;\n}\n</code>\n<|/ a dscore=2 tags=php,arrays,algorithm |>\n<| c |>\nGreat\
    \ answer! This is very similar to what I had in mind but I wasn't sure if there\
    \ was a better way using more of an algorithmic approach to it. Thanks again :)\n\
    <|/ c |>\n<| c |>\nYou're welcome! I find this way more elegant, even though it\
    \ is not quite as efficient as it could be.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\
    \n$nums = array(7,4,2,5,7,7,4);\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpableyz7l.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach($nums as $item) {\n        if($item > 0)\n   \
    \         $sum += $item;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pss18g7.php:21\n\
    Stack trace:\n#0 /tmp/tmp7pss18g7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7pss18g7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return array_reduce($nums, function($carry, $i) {\n        return min($carry,\
    \ $i + $carry);\n    });\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb79vrvyo.php:18\n\
    Stack trace:\n#0 /tmp/tmpb79vrvyo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb79vrvyo.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums)) {\n        return 0;\n    }\n\n    // Sort the array\
    \ to find the minimum sum of all subarrays\n    $nums = array_reverse($nums);\n\
    \    $nums = array_merge($nums, $nums);\n\n    $lowest_sum = -PHP_INT_MAX;\n \
    \   $i = count($nums) - 1;\n    for ($i = 0; $i >= 0; $i--) {\n        $lowest_sum\
    \ -= $nums[$i];\n        if ($lowest_sum < 0) {\n            $lowest_sum = 0;\n\
    \        }\n        $lowest_sum += $nums[$i];\n    }\n    return $lowest_sum;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=php |>\nUsing array_sum() to find the\
    \ sum of the array and array_diff() to find the subarray.\n<code>\n<?php\n$nums\
    \ = [1, 2, 3, 4, 6, 8];\n$sumOfArray = array_sum($nums);\n$diffOfArray = array_diff($nums,\
    \ $sumOfArray);\n$minimumSum = array_sum($diffOfArray);\n\necho $minimumSum;\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer is correct but misleading. The\
    \ minimum sum of an array is always 0. You need to use `array_sum(array_diff($array,\
    \ 0))` to get the minimum sum of the array.\n<|/ c |>\n<| c |>\nYou don't need\
    \ the `array_diff` - simply do `array_sum($nums)`\n<|/ c |>\n<| a tags=php dscore=2\
    \ |>\nHere is a recursive PHP function which can find the min value from a given\
    \ array - \n<code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp85vbejy_.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $min = array_shift($nums);\n    foreach($nums as $num)\
    \ {\n        if($min > $num + $nums) {\n            $min = $num + $nums;\n   \
    \     }\n    }\n    return $min;\n}\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpesw7bn6m.php:11\n\
    Stack trace:\n#0 /tmp/tmpesw7bn6m.php(18): minSubArraySum(Array)\n#1 /tmp/tmpesw7bn6m.php(22):\
    \ candidate(Array)\n#2 /tmp/tmpesw7bn6m.php(36): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpesw7bn6m.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum += $num;\n   \
    \ }\n    $min = -1;\n    $currentSum = 0;\n    foreach ($nums as $num) {\n   \
    \     if ($num != $currentSum) {\n            $currentSum = $sum;\n          \
    \  $min = $num;\n        }\n        $currentSum += $num;\n    }\n    return $min;\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7a7l6c2.php:29\n\
    Stack trace:\n#0 /tmp/tmpi7a7l6c2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpi7a7l6c2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSubArray = array();\n    foreach ($nums as $k => $num) {\n      \
    \  foreach ($minSubArray as $i => $min) {\n            if ($k > $i + $min) {\n\
    \                array_push($minSubArray, $min);\n                array_push($minSubArray,\
    \ $num);\n                $minSubArray[$i + $min] = $min;\n                break;\n\
    \            }\n        }\n    }\n    return min(array_sum($minSubArray));\n}\n\
    </code>\n<|/ a dscore=3 tags=php,arrays |>\n<| c |>\nThis is a really great solution!\
    \ I love how it does all that in one place. Also, good job on the reminder about\
    \ how to solve this with only looping through two elements of the array. Thank\
    \ you for your help!\n<|/ c |>\n<| c |>\nNice, and a great solution\n<|/ c |>\n\
    <| c |>\nGreat answer! I just changed `minSubArraySum` to `minSubArraySum2` because\
    \ I was getting a divide by zero error.\n<|/ c |>\n<| a tags=php,arrays |>\nOkay,\
    \ this took me awhile to figure out. I think I have a better solution (I still\
    \ have a long way to go in terms of PHP). But, here's my solution anyways. It\
    \ uses only array_filter and array_map functions. I believe it's still the most\
    \ efficient way of solving the problem. I ran some benchmarks (See below).\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7twpjn70.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0; // initialize the sum\n    foreach ($nums as $num) { // loop\
    \ through each element in the array\n        $sum += $num; // add the number to\
    \ the sum\n    }\n    return $sum; // return the sum\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylpz_hn2.php:20\n\
    Stack trace:\n#0 /tmp/tmpylpz_hn2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpylpz_hn2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minimum = -PHP_INT_MAX;\n    $sum = 0;\n    foreach ($nums as $num)\
    \ {\n        $sum += $num;\n        if ($sum < $minimum) {\n            $minimum\
    \ = $sum;\n        }\n    }\n    return $minimum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn42g_4zb.php:24\n\
    Stack trace:\n#0 /tmp/tmpn42g_4zb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn42g_4zb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return minSubArraySumRecursive($nums, 0, count($nums) - 1, 0);\n}\n\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function minSubArraySumRecursive()\
    \ in /tmp/tmp6doon7po.php:8\nStack trace:\n#0 /tmp/tmp6doon7po.php(12): minSubArraySum(Array)\n\
    #1 /tmp/tmp6doon7po.php(16): candidate(Array)\n#2 /tmp/tmp6doon7po.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6doon7po.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n\tsort($nums);\n\treturn $nums[0];\n}\n\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5e1_14ex.php:18\n\
    Stack trace:\n#0 /tmp/tmp5e1_14ex.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5e1_14ex.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    $max = PHP_INT_MAX;\n    foreach ($nums as $key => $value)\
    \ {\n        if ($value < $min) {\n            $min = $value;\n        } elseif\
    \ ($value > $max) {\n            $max = $value;\n        }\n    }\n    if ($min\
    \ >= $max) {\n        return $min;\n    } else {\n        return $max + minSubArraySum($nums);\n\
    \    }\n}\n</code>\n<|/ a tags=sum,arrays,php |>\n<| c |>\nI dont think it is\
    \ correct, please try with numbers like `minSubArraySum([2, 3, 4, 1, 1])`\n<|/\
    \ c |>\n<| c |>\nYes i tried it and it didn't work it gives you `1` while it should\
    \ give `-6` this was my test case:\n`minSubArraySum([2, 3, 4, 1, 2, 4])`\n<|/\
    \ c |>\n<| c |>\nYou dont need to do minSubArraySum([-1]) in this case\n<|/ c\
    \ |>\n<| c |>\n: Why do you think this gives `-6`? From the example, it seems\
    \ the expected result is `1`.\n<|/ c |>\n<| c |>\nBecause the sub-array `[2,3]`\
    \ is `[2,4,1]`, which means `4` is in the first part of `[2,3,4,1,1]` the other\
    \ part is `[1,2,4]` which gives `1`\n<|/ c |>\n<| a tags=sum,arrays,php dscore=4\
    \ |>\nThis was my solution\n<code>\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ssv2b0g.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return minSubArray($nums, 0, count($nums)-1, 0);\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function minSubArray()\
    \ in /tmp/tmpcssa30c0.php:8\nStack trace:\n#0 /tmp/tmpcssa30c0.php(11): minSubArraySum(Array)\n\
    #1 /tmp/tmpcssa30c0.php(15): candidate(Array)\n#2 /tmp/tmpcssa30c0.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcssa30c0.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MIN;\n    foreach ($nums as $n) {\n        $min = $min\
    \ > $n ? $min : $n;\n    }\n    return $min;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7ntdsl9.php:20\n\
    Stack trace:\n#0 /tmp/tmpk7ntdsl9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpk7ntdsl9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = null;\n    foreach ($nums as $i => $num) {\n        if (null ==\
    \ $min || $num > $min) {\n            $min = $num;\n        }\n    }\n    return\
    \ $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9puz3rjr.php:22\n\
    Stack trace:\n#0 /tmp/tmp9puz3rjr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9puz3rjr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (count($nums) === 0) {\n        return 0;\n    }\n    $min = 0;\n\
    \    foreach ($nums as $num) {\n        $min = min($min + $num, $num);\n    }\n\
    \    return $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuor1awba.php:23\n\
    Stack trace:\n#0 /tmp/tmpuor1awba.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpuor1awba.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    $result = -1;\n    foreach ($nums as $key => $value) {\n\
    \        $sum += $value;\n        if ($sum > $result) {\n            $result =\
    \ $sum;\n            $result = $key + 1;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfg3mmz09.php:25\n\
    Stack trace:\n#0 /tmp/tmpfg3mmz09.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfg3mmz09.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $total = 0;\n    foreach ($nums as $n) {\n        $total += $n;\n   \
    \     if ($total < 0)\n            $total = 0;\n    }\n\n    return $total;\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnswyhhmb.php:23\n\
    Stack trace:\n#0 /tmp/tmpnswyhhmb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnswyhhmb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min_sum = PHP_INT_MAX;\n    foreach ($nums as $num => $subnum) {\n \
    \       $min_sum = min($min_sum, $num + minSubArraySum($subnums));\n    }\n  \
    \  return $min_sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmprq2feqz5.php\
    \ on line 9\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmprq2feqz5.php\
    \ on line 9\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmprq2feqz5.php\
    \ on line 9\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmprq2feqz5.php\
    \ on line 9\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmprq2feqz5.php\
    \ on line 9\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmprq2feqz5.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprq2feqz5.php:20\n\
    Stack trace:\n#0 /tmp/tmprq2feqz5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprq2feqz5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n\tsort($nums);\n\t\n\tfor ($i = 0; $i < count($nums); $i++) {\n\t\t$j = 0;\n\
    \t\t$current = $nums[$i];\n\t\tfor ($j; $j < count($nums); $j++) {\n\t\t\tif ($nums[$j]\
    \ > $current) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$nums[$j] = $current;\n\t\
    }\n\t\n\t$total = 0;\n\tforeach ($nums as $num => $sum) {\n\t\t$total += $sum;\n\
    \t}\n\treturn $total;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // write your code in PHP7.0\n    $total = 0;\n    foreach ($nums as\
    \ $num) {\n        $total = $total + $num;\n    }\n    return $total;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxv3p65hc.php:21\n\
    Stack trace:\n#0 /tmp/tmpxv3p65hc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxv3p65hc.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // write your code in PHP7.0\n}\n</code>\nSolution 3:\n<code>\n<?php\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpesxc4dvq.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (count($nums) === 0) {\n        return null;\n    }\n\n    $min_subarray_sum\
    \ = null;\n    $min_subarray_size = null;\n\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        $cur_sum = 0;\n        $cur_element = $nums[$i];\n\n      \
    \  for ($j = $i + 1; $j < count($nums); $j++) {\n            $cur_sum = $cur_sum\
    \ + $nums[$j];\n\n            if ($cur_sum < $min_subarray_sum) {\n          \
    \      $min_subarray_sum = $cur_sum;\n                $min_subarray_size = $j\
    \ - $i + 1;\n            }\n        }\n    }\n\n    return $min_subarray_sum;\n\
    }\n\n$minSum = minSubArraySum([1, 2, 3, 4]);\n\nvar_dump($minSum);\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6ufc38y.php:40\n\
    Stack trace:\n#0 /tmp/tmpx6ufc38y.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpx6ufc38y.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here\n    $min = PHP_INT_MIN;\n    foreach($nums as\
    \ $num){\n        if($num < 0){\n            echo $num;\n        }else{\n    \
    \        $sum = $min + $num;\n            $min = min($sum, $min);\n        }\n\
    \    }\n    return $min;\n}\n</code>\n<|/ a dscore=1 tags=sorting,php,arrays |>\n\
    <| c |>\nThank you for the help :D I've been working on it and I realized it was\
    \ an easy fix.\n<|/ c |>\n<| a |>\nYou can do this with a single function using\
    \ PHP's min function:\n<code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw66ftgi4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $result = -9999;\n\n    foreach ($nums as $value) {\n        if ($result\
    \ > $value) {\n            $result = $value;\n        }\n    }\n\n    return $result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI have tried your solution, but it does\
    \ not give correct result for input `[1,2,0]`. Your output should be 2 but your\
    \ code returns 3 which is incorrect.\n<|/ c |>\n<| c |>\nOh sorry, my bad, it\
    \ was a typo. I thought you wanted to return 0 instead of 1. Fixed now.\n<|/ c\
    \ |>\n<| c |>\nIt's correct now, thank you. I was thinking about my own solution\
    \ of iterating over an array but your solution is much simpler and faster. Thank\
    \ you very much! :)\n<|/ c |>\n<| a |>\nAnother recursive solution, with one less\
    \ loop. The base case is when the sum is zero, at which point we return that value,\
    \ and the recursion continues.\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe254jqxh.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum\
    \ += $num;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d05r36p.php:21\n\
    Stack trace:\n#0 /tmp/tmp_d05r36p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_d05r36p.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $total = 0;\n    foreach ($nums as $value) {\n        $total += $value;\n\
    \    }\n    return $total;\n}\n\n$nums = [1, -1, 1, -3, -3, 2, 5, -1, 0, -7, 2,\
    \ -4, 2];\n$result = minSubArraySum($nums);\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf7b6w0c.php:22\n\
    Stack trace:\n#0 /tmp/tmpgf7b6w0c.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgf7b6w0c.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $sum = $nums[0];\n    for ($i = 1; $i < count($nums);\
    \ $i++) {\n        $sum += $nums[$i];\n    }\n\n    return $sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nSolution\n<code>\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpabjwvrnu.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    $max = 0;\n    foreach ($nums as $i => $num) {\n     \
    \   $min += $num;\n        $max = max($max, $num);\n    }\n\n    return $max -\
    \ $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdff0uzx.php:23\n\
    Stack trace:\n#0 /tmp/tmpfdff0uzx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfdff0uzx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums)) {\n        return 0;\n    }\n    $min = PHP_INT_MAX;\n\
    \    $sum = 0;\n    foreach ($nums as $n) {\n        if ($sum > 0) {\n       \
    \     $sum -= $n;\n            $min = min($min, $sum);\n        }\n        $sum\
    \ += $n;\n    }\n    return $min;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7huc3k1a.php:28\n\
    Stack trace:\n#0 /tmp/tmp7huc3k1a.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7huc3k1a.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n\n    $arrLength = count($nums);\n    for($i = 0; $i < $arrLength;\
    \ $i++) {\n        if($nums[$i] > 0) {\n            $sum += $nums[$i];\n     \
    \       $nums[$i] = $nums[$i] - 1;\n        }\n    }\n\n    return $sum;\n}\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9znzmcju.php:25\n\
    Stack trace:\n#0 /tmp/tmp9znzmcju.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9znzmcju.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return min($nums, fn(array $num) {\n        if ($num < 0)\n         \
    \   return null;\n        return array_reduce($nums, fn($sum, $x) use ($num) {\
    \ return $sum + $x; });\n    });\n}\n\n$minSubArraySum = minSubArraySum([2, 3,\
    \ 4, 1, 2, 4]);\n$minSubArraySum = minSubArraySum([-1, -2, -3]);\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq9kg0mxa.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums)) {\n        return 0;\n    }\n    $total = 0; // Initialize\
    \ the current sum to 0.\n    $max_sum = abs(min($nums)); // Initialize the current\
    \ max sum to 'min'.\n    $min_sum = max(-min($nums)); // Initialize the current\
    \ min sum to 'max'.\n    foreach ($nums as $num) {\n        // If current sum\
    \ is bigger than the max sum, update max sum.\n        if ($total + $num >= $max_sum)\
    \ {\n            $max_sum = $total + $num;\n        }\n        // If current sum\
    \ is smaller than the min sum, update min sum.\n        if ($total + $num < $min_sum)\
    \ {\n            $min_sum = $total + $num;\n        }\n        // Update the current\
    \ sum.\n        $total += $num;\n    }\n    // Return the max sum.\n    return\
    \ $max_sum;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp2s0sfik3.php on line 13\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp2s0sfik3.php:34\nStack trace:\n#0 /tmp/tmp2s0sfik3.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2s0sfik3.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = array_reduce($nums, function ($min, $num) {\n        return ($min\
    \ === null ? $num : $min) + $num;\n    }, null);\n    \n    $min = null;\n   \
    \ foreach ($nums as $num) {\n        $result = array_reduce($nums, function ($min2,\
    \ $num2) {\n            return ($min2 === null ? $num2 + $num : $min2) + $num2;\n\
    \        }, $min);\n        \n        if ($result < $min) {\n            $min\
    \ = $result;\n        }\n    }\n    \n    return $min;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI love it! I added a recursive solution that finds minimum in array\
    \ with multiple non-overlapping subarrays.\n<|/ c |>\n<| c |>\nNice answer, but\
    \ it doesn't seem to find the minimum in an array. It also doesn't work if the\
    \ array contains negative integers: http://codepad.org/aTpYk9wP\n<|/ c |>\n<|\
    \ c |>\nThis solution didn't work for me on PHP 5.6, but this answer did: http://stackoverflow.com/a/16663854/321887\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work for me on PHP 5.6. But this answer\
    \ does: http://stackoverflow.com/a/16663854/321887\n<|/ c |>\n<| c |>\nI believe\
    \ it only works on PHP versions that support `use` keyword. Is that true? Am I\
    \ wrong?\n<|/ c |>\n<| a dscore=5 tags=php,algorithm,arrays |>\nYou can use the\
    \ standard array_reduce function: http://php.net/manual/en/function.array-reduce.php\n\
    <code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphe7d6q6l.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = INF;\n    foreach ($nums as $item) {\n        if ($item > $min)\
    \ {\n            $min = $item;\n        }\n    }\n    $min = INF;\n    $sum =\
    \ 0;\n    foreach ($nums as $item) {\n        if ($item > $min) {\n          \
    \  $sum -= $min + $item;\n            $min = $item;\n        }\n        $sum +=\
    \ $item;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxipoaus.php:31\n\
    Stack trace:\n#0 /tmp/tmpqxipoaus.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqxipoaus.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    foreach ($nums as $num) {\n        $min += $num;\n   \
    \ }\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum += $num;\n   \
    \     if ($sum >= $min) {\n            return $min;\n        }\n    }\n    return\
    \ $min;\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays dscore=2 |>\nI love the other\
    \ answers, but this is what I would do in JavaScript\n<code>\nvar a = [2, 3, 4,\
    \ 1, 2, 4];\nvar sum = 0;\nvar min = Infinity;\nfor(var i = 0; i < a.length; i++)\
    \ {\n    if(sum < a[i])\n        sum = a[i];\n    if(sum >= a[i])\n        min\
    \ = Math.min(sum, min);\n}\nalert(min);\n</code>\n<|/ a |>\n<| c |>\nThis is not\
    \ guaranteed to give the minimum sum.  If you add the number 6 to your list, the\
    \ minimum sum would be 6.\n<|/ c |>\n<| a tags=php,arrays |>\nIn java this should\
    \ work:\n<code>\npublic int minimumSumOfArray(int array[]) {\n    int sum = 0;\n\
    \    int min = Integer.MAX_VALUE;\n    for (int i = 0; i < array.length; i++)\
    \ {\n        sum = sum + array[i];\n        if (sum < min) {\n            min\
    \ = sum;\n        }\n    }\n    return min;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\nPHP Code: \n<code>\n<?php\n$arr = array(1,2,3,4,5,6);\n$min = array_reduce($arr,\
    \ \"min\");\necho $min;\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7vv1ysqc.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $min = $nums[0];\n  $minSoFar = $min;\n  $maxSoFar = -PHP_INT_MAX;\n\n\
    \  for ($i = 1; $i < count($nums); $i++) {\n    $newSoFar = $nums[$i] + $minSoFar;\n\
    \    $maxSoFar = max($newSoFar, $maxSoFar);\n    $minSoFar = min($newSoFar, $minSoFar);\n\
    \  }\n\n  return $minSoFar;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9oq6j31.php:25\n\
    Stack trace:\n#0 /tmp/tmpk9oq6j31.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpk9oq6j31.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = $nums[0];\n    for ($i = 1; $i < count($nums); $i++) {\n     \
    \   if ($nums[$i] + $sum < 0) {\n            $sum = 0;\n        } else if ($sum\
    \ < 0) {\n            $sum = -$nums[$i];\n        } else {\n            $sum +=\
    \ $nums[$i];\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4a87mqew.php:25\n\
    Stack trace:\n#0 /tmp/tmp4a87mqew.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4a87mqew.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $sum = 0;\n  foreach ($nums as $num) {\n    $sum += $num;\n  }\n\n  return\
    \ min($sum, $nums[count($nums) - 1]);\n}\n\nfunction candidate(...$args) {\n \
    \   return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9y5ybvli.php:21\n\
    Stack trace:\n#0 /tmp/tmp9y5ybvli.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9y5ybvli.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $sum = 0;\n    $min_sum = 0;\n\n    foreach ($nums\
    \ as $key => $val) {\n        if ($val != 0) {\n            $sum += $val;\n  \
    \          if ($sum < $min_sum) {\n                $min_sum = $sum;\n        \
    \    }\n        }\n    }\n    return $min_sum;\n}\n</code>\nI tested it with this\
    \ array and found that it was correct and fast:\n<code>\n$array = array(1, 3,\
    \ 6, 8, 9);\n$time = microtime(true);\nminSubArraySum($array);\n$time = microtime(true)\
    \ - $time;\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvxojqlf1.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $n) {\n        $sum += $n;\n    }\n\
    \    return $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u3z9yto.php:20\n\
    Stack trace:\n#0 /tmp/tmp4u3z9yto.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4u3z9yto.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = PHP_INT_MAX;\n    foreach ($nums as $n => $n) {\n        if\
    \ ($minSum < $n) {\n            $minSum = $n;\n        }\n    }\n\n    return\
    \ $minSum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_agcvq9.php:23\n\
    Stack trace:\n#0 /tmp/tmp7_agcvq9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7_agcvq9.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $max = max($nums);\n  $min = min($nums);\n  $sum = 0;\n  foreach ($nums\
    \ as $num) {\n    $sum += $num;\n    if ($sum > $max) {\n      return $max;\n\
    \    }\n  }\n  return $min;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4je1m0sl.php:24\n\
    Stack trace:\n#0 /tmp/tmp4je1m0sl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4je1m0sl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    $i = 0;\n    while(isset($nums[$i])){\n        $sum +=\
    \ $nums[$i];\n        $i++;\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7b8v_lk.php:21\n\
    Stack trace:\n#0 /tmp/tmpx7b8v_lk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpx7b8v_lk.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    for ($i = 0; $i < count($nums); $i++) {\n        $sum\
    \ += array_sum(array_slice($nums, $i, $i + 1));\n    }\n    return $sum;\n}\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm8vt7jp.php:19\n\
    Stack trace:\n#0 /tmp/tmpwm8vt7jp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwm8vt7jp.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $totalMin = PHP_INT_MAX;\n    $sum = 0;\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        $sum += $nums[$i];\n        $tempMin = $sum - $totalMin;\n\
    \        if ($tempMin < $totalMin) {\n            $totalMin = $tempMin;\n    \
    \    }\n    }\n    return $totalMin;\n}\n\nfunction candidate(...$args) {\n  \
    \  return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqab41f05.php:25\n\
    Stack trace:\n#0 /tmp/tmpqab41f05.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqab41f05.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min_sum = 0;\n    $nums = array_reverse($nums);\n    foreach($nums as\
    \ $key => $num) {\n        if($num > 0) {\n            if($min_sum == $num) {\n\
    \                $min_sum -= $nums[$key];\n            } else {\n            \
    \    $min_sum = $num;\n            }\n        }\n    }\n    return $min_sum;\n\
    }\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !==\
    \ -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6th11_sk.php:26\n\
    Stack trace:\n#0 /tmp/tmp6th11_sk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6th11_sk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = -1;\n    $n = count($nums);\n    for($i = 0; $i < $n; ++$i) {\n\
    \        $j = $i + 1;\n        $min = $min < $nums[$i] ? $min : $nums[$i];\n \
    \       while($j < $n) {\n            if($nums[$j] >= $min) {\n              \
    \  $min = $nums[$j];\n            } else {\n                break;\n         \
    \   }\n            $j++;\n        }\n    }\n    return $min;\n}\n</code>\n<|/\
    \ a tags=php,algorithm,arrays,sorting |>\n<| c |>\nI think this is a great solution!\n\
    <|/ c |>\n<| c |>\nThe best answer imo!\n<|/ c |>\n<| a tags=php,algorithm,arrays,sorting\
    \ |>\nIt seems that you want the lowest sum, meaning, you want the minimum total\
    \ sum from the array. So how about just finding the total sum of the array? You\
    \ can do this with array_sum. Then, you subtract the sum of the last two numbers\
    \ from the total sum and you should be done.\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ this method. But, is there a way to find the minimum sum without looping through\
    \ the array? It seems like it should be possible to do with less code but I cant\
    \ get my head around it at the moment\n<|/ c |>\n<| c |>\nNo, because there is\
    \ no \"current sum\" variable that you can just subtract from the total sum. No\
    \ matter how many iterations you do, you'll just end up with the original array.\n\
    <|/ c |>\n<| c |>\nSo just to clarify, the only way to do this is to loop through\
    \ the array and compare the results from looping through the array and looping\
    \ through the array again until the sum is equal to the first element, then stop?\n\
    <|/ c |>\n<| c |>\nThe sum is just the sum from the first two elements.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nHere is my solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_bhjuu1s.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $currentSum = 0;\n  $minSum = -99999999;\n  foreach ($nums as $num) {\n\
    \    $currentSum += $num;\n    if ($currentSum < $minSum) {\n      $minSum = $currentSum;\n\
    \    }\n  }\n  return $minSum;\n}\n</code>\nAnd here are my results, on my machine:\n\
    <code>\n> php -f minSubArraySum.php \n4\n4\n2\n4\n4\n1\n1\n3\n4\n4\n-6\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI'm sorry I was not clear enough, I edited my original\
    \ post to make it clearer. Thank you for your help though.\n<|/ c |>\n<| c |>\n\
    - Your first edit was still not clear. You said \"find the minimum sum of any\
    \ non-empty sub-array of *nums*\" but I still don't know what you meant by that.\
    \ My solution still solves the problem you originally stated -- it finds the minimum\
    \ sum of a non-empty sub-array of the given array. Do you still have a problem?\n\
    <|/ c |>\n<| c |>\nYes that's it, sorry I was not clear enough. Your solution\
    \ seems to work fine, so thank you, it's great!\n<|/ c |>\n<| c |>\n- I updated\
    \ my answer. If that helps, would you please mark the answer as accepted? Thanks.\n\
    <|/ c |>\n<| c |>\nYes that's it!! I realized that it was my fault for not being\
    \ clear enough. Thank you so much for your help!\n<|/ c |>\n<| a |>\nUse SplPriorityQueue\
    \ which can give you O(n log n) complexity. It would take O(n) time when you are\
    \ using your array as priority queue\n<code>\n$a=[1,2,3,4,5,6,7,8];\n\nforeach($a\
    \ as $e){\n if(isset($sum[$e])){\n   $sum[$e]++;\n }else{\n  $sum[$e]=1;\n }\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc85m9aw6.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  sort($nums);\n  $sum = 0;\n  $len = count($nums) - 1;\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    $sum += $nums[$i];\n    if ($sum < 0)\n      break;\n \
    \ }\n  return $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29x5_uh0.php:24\n\
    Stack trace:\n#0 /tmp/tmp29x5_uh0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp29x5_uh0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $min = 0;\n    $i = 0;\n    foreach ($nums as $n) {\n\
    \        if ($n > 0) {\n            $sum += $nums[$i];\n            $min = $min\
    \ < $sum ? $min : $sum;\n            $i++;\n        }\n    }\n    return $min;\n\
    }\n</code>\n<|/ a tags=php,arrays,recursion |>\n<| a dscore=1 |>\nYou don't need\
    \ recursion for this:\n<code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_3511mfr.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here\n    $min_sum = PHP_INT_MAX;\n    $max_sum =\
    \ PHP_INT_MIN;\n    foreach ($nums as $num => $min_sub){\n        $min_sum = $num\
    \ < $min_sum ? $num : $min_sum;\n        $max_sum = $num > $max_sum ? $num : $max_sum;\n\
    \    }\n    return $min_sum > PHP_INT_MIN ? $min_sum : $max_sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpio4wkf83.php:23\n\
    Stack trace:\n#0 /tmp/tmpio4wkf83.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpio4wkf83.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum\
    \ += $num;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66d6qtsy.php:21\n\
    Stack trace:\n#0 /tmp/tmp66d6qtsy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp66d6qtsy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $min_sum = PHP_INT_MIN;\n  $min_index = 0;\n  foreach($nums as $k => $v)\
    \ {\n    $min_sum = $v + ($min_sum < $v ? $min_sum : $min_index);\n    $min_index\
    \ = ($min_index < $v ? $min_index : $k);\n  }\n  return $min_sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxric_otb.php:22\n\
    Stack trace:\n#0 /tmp/tmpxric_otb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxric_otb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // write your code in PHP7.0\n    $sum = 0;\n    $count = [];\n    foreach\
    \ ($nums as $num) {\n        if (!isset($count[$num])) {\n            $count[$num]\
    \ = 0;\n            $sum = $num;\n        }\n        $count[$num]++;\n       \
    \ $sum += $num + $count[$num];\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nNice.  I wonder if this is the fastest solution.  It looks O(n).\n\
    <|/ c |>\n<| c |>\nIt looks O(n) only when the input array is sorted, and the\
    \ initial sort takes O(n).  If the input array is sorted, then the overall complexity\
    \ is O(n+m) where m is the number of items in the input array that are equal.\
    \  Of course, if the input array is unsorted, then the complexity is O(n).  But\
    \ if the input array is sorted, then the overall complexity is also O(n).\n<|/\
    \ c |>\n<| a tags=performance,php,algorithm dscore=1 |>\nAnother solution which\
    \ should work in O(n).\n<code>\n$nums = [7, 2, 5, 4, 1, 2, 5, 1];\n\n$minSum =\
    \ minSubArraySum($nums);\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdfvg2hpb.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $minimum = 0;\n  $current = $minimum;\n\n  foreach ($nums as $num) {\n\
    \    if ($current + $num < 0) {\n      $current = 0;\n      $minimum = $minimum\
    \ + $current;\n    } else {\n      $current += $num;\n    }\n  }\n\n  return $minimum;\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85uls1fc.php:28\n\
    Stack trace:\n#0 /tmp/tmp85uls1fc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp85uls1fc.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums)) {\n        return 0;\n    }\n    $min = PHP_INT_MAX;\n\
    \    foreach ($nums as $n) {\n        $min = min($n, $min);\n    }\n    return\
    \ $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qrwuekc.php:24\n\
    Stack trace:\n#0 /tmp/tmp3qrwuekc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3qrwuekc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $value) {\n        if ($value\
    \ < $min) {\n            $min = $value;\n        }\n    }\n    return $min;\n\
    }\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !==\
    \ -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9yo37tz6.php:22\n\
    Stack trace:\n#0 /tmp/tmp9yo37tz6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9yo37tz6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return array_reduce($nums, function ($acc, $num) {\n        return min($acc,\
    \ $num);\n    });\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nYour solution\
    \ will give the wrong answer for input \"minSubArraySum([-1, -2, -3]) == -6\"\
    . You should return 0 instead of -6.\n<|/ c |>\n<| c |>\nThanks for spotting that!\n\
    <|/ c |>\n<| a |>\nHere's my implementation in PHP using array_reduce()\n<code>\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2o76mv1z.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $num) {\n        foreach ($nums as $i\
    \ => $n) {\n            if ($i == $num) {\n                continue;\n       \
    \     }\n            if ($num + $i > $n) {\n                $sum += $n;\n    \
    \        }\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nthank you so much for this. it makes sense to me. i'm still struggling\
    \ to understand how the recursion works in this case. i'm trying to follow the\
    \ logic by visualizing it, but it doesn't seem to be working. i'm still trying\
    \ to wrap my head around it.\n<|/ c |>\n<| c |>\nThe best way to understand recursion\
    \ is to visualize it. In this case, you can see that you are trying to sum all\
    \ the elements (except the smallest) and then add them to the sum of the smallest\
    \ element (so basically just adding all the smallest elements to their sums).\
    \ The recursion stops when you've reached the end of the array (the smallest element).\n\
    <|/ c |>\n<| c |>\nI think I figured it out. I'm going to post my answer to my\
    \ question now.\n<|/ c |>\n<| c |>\nIt's not really a good idea to post code here\
    \ because it's really bad practice. Code posted here is for demonstration purposes\
    \ only and should be removed as soon as possible and used for learning purposes.\
    \ There are better ways to understand the recursion.\n<|/ c |>\n<| c |>\nyes I\
    \ realise that it's bad practice to do it this way. I'm just trying to get my\
    \ head around this concept, and I've learned a lot by trying this code. I'll post\
    \ a better code example for everyone to see.\n<|/ c |>\n<| a dscore=0 |>\nHere's\
    \ another way to do this using recursion:\n<code>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvxza078b.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n\n    foreach ($nums as $n) {\n        $min += $n;\n    }\n\
    \n    return $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpom31u2wn.php:22\n\
    Stack trace:\n#0 /tmp/tmpom31u2wn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpom31u2wn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MIN;\n    foreach ($nums as $i) {\n        $min = PHP_INT_MIN\
    \ - $min;\n    }\n    return $min;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfotbps0.php:20\n\
    Stack trace:\n#0 /tmp/tmppfotbps0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppfotbps0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = -PHP_INT_MAX;\n    foreach ($nums as $num) {\n        if ($num\
    \ < 0 || $minSum > $num) {\n            $minSum = $num;\n        }\n    }\n  \
    \  return $minSum;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqftnbtn4.php:21\n\
    Stack trace:\n#0 /tmp/tmpqftnbtn4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqftnbtn4.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    $sum = 0;\n    $min = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < count($nums); $i++) {\n        $sum = $sum + $nums[$i];\n        if\
    \ ($sum < $min) {\n            $min = $sum;\n        }\n    }\n    return $min;\n\
    }\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !==\
    \ -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgcy7r27.php:24\n\
    Stack trace:\n#0 /tmp/tmpmgcy7r27.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmgcy7r27.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    $n = count($nums);\n    $index = 0;\n    while ($index\
    \ < $n) {\n        $sum += $nums[$index];\n        $index++;\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69q5c73z.php:23\n\
    Stack trace:\n#0 /tmp/tmp69q5c73z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp69q5c73z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $sum = 0;\n  foreach ($nums as $num) {\n    $sum += $num;\n  }\n  return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xktdu3a.php:20\n\
    Stack trace:\n#0 /tmp/tmp3xktdu3a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3xktdu3a.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here\n}\n</code>\n<|/ a tags=php,arrays,function,sum\
    \ dscore=3 |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpenznl8ai.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $key => $num) {\n        $sum\
    \ = 0;\n        for ($i = $key; $i < count($nums); $i++) {\n            $sum =\
    \ $sum + $nums[$i];\n            if ($sum > $min) {\n                $min = $sum;\n\
    \            }\n        }\n    }\n\n    return $min;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis is very similar to the answer that was accepted earlier\n\
    <|/ c |>\n<| c |>\nYes it is, but i tried and it is not worked.\n<|/ c |>\n<|\
    \ c |>\nThis won't give the correct result if the subarray happens to be empty\
    \ [].\n<|/ c |>\n<| c |>\nThis doesn't work. Try to run it with a subarray of\
    \ size 1 like [1, 1]. The output should be 2, not 1.\n<|/ c |>\n<| c |>\nYes i\
    \ know its a bug in php 7.1 it gives the correct result when you are using PHP\
    \ 7.2 above you can try the new code i have edited it.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nYou can try this:\n<code>\n$array = array(2, 3, 4, 1, 2, 4);\n\n$sum = 0;\n\
    $min = PHP_INT_MAX;\nforeach ($array as $key => $value) {\n    for ($i = $key;\
    \ $i <= count($array) - $key; $i++) {\n        $sum += $array[$i];\n        if\
    \ ($sum < $min) {\n            $min = $sum;\n        }\n    }\n}\n\necho $min;\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try to run it with a subarray\
    \ of size 1 like [1, 1]. The output should be 2, not 1.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work. Try to run it with a subarray of size 1 like [1, 1]. The output\
    \ should be 2, not 1.\n<|/ c |>\n<| c |>\nTry it again with the array mentioned\
    \ in the question\n<|/ c |>\n<| a |>\nTry this one\n<code>\n$array = [2, 3, 4,\
    \ 1, 2, 4];\n\n$sum = 0;\n$min = $array[0];\nfor($i = 1; $i < count($array); $i++)\
    \ {\n    $sum = $sum + $array[$i];\n    if($sum < $min) {\n        $min = $sum;\n\
    \    }\n}\n\necho $min;\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| \nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4m_dr1jd.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here.\n    $sum = 0;\n    foreach ($nums as $num)\
    \ {\n        $sum += $num;\n    }\n\n    return $sum;\n}\n\n$array = [\n    1\
    \ => 'Hello',\n    2 => 'World',\n    3 => '!'\n];\n\n$result = minSubArraySum($array);\n\
    echo '<pre>';\nprint_r($result);\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpr87ztwgy.php on line\
    \ 11\n\nWarning: A non-numeric value encountered in /tmp/tmpr87ztwgy.php on line\
    \ 11\n\nWarning: A non-numeric value encountered in /tmp/tmpr87ztwgy.php on line\
    \ 11\n<pre>0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87ztwgy.php:31\n\
    Stack trace:\n#0 /tmp/tmpr87ztwgy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpr87ztwgy.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $k => $v) {\n        if ($min\
    \ > $v) {\n            $min = $v;\n            $start = $k;\n        }\n    }\n\
    \    $total = $sum = 0;\n    for ($i = $start; $i < count($nums); $i++) {\n  \
    \      $total += $nums[$i];\n        if ($total > $min) {\n            $min =\
    \ $total;\n        }\n    }\n    return $min;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhbfqiwb.php:30\n\
    Stack trace:\n#0 /tmp/tmpmhbfqiwb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmhbfqiwb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (sizeof($nums) === 0) {\n        return null;\n    }\n\n    $currentMin\
    \ = PHP_INT_MIN;\n    $currentMax = PHP_INT_MAX;\n\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        if ($nums[$i] < $currentMin) {\n            $currentMin = $nums[$i];\n\
    \        } else if ($nums[$i] > $currentMax) {\n            $currentMax = $nums[$i];\n\
    \        }\n    }\n\n    return $currentMin + minSubArraySum(array_slice($nums,\
    \ $i + 1));\n}\n</code>\n<|/ a tags=algorithm,php |>\n<| a |>\nThis problem can\
    \ be solved using Dynamic Programming (DP). In the DP solution you use a table\
    \ to store the minimum sum for each number in the input. In your solution you\
    \ store the minimum sum for each number only once. So the solution is O(N*M).\n\
    <code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy5ugcrga.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  if (empty($nums)) {\n    return 0;\n  }\n  $min = PHP_INT_MIN;\n  foreach\
    \ ($nums as $num) {\n    $min_num = min($min, $num);\n    $max_num = max($max,\
    \ $num);\n    $min_sum += $min_num;\n    $max_sum += $max_num;\n  }\n  return\
    \ $min_sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_kcxqtmh.php:26\n\
    Stack trace:\n#0 /tmp/tmp_kcxqtmh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_kcxqtmh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here.\n    $min = 0;\n    foreach ($nums as $number)\
    \ {\n        if ($min > $number) {\n            $min = $number;\n        }\n \
    \   }\n    return $min;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjjcly13.php:22\n\
    Stack trace:\n#0 /tmp/tmphjjcly13.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphjjcly13.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $sum = 0;\n    $result = 0;\n    foreach ($nums as\
    \ $key => $num) {\n        if ($key == 0) {\n            $result = $num;\n   \
    \     } elseif ($num + $result < $sum) {\n            $sum = $num + $result;\n\
    \        } else {\n            $result = $num + $result;\n        }\n    }\n \
    \   return $sum;\n}\n$result = minSubArraySum($nums);\necho $result;\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\n`minSubArraySum([-1, -2, -3]) == -6`\n<|/ c |>\n<|\
    \ c |>\n, thanks. Corrected. Still a little bit more complicated than I thought.\n\
    <|/ c |>\n<| c |>\nI guess it is because of your usage of $result in the last\
    \ line. Shouldn't it be `echo $result` instead of `echo $minSum`?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp51_3864x.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach($nums as $num) {\n        $sum += $num;\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis looks cool and\
    \ easy to read. Not sure how to get the sum of all possible sub arrays and compare\
    \ them, but that should be simple and I'll get there.\n<|/ c |>\n<| c |>\nYou\
    \ could use array_map to go through each subarray and sum each of its elements.\
    \ You could then use min() to find the minimum. Or you could use array_filter\
    \ to only keep elements that are positive. Either way, it could be done in one\
    \ line. I'll update my answer if I can come up with anything.\n<|/ c |>\n<| c\
    \ |>\nI updated my answer with an example that should do the trick. If it doesn't\
    \ let me know.\n<|/ c |>\n<| c |>\nI posted another answer with the code I ended\
    \ up using but I'm going to accept yours as it's what I was going for in the question.\
    \ Thanks for your help!\n<|/ c |>\n<| a dscore=4 |>\nI came up with a solution\
    \ after much trying. I ended up using the following algorithm in PHP to solve\
    \ my problem:\n\nCreate an array with all of the possible sub-arrays\nCalculate\
    \ the sum of each sub-array\nFind the minimum sum\nThe minimum sum is the lowest\
    \ possible sum.\n\nCode looks like this:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjc3yfud8.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $num) {\n        if ($min\
    \ > $num) {\n            $min = $num;\n        }\n    }\n    return $min;\n}\n\
    \n/**\n * Given an array of integers, return indices of the two numbers such that\
    \ they add up to a specific target.\n */\nfunction candidate(...$args) {\n   \
    \ return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyc_8an5.php:26\n\
    Stack trace:\n#0 /tmp/tmpuyc_8an5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuyc_8an5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    foreach ($nums as $key => $num) {\n        foreach ($nums as $key2 =>\
    \ $num2) {\n            if ($key == $key2 && $num > $num2) {\n               \
    \ $nums[$key] = $num2;\n                break;\n            }\n        }\n   \
    \ }\n\n    $min = 0;\n    $max = 0;\n    foreach ($nums as $num) {\n        $min\
    \ += $num;\n        $max = max($max, $min);\n    }\n    return $max;\n}\n\n$inputArray\
    \ = [\n    [2, 3, 4, 1, 2, 4],\n    [-1, -2, -3],\n    [0, 1, 0, -1],\n    [3,\
    \ 3, 3, 3],\n    [3, 3, 3, 3],\n    [3, 3, 3, 3],\n    [3, 3, 3, 3]\n];\n\nforeach\
    \ ($inputArray as $testCase) {\n    $sumExpected = minSubArraySum($testCase);\n\
    \    $sum = minSubArraySum($testCase);\n    if ($sum != $sumExpected) {\n    \
    \    echo \"Test case: {$testCase} failed\\n\";\n    } else {\n        echo \"\
    Test case: {$testCase} passed\\n\";\n    }\n}\n</code>\nOutput\n<code>\nTest case:\
    \ [2, 3, 4, 1, 2, 4] passed\nTest case: [-1, -2, -3] passed\nTest case: [3, 3,\
    \ 3, 3] passed\nTest case: [0, 1, 0, -1] passed\nTest case: [3, 3, 3, 3] passed\n\
    Test case: [3, 3, 3, 3] passed\nTest case: [3, 3, 3, 3] passed\nTest case: [3,\
    \ 3, 3, 3] passed\n</code>\n<|/ a |>\n<| c |>\nThis is O(n^2), isn't it?\n<|/\
    \ c |>\n<| c |>\n, yes, I guess so.\n<|/ c |>\n<| c |>\nI'm pretty sure that this\
    \ is O(n^2).  It runs in O(n^2) time.  Each loop takes O(n) time, so the total\
    \ is O(n^2).\n<|/ c |>\n<| c |>\n, this is a dynamic programming solution. Have\
    \ you ever used recursion? This is a classical example. https://en.wikipedia.org/wiki/Dynamic_programming\n\
    <|/ c |>\n<| c |>\nI see.  I was thinking of a tree traversal.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nHere's a recursive solution that is O(n) time and O(1) space.\n\
    <code>\npublic function minSubArraySum($nums) {\n    if (count($nums) === 0) {\n\
    \        return 0;\n    }\n\n    $min = $nums[0];\n\n    return $this->minSubArraySum(array_slice($nums,\
    \ 1), $min);\n}\n\nprivate function minSubArraySum(\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8m1_qtl8.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = INF;\n    foreach ($nums as $num) {\n        if ($num < 0) continue;\n\
    \        $min = min($min + $num, $num);\n    }\n    return $min;\n}\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1dvnq5fc.php:20\n\
    Stack trace:\n#0 /tmp/tmp1dvnq5fc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1dvnq5fc.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min_sum = array_sum($nums);\n    foreach ($nums as $num) {\n       \
    \ if ($min_sum < $num) {\n            $min_sum = $num;\n        }\n    }\n   \
    \ return $min_sum;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvltjx73j.php:21\n\
    Stack trace:\n#0 /tmp/tmpvltjx73j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvltjx73j.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here.\n    $sum = array_sum($nums);\n    $min = array_reduce($nums,\
    \ function($min, $a) { return $min < $a ? $a : $min; });\n    return $sum < $min\
    \ ? $sum : $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkl3zfxt3.php:19\n\
    Stack trace:\n#0 /tmp/tmpkl3zfxt3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkl3zfxt3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here.\n    $min = 0;\n    $sum = 0;\n    foreach ($nums\
    \ as $key => $num) {\n        if($min > $num) {\n            $min = $num;\n  \
    \          $sum = 0;\n        }\n        $sum = $sum + $num;\n        if($sum\
    \ < $min) {\n            $min = $sum;\n        }\n    }\n    return $min;\n}\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdyuo_al6.php:28\n\
    Stack trace:\n#0 /tmp/tmpdyuo_al6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdyuo_al6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    $max = 0;\n    foreach ($nums as $num) {\n        $min\
    \ = $num < $min ? $num : $min;\n        $max = $num > $max ? $num : $max;\n  \
    \  }\n    return $min + $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsiza56gu.php:22\n\
    Stack trace:\n#0 /tmp/tmpsiza56gu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsiza56gu.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    $size = count($nums);\n    foreach ($nums as $key => $num)\
    \ {\n        if ($num > 0) {\n            $sum += $num;\n            if ($key\
    \ + 1 < $size) {\n                $sum += min($nums[$key + 1], $nums[$key] + $nums[$key\
    \ + 1]);\n            }\n        }\n    }\n    return $sum;\n}\n\n$minSubArraySum\
    \ = minSubArraySum([2, 3, 4, 1, 2, 4]);\necho 'Minimum sum of any non-empty sub-array\
    \ of [2,3,4,1,2,4] is ' . $minSubArraySum . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Minimum sum of any non-empty sub-array of [2,3,4,1,2,4] is 30\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpodsaunqo.php:28\nStack trace:\n\
    #0 /tmp/tmpodsaunqo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpodsaunqo.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  // Write your code here\n  \n  $min_sum = PHP_INT_MAX;\n  $min_sum_index\
    \ = 0;\n\n  for($i = 0; $i < count($nums); $i++) {\n    if($nums[$i] < $min_sum)\
    \ {\n      $min_sum = $nums[$i];\n      $min_sum_index = $i;\n    }\n  }\n  return\
    \ $min_sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp43y_brxb.php:28\n\
    Stack trace:\n#0 /tmp/tmp43y_brxb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp43y_brxb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here\n    $min_sum = 0;\n    foreach ($nums as $number)\
    \ {\n        $min_sum += $number;\n    }\n    return $min_sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsp9g2x29.php:21\n\
    Stack trace:\n#0 /tmp/tmpsp9g2x29.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsp9g2x29.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum += $num;\n   \
    \ }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumr2uto9.php:20\n\
    Stack trace:\n#0 /tmp/tmpumr2uto9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpumr2uto9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = $nums[0];\n    for($i = 1; $i < count($nums); $i++) {\n      \
    \  $sum = $sum + $nums[$i];\n        $min = $sum < $min ? $sum : $min;\n    }\n\
    \    return $min;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7fpo88n.php:20\n\
    Stack trace:\n#0 /tmp/tmpk7fpo88n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpk7fpo88n.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    $prev = 0;\n    foreach ($nums as $i) {\n        $cur\
    \ = $i - $prev;\n        if ($cur < $min) {\n            $min = $cur;\n      \
    \  }\n        $prev = $i;\n    }\n\n    return $min;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklgeyq8j.php:26\n\
    Stack trace:\n#0 /tmp/tmpklgeyq8j.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpklgeyq8j.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    $sum = 0;\n    for($i = 0; $i < sizeof($nums);\
    \ $i++){\n        if($nums[$i] >= 0){\n            for($j = 0; $j < sizeof($nums);\
    \ $j++){\n                $sum += $nums[$i];\n                if($nums[$j] >=\
    \ 0){\n                    $sum -= $nums[$j];\n                }\n           \
    \ }\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args) {\n \
    \   return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzrna866.php:27\n\
    Stack trace:\n#0 /tmp/tmpqzrna866.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqzrna866.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums))\n    {\n        return null;\n    }\n\n    $min_sum\
    \ = PHP_INT_MAX;\n\n    foreach ($nums as $i => $num)\n    {\n        $min_sum\
    \ = $min_sum > $num ? $num + $min_sum : $min_sum;\n    }\n\n    return $min_sum;\n\
    }\n</code>\n<|/ a tags=arrays,php,algorithm |>\n<| c |>\nThis is not correct.\
    \ The sum of sub-arrays should be less than the sum of the original array.\n<|/\
    \ c |>\n<| c |>\nWhy would this be the correct answer? What do you mean by \"\
    the sum of the sub-arrays\"?\n<|/ c |>\n<| c |>\nYour example shows that the sum\
    \ of the sub-arrays is always greater than the sum of the original array. This\
    \ doesn't make any sense.\n<|/ c |>\n<| c |>\nWhat you say is false. Consider\
    \ `[1, 2, 3, 2, 1]`. After `[1, 2, 3]` we get `[1, 2]`, then `[2, 3]`, then `[1,\
    \ 2]`, then `[1]`. Clearly the sum of the sub-arrays here is `5` and the sum of\
    \ the original array is `4`. So the sum of the sub-arrays is greater than the\
    \ sum of the original array.\n<|/ c |>\n<| c |>\nOh, you are right. I did not\
    \ realise that `[1, 2, 3, 2, 1]` could be considered as a sub-array and hence\
    \ the sum is greater than the sum of the original array. My bad. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a dscore=4 tags=arrays,php,algorithm |>\nI know this\
    \ is an old question and there are several correct answers here, however my solution\
    \ is more elegant.\nThe idea is to iterate through each item in your array and\
    \ see how many of them can fit in your array. If the length of the set is less\
    \ than the length of your array then you know that your array cannot fit the set.\n\
    <code>\n$max = 0;\nfor($i = 0; $i < count($array); $i++){\n    $set = array_values(array_diff(array_slice($array,\
    \ 1), $array));\n    $count = count($set);\n\n    if($count < count($array)){\n\
    \        $max = count($array);\n        break;\n    }else{\n        $max += $count;\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nThis answer has a bug, try with array `[1,\
    \ 2, 3, 4, 1, 2, 5, 1]`\n<|/ c |>\n<| a |>\nThis problem can be solved using Dynamic\
    \ Programming. Here is a pseudocode implementation:\n<code>\nint minimumSum(array<int>\
    \ a) {\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3blj0zwe.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    $minSum = 0;\n    foreach ($nums as $num) {\n\
    \        $minSum = max($minSum, $num);\n        $min = min($min, $minSum);\n \
    \   }\n    return $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzngxwamy.php:22\n\
    Stack trace:\n#0 /tmp/tmpzngxwamy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzngxwamy.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $result = 0;\n  $len = count($nums);\n  foreach ($nums as $item) {\n  \
    \  $result += $item;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9hbp22y.php:21\n\
    Stack trace:\n#0 /tmp/tmpg9hbp22y.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg9hbp22y.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code in PHP7.0\n    // $sum = 0;\n    // $subArraySum =\
    \ [0,0,0,0];\n    // for ($i = 0; $i < count($nums); $i++) {\n    //     $sum\
    \ += $nums[$i];\n    //     $subArraySum[$i] = $sum;\n    // }\n    // $subArraySum[]\
    \ = -1;\n    // return min($subArraySum);\n    \n    // Write your code in PHP7.3\n\
    \    $sum = 0;\n    $subArraySum = [0, 0, 0, 0];\n    foreach ($nums as $num)\
    \ {\n        $sum += $num;\n        $subArraySum[$num] = $sum;\n    }\n    $subArraySum[]\
    \ = -1;\n    return min($subArraySum);\n}\nfunction candidate(...$args) {\n  \
    \  return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwz6w1btx.php:33\n\
    Stack trace:\n#0 /tmp/tmpwz6w1btx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpwz6w1btx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $sum = 0; // sum of the current subarray\n    $min\
    \ = PHP_INT_MAX; // minimum sum\n    $minIndex = 0; // current index whose sum\
    \ is minimum\n    $end = count($nums) - 1;\n    foreach ($nums as $i => $num)\
    \ {\n        $sum += $num;\n        if ($i == $end) {\n            $sum -= $nums[$i];\n\
    \            $min = $sum < $min ? $sum : $min;\n        } else {\n           \
    \ $subSum = $sum - $nums[$i];\n            if ($min > $subSum) {\n           \
    \     $min = $subSum;\n                $minIndex = $i;\n            }\n      \
    \  }\n    }\n    return $min;\n}\n</code>\n<|/ a tags=php |>\n<| a |>\nI think\
    \ this solution is also correct \n<code>\nfunction candidate(...$args) {\n   \
    \ return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqymficb4.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $min = array_pop($nums);\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        $j = $i + 1;\n        while ($j < count($nums)) {\n       \
    \     $sum += $nums[$j];\n            if ($sum >= $min) {\n                $min\
    \ = $sum;\n            }\n            $j++;\n        }\n    }\n    return $min;\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql2aqkj8.php:28\n\
    Stack trace:\n#0 /tmp/tmpql2aqkj8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpql2aqkj8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX; // the minimum value found\n    $i = 0;         \
    \       // the current index\n    $j = 0;                // the previous index\n\
    \    foreach ($nums as $num) {\n        if ($i == 0) {\n            $min = $num;\n\
    \            $i++;\n            continue;\n        }\n        // check if the\
    \ current number is less than the previous number\n        if ($num < $min) {\n\
    \            // the previous number is smaller, so swap with the current number\n\
    \            $min = $num;\n            // and update $j\n            $j = $i;\n\
    \        } else {\n            // otherwise, just advance $j by 1\n          \
    \  $j++;\n        }\n        $i++;\n    }\n    return $min;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a |>\nI used this algorithm in javascript and it worked\n<code>\n\
    let arr = [5, 1, 2, 0, 8, 3]\nlet ans = 0\nfor (let i = 0; i < arr.length; i++)\
    \ {\n    let current = arr[i]\n    let min = i\n    for (let j = i; j < arr.length;\
    \ j++) {\n        if (arr[j] < current) {\n            min = j\n        }\n  \
    \  }\n    if (min > i) {\n        ans += current\n    }\n}\nconsole.log(ans)\n\
    </code>\n<|/ a dscore=0 tags=php |>\n<| a dscore=0 tags=php |>\nI ran into this\
    \ same question a few weeks ago and this is the code that I came up with.  It\
    \ is a bit more complicated than some of the other responses because you need\
    \ to compare the sums of consecutive elements in the array to find the minimum\
    \ sum of the whole array.  \n<code>\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe8l5y3eg.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $num) {\n        $min = min($min,\
    \ $num);\n    }\n    return $min;\n}\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzhb5wq5.php:20\n\
    Stack trace:\n#0 /tmp/tmprzhb5wq5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprzhb5wq5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    $max = 1;\n    foreach ($nums as $num) {\n        $current\
    \ = $min + $max;\n        if ($current > $num) {\n            $max = $num;\n \
    \       } else if ($current < $num) {\n            $min = $num;\n        }\n \
    \   }\n    return $min + $max;\n}\n$nums = [2, 3, 4, 1, 2, 4];\necho minSubArraySum($nums);\
    \ // 1\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "8\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hze942t.php:27\n\
    Stack trace:\n#0 /tmp/tmp1hze942t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1hze942t.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    $nums = array_map(function($v) { return $v > 0\
    \ ? $v : 0; }, $nums);\n    $result = 0;\n    $min = INF;\n    foreach($nums as\
    \ $key => $val){\n        if ($val > $min){\n            $min = $val;\n      \
    \      $result = $key;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfu2kj_2b.php:26\n\
    Stack trace:\n#0 /tmp/tmpfu2kj_2b.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfu2kj_2b.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = PHP_INT_MAX;\n    $index = 0;\n\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        $min = $minSum;\n        $temp = $nums[$i];\n\n        for\
    \ ($j = $index; $j < count($nums); $j++) {\n            if ($j == $i) continue;\n\
    \            if ($temp > $nums[$j]) {\n                $min = $temp;\n       \
    \         $index = $j;\n            }\n        }\n\n        $minSum = min($minSum\
    \ + $temp, $min);\n    }\n\n    return $minSum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3c6wmszg.php:34\n\
    Stack trace:\n#0 /tmp/tmp3c6wmszg.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3c6wmszg.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    $min_array = null;\n    foreach ($nums as $k\
    \ => $num) {\n        if (isset($min_array[$k])) continue;\n        $min = $num\
    \ < $min ? $num : $min;\n        $min_array = [$k => $num];\n    }\n    return\
    \ $min == PHP_INT_MAX ? 0 : abs($min);\n}\n\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjbjb9ye.php:24\n\
    Stack trace:\n#0 /tmp/tmpfjbjb9ye.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfjbjb9ye.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $n = count($nums);\n    $sum = 0;\n    $currentMin = 0;\n    foreach\
    \ ($nums as $n) {\n        if (isset($currentMin) && $currentMin < $n) {\n   \
    \         $currentMin = $n;\n        }\n        $sum += $n;\n    }\n    if ($sum\
    \ < 0) {\n        return -1;\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis can be solved without using a foreach loop as well by using a different\
    \ $sum variable and comparing it to $currentMin.\n<|/ c |>\n<| c |>\nGood idea.\
    \ Edited the answer. Thanks.\n<|/ c |>\n<| c |>\nThis would be fine except that\
    \ you are still using a foreach loop.\n<|/ c |>\n<| c |>\nThe question is how\
    \ to solve the problem without using a foreach loop. Thus I posted this solution\
    \ to illustrate how to solve the problem without using any kind of foreach loop.\n\
    <|/ c |>\n<| c |>\nI never said you don't use a foreach loop. I said the solution\
    \ doesn't use a foreach loop.\n<|/ c |>\n<| a tags=php,algorithm |>\nYou can do\
    \ it with array_reduce:\n<code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3shbtlu7.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $min_sum = PHP_INT_MAX;\n  $min_pos = -1;\n\n  // iterate the given array\
    \ from last to first\n  foreach (array_reverse($nums) as $key => $num) {\n   \
    \ if ($num > 0) {\n      $min_sum += $num;\n      $min_pos = $key;\n    }\n  }\n\
    \n  return $min_sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9ehc4my.php:27\n\
    Stack trace:\n#0 /tmp/tmpy9ehc4my.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpy9ehc4my.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $key => $value) {\n        // If the\
    \ sum is greater than zero, then include this number.\n        if ($value > 0)\
    \ {\n            $sum += $value;\n        }\n        // The sum equals zero, so\
    \ check if this number has already been summed.\n        if ($sum == 0) {\n  \
    \          $sum += $nums[$key];\n            // If the sum equals zero, there\
    \ is no smaller sum, so\n            // just return.\n            if ($sum ==\
    \ 0) {\n                return $nums[$key];\n            }\n        }\n    }\n\
    \    // We have run out of numbers to sum, so return the maximum sum.\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3x0w7blc.php:33\n\
    Stack trace:\n#0 /tmp/tmp3x0w7blc.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3x0w7blc.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $n => $x) {\n        if ($n\
    \ >= 0) {\n            if (isset($nums[$n + 1]) && $x + $nums[$n + 1] < $min)\
    \ {\n                $min = $x + $nums[$n + 1];\n            }\n        }\n  \
    \  }\n    return $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_x8999d.php:24\n\
    Stack trace:\n#0 /tmp/tmpy_x8999d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpy_x8999d.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (!$nums || count($nums) === 0) {\n        return 0;\n    }\n\n   \
    \ $min = PHP_INT_MAX;\n\n    foreach ($nums as $k => $v) {\n        if ($v > 0)\
    \ {\n            $min = min($min, $v);\n        }\n    }\n\n    return $min;\n\
    }\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty\
    \ sub-array\n * of nums.\n * Example\n * maxSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 7\n * maxSubArraySum([-1, -2, -3]) == 3\n */\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxczb8r3m.php:36\n\
    Stack trace:\n#0 /tmp/tmpxczb8r3m.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxczb8r3m.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min_sum = PHP_INT_MIN;\n    foreach ($nums as $k => $num) {\n      \
    \  $min_sum =\n            $min_sum + ($nums[$k] > 0 ? $nums[$k] : $nums[$k]);\n\
    \    }\n    return $min_sum;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdt5voqkv.php:20\n\
    Stack trace:\n#0 /tmp/tmpdt5voqkv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdt5voqkv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = $nums[0];\n    for ($i = 1; $i < count($nums); $i++) {\n     \
    \   $min = min($min, $nums[$i]);\n    }\n    return $min;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvy1dajv.php:21\n\
    Stack trace:\n#0 /tmp/tmplvy1dajv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplvy1dajv.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $num) {\n        $currentMin\
    \ = $min > $num ? $min : $num;\n        $min = max($currentMin, $min + $num);\n\
    \    }\n    return $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yszhaxw.php:21\n\
    Stack trace:\n#0 /tmp/tmp7yszhaxw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7yszhaxw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = $nums[0];\n    $minIndex = 0;\n    $maxIndex = $nums - 1;\n\
    \    foreach ($nums as $index => $num) {\n        if ($index < $minIndex) {\n\
    \            $minIndex = $index;\n        }\n        if ($index > $maxIndex) {\n\
    \            $maxIndex = $index;\n        }\n        $minSum += $num;\n    }\n\
    \    return $minSum;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpm4_cy_ly.php:10\n\
    Stack trace:\n#0 /tmp/tmpm4_cy_ly.php(23): minSubArraySum(Array)\n#1 /tmp/tmpm4_cy_ly.php(27):\
    \ candidate(Array)\n#2 /tmp/tmpm4_cy_ly.php(41): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpm4_cy_ly.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $s = $a = $b = $c = $d = $e = 0;\n    foreach ($nums as $n) $d = ($e\
    \ < $d ? $e : $d) + $n;\n    if ($s == $d) $a += $b;\n    else $b = $d;\n    while\
    \ ($a != 0) {\n        $c = $a;\n        $a = $d;\n        $d = $e - $c;\n   \
    \     $e = $c;\n    }\n    return $b;\n}\n\nfunction candidate(...$args) {\n \
    \   return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7nzflcx.php:26\n\
    Stack trace:\n#0 /tmp/tmpq7nzflcx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq7nzflcx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = $nums[0];\n    $minArray = array();\n\n    foreach ($nums as $num)\
    \ {\n        if ($min > $num) {\n            $min = $num;\n        }\n\n     \
    \   // Check if the new number is greater than the minimum found so far\n    \
    \    // or if the current number is greater than the minimum found so far.\n \
    \       if ($min > $num + $min) {\n            $min = $num;\n        }\n\n   \
    \     $minArray[] = $min;\n    }\n\n    return min($minArray);\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ech79qh.php:33\n\
    Stack trace:\n#0 /tmp/tmp6ech79qh.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6ech79qh.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach ($nums as $num) {\n        $min_temp\
    \ = minSubArraySum_aux($nums, $min);\n        if ($min_temp < $min) {\n      \
    \      $min = $min_temp;\n        }\n    }\n    return $min;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function minSubArraySum_aux()\
    \ in /tmp/tmpv6342x1i.php:10\nStack trace:\n#0 /tmp/tmpv6342x1i.php(18): minSubArraySum(Array)\n\
    #1 /tmp/tmpv6342x1i.php(22): candidate(Array)\n#2 /tmp/tmpv6342x1i.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv6342x1i.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $subArrays = array();\n    $sum = 0;\n    foreach ($nums as $num) {\n\
    \        if ($sum >= 0) {\n            $sum -= $num;\n            $subArrays[]\
    \ = array($num);\n        }\n        else {\n            $sum += $num;\n     \
    \       $subArrays[] = array(-$num);\n        }\n    }\n    $sum = array_sum($subArrays);\n\
    \    return $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgmv6286.php:29\n\
    Stack trace:\n#0 /tmp/tmpvgmv6286.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvgmv6286.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return array_sum(array_filter($nums, function ($v) {\n        return\
    \ $v > 0;\n    }));\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc5esabgw.php:18\n\
    Stack trace:\n#0 /tmp/tmpc5esabgw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpc5esabgw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums)) {\n        return 0;\n    }\n    $min = array_shift($nums);\n\
    \    $sum = array_sum($nums);\n    foreach ($nums as $num) {\n        $sum +=\
    \ $num;\n        if ($sum < $min) {\n            $min = $sum;\n        }\n   \
    \ }\n    return $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_7hr68_.php:27\n\
    Stack trace:\n#0 /tmp/tmpj_7hr68_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpj_7hr68_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    $min = PHP_INT_MAX;\n    foreach($nums as $val){\n\
    \        $min = min($min,$val);\n    }\n    return $min;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr_5s567.php:22\n\
    Stack trace:\n#0 /tmp/tmpyr_5s567.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyr_5s567.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $currentSum = 0;\n    $minSum = PHP_INT_MAX;\n    foreach ($nums as $num)\
    \ {\n        $currentSum = $currentSum + $num;\n        $minSum = min($minSum,\
    \ $currentSum);\n    }\n    return $minSum;\n}\n\n$a = [-6, -2, 3, -2];\n$b =\
    \ [4, 1, 2, 4, 5];\n$c = array(3, 2, 5, 1);\n$d = array(1, 2, 3, 3, 4);\n$e =\
    \ array(3, 2, 4, 1, 3);\n$f = array(2, 2);\n$g = array(-1);\n$h = array(0);\n\n\
    var_dump(minSubArraySum($a));\nvar_dump(minSubArraySum($b));\nvar_dump(minSubArraySum($c));\n\
    var_dump(minSubArraySum($d));\nvar_dump(minSubArraySum($e));\nvar_dump(minSubArraySum($f));\n\
    var_dump(minSubArraySum($g));\nvar_dump(minSubArraySum($h));\n</code>\nOutput\n\
    <code>\nint(1)\nint(6)\nint(-9)\nint(-3)\nint(2)\nint(7)\nint(4)\nint(2)\nint(0)\n\
    </code>\n<|/ a |>\n<| c |>\nthank you so much man, you were very helpful!\n<|/\
    \ c |>\n<| c |>\nThe issue with the answer is not the code, it's the wording.\
    \ Since there are many languages which can do this, I'd argue that it's the language\
    \ which should be called the language, not some arbitrary \"language\"\n<|/ c\
    \ |>\n<| a dscore=0 |>\nTry this:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbjy2urp_.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sums = [];\n    $min = INF;\n    $minIndex = 0;\n    foreach ($nums\
    \ as $k => $num) {\n        $sums[$k] = $num + $min;\n        if ($sums[$k] <\
    \ $min) {\n            $min = $sums[$k];\n            $minIndex = $k;\n      \
    \  }\n    }\n    return $sums[$minIndex];\n}\n</code>\n<|/ a |>\n<| a |>\nThis\
    \ is not a complete answer, but this is my solution:\n<code>\n$input = array();\n\
    foreach($_POST['input'] as $i)\n    $input += $i;\n\n$min = INF;\n$minIndex =\
    \ -1;\nfor($i = 0; $i < count($input); $i++)\n{\n    if(!isset($output[$i]))\n\
    \    {\n        $output[$i] = $input[$i];\n        if($input[$i] < $min)\n   \
    \     {\n            $min = $input[$i];\n            $minIndex = $i;\n       \
    \ }\n    }\n    else\n    {\n        if($output[$i] < $min) $min = $output[$i];\n\
    \    }\n}\n\necho \"Minimum: \" . $min;\necho \"Index: \" . $minIndex;\n</code>\n\
    It works by iterating over the array and adding each value to the output array\
    \ with the index and value, so if the next value is less than the minimum value,\
    \ it overwrites it, and then checks to see which index has the minimum value as\
    \ the current value, and if the new value is less than the minimum, it overwrites\
    \ the minimum value with the new value, and then checks to see which value is\
    \ the minimum.\n<|/ a tags=arrays,php dscore=0 |>\n<| c |>\nYeah, my solution\
    \ was a tad different, so I thought I'd share it.\n<|/ c |>\n<| a |>\nIf you know\
    \ your input array is always sorted you can use a binary search to find the lowest\
    \ value.\n<code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuv6eb14a.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = $nums[0];\n    foreach ($nums as $n) if ($n > $min) $min = $n;\n\
    \    return $min;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe solution works\
    \ fine for the example array provided. But doesn't work for other test cases,\
    \ like `minSubArraySum([2,3,4,5,1,2,4,1])` returns 10 instead of 3.\n<|/ c |>\n\
    <| c |>\n, I fixed a typo in the last line of the code (`for` instead of `foreach`).\
    \ Now it should work fine.\n<|/ c |>\n<| a dscore=1 |>\nYour code doesn't work\
    \ because:\n<code>\nminSubArraySum([2,3,4,5,1,2,4,1])\n</code>\nreturns 10 instead\
    \ of 3, because you're summing up every number in the array, and not only those\
    \ that are lower than the previous one. You should do it like this:\n<code>\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6fc1l915.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // This solution takes O(logn) time. \n    // Use an approach with Hash\
    \ table to solve it O(n).\n    $sum = array_sum($nums);\n    sort($nums);\n  \
    \  for($i = count($nums) - 1; $i > 0; $i--){\n        $sum -= $nums[$i];\n   \
    \     if($sum < 0){\n            $sum = 0;\n            break;\n        }\n  \
    \  }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| a |>\nFor anyone who's looking\
    \ for a simple solution without using HashTables, here's my solution:\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf985yyh3.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $numsSorted = array_reverse($nums);\n\n    return min($numsSorted) +\
    \ minSubArraySum($numsSorted);\n}\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp8da8qdrd.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $result = minSubArraySumHelper($nums);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function minSubArraySumHelper()\
    \ in /tmp/tmpzwmtzdw1.php:8\nStack trace:\n#0 /tmp/tmpzwmtzdw1.php(13): minSubArraySum(Array)\n\
    #1 /tmp/tmpzwmtzdw1.php(17): candidate(Array)\n#2 /tmp/tmpzwmtzdw1.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzwmtzdw1.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    $len = count($nums);\n    for($i=0;$i<$len;$i++){\n\
    \        for($j=$i+1;$j<$len;$j++){\n            $sum = $nums[$i]+$nums[$j];\n\
    \            if($sum>$min){\n                $min = $sum;\n            }\n   \
    \     }\n    }\n    return $min;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_l0fva75.php:26\n\
    Stack trace:\n#0 /tmp/tmp_l0fva75.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_l0fva75.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum += $num;\n   \
    \ }\n    return $sum;\n}\n$input = file_get_contents(\"php://stdin\");\n$nums\
    \ = preg_split('/\\s+/', trim($input));\n$result = minSubArraySum($nums);\nvar_dump($result);\n\
    function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp7bt21zbl.php on line\
    \ 10\nint(0)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bt21zbl.php:23\n\
    Stack trace:\n#0 /tmp/tmp7bt21zbl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7bt21zbl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $value) {\n        $sum += $value;\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97hsk0zy.php:20\n\
    Stack trace:\n#0 /tmp/tmp97hsk0zy.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp97hsk0zy.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = 0;\n    foreach ($nums as $key => $num) {\n        if ($minSum\
    \ == $num) {\n            $minSum = $num;\n        } elseif ($num < $minSum) {\n\
    \            $minSum = $num;\n        }\n    }\n    return $minSum;\n}\n</code>\n\
    <|/ a tags=algorithm,sorting,php dscore=3 |>\n<| c |>\nVery elegant solution!\
    \ Though you missed a closing bracket for your `foreach` loop.\n<|/ c |>\n<| c\
    \ |>\nI fixed the missing closing bracket.\n<|/ c |>\n<| a tags=algorithm,sorting,php\
    \ dscore=3 |>\nA simple approach would be to sort the array and find the first\
    \ non negative number:\n<code>\n$arr = array_filter($arr,function($x){return ($x>0);});\n\
    $min = array_shift($arr);\n</code>\nDemo: https://3v4l.org/UgLsN\n<|/ a |>\n<|\
    \ c |>\nIt seems that this solution has the best performance in PHP (tested with\
    \ 5000 records array)\n<|/ c |>\n<| a |>\nIt can be done easily using two loops.\
    \ One for finding minimum value and second for iterating over array\n<code>\n\
    $arr = [2, 3, 4, 1, 2, 4];\n$min = 0;\n$i=0;\n\nwhile ($arr[$i] >= $min) {\n \
    \   $i++;\n}\n\n$minValue = $arr[$i];\n\nfor ($j=$i; $j < count($arr); $j++) {\n\
    \    if ($arr[$j] < $minValue) {\n        $minValue = $arr[$j];\n    }\n}\n\n\
    echo \"Minimum Value is $minValue\";\n</code>\n<|/ a dscore=3 tags=algorithm,sorting,php\
    \ |>\n<| c |>\nYou can't just use two loops. You need to *count* the number of\
    \ array elements *before* you start the second loop. Otherwise you will not know\
    \ how many iterations to do, and you will keep doing an extra iteration for each\
    \ new element in the array that you have just reached.\n<|/ c |>\n<| c |>\nWhy\
    \ does this work? I understand it works with two loops, but how? Also, you don't\
    \ need the while loop for the counting part.\n<|/ c |>\n<| c |>\n, please note\
    \ that this is unsafe code. For example what happens if you have a negative value\
    \ in the array? In this case you will have `count($arr)` iterations instead of\
    \ `count($arr)` iterations and will \nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa53l4ppc.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = INF;\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum\
    \ += $num;\n        if ($sum < $min) {\n            $min = $sum;\n        }\n\
    \    }\n    return $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzmzt6_6.php:24\n\
    Stack trace:\n#0 /tmp/tmplzmzt6_6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplzmzt6_6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $result = 0;\n    $resultMin = 0;\n    foreach($nums as $key => $value)\
    \ {\n        $result += $value;\n        if($result > $resultMin) {\n        \
    \    $resultMin = $result;\n        }\n    }\n    return $resultMin;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqyyqmv0_.php:24\n\
    Stack trace:\n#0 /tmp/tmpqyyqmv0_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqyyqmv0_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    $max = 1;\n    $i = 0;\n    $j = 1;\n    for ($k = $i;\
    \ $k < count($nums); $k++) {\n        $min = ($min < $nums[$k]) ? $min : $nums[$k];\n\
    \        $max = ($max > $nums[$k]) ? $max : $nums[$k];\n    }\n    $min = ($min\
    \ < $max) ? $min : $max;\n    $j++;\n    for ($k = $i; $k < count($nums); $k++)\
    \ {\n        $min = ($min > $nums[$k]) ? $min : $nums[$k];\n        $max = ($max\
    \ < $nums[$k]) ? $max : $nums[$k];\n    }\n    $min = ($min < $max) ? $min : $max;\n\
    \    for ($k = $i; $k < count($nums); $k++) {\n        $min = ($min < $nums[$k])\
    \ ? $min : $nums[$k];\n        $max = ($max > $nums[$k]) ? $max : $nums[$k];\n\
    \    }\n    $min = ($min < $max) ? $min : $max;\n    $j++;\n    for ($k = $i;\
    \ $k < count($nums); $k++) {\n        $min = ($min > $nums[$k]) ? $min : $nums[$k];\n\
    \        $max = ($max < $nums[$k]) ? $max : $nums[$k];\n    }\n    $min = ($min\
    \ < $max) ? $min : $max;\n    for ($k = $i; $k < count($nums); $k++) {\n     \
    \   $min = ($min < $nums[$k]) ? $min : $nums[$k];\n        $max = ($max > $nums[$k])\
    \ ? $max : $nums[$k];\n    }\n    $min = ($min < $max) ? $min : $max;\n    return\
    \ $j;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89rz3lux.php:47\n\
    Stack trace:\n#0 /tmp/tmp89rz3lux.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp89rz3lux.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    $sum = 0;\n    $max = $nums[0];\n    for($i =\
    \ 0; $i < count($nums); $i++) {\n        if($nums[$i] > $max) {\n            $max\
    \ = $nums[$i];\n        }\n    }\n    for($i = 0; $i < count($nums); $i++) {\n\
    \        if($nums[$i] <= $max && $nums[$i] + $sum < $max) {\n            $sum\
    \ = $nums[$i] + $sum;\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3njsj2q5.php:28\n\
    Stack trace:\n#0 /tmp/tmp3njsj2q5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3njsj2q5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n\t$min = PHP_INT_MAX;\n\tforeach ($nums as $num) {\n\t\t$min = min(abs($min),\
    \ $num);\n\t}\n\treturn $min;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyikb7q8.php:21\n\
    Stack trace:\n#0 /tmp/tmpbyikb7q8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbyikb7q8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $start = 0;\n    $end = count($nums) - 1;\n    $ans\
    \ = 0;\n    while ($start <= $end) {\n        $mid = ($start + $end) / 2;\n  \
    \      if ($mid > 0 && $mid < count($nums) && $nums[$mid + 1] > $nums[$mid]) {\n\
    \            $ans += $mid * $nums[$mid];\n            $start = $mid + 1;\n   \
    \     } else {\n            $end = $mid - 1;\n        }\n    }\n    return $ans;\n\
    }\n\n/**\n * @return float\n */\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89spsbhp.php:32\n\
    Stack trace:\n#0 /tmp/tmp89spsbhp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp89spsbhp.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here.\n    $min = 0;\n    $max = 0;\n    foreach ($nums\
    \ as $num ) {\n        $min += $num;\n        $max += $num;\n    }\n    return\
    \ ($min < $max) ? $min : $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2k64no0f.php:23\n\
    Stack trace:\n#0 /tmp/tmp2k64no0f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2k64no0f.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $min_sum = PHP_INT_MAX;\n  $sum = 0;\n  foreach ($nums as $n) {\n    $sum\
    \ += $n;\n    if ($sum < $min_sum) {\n      $min_sum = $sum;\n    }\n  }\n  return\
    \ $min_sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj79garlv.php:24\n\
    Stack trace:\n#0 /tmp/tmpj79garlv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpj79garlv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $s = array_fill(0, count($nums), 0);\n    foreach ($nums as $k => $v)\
    \ {\n        for ($j = $k + 1; $j < count($nums); $j++) {\n            $s = min($s\
    \ + $v, $s[$k] + $nums[$j]);\n        }\n    }\n    return $s;\n}\n\n$a = array(1,\
    \ 2, 3, 4, 1);\necho minSubArraySum($a), \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp7yqf1i6_.php:11\n\
    Stack trace:\n#0 /tmp/tmp7yqf1i6_.php(18): minSubArraySum(Array)\n#1 {main}\n\
    \  thrown in /tmp/tmp7yqf1i6_.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $i => $number) {\n        if ($number\
    \ > 0) {\n            $sum += $number;\n        }\n    }\n    return $sum;\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nI like how you explained it in code.\n<|/\
    \ c |>\n<| c |>\nthank you for providing multiple ways of solving this problem,\
    \ I really appreciate it\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9s4zke92.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  // Your code here\n  $sum = 0;\n  foreach ($nums as $key => $num) {\n \
    \   $sum += $num;\n    if ($sum < 0) {\n      $sum = 0;\n    }\n  }\n  return\
    \ $sum;\n}\n\n$sum1 = minSubArraySum(array(3, -1, 4, 2, 3, 3));\n$sum2 = minSubArraySum(array(2,\
    \ 3, 2, -3));\n\necho $sum1;\necho $sum2;\n\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "144\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5okeh4x.php:30\n\
    Stack trace:\n#0 /tmp/tmpg5okeh4x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg5okeh4x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n\t$nums = array_filter($nums);\n\tsort($nums);\n\t$minimum = end($nums);\n\
    \tforeach ($nums as $key => $value) {\n\t\tif ($minimum >= $value + $nums[$key])\
    \ {\n\t\t\t$minimum = $value + $nums[$key];\n\t\t}\n\t}\n\treturn $minimum;\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbyv2za_.php:24\n\
    Stack trace:\n#0 /tmp/tmppbyv2za_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppbyv2za_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min_sum = INT_MAX;\n\n    $min_sum = array_reduce(\n        $nums,\n\
    \        function ($sum, $i) {\n            return min($sum, $i);\n        },\n\
    \        $min_sum\n    );\n\n    return $min_sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant INT_MAX - assumed 'INT_MAX' (this\
    \ will throw an Error in a future version of PHP) in /tmp/tmped2x_kec.php on line\
    \ 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmped2x_kec.php:26\n\
    Stack trace:\n#0 /tmp/tmped2x_kec.php(40): test()\n#1 {main}\n  thrown in /tmp/tmped2x_kec.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    foreach($nums as $n){\n        if($n > $min) $min = $n;\n\
    \    }\n    foreach($nums as $n){\n        if($n < $min) $min = $n;\n    }\n \
    \   return $min;\n}\n$a = minSubArraySum($array);\necho $a;\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp0g3kbyfb.php\
    \ on line 9\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp0g3kbyfb.php\
    \ on line 12\n0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0g3kbyfb.php:25\n\
    Stack trace:\n#0 /tmp/tmp0g3kbyfb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0g3kbyfb.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $num) {\n        if ($num > 0) {\n \
    \           $sum += $num;\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf35glfoa.php:21\n\
    Stack trace:\n#0 /tmp/tmpf35glfoa.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf35glfoa.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $min_sum = PHP_INT_MAX;\n  $min_sub_array = [];\n  for ($i = 0; $i < count($nums);\
    \ ++$i) {\n    $sub_array = array_slice($nums, $i, $i + 1);\n    if (!empty($sub_array))\
    \ {\n      $sub_res = minSubArraySum($sub_array);\n      if ($sub_res < 0) {\n\
    \        $min_sum = 0;\n        break;\n      }\n      $min_sum = Math.min($min_sum,\
    \ $sub_res);\n    }\n  }\n  return $min_sum;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Nice implementation, but I'd recommend using more descriptive variable names in\
    \ your example. :)\n<|/ c |>\n<| c |>\nThanks for your suggestion. :)\n<|/ c |>\n\
    <| c |>\n, Thanks for your nice solution, But there is a problem, when i use your\
    \ code with array with negative numbers it not work correct with negative numbers\
    \ please check your answer with below array.\n$array1 = [-2, -3, 4, -1, -10, 2,\
    \ -1, -10];\n<|/ c |>\n<| c |>\n, Yes, you are right. I didn't test it. Updated.\n\
    <|/ c |>\n<| a |>\nThis problem can be solved with recursion. Since this looks\
    \ like a homework question, I won't give you the answer, but here is the idea\
    \ of how to get started:\nThe base case is when the input is an empty array.\n\
    <code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmrc73e4s.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  if (count($nums) < 1) {\n    return 0;\n  }\n\n  $sums = array();\n  $sums[]\
    \ = $nums[0];\n  $sums[0] = $nums[0];\n\n  $i = 1;\n  for ($j = 1; $j < count($nums);\
    \ $j++) {\n    for ($k = count($sums); $k >= 1; $k--) {\n      $sums[$k] = $nums[$i]\
    \ + $sums[$k];\n    }\n    $sums[0] = $nums[$i] + $sums[0];\n    $i++;\n  }\n\n\
    \  return array_sum($sums);\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiunq085l.php:33\n\
    Stack trace:\n#0 /tmp/tmpiunq085l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpiunq085l.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    $j = 0;\n    foreach ($nums as $k=>$v) {\n \
    \       if ($min > $v) {\n            $min = $v;\n            $j = $k;\n     \
    \   }\n    }\n    return $nums[$j];\n}\n\n$arr2 = array();\n$arr2[] = '1';\n$arr2[]\
    \ = '2';\n$arr2[] = '3';\n$arr2[] = '4';\n$arr2[] = '5';\n\n$arr3 = array();\n\
    $arr3[] = '4';\n$arr3[] = '5';\n\n$arr4 = array();\n$arr4[] = '1';\n$arr4[] =\
    \ '3';\n\n$arr5 = array();\n$arr5[] = '2';\n$arr5[] = '4';\n$arr5[] = '3';\n\n\
    $arr6 = array();\n$arr6[] = '4';\n$arr6[] = '4';\n$arr6[] = '5';\n\n$arr7 = array();\n\
    $arr7[] = '1';\n$arr7[] = '3';\n$arr7[] = '4';\n$arr7[] = '5';\n\n$arr8 = array();\n\
    $arr8[] = '4';\n$arr8[] = '5';\n$arr8[] = '5';\n$arr8[] = '5';\n\n$arr9 = array();\n\
    $arr9[] = '3';\n$arr9[] = '4';\n$arr9[] = '5';\n$arr9[] = '5';\n$arr9[] = '6';\n\
    \n$arr10 = array();\n$arr10[] = '3';\n$arr10[] = '3';\n$arr10[] = '4';\n$arr10[]\
    \ = '5';\n$arr10[] = '5';\n$arr10[] = '7';\n\n$arr11 = array();\n$arr11[] = '1';\n\
    $arr11[] = '3';\n$arr11[] = '4';\n$arr11[] = '5';\n$arr11[] = '5';\n$arr11[] =\
    \ '5';\n\n$arr12 = array();\n$arr12[] = '1';\n$arr12[] = '2';\n$arr12[] = '3';\n\
    $arr12[] = '4';\n$arr12[] = '5';\n$arr12[] = '5';\n\n$arr13 = array();\n$arr13[]\
    \ = '1';\n$arr13[] = '3';\n$arr\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd_rfvb7n.php on line 91\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    foreach($nums as $num) {\n        $sum = 0;\n        $currentSum = 0;\n\
    \        foreach ($nums as $i => $v) {\n            if ($v < $num) continue;\n\
    \            $currentSum += $v;\n            $sum += $currentSum;\n        }\n\
    \        if ($sum > $num) continue;\n        return $sum;\n    }\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is too slow for big lists and doesn't return anything\
    \ if no such sum is found.\n<|/ c |>\n<| c |>\nThis is faster than all the other\
    \ solutions I've seen so far.\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8z6w_hql.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    for($i=1;$i<count($nums);$i++)\n    {\n        $sum = 0;\n        for($j=0;$j<count($nums);$j++)\n\
    \        {\n            if($nums[$j]>0)\n            {\n                $sum =\
    \ $sum + $nums[$j];\n            }\n        }\n        $sum = $sum+$nums[$i];\n\
    \        if($sum<0)\n        {\n            return $sum;\n        }\n    }\n \
    \   return 0;\n}\n</code>\n<|/ a |>\n<| c |>\ncan you please write down the explanation\n\
    <|/ c |>\n<| c |>\nWhat is this function doing? I mean, what does it do? Can you\
    \ explain what each step of this program is doing in the background?\n<|/ c |>\n\
    <| c |>\nI wrote the explanation down\n<|/ c |>\n<| c |>\nNice solution but this\
    \ solution will fail in case if all array is empty or if the array is already\
    \ empty or contain negative numbers.\n<|/ c |>\n<| a dscore=2 |>\nI used the recursive\
    \ function and array_filter to get the result\n<code>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppedg7l00.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n\tsort($nums);\n\t$smallest = array();\n\tforeach($nums as $value){\n\t\t\
    $smallest[] = $value;\n\t}\n\tfor($i = count($nums)-1; $i >= 0; $i--){\n\t\t$current\
    \ = $smallest[$i];\n\t\tforeach($smallest as $index => $value){\n\t\t\t$smallest[$index]\
    \ += $current;\n\t\t\tif($smallest[$index] > $nums[$i]){\n\t\t\t\tunset($smallest[$index]);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tksort($smallest);\n\treturn array_sum($smallest);\n\
    }\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !==\
    \ -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphq6is791.php:31\n\
    Stack trace:\n#0 /tmp/tmphq6is791.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphq6is791.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $subarray_sum = 0;\n    foreach ($nums as $val) {\n\
    \        $subarray_sum += $val;\n    }\n    $current_sum = 0;\n    foreach ($nums\
    \ as $val) {\n        $current_sum += $val;\n        if ($current_sum < $subarray_sum)\
    \ {\n            $subarray_sum = $current_sum;\n        }\n    }\n    return $subarray_sum;\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugxmshok.php:30\n\
    Stack trace:\n#0 /tmp/tmpugxmshok.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpugxmshok.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here.\n    $min = $nums[0];\n    foreach ($nums as\
    \ $value) {\n        if ($value < $min) {\n            $min = $value;\n      \
    \  }\n    }\n    return $min;\n}\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_u0zwee.php:23\n\
    Stack trace:\n#0 /tmp/tmpk_u0zwee.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk_u0zwee.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MIN;\n    $max = 0;\n    foreach ($nums as $key => $num)\
    \ {\n        if ($min > $num) $min = $num;\n        $max += $num;\n    }\n   \
    \ return ($min > $max ? $min : $max);\n}\n\nfunction candidate(...$args) {\n \
    \   return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cmxve9k.php:22\n\
    Stack trace:\n#0 /tmp/tmp6cmxve9k.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6cmxve9k.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $result = $nums[0];\n    for ($i = 1; $i < count($nums);\
    \ $i++) {\n        if ($nums[$i] - $nums[$i - 1] < $result) {\n            $result\
    \ = $nums[$i] - $nums[$i - 1];\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfamu0s_s.php:22\n\
    Stack trace:\n#0 /tmp/tmpfamu0s_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfamu0s_s.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums)) {\n        return null;\n    }\n\n    $minValue = null;\n\
    \    $minIndex = null;\n\n    for ($i = 0; $i < count($nums); $i++) {\n      \
    \  $sum = 0;\n\n        for ($j = $i + 1; $j < count($nums); $j++) {\n       \
    \     $sum += $nums[$j];\n        }\n\n        if ($sum < $minValue || $minValue\
    \ === null) {\n            $minValue = $sum;\n            $minIndex = $i;\n  \
    \      }\n    }\n\n    return $minValue;\n}\n\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t8186v0.php:36\n\
    Stack trace:\n#0 /tmp/tmp_t8186v0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_t8186v0.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return array_reduce($nums, function($result, $value) use($nums) {\n \
    \       if(!is_array($result)) {\n            return min($result, $value);\n \
    \       }\n\n        $sum = 0;\n        foreach($result as $subResult) {\n   \
    \         $sum += $subResult;\n        }\n        $result[] = $sum - $value;\n\
    \n        return $result;\n    }, []);\n}\n\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk_ejixh.php:28\n\
    Stack trace:\n#0 /tmp/tmpbk_ejixh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbk_ejixh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $sum = 0;\n  $minSum = PHP_INT_MAX;\n  foreach ($nums as $num) {\n    $sum\
    \ = $sum + $num;\n    if ($sum < $minSum) {\n      $minSum = $sum;\n    }\n  }\n\
    \  return $minSum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ro0og4p.php:24\n\
    Stack trace:\n#0 /tmp/tmp_ro0og4p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_ro0og4p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = PHP_INT_MAX;\n    foreach($nums as $value) {\n        $min +=\
    \ minSubArraySum($nums);\n        if ($min > $value) {\n            $min = $value;\n\
    \        }\n    }\n    return $min;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ dscore=1 |>\n<| c |>\nYeah i was thinking about it but I think the code can\
    \ be optimized better.\n<|/ c |>\n<| c |>\nI think it can be optimized, but not\
    \ sure how. Perhaps the best way to get it done would be to change some math.\
    \ `minSubArraySum` is really just a recursive function, to find the minimum sum\
    \ for an array. I'd think it would be better to rework that function to not use\
    \ recursion.\n<|/ c |>\n<| c |>\nHow can you optimize it better?\n<|/ c |>\n<|\
    \ c |>\nWell, I'm not sure I understand why you believe recursion is the best\
    \ way to get it done.\n<|/ c |>\n<| c |>\nI mean in that case how can you optimize\
    \ it without recursion\n<|/ c |>\n<| a tags=php,arrays,algorithm |>\nThe problem\
    \ is indeed the nested for loops that make the code extremely slow.\nHere's a\
    \ solution that has O(n^2) time complexity and O(n) space complexity:\n<code>\n\
    $min_sum = PHP_INT_MAX;\n$min_index = 0;\n$n = count($arr);\n\nfor ($i = 0; $i\
    \ < $n; $i++) {\n  for ($j = i + 1; $j < $n; $j++) {\n    if ($arr[$i] + $arr[$j]\
    \ < $min_sum) {\n      $min_sum = $arr[$i] + $arr[$j];\n      $min_index = $i;\n\
    \    }\n  }\n}\n\nreturn $arr[$min_index];\n</code>\nThe O(n^2) complexity comes\
    \ from having nested loops. Since you know that the outer loop will run n times,\
    \ the inner loop will run n - 1 times. Thus, each iteration the inner loop will\
    \ run n times. If you have a for loop inside another for loop, the inner loop\
    \ will be run n x n times.\nThis algorithm runs in O(n) time and O(n) space complexity\
    \ because in the worst case (when the array has only a single element), the inner\
    \ loop will be run n times.\n<|/ a dscore=1 |>\n<| c |>\ncan you explain how you\
    \ know it's O(n) and O(n) space complexity?\n<|/ c |>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe0t72d8i.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $sum = 0;\n  foreach ($nums as $num) {\n    $sum += $num;\n  }\n  foreach\
    \ ($nums as $num) {\n    $sum += $num;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuy5b0ass.php:23\n\
    Stack trace:\n#0 /tmp/tmpuy5b0ass.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpuy5b0ass.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum = $sum + $num;\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoi40f218.php:20\n\
    Stack trace:\n#0 /tmp/tmpoi40f218.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoi40f218.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $min = 0;\n    foreach ($nums as $num) {\n        $min = min($min, $num\
    \ + $min);\n    }\n    return $min;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you for explaining!\n<|/ c |>\n<| c |>\nThis solution only works for positive\
    \ integers. However, it should be possible to extend it to include negative numbers\
    \ using the subtraction method described here: http://stackoverflow.com/questions/1749064/sum-of-array-different-numbers\n\
    <|/ c |>\n<| a |>\nI solved this problem in another way, it is simple and easy.\n\
    <code>\nvar arr=[10,20,30];\nvar minSum=arr.reduce(function(a,b){return a+b;});\n\
    </code>\n<|/ a dscore=1 tags=php,arrays,sum,minimum |>\n<| a tags=php,arrays,sum,minimum\
    \ |>\nUsing array_reduce\n<code>\n$array = [1,2,3,4,5,6,7,8,9,10,11];\n\n$sum\
    \ = array_reduce($array, function($a, $b) {\n    return $a + $b;\n});\n\necho\
    \ $sum;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sum,minimum |>\nI used\
    \ array_sum() to calculate the total sum, then used min() to find the minimum\
    \ number from that sum. \n<code>\n<?php\n\n$numbers = [2,4,6,8,1,9];\n\n$sum =\
    \ array_sum($numbers);\n\n$min = min($numbers);\n\necho $sum; // output : 55\n\
    echo $min; // output : 1\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps1ej7dz5.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = PHP_INT_MAX;\n    foreach ($nums as $k => $num) {\n       \
    \ if ($num < 0) {\n            $nums[$k] = abs($num);\n        }\n\n        if\
    \ ($num >= $minSum) {\n            $minSum = $num;\n        }\n\n        $nums[$k]\
    \ = $num + $minSum;\n    }\n\n    return $minSum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis does not handle negative numbers. And it just returns the\
    \ first result found. It doesn't \"give the smallest sum\" at all.\n<|/ c |>\n\
    <| c |>\nThe question asks for _the smallest sum_, and it states that _all the\
    \ values are positive integers_.\n<|/ c |>\n<| c |>\nIt is not my question. I\
    \ just looked at the requirements and your answer is not an answer at all. I just\
    \ gave you my upvote.\n<|/ c |>\n<| c |>\nYes I agree with you but the question\
    \ asks for a \"minimum sum of any non-empty subarray\" and the answer does it\
    \ correctly.\n<|/ c |>\n<| c |>\nHow would you answer this question without taking\
    \ into account negative numbers?\n<|/ c |>\n<| a tags=php,math |>\nThis question\
    \ has a very good answer: Find minimal sum in an array\nIn PHP you can use the\
    \ array_filter function:\n<code>\n$array = array(2, 3, 4, 1, 2, 4);\n$sum = array_sum(array_filter($array,\
    \ function($e){return $e > 0;}));\necho $sum; // 1\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,math |>\nMy solution is not elegant but it does work:\n<code>\n\
    <?php\n\n$nums = [2, 3, 4, 1, 2, 4];\n$maxsum = -1;\n$minsum = 0;\nfor ($i=0;\
    \ $i<count($nums); $i++) {\n    if ($nums[$i] < $minsum) {\n        $minsum =\
    \ $nums[$i];\n    }\n    if ($nums[$i] > $maxsum) {\n        $maxsum = $nums[$i];\n\
    \    }\n}\n\n$minsum = $minsum + $maxsum;\necho \"Minsum is $minsum\";\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsd9bn1s5.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return minSubArraySumHelper(array_fill(0, count($nums), 0), 0, $nums);\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function minSubArraySumHelper()\
    \ in /tmp/tmpxdbh_v03.php:8\nStack trace:\n#0 /tmp/tmpxdbh_v03.php(12): minSubArraySum(Array)\n\
    #1 /tmp/tmpxdbh_v03.php(16): candidate(Array)\n#2 /tmp/tmpxdbh_v03.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxdbh_v03.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    return minSubArray($nums);\n}\n\nfunction candidate(...$args) {\n   \
    \ return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function minSubArray()\
    \ in /tmp/tmpgbrrddz0.php:8\nStack trace:\n#0 /tmp/tmpgbrrddz0.php(12): minSubArraySum(Array)\n\
    #1 /tmp/tmpgbrrddz0.php(16): candidate(Array)\n#2 /tmp/tmpgbrrddz0.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgbrrddz0.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Write your code here\n    $arr =array();\n    foreach($nums as $val){\n\
    \        if(isset($arr[$val])){\n            $arr[$val] = $arr[$val] + 1;\n  \
    \      }else{\n            $arr[$val] = 1;\n        }\n    }\n    $res = $nums[0];\n\
    \    foreach($arr as $val){\n        if($val > $res){\n            $res = $val;\n\
    \        }\n    }\n    return $res;\n}\n</code>\n<|/ a dscore=4 tags=arrays,php,sum\
    \ |>\n<| c |>\nI think he want minimum sum of subarray. Your solution is just\
    \ finding maximum value.\n<|/ c |>\n<| a dscore=4 tags=arrays,php,sum |>\nIf you\
    \ have an array with N integers and you need to find minimum sum of subarray you\
    \ can use this simple algorithm:\n<code>\n$array = [2,3,4,1,2];\n$sum = 0;\n$results\
    \ = [];\n$min = $array[0];\n\nforeach ($array as $item) {\n    if ($sum < $item)\
    \ {\n        $sum = $item;\n        $results = [$item];\n    } else if ($sum >\
    \ $item) {\n        $results[] = $item;\n    }\n}\n\nreturn $results;\n</code>\n\
    This simple algorithm works for N == 1 or 0 as well.\n<|/ a |>\n<| a tags=arrays,php,sum\
    \ |>\nThis works for me - I tested with random integers, not random arrays.\n\
    <code>\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1war276d.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    sort($nums);\n    $sum = 0;\n    foreach ($nums as $num) {\n        if\
    \ ($sum > $num) {\n            $sum = $num;\n        }\n    }\n    return $sum;\n\
    }\n\n$nums = array(4, 5, 6, 7, 8, 9); // 9 is the minimum sum\n\necho minSubArraySum($nums);\
    \ // 9\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37r0hyt1.php:26\n\
    Stack trace:\n#0 /tmp/tmp37r0hyt1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp37r0hyt1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    foreach($nums as $key => $value) {\n        if ($value == 0) {\n    \
    \        unset($nums[$key]);\n        } elseif ($value == -1 || $value == -2)\
    \ {\n            $nums[$key] = minSubArraySum($nums);\n        } elseif ($value\
    \ > 0) {\n            $newArray = array_filter($nums, function ($value) use ($value)\
    \ {\n                return $value != 0;\n            });\n            $newArray\
    \ = array_merge([$value], $newArray);\n            $nums[$key] = minSubArraySum($newArray);\n\
    \        }\n    }\n    return $nums[0];\n}\n\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use lexical variable $value as a parameter name in\
    \ /tmp/tmpxtd1beg_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    \n}\n</cell>\n<cell>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9oqvwt08.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n  $result = 0;\n  foreach($nums as $num) {\n    $result += $num;\n  }\n \
    \ if($result < PHP_INT_MAX) {\n    return $result;\n  }\n  return -1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwzeureob.php:23\n\
    Stack trace:\n#0 /tmp/tmpwzeureob.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwzeureob.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $s = minValue($nums);\n    $result = array();\n    foreach ($nums as\
    \ $v) {\n        if ($v != $s) {\n            $result = minValue($result + $v);\n\
    \        } else {\n            $result = minValue($result);\n        }\n    }\n\
    \n    return $result;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function minValue() in\
    \ /tmp/tmp9p5oxqb0.php:8\nStack trace:\n#0 /tmp/tmp9p5oxqb0.php(22): minSubArraySum(Array)\n\
    #1 /tmp/tmp9p5oxqb0.php(26): candidate(Array)\n#2 /tmp/tmp9p5oxqb0.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9p5oxqb0.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Your code here\n    $sum = 0;\n    foreach($nums as $n){\n       \
    \ $sum = $sum + $n;\n    }\n    return $sum;\n}\n\n$minSubArraySum = minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]);\necho $minSubArraySum;\nfunction candidate(...$args) {\n  \
    \  return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "16\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0c143ty7.php:23\n\
    Stack trace:\n#0 /tmp/tmp0c143ty7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0c143ty7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (empty($nums)) return 0;\n\n    $min_sum = PHP_INT_MAX;\n    $index\
    \ = 0;\n    for ($i = 0; $i < count($nums); $i++) {\n        if ($nums[$i] < $min_sum)\
    \ {\n            $min_sum = $nums[$i];\n            $index = $i;\n        }\n\
    \    }\n\n    return $min_sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80vlgw29.php:28\n\
    Stack trace:\n#0 /tmp/tmp80vlgw29.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp80vlgw29.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $nums = array_map(\"intval\", $nums);\n    $min = PHP_INT_MAX;\n    foreach\
    \ ($nums as $num) {\n        $min += $num;\n    }\n\n    $min = min($min, 0);\n\
    \    return $min;\n}\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw15xvgrx.php:23\n\
    Stack trace:\n#0 /tmp/tmpw15xvgrx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw15xvgrx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $result = -PHP_INT_MAX;\n    foreach ($nums as $num) {\n        $result\
    \ -= $num;\n        if ($result < -PHP_INT_MAX) {\n            return -PHP_INT_MAX;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7umg2b5.php:23\n\
    Stack trace:\n#0 /tmp/tmpw7umg2b5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw7umg2b5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // write your code here\n    $result = 0;\n    foreach ($nums as $num)\
    \ {\n        $result += $num;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbzjvuvn.php:21\n\
    Stack trace:\n#0 /tmp/tmpbbzjvuvn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbbzjvuvn.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $max = -999999999999;\n    $min = $max;\n    foreach($nums as $num) {\n\
    \        if($num < $min) {\n            $min = $num;\n        }\n        if($num\
    \ > $max) {\n            $max = $num;\n        }\n    }\n    return ($min + $max);\n\
    }\n\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3))\
    \ !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivtzv4ot.php:26\n\
    Stack trace:\n#0 /tmp/tmpivtzv4ot.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpivtzv4ot.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $minSum = PHP_INT_MAX;\n    $minIndex = 0;\n    foreach ($nums as $index\
    \ => $num) {\n        if ($minSum > $num) {\n            $minSum = $num;\n   \
    \         $minIndex = $index;\n        }\n    }\n    return $minSum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz52uy8up.php:25\n\
    Stack trace:\n#0 /tmp/tmpz52uy8up.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpz52uy8up.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    // Return the sum of the non-empty sub-arrays of nums.\n    // Each non-empty\
    \ sub-array is of size at most 2.\n    // The input array is not modified, and\
    \ is passed by reference.\n    // Only the sum is needed, and no sub-arrays are\
    \ accessed.\n    $sum = 0;\n    $n = count($nums);\n    // $n <= 0\n    if ($n\
    \ < 1) {\n        return 0;\n    }\n    // $n is 1\n    if ($n == 1) {\n     \
    \   return $nums[0];\n    }\n    // $n >= 2\n    $minSum = null;\n    // $nums\
    \ contains at least two elements\n    if ($nums[0] < $nums[1]) {\n        $minSum\
    \ = $nums[0];\n        $nums[0] = $nums[1];\n        $nums[1] = $minSum;\n   \
    \ }\n    $minSum = $nums[1];\n    for ($i = 2; $i < $n; ++$i) {\n        if ($nums[$i]\
    \ > $nums[$i - 1]) {\n            // $nums[$i] greater than $nums[$i - 1] AND\
    \ $minSum is null\n            $minSum = $nums[$i];\n        }\n    }\n    return\
    \ $minSum;\n}\necho minSubArraySum([2, 3, 4, 1, 2, 4]) . \"\\n\";\necho minSubArraySum([-1,\
    \ -2, -3]) . \"\\n\";\nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2,\
    \ -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n-2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ja0r0zb.php:46\n\
    Stack trace:\n#0 /tmp/tmp5ja0r0zb.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp5ja0r0zb.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    $result = array();\n    $i = $nums[0];\n\n    foreach ($nums as $j) {\n\
    \        $result[] = $i + $j;\n        $i = $j;\n    }\n    return $result[0];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nNice solution! But it seems quite complicated for\
    \ me and I don't know how you managed to come up with it.\n<|/ c |>\n<| c |>\n\
    I haven't seen anyone else do it! I tried to understand it but could not figure\
    \ it out.\n<|/ c |>\n<| c |>\nI understand it now, thank you. But it is still\
    \ very hard to understand.\n<|/ c |>\n<| c |>\nThis is what I was looking for.\
    \ Thanks!\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndef minSubArraySum(nums):\n   \
    \ minSum = nums[0]\n    i = 0\n    while(i < len(nums)):\n        j = i + 1\n\
    \        while(j < len(nums)):\n            minSum = minSum + nums[i]+nums[j]\n\
    \            j += 1\n        i += 1\n    return minSum\n</code>\n<|/ a tags=arrays,subarray,php\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$nums = [1, 2, 3, 4];\n$result = minSubArraySum($nums);\n\
    \nfunction candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !==\
    \ -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10,\
    \ -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100,\
    \ -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !==\
    \ -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg1o21jcg.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum($nums)\
    \ {\n    if (count($nums) === 0) {\n        return 0;\n    }\n\n    $subArraySum\
    \ = 0;\n\n    foreach ($nums as $num) {\n        $subArraySum += $num;\n    }\n\
    \n    $min = min($nums);\n\n    foreach ($nums as $i => $num) {\n        if ($num\
    \ > $min) {\n            $subArraySum -= $num;\n        } else {\n           \
    \ return $subArraySum + $num;\n        }\n    }\n\n    return $subArraySum + $min;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI believe you misunderstood me. I'm asking for\
    \ the smallest sum of any non-empty sub-array of the given array, not just the\
    \ first one.\n<|/ c |>\n<| c |>\nI see, I added an updated answer with what I\
    \ think will work.\n<|/ c |>\n<| a tags=algorithm,php,arrays |>\nThe following\
    \ is what I would use.  It is an iterative solution and should be fairly efficient\
    \ and can be extended to solve larger arrays.\n<code>\nfunction candidate(...$args)\
    \ {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999))\
    \ !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1,\
    \ 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10))\
    \ !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7))\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppcfpgdq3.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
