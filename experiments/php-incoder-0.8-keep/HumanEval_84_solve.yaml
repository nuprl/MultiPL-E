name: HumanEval_84_solve
language: php
prompt: "<?php\n// Given a positive integer N, return the total sum of its digits\
  \ in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output\
  \ should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should\
  \ be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be\
  \ \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n\
  // Output:\n// a string of binary number\nfunction solve($N) {\n"
tests: "function candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1000) !== \"1\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(150) !== \"110\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(147) !== \"1100\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(333) !== \"1001\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(963) !== \"10010\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $digits_sum = [];\n  $result = '';\n  for ($i = 0; $i < strlen($N);\
    \ $i++) {\n    $digits_sum[] = bindec($N[$i]);\n  }\n  sort($digits_sum);\n  foreach\
    \ ($digits_sum as $key => $value) {\n    if ($value == 1) {\n      $result .=\
    \ '1';\n    } else {\n      $result .= str_repeat('0', $value - 1);\n    }\n \
    \ }\n  return $result;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| a tags=php,algorithm\
    \ |>\nHere is a solution in javascript using an array.  I didn't test the performance\
    \ of the code against the other answers, but it seems to meet the requirement\
    \ and is very concise.\n\n<code>\nvar input = [\"0\", \"1\", \"10\", \"11\", \"\
    100\", \"101\", \"110\", \"111\", \"1000\", \"1001\", \"1010\", \"1011\", \"1100\"\
    , \"1101\", \"1110\", \"1111\"];\nvar output = [];\nfor(var i = 0; i < input.length;\
    \ i++){\n  output[i] = 0;\n  for(var j = 0; j < input[i].length; j++){\n    output[i]\
    \ += parseInt(input[i][j], 2)\n  }\n}\nvar result = '';\nfor(var i = output.length\
    \ - 1; i >= 0; i--){\n  if(output[i] === 1){\n    result += \"1\";\n  }else{\n\
    \    result += input[i].substring(0, input[i].length - 1);\n  }\n}\nconsole.log(result);</code>\n\
    \nThe same thing in PHP using bitwise operations\n\n<code>\n$input = [\"0\", \"\
    1\", \"10\", \"11\", \"100\", \"101\", \"110\", \"111\", \"1000\", \"1001\", \"\
    1010\", \"1011\", \"1100\", \"1101\", \"1110\", \"1111\"];\n$output = [];\nfor($i\
    \ = 0; $i < count($input); $i++){\n  $output[$i] = 0;\n  for($j = 0; $j < strlen($input[$i]);\
    \ $j++){\n    $output[$i] += (int)$input[$i][$j] >> 3\n  }\n}\n$result = '';\n\
    for($i = count($output) - 1; $i >= 0; $i--){\n  if($output[$i] === 1){\n    $result\
    \ .= \"1\";\n  }else{\n    $result .= substr($input[$i], 0, strlen($input[$i])\
    \ - 1);\n  }\n}\necho $result;</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is wrong,\
    \ `11111111` should be `1111` and not `11111` which is what the other solutions\
    \ do.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n$", "    $num = \"\
    \";\n    for($i = 0; $i < strlen(bin2hex($N)); $i++) {\n        $num.= $N % 2;\n\
    \        $N = floor($N / 2);\n    }\n    return $num;\n}", "  if ($N == 0) return\
    \ '0';\n  if ($N < 0) return '-1';\n  $sum = 0;\n  while ($N > 0) {\n    $sum\
    \ += $N % 2;\n    $N = ($N - $N) / 2; // Floor\n  }\n  return $sum;\n}\n\n$result\
    \ = solve($_GET['N']);\necho \"Answer: $result\";", "    $n = (string)$N;\n  \
    \  $s = '';\n    for ($i = 0; $i < strlen($n); $i++) {\n        $s = $n . $s;\n\
    \    }\n    return $s;\n}\n\n$n = '1234';\n\nprint_r(solve($n));", "    $sum =\
    \ 0;\n    for ($i = 0; $i < $N; $i++) {\n        $sum += $N % 2;\n        $N =\
    \ floor($N / 2);\n    }\n    return $sum;\n}", "    $sum = 0;\n    while ($N >\
    \ 0) {\n        $sum += $N % 2;\n        $N = floor($N / 2);\n    }\n    return\
    \ $sum;\n}", "    $total = 0;\n    while ($N > 0) {\n        $total = $total +\
    \ $N % 2;\n        $N = floor($N / 2);\n    }\n    return $total;\n}\n", "   \
    \ $binary = \"\";\n    while ($N > 0) {\n        $binary = dechex($N % 2) + $binary;\n\
    \        $N = (int)($N / 2);\n    }\n    return $binary;\n}\n", "  $total = 0;\n\
    \  for ($i = 0; $i < strlen(decbin($N)); ++$i) {\n    $total += pow(2, $i) * ord($N{$i});\n\
    \  }\n  return str_pad(decbin($total), strlen(decbin($N)), '0', STR_PAD_LEFT);\n\
    }\n", "    if ($N < 0) return '0';\n    $sum = 0;\n    while ($N > 0) {\n    \
    \    $N = $N / 10;\n        $sum += $N;\n    }\n    $ans = '';\n    while ($sum\
    \ > 0) {\n        $N = $sum % 10;\n        $ans .= \"$N\";\n        $sum = ($sum\
    \ - $N) / 10;\n    }\n    return $ans;\n}\n", "    // Initialize the string with\
    \ binary digits\n    $digits = \"\";\n    // Loop to add digits\n    for ($i =\
    \ 0; $i < strlen($N); $i++) {\n        // Convert the current digits to binary\
    \ and add them to the string\n        $digits .= dechex(bindec($N[$i]));\n   \
    \ }\n    // Return the resulting binary string\n    return $digits;\n}\n\n$input\
    \ = '146';\n\necho 'The sum of the digits of ' . $input . ' in binary is ' . solve($input)\
    \ . \"\\n\";", "    $sum = 0;\n    $base = 1;\n    $n = strlen($N);\n    for($i\
    \ = 1; $i <= $n; $i++) {\n        $sum += $N{$i} * $base;\n        $base *= 2;\n\
    \    }\n    return sprintf(\"%u\", $sum);\n}", "    // write your code in PHP7.0\n\
    \    $binaryArray = array_reverse(str_split(decbin($N), 8));\n    $sum = 0;\n\
    \    foreach ($binaryArray as $binary) {\n        $sum += $binary;\n    }\n  \
    \  return $sum;\n}\n$result = solve($_GET[\"N\"]);\necho \"Sum of digits of binary\
    \ of $N is: $result\";", "    $bin = array_fill(0, $N, 0);\n    for ($i = $N -\
    \ 1; $i >= 0; $i--) { // starting from the last digit to the first one\n     \
    \   $bin[$i] += $i & 1 ? 0 : 1;\n        $bin[$i] &= $i >> 1 & 1;\n    }\n   \
    \ return $bin;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe most efficient solution\
    \ should be `O(1)` instead of `O(n)`.\n<|/ c |>\n<| c |>\nPlease explain how this\
    \ works. I understand that $bin[$i] += $i & 1 ? 0 : 1;\n$bin[$i] &= $i >> 1 &\
    \ 1; are manipulating the binary numbers represented by $bin. But where are you\
    \ getting the value for $i from the recursive call? And how do you know it works?\n\
    <|/ c |>\n<| c |>\nThe OP is looking for the sum of digits in the binary representation\
    \ of N, not the binary representation in binary of N. He is starting from the\
    \ last digit, adding it to a variable called $bin[$i], and if the last digit is\
    \ 1 then we add 1 to $bin[$i], otherwise we add 0.\n<|/ c |>\n<| c |>\nI guess\
    \ it works because `bin($N)` returns binary representation of N, and `bin($N-1)\
    \ returns binary representation of N-1`, which means they are the same length\
    \ and we know how many times we have to sum up each digit. So, it should be easy\
    \ to get from the beginning to the end.\n<|/ c |>\n<| c |>\nThe `bin($N)` returns\
    \ binary representation of N, and `bin($N-1) returns binary representation of\
    \ N-1` doesn't make sense. There is no way to calculate the sum of digits in binary\
    \ representation of N-1. This will require a loop from 0 to N. `bin($N-1)` returns\
    \ the binary representation of the number N-1. How do you know that there is a\
    \ loop from 0 to N?\n<|/ c |>\n<| a tags=php,algorithm dscore=2 |>\n<code>", " \
    \ $ans = \"0\";\n\n  for ($i = 0; $i < strlen($ans); $i++) {\n    $ans .= dechex($N\
    \ & hexdec($ans[$i]));\n    $N >>= 8;\n  }\n  return $ans;\n}", "    $numbers\
    \ = str_split(decbin($N));\n    $sum = 0;\n    foreach ($numbers as $digit) {\n\
    \        if ($digit == \"1\") {\n            $sum += 1;\n        } else {\n  \
    \          $sum -= 1;\n        }\n    }\n    return $sum;\n}\n\n$input = file_get_contents('php://stdin');\n\
    $input = trim($input);\n$data = explode(\" \", $input);\n$N = $data[0];\n$result\
    \ = solve($N);\necho \"Case #\" . ++$case . \":\" . $result;", "    $result =\
    \ \"\";\n    $powers = array();\n\n    for ($i = 1; $i < $N; $i++) {\n       \
    \ $result = ($result . \"1\");\n        $powers[] = 1;\n    }\n\n    $sum = 0;\n\
    \    for ($i = count($powers) - 1; $i >= 0; $i--) {\n        $sum = ($sum * 2)\
    \ + ($powers[$i] % 2);\n        $powers[$i] /= 2;\n    }\n\n    $result = $sum\
    \ % 10;\n    if ($result < 1) {\n        $result = $result.\"0\";\n    }\n\n \
    \   return $result;\n}\n", "    $result = '';\n    while ($N != 0) {\n       \
    \ $result = str_pad($result, $N / 4, '0', STR_PAD_LEFT);\n        $result = $result\
    \ . $N % 10;\n        $N = ($N - $N / 10) * 10;\n    }\n    return $result;\n\
    }\n\n$testCases = [\n    ['0' => 0],\n    ['1' => 1],\n    ['2' => 10],\n    ['3'\
    \ => 11],\n    ['4' => 100],\n    ['5' => 101],\n    ['6' => 110],\n    ['7' =>\
    \ 111],\n    ['8' => 1000],\n    ['9' => 1001],\n    ['10' => 1010],\n    ['11'\
    \ => 1011],\n    ['12' => 1100],\n    ['13' => 1101],\n    ['14' => 1110],\n \
    \   ['15' => 1111],\n    ['16' => 10000],\n    ['17' => 10001],\n    ['18' =>\
    \ 10010],\n    ['19' => 10011],\n    ['20' => 10100],\n    ['21' => 10101],\n\
    \    ['22' => 10110],\n    ['23' => 10111],\n    ['24' => 11100],\n    ['25' =>\
    \ 11101],\n    ['26' => 11110],\n    ['27' => 11111],\n    ['28' => 100000],\n\
    \    ['29' => 100001],\n    ['30' => 100010],\n    ['31' => 100011],\n    ['32'\
    \ => 100100],\n    ['33' => 100101],\n    ['34' => 100110],\n    ['35' => 100111],\n\
    \    ['36' => 101010],\n    ['37' => 101011],\n    ['38' => 101110],\n    ['39'\
    \ => 101111],\n    ['40' => 111000],\n    ['41' => 111001],\n    ['42' => 111010],\n\
    \    ['43' => 111011],\n    ['44' => 111100],\n    ['45' => 111101],\n    ['46'\
    \ => 111110],\n    ['47' => 111111],\n    ['48' => 1000000],\n    ['49' => 1000001],\n\
    \    ['50' => 1000010],\n    ['51' => 1000011],\n    ['52' => 1000100],\n    ['53'\
    \ => 1000101],\n    ['54' => 1000110],\n    ['55' => 1001000],\n    ['56' => 1001001],\n\
    \    ['57' => 1001010],\n    ['58' => 1001011],\n    ['59' => 1001100],\n    ['60'\
    \ => 1001101],\n    ['61' => 1001110],\n    ['62' => 1001111],\n    ['63' => 1010000],\n\
    \    ['64' => 1010001],\n    ['65' => 1010010],\n    ['66' => 1010011],\n    ['",
  "    $sum = 0;\n    while ( ($N >= 10) && ($N > 0) ) {\n        $N = $N / 10;\n\
    \        $sum = $sum + $N % 2;\n    }\n    $sum = $sum + $N;\n    return $sum;\n\
    }\n", "    if ($N < 10) {\n        return \"0$N\";\n    }\n\n    // the sum of\
    \ the digits in binary\n    $s = 0;\n    // the number of digits in decimal\n\
    \    $d = count($N) - 1;\n\n    // loop from N to the power of ten (10)\n    for\
    \ ($i = $N; $i > 0; $i *= 10) {\n        // add the digit to the sum\n       \
    \ $s += $i % 10;\n        // remove the digit from the number\n        $i /= 10;\n\
    \    }\n\n    // if there is a remainder then we append it to the last digit\n\
    \    if ($i > 0) {\n        $s += $i;\n    }\n\n    // convert to a binary string\n\
    \    $bin = str_pad(decbin($s), $d, \"0\", STR_PAD_LEFT);\n\n    // loop through\
    \ each digit in the binary string\n    $sum = 0;\n    foreach (str_split($bin)\
    \ as $bit) {\n        // sum the digits of $bin and $bit\n        $sum += intval(substr($bit,\
    \ -1));\n    }\n\n    // return the result\n    return \"$sum\";\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nI think I see your error - you want the sum of digits\
    \ to be the answer, not the number of digits to begin with. Try this instead:\n\
    <code>", "    $n = $N;\n    $sum = 0;\n    $binary_array = array();\n\n    while\
    \ ($n > 0) {\n        $binary_array[] = decbin($n);\n        $n = $n % 10;\n \
    \       $sum += $n;\n    }\n\n    return $binary_array[$binary_array[0] > 1 ?\
    \ '1' : '0'];\n}\n\n$tests = array(\n    array(\"1000\", 1),\n    array(\"150\"\
    , 6),\n    array(\"147\", 12),\n);\n", "    $str = base_convert($N, 10, 2);\n\
    \    $total = 0;\n    $len = strlen($str);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $total += $str[$i];\n    }\n    $str = base_convert($total, 2, 10);\n\
    \    return $str;\n}\n", "  $sum = 0;\n  for ($i = 0; $i < $N; $i++) {\n    $sum\
    \ = $sum * 2 + $N % 10;\n    $N = ($N - $N % 10) / 10;\n  }\n  return $sum;\n}",
  "    $arr = array();\n    do {\n        $arr[] = $N % 2;\n        $N = $N / 2;\n\
    \    } while ($N > 0);\n    $result = '';\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $result = $result . str_pad('', $i + 1 - strlen($result), '0')\
    \ . $arr[$i];\n    }\n    return $result;\n}\n\n$N = 147;\necho solve($N);", " \
    \   $sum = 0;\n    while ($N > 0) {\n        $sum += ($N % 2) ? '0' : '1';\n \
    \       $N = ($N - $N / 2 ) / 2;\n    }\n    return $sum;\n}", "    $s = \"\"\
    ;\n    $sum = 0;\n    $x = $N;\n    while ($x > 0) {\n        $x = $x / 10;\n\
    \        $sum = $sum + $x;\n    }\n    echo str_pad(decbin($sum), 8, \"0\", STR_PAD_LEFT);\n\
    }", "    $S = \"\";\n    while ($N != 0) {\n        if ($N % 2 == 1) {\n     \
    \       $S .= \"1\";\n        } else {\n            $S .= \"0\";\n        }\n\
    \        $N = $N / 2;\n    }\n    return $S;\n}\n", "    $remainder = 0;\n   \
    \ $result = '';\n    while ($N > 0) {\n        $result = $N % 2 + $result;\n \
    \       $N = floor($N / 2);\n    }\n    $result = $N % 2 + $result;\n    return\
    \ $result;\n}\n", "    $sum = 0;\n    do {\n        $result = $N % 2;\n      \
    \  $N = $N / 2;\n        $sum += $result;\n    } while($N);\n\n    return $sum;\n\
    }\n", "    // base case\n    if ($N < 10) {\n        return $N;\n    }\n\n   \
    \ $sum = 0;\n    $ret = '';\n    // compute sum of digits in binary\n    for ($i\
    \ = 0; $i < strlen($N); $i++) {\n        $sum += $N{$i} == \"1\" ? 1 : 0;\n  \
    \  }\n\n    // print out result with space\n    for ($i = 0; $i < $sum; $i++)\
    \ {\n        $ret .= \"1\";\n    }\n    return $ret;\n}\n\n$input = \"14615\"\
    ;\n$output = solve($input);\n\necho $output;", "    \n    // Write your code in\
    \ PHP5.\n\n    $sum = 0;\n    $binNum = '';\n    while(n > 0){\n        $div =\
    \ floor($N / 2);\n        $binNum += str_pad(decbin($div), strlen('1'.bindec('1'.$N)),\
    \ 0, STR_PAD_LEFT);\n        $N = $N - $div;\n        $sum++;\n    }\n    $binNum\
    \ = str_pad(decbin($N), strlen('1'.bindec('1'.$N)), 0, STR_PAD_LEFT);\n    \n\
    \    return $binNum;\n}\n\n$tests = array(\n    array(1, \"1\"),\n    array(2,\
    \ \"11\"),\n    array(3, \"101\"),\n    array(4, \"1110\"),\n    array(5, \"1111\"\
    ),\n    array(6, \"1101\"),\n    array(7, \"11100\"),\n    array(8, \"111101\"\
    ),\n    array(9, \"111110\"),\n    array(10, \"111111\"),\n    array(15, \"11111101\"\
    ),\n    array(100, \"111111110\"),\n    array(200, \"1111111101110\"),\n    array(400,\
    \ \"111111110111101101\"),\n    array(800, \"11111111011111011111010\"),\n   \
    \ array(1200, \"1111111101111101111101101001000\"),\n    array(1600, \"1111111111111111111111111111111000110100111010111110011100111111110111110111110101000011001001101001110100111101111001001110010001001\"\
    ),\n);\n\nforeach ($tests as $test) {\n    $output = solve($test[0]);\n    echo\
    \ sprintf(\"The sum of digits of %d is %s.\\n\", $test[0], $output), \"\\n\";\n\
    }\n", "    $arr = str_split(str_pad(decbin($N), 32, '0', STR_PAD_LEFT), 4);\n\
    \    foreach ($arr as &$i) {\n        $i = $i === '1' ? 1 : 0;\n    }\n    return\
    \ array_sum($arr);\n}\n\n$t = array_sum(array_map('solve', range('0' .. '9999999')));\n\
    echo \"$t solutions\";", "    if ($N < 0 || $N > 10000) return \"-1\";\n    $res\
    \ = '1';\n    for ($i = 2; $i <= $N; $i++) {\n        $res = $res * 10 + $N %\
    \ 2;\n        $N = $N / 2;\n    }\n    return $res;\n}\n", "    $str = \"\";\n\
    \    $total = 0;\n    while (abs($N) >= 1) {\n        if ($N & 1) $str .= $N;\n\
    \        $total++;\n        $N >>= 1;\n    }\n    return $str;\n}", "    $binary_number\
    \ = '';\n\n    while(n > 0){\n        $binary_number .= $n % 2;\n        $n =\
    \ intval($n / 2);\n    }\n    $binary_number = str_split($binary_number);\n\n\
    \    for($i = 0; $i < count($binary_number); $i++){\n        $binary_number[$i]\
    \ = $binary_number[$i].'0';\n    }\n\n    for($i = 0; $i < count($binary_number);\
    \ $i++){\n        $binary_number[$i] = $binary_number[$i].'1';\n    }\n\n    $binary_number\
    \ = implode('', $binary_number);\n\n    return $binary_number;\n}\n</code>\n<|/\
    \ a |>\n<| a |>\nSolution using recursive function.\n<code>", "    $sum = 0;\n\
    \    $str = decbin($N);\n    $str1 = str_split($str);\n    for($i=0;$i<count($str1);$i++){\n\
    \        $sum+=intval($str1[$i]);\n    }\n    return $sum;\n}\n</code>\n<|/ a\
    \ dscore=0 tags=php,algorithm |>\n<| a |>\n<code>\n$sum = 0; $string1 = \"\";\
    \ $string2 = \"\";\n$number = 123;\nwhile(number > 0){\n    $string2 .= $number%2;\n\
    \    $number = floor($number/2);\n    $sum+=intval($string2);\n}\necho $sum;\n\
    </code>\n<|/ a tags=php,algorithm dscore=0 |>\n<| a tags=php,algorithm |>\n<code>\n\
    $sum = 0;\n$number = 123; // or anything else\nwhile(number > 0) {\n    $sum +=\
    \ $number%2;\n    $number = floor($number/2);\n}\necho $sum;\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$a = pow(2, 20);\n$sum = 0;\nwhile ($a\
    \ > 0) {\n    $b = $a%2;\n    $a = floor($a/2);\n    $sum += $b;\n}\necho $sum;",
  "    // turn input into a binary string\n    $binary = str_pad(decbin($N), 8, \"\
    0\", STR_PAD_LEFT);\n\n    // get the length of the binary string\n    $length\
    \ = strlen($binary);\n\n    // initialize a variable that will hold our sum\n\
    \    $sum = 0;\n\n    // loop through each digit in the binary string\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        // add this digit to the sum\n     \
    \   $sum += pow(2, $i);\n\n        // if the last two digits were a 1\n      \
    \  if ($binary[$length - $i-1] == \"1\" && $binary[$length - $i] != \"0\") {\n\
    \            $sum += $binary[$length - $i];\n        }\n    }\n\n    // return\
    \ the result of the sum as a binary string\n    return $sum;\n}", "    $retStr\
    \ = \"\";\n    while ($N > 0) {\n        $retStr.= $N & 1 ? \"1\" : \"0\";\n \
    \       $N >>= 1;\n    }\n    return $retStr;\n}\n", "    $res = [];\n    $num\
    \ = 0;\n    while ($N > 0) {\n        $num += $N & 1;\n        $N >>= 1;\n   \
    \ }\n    for ($i = 0; $i < strlen($num); $i++) {\n        $res[] = str_pad($num[$i],\
    \ $i, 0, STR_PAD_LEFT);\n    }\n    return implode('', $res);\n}", "    $sum =\
    \ 0;\n    $lastBinaryDigit = 0;\n    $currentBinaryDigit = 0;\n\n    for($i =\
    \ 0; $i < strlen($N); $i++) {\n        $currentBinaryDigit = intval($N[$i]);\n\
    \        $sum += $currentBinaryDigit;\n        $lastBinaryDigit = $currentBinaryDigit;\n\
    \    }\n    $result = $lastBinaryDigit + $sum;\n    return $result;\n}\n", " \
    \ $sum = 0;\n  if ($N < 10) {\n    return sprintf('%010b', $N);\n  }\n  foreach\
    \ (str_split($N, 1) as $digit) {\n    $sum += pow(2, $digit);\n  }\n  return sprintf('%010b',\
    \ $sum);\n}\n\necho solve($argv[1]) . \"\\n\";\n", "    $S = \"\";\n    if ($N\
    \ == 0) return $S;\n    \n    $S = $N & 1 ? '1' : '0';\n    $N = floor($N/2);\n\
    \    \n    $S = $S . $N;\n    \n    return solve($N);\n}\n\necho solve($N);",
  "    $binary = '';\n    while (bindec($binary) != $N) {\n        $binary .= str_split($bindec($binary))[1];\n\
    \    }\n    return $binary;\n}\n\n$number = '14';\n$digits = str_split($number);\n\
    $sumOfDigits = array_sum($digits);\n$binaryString = (solve($sumOfDigits));\necho\
    \ $binaryString;", "  $binaryNum = \"\";\n  while($N > 0){\n    $binaryNum = $binaryNum\
    \ + ((floor($N / 10) % 2) == 0 ? \"1\" : \"0\");\n    $N = $N / 10;\n  }\n  return\
    \ $binaryNum;\n}", "    // TODO: your code here\n    return $N;\n}\n", "    $numStr\
    \ = \"\"; //Initialize a string of binary number\n    $remainder = 0; //Initialize\
    \ remainder\n    $sum = 0; //Initialize sum\n\n    // Loop through N and convert\
    \ each digit into binary\n    while($N) {\n        $numStr .= decbin($N%2); //Add\
    \ decimal to binary string\n        $N = $N/2;        //Divide N by 2 to get the\
    \ remainder\n    }\n\n    //Convert binary to decimal and add to the sum\n   \
    \ for($i = 0; $i < strlen($numStr); $i++) {\n        $sum += pow(2, $i);\n   \
    \ }\n    \n    //Convert the decimal sum to binary and return the result\n   \
    \ return $sum%2 != 0 ? '0' : '1';\n}", "    $bin = \"\";\n    $curSum = 0;\n \
    \   do {\n        $curSum = $curSum + $N % 2;\n        $N = $N / 2;\n    } while\
    \ ($N > 0);\n    return $curSum > 0 ? $bin.sprintf('%0d', $curSum) : \"\";\n}",
  "    $bin = '';\n    $N = array_sum(str_split($N));\n    for ($i = $N; $i > 0; $i--)\
    \ {\n        $bin = str_pad(decbin($i), 8, '0', STR_PAD_RIGHT) . strtolower($bin);\n\
    \    }\n    return $bin;\n}\n\n$tests = array();\n$tests[] = array(1000, '');\n\
    $tests[] = array(150, '1');\n$tests[] = array(147, '110');\n$tests[] = array(145,\
    \ '1111');\n$tests[] = array(15, '11111');\n$tests[] = array(13, '110011');\n\
    $tests[] = array(12, '110010');\n$tests[] = array(8, '1100100');\n$tests[] = array(3,\
    \ '11001000');\n$tests[] = array(2, '110010000');\n$tests[] = array(0, '1100100000');\n\
    $tests[] = array(-2, '1100110000');\n$tests[] = array(-3, '11001100001');\n$tests[]\
    \ = array(-4, '110011000010');\n$tests[] = array(-5, '1100110000100');\n$tests[]\
    \ = array(-6, '11001100001000');\n$tests[] = array(-7, '110011000010000');\n$tests[]\
    \ = array(-10, '1100110000100000');\n$tests[] = array(-12, '11001100001000000');\n\
    $tests[] = array(-14, '110011000010000001');\n$tests[] = array(-15, '1100110000100000010');\n\
    $tests[] = array(-16, '11001100001000000100');\n$tests[] = array(-17, '110011000010000001000');\n\
    $tests[] = array(-18, '1100110000100000010000');\n$tests[] = array(-20, '11001100001000000100000');\n\
    $tests[] = array(-22, '110011000010000001000000');\n$tests[] = array(-24, '1100110000100000010000001');\n\
    $tests[] = array(-25, '11001100001000000100000010');\n$tests[] = array(-26, '110011000010000001000000100');\n\
    $tests[] = array(-27, '1100110000100000010000001000');\n$tests[] = array(-28,\
    \ '11001100001000000100000010000');\n$tests[] = array(-30, '110011000010000001000000100000');\n\
    $tests[] = array(-32, '1100110000100000010000001000000');\n$tests[] = array(-34,\
    \ '110011000010000001000000", "    $binary = \"\";\n    $sum = 0;\n    while ($N\
    \ > 0) {\n        $binaryDigit = $N % 2;\n        $sum = $sum + $binaryDigit;\n\
    \        $N = $N / 2;\n    }\n    $binary = $binary + $sum;\n    return $binary;\n\
    }\n</code>\n<|/ a tags=sum-of-digits,php,string |>\n<| c |>\nthanks a lot :) this\
    \ is exactly what I was looking for. Could you tell me how can I add it to my\
    \ code? I know that I have to use some kind of a loop, but I don't know which\
    \ one\n<|/ c |>\n<| c |>\nThe while loop is what you are looking for! :)\n<|/\
    \ c |>\n<| c |>\nI have edited my post. Your code is not good enough for me to\
    \ understand how to use it. Can you help me please? I would really appreciate\
    \ it.\n<|/ c |>\n<| c |>\nJust call your function with `$N` parameter. `echo solve($N);`\n\
    <|/ c |>\n<| a tags=sum-of-digits,php,string |>\nTry this code\n\n<code>\n$N=1500;\n\
    echo $N = 1500;\n$Sum = 0;\n$Sum = base_convert($N,10,2);\necho $Sum;\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work.. It doesn't give the right\
    \ sum for me\n<|/ c |>\n<| a tags=sum-of-digits,php,string |>\n<code>\n<?php",
  "  $sum = 0;\n  $string = \"\";\n\n  for ($i = $N; $i > 0; $i--) {\n    $sum +=\
    \ ($i % 2);\n    $string .= $i / 2;\n  }\n\n  return $string . $sum;\n}\n", " \
    \ $sum = 0;\n  for ($i = 1; $i <= $N; $i++) {\n    $sum += ($i - 1) . $i;\n  }\n\
    \  return $sum;\n}\n\n$numbers = new RangeIterator(100, 0, -1);\n$result = array_sum($numbers);\n\
    $expected = \"100\";\n$result = solve($result);\necho \"Solution is $result \\\
    nExpected: $expected \\n\";", "    $N = (int)$N;\n    if($N < 0) { return \"no\
    \ valid input\"; }\n    $sum = (int)1;\n    $base = 2;\n    while($N > 0) {\n\
    \        $sum += ($N & $base);\n        $N = (int)(($N - $base + 1) / $base);\n\
    \    }\n    return $sum;\n}\necho \"Total sum of digits in the binary of $N is\
    \ \".solve(1000);", "    $binary = \"0\";\n    while($N) {\n        if($N%2 ==\
    \ 0)\n            $binary = $binary.\"1\";\n        else\n            $binary\
    \ = $binary.\"0\";\n        $N = $N/2;\n    }\n    return $binary;\n}", "    $sum\
    \ = 0;\n    do {\n        $sum += pow(2, $N) - 1;\n        $N--;\n    } while\
    \ (0 !== $N);\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nA simple approach to count number of digits recursively.\n<code>\npublic\
    \ function digitCount($num){\n    $count = 1;\n    $num *= 10; // convert to decimal\n\
    \    while($num){\n        $count += $num % 10;\n        $num = floor($num / 10);\n\
    \    }\n    return $count;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\
    This doesn't count the digits in binary.\n<|/ c |>\n<| a tags=php,algorithm dscore=0\
    \ |>\nSolution with PHP:\n<code>", "  $sum = 0;\n  for ($i = 1; $i <= str_pad(base_convert($N,\
    \ 10, 2), 8, '0', STR_PAD_LEFT); $i++) {\n    $sum += base_convert($i, 10, 2);\n\
    \  }\n  return $sum;\n}\n</code>\n<|/ a dscore=0 tags=php |>\n<| a dscore=0 tags=php\
    \ |>\n<code>\n<?php", "    $binary = \"\"; // binary string from 0 to 2^(N-1)\n\
    \    // loop N times\n    for ($i = 0; $i < $N; $i++) {\n        // loop until\
    \ it reaches 2^(N-1) and store its binary string\n        for ($j = 0; $j <= $N\
    \ - 1; $j++) {\n            // get and store current digit\n            $current\
    \ = $N % (pow(2, $j));\n            $binary .= $current;\n            // divide\
    \ N by current digit\n            $N = $N / (pow(2, $j));\n        }\n    }\n\
    \    // reverse the binary string\n    $reversed_binary = '';\n    for ($i = 0;\
    \ $i < strlen($binary); $i++) {\n        $reversed_binary .= $binary[$i];\n  \
    \  }\n    // echo reversed binary string\n    echo $reversed_binary;\n}", "  \
    \  $string = \"\";\n    $result = \"\";\n\n    for ($i = 0; $i < strlen($N); $i++)\
    \ {\n        $bin = $N[$i];\n        $bin = str_pad(decbin($bin), $i, \"0\", STR_PAD_LEFT);\n\
    \        $result = $result . $bin;\n    }\n\n    return $result;\n}\n\n$N = 1000;\n\
    echo \"The sum of digits is \" . solve($N) . \"\\n\";", "    return (string)$N;\n\
    }", "    while(N){\n        $n = ($N%10) + 1;\n        $total = $total + $n;\n\
    \        $N = $N/10;\n    }\n    if($total%2 != 0){\n        $total = $total -\
    \ 1;\n    }\n    return $total;\n}\n", "    $binary = '';\n    while ($N != 0)\
    \ {\n        $reversedN = strrev($N);\n        $reversedN = $reversedN[0];\n \
    \       $binary = $reversedN;\n        $N = substr($N, 1);\n    }\n    return\
    \ $binary;\n}", "  $res = \"\";\n  for ($i = 1; $i <= ($N / 2); $i++) {\n    $res\
    \ .= $i;\n  }\n  return $res;\n}\n\n</code>\n<|/ a |>\n<| a |>\nMy solution is\
    \ in Python, using the Binary module.\n<code>\ndef binary(n):\n    s = bin(n)[2:]\n\
    \    res = len(s) - len(s.lstrip('0'))\n    return bin(n).lstrip('0b') + str(res)\n\
    </code>\n<|/ a tags=binary,php,algorithm dscore=2 |>\n<| a dscore=1 |>\nA simple\
    \ solution in PHP:\n<code>", "    if ($N < 0) return 'N < 0';\n    if ($N < 10)\
    \ return $N;\n    $sum = 0;\n    $result = $N;\n    $N = strval($N);\n    $N =\
    \ str_replace(\"0\", \"1\", $N);\n    $N = str_replace(\"1\", \"0\", $N);\n  \
    \  $N = str_replace(\"10\", \"11\", $N);\n    $N = str_replace(\"11\", \"10\"\
    , $N);\n\n    $result = strval($result);\n    $result = str_replace(\"0\", \"\
    1\", $result);\n    $result = str_replace(\"1\", \"0\", $result);\n    $result\
    \ = str_replace(\"10\", \"11\", $result);\n    $result = str_replace(\"11\", \"\
    10\", $result);\n\n    do {\n        $result = str_pad($result, 2, '0', STR_PAD_LEFT);\n\
    \        $sum += $result;\n        $result = str_replace(\"1\", \"10\", $result);\n\
    \    } while ($result > 0);\n\n    return $sum;\n}", "    if ($N < 0 ) {\n   \
    \     return \"0\";\n    }\n    $sum = 0;\n    $binNum = \"\";\n    $len = strlen(decbin($N));\n\
    \    for($i = 0; $i <= $len; $i++) {\n        $sum += $N % 2;\n        $binNum\
    \ .= decbin($N);\n        $N = $N / 2;\n    }\n    return $binNum;\n}\n", "  \
    \  $result = '';\n    $N = (string)$N;\n    if (strlen($N) != strrpos($N, \".\"\
    )) {\n        return NULL;\n    }\n    $n = strpos($N, \".\");\n    $sum = (int)substr($N,\
    \ 0, $n);\n    if ($n == 0) {\n        $result = \"0\";\n    } else {\n      \
    \  for ($i = $n - 1; $i >= 0; $i--) {\n            $result .= \"1\" . substr($N,\
    \ $i, 1);\n        }\n    }\n    return $result . $sum;\n}\n\nvar_dump(solve(0));\n\
    var_dump(solve(1000));\nvar_dump(solve(150));\nvar_dump(solve(147));\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nthank you very much. but i need an algorithm that\
    \ can run on any number. can you help me with that?\n<|/ c |>\n<| c |>\nYeah,\
    \ I edited my answer to provide you with an algorithm that can handle any number.\
    \ Now you just need to adapt the code above to work with your variable.\n<|/ c\
    \ |>\n<| c |>\nI edited the code again, now it handles floats as well.\n<|/ c\
    \ |>\n<| c |>\nThanks but can you please explain why i need to use \"strlen($N)\
    \ != strrpos($N, \".\")\" because i tried it without that and i didn't get correct\
    \ result. thanks\n<|/ c |>\n<| c |>\nI edited my answer again. The reason you\
    \ need to do this, is because the \"...\" in the string are counted as part of\
    \ the string, so \"....\" would become \"..\". This means that \"....\" would\
    \ be counted as 2 characters and you cannot simply add 1 to the sum, since it\
    \ would be greater than 2 characters.\n<|/ c |>\n<| a |>\n<code>\n<?php\n", " \
    \   // Write your code here.\n    $str = '';\n    $x = $N % 2;\n    $N = $N /\
    \ 2;\n    while($N > 0){\n        $str = $str . $x;\n        $N = $N % 2;\n  \
    \  }\n    return $str;\n}\n\n$nums = array(147, 150, 100);\nforeach ($nums as\
    \ $N){\n    echo solve($N).\"\\n\";\n}", "    $N = (string)$N;\n    $sum = 0;\n\
    \    $binary = array();\n    $countDigits = strlen($N);\n    $countZeros = $countDigits\
    \ - strlen(ltrim($N, \"0\"));\n    \n    for($i = 0; $i < $countDigits; $i++)\
    \ {\n        $binVal = substr($N, $i, 1);\n        $sum += $binVal * pow(16, $i);\n\
    \        $binary[] = $binVal;\n    }\n\n    while($countZeros--) {\n        $binVal\
    \ = 0;\n        while($binary[$countDigits - $countZeros] > 0) {\n           \
    \ $binVal *= 2;\n            $binVal += $binary[$countDigits - $countZeros];\n\
    \            $binary[$countDigits - $countZeros] = 0;\n        }\n        $sum\
    \ += $binVal;\n    }\n    return $sum;\n}", "    $s = '';\n    $n = $N % 10;\n\
    \    $s = $n . $s;\n    $N = $N / 10;\n    $s = $n . $s;\n    while ($N > 0) {\n\
    \        $n = ($N % 10) + 1;\n        $s = $n . $s;\n        $N = $N / 10;\n \
    \       $s = $n . $s;\n    }\n    return $s;\n}", "    $sum = 0;\n    $pow = 1;\n\
    \    while(true) {\n        $sum = $sum * $pow;\n        $pow = $pow * 10;\n \
    \       if($sum > $N) return $sum;\n        $sum -= $N;\n    }\n}", "    $binary\
    \ = \"\";\n    for ($i = 0; $i < $N; $i++) {\n        if ($N % 2 == 0 && $N >\
    \ 1) {\n            $binary = $binary . \"1\";\n        }\n        else {\n  \
    \          $binary = $binary . \"0\";\n        }\n        $N = $N / 2;\n    }\n\
    \    return $binary;\n}\n", "    \n    if ($N < 0 || $N > 10000) {\n        return(\"\
    Not possible\");\n    }\n    $binary_string = \"\";\n    \n    for ($i = 0; $i\
    \ < count($N); $i++) {\n        \n        $binary_string .= $N[$i];\n    }\n \
    \   \n    return $binary_string;\n}\n", "    $string = \"\";\n    while ($N) {\n\
    \        $digit = $N % 10;\n        $N = $N/10;\n        $string .= $digit;\n\
    \    }\n    return $string;\n}\n", "    $bin = decbin($N);\n    $res = '';\n \
    \   for ($i=0; $i<strlen($bin); $i++) {\n        $res = $bin[$i] . $res;\n   \
    \ }\n    return $res;\n}\n", "    $binary = str_pad(decbin($N), 8, '0', STR_PAD_LEFT);\n\
    \    $binary = str_split($binary);\n    $sum = 0;\n    foreach ($binary as $bit)\
    \ {\n        $sum += $bit;\n    }\n    return $sum;\n}\n\n$n = $_GET['n'];\n\n\
    $solution = solve($n);\n\necho $solution;", "    $numbers = '';\n    for ($i =\
    \ 0; $i <= $N; $i++) {\n        $numbers = $numbers + bindec($i).$i;\n    }\n\
    \    $string = $numbers;\n    $string2 = \"\";\n    $n = strlen($string);\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        $string2 = $string2 . $string[$i];\n\
    \    }\n    return $string2;\n}\n</code>\n<|/ a |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding how and/or why it\
    \ solves the problem would improve the answer's long-term value.\n<|/ c |>\n<|\
    \ a dscore=0 tags=php |>\n<code>\n<?php\n\n$n=1000;\n$sum=0;\nfor ($i=1;$i<=$n;$i++){\n\
    \    $digits=pow($i,$n);\n    $sum=$sum+$digits;\n}\necho $sum;", "    $string\
    \ = \"\";\n    if ($N < 10) {\n        return $N;\n    }\n    if ($N % 2 == 0)\
    \ {\n        return solve($N / 2) . \" + \" . solve($N / 2);\n    }\n    list($N1,\
    \ $N2) = divide($N);\n    $string = $string. \"1\";\n    return solve($N1) . \"\
    \ + \" . $string . solve($N2);\n}\n", "    $sum = 0;\n    while (0 < $N) {\n \
    \       $sum += $N % 2;\n        $N = floor($N / 2);\n    }\n    return $sum;\n\
    }\n", "  $sum = 0;\n  $digits = str_split($N);\n  foreach ($digits as $val) {\n\
    \    if ($val == '1') {\n      $sum++;\n    }\n  }\n  return $sum;\n}", "    if\
    \ ($N < 0) {\n        return \"Invalid input.\";\n    }\n    $digits = str_split($N);\n\
    \    $total = 0;\n    for ($i = 0; $i < count($digits) && $total < 10; $i++) {\n\
    \        $total += $digits[$i];\n    }\n    return str_pad(base_convert($total,\
    \ 0, 10), 8, '0', STR_PAD_LEFT);\n}\n</code>\n<|/ a dscore=4 tags=numbers,php\
    \ |>\n<| c |>\nThis is not what the OP wants, they want the sum of digits (which\
    \ this code outputs), not the digits that make up that sum.\n<|/ c |>\n<| c |>\n\
    This is awesome and works for positive numbers, but for negative numbers it outputs\
    \ 1 instead of 0\n<|/ c |>\n<| c |>\nYes, I updated my answer for the negative\
    \ numbers.\n<|/ c |>\n<| c |>\nThis is awesome. Thank you very much :)\n<|/ c\
    \ |>\n<| a |>\nThis solution works for a range of numbers. \n<code>\n<?php\n\n\
    $n= -200;\n$arr = array_map(function ($x) { return $x%10; }, str_split($n));\n\
    \n$sum = 0;\nforeach($arr as $num) {\n    $sum += $num;\n}\necho str_pad(base_convert($sum,\
    \ 10, 2), 8, '0', STR_PAD_LEFT);\n</code>\n<|/ a dscore=2 tags=numbers,php |>\n\
    <| c |>\nNice! This does require PHP 7.1+ but is very elegant! No need to use\
    \ any additional loops or arrays.\n<|/ c |>\n<| a |>\nThis was my first thought\
    \ on how to do this.  The basic idea was to use the modulus operator (%) and the\
    \ array_map function to return an array of each digit and add the results together.\n\
    <code>\n<?php\n\n$n = -200;\n$sum = 0;\n$digits = array_map('dec', str_split($n));\n\
    \nforeach ($digits as $digit) {\n    $sum += $digit;\n}\n\necho str_pad(base_convert($sum,\
    \ 10, 2), 8, '0', STR_PAD_LEFT);\n</code>\n<|/ a dscore=2 tags=numbers,php |>\n\
    <| c |>\nYes, this works :) Thanks :)\n<|/ c |>\n<| a dscore=1 tags=numbers,php\
    \ |>\nHere's my version, based off of David's answer.\n<code>", "    $sum = '';\n\
    \    $nbin = '';\n    $base = 2; // binary\n    $n = strlen($N);\n    for($i =\
    \ 0; $i < $n; $i++) {\n        $sum = substr($sum, -1*$n, $n) + substr($N, $i,\
    \ $n);\n    }\n    while($sum > 0) {\n        $rem = ($sum % $base);\n       \
    \ $sum = ($sum - $rem) / $base;\n        $nbin = $nbin.sprintf(\"%0\".$base.\"\
    d\", $rem);\n    }\n    $nbin = str_pad($nbin, 8, '0', STR_PAD_RIGHT);\n    echo\
    \ $nbin;\n}", "    // Your code here\n    if ($N < 0)\n        return \"-1\";\n\
    \    $N *= 2;\n    $sum = 0;\n    $str = \"\";\n\n    while ($N) {\n        $sum\
    \ += $N & 1;\n        $N = $N >> 1;\n    }\n\n    while ($sum) {\n        $str\
    \ .= $sum & 1 ? \"1\" : \"0\";\n        $sum = $sum >> 1;\n    }\n\n    return\
    \ $str;\n}\n\n$result = solve($argv[1]); // $argv[1] contains the number of digits\n\
    echo \"$result\\n\";\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for your help\
    \ but when i try to run this code i got error\n\n$result = solve($argv[1]); //\
    \ $argv[1] contains the number of digits\necho \"$result\\n\";\n<|/ c |>\n<| c\
    \ |>\nit says\nProblem at line 3 char 1: \nParse error: syntax error, unexpected\
    \ '(', expecting variable (T_VARIABLE) or '$' in /var/www/html/PHP/ex8.php on\
    \ line 3\n<|/ c |>\n<| c |>\ni have fixed it\n<|/ c |>\n<| c |>\nIt's now working\
    \ fine but i have to change a little bit code now it showing \"1100011001000000\"\
    \ but i want \"100011001000000\"\n<|/ c |>\n<| c |>\nI've updated my answer. Check\
    \ it out.\n<|/ c |>\n<| a tags=php,algorithm |>\nI hope this helps you,\n<code>\n\
    <?php", "    $sum = 0;\n    $s = '';\n    do {\n        $N = intval($N / 2);\n\
    \        $sum++;\n        $s = $N . str_pad($s, strlen($s), 0);\n    } while ($N\
    \ > 0);\n    return $s;\n}", "    $sum = 0;\n    $base = 2; // 2\n    while ($N\
    \ > 0) {\n        $sum += ($N % $base);\n        $N = $N >> $base;\n        $base\
    \ *= 2; // 4\n    }\n    return $sum;\n}\n\n$result = solve($N);\n\necho \"Result:\
    \ $result\\n\";\n", "    $s = $N;\n    $a = &$s;\n    $b = 1;\n    $res = 0;\n\
    \    while(--$s) {\n        $a *= 10;\n        $a++;\n        $b *= 10;\n    \
    \    $b++;\n    }\n    while(0 != ($a %= $b)) {\n        $a *= 10;\n        $a--;\n\
    \    }\n    while(0 != ($b %= $a)) {\n        $b *= 10;\n        $b--;\n    }\n\
    \    while(0 != ($a %= $b)) {\n        $a *= 10;\n        $a--;\n        $b *=\
    \ 10;\n        $b--;\n    }\n    while(0 != ($b %= $a)) {\n        $a *= 10;\n\
    \        $a--;\n        $b *= 10;\n        $b--;\n    }\n    while(0 != ($a %=\
    \ $b)) {\n        $a *= 10;\n        $a--;\n        $b *= 10;\n        $b--;\n\
    \    }\n    while(0 != ($b %= $a)) {\n        $a *= 10;\n        $a--;\n     \
    \   $b *= 10;\n        $b--;\n    }\n    while(0 != ($a %= $b)) {\n        $a\
    \ *= 10;\n        $a--;\n        $b *= 10;\n        $b--;\n    }\n    while(0\
    \ != ($b %= $a)) {\n        $a *= 10;\n        $a--;\n        $b *= 10;\n    \
    \    $b--;\n    }\n    while(0 != ($a %= $b)) {\n        $a *= 10;\n        $a--;\n\
    \        $b *= 10;\n        $b--;\n    }\n    while(0 != ($b %= $a)) {\n     \
    \   $a *= 10;\n        $a--;\n        $b *= 10;\n        $b--;\n    }\n    while(0\
    \ != ($a %= $b)) {\n        $a *= 10;\n        $a--;\n        $b *= 10;\n    \
    \    $b--;\n    }\n    while(0 != ($b %= $a)) {\n        $a *= 10;\n        $a--;\n\
    \        $b *= 10;\n        $b--;\n    }\n    while(0 != ($a %= $b)) {\n     \
    \   $a *= 10;\n        $a--;\n        $b *= 10;\n        $b--;\n    }\n    while(0\
    \ != ($b %= $a)) {\n        $a *= 10;\n        $a--;\n        $b *= 10;\n    \
    \    $b--;\n    }\n    while(0 != ($a %= $b)) {\n        $a *= 10;\n        $a--;\n\
    \        $b *= 10;\n        $b--;\n    }\n    while(0 != ($b %= $a)) {\n     \
    \   $a *= 10;\n        $a--;\n        $b *= 10;\n        $b", "    // Your code\
    \ here\n    $output = '1';\n    $i = 2;\n    $sum = 0;\n    while ($i < $N) {\n\
    \        $sum += ($i % 2) == 0 ? $i : -$i;\n        $i++;\n    }\n    return $sum;\n\
    }\n\n$cases = array(\n    array(999),\n    array(1500),\n    array(1470),\n  \
    \  array(1600),\n    array(1990),\n    array(20000),\n    array(23000),\n    array(25000),\n\
    \    array(26000),\n    array(27000),\n    array(28000),\n    array(29000),\n\
    \    array(31000),\n    array(34000),\n    array(35000),\n    array(40000),\n\
    \    array(41000),\n    array(42000),\n    array(43000),\n    array(44000),\n\
    \    array(45000),\n    array(46000),\n    array(47000),\n    array(48000),\n\
    \    array(49000),\n    array(51000),\n    array(55000),\n    array(61000),\n\
    \    array(65000),\n    array(66000),\n    array(70000),\n    array(71000),\n\
    \    array(73000),\n    array(74000),\n    array(75000),\n    array(76000),\n\
    \    array(77000),\n    array(80000),\n    array(81000),\n    array(83000),\n\
    \    array(84000),\n    array(85000),\n    array(86000),\n    array(87000),\n\
    \    array(88000),\n    array(89000),\n    array(91000),\n    array(95000),\n\
    \    array(96000),\n    array(97000),\n    array(98000),\n    array(99000),\n\
    \    array(100000),\n    array(101000),\n    array(102000),\n    array(103000),\n\
    \    array(104000),\n    array(105000),\n    array(106000),\n    array(107000),\n\
    \    array(108000),\n    array(109000),\n    array(110000),\n    array(111000),\n\
    \    array(112000),\n    array(113000),\n    array(114000),\n    array(115000),\n\
    \    array(116000),\n    array(117000),\n    array(118000),\n    array(119000),\n\
    \    array(121000),\n    array(122000),\n    array(123000),\n    array(124000),\n\
    \    array(125000", "    $str = '';\n    for($i = 1; $i < $N; $i++) {\n      \
    \  $str .= $i & 1 ? '1' : '0';\n    }\n    return $str;\n}\n\nvar_dump(solve(1));\n\
    var_dump(solve(2));\nvar_dump(solve(6));\nvar_dump(solve(12));\nvar_dump(solve(100));\n\
    var_dump(solve(101));\nvar_dump(solve(111));\nvar_dump(solve(150));\nvar_dump(solve(147));\n\
    var_dump(solve(1471));\nvar_dump(solve(1473));\nvar_dump(solve(2047));\nvar_dump(solve(20473));\n\
    var_dump(solve(204739));\nvar_dump(solve(409424));\nvar_dump(solve(4094243));\n\
    var_dump(solve(40942439));\nvar_dump(solve(804654));\nvar_dump(solve(8046543));\n\
    var_dump(solve(80465439));\nvar_dump(solve(1000000000));\nvar_dump(solve(1000000000));\n\
    var_dump(solve(1000000001));\nvar_dump(solve(1000000002));\nvar_dump(solve(1000000003));\n\
    var_dump(solve(1000000004));\nvar_dump(solve(1000000005));\nvar_dump(solve(1000000006));\n\
    var_dump(solve(1000000007));\nvar_dump(solve(1000000008));\nvar_dump(solve(1000000009));\n\
    var_dump(solve(1000000010));\nvar_dump(solve(1000000011));\nvar_dump(solve(1000000012));\n\
    var_dump(solve(1000000013));\nvar_dump(solve(1000000014));\nvar_dump(solve(1000000015));\n\
    var_dump(solve(1000000016));\nvar_dump(solve(1000000017));\nvar_dump(solve(1000000018));\n\
    var_dump(solve(1000000019));\nvar_dump(solve(1000000020));\nvar_dump(solve(1000000021));\n\
    var_dump(solve(1000000022));\nvar_dump(solve(1000000023));\nvar_dump(solve(1000000024));\n\
    var_dump(solve(1000000025));\nvar_dump(solve(1000000026));\nvar_dump(solve(1000000027));\n\
    var_dump(solve(1000000028));\nvar_dump(solve(1000000029));\nvar_dump(solve(1000000030));\n\
    var_dump(solve(1000000032));\nvar_dump(solve(1000000033));\nvar_dump(solve(1000000034));\n\
    var_dump(solve(1000000035));\nvar_dump(solve(1000000036));\nvar_dump(solve(1000000037));\n\
    var_dump(solve(1000000038));\nvar_dump(solve(1000000039));\nvar_dump(solve(1000000039));\n\
    var_dump(solve(1000000044));", "  $sum = 0;\n  while (N > 0) {\n    $sum += (N\
    \ % 2) + 1;\n    N /= 2;\n  }\n  return $sum;\n}", "    $digits = \"\";\n    $n\
    \ = (string) $N;\n\n    $n = str_split($n);\n    $result = \"\";\n    foreach\
    \ ($n as $key => $val) {\n        $digits = $val . $digits;\n    }\n    $result\
    \ = str_replace(\" \", \"\", $digits);\n    return $result;\n}", "    $sum = \"\
    \";\n    $n = 0;\n\n    while ($N > 0) {\n        $n += floor($N / 2);\n     \
    \   $sum += \"$n\";\n        $N = $n - floor($N / 2);\n    }\n\n    return $sum;\n\
    }\n", "    $digits = array();\n    $digit = 0;\n    $binary = \"\";\n    for ($i\
    \ = 0; $i < strlen($N); ++$i) {\n        $digit = ($N % 10) * pow(10, $i);\n \
    \       $digits[] = $digit;\n        ++$N;\n        $binary = ($binary + ($digit\
    \ == 1 ? \"1\" : \"0\")) . \" \";\n    }\n    $binary = preg_replace(\"/[^01]/\"\
    , \"\", $binary);\n    $binary = preg_replace(\"/[\\s\\d\\s]/\", \"\", $binary);\n\
    \    return $binary;\n}\n\n$tests = array();\nfor ($i = 0; $i < 1000; ++$i) {\n\
    \    $tests[] = array($i);\n}\nprint_r(sort($tests));\n\n/*\nTest Case 1\nInput:\
    \ 9\nOutput: \"9\"\nTest Case 2\nInput: 10\nOutput: \"10 1\"\nTest Case 3\nInput:\
    \ 17\nOutput: \"17 10 11\"\nTest Case 4\nInput: 100\nOutput: \"100 1 0 0\"\nTest\
    \ Case 5\nInput: 144\nOutput: \"144 10 101 11\"\nTest Case 6\nInput: 1000\nOutput:\
    \ \"1000 1 0 0\"\nTest Case 7\nInput: 500\nOutput: \"500 1 0 0\"\nTest Case 8\n\
    Input: 50\nOutput: \"50 0 0\"\nTest Case 9\nInput: 2147483647\nOutput: \"2147483647\
    \ 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\
    \ 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\
    \ 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\
    \ 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\
    \ 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\
    \ 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\
    \ 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\
    \ 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\
    \ 10000 10000 10000 10000 10000 10000 10000", "    $arrDigits = str_split(sprintf('%u',\
    \ $N));\n    $sum = 0;\n    foreach ($arrDigits as $key => $digit) {\n       \
    \ $sum += $digit * pow(2, $key - 1);\n    }\n\n    return sprintf('%u', $sum);\n\
    }\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\"Given a positive integer N,\
    \ the total number of digits in binary representation of N is equal to the sum\
    \ of its digits in the number in base 10.\" This is not always true. For instance,\
    \ N=5 can be represented in binary as either \"11111\" or \"11100\", and therefore\
    \ the sum of its digits in base 10 is not equal to the number of its digits in\
    \ base 2.\n<|/ c |>\n<| c |>\nPlease read the comment of David Wallace above\n\
    <|/ c |>\n<| c |>\nYou are right. I thought that he wrote that N can be an integer\
    \ in range 0-10000. Of course, you are right, but it's hard to understand this\
    \ condition in this question, because he didn't write this condition.\n<|/ c |>\n\
    <| c |>\nI have edited my answer, now it works correctly\n<|/ c |>\n<| a tags=php,algorithm\
    \ dscore=0 |>\n<code>\n<?php\n$n = $_GET['N'];\n$n = str_pad($n,8,\"0\",STR_PAD_LEFT);\n\
    $n = bindec($n);\n$sum = 0;\n$n = str_split($n);\n$count = count($n);\n$i=0;\n\
    foreach($n as $val)\n{\n    $sum = $sum + $val * pow(2, $i);\n    $i++;\n}\n\n\
    echo $sum;\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer. I tested your code\
    \ and it works just fine, but in some cases when the input is a very large number,\
    \ the answer is not correct. Can you suggest me an efficient way?\n<|/ c |>\n\
    <| c |>\nyou can convert it into string with numbers in binary and then use that\
    \ for calculating the sum.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>", " \
    \   // TODO: Write your code here.\n    $result = '';\n    while(--$N) {\n   \
    \     $digit = floor($N % 10);\n        $result = str_pad($digit.$result, 3, '0',\
    \ STR_PAD_RIGHT);\n        $N = floor($N / 10);\n    }\n    return $result;\n\
    }\n\n$tests = array();\n$tests[] = array(1, 1);\n$tests[] = array(10, 1);\n$tests[]\
    \ = array(100, 1);\n$tests[] = array(1000, 1);\n$tests[] = array(123, 2);\n$tests[]\
    \ = array(147, 3);\n$tests[] = array(148, 4);\n$tests[] = array(153, 5);\n$tests[]\
    \ = array(154, 6);\n$tests[] = array(155, 7);\n$tests[] = array(156, 8);\n$tests[]\
    \ = array(157, 9);\n$tests[] = array(158, 10);\n$tests[] = array(159, 11);\n$tests[]\
    \ = array(162, 12);\n$tests[] = array(164, 13);\n$tests[] = array(165, 14);\n\
    $tests[] = array(166, 15);\n$tests[] = array(167, 16);\n$tests[] = array(168,\
    \ 17);\n$tests[] = array(169, 18);\n$tests[] = array(170, 19);\n$tests[] = array(171,\
    \ 20);\n$tests[] = array(172, 21);\n$tests[] = array(173, 22);\n$tests[] = array(174,\
    \ 23);\n$tests[] = array(175, 24);\n$tests[] = array(176, 25);\n$tests[] = array(177,\
    \ 26);\n$tests[] = array(178, 27);\n$tests[] = array(179, 28);\n$tests[] = array(181,\
    \ 29);\n$tests[] = array(182, 30);\n$tests[] = array(183, 31);\n$tests[] = array(184,\
    \ 32);\n$tests[] = array(185, 33);\n$tests[] = array(186, 34);\n$tests[] = array(187,\
    \ 35);\n$tests[] = array(188, 36);\n$tests[] = array(189, 37);\n$tests[] = array(190,\
    \ 38);\n$tests[] = array(191, 39);\n$tests[] = array(192, 40);\n$tests[] = array(193,\
    \ 41);\n$tests[] = array(194, 42);\n$tests[] = array(195, 43);\n$tests[] = array(196,\
    \ 44);\n$tests[", "    $result = \"\";\n    if ($N == 0) {\n        $result =\
    \ \"0\";\n    } elseif ($N == 1) {\n        $result = \"1\";\n    } else {\n \
    \       $result = solve($N / 2);\n        $result = $result . $N & 1 ? $result\
    \ . \"1\" : \"0\";\n        $result = solve($N - $N & 1);\n    }\n    return $result;\n\
    }", "    $S = '';\n    while ($N > 0) {\n        $digit = $N % 2;\n        $S\
    \ = $digit.''.$S;\n        $N = $N/2;\n    }\n    return $S;\n}\n", "    if ($N\
    \ == 0)\n        return '0';\n    $sum = 0;\n    $remainder = $N % 10;\n    $N\
    \ = $N / 10;\n    while ($N != 0) {\n        $sum = $sum + pow(2, $N);\n     \
    \   $N = $N - 1;\n    }\n    return $sum + $remainder;\n}\n\n$result = solve($N);\n\
    \necho \"Result: $result\\n\";", "  $result = '';\n  if ($N < 10) $N = 10 * $N;\n\
    \  if ($N < 100) $N = 100 * $N;\n  if ($N < 1000) $N = (100 * $N) + 1;\n  if ($N\
    \ < 10000) $N = (1000 * $N) + 1;\n  for ($i = $N - 1, $j = 0; $i >= 0; $i--, $j++)\
    \ $result .= str_pad($j, 2, '0', STR_PAD_LEFT);\n  return $result;\n}\n</code>\n\
    <|/ a dscore=2 tags=algorithm,php,java,php-7 |>\n<| c |>\nNice. How would you\
    \ go about solving this with recursion?\n<|/ c |>\n<| c |>\nIt looks like you\
    \ might need to do a bit of research on recursion and see if you can come up with\
    \ a solution. The best way to learn is to just do it. Then you can test other\
    \ solutions.\n<|/ c |>\n<| c |>\nSure, I understand. My comment was more aimed\
    \ toward yours being more elegant than mine. Just out of interest, how would you\
    \ go about writing a recursive algorithm from scratch?\n<|/ c |>\n<| c |>\n- This\
    \ should be another question on SO.\n<|/ c |>\n<| c |>\nI posted my question here:\
    \ http://stackoverflow.com/questions/36084502/recursive-algorithm-for-binary-number-php\n\
    <|/ c |>\n<| a dscore=0 |>\nThe answer from is right on. But, with that approach,\
    \ you're only going to get two digits per iteration, instead of three digits per\
    \ iteration. Also, the leading 0 is no longer required.\n<code>", "    $binary\
    \ = '';\n    $current = 0;\n    $end = $N;\n    while (--$end) {\n        $remainder\
    \ = $current % 2;\n        $current = floor($current / 2);\n        $binary =\
    \ $remainder . $binary;\n    }\n    return $binary;\n}\n</code>\n<|/ a tags=binary,php,math\
    \ |>\n<| a |>\n<code>\n<?php", "    while(!is_int($N)) {\n        $N = substr($N,\
    \ 1);\n    }\n    if(is_int($N) && $N < 0) {\n        return 'error';\n    }\n\
    \    $result = '';\n    while($N) {\n        $remainder = $N % 2;\n        $N\
    \ = $N/2;\n        $result += $remainder;\n    }\n    return $result;\n}", " \
    \   if ($N < 0) return null;\n    if ($N == 0) return '0';\n    $S = $N = bindec($N);\n\
    \    $R = $S;\n    for($i = 0; $i < strlen($S); $i++) {\n        if ($S % 2 ==\
    \ 1) {\n            $R = $R + '1';\n        } else {\n            $R = $R + '0';\n\
    \        }\n        $S = $S / 2;\n    }\n    return $R;\n}\necho solve(487);",
  "    $digits = array_reverse(str_split(decbin($N)));\n    $sum = 0;\n    foreach\
    \ ($digits as $digit) {\n        if ($digit === '1') {\n            $sum++;\n\
    \        }\n    }\n    return $sum;\n}", "    $S = '1';\n    $SN = strrev($S);\n\
    \    $NN = strrev($N);\n    $K = '';\n    $KN = strrev($K);\n    $K = str_pad($SN,\
    \ strlen($N) + 1, '0');\n    $N = str_pad($NN, strlen($N) + 1, '0');\n    $i =\
    \ 1;\n    do {\n        $i++;\n        $KN = strrev($KN);\n        $K = str_pad($KN,\
    \ strlen($KN) + 1, '0');\n        $KN = strrev($KN);\n        $K = str_pad($KN,\
    \ strlen($KN) + 1, '0');\n        $KN = $KN + $NN;\n        $KN = strrev($KN);\n\
    \        $K = str_pad($KN, strlen($KN) + 1, '0');\n        $K = $K + $KN;\n  \
    \      $KN = strrev($KN);\n        $K = str_pad($KN, strlen($KN) + 1, '0');\n\
    \        $K = $K + $KN;\n        $KN = $KN + $NN;\n        $KN = strrev($KN);\n\
    \        $K = str_pad($KN, strlen($KN) + 1, '0');\n        $K = $K + $KN;\n  \
    \      $KN = $KN + $NN;\n        $KN = strrev($KN);\n        $K = str_pad($KN,\
    \ strlen($KN) + 1, '0');\n        $K = $K + $KN;\n    } while ($N != $K);\n  \
    \  return $K;\n}\n\n$result = solve($input);\necho \"Total sum of digits is \"\
    \ . substr($result, 1) . \"\\n\";\n</code>\n<|/ a tags=php |>\n<| a |>\nHere is\
    \ my solution\n<code>\n<?php\n    function sum_digits( $num )\n    {\n       \
    \ $sum = 0;\n        $base = '1';\n\n        while( $num > 0 )\n        {\n  \
    \          $mod = $num % 10;\n            $sum += $mod * strpos( str_split( $base\
    \ ) , $mod );\n            $num = ( $num / 10 );\n        }\n\n        return\
    \ $sum;\n    }\n\n    $num = '1234';\n    echo sum_digits( $num );", "    $sum\
    \ = 0;\n    while ($N > 0) {\n        $sum += $N % 10;\n        $N = (int)($N\
    \ / 10);\n    }\n    return $sum < 2 ? \"1\" : $sum < 4 ? $sum : ($sum < 8 ? \"\
    11\" : $sum < 16 ? \"111\" : $sum < 32 ? \"1111\" : $sum < 64 ? \"11111\" : \"\
    111111\");\n}\n</code>\n<|/ a tags=php,recursion,binary dscore=2 |>\n<| a tags=php,recursion,binary\
    \ dscore=2 |>\nThe idea is to make two recursive calls: one to get the binary\
    \ representation, the other to add the decimal digits:\n<code>", "    $sum = '';\n\
    \    $ones = $tens = $hundreds = $thousands = '';\n    for ($i = 1; $i <= $N;\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $hundreds .= $i;\n        }\
    \ else {\n            $tens .= $i;\n        }\n    }\n    $ones_count = strlen($ones);\n\
    \    $tens_count = strlen($tens);\n    if ($tens_count > 0 && $ones_count < $tens_count)\
    \ {\n        $hundreds .= $tens;\n    } else if ($tens_count > 0 && $ones_count\
    \ > $tens_count) {\n        $thousands .= $ones;\n    }\n    $hundreds_count =\
    \ strlen($hundreds);\n    $thousands_count = strlen($thousands);\n    if ($thousands_count\
    \ > $hundreds_count) {\n        $sum .= $hundreds;\n    } else if ($thousands_count\
    \ > 0) {\n        $sum .= $thousands;\n    }\n    return $sum;\n}\n$output = array_reduce(range(1,\
    \ 10000), 'solve', 0);\necho $output;", "    $binary = \"\";\n    for($i = 1;\
    \ $i < $N; $i++) {\n        $binary .= $i;\n    }\n    $len = strlen($binary);\n\
    \    $sum = 0;\n    $pow = intval($len / 2);\n    while($len >= 1) {\n       \
    \ $sum += ($binary[$len-1] & (1 << $pow)) ? 1 : 0;\n        $len--;\n        $pow--;\n\
    \    }\n    return sprintf(\"%d\",$sum);\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 tags=php,algorithm |>\nI spent several minutes writing this up since\
    \ I wanted to see what it took to implement it on PHP. It turns out that the algorithm\
    \ is actually quite simple, actually.\nI thought that there was a simple way to\
    \ detect negative numbers in binary (via bitwise operators) without having to\
    \ parse the string, but I couldn't find it. It's quite possible that I was wrong,\
    \ so I am posting this just in case someone finds it useful.\n<code>", "    $sum\
    \ = '';\n    while ($N) {\n        $sum .= $N % 2;\n        $N = $N / 2;\n   \
    \ }\n    return $sum;\n}", "    $str=str_pad('', $N, \"0\");\n    for($i=strlen($str)-1;$i>=0;$i--){\n\
    \        $sum=0;\n        $j=strlen($str)-1;\n        while($j>=0 && $str[$i]==$str[$j])$j--;\n\
    \        $sum=($sum+pow($j, 2)*(8-$i));\n        $str[$i]=chr(ord('0') + ($sum\
    \ % 2));\n    }\n    return $str;\n}\n", "    while(true) {\n        $sum = 0;\n\
    \        for($i = pow(2, $N); $i >= 0; $i--) {\n            $sum += $i & $N;\n\
    \            $N /= 2;\n        }\n        if ($N == 0) return $sum;\n        $N\
    \ = floor($N);\n    }\n}\necho solve($N);", "    $ret = '';\n    $s = array_reverse(str_split($N));\n\
    \    $l = count($s);\n    for ($i=0; $i<$l; $i++) {\n        $ret .= str_pad(decbin($s[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n    }\n    return $ret;\n}\n\n$tests = array(\n    array(2),\n\
    \    array(3),\n    array(5),\n    array(9),\n    array(12),\n    array(25),\n\
    \    array(50),\n    array(75),\n    array(100),\n    array(1001),\n    array(10000),\n\
    \    array(100000),\n);\n\nforeach ($tests as $test) {\n    echo sprintf(\"%-25s\
    \ %s\\n\", 'N='.$test[0], $test[1] ? 'TRUE' : 'FALSE'),\n          time(),\n \
    \         '<br />';\n    echo solve($test[0]),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 1),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 2),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 4),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 8),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 16),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 32),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 64),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 128),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 256),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 512),\n          '<br />';\n    echo\
    \ solve($test[0]) . ' vs ' . solve($test[1], 1024),\n          '<br />';\n   \
    \ echo solve($test[0]) . ' vs ' . solve($test[1], 2048),\n          '<br />';\n\
    \    echo solve($test[0]) . ' vs ' . solve($test[1], 4096),\n          '<br />';\n\
    \    echo solve($test[0]) . ' vs ' . solve($test[1], 8192),\n          '<br />';\n\
    \    echo solve($test[0]) . ' vs ' . solve($test", "    $s = array_map(\n    \
    \    function($n) {\n            return str_pad(decbin($n), strlen($n), \"0\"\
    , STR_PAD_LEFT);\n        },\n        str_split($N)\n    );\n    return array_sum($s);\n\
    }\n</code>\nPHP: using array_map()\n<code>", "    $S = array();\n    if ($N ==\
    \ 0) return \"0\";\n    $remainders = array_reverse(str_split(strval($N)));\n\
    \    foreach ($remainders as $k => $v) {\n        $sum = 0;\n        $i = $k;\n\
    \        while ($i && $v) {\n            $sum += $i & 1 ? 1 : 0; $i >>= 1; $v\
    \ >>= 1;\n        }\n        $S[$k] = ($sum > 0 ? \"1\" : \"0\") + $v;\n    }\n\
    \    return implode('', $S);\n}\n\n$result = solve(1000);\necho $result;", " \
    \ $digits = str_split(decbin($N));\n  $sum = 0;\n  foreach ($digits as $digit)\
    \ {\n    $sum += $digit;\n  }\n  return $sum;\n}", "    $return = '';\n    while\
    \ ($N > 0) {\n        $return = array_sum(str_split($return)) + $return[count($return)\
    \ - 1];\n        $N = floor($N / 2);\n    }\n    return $return;\n}\n\n$arr =\
    \ [];\nfor ($i = 0; $i < count($arr); $i++) {\n    echo $arr[$i].\"\\n\";\n}",
  "    $sum = 0;\n    while ($N != 0) {\n        $sum = 2*$sum + $N % 10;\n      \
    \  $N = ($N - $N % 10)%10;\n    }\n    if ($sum > 0) {\n        return \"1\".$sum;\n\
    \    }\n    return \"0\".$sum;\n}", "    $nums = array(0=>\"0000\", 1=>\"0001\"\
    , 2=>\"0010\", 3=>\"0011\", 4=>\"0100\", 5=>\"0101\", 6=>\"0110\", 7=>\"0111\"\
    , 8=>\"1000\", 9=>\"1001\", 10=>\"1010\", 11=>\"1011\", 12=>\"1100\", 13=>\"1101\"\
    , 14=>\"1110\", 15=>\"1111\", 16=>\"1000\", 17=>\"1001\", 18=>\"1010\", 19=>\"\
    1011\", 20=>\"1100\", 21=>\"1101\", 22=>\"1110\", 23=>\"1111\");\n    $sum = 0;\n\
    \    if ($N < 17) $sum = $sum + intval($N);\n    else $sum = $sum + intval($N\
    \ / 10) * intval($nums[$N % 10]);\n    if ($N > 0) return solve($N - $sum);\n\
    \    else return $sum;\n}\n\n$result = solve(1000);\necho $result;", "    if ($N\
    \ == 0) return '0';\n    $a = array(1, 4, 16, 100, 108, 1000, 1008, 10000);\n\
    \    $b = 0;\n    foreach ($a as $k => $val) {\n        $b += $val;\n        if\
    \ ($b >= $N) {\n            $b = $b - $N;\n            return '1'.bcdiv($b, $N,\
    \ 2);\n        }\n    }\n    return '';\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nThis problem can be solved by following simple steps :\nStep 1: Convert\
    \ number to binary and store it in array say numBin\nStep 2: Now traverse array\
    \ numBin and add up all elements present in numBin array. Keep a variable say\
    \ sum.\nStep 3: Now add '1' in beginning of sum and perform binary division on\
    \ sum to get answer as '0' in case sum < N.\nStep 4: If sum >= N, repeat the same\
    \ process as mentioned in 3rd step.\nSo overall complexity will be O(n).\nBelow\
    \ is code snippet :\n<code>\n<?php", "    $result = \"\";\n    if ($N > 0) {\n\
    \        $N1 = $N % 10;\n        $N2 = floor($N / 10);\n        $N3 = $N2 % 10;\n\
    \        $N4 = floor($N2 / 10);\n        $result = $N1 . $N3 . $N4;\n    }\n \
    \   return $result;\n}\n\n$N = 0;\necho \"Case #\" . $N . \": \" . solve($N);",
  "    // Initialize return value\n    $sum = '';\n    $remainder = 0;\n\n    // Loop\
    \ from N / 2 down to N\n    for($i = $N / 2; $i >= 1; $i--) {\n        // Get\
    \ the remainder after dividing by 2\n        $remainder = ($N % $i) / 2;\n   \
    \     $sum .= $remainder;\n    }\n\n    // Return the binary number as a string\n\
    \    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nYou don't need to convert $sum\
    \ to a binary number. Just return the string representation of the binary number\
    \ $sum.\n<|/ c |>\n<| a tags=php,algorithm |>\nHere's another solution I figured\
    \ out by myself.\n<code>", "    return str_pad(base_convert($N, 10, 2), $N ? strlen($N)\
    \ + 1 : 0, STR_PAD_LEFT);\n}\n", "    $sum = 0;\n    $n = $N;\n    do {\n    \
    \    $sum += floor($n/2);\n        $n = $n % 2;\n    } while ($n > 0);\n    return\
    \ $sum;\n}\n", "    return $N;\n}\n</code>\n<|/ q |>\n<| c |>\nIf you're going\
    \ to use `return` anyway, why not just `return $N` instead of `echo $N`?\n<|/\
    \ c |>\n<| c |>\n`echo $N;` will print the returned value of the function. `return\
    \ $N;` will return the value. By the way: you do not need a variable in the function\
    \ for this function.\n<|/ c |>\n<| c |>\nOk thank you for the help and tips I\
    \ really appreciate it :D\n<|/ c |>\n<| a dscore=1 |>\nYour function doesn't return\
    \ anything so echo doesn't display anything.\nYou want your function to return\
    \ something so you can see it.\nTry something like this:\n<code>", "    if ($N\
    \ == 0) return '0';\n    $sum = 0;\n    do {\n        $remainder = $N % 2;\n \
    \       $sum = ($sum * 10) + $remainder;\n        $N = ($N - 1) / 2;\n    } while\
    \ ($N > 0);\n    return sprintf('%010s', $sum);\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nHi, welcome to StackOverflow! Please add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| c |>\nThis is the most\
    \ beautiful solution I ever read. Thanks for sharing.\n<|/ c |>\n<| a |>\nMy variant\
    \ using strings:\n<code>", "    $numBinary = decbin($N);\n    $sumOfDigits = 0;\n\
    \    for ($i = 0; $i < strlen($numBinary); $i++) {\n        $sumOfDigits += $numBinary[$i];\n\
    \    }\n    return sprintf('%0'.strlen($numBinary).'s', $sumOfDigits);\n}", " \
    \   // Write your code here.\n    // 1. Write a recursive function sumDigits(n)\
    \ to get the sum of digits in n\n    // 2. use array_reverse() to reverse the\
    \ result array\n    $num = array_reverse(str_split(str_pad(decbin($N), $N, \"\
    0\", STR_PAD_LEFT)));\n    $sum = 0;\n    foreach ($num as $item) {\n        $sum\
    \ += $item;\n    }\n    return $sum;\n}\n", "    $bits = array(\n        0,\n\
    \        1,\n        1\n    );\n    $sum = 0;\n    $bitN = 0;\n    $digits = 0;\n\
    \    $digit = 0;\n    while($N > 0) {\n        $digit = $N % 2;\n        $N =\
    \ $N/2;\n        $bits[$bitN] = $digit;\n        $N = $N/4;\n        $bitN++;\n\
    \        $digits++;\n    }\n    for($bitN = 0; $bitN < count($bits); $bitN++)\
    \ {\n        $digit = $bits[$bitN];\n        $sum += $digit;\n    }\n    return\
    \ $sum;\n}\n", "    $N = abs($N);\n    $ans = '';\n    $remainder = 0;\n    $sum\
    \ = 0;\n    $count = 1;\n\n    // For each bit in N\n    while ($N) {\n      \
    \  // For each place in bit\n        for ($i = 0; $i < strlen($N); $i++) {\n \
    \           // If the bit is 1\n            if ($N[$i]) {\n                //\
    \ Add 1 to count\n                $count++;\n                // For each place\
    \ in place - add place * count of 1s\n                $sum += ($i - 1) * $count;\n\
    \            }\n        }\n\n        // Add remainder to count\n        $count++;\n\
    \        // For each place in place - add place * count of 1s\n        $sum +=\
    \ $remainder;\n\n        // Store remainder\n        $remainder = $N % 2;\n\n\
    \        // Add sum to answer\n        $ans .= $sum;\n\n        // Reset the sum\
    \ to zero\n        $sum = 0;\n\n        // Reset the count\n        $count = 1;\n\
    \n        // Next bit\n        $N = ($N - 1) / 2;\n    }\n\n    // If we have\
    \ trailing 1s, add them\n    if ($remainder) {\n        $ans .= $sum;\n    }\n\
    \n    return $ans;\n}\n</code>\n<|/ a tags=php,math,binary |>\n<| c |>\nThank\
    \ you for this code snippet, which might provide some limited short-term help.\
    \  A proper explanation [would greatly improve](//meta.stackexchange.com/q/114762)\
    \ its long-term value by showing *why* this is a good solution to the problem,\
    \ and would make it more useful to future readers with other, similar questions.\
    \  Please [edit] your answer to add some explanation, including the assumptions\
    \ you've made.\n<|/ c |>\n<| a tags=php,math,binary dscore=0 |>\n<code>\n<?php\n\
    $binary = \"1\";\n$n = strlen($binary);\n$sum = 0;\n$remainder = 0;\n$count =\
    \ 1;\n$k = 0;\n$binary = strrev($binary);\nwhile ($n > 0) {\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        if ($binary[$i] == 1) {\n            $count++;\n \
    \           $sum += ($n - 1) * $count;\n        }\n    }\n    for ($j = 0; $j\
    \ < $n; $j++) {\n        if ($binary[$j] == 1) {\n            $count--;\n    \
    \        $sum += $j * $count;\n        }\n    }\n    $sum = $sum + $remainder;\n\
    \    $remainder = $binary[$k] % 2;\n    $k++;\n    $n = $n - 1;\n}\nif (", " \
    \   $binary = \"\";\n    $currentSum = 0;\n    $nextSum = 0;\n    while($N > 0)\
    \ {\n        $currentSum = $currentSum + $N % 10;\n        $N = $N / 10;\n   \
    \ }\n    $nextSum = $currentSum;\n    while($currentSum > 0) {\n        $binary\
    \ = $currentSum . substr($binary, 0, 1) . substr($binary, 1);\n        $currentSum\
    \ = $currentSum - 1;\n    }\n    return $binary;\n}\n</code>\n<|/ a tags=binary,algorithm,math,php\
    \ |>\n<| c |>\nIt gives me output '1010101'. It should be '100'.\n<|/ c |>\n<|\
    \ c |>\nYes, you are right, the first digit is missing. I edited my answer, it\
    \ now works. :)\n<|/ c |>\n<| c |>\nI think it would be better to start with a\
    \ zero-length binary string, and add every number in reverse: `$binary = \"\"\
    ; for($N=$N; $N > 0; $N /= 10) { $binary .= ($N % 2) ? \"1\" : \"0\"; }`\n<|/\
    \ c |>\n<| c |>\nThat would also work, but I think my solution is easier to understand.\n\
    <|/ c |>\n<| c |>\nThe code does not work correctly for N=147 which gives 100110\
    \ instead of 1100\n<|/ c |>\n<| a tags=binary,algorithm,math,php |>\nI took the\
    \ liberty of making your solution less verbose, and also fixing a few minor issues:\n\
    <code>", "    // Write your code here.\n    return $N < 10000 ? \"0\" . $N : $N\
    \ < 100000 ? $N : $N < 10000000 ? $N / 1000 . $N % 1000 : \"1\" . substr($N /\
    \ 1000000, 3, 3) . substr($N / 1000, 3, 3) . substr($N % 1000, 3, 3);\n}\n\n$start\
    \ = time();\nfor ($i = 10000; $i < 15000; $i += 100000) {\n    echo solve($i)\
    \ . \"\\n\";\n}\necho \"Time: \" . (time() - $start) . \"s\\n\";", "    $sum =\
    \ 0;\n    while (0 < $N) {\n        $sum += $N % 2;\n        $N = floor($N / 2);\n\
    \    }\n    return $sum;\n}", "    // Your code here\n    $n = str_replace(array(\"\
    .\", \",\"), '', $N);\n    $binary = str_split($n);\n    \n    $sum = 0;\n   \
    \ foreach ($binary as $b) {\n        $sum += $b;\n    }\n    \n    return $sum;\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n$n=12345;\n$binary=decbin($n);\n\
    $length=strlen($binary);\n$sum=0;\nfor($i=0;$i<$length;$i++)\n{\n    $sum+=$binary[$i];\n\
    }\necho $sum;", "    $result = \"\";\n    $sum = 0;\n    if ($N < 0)\n       \
    \ $N = abs($N);\n    while ($N != 0) {\n        $result = ($N & 1) ? $result.\"\
    1\" : $result;\n        $N >>= 1;\n        $sum++;\n    }\n    return $sum;\n}",
  "    if ($N < 10) {\n        return \"0$N\";\n    }\n    $sum = 0;\n    $result\
    \ = \"\";\n    $N = decbin($N);\n    for ($i = 0; $i < strlen($N); $i++) {\n \
    \       if ($N[$i] != 0) {\n            $sum = $sum + pow(2, $i);\n          \
    \  if ($N[$i] == 1) {\n                $result = $result . chr(1);\n         \
    \   } else {\n                $result = $result . chr(0);\n            }\n   \
    \     }\n    }\n    return $result;\n}\necho solve($_GET['N']);", "    $N = (string)$N;\n\
    \    $N1 = strlen($N);\n\n    // the digits are represented in decimal so use\
    \ base 10 to work with\n    // these numbers, base 2 are used for conversion to\
    \ binary number\n    // and to find sum of digits\n    $binary = $N;\n    $digits\
    \ = array_map('decbin', str_split($N));\n\n    // use array_sum() to find sum\
    \ of digits (array_sum() will work\n    // with integer values)\n    $sum = 0;\n\
    \    foreach ($digits as $key => $value) {\n        $sum += array_sum(array_slice($value,\
    \ 0, $key));\n    }\n\n    // convert the sum to a binary string\n    $sum = (string)$sum;\n\
    \    $sum2 = strlen($sum);\n\n    // add the leading \"0\"s to make the digits\
    \ binary again\n    if ($N1 < $sum2) {\n        $sum .= \"0\" * ($sum2 - $N1);\n\
    \    }\n\n    // convert the sum to a string\n    $sum = (string)$sum;\n    $sum2\
    \ = strlen($sum);\n\n    // get the last two digits of the binary string and convert\
    \ them to\n    // a number and add them to sum\n    $sum3 =  substr($sum, 0, -1);\n\
    \    $sum4 = (int)$sum3;\n    $sum = $sum4 + $sum;\n\n    // print the output\
    \ number\n    echo $sum;\n}\n</code>\nThe above code will output the correct answer\
    \ when the input number is greater than or equal to 10, like 147 from 147.\nIf\
    \ your input number is less than 10, it will output the wrong answer (like 142\
    \ from 142). For example, if a user inputs 142 then your code will output 142\
    \ instead of 143.\n<|/ a tags=php,algorithm,math,binary dscore=4 |>\n<| a dscore=4\
    \ |>\nYou can use bitwise operators to find the binary of integer and sum them.\
    \ For example, \n<code>\n$value = 142;\n$bin = decbin($value);\n$sum = 0;\nfor($i=0;\
    \ $i<strlen($bin); $i++){\n    $sum += $bin[$i];\n}\necho $sum;\n</code>\nThis\
    \ code will output 143. You can change it to suit your needs.\n<|/ a tags=php,algorithm,math,binary\
    \ |>\n<| a |>\n<code>\n<?php\n", "    $sum = 0;\n    $bin = dechex($N);\n    for($i\
    \ = 0; $i < strlen($bin); $i++) {\n        $sum += (strpos($bin, $i) === false)\
    \ ? 0 : 1;\n    }\n    return $sum;\n}\n\n$n = 5;\n\n$ans = solve($n);\n\necho\
    \ $ans;\n</code>\n<|/ a tags=php,algorithm,functional-programming,recursion |>\n\
    <| c |>\nIt should be noted that this solution will require a huge stack for long\
    \ values of N.\n<|/ c |>\n<| c |>\nFor very large values of N, this will not work,\
    \ even for PHP's default stack size. Even for small values, the string operations\
    \ inside the loop will consume a lot of memory. PHP will run out of memory and\
    \ crash.\n<|/ c |>\n<| a |>\n<code>\n<?php", "    $digits = base_convert(\"N\"\
    , 2, 10);\n    $sum = 0;\n    foreach ($digits as $digit) {\n        $sum += $digit;\n\
    \    }\n    return $sum;\n}", "    $N = (int)$N;\n    $bits = [];\n    $result\
    \ = [];\n\n    do {\n        $bits = array_merge($bits, str_split(str_pad(decbin($N),\
    \ 8, '0', STR_PAD_LEFT)));\n        $result[] = $bits[count($bits) - 1];\n   \
    \     $N = floor($N /= 2);\n    } while ($N > 0);\n\n    return implode('', $result);\n\
    }\n\necho \"\\n\";\necho \"\\n\";\necho \"Binary representation of $N is: \",\
    \ solve($N), \"\\n\";\n</code>\n<|/ a |>\n<| c |>\nIt seems that you've missed\
    \ the part where you give the OP a link to his own solution. Just sayin'.\n<|/\
    \ c |>\n<| c |>\nI don't see that as relevant. He is not looking for an explanation\
    \ of binary numbers, he is looking for help with binary sum in PHP. My solution\
    \ solves this problem and also gives the correct answer, so why don't I post it?\n\
    <|/ c |>\n<| c |>\nThe OP wants to understand what happens internally, and he\
    \ did it by showing him his own code.\n<|/ c |>\n<| c |>\nMy answer gives exactly\
    \ what he asks for. He even includes a link to a working solution. The OP can\
    \ simply copy/paste my code into his script and run it until he's satisfied.\n\
    <|/ c |>\n<| c |>\nYou don't need to post a link, your solution is here: [link](http://stackoverflow.com/a/33435376/1267304)\n\
    <|/ c |>\n<| a dscore=3 |>\nSolution with recursion:\n<code>", "    $digitSum\
    \ = 0;\n\n    $power = 0;\n\n    while ($N > 0) {\n        $digitSum = $digitSum\
    \ * 10 + ($N % 10);\n        $N = ($N / 10);\n        $power++;\n    }\n\n   \
    \ $binStr = \"\";\n\n    for ($i = $power; $i >= 1; $i--) {\n        $binStr =\
    \ ($binStr . $digitSum % 2);\n        $digitSum = $digitSum / 2;\n    }\n\n  \
    \  return $binStr;\n}\n\nvar_dump(solve($N));", "    $sum = 0;\n    for ($i =\
    \ 0; $i < strlen($N); $i++) {\n        $sum += $N[$i] * pow(10, strlen($N) - 1\
    \ - $i);\n    }\n    return sprintf('%u', $sum);\n}\n\necho solve(1000);", " \
    \   $S = 0;\n    while ($N > 0) {\n        $S += $N % 2;\n        $N /= 2;\n \
    \   }\n    return $S;\n}\n\necho solve(600);", "    $S = 1;\n    $S = bindec($S);\n\
    \    $S = str_split($S, 2);\n\n    $L = 0;\n    $M = 0;\n\n    $T = \"\";\n  \
    \  while ($L == 0 && $M == 0) {\n        $L = 1;\n        $M = 0;\n        foreach\
    \ ($S as $k => $value) {\n            $T = ($T + $value) % 2;\n            $M\
    \ = ($M + $k) % 2;\n            $L = ($L + $value) % 2;\n        }\n        $S\
    \ = str_split($S, 2);\n    }\n\n    $S = $M;\n    $S = str_split($S, 2);\n\n \
    \   $T = 0;\n    $T = 0;\n    $T = $T + $N;\n\n    $T = ($T + $S[1]) % 2;\n  \
    \  $S = ($S[0] + $S[1]) % 2;\n\n    $T = ($T + $S[0]) % 2;\n\n    $T = ($T + $S[0])\
    \ % 2;\n\n    $T = ($T + $S[1]) % 2;\n\n    $T = ($T + $S[0]) % 2;\n\n    $S =\
    \ $T;\n    $S = str_split($S, 2);\n\n    $T = 0;\n    $T = 0;\n    $T = $T + $N;\n\
    \n    $T = ($T + $S[1]) % 2;\n    $S = ($S[0] + $S[1]) % 2;\n\n    $T = ($T +\
    \ $S[0]) % 2;\n\n    $T = ($T + $S[0]) % 2;\n\n    $T = ($T + $S[1]) % 2;\n\n\
    \    $T = ($T + $S[0]) % 2;\n\n    $S = $T;\n    $S = str_split($S, 2);\n\n  \
    \  $T = 0;\n    $T = 0;\n    $T = $T + $N;\n\n    $T = ($T + $S[1]) % 2;\n   \
    \ $S = ($S[0] + $S[1]) % 2;\n\n    $T = ($T + $S[0]) % 2;\n\n    $T = ($T + $S[0])\
    \ % 2;\n\n    $T = ($T + $S[1]) % 2;\n\n    $T = ($T + $S[0]) % 2;\n\n    $S =\
    \ $T;\n    $S = str_split($S, 2);\n\n    return $S[0];\n}\n\necho solve($N);",
  "    $binary = 0;\n    $number = '';\n    while ($N > 0) {\n        $N = floor(N/2);\n\
    \        $binary = $binary + ($N % 2);\n        $number = $number . $N;\n    }\n\
    \    if ($N == 0) {\n        return '0';\n    }\n    return $number;\n}", "  \
    \  $string = '';\n    for($i=0; $i<$N; $i++){\n        $string .= bindec(str_pad(dechex($i),2,'0',STR_PAD_LEFT));\n\
    \    }\n    return $string;\n}\n\n$string = solve($N);\necho $string;", "    $num\
    \ = array();\n    $sum = 0;\n    for($i=0; $i < $N; $i++) {\n        $num[$i]\
    \ = $N % 2;\n        $N = $N / 2;\n    }\n    $str = \"\";\n    $i = $N;\n   \
    \ while($i) {\n        $str = ($num[$i-1] + $str);\n        $i++;\n    }\n   \
    \ return $str;\n}", "    \n    $numBits = count(decbin($N));\n    $sum = 0;\n\
    \    $result = \"\";\n    \n    for($i = $numBits; $i>0; $i--){\n        $sum\
    \ += $N % 2;\n        $N = floor($N / 2);\n    }\n    $result = $sum;\n    return\
    \ $result;\n}", "    $result = 0;\n    while (0 < $N) {\n        $result = $N\
    \ & $result;\n        $N = $N >> 1;\n    }\n    if (0 == $N)\n        return \"\
    0\";\n    return str_pad(dechex($result), $N, \"0\", STR_PAD_LEFT);\n}\n", " \
    \   $binary = '';\n\n    if ($N == 0) {\n        return '0';\n    }\n    for ($i\
    \ = 0; $i < strlen((string)$N); ++$i) {\n        $binary = $N & 1 ? $binary .\
    \ '1' : '0';\n        $N >>= 1;\n    }\n\n    return $binary;\n}\n</code>\n<|/\
    \ a dscore=3 tags=php,arrays,string,binary |>\n<| a dscore=3 |>\nHere's a Python\
    \ version, which will handle any non-negative integer N from 0 up to 2^32-1:\n\
    <code>\ndef sumDigits(N):\n    result = 0\n    while N > 0:\n        result +=\
    \ 1\n        N >>= 1\n    return result\n\ndef binaryToDecimal(binary):\n    #\
    \ base 10 to base 2\n    decimal = 0\n    while len(binary) > 0:\n        digit\
    \ = binary.pop(0)\n        decimal += (digit - '0') << len(binary)\n    return\
    \ decimal\n\ndef convert(N):\n    binary = bin(N)[2:]\n    decimal = sumDigits(binary)\n\
    \    return binaryToDecimal(binary), decimal\n</code>\nNote that this has time\
    \ complexity O(log N), where N is the length of the binary string. I'm assuming\
    \ that you want to convert N to the decimal form (with base 10). The above code\
    \ uses recursion to do the conversion. Here's the code in PHP which uses call_user_func()\
    \ to do the recursion:\n<code>", "  if ($N < 10) {\n    return '1';\n  }\n  $sum\
    \ = 0;\n  for ($i = 0; $i < $N; $i++) {\n    $sum += ($i % 2) * ($i + 1) * ($i\
    \ + 1) / 2;\n  }\n  return str_pad ($sum, 2, '0', STR_PAD_LEFT);\n}", "    $sum\
    \ = 0;\n    $result = \"\";\n    while ($N > 0) {\n        $sum = $sum * 2 + $N\
    \ & 1;\n        $N = $N >> 1;\n    }\n    $result = \"1\" . $result;\n    return\
    \ $sum === 0 ? $result : \"0$result\";\n}\n\n$t = time();\n$result = solve($_GET['N']);\n\
    $t = time() - $t;\necho \"$result\\nRuntime: $t\\n\";", "    // write your code\
    \ here\n    if($N<0){\n        return \"-1\";\n    }\n    $num = $N;\n    $str\
    \ = \"\";\n    while($num > 0){\n        $mod = $num % 2;\n        $str = $mod.$str;\n\
    \        $num = $num / 2;\n    }\n    return $str;\n}", "    while(N != 0) {\n\
    \        $N = floor($N / 2);\n        $n2 = $N % 2;\n        $N = $N / 2;\n  \
    \      $s = $n2 + $s;\n    }\n    return $s;\n}\n", "    $ret = '';\n    $count\
    \ = 0;\n    $s = '';\n    while ($N != 0) {\n        $ret .= chr($N % 2);\n  \
    \      $N = floor($N / 2);\n        $count++;\n    }\n    return $ret . $s;\n\
    }\n", "  $binary = array_fill(0, $N, '1');\n  for($i = 0; $i < $N; $i++) {\n \
    \   $binary[$i] = '0' + ($binary[$i]);\n  }\n  return str_pad($binary[$N-1], 2,\
    \ '0', STR_PAD_LEFT);\n}", "    $result = '';\n\n    if ($N < 10) {\n        $result\
    \ = '0'.$N;\n    } else {\n        $last = $N % 10;\n        $result = $last.solve($N\
    \ / 10);\n    }\n\n    return $result;\n}\n", "    $res = '1';\n    while ($N\
    \ > 0) {\n        $mod = $N % 2;\n        $res = $mod . $res;\n        $N = $N/2;\n\
    \    }\n    return $res;\n}\n\n$N = 20;\necho solve($N);", "    $S = '';\n   \
    \ $N = intval($N);\n    $sum = 0;\n    if ($N === 0) {\n        $N = 0;\n    }\n\
    \    $N = (string)$N;\n    foreach (str_split($N) as $digit) {\n        $sum +=\
    \ $digit;\n    }\n    for ($i = 1; $i <= $sum; $i++) {\n        $S .= '1';\n \
    \   }\n    for ($i = $sum; $i > 0; $i--) {\n        $S .= ($i % 2 ? '0' : '1');\n\
    \    }\n    return $S;\n}", "    $sum = 0;\n    while ($N > 0) {\n        $bin\
    \ = dechex($N);\n        $N = $N & ($N - 1);\n        $sum = $sum + $bin;\n  \
    \  }\n    return $sum;\n}\n", "    // Your code here\n    $sum = 0;\n    for($i\
    \ = 0; $i < strlen($N); $i++){\n        $sum += $N[$i];\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is very good! I did not know that strlen was\
    \ in PHP. Thank you very much!\n<|/ c |>\n<| c |>\nGlad I could help.\n<|/ c |>\n\
    <| a tags=algorithm,php |>\n<code>\n<?php", "    $bin = str_split(decbin($N));\n\
    \    $sum = 0;\n    $digits = count($bin);\n    for ($i = 0; $i < $digits; $i++)\
    \ {\n        $sum += $bin[$i];\n    }\n    return $sum;\n}\n", "    $bits = 0;\n\
    \    $bin = '';\n    do {\n        $bits += $N % 2;\n        $N = $N >> 1;\n \
    \   } while($N);\n    do {\n        $bin = $bin . $bits;\n        $bits = 0;\n\
    \    } while($N);\n    return $bin;\n}", "    $result = \"\";\n    for ($i = 0;\
    \ $i < $N; $i++)\n        $result .= str_pad(base_convert($i, 10, 2), 2, \" \"\
    , STR_PAD_LEFT);\n    return $result;\n}\n\n$N = 123;\necho solve($N);", "  $ans\
    \ = \"\";\n  while (true) {\n    $temp = str_pad(base_convert($N, 10, 2), 64,\
    \ '0', STR_PAD_LEFT);\n    $ans = $ans + $temp;\n    $N = floor(($N / 10) + 1);\n\
    \    if ($N == 1) break;\n  }\n  return $ans;\n}", "    $nums = str_split($N);\n\
    \    $sum = 0;\n    foreach($nums as $num){\n        $sum += $num;\n    }\n  \
    \  return $sum;\n}\n\n$result = solve(\"1000\");\necho $result;", "  assert(isset($N));\n\
    \  return $N === 0 ? \"0\" : implode(array_map(function($x) { return $x % 2 ==\
    \ 0 ? \"0\" : \"1\"; }, str_split(dechex($N))));\n}", "    $sum = \"\";\n    $base\
    \ = 2; // 2\n    for ($i = 0; $i < strlen($N); $i++) {\n        $digit = substr($N,\
    \ $i, 1);\n        if ($digit == \"0\") {\n            $sum += \"0\";\n      \
    \  } else {\n            $sum += $digit;\n        }\n    }\n    echo $sum;\n}",
  "  $digitSum = 0;\n  $binary = '';\n\n  while ($N) {\n    $digit = $N % 2;\n   \
    \ $N = floor($N / 2);\n    $digitSum += $digit;\n    $binary = ($digit * $binary)\
    \ + $digit;\n  }\n\n  return $binary;\n}\n\n$N = 147;\n\n$digitSum = solve($N);\n\
    echo \"The sum of digits is \" . $digitSum . \"\\n\";", "    \n    $result = \"\
    \";\n    $binary_number = \"\";\n    $N = intval($N);\n    \n    for ($i = 1;\
    \ $i <= $N; $i++) {\n        $binary_number .= $i;\n    }\n    \n    for ($i =\
    \ 0; $i < strlen($binary_number); $i++) {\n        $digit = pow(2, $i) - intval($binary_number[$i]);\n\
    \        $result = $digit . $result;\n    }\n    \n    if ($result == \"\") {\n\
    \        return \"0\";\n    }\n    \n    return $result;\n}\n</code>\n<|/ a dscore=1\
    \ tags=php |>\n<| a tags=php |>\nIn PHP 8+, you can do:\n<code>\necho bindec('10011011');\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=php |>\nUsing Binary Conversion\n\
    The easiest way would be to convert your number into binary, but you can also\
    \ do it without binary, like this:\n<code>\n$number = 157;\n$array = [];\nwhile\
    \ ($number > 0) {\n    $array[] = $number % 2;\n    $number = $number >> 1;\n\
    }\n\n$number = $array[0];\n$number = 0;\nfor ($i = 1; $i < count($array); $i++)\
    \ {\n    $number += $array[$i] * pow(2, $i);\n}\n\nreturn $number;\n</code>\n\
    <|/ a |>\n<| a tags=php |>\nI wrote a solution that may interest you\n<code>",
  "    $s = $N;\n    while(0 < $s) {\n        $bin = decbin($s);\n        $len = strlen($bin);\n\
    \        $s = $N - $s;\n        $s = $s * pow(10, $len - 1);\n        $s += $N\
    \ % $s;\n    }\n    $bin = decbin($s);\n    $len = strlen($bin);\n    return $bin;\n\
    }\n\n$tests = array(\n    array(3),\n    array(4),\n    array(9),\n    array(16),\n\
    \    array(17),\n    array(22),\n    array(37),\n    array(55),\n    array(100),\n\
    \    array(999),\n    array(10000),\n    array(1500),\n    array(1501),\n    array(1507),\n\
    \    array(2047),\n    array(2049),\n    array(2147),\n    array(2149)\n);\necho\
    \ \"<pre>\";\n$startTime = microtime(true);\nfor ($i = 0; $i < count($tests);\
    \ $i++) {\n    echo \"Case #\" . $i . ': ' . solve($tests[$i]) . \"\\n\";\n}\n\
    $endTime = microtime(true);\n$time = $endTime - $startTime;\necho sprintf('Execution\
    \ time was %g seconds', $time) . \"\\n\";", "    $num = new RecursiveIteratorIterator(\n\
    \            new RecursiveArrayIterator(str_split(bin2hex($N)), RecursiveIteratorIterator::LEAVES_ONLY)\n\
    \    );\n    $sum = 0;\n    foreach ($num as $val) {\n        $sum += $val;\n\
    \    }\n    $num = decbin($sum);\n    $num = substr($num, strlen($num) - 2);\n\
    \    return $num;\n}\n\n$input  = '7';\n$output = solve($input);\necho \"$output\\\
    n\";", "    $res = str_pad('', $N, '0');\n    $sum = 0;\n    for ($i = 0; $i <\
    \ $N; $i++) {\n        $sum = bindec($res[$i]) + $sum;\n    }\n    return str_pad($sum,\
    \ strlen($sum), '0', STR_PAD_LEFT);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=dynamic-programming,math,php\
    \ |>\nThe key here is to use dynamic programming.\n<code>", "    if ($N < 1) {\n\
    \        return 0;\n    }\n    $result = array();\n    $powers = array();\n  \
    \  $remainder = 0;\n    for ($i = 0; $i < $N; $i++) {\n        $remainder = 0;\n\
    \        $carry = 0;\n        for ($j = 0; $j < strlen($result); $j++) {\n   \
    \         $remainder = $remainder + ($result[$j] - '0') * ($powers[$j + 1] + 1);\n\
    \            $carry = 0;\n        }\n        if ($remainder > 0) {\n         \
    \   $result[] = $remainder;\n        }\n        $result[] = ($carry > 0) ? '1'\
    \ : '0';\n    }\n    return implode('', $result);\n}\n</code>\nThe above function\
    \ solves a puzzle called \"Part III\" which asks to determine a number X of length\
    \ N with the property that each digit of the number must be less than or equal\
    \ to 9 (mod 10). For example:\n<code>\nsolve(N) = 11001001001010\n</code>\n<|/\
    \ a tags=binary,php,math |>\n<| a tags=binary,php,math dscore=0 |>\nThis is an\
    \ old question, but I came across it when I was trying to solve the same problem.\
    \ For those who might have found it useful I decided to post my solution:\n<code>",
  "    $sumDigits = array();\n    foreach(str_split(decbin($N)) as $digit) {\n   \
    \     $sumDigits[] = $digit;\n    }\n    $result = array_sum($sumDigits);\n  \
    \  return str_split($result);\n}\n", "    $ans = '';\n    \n    do {\n       \
    \ $ans = $N & 1 ? $ans.'1' : '0';\n        $N >>= 1;\n    } while ($N);\n    \n\
    \    return $ans;\n}\n$N = 147;\n$sum = 0;\nfor ($i = 1; $i < count($N); $i++)\
    \ {\n    $sum += $N[$i];\n}\necho solve($sum);", "    $sum = \"\";\n    while\
    \ (isset($N % 2) != 0) {\n        $sum = ($N & 1) + $sum;\n        $N >>= 1;\n\
    \    }\n    return $sum;\n}\n$number = 147;\necho solve(147);", "    $s = $N =\
    \ str_pad('', $N, '0');\n    for ($i = strlen($s) - 1; $i >= 0; $i--) {\n    \
    \    $b = substr($s, $i, 1);\n        $b = bcadd($b, 1);\n        $s = substr($s,\
    \ 0, $i) + $b;\n    }\n    return $s;\n}\n\nprint_r(solve($argv[1]));\n</code>\n\
    <|/ a tags=algorithm,string,php dscore=3 |>\n<| c |>\nThis answer does not seem\
    \ to take into account that `str_pad()` will add padding up to a given length.\
    \  It also looks like a naive \"brute-force\" approach would be faster, especially\
    \ since that requires only a single function call and thus is more cache-friendly.\n\
    <|/ c |>\n<| c |>\nstr_pad() does not add padding up to a given length. It will\
    \ pad with zeros up to a given length. The last parameter tells how many zeros\
    \ to add, which is exactly what the OP asked for.\n<|/ c |>\n<| c |>\nYou said\
    \ it yourself. It was a comment, not an answer. `str_pad` adds \"padding\" to\
    \ the left of a string until a certain length.  Your answer is basically \"pad\
    \ a zero-padded string to a desired length, then append that string to a zero-padded\
    \ string\" which is no different than my answer.\n<|/ c |>\n<| c |>\nIt was not\
    \ my answer, it was the OP's. I also made it clear that the function does not\
    \ add padding up to a given length. Read the [documentation](http://php.net/manual/en/function.str-pad.php)\
    \ more carefully.\n<|/ c |>\n<| c |>\nI agree with the other comments, your solution\
    \ doesn't seem to be the best.\n<|/ c |>\n<| a tags=algorithm,string,php |>\n\
    I would suggest a recursive approach:\n<code>", "    $result = '';\n    while\
    \ ($N > 0) {\n        $result = $N % 2 + $result;\n        $N = ($N - $N % 2)\
    \ / 2;\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nHi,\
    \ thank you for your answer. I found another solution by myself, and posted my\
    \ answer, just to let you know that both are working. I really appreciate if you\
    \ can explain the difference between the two solutions.\n<|/ c |>\n<| c |>\nBoth\
    \ solutions will work fine. My solution is more readable. Just for my understanding,\
    \ could you elaborate on \"why the first one is incorrect\"? I thought the while\
    \ loop will continue until $N is 0, then it will return $N%2 + $result?\n<|/ c\
    \ |>\n<| c |>\nYes, the while loop will continue until $N is 0, then it will return\
    \ $N%2 + $result. However, the while loop will not continue for other values of\
    \ $N since the result of $N%2 will never change for other values of $N. Hence,\
    \ the while loop will end before it returns the correct result.\n<|/ c |>\n<|\
    \ c |>\nSorry but I think your solution is incorrect too. `010 + 001` should output\
    \ `1`\n<|/ c |>\n<| c |>\nMy solution outputs `1` for the example I gave in the\
    \ answer.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n$input=1;\n$output=substr(decbin($input),0,7);\n\
    echo $output;", "    $result = '';\n    do {\n        $result = $result + str_repeat(chr($N\
    \ % 2), 4);\n        $N = $N / 2;\n    } while ($N > 0);\n    return $result;\n\
    }\n\necho solve(147);", "    $S = '';\n    while($N > 0) {\n        $S = ($S .\
    \ str_pad(decbin($N%2), 8, '0', STR_PAD_LEFT));\n        $N = floor($N/2);\n \
    \   }\n    return $S;\n}", "    $binary = 0;\n    $binary = $N & 0xFF;\n    $binary\
    \ = $binary >>  8;\n    $binary = $binary >>  4;\n    $binary = $binary >>  2;\n\
    \    $binary = $binary >>  1;\n    $binary = $binary >>  1;\n    echo $binary;\n\
    }", "    $sum = 0;\n    $binary = \"\";\n    while (0 < $N) {\n        $sum +=\
    \ $N % 2;\n        $N = $N / 2;\n    }\n    $binary = \"1\" * $sum;\n    return\
    \ $binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php ", "    $N=str_pad(decbin($N),32,'0',STR_PAD_LEFT);\n\
    \    $sum=0;\n    for($i=1;$i<=32;$i++) {\n        $sum+=($N[$i]-'0')*pow(2,$i);\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a dscore=3 tags=math,php |>\n<| a |>\n\
    I really like solution, thanks.\nHere is the implementation for my problem and\
    \ just in case people are interested in the Javascript solution:\n<code>", " \
    \   $sum=0;\n    while(N>0){\n        $sum+=$N%2;\n        $N=$N/2;\n    }\n \
    \   return $sum;\n}\n", "  // Write your code here.\n}", "    $binary = \"\";\n\
    \    \n    while($N > 0) {\n        $bin = dechex($N % 10);\n        $N = ($N\
    \ / 10);\n        \n        $bin = $bin . ($bin == \"\" ? \"\" : \"\");\n    \
    \    $binary = $binary . $bin;\n    }\n    \n    return $binary;\n}\n", "    $sum\
    \ = 0;\n    for($i = 0; $i < $N; $i++) {\n        $sum += $i % 2;\n    }\n   \
    \ $binary = $sum;\n    $length = strlen($binary);\n    $binary = str_pad($binary,\
    \ $length, '0', STR_PAD_LEFT);\n    return $binary;\n}\n\n$N = 147;\n$binary =\
    \ solve($N);\necho $binary.\"\\n\";", "    $sum = \"\";\n    for ($i = 0; $i <\
    \ $N; $i++) {\n        $sum += ($i % 2 == 0) ? '1' : '0';\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,bit-manipulation |>\nHere's a solution using\
    \ the ternary operator.\n<code>", "    // Only one number in array\n    $sum =\
    \ $N;\n    $array = [];\n\n    do {\n        $binaryString = \"\";\n        while($N\
    \ > 0) {\n            $binaryString .= dechex($N % 2);\n            $N = floor($N\
    \ / 2);\n        }\n        array_push($array, $binaryString);\n        $sum -=\
    \ $array[0]; // Keep track of sum\n    } while($sum > 0);\n\n    foreach ($array\
    \ as $bin) {\n        echo $bin.\"\\n\";\n    }\n}\nsolve($_GET[\"N\"]);", " \
    \   if ($N == 0) return \"0\";\n    $result = \"\";\n    while ($N > 0) {\n  \
    \      $lastDigit = $N % 10;\n        $N = $N / 10;\n        $result = $lastDigit\
    \ . $result;\n    }\n    return $result;\n}\n", "    // Write your code in PHP7.0\n\
    \    $number = str_pad($N, 4, \"0\", STR_PAD_RIGHT);\n    $sum = 0;\n    $sum\
    \ = 0;\n    foreach (str_split($number) as $num) {\n        $sum = $sum + $num;\n\
    \    }\n    return $sum;\n}", "    // Write your code here.\n    $bin = '';\n\
    \    for($i = 1; $i <= $N; $i++) {\n        $bin = $bin . ($i % 2);\n    }\n \
    \   return $bin;\n}\necho solve($_GET['N']);", "    // Your code here\n    $sum\
    \ = 0;\n    $a = 1;\n    $b = $N;\n    $digits = $N / 10;\n    do {\n        $result\
    \ = $b / $a;\n        $sum += $result;\n        $a = $b;\n        $b = $result;\n\
    \    } while ($N > 0);\n    if ($sum == $N) {\n        $sum = 0;\n    }\n    return\
    \ $sum;\n}\n", "    if ($N === 0) return '0';\n    $result = '';\n    $carry =\
    \ 1;\n    $N2 = $N;\n    while (!($N2 === 0)) {\n        $result = $result + str_pad(decbin($N2\
    \ % 2), 8, '0', STR_PAD_LEFT);\n        $N2 = floor($N2 / 2);\n        $carry\
    \ = ($N2 > 0);\n    }\n    return $carry ? $result : $result . $result . '1';\n\
    }\n\n$Ns = [150,147,1000,1001,1005,1010,1020,1040];\n\nforeach ($Ns as $N) {\n\
    \    $result = solve($N);\n    echo $N . ' => ' . $result . '<br/>';\n}\n</code>\n\
    <|/ a tags=php,binary |>\n<| a dscore=0 tags=php,binary |>\nHere is my version:\n\
    <code>", "    $result = '';\n    $sum = 0;\n    $digits = array_reverse(str_split(decbin($N)));\n\
    \    foreach ($digits as $number) {\n        $sum += $number;\n    }\n    if ($sum\
    \ > 9) {\n        $sum -= 10;\n        $result = '0' . $result;\n    }\n    while\
    \ ($sum > 0) {\n        $result += $digits[$sum % 10];\n        $sum -= $digits[$sum\
    \ % 10];\n    }\n    echo $result;\n}", "    $sum = 0;\n    $str = array();\n\
    \    while ($N) {\n        if ($N % 2 == 0) {\n            $sum++;\n        }\n\
    \        $N = $N / 2;\n    }\n    $str[0] = ($sum % 2) + 1;\n    $str[1] = 1;\n\
    \    while ($str[1]) {\n        $str[1] = $str[0] * 2;\n        $str[0] = $str[1]\
    \ - 1;\n    }\n    return $str[0];\n}", "    // base case\n    if ($N == 0)\n\
    \        return 0;\n    // base case\n    if ($N < 0)\n        return '-1';\n\
    \    $sum = 0;\n    // Loop to add digits in binary until we have 0\n    while\
    \ ($N) {\n        $sum += pow(2, $N % 10);\n        $N /= 10;\n    }\n    // return\
    \ string with leading zeros\n    return str_pad(base_convert($sum, 10, 2), 32,\
    \ '0', STR_PAD_LEFT);\n}", "    $sum = 0;\n    while($N != 0) {\n        $sum\
    \ += $N % 2;\n        $N = ($N - $sum) / 2; // integer division\n    }\n    return\
    \ $sum;\n}\n", "    $sum = 0;\n    $s = \"\";\n    while ($N) {\n        $sum\
    \ +=( $N % 2 ? 1 : 0 );\n        $N = floor($N/2);\n    }\n    return $s.$sum;\n\
    }", "    $s = '';\n    $sum = 0;\n    while ($N) {\n        $sum += $N % 10;\n\
    \        $N = ($N / 10) % 10;\n    }\n    $s = str_pad($sum, 1, '0', STR_PAD_LEFT);\n\
    \    return $s;\n}\n\n$N = 14;\n$sum = solve($N);\necho \"$sum\\n\";", "    for($i=1;$i<=10;$i++)\
    \ {\n        $result = ($N%pow(10,$i)) % 2;\n        $N = ($N-($result*pow(10,$i)))\
    \ / pow(10,$i);\n        echo str_pad($result, 2, \"0\", STR_PAD_LEFT);\n    }\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,function,math dscore=0 |>\n<code>\n\
    <?php", "    $result = \"\";\n    $base = 1;\n    $decimal = 0;\n    while ($N\
    \ > 0) {\n        $result = $result . decToBin($decimal);\n        $decimal =\
    \ $decimal * ($base);\n        $N = $N - 1;\n    }\n    return $result;\n}\n",
  "  $number = '';\n  \n  while($N){\n    $number = str_pad ($number, strlen ($number),\
    \ 0, STR_PAD_LEFT);\n    $number = substr ($number, 0, -1);\n    $N = $N % 10;\n\
    \  }\n  return $number;\n}\n\n$string = '1000';\n$result = solve ($string);\n\
    echo $result;", "    $binaryString = \"\";\n    for ($i = 0; $i < strlen($N);\
    \ $i++) {\n        $binaryString .= str_pad(decbin($N[$i]), 8, '0', STR_PAD_LEFT);\n\
    \    }\n    return $binaryString;\n}\n$N = [1,147,150];\nprint_r(solve($N));\n\
    </code>\n<|/ a tags=php,algorithm,string,binary,binary dscore=1 |>\n<| a tags=php,algorithm,string,binary,binary\
    \ |>\nYou can use array_reduce:\n<code>", "    $N = str_pad($N, 8, '0', STR_PAD_LEFT);\n\
    \    return sprintf('%010d', str_split($N));\n}\n</code>\n<|/ a tags=algorithm,math,php,mathematical-optimization\
    \ dscore=1 |>\n<| c |>\nThanks, it worked! Although I was looking for some algorithm\
    \ (without using loops). The function you provided just saved me hours of work!\n\
    <|/ c |>\n<| c |>\nIt's not looping, it's recursion\n<|/ c |>\n<| c |>\nyes recursion\
    \ is looping, you can also think of recursion as \"looping with a little twist\"\
    .\n<|/ c |>\n<| a tags=algorithm,math,php,mathematical-optimization |>\n<code>\n\
    <?php"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
