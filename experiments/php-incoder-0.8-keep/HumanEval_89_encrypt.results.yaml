name: HumanEval_89_encrypt
language: php
results:
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array(\n\
    \    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n    'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  );\n  $shift =\
    \ 3;\n  return strtr($s, $alphabet, array_flip($alphabet));\n}\n</code>\n<|/ a\
    \ tags=string,php,rotation,algorithm,encryption |>\n<| c |>\nHow does this deal\
    \ with shifting by more than one character?  What happens if the input string\
    \ was \"abcdefgh\"?\n<|/ c |>\n<| c |>\nThis solution rotates every letter in\
    \ the alphabet three times.  If you're rotating your string 5 times you'll have\
    \ \"abfghijkl\".  It does not care if you rotate 4 or 5 or 10 times.  It simply\
    \ rotates every letter by 3 places.  It does not matter if you rotate it by 10\
    \ places.  It will still return the same string if you rotate it 10 times.\n<|/\
    \ c |>\n<| c |>\nThis solution doesn't work for characters that are more than\
    \ one letter. For example the string \"abc\" will not rotate to \"bbc\".\n<|/\
    \ c |>\n<| a dscore=4 |>\nMy solution:\n<code>\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptrejbs3v.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array();\n    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n    $alphabet\
    \ = array_reverse($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n\
    \    shuffle($alphabet);\n    $s = strrev($s);\n    $key = $alphabet[0];\n   \
    \ for ($i = 1; $i < strlen($s); $i++) {\n        $char = substr($s, $i, 1);\n\
    \        $position = strpos($alphabet, $char);\n        if ($position === FALSE)\
    \ {\n            break;\n        }\n        $newchar = substr($alphabet, $position\
    \ - 2, 1);\n        array_splice($alphabet, $position - 2, 1);\n        $alphabet[]\
    \ = $newchar;\n    }\n    $newalphabet = array();\n    $newalphabet = array_reverse($alphabet);\n\
    \    return $newalphabet[0] . $newalphabet[1] . $newalphabet[2] . $alphabet[0];\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmpk3g38owy.php\
    \ on line 22\n\nWarning: substr() expects parameter 1 to be string, array given\
    \ in /tmp/tmpk3g38owy.php on line 26\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpk3g38owy.php:40\nStack trace:\n#0 /tmp/tmpk3g38owy.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk3g38owy.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $rotated_alphabet\
    \ = array();\n    foreach ($s as $letter) {\n        $rotated_alphabet[] = array_shift(str_split($letter,\
    \ 2));\n    }\n    return implode('', $rotated_alphabet);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp5ydbzsl5.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ydbzsl5.php:24\n\
    Stack trace:\n#0 /tmp/tmp5ydbzsl5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5ydbzsl5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \tshuffle($alphabet);\n\tarray_pop($alphabet);\n\tarray_unshift($alphabet, '');\n\
    \t$s = str_split($s);\n\tshuffle($s);\n\tarray_pop($s);\n\tarray_unshift($s, '');\n\
    \t$s = join('', $s);\n\t$s = $alphabet[str_replace(array_keys($alphabet), array_values($alphabet),\
    \ $s)];\n\treturn $s;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb73z26ly.php:30\n\
    Stack trace:\n#0 /tmp/tmpb73z26ly.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb73z26ly.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  // Write your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj21c34m2.php:20\n\
    Stack trace:\n#0 /tmp/tmpj21c34m2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj21c34m2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Replace\
    \ each letter with its shifted version\n    $alphabet = str_replace(\n       \
    \ range('A', 'Z'),\n        range('A', 'Z').\n        array_map(\n           \
    \ function ($a) use ($alphabet) {\n                return $a + array_shift($alphabet);\n\
    \            },\n            range('A', 'Z')\n        ),\n        $s\n    );\n\
    \n    // Return the string with the new alphabet\n    return str_replace(\n  \
    \      $alphabet,\n        array_combine(\n            range('A', 'Z'),\n    \
    \        array_map(\n                function ($a) use ($alphabet) {\n       \
    \             return $a + array_shift($alphabet);\n                },\n      \
    \          range('A', 'Z')\n            )\n        ),\n        $s\n    );\n}\n\
    \nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmpnicyfrq3.php on line 18\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given in /tmp/tmpnicyfrq3.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpnicyfrq3.php on line\
    \ 18\n\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmpnicyfrq3.php on line 18\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given in /tmp/tmpnicyfrq3.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpnicyfrq3.php on line\
    \ 18\n\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmpnicyfrq3.php on line 18\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given in /tmp/tmpnicyfrq3.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpnicyfrq3.php on line\
    \ 18\n\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmpnicyfrq3.php on line 18\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpnicyfrq3.php on line 18\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given "
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $s = str_split($s);\n\
    \  array_walk(\n    $s,\n    function (&$v) use (&$s) {\n      $v += (array_pop($s))\
    \ * 2;\n      $v %= 26;\n    }\n  );\n  return implode('', $s);\n}\n</code>\n\
    And finally the decrypt function\n<code>\nfunction candidate(...$args) {\n   \
    \ return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo6rn1aes.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $rotated_alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $return_string = array();\n    $stringlength = strlen($s);\n    for ($i =\
    \ 0; $i < $stringlength; $i++) {\n        $letter_string = substr($s, $i, 1);\n\
    \        $return_string[$i] = $rotated_alphabet[array_search($letter_string, $alphabet)];\n\
    \    }\n    return implode('', $return_string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm4wioe3j.php:28\n\
    Stack trace:\n#0 /tmp/tmpm4wioe3j.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm4wioe3j.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $alphabet_len = strlen($alphabet);\n\n  $s =\
    \ strrev($s);\n  $s = strtr($s, $alphabet, array_flip($alphabet));\n  $s = strrev($s);\n\
    \  $s = strtr($s, $alphabet, array_flip($alphabet));\n\n  return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip() expects parameter 1 to be array, string given in\
    \ /tmp/tmptkt7kom9.php on line 16\n\nWarning: array_flip() expects parameter 1\
    \ to be array, string given in /tmp/tmptkt7kom9.php on line 18\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmptkt7kom9.php:28\nStack trace:\n\
    #0 /tmp/tmptkt7kom9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptkt7kom9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$alphabet = str_split($alphabet, 2);\n\t$ns =\
    \ str_split($s);\n\t$encrypted = array();\n\tforeach ($ns as $n => $n) {\n\t\t\
    if ($n < strlen($alphabet) - 1) {\n\t\t\t$next = $alphabet[($n + 1) + (int)strlen($alphabet)];\n\
    \t\t\t$encrypted[$n] = $alphabet[(2 * $n) + $alphabet[($n + 1) + 1]] . $alphabet[$next];\n\
    \t\t} else {\n\t\t\t$encrypted[$n] = $alphabet[($n + 2)] . $alphabet[($n + 1)]\
    \ . $alphabet[($n + 2)];\n\t\t}\n\t}\n\treturn implode('', $encrypted);\n}\n\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpemz765aj.php\
    \ on line 17\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpemz765aj.php on line 17\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpemz765aj.php:32\nStack trace:\n#0 /tmp/tmpemz765aj.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpemz765aj.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \  $alphabet1 = str_split('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  $alphabet2 = str_split('DEFGHIJKLMNOPQRSTUVWXYZABCDE');\n\
    \  $alphabet3 = str_split('GHIJKLMNOPQRSTUVWXYZABCDEFA');\n  $alphabet4 = str_split('IJKLMNOPQRSTUVWXYZABCDEFGH');\n\
    \  $alphabet5 = str_split('JKLMNOPQRSTUVWXYZABCDEFGHI');\n  $alphabet6 = str_split('LMNOPQRSTUVWXYZABCDEFGHIJ');\n\
    \  $alphabet7 = str_split('MNOPQRSTUVWXYZABCDEFGHIJK');\n  $alphabet8 = str_split('NOPQRSTUVWXYZABCDEFGHIJKL');\n\
    \  $alphabet9 = str_split('OPQRSTUVWXYZABCDEFGHIJKLM');\n  $alphabet10 = str_split('PQRSTUVWXYZABCDEFGHIJKLMN');\n\
    \  $alphabet11 = str_split('QRSTUVWXYZABCDEFGHIJKLMNO');\n  $alphabet12 = str_split('RSTUVWXYZABCDEFGHIJKLMNOP');\n\
    \  $alphabet13 = str_split('UVWXYZABCDEFGHIJKLMNOPQ');\n  $alphabet14 = str_split('VWXYZABCDEFGHIJKLMNOPQT');\n\
    \  $alphabet15 = str_split('WXYZABCDEFGHIJKLMNOPQRS');\n  $alphabet16 = str_split('XYZABCDEFGHIJKLMNOPQRST');\n\
    \  $alphabet17 = str_split('YZABCDEFGHIJKLMNOPQRSTU');\n  $alphabet18 = str_split('ZABCDEFGHIJKLMNOPQRSTUV');\n\
    \  $alphabet19 = str_split('ZABCDEFGHIJKLMNOPQRSTUVW');\n  $alphabet20 = str_split('zabcdefghijklmnopqrstuvwxyz');\n\
    \  $alphabet21 = str_split('zABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  $alphabet22 = str_split('zDEFGHIJKLMNOPQRSTUVWXYZABC');\n\
    \  $alphabet23 = str_split('zGHIJKLMNOPQRSTUVWXYZABCDE');\n  $alphabet24 = str_split('zIJKLMNOPQRSTUVWXYZABCDEF');\n\
    \  $alphabet25 = str_split('z\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplcorc8j7.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated_alphabet = rotate($alphabet);\n\
    \    $encrypted = array();\n    $length = strlen($s);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $encrypted[] = substr($rotated_alphabet[ord($s[$i]) - ord('A')],\
    \ -2);\n    }\n    return implode('', $encrypted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmp7ihd0405.php:13\n\
    Stack trace:\n#0 /tmp/tmp7ihd0405.php(23): encrypt('hi')\n#1 /tmp/tmp7ihd0405.php(27):\
    \ candidate('hi')\n#2 /tmp/tmp7ihd0405.php(37): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp7ihd0405.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \  $alphabet = str_split($alphabet);\n  $rotatedAlphabet = array_map(function($elem)\
    \ {\n    return $elem[0];\n  }, array_chunk($alphabet, 2));\n  $rotated = array_reduce($rotatedAlphabet,\
    \ function($carry, $letter) {\n    return $carry . $letter;\n  });\n  $enc = strtr($s,\
    \ $alphabet, $rotated);\n  return $enc;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp433ozbax.php:29\n\
    Stack trace:\n#0 /tmp/tmp433ozbax.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp433ozbax.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet_size\
    \ = 2;\n    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        $encrypted .= $alphabet[$i\
    \ % (strlen($alphabet) * $alphabet_size)];\n    }\n    return $encrypted;\n}\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpji5gy6.php:25\n\
    Stack trace:\n#0 /tmp/tmpkpji5gy6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkpji5gy6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated_alphabet = $alphabet;\n    for ($i\
    \ = 0; $i < strlen($alphabet); $i++) {\n        for ($j = 0; $j < 2; $j++) {\n\
    \            $rotated_alphabet = substr($alphabet, 1) . substr($rotated_alphabet,\
    \ 1);\n        }\n    }\n    return $rotated_alphabet[$s];\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Illegal string offset 'hi' in /tmp/tmpc3_2bz95.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3_2bz95.php:26\nStack\
    \ trace:\n#0 /tmp/tmpc3_2bz95.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpc3_2bz95.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $a = str_split($s);\n\
    \  $c = $a[0];\n  for($i=1; $i<count($a); $i++) {\n    $c .= substr($a, $i, 1);\n\
    \    $c = $c.substr($c, 0, 1).substr($c, 1);\n  }\n  return $c;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: substr() expects parameter 1 to be string, array given in /tmp/tmpwtvzcska.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtvzcska.php:25\n\
    Stack trace:\n#0 /tmp/tmpwtvzcska.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwtvzcska.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = str_rot13(str_rot13($alphabet));\n\
    \treturn str_replace($alphabet, '', $s);\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw_by6eq.php:21\n\
    Stack trace:\n#0 /tmp/tmpiw_by6eq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpiw_by6eq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $s = str_split($s);\n    foreach ($s as &$char) {\n        $char = array_search($char,$alphabet);\n\
    \        $char += 2;\n        $char = array_search($char,$alphabet);\n    }\n\
    \    return implode('',$s);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpangjwc4n.php:27\n\
    Stack trace:\n#0 /tmp/tmpangjwc4n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpangjwc4n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $rotated_alphabet = str_rot13($alphabet);\n  return substr(strtr($s, $alphabet,\
    \ $rotated_alphabet), 0, 27);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzz8315k.php:22\n\
    Stack trace:\n#0 /tmp/tmphzz8315k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphzz8315k.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  $shifts = array(-1,0,1,-2,0,-3,0,1,-2,0,-4,0,1,2,-5,0,-1,2,-6,0,-7,0,-1,2,-6,0,-8,0,-9,0,-1,2,-6,0,-10,0,-10,0,-10,0,-10,0);\n\
    \  $length = strlen($s);\n  $new = '';\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $new .= $alphabet[$s[$i]];\n  }\n  for ($i = 0; $i < $length; $i++) {\n \
    \   $new .= $alphabet[$new[$i] + ($shifts[$i]%26)];\n  }\n  return $new;\n}\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpwe3_1y28.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpwe3_1y28.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwe3_1y28.php:29\n\
    Stack trace:\n#0 /tmp/tmpwe3_1y28.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwe3_1y28.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $shift = strlen($alphabet) / 2;\n\n  // Rotate $alphabet once for each letter\
    \ shifted down by 2\n  $alphabet = strtr($alphabet, array_flip($alphabet));\n\
    \  \n  // Shift each letter down by $shift\n  return strtr($s, $alphabet);\n}\n\
    \nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip() expects parameter 1 to be array, string given in\
    \ /tmp/tmp8d1nvp8x.php on line 16\n\nWarning: strtr(): The second argument is\
    \ not an array in /tmp/tmp8d1nvp8x.php on line 16\n\nWarning: strtr(): The second\
    \ argument is not an array in /tmp/tmp8d1nvp8x.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8d1nvp8x.php:27\nStack trace:\n\
    #0 /tmp/tmp8d1nvp8x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8d1nvp8x.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $alphabetLength = \\strlen($alphabet) - 1;\n\
    \    $alphabet = strrev($alphabet);\n    $n = \\strlen($s);\n    $newString =\
    \ '';\n    for ($i = 0; $i < $n; $i++) {\n        $newString .= $alphabet[$alphabetLength\
    \ - ($alphabet[$i] + $s[$i])%$alphabetLength];\n    }\n    return $newString;\n\
    }\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpq0xo1otd.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpq0xo1otd.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpq0xo1otd.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpq0xo1otd.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0xo1otd.php:27\n\
    Stack trace:\n#0 /tmp/tmpq0xo1otd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq0xo1otd.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n   $encrypted =\
    \ \"\";\n   for($i=0;$i<strlen($s);$i++) {\n      $encrypted .= rotate($s[$i]);\n\
    \   }\n   return $encrypted;\n}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmppg2xgi13.php:14\n\
    Stack trace:\n#0 /tmp/tmppg2xgi13.php(19): encrypt('hi')\n#1 /tmp/tmppg2xgi13.php(23):\
    \ candidate('hi')\n#2 /tmp/tmppg2xgi13.php(33): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmppg2xgi13.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return strtr(\n\
    \        $s,\n        array_combine(range(26, strlen($s)+26), range(26, strlen($s)+26))\n\
    \    );\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jwjzzkb.php:23\n\
    Stack trace:\n#0 /tmp/tmp3jwjzzkb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3jwjzzkb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $result = '';\n\
    \    for ($i = 0, $j = $strlen($s) - 1; $i < $strlen($s); $i++, $j--) {\n    \
    \    $result .= $alphabet[$j];\n        $result .= $alphabet[$i];\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpeujqhje6.php:13\n\
    Stack trace:\n#0 /tmp/tmpeujqhje6.php(21): encrypt('hi')\n#1 /tmp/tmpeujqhje6.php(25):\
    \ candidate('hi')\n#2 /tmp/tmpeujqhje6.php(35): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpeujqhje6.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet_rotation\
    \ = strlen($s) % 2\n        ? '1' : '0';\n\n    $result = '';\n    for ($i = 0;\
    \ $i < strlen($s); $i++) {\n        $result .= $s[$i] ^ $alphabet_rotation;\n\
    \    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyzwn2zr.php:28\n\
    Stack trace:\n#0 /tmp/tmpbyzwn2zr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbyzwn2zr.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Rotate every\
    \ letter by 2 places, to the left\n    $alphabet = array('A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\
    \ 'V', 'W', 'X', 'Y', 'Z');\n    $alphabet = array_reverse($alphabet);\n    return\
    \ implode($alphabet, str_split($s));\n}\n\nfunction candidate(...$args) {\n  \
    \  return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptx6ntiz.php:23\n\
    Stack trace:\n#0 /tmp/tmpptx6ntiz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpptx6ntiz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $newalphabet = \"\";\n    $newalphabet\
    \ .= substr($alphabet, 0, 1);\n    $newalphabet .= substr($alphabet, 2, 1);\n\
    \    $newalphabet .= substr($alphabet, 4, 1);\n    $newalphabet .= substr($alphabet,\
    \ 6, 1);\n    $newalphabet .= substr($alphabet, 8, 1);\n    $newalphabet .= substr($alphabet,\
    \ 10, 1);\n    $newalphabet .= substr($alphabet, 12, 1);\n    $newalphabet .=\
    \ substr($alphabet, 14, 1);\n    $newalphabet .= substr($alphabet, 16, 1);\n \
    \   $newalphabet .= substr($alphabet, 18, 1);\n    $newalphabet .= substr($alphabet,\
    \ 20, 1);\n    $newalphabet .= substr($alphabet, 22, 1);\n    $newalphabet .=\
    \ substr($alphabet, 24, 1);\n    $newalphabet .= substr($alphabet, 26, 1);\n \
    \   $newalphabet .= substr($alphabet, 28, 1);\n    $newalphabet .= substr($alphabet,\
    \ 30, 1);\n    $newalphabet .= substr($alphabet, 32, 1);\n    $newalphabet .=\
    \ substr($alphabet, 34, 1);\n    $newalphabet .= substr($alphabet, 36, 1);\n \
    \   $newalphabet .= substr($alphabet, 38, 1);\n    $newalphabet .= substr($alphabet,\
    \ 40, 1);\n    $newalphabet .= substr($alphabet, 42, 1);\n    $newalphabet .=\
    \ substr($alphabet, 44, 1);\n    $newalphabet .= substr($alphabet, 46, 1);\n \
    \   $newalphabet .= substr($alphabet, 48, 1);\n    $newalphabet .= substr($alphabet,\
    \ 50, 1);\n    $newalphabet .= substr($alphabet, 52, 1);\n    $newalphabet .=\
    \ substr($alphabet, 54, 1);\n    $newalphabet .= substr($alphabet, 56, 1);\n \
    \   $newalphabet .= substr($alphabet, 58, 1);\n    $newalphabet .= substr($alphabet,\
    \ 60, 1);\n    $newalphabet .= substr($alphabet, 62, 1);\n    $newalphabet .=\
    \ substr($alphabet, 64, 1);\n    $newalphabet .= substr($alphabet, 66, 1);\n \
    \   $newalphabet .= substr($alphabet, 68, 1);\n    $newalphabet .= substr($alphabet,\
    \ 70, 1);\n    $newalphabet .= substr($alphabet, 72, 1);\n    $newalphabet .\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1oznggn3.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $key = str_split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n\
    \  $key = $key[1];\n  $key[$s%strlen($key)] = $key[$s%strlen($key)] * 2;\n  $result\
    \ = $key[($s%strlen($key))] + $key[(floor($s/strlen($key))*2)];\n  if ($result<strlen($key))\
    \ $result += strlen($key);\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpdras6mfd.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpdras6mfd.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpdras6mfd.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpdras6mfd.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmpdras6mfd.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdras6mfd.php:24\n\
    Stack trace:\n#0 /tmp/tmpdras6mfd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdras6mfd.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    \n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsu8jl7g.php:20\n\
    Stack trace:\n#0 /tmp/tmpjsu8jl7g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjsu8jl7g.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ str_split('abcdefghijklmnopqrstuvwxyz');\n    $alphabet = array_slice($alphabet,\
    \ 0, -2);\n    $alphabet = array_slice($alphabet, 1);\n    $alphabet = array_flip($alphabet);\n\
    \    \n    $s = strtoupper($s);\n    $s = strtr($s, $alphabet);\n\n    return\
    \ strtolower($s);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhf579o7.php:28\n\
    Stack trace:\n#0 /tmp/tmpkhf579o7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkhf579o7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  // Code your\
    \ solution\n}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmo32a0ui.php:19\n\
    Stack trace:\n#0 /tmp/tmpmo32a0ui.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmo32a0ui.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  // Rotate the\
    \ alphabet by two places.\n  $alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z');\n  $alphabet = array_shift($alphabet);\n  return str_replace($alphabet,\
    \ $alphabet . 'b', $s);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jt5i_rf.php:23\n\
    Stack trace:\n#0 /tmp/tmp8jt5i_rf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8jt5i_rf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $letters =\
    \ str_split($s);\n    $key = array_fill_keys(str_split($alphabet), 2);\n    $result\
    \ = array_map(function ($letter) use ($key) {\n        return $key[array_search($letter,\
    \ $key)];\n    }, $letters);\n    return implode('', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjx02idgn.php:24\n\
    Stack trace:\n#0 /tmp/tmpjx02idgn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjx02idgn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\",\n\
    \        \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\",\n        \"x\", \"y\", \"z\", \"A\", \"W\", \"R\", \"T\"\
    , \"F\", \"V\", \"U\", \"K\", \"J\", \"X\",\n        \"Y\", \"Z\", \"0\");\n \
    \   $rotated_alphabet = array_slice($alphabet, count($alphabet) - 2, \n      \
    \  count($alphabet));\n    return strtr($s, $rotated_alphabet);\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyahjijp.php:25\n\
    Stack trace:\n#0 /tmp/tmpfyahjijp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfyahjijp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $a = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $b = 'nopqrstuvwxyzabcdefghijklm';\n  $c = 'hijklnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz';\n\
    \  $d = 'fghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm';\n  $e\
    \ = 'qrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz';\n  $f =\
    \ 'uvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm';\n\
    \  $g = 'zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz';\n\
    \  $h = 'yabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm';\n\
    \  $i = 'xabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm';\n\
    \  $j = 'wabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm';\n\
    \  $k = 'vabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm';\n\
    \  $l = 'uabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeoleigdv.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $s = str_replace('\
    \ ', '', $s);\n    $s = strtolower($s);\n    $a = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $b = array('b','c','d','f','g','h','j','k','l','o','p','q','r','s','t','u','v','w','x','y','z','a');\n\
    \    $c = array('c','d','f','g','h','j','k','l','o','p','q','r','s','t','u','v','w','x','y','z','a','b');\n\
    \    $d = array('d','f','g','h','j','k','l','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c');\n\
    \    $e = array('e','f','g','h','j','k','l','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d');\n\
    \    $f = array('f','g','h','j','k','l','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e');\n\
    \    $g = array('g','h','j','k','l','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f');\n\
    \    $h = array('h','j','k','l','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g');\n\
    \    $j = array('j','k','l','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h');\n\
    \    $k = array('k','l','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmi41g9tp.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $rotated_alphabet = strrev($alphabet);\n  $rotated_alphabet\
    \ = str_rot13($rotated_alphabet);\n  return strrev(strrev(str_rot13($s)));\n}\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlqgdz8z.php:22\n\
    Stack trace:\n#0 /tmp/tmpnlqgdz8z.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnlqgdz8z.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Initialize\
    \ an empty string.\n    $result = \"\";\n    \n    // Iterate through each letter\
    \ in the string.\n    for($i = 0; $i < strlen($s); $i++) {\n        // Get the\
    \ current letter.\n        $letter = $s[$i];\n        \n        // Check if the\
    \ letter is uppercase. If it is, use it to \n        // determine the index of\
    \ the rotated letter in the alphabet.\n        if(ctype_upper($letter)) {\n  \
    \          $letterIndex = $letter - 'A';\n        } else {\n            $letterIndex\
    \ = $letter - 'a';\n        }\n        \n        // Determine how many times the\
    \ letter should shift down.\n        // Round down to the nearest integer.\n \
    \       $multiplier = floor((strlen($letterIndex) / 2)) - 1;\n        \n     \
    \   // If the letter is in the correct position, \n        // append the new letter\
    \ to the result string.\n        if($letterIndex >= 0) {\n            $result\
    \ .= $letters[$letterIndex][$multiplier];\n        }\n    }\n    \n    // Return\
    \ the encrypted string.\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpc3aq6f69.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpc3aq6f69.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpc3aq6f69.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpc3aq6f69.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3aq6f69.php:47\n\
    Stack trace:\n#0 /tmp/tmpc3aq6f69.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpc3aq6f69.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $s = str_split($s);\n\
    \  $alpha = 'abcdefghijklmnopqrstuvwxyz';\n  $result = '';\n  for ($i = 0; $i\
    \ < count($s); ++$i) {\n    $index = substr($alpha, ($i % 26), 1);\n    $result\
    \ .= $index == $s[$i] ? $i : $s[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4up_vixv.php:26\n\
    Stack trace:\n#0 /tmp/tmp4up_vixv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4up_vixv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n   $a = 'abcdefghijklmnopqrstuvwxyz';\n\
    \   $a2 = 'kjhnpqrwvxz';\n   $n = (strlen($s)) / 2;\n   $a = $a . str_repeat($a,\
    \ $n);\n   $a2 = $a2 . str_repeat($a2, $n);\n   $a = strrev($a);\n   $a2 = strrev($a2);\n\
    \   return str_replace($a, $a2, $s);\n}\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbw_h36k5.php:26\n\
    Stack trace:\n#0 /tmp/tmpbw_h36k5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbw_h36k5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  return strtr(\n\
    \    str_pad(\n      substr(strtr(\n        str_pad(\n          str_pad(\n   \
    \         str_pad(\n              str_pad(\n                str_pad(\n       \
    \           str_pad(\n                    str_pad(\n                      str_pad(\n\
    \                        str_pad(\n                          str_pad(\n      \
    \                      str_pad(\n                              str_pad(\n    \
    \                            str_pad(\n                                  str_pad(\n\
    \                                    str_pad(\n                              \
    \        str_pad(\n                                        str_pad(\n        \
    \                                  str_pad(\n                                \
    \            str_pad(\n                                              str_pad(\n\
    \                                                str_pad(\n                  \
    \                                str_pad(\n                                  \
    \                  str_pad(\n                                                \
    \      str_pad(\n                                                        str_pad(\n\
    \                                                          str_pad(\n        \
    \                                                    str_pad(\n              \
    \                                                str_pad(\n                  \
    \                                              str_pad(\n                    \
    \                                              str_pad(\n                    \
    \                                                str_pad(\n                  \
    \                                                      str_pad(\n            \
    \                                                              str_pad(\n    \
    \                                                                        str_pad(\n\
    \                                                                            \
    \  str_pad(\n                                                                \
    \                str_pad(\n                                                  \
    \                                str_pad(\n                                  \
    \                                                  str_pad(\n                \
    \                                                                      str_pad(\n\
    \                                                                            \
    \            str_pad(\n                                                      \
    \                                    str_pad(\n                              \
    \                                                              str_pad(\n    \
    \                                                                            \
    \              str_pad(\n                                                    \
    \                                            str_pad(\n                      \
    \                                                                            str_pad(\n\
    \                                                                            \
    \                        str_pad(\n                                          \
    \                                                            str_pad(\n      \
    \                                                                            \
    \                      str_pad(\n                                            \
    \                                                              str_pad(\n    \
    \                                                                            \
    \                            str_pad(\n                                      \
    \                                                                        str_pad(\n\
    \                                                                            \
    \                                    str_pad(\n                              \
    \                                                                            \
    \        str_pad(\n                                                          \
    \                                                          str_pad(\n        \
    \                                                                            \
    \                                  str_pad(\n                                \
    \                                                                            \
    \            str_pad(\n                                                      \
    \                                                                    str_pad(\n\
    \                                                                            \
    \                                                str_pad(\n                  \
    \                                                                            \
    \                                str_pad(\n                                  \
    \                                                                            \
    \                  str_pad(\n                                                \
    \                                                                            \
    \      str_pad(\n                                                            \
    \                                                                        str_pad(\n\
    \                                                                            \
    \                                                          str_pad(\n        \
    \                                                                            \
    \                                                    str_pad(\n              \
    \                                                                            \
    \                                                str_pad(\n                  \
    \                                                                            \
    \                                              str_pad(\n                    \
    \                                                                            \
    \                                              str_pad(\n                    \
    \                                                                            \
    \                                                str_pad(\n                  \
    \                                                                            \
    \                                                    str_pad(\n              \
    \                                                                            \
    \                                                          str_pad(\n        \
    \                                                                            \
    \                                                                  str_pad(\n\
    \                                                                            \
    \                                                                            str_pad(\n\
    \                                                                            \
    \                                                                            \
    \  str_pad(\n                                                                \
    \                                                                            \
    \                str_pad(\n                                                  \
    \                                                                            \
    \                                str_pad(\n                                  \
    \                                                                            \
    \                                                  str_pad(\n                \
    \                                                                            \
    \                                                                      str_pad(\n\
    \                                                                            \
    \                                                                            \
    \            str_pad(\n                                                      \
    \                                                                            \
    \                                    str_pad(\n                              \
    \                                                                            \
    \                                                              str_pad(\n    \
    \                                                                            \
    \                                                                            \
    \              str_pad(\n                                                    \
    \                                                                            \
    \                                            str_pad(\n                      \
    \                                                                            \
    \                                                                            str_pad(\n\
    \                                                                            \
    \                                                                            \
    \                        str_pad(\n                                          \
    \                      \nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy6_dunwb.php on line 100\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \  $i = 0;\n  $j = 0;\n  $len = strlen($s);\n  $return = '';\n  while ($i < $len)\
    \ {\n    $j = ($i + 1) % strlen($key);\n    $return .= $key[$j];\n    $i = $j;\n\
    \  }\n  return $return;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_y66lxs.php:30\n\
    Stack trace:\n#0 /tmp/tmpr_y66lxs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr_y66lxs.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Write your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0470q0q.php:20\n\
    Stack trace:\n#0 /tmp/tmpq0470q0q.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpq0470q0q.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $rotatedAlphabet = rotate($alphabet);\n  $str = '';\n  $last = 0;\n  for ($i\
    \ = 0; $i < strlen($s); $i++) {\n    $str .= substr($rotatedAlphabet, ($alphabet[$s[$i]]\
    \ % 26) + $alphabet[$last], 1);\n    $last = ($alphabet[$s[$i]] % 26) + $alphabet[$last];\n\
    \  }\n  return $str;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmpr3damtcd.php:13\n\
    Stack trace:\n#0 /tmp/tmpr3damtcd.php(24): encrypt('hi')\n#1 /tmp/tmpr3damtcd.php(28):\
    \ candidate('hi')\n#2 /tmp/tmpr3damtcd.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpr3damtcd.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated_alphabet = array_flip(str_split($alphabet));\n\
    \    $rotated_alphabet[$alphabet[$alphabet.length-1]] = 'z';\n    $rotated_alphabet\
    \ = array_flip($rotated_alphabet);\n\n    $result = '';\n    foreach (str_split($s)\
    \ as $c) {\n        $result += $rotated_alphabet[$c];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpjoawi6ot.php on line 14\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpjoawi6ot.php on line 14\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpjoawi6ot.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjoawi6ot.php:29\nStack\
    \ trace:\n#0 /tmp/tmpjoawi6ot.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjoawi6ot.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated_alphabet = strrev($alphabet);\n\
    \    $rot_a = strlen($alphabet) - 2;\n    $rot_b = strlen($rotated_alphabet) -\
    \ 2;\n    $rot_c = strlen($alphabet) + 1;\n    $rot_d = strlen($rotated_alphabet)\
    \ + 1;\n\n    $i = 0;\n    $encrypted_string = '';\n    while ($i < strlen($s))\
    \ {\n        $encrypted_string .= substr($s, $i, 1) . $alphabet[$rot_a];\n   \
    \     $i += 2;\n    }\n\n    while ($i < strlen($encrypted_string)) {\n      \
    \  $encrypted_string .= substr($encrypted_string, $i, 1) . $rotated_alphabet[$rot_b];\n\
    \        $i += 2;\n    }\n\n    while ($i < strlen($encrypted_string)) {\n   \
    \     $encrypted_string .= substr($encrypted_string, $i, 1) . $alphabet[$rot_c];\n\
    \        $i += 2;\n    }\n\n    while ($i < strlen($encrypted_string)) {\n   \
    \     $encrypted_string .= substr($encrypted_string, $i, 1) . $rotated_alphabet[$rot_d];\n\
    \        $i += 2;\n    }\n\n    return $encrypted_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1toq2ut.php:49\n\
    Stack trace:\n#0 /tmp/tmpg1toq2ut.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpg1toq2ut.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $alphabetSize = strlen($alphabet);\n  $rotatedAlphabet = rotate($alphabet,\
    \ -2);\n  $newAlphabet = rotate($alphabet, -2);\n  $newAlphabetSize = strlen($newAlphabet);\n\
    \n  $newAlphabet = str_replace($alphabet, $rotatedAlphabet, $newAlphabet);\n \
    \ return substr($s, 0, 1) . $newAlphabet . substr($s, 1, strlen($s));\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmp9pvezw56.php:14\n\
    Stack trace:\n#0 /tmp/tmp9pvezw56.php(23): encrypt('hi')\n#1 /tmp/tmp9pvezw56.php(27):\
    \ candidate('hi')\n#2 /tmp/tmp9pvezw56.php(37): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp9pvezw56.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = array();\n    for ($i = 0, $l\
    \ = strlen($s); $i < $l; $i++) {\n        $char = $s[$i];\n        $index = array_search($char,\
    \ $alphabet);\n        $char = $alphabet[(++$index) % strlen($alphabet)];\n  \
    \      $encrypted[$i] = $char;\n    }\n    return implode('', $encrypted);\n}\n\
    \nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, string given\
    \ in /tmp/tmpmy6f2g7m.php on line 16\n\nWarning: array_search() expects parameter\
    \ 2 to be array, string given in /tmp/tmpmy6f2g7m.php on line 16\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpmy6f2g7m.php:28\nStack trace:\n\
    #0 /tmp/tmpmy6f2g7m.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmy6f2g7m.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $result = \"\";\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $result .= substr($alphabet, floor($i\
    \ / 2) * 2 - 1, 1) . substr($alphabet, $i % 2 * 2, 1);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyqnbu03.php:26\n\
    Stack trace:\n#0 /tmp/tmpyyqnbu03.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyyqnbu03.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('l', 'm', 'o', 'j', 'h', 'b', 'p', 'q', 'k', 'e', 'u', 'f', 't', 's',\
    \ 'r', 'y', 'x', 'c', 'z');\n    \n    \n    // Create a new array where we will\
    \ store the encrypted version of the string\n    $encrypted = array();\n    \n\
    \    // Loop through each character of the string and shift each letter down in\
    \ alphabet\n    for($i = 0; $i < strlen($s); $i++) {\n        // Get the character\
    \ at the current index of the string\n        $letter = $s[$i];\n        \n  \
    \      // Get the index from the alphabet where the character should be placed\n\
    \        $index = array_search($letter, $alphabet);\n        \n        // Shift\
    \ the character down in the alphabet\n        $letter = $alphabet[$index];\n \
    \       \n        // Add the character to the encrypted array\n        $encrypted[]\
    \ = $letter;\n    }\n    \n    // Return the encrypted string\n    return implode('',\
    \ $encrypted);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m4ei22_.php:42\n\
    Stack trace:\n#0 /tmp/tmp5m4ei22_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp5m4ei22_.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $a = str_split($s);\n\
    \    $c = '';\n    foreach ($a as $k => $v) {\n        $c[$k] = $c[$k] . $v[1];\n\
    \    }\n    return implode($c, $c);\n}\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Cannot assign an empty string to a string offset in /tmp/tmp57h8e1zg.php\
    \ on line 15\n\nWarning: Cannot assign an empty string to a string offset in /tmp/tmp57h8e1zg.php\
    \ on line 15\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp57h8e1zg.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57h8e1zg.php:24\n\
    Stack trace:\n#0 /tmp/tmp57h8e1zg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp57h8e1zg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $alphabet_rotated_down = strrev($alphabet);\n  $rotated_alphabet = $alphabet_rotated_down;\n\
    \  $alphabet = strrev($alphabet);\n  return strtr($s, $alphabet, $alphabet_rotated_down);\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0unxonv6.php:24\n\
    Stack trace:\n#0 /tmp/tmp0unxonv6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0unxonv6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $new_alphabet\
    \ = array('p', 'o', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $key = array_keys($alphabet);\n\
    \    $key = $alphabet[array_search($s, $key)];\n    return $new_alphabet[array_search($key,\
    \ $new_alphabet)];\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefjayx5f.php:24\n\
    Stack trace:\n#0 /tmp/tmpefjayx5f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpefjayx5f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n   $alphabet =\
    \ array();\n   $alphabet[\"f\"] = \"k\";\n   $alphabet[\"g\"] = \"j\";\n   $alphabet[\"\
    h\"] = \"i\";\n   $alphabet[\"i\"] = \"h\";\n   $alphabet[\"a\"] = \"m\";\n  \
    \ $alphabet[\"b\"] = \"l\";\n   $alphabet[\"c\"] = \"n\";\n   $alphabet[\"d\"\
    ] = \"o\";\n   $alphabet[\"e\"] = \"p\";\n   $alphabet[\"f\"] = \"q\";\n   $alphabet[\"\
    g\"] = \"r\";\n   $alphabet[\"h\"] = \"s\";\n   $alphabet[\"i\"] = \"t\";\n  \
    \ $alphabet[\"a\"] = \"v\";\n   $alphabet[\"b\"] = \"w\";\n   $alphabet[\"c\"\
    ] = \"x\";\n   $alphabet[\"d\"] = \"y\";\n   $alphabet[\"e\"] = \"z\";\n   $alphabet[\"\
    f\"] = \"a\";\n   $alphabet[\"g\"] = \"b\";\n   $alphabet[\"h\"] = \"c\";\n  \
    \ $alphabet[\"i\"] = \"d\";\n   $alphabet[\"a\"] = \"e\";\n   $alphabet[\"b\"\
    ] = \"f\";\n   $alphabet[\"c\"] = \"g\";\n   $alphabet[\"d\"] = \"h\";\n   $alphabet[\"\
    e\"] = \"i\";\n   $alphabet[\"f\"] = \"j\";\n   $alphabet[\"g\"] = \"k\";\n  \
    \ $alphabet[\"h\"] = \"l\";\n   $alphabet[\"i\"] = \"m\";\n   $alphabet[\"a\"\
    ] = \"n\";\n   $alphabet[\"b\"] = \"o\";\n   $alphabet[\"c\"] = \"p\";\n   $alphabet[\"\
    d\"] = \"q\";\n   $alphabet[\"e\"] = \"r\";\n   $alphabet[\"f\"] = \"s\";\n  \
    \ $alphabet[\"g\"] = \"t\";\n   $alphabet[\"h\"] = \"u\";\n   $alphabet[\"i\"\
    ] = \"v\";\n   $alphabet[\"a\"] = \"w\";\n   $alphabet[\"b\"] = \"x\";\n   $alphabet[\"\
    c\"] = \"y\";\n   $alphabet[\"d\"] = \"z\";\n   $alphabet[\"e\"] = \"a\";\n  \
    \ $alphabet[\"f\"] = \"b\";\n   $alphabet[\"g\"] = \"c\";\n   $alphabet[\"h\"\
    ] = \"d\";\n   $alphabet[\"i\"] = \"e\";\n   $alphabet[\"a\"] = \"f\";\n   $alphabet[\"\
    b\"] = \"g\";\n   $alphabet[\"c\"] = \"h\";\n   $alphabet[\"d\"] = \"i\";\n  \
    \ $alphabet[\"e\"] = \"j\";\n   $alphabet[\"f\"] = \"k\";\n   $alphabet[\"g\"\
    ] = \"l\";\n   $alphabet[\"h\"] = \"m\";\n\nfunction candidate(...$args) {\n \
    \   return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf0qtz06w.php on line 86\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ str_split('abcdefghijklmnopqrstuvwxyz');\n    $alpha_index = array_flip($alphabet);\n\
    \    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n \
    \   shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n  \
    \  shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n   \
    \ shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n\
    \    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n \
    \   shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n  \
    \  shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n   \
    \ shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n\
    \    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n \
    \   shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n  \
    \  shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n   \
    \ shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n\
    \    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n \
    \   shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n  \
    \  shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n   \
    \ shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n\
    \    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n \
    \   shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n  \
    \  shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n   \
    \ shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n\
    \    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n \
    \   shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n  \
    \  shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n   \
    \ shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet);\n\
    \    shuffle($alphabet);\n    shuffle($alphabet);\n    shuffle($alphabet\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1ljpc415.php on line 95\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $a = str_split($s);\n\
    \  sort($a);\n  $result = \"\";\n  foreach($a as $v) {\n    for($i = 0; $i < $v;\
    \ $i++) {\n      $result .= $v;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprm7js3bb.php:28\n\
    Stack trace:\n#0 /tmp/tmprm7js3bb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprm7js3bb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $rotated_alphabet = rotate($alphabet, 2);\n\
    \    $key = \"hello\";\n    return encrypt($s, $rotated_alphabet, $key);\n}\n\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmpp287knw5.php:13\n\
    Stack trace:\n#0 /tmp/tmpp287knw5.php(19): encrypt('hi')\n#1 /tmp/tmpp287knw5.php(23):\
    \ candidate('hi')\n#2 /tmp/tmpp287knw5.php(33): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpp287knw5.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $rotated_alphabet\
    \ = array();\n    foreach (str_split('abcdefghijklmnopqrstuvwxyz') as $letter)\
    \ {\n        $rotated_alphabet[$letter] = $letter;\n    }\n    $i = 0;\n    $encrypted\
    \ = \"\";\n    while ($i < strlen($s)) {\n        $encrypted .= $rotated_alphabet[substr($s,\
    \ $i, 1)] . $rotated_alphabet[substr($s, $i+1, 1)];\n        $i += 2;\n    }\n\
    \    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfmfsjnv.php:30\n\
    Stack trace:\n#0 /tmp/tmpbfmfsjnv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbfmfsjnv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return strtr(\n\
    \        $s,\n        array_flip(\n            str_rot13(\n                str_rot13(\n\
    \                    str_rot13(\n                        str_rot13($s)\n     \
    \               )\n                )\n            )\n        )\n    );\n}\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip() expects parameter 1 to be array, string given in\
    \ /tmp/tmp1oiyvz3p.php on line 18\n\nWarning: strtr(): The second argument is\
    \ not an array in /tmp/tmp1oiyvz3p.php on line 18\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1oiyvz3p.php:30\nStack trace:\n#0 /tmp/tmp1oiyvz3p.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1oiyvz3p.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $alphabet = str_rot13($alphabet);\n  $alphabet\
    \ = str_rot14($alphabet);\n  $alphabet = str_rot15($alphabet);\n  $alphabet =\
    \ str_rot16($alphabet);\n  return str_rot13($s);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function str_rot14() in\
    \ /tmp/tmpye_71nx7.php:14\nStack trace:\n#0 /tmp/tmpye_71nx7.php(21): encrypt('hi')\n\
    #1 /tmp/tmpye_71nx7.php(25): candidate('hi')\n#2 /tmp/tmpye_71nx7.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpye_71nx7.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqfcum8a.php:20\n\
    Stack trace:\n#0 /tmp/tmpjqfcum8a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjqfcum8a.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $alphabet = str_split($alphabet);\n    $alphabet\
    \ = array_reverse($alphabet);\n    $alphabet = array_merge(array_slice($alphabet,\
    \ 0, -1), $alphabet);\n    \n    $shift = 1;\n    $newstr = '';\n    for($i =\
    \ 0; $i < strlen($s); ++$i) {\n        $newstr .= $alphabet[(ord($s[$i]) - ord($alphabet[($shift\
    \ - 1)])) % (strlen($alphabet)) + $shift];\n        $shift *= 2;\n    }\n    return\
    \ $newstr;\n}\n</code>\n<|/ a tags=encryption,php,algorithm dscore=5 |>\n<| c\
    \ |>\nI noticed that you're using % strlen($alphabet). Is it a typo or are you\
    \ using modulo for the alphabet length?\n<|/ c |>\n<| c |>\nThis code does not\
    \ work if $alphabet = str_split($alphabet);\n<|/ c |>\n<| c |>\n, please note\
    \ that while this answer works fine in most cases, it fails to encrypt single\
    \ characters. I have added an answer below that correctly handles this issue.\n\
    <|/ c |>\n<| c |>\n+1 for using array_slice and strlen; this is why I'm so excited\
    \ about this post\n<|/ c |>\n<| c |>\nThis is the most elegant solution I've seen.\
    \ Much better than any others.\n<|/ c |>\n<| a tags=encryption,php,algorithm |>\n\
    <code>\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_6992bq2.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ str_split('abcdefghijklmnopqrstuvwxyz');\n    $result = \"\";\n    for($i =\
    \ 0; $i < strlen($s); $i++) {\n        $x = $s[$i];\n        $result = $alphabet[array_search($x,\
    \ $alphabet)];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsj01cff.php:26\n\
    Stack trace:\n#0 /tmp/tmpdsj01cff.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdsj01cff.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array();\n    $alphabet[] = 'z';\n    $alphabet[] = 'y';\n    $alphabet[] =\
    \ 'x';\n    $alphabet[] = 'w';\n    $alphabet[] = 'v';\n    $alphabet[] = 'u';\n\
    \    $alphabet[] = 't';\n    $alphabet[] = 's';\n    $alphabet[] = 'r';\n    $alphabet[]\
    \ = 'q';\n    $alphabet[] = 'p';\n    $alphabet[] = 'o';\n    $alphabet[] = 'n';\n\
    \    $alphabet[] = 'm';\n    $alphabet[] = 'l';\n    $alphabet[] = 'k';\n    $alphabet[]\
    \ = 'j';\n    $alphabet[] = 'h';\n    $alphabet[] = 'g';\n    $alphabet[] = 'f';\n\
    \    $alphabet[] = 'e';\n    $alphabet[] = 'd';\n    $alphabet[] = 'c';\n    $alphabet[]\
    \ = 'b';\n    $alphabet[] = 'a';\n\n    shuffle($alphabet);\n\n    $strlen = strlen($s);\n\
    \    $newstr = '';\n\n    for ($i = 0; $i < $strlen; $i++) {\n        $newstr\
    \ .= $alphabet[array_rand($alphabet)] . $s[$i];\n    }\n\n    return $newstr;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5vt5cip.php:56\n\
    Stack trace:\n#0 /tmp/tmpr5vt5cip.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpr5vt5cip.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $rotated_alphabet\
    \ = str_repeat(\"a\", 2);\n    return strtr($s, $rotated_alphabet);\n}\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtr(): The second argument is not an array in /tmp/tmprhfgkyyb.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhfgkyyb.php:20\n\
    Stack trace:\n#0 /tmp/tmprhfgkyyb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprhfgkyyb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \treturn strtr($s, $alphabet);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjuum_ykt.php:21\n\
    Stack trace:\n#0 /tmp/tmpjuum_ykt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjuum_ykt.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n   $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n   $result = \"\";\n   foreach (str_split($s)\
    \ as $c) {\n      $result .= substr($alphabet, strpos($alphabet, $c) + 2, 1);\n\
    \   }\n   return $result;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8e7dj5qs.php:25\n\
    Stack trace:\n#0 /tmp/tmp8e7dj5qs.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8e7dj5qs.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $result = \"\"\
    ;\n  for($i = 0; $i < strlen($s); $i++) {\n    if($i%2 == 0) {\n      $result\
    \ .= $s[$i];\n    } else {\n      $result .= $s[strlen($s)-1-$i];\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbnaaywl.php:28\n\
    Stack trace:\n#0 /tmp/tmpdbnaaywl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdbnaaywl.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    return strtr(\n        $s,\n        str_replace(\n\
    \            $alphabet,\n            $alphabet . $alphabet,\n            strlen($alphabet)\
    \ * 2 + 2\n        )\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtr(): The second argument is not an array in /tmp/tmp43e_aas3.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp43e_aas3.php:28\n\
    Stack trace:\n#0 /tmp/tmp43e_aas3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp43e_aas3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $alphabet = array_merge($alphabet, array_flip(str_split($alphabet)));\n\
    \    $key = str_split($s);\n    $key = array_merge($key, array_flip(str_split($alphabet)));\n\
    \n    $new_key = array();\n    for ($i = 0; $i < count($key); $i++) {\n      \
    \  $new_key[$i] = array_shift($key);\n    }\n\n    $cipher = array();\n    for\
    \ ($i = 0; $i < strlen($s); $i++) {\n        $c = '';\n        for ($j = 0; $j\
    \ < count($new_key); $j++) {\n            $c .= substr($s, $i, 1) . $alphabet[$new_key[$j]];\n\
    \            $i = $i + 1;\n        }\n        $cipher[] = $c;\n    }\n\n    return\
    \ implode('', $cipher);\n}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 1 to be an array, string given\
    \ in /tmp/tmp31pgag5v.php on line 13\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp31pgag5v.php:39\nStack trace:\n#0 /tmp/tmp31pgag5v.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp31pgag5v.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $l = strlen($s);\n\
    \    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $alphabet = str_split($alphabet);\n\
    \    $newalphabet = '';\n    for ($i = 0; $i < $l - 1; $i++) {\n        $newalphabet\
    \ .= $alphabet[$i + 2] . $alphabet[$i + 1];\n    }\n    $newalphabet .= $alphabet[$l\
    \ - 1];\n    return strtr($s, $alphabet, $newalphabet);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1oc7m4s3.php:28\n\
    Stack trace:\n#0 /tmp/tmp1oc7m4s3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1oc7m4s3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $len = strlen($s);\n    $rotated_alphabet\
    \ = rotate($alphabet);\n\n    $encrypt_len = 2 * strlen($alphabet);\n    $encrypted_string\
    \ = '';\n\n    for ($i = 0; $i < $len; $i++) {\n        $encrypted_string .= substr($rotated_alphabet,\
    \ \n                                     $alphabet.str_rotation($len-$i, $encrypt_len));\n\
    \    }\n    return $encrypted_string;\n}\n\nfunction candidate(...$args) {\n \
    \   return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmp3ygcuja8.php:14\n\
    Stack trace:\n#0 /tmp/tmp3ygcuja8.php(27): encrypt('hi')\n#1 /tmp/tmp3ygcuja8.php(31):\
    \ candidate('hi')\n#2 /tmp/tmp3ygcuja8.php(41): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp3ygcuja8.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // your code\n\
    \    return $s;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjuj9qs3.php:21\n\
    Stack trace:\n#0 /tmp/tmpzjuj9qs3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzjuj9qs3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('h'\
    \ => 'kj', 'l' => 'ij', 'm' => 'lm', 'n' => 'op', 'r' => 'st', 's' => 'sh', 't'\
    \ => 'th', 'y' => 'yt', 'z' => 'zh');\n\treturn implode('', array_map(function($char)\
    \ {\n\t\treturn array_shift($alphabet) . $char;\n\t}, str_split($s)));\n}\n\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmpz7qs9782.php on line 14\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmpz7qs9782.php on line 14\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpz7qs9782.php:23\nStack trace:\n\
    #0 /tmp/tmpz7qs9782.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz7qs9782.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ str_split('abcdefghijklmnopqrstuvwxyz');\n    $key = str_split($alphabet[0]);\n\
    \    for ($i = 1; $i < count($alphabet); $i++) {\n        $temp = array_shift($key);\n\
    \        $key[] = $alphabet[$i];\n        $alphabet[$i] = $temp;\n    }\n\n  \
    \  $keys = array_keys($alphabet);\n    $new = $key + $keys;\n\n    return substr(str_shuffle(str_replace(array_keys($alphabet),\
    \ $new, $s)), 0, strlen($s));\n}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgh_qc5cd.php:30\n\
    Stack trace:\n#0 /tmp/tmpgh_qc5cd.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgh_qc5cd.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    return substr($alphabet, strrpos($alphabet,\
    \ $s) % strlen($alphabet), 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp206yjsxy.php:21\n\
    Stack trace:\n#0 /tmp/tmp206yjsxy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp206yjsxy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $encrypted_letters = array();\n    for($i = 0; $i < strlen($s); $i++) {\n\
    \        $encrypted_letters[] = $alphabet[$i];\n    }\n    $encrypted_letters[]\
    \ = \"!\";\n    for($i = strlen($s); $i < strlen($s) + 2 ; $i++) {\n        $encrypted_letters[]\
    \ = $alphabet[$i];\n    }\n    return implode($encrypted_letters);\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmxcyoa3.php:29\n\
    Stack trace:\n#0 /tmp/tmpwmxcyoa3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwmxcyoa3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    if (strlen($s)\
    \ > strlen($alphabet)) {\n        echo 'The encrypted value must be shorter than\
    \ the alphabet.';\n    }\n    return $s;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The encrypted value must be shorter than the alphabet.\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpg1ywc908.php:23\nStack trace:\n#0 /tmp/tmpg1ywc908.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg1ywc908.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    for($i=0; $i<strlen($s);\
    \ $i++) {\n        $char = $s[$i];\n        $char = chr(ord($char)-$char%26);\n\
    \    }\n    return $char;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpio5b0qpj.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpio5b0qpj.php on line\
    \ 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpio5b0qpj.php:24\n\
    Stack trace:\n#0 /tmp/tmpio5b0qpj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpio5b0qpj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $result = '';\n\
    \    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n    foreach (str_split($s)\
    \ as $char) {\n        $position = array_search($char, $alphabet);\n        $newPosition\
    \ = $position - 2;\n        $result = $alphabet[$newPosition] . $result;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprf4wa8vr.php:27\n\
    Stack trace:\n#0 /tmp/tmprf4wa8vr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprf4wa8vr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  $rotate_alphabet = array('z','y','x','w','v','u','t','s','r','q','p','o','n','m','l','k','j','i','h','g','f','e','d','c','b','a');\n\
    \  $encrypted_string = '';\n  foreach ($s as $char) {\n    if ( in_array($char,\
    \ $alphabet)) {\n      $encrypted_string .= $char;\n    } else {\n      $encrypted_string\
    \ .= $rotate_alphabet[$alphabet.'a' - $char];\n    }\n  }\n  return $encrypted_string;\n\
    }\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpjn3lpuek.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjn3lpuek.php:29\n\
    Stack trace:\n#0 /tmp/tmpjn3lpuek.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjn3lpuek.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n   $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n   $alphabet = str_split($alphabet);\n   $alphabet\
    \ = array_combine($alphabet, $alphabet);\n   $alphabet = array_flip($alphabet);\n\
    \   $alphabet = $alphabet[1] + $alphabet[0];\n   $rotate = 0;\n   $s = str_split($s);\n\
    \   $out = '';\n   foreach ($s as $value) {\n       $out .= $alphabet[$value];\n\
    \       $rotate += 2;\n       $out .= ($rotate & 1) ? $alphabet[$value >> 1] :\
    \ $alphabet[$value << 1];\n   }\n   return $out;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpvffwovj8.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpvffwovj8.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvffwovj8.php:32\n\
    Stack trace:\n#0 /tmp/tmpvffwovj8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvffwovj8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \  $rotated_alphabet = $alphabet;\n\n  for ($i = 0; $i < strlen($alphabet); $i++)\
    \ {\n    $rotated_alphabet .= $alphabet[$i];\n  }\n\n  $rotated_alphabet .= '~';\n\
    \n  return str_rot13($s, $rotated_alphabet);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_rot13() expects exactly 1 parameter, 2 given in /tmp/tmp39dau38c.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39dau38c.php:29\n\
    Stack trace:\n#0 /tmp/tmp39dau38c.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp39dau38c.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // This variable\
    \ will hold the final encrypted string\n    $str = \"\";\n    // This variable\
    \ will hold the letter before the letter in the alphabet\n    // Shift all letters\
    \ by two places in their alphabet\n    $shift = 0;\n    // This variable will\
    \ hold an incremented value based on the loop \n    // through the alphabet that\
    \ keeps track of where the letters need to \n    // be rotated down by.\n    $i\
    \ = 0;\n    // This will keep track of how many times the letters have been rotated\n\
    \    $j = 0;\n    // Go through each letter in the string and shift it down by\
    \ the amount \n    // of $shift\n    foreach($s as $char){\n        // If the\
    \ current letter isn't the same as the previous letter, then\n        // add it\
    \ to the final string\n        if($i != $j){\n            // Increment the $i\
    \ variable by the number of letters that \n            // are in the alphabet\
    \ and shift the letters down by two\n            $i += (str_len($alphabet[$j])-2);\n\
    \            // Shift the alphabet letter down\n            $j++;\n        }\n\
    \        // If the current letter is the next letter in the alphabet,\n      \
    \  // add the shift value to the $shift variable and reset the $i \n        //\
    \ variable to zero\n        elseif($i == $j){\n            $shift = $shift+2;\n\
    \            $i = 0;\n        }\n        // Append the letter to the final string\n\
    \        $str .= $alphabet[$i].$alphabet[$j].$shift;\n    }\n    // Return the\
    \ final encrypted string\n    return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpd2x47rqa.php\
    \ on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2x47rqa.php:54\n\
    Stack trace:\n#0 /tmp/tmpd2x47rqa.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpd2x47rqa.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $shift   = 2;\n    $sLength = strlen($s);\n\
    \    $eLength = $sLength / $shift;\n    $alphabetLength  = strlen($alphabet);\n\
    \n    for ($i = 0; $i < $eLength; $i++) {\n        $e[$i] = substr($alphabet,\
    \ mt_rand(0, $alphabetLength - 1), 1);\n    }\n\n    return str_pad(implode($e),\
    \ $sLength, $s);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9wzhhuk.php:30\n\
    Stack trace:\n#0 /tmp/tmpv9wzhhuk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpv9wzhhuk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = range('A','Z');\n\
    \  // Get the length of the string\n  $stringLength = (int) strlen($s);\n  //\
    \ Get the shift value for the alphabet\n  $shift = floor(($stringLength - 2) /\
    \ 2);\n  // Encrypt the string\n  $rotatedAlphabet = rotateAlphabet($alphabet,\
    \ $shift);\n  // Return the encrypted string\n  return $rotatedAlphabet . substr($s,\
    \ 0, $stringLength);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotateAlphabet()\
    \ in /tmp/tmpjayqjiyr.php:18\nStack trace:\n#0 /tmp/tmpjayqjiyr.php(24): encrypt('hi')\n\
    #1 /tmp/tmpjayqjiyr.php(28): candidate('hi')\n#2 /tmp/tmpjayqjiyr.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjayqjiyr.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $rotated_alphabet = array('e','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d');\n\
    \    $new_s = \"\";\n    for($i = 0;$i < strlen($s); $i++) {\n        $new_s .=\
    \ $alphabet[array_search($s[$i], $alphabet)];\n    }\n    return $rotated_alphabet[array_search($new_s,\
    \ $rotated_alphabet)];\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdok2739h.php:26\n\
    Stack trace:\n#0 /tmp/tmpdok2739h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdok2739h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $rot_alphabet = $alphabet;\n    $rot_alphabet\
    \ = str_rot13($rot_alphabet);\n    $result = str_rot13($s);\n    $rot_result =\
    \ str_rot13($result);\n    return $rot_result;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1rg5bvh.php:24\n\
    Stack trace:\n#0 /tmp/tmpd1rg5bvh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd1rg5bvh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Write the\
    \ alphabet to rotate to.\n    $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \n    // Define a variable $key\n    $key = '0123456789';\n\n    // Create a new\
    \ string $encryptedStr from the string $s\n    $encryptedStr = '';\n\n    // Loop\
    \ through each character in $s\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      // Get the ASCII code of the current character in $s\n        $asciiCode\
    \ = ord($s[$i]);\n        // Get the key index for the current character in $s\n\
    \        $keyIndex = strpos($key, $alphabet[$asciiCode]);\n\n        // If the\
    \ key index is not -1 append the character to the encrypted string\n        if\
    \ ($keyIndex != -1) {\n            // Append the encrypted character\n       \
    \     $encryptedStr .= $alphabet[$asciiCode + $keyIndex];\n        } else {\n\
    \            // Append the encrypted character with the last letter of the alphabet.\n\
    \            $encryptedStr .= $alphabet[$asciiCode - 1];\n        }\n    }\n\n\
    \    // Return the encrypted string\n    return $encryptedStr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strpos(): Empty needle in /tmp/tmpwkbme3ax.php on line 26\n\n\
    Warning: strpos(): Empty needle in /tmp/tmpwkbme3ax.php on line 26\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpwkbme3ax.php:47\nStack trace:\n\
    #0 /tmp/tmpwkbme3ax.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwkbme3ax.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $new_string\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++){\n        $new_string .= $s[$i].$s[$i];\n\
    \    }\n    return $new_string;\n}\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpng0eu9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpng0eu9v4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpng0eu9v4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $n = strlen($s);\n    $rotated_alphabet =\
    \ rotateAlphabet($alphabet, 2);\n    $rotated_alphabet = str_replace($alphabet,\
    \ $rotated_alphabet, $alphabet);\n    $rotated_s = str_replace(\n        str_split($alphabet),\n\
    \        $rotated_alphabet,\n        str_split($s)\n    );\n    return implode($rotated_s,\
    \ $alphabet);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotateAlphabet()\
    \ in /tmp/tmp50m10812.php:14\nStack trace:\n#0 /tmp/tmp50m10812.php(25): encrypt('hi')\n\
    #1 /tmp/tmp50m10812.php(29): candidate('hi')\n#2 /tmp/tmp50m10812.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp50m10812.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated = str_rot13($s);\n    $i = 0;\n\
    \    foreach ($alphabet as $letter) {\n        $j = ($i + 1) * 2;\n        $new\
    \ = $alphabet[$j];\n        $new = $letter;\n        $new = str_rot13($new);\n\
    \        $rotated = str_rot13($rotated);\n        $i++;\n    }\n    return $rotated;\n\
    }\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp5eix0e9h.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5eix0e9h.php:30\n\
    Stack trace:\n#0 /tmp/tmp5eix0e9h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5eix0e9h.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $alphabet\
    \ = array_reverse($alphabet);\n    foreach ($alphabet as $key => $letter) {\n\
    \        $shift[$key] = $letter + 2;\n    }\n    $shift_array = array_flip($shift);\n\
    \    $encrypt = '';\n    foreach (str_split($s) as $char) {\n        $encrypt\
    \ .= $shift_array[$char];\n    }\n    return $encrypt;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nWarning: A non-numeric value encountered in /tmp/tmprtn2e37i.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed!"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  // Rotate each\
    \ letter of the alphabet by two\n  $alphabet = array(\"a\" => \"b\", \"b\" =>\
    \ \"c\", \"c\" => \"d\", \"d\" => \"e\",\n                    \"e\" => \"f\",\
    \ \"f\" => \"g\", \"g\" => \"h\", \"h\" => \"i\",\n                    \"i\" =>\
    \ \"j\", \"j\" => \"k\", \"k\" => \"l\", \"l\" => \"m\",\n                   \
    \ \"m\" => \"n\", \"n\" => \"o\", \"o\" => \"p\", \"p\" => \"q\",\n          \
    \          \"q\" => \"r\", \"r\" => \"s\", \"s\" => \"t\", \"t\" => \"u\",\n \
    \                   \"u\" => \"v\", \"v\" => \"w\", \"w\" => \"x\", \"x\" => \"\
    y\",\n                    \"y\" => \"z\", \"z\" => \"a\");\n  $alphabet = array_flip($alphabet);\n\
    \  $news = \"\";\n  // Loop through each character in the string\n  foreach (str_split($s)\
    \ as $char) {\n    // Get the encrypted character from $alphabet\n    $charEncrypted\
    \ = $alphabet[$char];\n    // Append the encrypted character to the new string\n\
    \    $news .= $charEncrypted;\n  }\n  // Return the encrypted string\n  return\
    \ $news;\n}\necho encrypt('hi');\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "gh\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvzsape65.php:38\n\
    Stack trace:\n#0 /tmp/tmpvzsape65.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvzsape65.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');\n    $alphabet.shuffle($alphabet);\n\
    \    $rotated_alphabet = array();\n    foreach ($alphabet as $letter) {\n    \
    \    $key = array_search($letter, $alphabet);\n        $rotated_alphabet[] = $alphabet[$key];\n\
    \    }\n    return $rotated_alphabet[array_search($s, $rotated_alphabet)];\n}\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp168vuspq.php:26\n\
    Stack trace:\n#0 /tmp/tmp168vuspq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp168vuspq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // your encryption\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2ic92e1.php:20\n\
    Stack trace:\n#0 /tmp/tmpf2ic92e1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpf2ic92e1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $rotated =\
    \ strrev($alphabet);\n    $rotate = array('z', 'y', 'x', 'w', 'v', 'u', 't', 's',\
    \ 'r', 'q', 'p', 'o', 'n', 'm');\n    $len = strlen($s);\n    $final = '';\n \
    \   for ($i = 0; $i < $len; $i++) {\n        $final .= $rotated[array_search($s[$i],\
    \ $rotated)];\n    }\n    return $final;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strrev() expects parameter 1 to be string, array given in /tmp/tmpvn1mkwjb.php\
    \ on line 13\n\nWarning: array_search() expects parameter 2 to be array, null\
    \ given in /tmp/tmpvn1mkwjb.php on line 18\n\nWarning: array_search() expects\
    \ parameter 2 to be array, null given in /tmp/tmpvn1mkwjb.php on line 18\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpvn1mkwjb.php:28\nStack trace:\n\
    #0 /tmp/tmpvn1mkwjb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvn1mkwjb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return substr($s,\
    \ 0, 1) . encrypt_string(substr($s, 1));\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function encrypt_string()\
    \ in /tmp/tmpf9mmucbd.php:12\nStack trace:\n#0 /tmp/tmpf9mmucbd.php(16): encrypt('hi')\n\
    #1 /tmp/tmpf9mmucbd.php(20): candidate('hi')\n#2 /tmp/tmpf9mmucbd.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf9mmucbd.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $c = 0;\n    $result = \"\";\n    for($i\
    \ = 0, $l = strlen($s); $i < $l; $i++)\n    {\n        $c += substr($alphabet,\
    \ 2 * $i, 2);\n        $result += substr($alphabet, $c, 2);\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,string,encryption dscore=1 |>\n<| c |>\n\
    What if I want it to return 'aBcDeFgHiJkLmNoPqRsTuVwXyZ'\n<|/ c |>\n<| c |>\n\
    - That makes it even more complex.\n<|/ c |>\n<| c |>\n- I've added some additional\
    \ code that should be able to do that...\n<|/ c |>\n<| a dscore=0 tags=php,string,encryption\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvwuo762v.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet2 = strrev($alphabet);\n    $s\
    \ = strtolower($s);\n    $s = strtr($s, $alphabet2, $alphabet);\n    $s = str_replace(\"\
    \ \", \"\", $s);\n    $s = preg_replace(\"/[^a-z]/\", \"\", $s);\n    return $s;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8ir1lyc.php:26\n\
    Stack trace:\n#0 /tmp/tmpd8ir1lyc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpd8ir1lyc.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated_alphabet = rotate($alphabet);\n\
    \    $i = 0;\n    $encrypted_string = '';\n    while ($i < strlen($s)) {\n   \
    \     $encrypted_string .= $rotated_alphabet[$s[$i]];\n        $i += 2;\n    }\n\
    \    return $encrypted_string;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmpib540z0v.php:13\n\
    Stack trace:\n#0 /tmp/tmpib540z0v.php(24): encrypt('hi')\n#1 /tmp/tmpib540z0v.php(28):\
    \ candidate('hi')\n#2 /tmp/tmpib540z0v.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpib540z0v.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $result = '';\n    for ($i = 0; $i < strlen($s);\
    \ ++$i) {\n        $char = substr($alphabet, 2 * $i + 1, 1);\n        $result\
    \ += $char;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpecsi10wz.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpecsi10wz.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpecsi10wz.php on line\
    \ 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecsi10wz.php:26\n\
    Stack trace:\n#0 /tmp/tmpecsi10wz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpecsi10wz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $result = \"\";\n    $length = strlen($s);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $result = $result . substr($alphabet,\
    \ ((int)($alphabet[$i]) + 2) % (strlen($alphabet)));\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5zoj28p.php:26\n\
    Stack trace:\n#0 /tmp/tmpa5zoj28p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa5zoj28p.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array_flip(str_split('abcdefghijklmnopqrstuvwxyz'));\n\
    \  return $alphabet[$s];\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5uv8529.php:21\n\
    Stack trace:\n#0 /tmp/tmpj5uv8529.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpj5uv8529.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $s = str_split($s);\n  $n = count($s);\n  $re = '';\n  for ($i = 0; $i < $n;\
    \ $i++) {\n    $re .= $alphabet[$s[$i]];\n    if ($i == 0) {\n      $alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet[$alphabet\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm4o81pj7.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    \n    $alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    $rot_alphabet = $alphabet;\n    $rot_alphabet\
    \ .= $alphabet;\n    $rot_alphabet .= $alphabet;\n    \n    // Rotate the alphabet\n\
    \    for($i=0; $i<strlen($alphabet); $i++) { \n        $rot_alphabet[strlen($alphabet)\
    \ - 1 - $i] = $alphabet[$i]; \n    } \n    \n    // Shift all the letters down\
    \ by 2\n    for($i=0; $i<strlen($s); $i++) {\n        $new[$i] = $rot_alphabet[$s[i]\
    \ - 1];\n    }\n    \n    return implode($new);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant i - assumed 'i' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpwir4ptz8.php on line 25\n\nWarning:\
    \ Illegal string offset 'i' in /tmp/tmpwir4ptz8.php on line 25\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpwir4ptz8.php on line 25\n\nWarning: Use of undefined\
    \ constant i - assumed 'i' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpwir4ptz8.php on line 25\n\nWarning: Illegal string offset 'i' in\
    \ /tmp/tmpwir4ptz8.php on line 25\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpwir4ptz8.php on line 25\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpwir4ptz8.php:36\nStack trace:\n#0 /tmp/tmpwir4ptz8.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwir4ptz8.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  foreach($alphabet as $alpha) {\n    $s = str_rot13($s,$alpha);\n\
    \  }\n  return $s;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpv6v4hxiq.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6v4hxiq.php:24\n\
    Stack trace:\n#0 /tmp/tmpv6v4hxiq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpv6v4hxiq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $alphabet = array_flip(str_split($alphabet));\n  $rotated_alphabet = array_flip(str_split($alphabet));\n\
    \  $shifted_alphabet = array_flip(str_split($alphabet));\n  foreach ($alphabet\
    \ as $letter => $other_letter) {\n    $rotated_alphabet[$letter] = $rotated_alphabet[$other_letter];\n\
    \    $shifted_alphabet[$letter] = $shifted_alphabet[$other_letter];\n  }\n  array_push($rotated_alphabet,\
    \ array_pop($shifted_alphabet));\n  $rotated = implode('', $rotated_alphabet);\n\
    \  return strtr($s, $rotated);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_split() expects parameter 1 to be string, array given in\
    \ /tmp/tmp1wr06h2f.php on line 14\n\nWarning: array_flip() expects parameter 1\
    \ to be array, null given in /tmp/tmp1wr06h2f.php on line 14\n\nWarning: str_split()\
    \ expects parameter 1 to be string, array given in /tmp/tmp1wr06h2f.php on line\
    \ 15\n\nWarning: array_flip() expects parameter 1 to be array, null given in /tmp/tmp1wr06h2f.php\
    \ on line 15\n\nWarning: strtr(): The second argument is not an array in /tmp/tmp1wr06h2f.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wr06h2f.php:30\n\
    Stack trace:\n#0 /tmp/tmp1wr06h2f.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1wr06h2f.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\
    \ // 26 chars\n  $rotated_alphabet = strrev($alphabet); // reverse string\n  $rotated_alphabet\
    \ = substr($rotated_alphabet, 0, (strlen($rotated_alphabet) - 2)); // remove last\
    \ 2 chars \n  // $rotated_alphabet = strrev($rotated_alphabet); // reverse string\n\
    \  return strrev( strrev( strrev( $s ) ) . strrev( $rotated_alphabet ) ); // reverse\
    \ + encrypt + reverse + decrypt\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sxtfrhs.php:24\n\
    Stack trace:\n#0 /tmp/tmp1sxtfrhs.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1sxtfrhs.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return strtr(\n\
    \        $s,\n        array(\n            'a' => 'b',\n            'b' => 'a',\n\
    \            'c' => 'd',\n            'd' => 'c',\n            'e' => 'f',\n \
    \           'f' => 'e',\n            'g' => 'h',\n            'h' => 'g',\n  \
    \          'i' => 'j',\n            'j' => 'i',\n            'k' => 'l',\n   \
    \         'l' => 'k',\n            'm' => 'n',\n            'n' => 'm',\n    \
    \        'o' => 'p',\n            'p' => 'o',\n            'q' => 'r',\n     \
    \       'r' => 'q',\n            's' => 't',\n            't' => 's',\n      \
    \      'u' => 'v',\n            'v' => 'u',\n            'w' => 'x',\n       \
    \     'x' => 'w',\n            'y' => 'z',\n            'z' => 'y',\n        )\n\
    \    );\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnyg108w.php:50\n\
    Stack trace:\n#0 /tmp/tmpsnyg108w.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpsnyg108w.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('z', 'a', 'f', 'h', 'n', 'p', 'r', 's', 't', 'v', 'w', 'x', 'y', 'l',\
    \ 'k', 'm', 'i', 'j');\n    $result = \"\";\n\n    // For each character in the\
    \ string, shift the letters of the alphabet down by two and add it to $result.\n\
    \    // If $character is a space or end-of-string/null/false, then don't do anything\
    \ and move on to the next character.\n    // Otherwise, we know that $character\
    \ is a letter, so add it to the alphabet.\n    foreach($s as $character) {\n \
    \       if ($character == \" \" || $character === \"\" || $character === null\
    \ || $character === false) {\n            continue;\n        } else {\n      \
    \      $result .= $alphabet[array_key_at($alphabet, array_search($character, $alphabet))];\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpmpnpaiho.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpnpaiho.php:32\n\
    Stack trace:\n#0 /tmp/tmpmpnpaiho.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpmpnpaiho.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  // Find the maximum key length and create an array with that length.\n  $keyLen\
    \ = strlen($alphabet);\n  $alphabetArray = array_pad(array(), $keyLen, null);\n\
    \  for ($i = 0; $i < $keyLen; $i++) {\n    $alphabetArray[$i] = $alphabet[$i %\
    \ $keyLen];\n  }\n  return strtr($s, $alphabetArray);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvezkkecm.php:27\n\
    Stack trace:\n#0 /tmp/tmpvezkkecm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvezkkecm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $length = strlen($s);\n    $newAlphabet =\
    \ array_shift(str_split($alphabet, $length / 2));\n    $newAlphabet .= array_shift(str_split($alphabet,\
    \ $length / 2));\n    return strtr($s, $newAlphabet);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtr(): The second argument is not an array in /tmp/tmpdt5mnh87.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdt5mnh87.php:24\n\
    Stack trace:\n#0 /tmp/tmpdt5mnh87.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdt5mnh87.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $a = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $k = str_split('kj');\n    $l = str_split('ij');\n    $m = str_split('lm');\n\
    \    $p = str_split('ewhjklnop');\n    $q = str_split('ix');\n    $r = str_split('mno');\n\
    \    $s = str_split('wvu');\n    $t = str_split('yz');\n    $u = str_split('g');\n\
    \    $v = str_split('d');\n    $w = str_split('f');\n    $x = str_split('b');\n\
    \    $y = str_split('a');\n    $z = str_split('q');\n    $A = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $B = str_split('kj');\n    $C = str_split('ij');\n    $D = str_split('lm');\n\
    \    $E = str_split('ewhjklnop');\n    $F = str_split('ix');\n    $G = str_split('mno');\n\
    \    $H = str_split('wvu');\n    $I = str_split('yz');\n    $J = str_split('g');\n\
    \    $K = str_split('d');\n    $L = str_split('f');\n    $M = str_split('b');\n\
    \    $N = str_split('a');\n    $O = str_split('q');\n    $P = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $Q = str_split('kj');\n    $R = str_split('ij');\n    $S = str_split('lm');\n\
    \    $T = str_split('ewhjklnop');\n    $U = str_split('ix');\n    $V = str_split('mno');\n\
    \    $W = str_split('wvu');\n    $X = str_split('yz');\n    $Y = str_split('g');\n\
    \    $Z = str_split('d');\n    $a = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $b = str_split('kj');\n    $c = str_split('ij');\n    $d = str_split('lm');\n\
    \    $e = str_split('ewhjklnop');\n    $f = str_split('ix');\n    $g = str_split('mno');\n\
    \    $h = str_split('wvu');\n    $i = str_split('yz');\n    $j = str_split('g');\n\
    \    $k = str_split('d');\n    $l = str_split('f');\n    $m = str_split('b');\n\
    \    $n = str_split('a');\n    $o = str_split('q');\n    $p = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $q = str_split('kj');\n    $r = str_split('ij\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkwau7akb.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $key = array(2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1);\n    return implode($alphabet,\
    \ array_map('array_merge', $key, str_split($s)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, int given in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, int given in /tmp/tmpzgp7meij.php on line\
    \ 14\n\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, int given in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, int given in /tmp/tmpzgp7meij.php on line\
    \ 14\n\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, int given in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, int given in /tmp/tmpzgp7meij.php on line\
    \ 14\n\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, int given in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, int given in /tmp/tmpzgp7meij.php on line\
    \ 14\n\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, int given in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, int given in /tmp/tmpzgp7meij.php on line\
    \ 14\n\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, int given in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, int given in /tmp/tmpzgp7meij.php on line\
    \ 14\n\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmpzgp7meij.php on line 14\n\nWarning: array"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  return $s;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qo780p7.php:20\n\
    Stack trace:\n#0 /tmp/tmp4qo780p7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4qo780p7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $s = str_split($s);\n\
    \  $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n  $s = array();\n  foreach\
    \ ($s as $key => $value) {\n    $s[$key] = $alphabet[($alphabet[($alphabet[$key]-1)+2]+$alphabet[$key])%26];\n\
    \  }\n  return implode('', $s);\n}\n</code>\nThe above solution has the advantage\
    \ that it only requires 6 lines of code for each encryption function and can be\
    \ easily customized to perform more encryption functions in the future.\n<|/ a\
    \ dscore=5 tags=php,encryption,javascript |>\n<| c |>\nThis code does not work\
    \ in PHP. `str_split` takes 2 parameters: http://php.net/manual/en/function.str-split.php\n\
    <|/ c |>\n<| c |>\nWorks perfectly in PHP.\n<|/ c |>\n<| c |>\n- What version\
    \ of PHP are you using?  When I ran your code through `phpversion()` in my 5.5\
    \ installation I get `5.3.3-7+squeeze3`\n<|/ c |>\n<| c |>\nThis code does not\
    \ work. Try this: \n    `$alphabet = str_split('abcdefghijklmnopqrstuvwxyz');`\n\
    <|/ c |>\n<| c |>\nYes, it does work perfectly on php 5.3.2. I did a copy and\
    \ paste from your code. Are you sure you didn't modify the code or something?\
    \ This [online test](http://sandbox.onlinephpfunctions.com/code/09c5971e33c3050b09e27e6b0cc1a9d99fce6fae)\
    \ works perfectly for me.\n<|/ c |>\n<| a dscore=5 |>\nHere's another alternative:\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2n1p3od9.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n  $s = strtoupper($s);\n  $newS\
    \ = '';\n  for ($i = 0; $i < strlen($s); ++$i) {\n    $newS .= $alphabet[$i >>\
    \ 1];\n    $newS .= $alphabet[$i << 1];\n  }\n  return $newS;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3a_r9v67.php:26\n\
    Stack trace:\n#0 /tmp/tmp3a_r9v67.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3a_r9v67.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  return strtr($s, $alphabet);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkd6vb7db.php:21\n\
    Stack trace:\n#0 /tmp/tmpkd6vb7db.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkd6vb7db.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $s = strtr($s, $alphabet, array_combine($alphabet,\
    \ array_reverse($alphabet)));\n    $s = strrev($s);\n    $s = strtr($s, $alphabet,\
    \ array_combine($alphabet, $alphabet));\n    $s = strtr($s, $alphabet, array_combine($alphabet,\
    \ array_reverse($alphabet)));\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, string given\
    \ in /tmp/tmpoww33e3k.php on line 13\n\nWarning: array_combine() expects parameter\
    \ 1 to be array, string given in /tmp/tmpoww33e3k.php on line 13\n\nWarning: array_combine()\
    \ expects parameter 1 to be array, string given in /tmp/tmpoww33e3k.php on line\
    \ 15\n\nWarning: array_reverse() expects parameter 1 to be array, string given\
    \ in /tmp/tmpoww33e3k.php on line 16\n\nWarning: array_combine() expects parameter\
    \ 1 to be array, string given in /tmp/tmpoww33e3k.php on line 16\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpoww33e3k.php:25\nStack trace:\n\
    #0 /tmp/tmpoww33e3k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoww33e3k.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return strtr($s,\
    \ \n        'abcdefghijklmnopqrstuvwxyz'  => 'kjpqywvutsrqponmlkjihgfedcba',\n\
    \        'zyxwvutsrqponmlkjihgfedcba'  => 'vutsrqponmlkjihgfedcbazyxq',\n    \
    \    'kjpqywvutsrqponmlkjihgfedcba'  => 'pqywvutsrqponmlkjihgfedcbakjpq'\n   \
    \ );\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqb5tbyjc.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ str_rot13(str_rot13(str_rot13($s)));\n    $alphabet = str_rot13($alphabet);\n\
    \    $alphabet = str_rot13($alphabet);\n    $alphabet = str_rot13($alphabet);\n\
    \    $alphabet = str_rot13($alphabet);\n    $alphabet = str_rot13($alphabet);\n\
    \    $alphabet = str_rot13($alphabet);\n    $alphabet = str_rot13($alphabet);\n\
    \    $alphabet = str_rot13($alphabet);\n    $alphabet = str_rot13($alphabet);\n\
    \    $alphabet = str_rot13($alphabet);\n    $alphabet = str_rot13($alphabet);\n\
    \    $alphabet = str_rot13($alphabet);\n    $alphabet = str_rot13($alphabet);\n\
    \    $alphabet = str_rot13($alphabet);\n    $alphabet = str_rot13($alphabet);\n\
    \    $alphabet = str_rot13($alphabet);\n    $alphabet = str_rot13($alphabet);\n\
    \    return $alphabet;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13688uei.php:38\n\
    Stack trace:\n#0 /tmp/tmp13688uei.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp13688uei.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $s = str_split($s);\n\
    \  array_unshift($s,array_shift($s));\n  return implode('', $s);\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1buoxth.php:22\n\
    Stack trace:\n#0 /tmp/tmps1buoxth.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps1buoxth.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $key = 'gf';\n    $cipher = '';\n    for($i\
    \ = 0; $i < strlen($s); $i++) {\n        $c = substr($alphabet, round($i * 2 /\
    \ strlen($alphabet)), 1);\n        $cipher .= $key.$c;\n    }\n    return $cipher;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxg7_gau.php:27\n\
    Stack trace:\n#0 /tmp/tmpkxg7_gau.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkxg7_gau.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $chars = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $rotchars = 'nopqrstuvwxyzabcdefghijklm';\n    $rots = array();\n    for($i=0;\
    \ $i<strlen($s); $i++) {\n        $rots[] = $chars[$rotchars[substr($rotchars,\
    \ 0, strlen($s)-$i)%strlen($rotchars)]];\n    }\n    return implode($rots, $s);\n\
    }\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp9oql61_a.php on line\
    \ 16\n\nWarning: Illegal string offset 'n' in /tmp/tmp9oql61_a.php on line 16\n\
    \nWarning: A non-numeric value encountered in /tmp/tmp9oql61_a.php on line 16\n\
    \nWarning: Illegal string offset 'n' in /tmp/tmp9oql61_a.php on line 16\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp9oql61_a.php:25\nStack trace:\n\
    #0 /tmp/tmp9oql61_a.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9oql61_a.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return rotate(rotate($s,\
    \ 2), 1);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmpkgpxdwwp.php:12\n\
    Stack trace:\n#0 /tmp/tmpkgpxdwwp.php(16): encrypt('hi')\n#1 /tmp/tmpkgpxdwwp.php(20):\
    \ candidate('hi')\n#2 /tmp/tmpkgpxdwwp.php(30): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpkgpxdwwp.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');\n    $rotation\
    \ = array(26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47);\n\n    $s = str_replace($alphabet, array_flip($alphabet),\
    \ $s);\n    $s = strtr($s, array_combine($alphabet, $rotation));\n    return $s;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_combine(): Both parameters should have an equal number\
    \ of elements in /tmp/tmpzgxlpzf6.php on line 16\n\nWarning: strtr(): The second\
    \ argument is not an array in /tmp/tmpzgxlpzf6.php on line 16\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzgxlpzf6.php:25\nStack trace:\n\
    #0 /tmp/tmpzgxlpzf6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzgxlpzf6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  return strtr($alphabet, array_combine(str_split($alphabet, 2), str_split(str_rot13($alphabet),\
    \ 2)));\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1t1uy63.php:21\n\
    Stack trace:\n#0 /tmp/tmpu1t1uy63.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu1t1uy63.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $result = '';\n    foreach (str_split($s)\
    \ as $char) {\n        $result .= substr($alphabet, strlen($alphabet) - strlen($char)\
    \ - 1, 1) .\n                    substr($char, 0, 1);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpctg44req.php:25\n\
    Stack trace:\n#0 /tmp/tmpctg44req.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpctg44req.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $rotated_alphabet = \"nopqrstuvwxyzabcdefghijklm\"\
    ;\n  $encrypted = \"\";\n  // Go through the string and add each letter in turn\
    \ to the \n  // output until we run out of letters.\n  while ($s != \"\") {\n\
    \    $encrypted .= $alphabet[$alphabet.ord($s[0]) - 97];\n    $s = substr($s,\
    \ 1);\n  }\n  // Return encrypted string.\n  return $rotated_alphabet . $encrypted;\n\
    }\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmphdp9lbi7.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmphdp9lbi7.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdp9lbi7.php:29\n\
    Stack trace:\n#0 /tmp/tmphdp9lbi7.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphdp9lbi7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  global $alpha;\n\
    \  $rotated_alphabet = rotate($alpha);\n  $encrypted_string = '';\n\n  for ($i\
    \ = 0; $i < strlen($s); $i++) {\n    $char = substr($s, $i, 1);\n    $encrypted_string\
    \ .= substr($rotated_alphabet, \n                             $i % strlen($rotated_alphabet),\
    \ 1);\n  }\n\n  return $encrypted_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate() in /tmp/tmp_fd4w6p2.php:13\n\
    Stack trace:\n#0 /tmp/tmp_fd4w6p2.php(26): encrypt('hi')\n#1 /tmp/tmp_fd4w6p2.php(30):\
    \ candidate('hi')\n#2 /tmp/tmp_fd4w6p2.php(40): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp_fd4w6p2.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $length = strlen($s);\n    $alphaLength =\
    \ strlen($alphabet) - 1;\n    $result = '';\n    $inAlphabet = false;\n    for\
    \ ($i = 0; $i < $length; ++$i) {\n        // Look at the ith letter and find out\
    \ if it's in the alphabet. If so,\n        // then rotate it, otherwise just use\
    \ the existing letter.\n        if (!$inAlphabet && strpos($alphabet, $s[$i])\
    \ !== false) {\n            $result .= substr($alphabet, strpos($alphabet, $s[$i]));\n\
    \            $inAlphabet = true;\n        } else {\n            $result .= $s[$i];\n\
    \        }\n        // If the next letter is already in the alphabet, shift it\
    \ two\n        // places down to the next.\n        if ($inAlphabet) {\n     \
    \       $result .= substr($alphabet, strpos($alphabet, $s[$i]) + 1);\n       \
    \     $inAlphabet = false;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp136ndwi5.php:40\n\
    Stack trace:\n#0 /tmp/tmp136ndwi5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp136ndwi5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    return strtr(base64_encode($s),\
    \ $alphabet);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hwudyqn.php:21\n\
    Stack trace:\n#0 /tmp/tmp0hwudyqn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0hwudyqn.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $s = strtolower($s);\n  $ns = array();\n  for ($i = 0; $i < strlen($s); $i++)\
    \ {\n    $ns[] = substr($alphabet, strpos($alphabet, $s[$i]) - 1, 1);\n  }\n \
    \ return implode('', array_reverse($ns));\n}\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue9blecn.php:25\n\
    Stack trace:\n#0 /tmp/tmpue9blecn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpue9blecn.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $s = str_split($s);\n\
    \    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $result = array();\n    foreach\
    \ ($s as $k) {\n        $l = strlen($alphabet);\n        for ($i = 0; $i < $l;\
    \ $i++) {\n            $k = substr($alphabet, $i, 1);\n            if ($k == $k)\
    \ {\n                $result[] = $k;\n                break;\n            }\n\
    \        }\n    }\n    return implode($result);\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprk5o8nm6.php:32\n\
    Stack trace:\n#0 /tmp/tmprk5o8nm6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprk5o8nm6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $new_alphabet\
    \ = array('n', 'p', 'o', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $len = strlen($s);\n\n  \
    \  // If the length of the string is 0, return an empty string\n    if ($len ==\
    \ 0) {\n        return '';\n    }\n\n    // If the length of the string is less\
    \ than 2, return an empty string\n    if ($len < 2) {\n        return '';\n  \
    \  }\n\n    // If the string contains more than 1 character, return an empty string\n\
    \    if ($len > 1 ) {\n        return '';\n    }\n\n    // Iterate through each\
    \ character in the string\n    for ($i = 0; $i < $len; $i++) {\n        // For\
    \ each character in the string\n        $character = $s[$i];\n        $current_position\
    \ = $alphabet.indexOf($character);\n        $new_position = $new_alphabet.indexOf($character);\n\
    \n        // If the current position is equal to the length of the alphabet\n\
    \        // then skip to the end of the loop\n        if ($current_position ==\
    \ $alphabet.length) {\n            return '';\n        }\n\n        // If the\
    \ current character is less than the current position then\n        // move the\
    \ letter to the right\n        if ($current_position < $current_position) {\n\
    \            $s[$i] = $new_alphabet[$new_position];\n        }\n        // Otherwise,\
    \ the character is greater than the current position\n        // move the letter\
    \ to the left\n        else {\n            $s[$i] = $new_alphabet[$current_position\
    \ - 2];\n        }\n    }\n\n    // Return the encrypted string\n    return $s;\n\
    }\n\n$input = \"Hi I am Jack!\";\n$output = encrypt($input);\necho $output;\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nc_axc9.php:68\n\
    Stack trace:\n#0 /tmp/tmp1nc_axc9.php(78): test()\n#1 {main}\n  thrown in /tmp/tmp1nc_axc9.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $len = strlen($s);\n\
    \    $s = str_split($s);\n    $new = '';\n    for($i=0; $i<$len; $i+=2) {\n  \
    \      $new .= str_repeat($s[$i], 2);\n    }\n    return $new;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadqj6isi.php:25\n\
    Stack trace:\n#0 /tmp/tmpadqj6isi.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpadqj6isi.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n   $alphabet =\
    \ str_split('abcdefghijklmnopqrstuvwxyz');\n   $alphabet = array_reverse($alphabet);\n\
    \   $cipher = '';\n   foreach (str_split($s) as $c) {\n      $c = strtolower($c);\n\
    \      $cipher .= $alphabet[strpos($alphabet, $c) % 26];\n   }\n   return $cipher;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmp33c7sgv2.php\
    \ on line 17\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmp33c7sgv2.php on line 17\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp33c7sgv2.php:27\nStack trace:\n#0 /tmp/tmp33c7sgv2.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp33c7sgv2.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated_alphabet = str_repeat($alphabet,\
    \ 2);\n    return strtr($s, $alphabet, $rotated_alphabet);\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0x6u52os.php:21\n\
    Stack trace:\n#0 /tmp/tmp0x6u52os.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0x6u52os.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $result = '';\n\
    \    for ($i = 0, $len = strlen($s); $i < $len; $i++) {\n        $result .= $alphabet[$alphabet_count\
    \ % strlen($alphabet)]\n            .substr($s, $i, 1);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp14x293xs.php:14\n\
    Stack trace:\n#0 /tmp/tmp14x293xs.php(21): encrypt('hi')\n#1 /tmp/tmp14x293xs.php(25):\
    \ candidate('hi')\n#2 /tmp/tmp14x293xs.php(35): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp14x293xs.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Write your\
    \ code here\n    $rotated_alphabet = str_rot13($s);\n    $rotated_alphabet = str_replace(array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '}'), array('z', 'y', 'x',\
    \ 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h',\
    \ 'g', 'f', 'e', 'd', 'c', 'b', 'a'), $rotated_alphabet);\n    $rotated_alphabet\
    \ = str_rot13($rotated_alphabet);\n    $rotated_alphabet = str_replace(array('A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '{', '}'), array('a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '}'), $rotated_alphabet);\n    $rotated_alphabet\
    \ = str_rot13($rotated_alphabet);\n    $rotated_alphabet = str_replace(array('!',\
    \ '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', ':',\
    \ ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\
    \ '{', '}'), array('z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o',\
    \ 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'), $rotated_alphabet);\n\
    \    $rotated_alphabet = str_rot13($rotated_alphabet);\n    $rotated_alphabet\
    \ = str_replace(array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '{', '}'),\
    \ array('z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm',\
    \ 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'), $rotated_alphabet);\n\
    \    $rotated_alphabet = str_rot13($rotated_alphabet);\n    $rotated_alphabet\
    \ = str_replace(array('a', 'b', 'c', 'd', '\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnr12icvb.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // your code\
    \ goes here\n    $alpha = 'abcdefghijklmnopqrstuvwxyz';\n    $s = str_split($s);\n\
    \    $out = '';\n    foreach($s as $letter) {\n        $out .= substr($alpha,\
    \ substr($alpha, -1) * 2, 1) .\n            substr($alpha, 0, -1) .\n        \
    \    substr($alpha, -1 * 2, 1) .\n            substr($alpha, 0, -1) .\n      \
    \      substr($alpha, -1 * 2, 1);\n    }\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpdy4yet5v.php on line\
    \ 17\n\nWarning: A non-numeric value encountered in /tmp/tmpdy4yet5v.php on line\
    \ 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdy4yet5v.php:31\n\
    Stack trace:\n#0 /tmp/tmpdy4yet5v.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdy4yet5v.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return strtr($s,\
    \ $alphabet);\n}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtr(): The second argument is not an array in /tmp/tmp0orfg5cg.php\
    \ on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0orfg5cg.php:19\n\
    Stack trace:\n#0 /tmp/tmp0orfg5cg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0orfg5cg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Complete\
    \ the code\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $rotated_alphabet\
    \ = array();\n    for ($i=0; $i<strlen($alphabet); $i++) {\n        $rotated_alphabet[]\
    \ = substr($alphabet,$i,1);\n    }\n    for ($i=0; $i<strlen($alphabet); $i++)\
    \ {\n        $rotated_alphabet[$i] = substr($rotated_alphabet[$i],0,2);\n    }\n\
    \    $rotated_alphabet = array_unique($rotated_alphabet);\n    $rotated_alphabet.sort($rotated_alphabet);\n\
    \    $rot = array();\n    $rot = array_reverse($rotated_alphabet);\n    for ($i=0;\
    \ $i<strlen($alphabet); $i++) {\n        $rot = str_replace($alphabet[$i],$rot[$i],$rot);\n\
    \    }\n    return $rot;\n}\n$input = readline(\"Please enter a string to encrypt:\
    \ \");\n$result = encrypt($input);\nprint($result);\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpfmtof__v.php:30\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpfmtof__v.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $rotated_alphabet\
    \ = '';\n    for($i = strlen($s); $i > 0; $i--) {\n        $rotated_alphabet .=\
    \ $alphabet[$i % $keySize];\n    }\n\n    return $rotated_alphabet;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpwk3qkopt.php:14\n\
    Stack trace:\n#0 /tmp/tmpwk3qkopt.php(21): encrypt('hi')\n#1 /tmp/tmpwk3qkopt.php(25):\
    \ candidate('hi')\n#2 /tmp/tmpwk3qkopt.php(35): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpwk3qkopt.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  return substr($s,\
    \ 0, 1) . \n    rot(substr($s, 1), 2) . \n    rot(substr($s, 2), 3) . \n    rot(substr($s,\
    \ 3), 4) . \n    rot(substr($s, 4), 5) . \n    rot(substr($s, 5), 6) . \n    rot(substr($s,\
    \ 6), 7);\n}\n \nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rot() in /tmp/tmpgzug_z1f.php:13\n\
    Stack trace:\n#0 /tmp/tmpgzug_z1f.php(22): encrypt('hi')\n#1 /tmp/tmpgzug_z1f.php(26):\
    \ candidate('hi')\n#2 /tmp/tmpgzug_z1f.php(36): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpgzug_z1f.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $alphabet = str_split($alphabet);\n  $alphabet = array_reverse($alphabet);\n\
    \  $alphabet = array_merge(array(\"\"), $alphabet);\n  $i = 0;\n  $s = str_split($s);\n\
    \  $s = array_map('strrev', $s);\n  foreach ($s as &$value) {\n    $value = $alphabet[$i++];\n\
    \  }\n  return implode('', $s);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0khmde8z.php:30\n\
    Stack trace:\n#0 /tmp/tmp0khmde8z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0khmde8z.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ range('A', 'Z');\n    $new_alphabet = range('A', 'Z');\n    foreach ($alphabet\
    \ as $value) {\n        $pos = strpos($s, $value);\n        $new_alphabet[($pos\
    \ + 1)] = $value;\n    }\n    return $new_alphabet;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fuf68xp.php:25\n\
    Stack trace:\n#0 /tmp/tmp4fuf68xp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4fuf68xp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return (strtr($s,\
    \ array_flip(str_repeat($s, 2))) ^ $s);\n}\nfunction candidate(...$args) {\n \
    \   return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip() expects parameter 1 to be array, string given in\
    \ /tmp/tmp4qtnapco.php on line 12\n\nWarning: strtr(): The second argument is\
    \ not an array in /tmp/tmp4qtnapco.php on line 12\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmp4qtnapco.php on line 12\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4qtnapco.php:19\nStack trace:\n#0 /tmp/tmp4qtnapco.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4qtnapco.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $result .= $alphabet[(strlen($alphabet)\
    \ - $i) % 26];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbdh33nq.php:25\n\
    Stack trace:\n#0 /tmp/tmpcbdh33nq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcbdh33nq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \  foreach($alphabet as &$letter){\n    $letter = str_rot13($letter);\n  }\n \
    \ return implode('', $alphabet);\n}\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2ty1ujf.php:23\n\
    Stack trace:\n#0 /tmp/tmpf2ty1ujf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpf2ty1ujf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $s = strtolower($s);\n\
    \    return strtr($s, array('a' => 'd', 'b' => 'c'));\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqxa9y0b.php:21\n\
    Stack trace:\n#0 /tmp/tmpuqxa9y0b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpuqxa9y0b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $result = '';\n    for ($i = 0; $i < strlen($s);\
    \ ++$i) {\n        $result = $alphabet[$alphabet.$i]; // Rotate the letters\n\
    \    }\n    return $result;\n}\n</code>\nA solution using PHP\n<code>\n<?php\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkq8826y4.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  $s = strtoupper($s);\n  for($i=0;$i<strlen($s);$i++) {\n    $alphabet[] = $alphabet[($i+1)%strlen($alphabet)];\n\
    \  }\n  return implode($alphabet,str_split($s));\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmp0pes9jid.php\
    \ on line 15\n\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp0pes9jid.php:15\n\
    Stack trace:\n#0 /tmp/tmp0pes9jid.php(21): encrypt('HI')\n#1 /tmp/tmp0pes9jid.php(25):\
    \ candidate('hi')\n#2 /tmp/tmp0pes9jid.php(35): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp0pes9jid.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $s = strrev($s);\n    $s = strtr($alphabet,\
    \ $alphabet);\n    $s = strrev($s);\n    return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtr(): The second argument is not an array in /tmp/tmpoemp4e53.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoemp4e53.php:23\n\
    Stack trace:\n#0 /tmp/tmpoemp4e53.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpoemp4e53.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // TODO: Implement\
    \ encrypt()\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpselxpalv.php:20\n\
    Stack trace:\n#0 /tmp/tmpselxpalv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpselxpalv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$alphabet = array_merge($alphabet,\
    \ array_slice($alphabet, -2, 2));\n\t$alphabet = array_merge($alphabet, array_slice($alphabet,\
    \ 0, 2));\n\t$alphabet = array_merge($alphabet, array('m', 'l', 'n', 'o', 'p',\
    \ 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'));\n\t\n\t$i = 0;\n\t$encrypted\
    \ = \"\";\n\tforeach (str_split($s) as $c) {\n\t\t$encrypted .= $alphabet[$i];\n\
    \t\t$i++;\n\t}\n\t\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8egdf2l.php:32\n\
    Stack trace:\n#0 /tmp/tmpw8egdf2l.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpw8egdf2l.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $rotatedAlphabet\
    \ = array();\n  for ($i = 26; $i >= 1; $i--) {\n    $rotatedAlphabet[($i + 1)\
    \ % 26] = chr(ord($s[$i - 1]) + $i + 1);\n  }\n\n  return implode($rotatedAlphabet);\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t5uccod.php:25\n\
    Stack trace:\n#0 /tmp/tmp_t5uccod.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_t5uccod.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  // Create a variable\
    \ that holds the rotated alphabet\n  $a = str_split(str_repeat($alphabet,2));\n\
    \  // For each letter in the alphabet...\n  foreach($a as &$letter) {\n    //\
    \ Get the position of the letter in the alphabet\n    $i = strpos($alphabet,$letter);\n\
    \    // Rotate the letter by two places...\n    $letter = substr($alphabet,$i,1).substr($alphabet,$i-1,1).$letter;\n\
    \  }\n  // Return the encrypted string\n  return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strpos(): Empty needle in /tmp/tmphb152spq.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphb152spq.php:29\nStack\
    \ trace:\n#0 /tmp/tmphb152spq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphb152spq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $alphaCount\
    \ = count($alphabet);\n    $rotations = $alphaCount / 2;\n    $alphabet = array_rotate($alphabet,\
    \ $rotations);\n    $alphaCount = count($alphabet);\n    return str_split(str_shuffle($s));\n\
    \    \n    // return str_split(str_shuffle($alphabet[0]));\n    // return str_split(str_shuffle($alphabet[1]));\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_rotate()\
    \ in /tmp/tmpgx8xa2ko.php:15\nStack trace:\n#0 /tmp/tmpgx8xa2ko.php(24): encrypt('hi')\n\
    #1 /tmp/tmpgx8xa2ko.php(28): candidate('hi')\n#2 /tmp/tmpgx8xa2ko.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgx8xa2ko.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $encrypted = \"\";\n    $shift_alphabet\
    \ = str_split($alphabet, 2);\n    foreach (str_split($s) as $c) {\n        $shift_c\
    \ = $alphabet[strpos($alphabet, $c) + 2];\n        $encrypted .= $shift_alphabet[strpos($shift_alphabet,\
    \ $shift_c) - 2];\n    }\n    return $encrypted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmp0c72xw2z.php\
    \ on line 17\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmp0c72xw2z.php on line 17\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp0c72xw2z.php:27\nStack trace:\n#0 /tmp/tmp0c72xw2z.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0c72xw2z.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $rotated_alphabet = $alphabet;\n  $rotated_alphabet[$alphabet.'a'] = 'k';\n\
    \  $rotated_alphabet[$alphabet.'b'] = 't';\n  $rotated_alphabet[$alphabet.'c']\
    \ = 'r';\n  $rotated_alphabet[$alphabet.'d'] = 'h';\n  $rotated_alphabet[$alphabet.'e']\
    \ = 'v';\n  $rotated_alphabet[$alphabet.'f'] = 'm';\n  $rotated_alphabet[$alphabet.'g']\
    \ = 'a';\n  $rotated_alphabet[$alphabet.'h'] = 'w';\n  $rotated_alphabet[$alphabet.'i']\
    \ = 'e';\n  $rotated_alphabet[$alphabet.'j'] = 'q';\n  $rotated_alphabet[$alphabet.'k']\
    \ = 'u';\n  $rotated_alphabet[$alphabet.'l'] = 'p';\n  $rotated_alphabet[$alphabet.'m']\
    \ = 'l';\n  $rotated_alphabet[$alphabet.'n'] = 'f';\n  $rotated_alphabet[$alphabet.'o']\
    \ = 'e';\n  $rotated_alphabet[$alphabet.'p'] = 'r';\n  $rotated_alphabet[$alphabet.'q']\
    \ = 't';\n  $rotated_alphabet[$alphabet.'r'] = 's';\n  $rotated_alphabet[$alphabet.'s']\
    \ = 'v';\n  $rotated_alphabet[$alphabet.'t'] = 'w';\n  $rotated_alphabet[$alphabet.'u']\
    \ = 'c';\n  $rotated_alphabet[$alphabet.'v'] = 'j';\n  $rotated_alphabet[$alphabet.'w']\
    \ = 'x';\n  $rotated_alphabet[$alphabet.'x'] = 'r';\n  $rotated_alphabet[$alphabet.'y']\
    \ = 'm';\n  $rotated_alphabet[$alphabet.'z'] = 'k';\n  $rotated_alphabet[$alphabet.'A']\
    \ = 'J';\n  $rotated_alphabet[$alphabet.'B'] = 'K';\n  $rotated_alphabet[$alphabet.'C']\
    \ = 'L';\n  $rotated_alphabet[$alphabet.'D'] = 'M';\n  $rotated_alphabet[$alphabet.'E']\
    \ = 'N';\n  $rotated_alphabet[$alphabet.'F'] = 'O';\n  $rotated_alphabet[$alphabet.'G']\
    \ = 'P';\n  $rotated_alphabet[$alphabet.'H'] = 'Q';\n  $rotated_alphabet[$alphabet.'I']\
    \ = 'R';\n  $rotated_alphabet[$alphabet.'J'] = 'S';\n  $rotated_alphabet[$alphabet.'K']\
    \ = 'T';\n  $rotated_alphabet[$alphabet.'L\nfunction candidate(...$args) {\n \
    \   return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcwipcupr.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  return implode('',\
    \ array_map(\n    function($x) {\n      return $x . $x;\n    },\n    str_split($s)\n\
    \  ));\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp115usid8.php:25\n\
    Stack trace:\n#0 /tmp/tmp115usid8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp115usid8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return implode(\"\
    \", $rotateArray(str_split($s), 2));\n}\n\nfunction candidate(...$args) {\n  \
    \  return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpvsx90t5_.php:12\n\
    Stack trace:\n#0 /tmp/tmpvsx90t5_.php(16): encrypt('hi')\n#1 /tmp/tmpvsx90t5_.php(20):\
    \ candidate('hi')\n#2 /tmp/tmpvsx90t5_.php(30): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpvsx90t5_.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    $rotated_alphabet\
    \ = str_shuffle($alphabet);\n    $rotated_alphabet = str_replace($alphabet, array_reverse(\n\
    \        str_replace($alphabet, '', $rotated_alphabet)), $alphabet);\n    return\
    \ strtr($s, $rotated_alphabet);\n}\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, string given\
    \ in /tmp/tmpl53vttmi.php on line 15\n\nWarning: strtr(): The second argument\
    \ is not an array in /tmp/tmpl53vttmi.php on line 16\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpl53vttmi.php:23\nStack trace:\n#0 /tmp/tmpl53vttmi.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl53vttmi.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Your code\
    \ here.\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftbugp6g.php:20\n\
    Stack trace:\n#0 /tmp/tmpftbugp6g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpftbugp6g.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $newAlphabet = $alphabet;\n    for ($i\
    \ = strlen($alphabet) - 1; $i >= 0; $i--) {\n        $newAlphabet = substr($newAlphabet,\
    \ 0, $i) + \n                      $alphabet[$i] + \n                      substr($newAlphabet,\
    \ $i + 1);\n    }\n    return substr($newAlphabet, 0, strlen($s) % strlen($alphabet))\
    \ . $s;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 17\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /tmp/tmpr4onuzbc.php on line\
    \ 16\n\nWarning: A non-numeric value encountered in /"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return $alphabet[$alphabet[\n\
    \        array_search($s,$alphabet)+2\n    ]];\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp9feba0jw.php on line 13\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9feba0jw.php:22\nStack trace:\n#0 /tmp/tmp9feba0jw.php(32): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9feba0jw.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \  'abcdefghijklmnopqrstuvwxyz';\n    $alphabetLength = strlen($alphabet);\n \
    \   $newString = '';\n    $currentIndex = 0;\n    for($i=0; $i<strlen($s); $i++)\
    \ {\n        $newString .= $alphabet[( ($currentIndex + $i % $alphabetLength)\
    \ % $alphabetLength)];\n        $currentIndex++;\n    }\n    return $newString;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn95u106d.php:28\n\
    Stack trace:\n#0 /tmp/tmpn95u106d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn95u106d.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $new_s = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $new_s .= $alphabet[($alphabet[ord($s[$i]) - ord('a') + 2)\
    \ % 26];\n    }\n    return $new_s;\n}\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc0sxjdu9.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift(\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp35s4w8kn.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('z','y','x');\n\
    \  $alphabet = array_flip($alphabet);\n  $alphabet = array_shift($alphabet);\n\
    \  return strtr($s, $alphabet);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtr(): The second argument is not an array in /tmp/tmpjpv0wg6u.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjpv0wg6u.php:23\n\
    Stack trace:\n#0 /tmp/tmpjpv0wg6u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjpv0wg6u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $s = strrev($s);\n    $i = 0;\n    do {\n\
    \        $i = ($i + 1) % strlen($alphabet);\n        $str = $alphabet[$i];\n \
    \       $str = $alphabet[($str + $s) % strlen($alphabet)];\n    } while (strlen($str)\
    \ < strlen($s));\n    return strrev($str);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "b'\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php on\
    \ line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on line 18\\n\\nWarning: A non-numeric value encountered in /tmp/tmpt4o4jes4.php\
    \ on l"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ str_split($s);\n    // Rotate the alphabet by two.\n    $alphabet = array_merge(array_slice($alphabet,\
    \ 2), array_slice($alphabet, 0, 2));\n    return implode('', $alphabet);\n}\n\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbvnaboh.php:23\n\
    Stack trace:\n#0 /tmp/tmpjbvnaboh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjbvnaboh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  return $s[array_sum(str_split($s))\
    \ % strlen($s)];\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm94jty7.php:20\n\
    Stack trace:\n#0 /tmp/tmplm94jty7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplm94jty7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  // Rotate every\
    \ letter by two places to make an even number of letters.\n  $alphabet = range('a',\
    \ 'z');\n  $alphabet = array_merge($alphabet, range('A', 'Z'));\n\n  $rotated_alphabet\
    \ = $alphabet;\n  foreach ($alphabet as $key => $letter) {\n    for($i = strlen($s)\
    \ - 1; $i >= 0; $i--) {\n      // Append the new letter to the end of this letter.\n\
    \      $rotated_alphabet[$key] = $alphabet[$key + $i];\n    }\n  }\n\n  return\
    \ $rotated_alphabet;\n}\n</code>\nThis should do it\n<|/ a tags=php,encryption\
    \ dscore=1 |>\n<| a dscore=0 |>\nI rewrote your code to make your life easier\
    \ and make your life easier! :-) \n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjervr7jo.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('q','w','e','r','t','y','u','i','o','p','a','s','d','f','g','h','j','k','l','z','x');\n\
    \  $alphabet = array_merge($alphabet, array('z'));\n  $alphabet = array_merge($alphabet,\
    \ array('z','y'));\n  $alphabet = array_merge($alphabet, array('y','x','u','i','o','p'));\n\
    \  $alphabet = array_merge($alphabet, array('h','g','f','e','d','c','b','a','z'));\n\
    \  $alphabet = array_merge($alphabet, array('z','y','x','u','i','o','p'));\n \
    \ $alphabet = array_merge($alphabet, array('x','u','i','o','p'));\n  $alphabet\
    \ = array_merge($alphabet, array('y','x','u','i','o','p'));\n  $alphabet = array_merge($alphabet,\
    \ array('u','i','o','p'));\n  $alphabet = array_merge($alphabet, array('y','x','u','i','o','p'));\n\
    \  $alphabet = array_merge($alphabet, array('u','i','o','p'));\n  $alphabet =\
    \ array_merge($alphabet, array('u','i','o','p'));\n  $alphabet = array_merge($alphabet,\
    \ array('u','i','o','p'));\n  $alphabet = array_merge($alphabet, array('u','i','o','p'));\n\
    \  $alphabet = array_merge($alphabet, array('u','i','o','p'));\n  $alphabet =\
    \ array_merge($alphabet, array('u','i','o','p'));\n  $alphabet = array_merge($alphabet,\
    \ array('u','i','o','p'));\n  $alphabet = array_merge($alphabet, array('u','i','o','p'));\n\
    \  $alphabet = array_merge($alphabet, array('u','i','o','p'));\n  $alphabet =\
    \ array_merge($alphabet, array('u','i','o','p'));\n  $alphabet = array_merge($alphabet,\
    \ array('u','i','o','p'));\n  $alphabet = array_merge($alphabet, array('u','i','o','p'));\n\
    \  $alphabet = array_merge($alphabet, array('u','i','o','p'));\n  $alphabet =\
    \ array_merge($alphabet, array('u','i','o','p'));\n  $alphabet = array_merge($alphabet\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_m_8y_l_.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\
    \    $key = array('l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z');\n\n    $encrypted = '';\n    $size = strlen($s);\n    for($i = 0; $i <\
    \ $size; $i++){\n        $encrypted .= $alphabet[array_search($s[$i], $key)];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklsp37fi.php:28\n\
    Stack trace:\n#0 /tmp/tmpklsp37fi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpklsp37fi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $newString\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $newString .= encrypt($s[$i]);\n\
    \    }\n    return $newString;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpzfi7zm80.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // TODO: Fill\
    \ in the code for this function. \n    // Hint: Look up the array_map function.\n\
    }\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2qq7w3s.php:20\n\
    Stack trace:\n#0 /tmp/tmpd2qq7w3s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpd2qq7w3s.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return strtr(\n\
    \        str_pad($s, strlen($s)+2, chr(0), STR_PAD_RIGHT),\n        array(\n \
    \           'h' => 'i',\n            'a' => 'i',\n            's' => 'i',\n  \
    \          'f' => 'i',\n            'k' => 'i',\n            'j' => 'i',\n   \
    \         'l' => 'i',\n            'r' => 'i',\n            't' => 'i',\n    \
    \        'm' => 'i',\n            'y' => 'i',\n        )\n    );\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zccich3.php:35\n\
    Stack trace:\n#0 /tmp/tmp6zccich3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6zccich3.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    return $s;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nqn38ek.php:20\n\
    Stack trace:\n#0 /tmp/tmp0nqn38ek.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0nqn38ek.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ str_split('abcdefghijklmnopqrstuvwxyz');\n    return strtr($s, $alphabet);\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplpx2himg.php:21\n\
    Stack trace:\n#0 /tmp/tmplpx2himg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplpx2himg.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Create a\
    \ variable called alphabet which has the\n    // rotated alphabet to rotate in\n\
    \    $alphabet = array();\n    for($i = 0; $i < strlen($s); $i++) {\n        //\
    \ Assign each letter in the string to a variable\n        $letter = $s[$i];\n\
    \        // Add each letter to the alphabet but shift it down two places\n   \
    \     $alphabet[] = substr($letter, 1);\n        $alphabet[] = substr($letter,\
    \ -1);\n    }\n    // Loop through the alphabet array to create a string\n   \
    \ $result = \"\";\n    foreach($alphabet as $letter) {\n        // If the letter\
    \ is a string then add it to the string\n        if(strlen($letter) > 0) {\n \
    \           $result .= $letter;\n        }\n    }\n    // Return the encrypted\
    \ string\n    return $result;\n}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplx0lub9j.php:38\n\
    Stack trace:\n#0 /tmp/tmplx0lub9j.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplx0lub9j.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet = str_replace('a', 'x', $alphabet);\n\
    \    $alphabet = str_replace('b', 'y', $alphabet);\n    $alphabet = str_replace('c',\
    \ 'z', $alphabet);\n    $alphabet = str_replace('d', 'w', $alphabet);\n    $alphabet\
    \ = str_replace('e', 'v', $alphabet);\n    $alphabet = str_replace('f', 'g', $alphabet);\n\
    \    $alphabet = str_replace('h', 'i', $alphabet);\n    $alphabet = str_replace('j',\
    \ 'k', $alphabet);\n    $alphabet = str_replace('l', 'm', $alphabet);\n    $alphabet\
    \ = str_replace('n', 'o', $alphabet);\n    $alphabet = str_replace('p', 'q', $alphabet);\n\
    \    $alphabet = str_replace('r', 's', $alphabet);\n    $alphabet = str_replace('t',\
    \ 't', $alphabet);\n    $alphabet = str_replace('u', 'u', $alphabet);\n    $alphabet\
    \ = str_replace('v', 'v', $alphabet);\n    $alphabet = str_replace('w', 'x', $alphabet);\n\
    \    $alphabet = str_replace('y', 'y', $alphabet);\n    $alphabet = str_replace('z',\
    \ 'z', $alphabet);\n    return strtr($s, $alphabet);\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtr(): The second argument is not an array in /tmp/tmpn5w8qoa2.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5w8qoa2.php:38\n\
    Stack trace:\n#0 /tmp/tmpn5w8qoa2.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpn5w8qoa2.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $s = str_replace(array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'), array('z', 'y', 'x', 'w', 'v',\
    \ 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f',\
    \ 'e', 'd', 'c', 'b', 'a'), $s);\n    $s = str_replace(array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9'), array('z', 'y', 'x', 'w', 'v', 'u', 't', 's',\
    \ 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c',\
    \ 'b', 'a'), $s);\n    return $s;\n}\n</code>\n<|/ a |>\n<| c |>\nYou probably\
    \ should add some checks to ensure your input string is both short enough and\
    \ contains only letters (no numbers, no spaces, etc.). Also, the method `encrypt`\
    \ may not work in all cases. It won't encrypt \"ab\", for instance.\n<|/ c |>\n\
    <| c |>\nHmm, okay, I see you updated your code to include an `if` statement,\
    \ so I guess I should be good now.\n<|/ c |>\n<| a tags=string,php,encryption,arrays\
    \ |>\nOkay, this answer is kind of long, but it's based on a couple of assumptions\
    \ (which is probably wrong). Basically, this version assumes a two-way hash. My\
    \ version is kind of messy but hopefully you can understand what it is doing,\
    \ and why it's useful.\nThe algorithm takes three things (in order from least\
    \ to most important): two strings, the key to encrypt / decrypt, and  a two-way\
    \ hashing algorithm that creates a new string based on the input string, called\
    \ a key derivation function.\nThe two strings are the two strings that you want\
    \ to use to encrypt / decrypt the string. For example, if you had a plaintext\
    \ string \"abc\" and encrypted the string \"def\" with the keys \"abc\" and \"\
    def\", you'd get \"ghi\" as the encrypted string since \"def\" can be reconstructed\
    \ from the encrypted string \"ghi\".\nThe key derivation function simply takes\
    \ a plaintext string and returns a unique string based on the input. So, for example,\
    \ if you have a plaintext string \"abc\" and the key \"abc\", you'd get \"abc_1\"\
    . If the plaintext string is \"def\", you'd get \"def_1\". You'd then run this\
    \ through another key derivation function that would return \"def_2\". If \"abc\"\
    \ and \"def\" were used repeatedly, you'd get \"abc_1\", \"def_\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1hh1ttna.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $rotated_alphabet\
    \ = str_rot13($s);\n    $length = strlen($rotated_alphabet);\n    for ($i=0; $i<$length;\
    \ $i++) {\n        list($key, $value) = str_split($rotated_alphabet, $i);\n  \
    \      $value = $value + 2;\n        $rotated_alphabet[$key] = chr($value);\n\
    \    }\n    return implode('', $rotated_alphabet);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_split(): The length of each segment must be greater than\
    \ zero in /tmp/tmpt81o2av4.php on line 15\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpt81o2av4.php on line 16\n\nWarning: Illegal string offset '\x02'\
    \ in /tmp/tmpt81o2av4.php on line 17\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpt81o2av4.php on line 19\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpt81o2av4.php:27\nStack trace:\n#0 /tmp/tmpt81o2av4.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt81o2av4.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  return strtr($s, $alphabet);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplljm1qc7.php:21\n\
    Stack trace:\n#0 /tmp/tmplljm1qc7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplljm1qc7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $alphabet_count\
    \ = count($alphabet);\n    $encrypted_string = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $char = $s[$i];\n        $encrypted_string = $encrypted_string\
    \ . $alphabet[($alphabet_count - 2) % ($alphabet_count - 1)];\n    }\n    return\
    \ $encrypted_string;\n}\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5l3zwkm9.php:26\n\
    Stack trace:\n#0 /tmp/tmp5l3zwkm9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5l3zwkm9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$alphabet = str_split($alphabet, 2);\n\t$shift   = 2;\n\t$slength = strlen($s);\n\
    \n\tfor ($i = 0; $i < $slength; $i++) {\n\t\t$char = substr($s, $i, 1);\n\t\t\
    if (in_array($char, $alphabet)) {\n\t\t\t$out[] = substr($char, 0, 1);\n\t\t\t\
    $out[] = substr($char, 1, 1);\n\t\t} else {\n\t\t\t$out[] = $char;\n\t\t}\n\t\
    }\n\treturn $out . array_shift($out);\n}\n\nfunction candidate(...$args) {\n \
    \   return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiem6w2ic.php:34\n\
    Stack trace:\n#0 /tmp/tmpiem6w2ic.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpiem6w2ic.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $l = strlen($s);\n\
    \    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n    $alphabet[$l /\
    \ 2] = $alphabet[$l / 2 - 1];\n    $alphabet[$l - 1] = $alphabet[$l / 2 - 1];\n\
    \n    $p = 0;\n    $ps = '';\n    for ($i = 0; $i < $l; $i++) {\n        $c =\
    \ $s[$i];\n        $j = ($l / 2) - $i;\n        $ps = $alphabet[$j] . $ps;\n \
    \       $p = $alphabet[$j - 2] . $p;\n        $alphabet[$j] = $c;\n        $alphabet[$j\
    \ - 2] = $p;\n    }\n    return $ps;\n}\n\nfunction candidate(...$args) {\n  \
    \  return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7dkx0ow.php:35\n\
    Stack trace:\n#0 /tmp/tmpx7dkx0ow.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpx7dkx0ow.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $alphabet = array_combine($alphabet, $alphabet);\n    $alphabet = array_flip($alphabet);\n\
    \    \n    $s = strtolower($s);\n    \n    $key = $alphabet[$s[0]];\n    $s =\
    \ substr($s, 1);\n    $s = $alphabet[$s];\n    \n    return $key.$s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff26sc8f.php:30\n\
    Stack trace:\n#0 /tmp/tmpff26sc8f.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpff26sc8f.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('z', 'y', 'x', 'w', 'v', 'u', 't');\n    $result = '';\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $letter = $alphabet[($alphabet[$i]\
    \ + ($i % 2)) * 2 % strlen($alphabet)];\n        $result = $result . $letter;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpoeei119x.php on line\
    \ 16\n\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpoeei119x.php\
    \ on line 16\n\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpoeei119x.php:16\n\
    Stack trace:\n#0 /tmp/tmpoeei119x.php(23): encrypt('hi')\n#1 /tmp/tmpoeei119x.php(27):\
    \ candidate('hi')\n#2 /tmp/tmpoeei119x.php(37): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpoeei119x.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$rotation = strlen($alphabet);\n\t$result = \"\";\n\t$i = 0;\n\t$len = strlen($s);\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\t$char = substr($s, $i, 1);\n\t\tif ($char\
    \ !== ' ') {\n\t\t\t$index = ($char - $alphabet[0]) * 2;\n\t\t\t$result .= substr($alphabet,\
    \ $index, ($rotation - $index));\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp7fh7vlag.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp7fh7vlag.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp7fh7vlag.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmp7fh7vlag.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fh7vlag.php:31\n\
    Stack trace:\n#0 /tmp/tmp7fh7vlag.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7fh7vlag.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    // Rotate the\
    \ alphabet by two places.\n    $alphabet = strrev($alphabet);\n    \n    $rotated_alphabet\
    \ = '';\n    \n    // Iterate over each letter in the alphabet.\n    foreach($alphabet\
    \ as $char) {\n        // Get the current letter.\n        $c = $char;\n     \
    \   \n        // Get the index of the current letter in the rotated alphabet.\n\
    \        $i = array_search($c, $rotated_alphabet);\n        \n        // Add two\
    \ to shift the letter down two places.\n        $i += 2;\n        \n        //\
    \ Add the letter to the rotated alphabet.\n        $rotated_alphabet .= $alphabet[$i];\n\
    \    }\n    \n    // Return the encrypted string.\n    return $rotated_alphabet;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpskh00dnj.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskh00dnj.php:41\n\
    Stack trace:\n#0 /tmp/tmpskh00dnj.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpskh00dnj.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $encrypted = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $encrypted\
    \ .= $alphabet[($alphabet[ord($s[$i])] + ($alphabet[ord($s[$i + 1])] - $alphabet[ord($s[$i])])/2)];\n\
    \    }\n    return $encrypted;\n}\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpxdu7x9v_.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdu7x9v_.php:24\n\
    Stack trace:\n#0 /tmp/tmpxdu7x9v_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxdu7x9v_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet2 = \"zyxwvutsrqpomnlgldbaijkmno\"\
    ;\n    $rotated_alphabet = str_split($alphabet);\n    $rotated_alphabet2 = str_split($alphabet2);\n\
    \    $rotated_alphabet2 = array_merge($rotated_alphabet2, $rotated_alphabet);\n\
    \    $rotated_alphabet2 = array_slice($rotated_alphabet2, 0, -2);\n    $encrypted\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $encrypted .= $alphabet2[$rotated_alphabet2[strlen($rotated_alphabet2)\
    \ - strrpos(strrev($s), $s[$i]) - 1]];\n    }\n    return $encrypted;\n}\necho\
    \ encrypt('asdfghjkl');\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI used this in my\
    \ project and I am getting error when using the alphabet2.\n<|/ c |>\n<| c |>\n\
    Please help me out with this http://stackoverflow.com/questions/43487092/encrypt-decrypt-in-php-with-alphabets\n\
    <|/ c |>\n<| c |>\nI have added the new code, but there is a problem with it,\
    \ it is not working\n<|/ c |>\n<| a tags=algorithm,encryption,php,string |>\n\
    <code>\n<?php\n\n/*\n * Encrypts a string\n * \n * $string - the string to encrypt\n\
    \ * $alphabet - an array of the alphabet to rotate the string by\n * $count -\
    \ the number of places the alphabet rotates by\n * $output - array to hold the\
    \ encrypted string\n * \n * $output[0] - the encrypted string \n */\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr4hiqc1m.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $key = strlen($alphabet);\n  $i = 0;\n  $result = '';\n  while ($i < strlen($s))\
    \ {\n    $result = $alphabet[$i & $key] . $result;\n    $i++;\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgtln0dk.php:27\n\
    Stack trace:\n#0 /tmp/tmpkgtln0dk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkgtln0dk.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $strlen = strlen($s);\n    $rotation = floor($strlen\
    \ / 2);\n    $rotate = $strlen - $rotation - 1;\n    $alphabet = str_repeat($alphabet,\
    \ $rotation);\n    $alphabet = str_replace($alphabet, $alphabet[$rotate], $alphabet);\n\
    \    return substr($s, 0, $rotation) . $alphabet . substr($s, $rotation + 1);\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8n_hf9o0.php:26\n\
    Stack trace:\n#0 /tmp/tmp8n_hf9o0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8n_hf9o0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
