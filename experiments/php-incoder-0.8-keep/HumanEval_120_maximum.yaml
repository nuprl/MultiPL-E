name: HumanEval_120_maximum
language: php
prompt: "<?php\n// Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
  \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
  // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr\
  \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
  \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
  \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
  \ $k) {\n"
tests: "function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2)\
  \ !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20,\
  \ 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0,\
  \ 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10,\
  \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2,\
  \ 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    if ($k > count($arr)) return array(0);\n\n    $res = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $pos = $i;\n        $pos = $i < $k\
    \ ? $i : $i;\n        $pos = $i < $k ? $i : $i;\n        foreach ($arr as $key\
    \ => $val) {\n            if ($val > $arr[$pos]) {\n                $pos = $key;\n\
    \            }\n        }\n\n        $res[$i] = $arr[$pos];\n    }\n\n    return\
    \ $res;\n}\n", "    $result = [];\n    foreach ($arr as $value) {\n        if\
    \ (count($result) == $k) {\n            $result[] = $value;\n        }\n     \
    \   else {\n            if ($value > max($result)) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks a lot sir. Your code works well and I learned\
    \ something new from your code. Thank you very much sir. I think my problem is\
    \ solved.\n<|/ c |>\n<| a tags=php,arrays,algorithm,sorting,max |>\nI see two\
    \ solutions here. \n1) Solution 1: use array_filter by passing a callback function\
    \ as the last argument to find all elements that match your condition. \n<code>",
  "    $arr = sort($arr);\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $result[] = $arr[$i];\n    }\n    return $result;\n}\n", "    $i = 0;\n\
    \    $max_arr = [];\n    while($i < $k) {\n        $max_arr[] = $arr[$i];\n  \
    \      $i++;\n    }\n    $max_arr = array_reverse($max_arr);\n    for($i = $k;\
    \ $i >= 0; $i--) {\n        $max_arr[] = $arr[$i];\n    }\n    return $max_arr;\n\
    }\n", "    $max = $tmp = [];\n    for ($i = 0; $i < $k; $i++) {\n        $tmp[]\
    \ = $arr[$i];\n    }\n    sort($tmp);\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $max[$i] = $tmp[$i];\n    }\n    return $max;\n}\n", "  $res = array();\n\
    \  for ($i = 0; $i < $k; $i++) {\n    $res = max($res, array_shift($arr));\n \
    \ }\n  return $res;\n}\n", "    $result = [];\n    $stack = [];\n    foreach ($arr\
    \ as $item) {\n        if ($item < 0) {\n            $stack[] = $item;\n     \
    \   } else {\n            if (count($stack) == 0) {\n                $result[]\
    \ = $item;\n            } else {\n                $max = max($stack);\n      \
    \          $stack = [$max];\n                while ($stack && count($stack) <\
    \ $k) {\n                    $tmp = $stack;\n                    $stack = [];\n\
    \                    foreach ($tmp as $item) {\n                        if ($item\
    \ < $max) {\n                            $stack[] = $item;\n                 \
    \       }\n                    }\n                }\n                $result[]\
    \ = $max;\n            }\n        }\n    }\n    return $result;\n}\n", "    if($k\
    \ === 1) {\n        return $arr;\n    }\n    if($k > count($arr)) {\n        $k\
    \ = count($arr);\n    }\n    sort($arr);\n    $result = [];\n    $max = $arr[0];\n\
    \    for($i = 1; $i < $k; $i++) {\n        if($arr[$i] >= $max) {\n          \
    \  $result[] = $max;\n        }\n        $max = $arr[$i];\n    }\n    $result[]\
    \ = $max;\n    return $result;\n}", "    $result = array();\n    $stack = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        if ($stack == array($arr[count($stack)\
    \ - 1])) {\n            $stack[] = $arr[$i];\n        } else {\n            $result[]\
    \ = $stack[count($stack) - 1];\n            $stack[] = $arr[$i];\n        }\n\
    \    }\n    return array_slice($result, 0, $k);\n}\n", "    sort($arr);\n    $result\
    \ = [];\n\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n\
    \    }\n\n    return $result;\n}\n", "    $res = [];\n    array_walk($arr, function(&$v)\
    \ { $v = (int)$v; });\n    array_multisort($arr, SORT_DESC, $res);\n    return\
    \ array_slice($res, 0, $k);\n}\n", "    $n = count($arr);\n    $max = array_shift($arr);\n\
    \    \n    for($i = 0; $i < $k; $i++) {\n        $max = $arr[$i] > $max ? $arr[$i]\
    \ : $max;\n    }\n    \n    for($i = 0; $i < $n; $i++) {\n        $arr[$i] = $arr[$i]\
    \ > $max ? $arr[$i] : $max;\n    }\n    \n    return $arr;\n}\n\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 3));\n\
    var_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 5));\nvar_dump(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 2));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 4));\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 3));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 5));\n\
    var_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 2));\nvar_dump(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 4));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 3));\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 5));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 2));\n\
    var_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 4));\nvar_dump(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 3));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 5));\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 2));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 4));\n\
    var_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 3));\nvar_dump(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 5));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 2));\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 4));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 3));\n\
    var_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 5));\nvar_dump(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 2));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 4));\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 3));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 5));\n\
    var_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 2));\nvar_dump(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 4));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 3));\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 5));\nvar_dump(maximum([-3, 2, 1, 2, -1, -2, 1], 2));\n\
    var_dump(maximum([-3, 2, 1, 2, ", "    sort($arr);\n    $len = count($arr);\n\
    \    for($i = 0; $i < $k; $i++) {\n        $max = end($arr);\n        for($j =\
    \ $i; $j < $len; $j++) {\n            if($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n            }\n        }\n        $arr[$i] = $max;\n    }\n   \
    \ return $arr;\n}\n", "    $result = [];\n    foreach ($arr as $k => $value) {\n\
    \        $result[] = $value;\n        if (count($result) > $k) {\n           \
    \ array_pop($result);\n        }\n    }\n    return $result;\n}\n", "    sort($arr);\n\
    \    return array_slice($arr, 0, $k);\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n\nclass maxArray\n{\n    /**\n     * int[] $arr\n     * int\
    \    $k\n     *\n     * int[]\n     */\n    public static function getMax($arr,\
    \ $k)\n    {\n        // get count of array items\n        $count = count($arr);\n\
    \n        // create empty array\n        $result = [];\n\n        // set index\
    \ for array items\n        $index = 0;\n\n        // loop while array count is\
    \ less then k\n        while ($index < $k) {\n            // get max value from\
    \ array\n            $max = max($arr);\n\n            // append max value to array\n\
    \            $result[] = $max;\n\n            // set new index to old index +\
    \ 1\n            $index++;\n        }\n\n        return $result;\n    }\n\n  \
    \  /**\n     * int[] $arr\n     * int    $k\n     *\n     * int[]\n     */\n \
    \   public static function getMin($arr, $k)\n    {\n        // get count of array\
    \ items\n        $count = count($arr);\n\n        // create empty array\n    \
    \    $result = [];\n\n        // set index for array items\n        $index = 0;\n\
    \n        // loop while array count is less then k\n        while ($index < $k)\
    \ {\n            // get min value from array\n            $min = min($arr);\n\n\
    \            // append min value to array\n            $result[] = $min;\n\n \
    \           // set new index to old index + 1\n            $index++;\n       \
    \ }\n\n        return $result;\n    }\n}\n</code>\n<|/ a tags=php |>\n<| a |>\n\
    <code>", "    $arr = array_filter($arr, 'is_numeric');\n    $k = array_sum(array_slice($arr,\
    \ $k));\n    usort($arr, function ($a, $b) {\n        $diff = $b - $a;\n     \
    \   return $diff !== 0 ? $diff : 0;\n    });\n    return array_slice($arr, 0,\
    \ $k);\n}\n</code>\n<|/ a dscore=3 tags=php,arrays |>\n<| c |>\nThe second example\
    \ doesn't work with negative numbers, e.g. `[4, -4, 4]` returns `Array`, not `[4,\
    \ 4]` as expected by OP.\n<|/ c |>\n<| c |>\n: It doesn't work if there are two\
    \ consecutive numbers with the same maximum. The OP explicitly stated that `k`\
    \ was at most `len(arr)`.\n<|/ c |>\n<| c |>\nOh, I missed that, thanks. My bad.\n\
    <|/ c |>\n<| a dscore=3 tags=php,arrays |>\nYou can use array_multisort() with\
    \ custom comparison function\n<code>", "    // write your code here\n    $max\
    \ = $arr[0];\n    for ($i = 1; $i < $k; $i++) {\n        if($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=1 |>\n<| a |>\nI hope this helps someone else too.\
    \ I used this as the basis for a recursive solution (which I then turned into\
    \ a function), so I can add additional sorting logic to it if needed.\n<code>\n\
    <?php\n$arr = array(3, 8, 5, 9, 6, 4, 2, 1);\n\n$maxK = max($arr);\n\necho \"\
    Maximum value is \".$maxK.\"\\n\\n\";\n\n$max = 0;\n$k = 0;\n", "    $maxArr =\
    \ array();\n    for ($i = 0; $i < $k; $i++) {\n        $maxArr[] = $arr[$i];\n\
    \    }\n    $maxArr = array_sort($maxArr);\n    $maxArr[$k] = max($maxArr[$k]);\n\
    \    return $maxArr;\n}", "    $temp = array_fill(0, $k, 0);\n    $max = array_fill(0,\
    \ $k, 0);\n    \n    foreach($arr as $key => $value) {\n        if ($value >=\
    \ 0) {\n            $temp[$value]++;\n            $max[$value] = max($value+$temp[$value],\
    \ $max[$value]);\n        }\n    }\n    \n    foreach($temp as $key => $value)\
    \ {\n        $arr[$key] = $key;\n    }\n    \n    return array_slice($arr, 0,\
    \ $k);\n}", "    if (count($arr) === 0 || $k === 0) {\n        return [];\n  \
    \  }\n    \n    $ret = array_fill(0, $k, 0);\n    \n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        for ($j = 0; $j < $k; $j++) {\n            if ($ret[$j] < $arr[$i])\
    \ {\n                $ret[$j] = $arr[$i];\n            }\n        }\n    }\n \
    \   \n    return $ret;\n}\n</cell>\n<text>\nThe test case\n\n</text>\n<cell>",
  "    $result = [];\n    $count = [];\n    foreach ($arr as $key => $value) {\n \
    \       if (!isset($count[$value])) {\n            $count[$value] = 0;\n     \
    \   }\n        $count[$value]++;\n    }\n\n    $result = [];\n    $temp = 0;\n\
    \    foreach ($count as $key => $value) {\n        if ($value > $k) {\n      \
    \      continue;\n        }\n        while ($value === $k) {\n            $result[]\
    \ = $temp;\n            $temp = 0;\n            foreach ($count as $key => $value)\
    \ {\n                $temp++;\n                if ($value !== $k) {\n        \
    \            $result[] = $value;\n                }\n            }\n        }\n\
    \        $result[] = $value;\n    }\n\n    return $result;\n}\n\n$arr = [4, -4,\
    \ 4];\n$k = 3;\nvar_dump(maximum($arr, $k));\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    var_dump(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nvar_dump(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nvar_dump(maximum($arr, $k));\n\
    \n$arr = [1, 2, 3, 4];\n$k = 1;\nvar_dump(maximum($arr, $k));\n\n$arr = [1, 2,\
    \ 3, 4];\n$k = 1;\nvar_dump(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4];\n$k =\
    \ 1;\nvar_dump(maximum($arr, $k));\n</code>\n<|/ a tags=arrays,algorithm,php |>\n\
    <| c |>\nNice. Thanks.\n<|/ c |>\n<| a |>\nYou can do this with recursion:\n<code>",
  "    $n = count($arr);\n    $temp = [];\n    $largest = 0;\n    \n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $temp[$i] = $arr[$i];\n        if ($i == 0) {\n\
    \            $largest = $arr[$i];\n        } else {\n            if ($arr[$i]\
    \ > $largest) {\n                $largest = $arr[$i];\n            }\n       \
    \ }\n    }\n    \n    for ($i = 0; $i < $k; $i++) {\n        $temp[$i] = $largest;\n\
    \    }\n    \n    for ($i = 0; $i < $n; $i++) {\n        $arr[$i] = $temp[$i];\n\
    \    }\n    \n    return $arr;\n}\n", "    $result = array();\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $maximum = max($arr);\n        array_push($result,\
    \ $maximum);\n        array_splice($arr, 0, 1);\n    }\n    return $result;\n\
    }\n", "    if ($k > count($arr)) {\n        $k = count($arr);\n    }\n\n    $result\
    \ = array();\n\n    $arr = array_reverse($arr, true);\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $result[] = $arr[$i];\n    }\n    $result = array_reverse($result,\
    \ true);\n\n    return $result;\n}", "    $m = 1;\n    $result = array();\n  \
    \  foreach ($arr as $num) {\n        $m = max($num, $m);\n        if ($m > $k)\
    \ break;\n        $result[] = $num;\n    }\n    return $result;\n}", "    $res\
    \ = array();\n    $arr = sort($arr);\n    $len = count($arr);\n    for($i = 0;\
    \ $i < $k; $i++) {\n        $k = $len;\n        for($j = 0; $j < $len; $j++) {\n\
    \            if ($arr[$j] > $arr[$j + 1]) {\n                $k = $j;\n      \
    \      }\n        }\n        $res[] = $arr[$k];\n    }\n    return $res;\n}\n\
    </code>\n<|/ a tags=arrays,sorting,php |>\n<| a dscore=0 tags=arrays,sorting,php\
    \ |>\nThis is a pretty old post, but I wanted to share my solution, especially\
    \ because I couldn't find a good one elsewhere.\nI needed the max value in a list\
    \ with a variable number of elements. The solution I came up with is this:\n<code>\n\
    /**\n * Return max value in given list using quicksort method\n * int[] $list\n\
    \ * int $k\n * int\n */\npublic function maxValue($list, $k) {\n    $result =\
    \ [];\n    $count = $this->partition($list, 0, count($list) - 1, $result);\n \
    \   if ($k > $count) {\n        return $list[$k];\n    } else {\n        return\
    \ $list[$count];\n    }\n}\n\n/**\n * Quicksort partitioner\n * int[] $list\n\
    \ * int $left\n * int $right\n * int[] $result\n */\nprivate function partition($list,\
    \ $left, $right, $result) {\n    $pivot = $list[($left + $right) / 2];\n\n   \
    \ while($left <= $right) {\n        while($left <= $right && $list[$left] < $pivot)\
    \ {\n            $left++;\n        }\n        while($left <= $right && $list[$right]\
    \ >= $pivot) {\n            $right--;\n        }\n        if($left <= $right)\
    \ {\n            $result[] = $list[$left];\n            $result[] = $list[$right];\n\
    \            $left++;\n            $right--;\n        }\n    }\n    $result[]\
    \ = $list[$left];\n    $result[] = $list[$right];\n\n    return $left;\n}\n</code>\n\
    <|/ a |>\n<| a |>\nThis solution also works for array having duplicate values\n\
    <code>\n$values = [1,2,5,7,3,8,1,2,1,7,3,5,3];\n$result = [];\nforeach ($values\
    \ as $key => $value) {\n  if($result[$value] === 0) {\n    $result[$value] = 1;\n\
    \  }\n  elseif($result[$value] == 1) {\n    $result[$value] = 2;\n  }", "    $result\
    \ = [];\n    $len = count($arr);\n    for($i = 0; $i < $len; $i++){\n        $result[$i]\
    \ = $arr[$i];\n    }\n    \n    array_multisort($result, SORT_DESC, $arr);\n\n\
    \    return array_slice($arr, 0, $k);\n}\n\n$result = maximum($arr, $k);\nprint_r($result);\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nThis one is similar to one in accepted answer,\
    \ but uses only PHP's built-in functions:\n<code>", "    $result = [];\n    $len\
    \ = count($arr);\n\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n\
    \n        for ($j = $i; $j < $len; $j++) {\n            if ($max < $arr[$j]) {\n\
    \                $max = $arr[$j];\n            }\n        }\n        $result[]\
    \ = $max;\n    }\n\n    return $result;\n}\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nvar_dump(maximum($arr, $k));", "    $sorted_arr = array_slice($arr, 0,\
    \ $k);\n    $sorted_arr = array_slice($sorted_arr, 0, $k);\n    sort($sorted_arr);\n\
    \    return $sorted_arr;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\nThis\
    \ should work:\n<code>", "    $largest = array();\n    for ($i=0; $i<$k; $i++)\
    \ {\n        for ($j=0; $j<count($arr); $j++) {\n            if ($arr[$j] > $largest[$i])\
    \ {\n                $largest[$i] = $arr[$j];\n            }\n        }\n    }\n\
    \    return $largest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n\
    <code>\n<?php\n\n$arr = [1,2,3,4,5,6,7,8,9,10];\n$k = 3;\n\n$largest = $arr;\n\
    $kMax = count($arr) - $k;\n\nfor ($i = 0; $i < $kMax; $i++) {\n    $largest =\
    \ maximum($largest);\n}\n", "    $res = [];\n    if ($k == 1) {\n        $res\
    \ = $arr;\n        return $res;\n    }\n    $max = max($arr);\n    foreach ($arr\
    \ as $item) {\n        if ($item > $max) {\n            $max = $item;\n      \
    \  }\n    }\n    $len = count($arr);\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $res[] = $max;\n    }\n    return array_merge($res, $arr);\n}\n\n$arr = [-3,\
    \ -4, 5];\nvar_dump(maximum($arr, 1));\nvar_dump(maximum($arr, 1));\nvar_dump(maximum($arr,\
    \ 2));\nvar_dump(maximum($arr, 3));\nvar_dump(maximum($arr, 4));\nvar_dump(maximum($arr,\
    \ 5));\nvar_dump(maximum($arr, 6));\nvar_dump(maximum($arr, 7));\nvar_dump(maximum($arr,\
    \ 8));\nvar_dump(maximum($arr, 9));\nvar_dump(maximum($arr, 10));\nvar_dump(maximum($arr,\
    \ 11));\nvar_dump(maximum($arr, 12));\nvar_dump(maximum($arr, 13));\nvar_dump(maximum($arr,\
    \ 14));\nvar_dump(maximum($arr, 15));\nvar_dump(maximum($arr, 16));\nvar_dump(maximum($arr,\
    \ 17));\nvar_dump(maximum($arr, 18));\nvar_dump(maximum($arr, 19));\nvar_dump(maximum($arr,\
    \ 20));\nvar_dump(maximum($arr, 21));\nvar_dump(maximum($arr, 22));\nvar_dump(maximum($arr,\
    \ 23));\nvar_dump(maximum($arr, 24));\nvar_dump(maximum($arr, 25));\nvar_dump(maximum($arr,\
    \ 26));\nvar_dump(maximum($arr, 27));\nvar_dump(maximum($arr, 28));\nvar_dump(maximum($arr,\
    \ 29));\nvar_dump(maximum($arr, 30));\nvar_dump(maximum($arr, 31));\nvar_dump(maximum($arr,\
    \ 32));\nvar_dump(maximum($arr, 33));\nvar_dump(maximum($arr, 34));\nvar_dump(maximum($arr,\
    \ 35));\nvar_dump(maximum($arr, 36));\nvar_dump(maximum($arr, 37));\nvar_dump(maximum($arr,\
    \ 38));\nvar_dump(maximum($arr, 39));\nvar_dump(maximum($arr, 40));\nvar_dump(maximum($arr,\
    \ 41));\nvar_dump(maximum($arr, 42));\nvar_dump(maximum($arr, 43));\nvar_dump(maximum($arr,\
    \ 44));\nvar_dump(maximum($arr, 45));\nvar_dump(maximum($arr, 46));\nvar_dump(maximum($arr,\
    \ 47));\nvar_dump(maximum($arr, 48));\nvar_dump(maximum($arr, 49));\nvar_dump(maximum($arr,\
    \ 50));\nvar_", "    $arr = array_reverse($arr);\n    sort($arr);\n    $max =\
    \ 0;\n    for ($i = 0; $i < $k; $i++) {\n        if ($arr[$i] >= $max) {\n   \
    \         $max = $arr[$i];\n        }\n    }\n    return $max;\n}\n", "    if\
    \ ($k <= 0 || $k > count($arr))\n        return array();\n    $max_arr = array();\n\
    \    $max = array();\n    $max_i = -1;\n    foreach ($arr as $key => $value) {\n\
    \        if ($key == $max_i) {\n            $max_arr[] = $value;\n           \
    \ $max[] = $value;\n        } else {\n            if ($k <= count($max_arr))\n\
    \                $max_arr[] = $value;\n        }\n    }\n    return $max_arr;\n\
    }", "    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 1; $i < $k; $i++)\
    \ {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n          \
    \  $maxIndex = $i;\n        }\n    }\n    return $max;\n}\n", "    $result = [];\n\
    \    $count = 0;\n    foreach ($arr as $key => $value) {\n        $count++;\n\
    \        if ($count >= $k) {\n            $count = 0;\n            $result[$key]\
    \ = $value;\n        }\n    }\n    return $result;\n}", "    sort($arr);\n   \
    \ $max_list = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max_list[]\
    \ = $arr[$i];\n    }\n    return $max_list;\n}\n</code>\n<|/ a tags=arrays,sorting,php\
    \ |>\n<| c |>\nThank you for giving me a solution that is similar to mine. I was\
    \ trying to figure this one out for like an hour before I posted this question.\
    \ Your solution makes it so much easier. Now I know what to do. Thanks!\n<|/ c\
    \ |>\n<| c |>\nThis is amazing and works beautifully. I was trying to figure out\
    \ how to get it working in Javascript which is not the language I am working in\
    \ but this answer was way easier than I thought. I wish I could upvote this twice.\n\
    <|/ c |>\n<| c |>\nthanks for this solution. It helped me with my problem of finding\
    \ the longest subarray of increasing numbers. I've added my Javascript solution\
    \ based on this answer to this question.\n<|/ c |>\n<| a tags=arrays,sorting,php\
    \ dscore=3 |>\nThis code works for me\n<code>", "    $result = [];\n\n    $len\
    \ = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $j = $i + 1;\n\
    \        for ($j; $j < $len && $j < $k; $j++) {\n            if ($arr[$i] > $arr[$j])\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n\n        $result[]\
    \ = $arr[$i];\n    }\n\n    return $result;\n}\n", "    $arr = sort($arr);\n \
    \   return array_slice($arr, 0, $k);\n}", "    // write your code here\n    return\
    \ $res;\n}\n", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ $result[] = max($arr);\n        $arr = array_diff($arr, [max($arr)], true);\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n\n    // Get the k largest\
    \ elements from the array\n    for ($i = 0; $i < $k; $i++) {\n        // Find\
    \ the current element that is larger\n        $current = $arr[0];\n        for\
    \ ($j = 1; $j < $k; $j++) {\n            if ($arr[$j] < $current) {\n        \
    \        $current = $arr[$j];\n            }\n        }\n\n        // Add current\
    \ to our final list\n        $result[] = $current;\n\n        // Remove it from\
    \ the original array\n        unset($arr[0]);\n    }\n\n    // Return our final\
    \ list\n    return $result;\n}", "    if ($k > count($arr)) {\n        return\
    \ array(0);\n    }\n\n    $arr = array_slice($arr, 0, $k);\n    usort($arr, function\
    \ ($a, $b) {\n        return $a > $b;\n    });\n\n    return $arr;\n}\n", "  \
    \  if ($k < 0) return $arr;\n    $result = array();\n    $n = count($arr);\n \
    \   $result = array_slice($arr, 0, $k);\n    sort($result);\n    $result = array_slice($result,\
    \ 0, $k);\n    return $result;\n}\n", "    if ($k > count($arr) || $k > count($arr)\
    \ + 1) {\n        return [];\n    }\n    sort($arr);\n    $top = [];\n    $k =\
    \ 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] == $arr[$i])\
    \ {\n            $k++;\n        } else {\n            $top[] = $arr[$i];\n   \
    \         $k = 1;\n        }\n        if ($k >= $k) {\n            array_pop($top);\n\
    \            $k = 0;\n        }\n    }\n    return $top;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nAh ha! Thank you so much! I couldn't figure out how to keep track\
    \ of my k elements and I forgot that I could use \"sort()\"\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    $arr = array_reverse($arr);\n    sort($arr);\n    $res = array();\n\
    \    for($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    return\
    \ $res;\n}\n</code>\n<|/ a tags=php,algorithm dscore=0 |>\n<| a tags=php,algorithm\
    \ |>\n<code>", "    $i = 0;\n    $n = count($arr);\n    $result = array();\n \
    \   while ($i < $n) {\n        $result[] = $arr[$i];\n        $i += $k;\n    }\n\
    \    return $result;\n}\n", "    $sorted = array();\n    for($i = 0; $i < $k;\
    \ $i++) {\n        if($arr[$i] < 0) {\n            array_push($sorted, -$arr[$i]);\n\
    \        } else {\n            array_push($sorted, $arr[$i]);\n        }\n   \
    \ }\n    sort($sorted);\n    return $sorted;\n}\n", "    $a = array_count_values($arr);\n\
    \    arsort($a);\n    $max = array_slice($a, -$k);\n    return $max;\n}\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\n$max = maximum($arr, $k);\nprint_r($max);\n", "  $max_arr\
    \ = [];\n  for ($i = 0; $i < $k; $i++) {\n    $max_arr[] = $arr[$i];\n  }\n  return\
    \ $max_arr;\n}\n", "    sort($arr);\n    $max = NULL;\n    for ($i = 0; $i < $k;\
    \ ++$i) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n    \
    \    }\n    }\n    return $max;\n}\n\n/**\n * Find kth largest element in an unsorted\
    \ array\n *\n * @complexity O(log(k)) \n *\n * @param $arr array\n * @param $k\
    \ integer\n * @return integer\n */", "    sort($arr);\n    $result = [];\n   \
    \ $len = count($arr);\n    $count = 0;\n    \n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max_value = max($arr);\n        $count++;\n        $result[] = $max_value;\n\
    \        $arr = [$max_value] + array_diff($arr, [$max_value]);\n    }\n    return\
    \ $result;\n}", "    $counter = array();\n    $maxValue = $arr[0];\n    foreach\
    \ ($arr as $val) {\n        if ($val > $maxValue) {\n            $maxValue = $val;\n\
    \        }\n        $counter[$val]++;\n    }\n\n    $maxValues = array();\n  \
    \  foreach ($counter as $val => $count) {\n        if ($count >= $k) {\n     \
    \       $maxValues[] = $val;\n        }\n    }\n    return $maxValues;\n}\n",
  "    $max_heap = new Heap(sizeof($arr));\n    foreach ($arr as $val) {\n       \
    \ $max_heap->add($val);\n    }\n    $result = [];\n    while ($max_heap->isEmpty()\
    \ === false) {\n        $result[] = $max_heap->extractMax();\n    }\n    return\
    \ array_reverse($result);\n}\n\nclass Heap {\n    private $arr;\n    private $size;\n\
    \n    public function __construct($arr_size) {\n        $this->arr = array();\n\
    \        $this->size = $arr_size;\n    }\n\n    public function add($key) {\n\
    \        $this->arr[$this->size] = $key;\n        $this->size++;\n    }\n\n  \
    \  public function isEmpty() {\n        return $this->size === 0;\n    }\n\n \
    \   public function extractMax() {\n        $max_val = -999999999;\n        $key\
    \ = 0;\n        for ($i = $this->size-1; $i >= 0; $i--) {\n            if ($this->arr[$i]\
    \ > $max_val) {\n                $max_val = $this->arr[$i];\n                $key\
    \ = $i;\n            }\n        }\n        unset($this->arr[$key]);\n        $this->size--;\n\
    \        return $max_val;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nThank you, but\
    \ I couldn't understand the concept of $max_heap class. So I used a simple heap\
    \ in php which I posted as an answer.\n<|/ c |>\n<| c |>\n`The elements in the\
    \ array will be in the range of [-1000, 1000]` - this is not a requirement.  You\
    \ can use this heap implementation to hold any numbers (negative or positive)\
    \ and it will work just fine.  All the code is doing is building the heap, extracting\
    \ the max k numbers, then reversing the result.  You can use this heap implementation\
    \ to hold any type of number.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    $maximum\
    \ = array();\n    \n    foreach ($arr as $key => $value) {\n        if ($key !=\
    \ 0 && $key > $maximum[$key - 1]) {\n            $maximum[$key - 1] = $value;\n\
    \        }\n    }\n    \n    return array_slice($maximum, 0, $k);\n}\n", "   \
    \ if($k > count($arr)){\n        return $arr;\n    }\n    $sortedArr = sort($arr);\n\
    \    $res = array_slice($sortedArr, $k);\n    return $res;\n}\n$arr = array(3,\
    \ -4, 5);\n$k = 3;\necho \"Maximum k numbers: \" . join(\" \", maximum($arr, $k));",
  "    sort($arr);\n    return array_slice($arr, 0, $k);\n}\n", "    $arr = array_reverse($arr);\n\
    \    $max = array_pop($arr);\n    \n    for ($i = 1; $i < $k; $i++) {\n      \
    \  $max = max($max, $arr[$i-1]);\n    }\n    \n    return $max;\n}\n", "    //\
    \ write your code here\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[$key] = $value;\n        if ($key == 0) {\n            continue;\n\
    \        }\n        $tmp = [];\n        for ($i = $k; $i >= 0; $i--) {\n     \
    \       $tmp[] = $result[array_key_first($result)];\n        }\n        $tmp[]\
    \ = $result[array_key_last($result)];\n        for ($i = 0; $i < $k; $i++) {\n\
    \            $result[$i] = $tmp[$i];\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,sorting dscore=0 |>\n<| a dscore=0 |>\nI wrote this\
    \ algorithm that works perfectly for the above problem (although I cannot guarantee\
    \ it will work with other problems). Since this question is still open, I'm adding\
    \ my solution in case it helps someone.\nFirst of all, I used a custom sort algorithm\
    \ that sorts the array in descending order instead of ascending order. Then I\
    \ start a loop to count the number of swaps. If the number of swaps is even, then\
    \ the array is already sorted and I return that array. If the number of swaps\
    \ is odd, then I swap two elements and I subtract 1 from the loop variable (which\
    \ basically removes one element from the array). After I subtract 1 I continue\
    \ the loop until I reach the final step where I return the array (because if there\
    \ are no swaps, I return the array I already sorted).\nThe below code is an example:\n\
    <code>\n<?php\n", "    $result = [];\n    $length = count($arr);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $result[$i] = max($arr[$i], $result[$i]);\n\
    \    }\n    return array_slice($result, 0, $k);\n}\n", "    // write your code\
    \ here\n    sort($arr);\n    $result = [];\n    for($i=0; $i < $k; $i++) {\n \
    \       $result[] = $arr[$i];\n    }\n    return $result;\n}\n\n/**\n * Given\
    \ an integer array, find the maximum repeating element in array.\n * \n * Link:\
    \ https://leetcode.com/problems/find-the-maximum-repeating-element-in-an-array/\n\
    \ * \n * @param int[] nums\n * @param int k\n * @return int\n */", "    $max =\
    \ array();\n    for ($i = 0; $i < $k; $i++) {\n        if ($i == 0) {\n      \
    \      $max[$i] = $arr[$i];\n        } else {\n            $max[$i] = max($max[$i],\
    \ $arr[$i]);\n        }\n    }\n    return $max;\n}\n", "    // write your code\
    \ here\n    foreach ($arr as $value) {\n        if ($k <= 0) {\n            break;\n\
    \        }\n        $new_array = array();\n        $i = 0;\n        foreach ($new_array\
    \ as $key => $val) {\n            if ($val > $value) {\n                $i++;\n\
    \                if ($i == $k) {\n                    $new_array[] = $value;\n\
    \                    $i = 0;\n                }\n            } else {\n      \
    \          $new_array[] = $value;\n            }\n        }\n        $k--;\n \
    \   }\n    return $new_array;\n}\n\nprint_r(maximum($arr, 1));\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=algorithm,php,arrays |>\nThis problem is more of a knapsack\
    \ problem where we try to fill a bag of capacity $k with the value $v, if we can\
    \ take item at index $i of array $arr.\nThe array $arr will be in sorted order\
    \ and $k <= $v.\nThe formula for this problem is given below\n<code>\n(Total number\
    \ of elements in bag)-((Total number of elements in bag) x $k) \n</code>\nWhere\
    \ $k is capacity of the bag.\nWe can solve this problem using dynamic programming.\n\
    <code>\n function knapsack($arr, $k) {\n    \n    if ($k > $arr[0]) {\n      \
    \  return 0;\n    }\n    \n    $dp = [];\n    \n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $dp[$i][$i] = 0;\n    }\n    \n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        for ($j = $i; $j < count($arr); $j++) {\n            if ($arr[$i]\
    \ + $arr[$j] <= $k) {\n                $dp[$i][$j] = $dp[$j][$i] + 1;\n      \
    \      }\n        }\n    }\n    \n    return $dp[count($arr)][count($arr) - 1];\n\
    }\n\necho knapsack([-3, -4, 5], 3);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max_num = 0;\n        foreach ($arr as $item) {\n  \
    \          if ($item > $max_num) {\n                $max_num = $item;\n      \
    \      }\n        }\n        $result[] = $max_num;\n    }\n    return $result;\n\
    }\n", "    sort($arr);\n    $max_arr = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max_arr[] = $arr[$i];\n    }\n    return $max_arr;\n}\n", "    $max\
    \ = $arr[0];\n    for ($i = 1; $i < $k; $i++) {\n        $cur = $arr[($i + $k\
    \ - 1) % $k];\n        if ($cur > $max) {\n            $max = $cur;\n        }\n\
    \    }\n    return $max;\n}\n", "    return array_slice($arr, 0, $k);\n}\n", " \
    \   sort($arr);\n    $ret = [];\n    foreach ($arr as $key => $value) {\n    \
    \    $ret[$key] = $value;\n        if (count($ret) == $k) {\n            break;\n\
    \        }\n    }\n    return $ret;\n}\n", "    $result = array();\n    $counter\
    \ = array();\n    $temp = array();\n    $temp_array = array();\n    for($i=0;\
    \ $i<$k; $i++) {\n        $counter[$i] = count($temp);\n    }\n    sort($arr);\n\
    \    for($i=0; $i<count($arr); $i++) {\n        if($arr[$i] == $counter[0]) {\n\
    \            $result[] = $arr[$i];\n            for($j=1; $j<$counter[$i]; $j++)\
    \ {\n                $counter[$j] = 0;\n            }\n        } else {\n    \
    \        $temp[] = $arr[$i];\n            $temp_array[] = $arr[$i];\n        \
    \    $counter[$i] = count($temp);\n            for($j=0; $j<$counter[$i]; $j++)\
    \ {\n                if($arr[$j] == $temp[$j]) {\n                    $counter[$j]++;\n\
    \                }\n            }\n        }\n    }\n    return $result;\n}\n",
  "    $max_count = 0;\n    $max_values = [];\n    $max_value = [PHP_INT_MAX];\n \
    \   foreach ($arr as $key => $value) {\n        $count = 0;\n        $tmp_count\
    \ = 0;\n        $tmp_max = -PHP_INT_MAX;\n        $tmp_val = -PHP_INT_MAX;\n \
    \       foreach ($max_value as $k => $v) {\n            if ($k == $key) {\n  \
    \              $count++;\n                if ($v > $tmp_val) {\n             \
    \       $tmp_count = $count;\n                    $tmp_max = $v;\n           \
    \         $tmp_val = $k;\n                }\n                if ($count == $k)\
    \ {\n                    $max_count = $count;\n                    $max_values[$key]\
    \ = $tmp_max;\n                }\n            }\n        }\n    }\n    return\
    \ $max_values;\n}\n</code>\n<|/ a |>\n<| c |>\nYou don't need O(n) space to store\
    \ a single number as `-PHP_INT_MAX` - just use 1 byte as a flag\n<|/ c |>\n<|\
    \ c |>\n, Yes true. Updated the answer. Thanks!\n<|/ c |>\n<| c |>\nI don't think\
    \ it is O(n), because you are iterating through the array twice, once to count\
    \ the number of times a number has been seen, then once to find the max value\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n$data = array();\n$data = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n\
    $max = max($data);\n</code>\n<|/ a tags=arrays,php,max |>\n<| c |>\nWhat if `$data`\
    \ is empty? The max function will error out\n<|/ c |>\n<| c |>\n$max is still\
    \ 0, you just declared it wrong\n<|/ c |>\n<| a dscore=3 tags=arrays,php,max |>\n\
    You can use the following snippet:\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n",
  "    $max = [];\n    $maxK = 0;\n    foreach($arr as $key => $val) {\n        if($maxK\
    \ > 0 && $maxK > $k) {\n            break;\n        }\n        if($maxK == $k)\
    \ {\n            $max[] = $val;\n        }\n        $maxK++;\n    }\n    return\
    \ $max;\n}\n\n/**\n * LeetCode 25. Permutation II\n * \n * Given a collection\
    \ of distinct integers, return all possible permutations.\n * \n * Example 1:\n\
    \ * Input: [1,2,3]\n * Output: [\n *  \_[1,2,3], \_[2,1,3], \_[3,2,1], \_[2,3,1],\
    \ \_[1,3,2], \_[3,1,2], \_[3,2,3],\n *  \_[1,3,2], \_[1,2,3], \_[2,1,3], \_[3,2,1]\n\
    \ * ]\n * \n * Example 2:\n * Input: [2,2,3]\n * Output: [\n *  \_[2,2,3], \_\
    [2,3,2], \_[3,2,2], \_[2,3,3], \_[2,1,3], \_[3,0,2], \_[3,1,2], \n *  \_[3,1,3],\
    \ \_[3,2,0], \_[3,2,3], \_[2,0,3], \_[2,3,0], \_[2,1,0], \_[2,0,1],\n *  \_[3,0,1],\
    \ \_[3,2,0], \_[3,2,1], \_[2,1,2], \_[2,1,3], \_[3,0,2], \_[3,2,2]\n * ]\n * \n\
    \ * Example 3:\n * Input: [4,2,5,3,6,4]\n * Output: [\n *  \_[4,2,5,3,6,4], \_\
    [4,2,3,5,6,4], \_[4,2,5,6,3,4], \_[4,2,6,5,3,4], \_[4,2,6,3,4,5],\n *  \_[4,2,6,3,5,4],\
    \ \_[4,2,6,5,4,3], \_[4,2,6,4,3,5], \_[4,2,6,4,5,3], \_[4,2,6,4,3,5],\n *  \_\
    [4,2,6,3,4,5], \_[4,2,6,3,5,4], \_[4,2,6,5,4,3]\n * ]\n * \n * Example 4:\n *\
    \ Input: [2,2,2,2]\n * Output: [\n *  \_[2,2,2,2], \_[2,2,3,2], \_[2,3,2,2], \_\
    [2,3,5,2], \_[2,3,6,2], \_[2,5,3,2], \n *  \_[2,5,4,2], \_[2,5,6,2], \_[2,6,3,2],\
    \ \_[2,6,4,2], \_[2,6,5,2], \_[2,6,6,2],\n *  \_[3,", "    sort($arr);\n    $length\
    \ = sizeof($arr);\n    $count = 0;\n    $result = array();\n    for($i = 0; $i\
    \ < $k; $i++) {\n        while(count($arr) > 0) {\n            array_pop($result);\n\
    \        }\n        for($j = $i; $j < $length; $j++) {\n            if($arr[$j]\
    \ > $result[$i]) {\n                $result[$i] = $arr[$j];\n                $count++;\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    // Your code\
    \ here\n    sort($arr);\n    return array_slice($arr, 0, $k);\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,php dscore=1 |>\n<| a dscore=0 |>\n<code>", "    $result\
    \ = [];\n    $maxKey = $k - 1;\n\n    sort($arr);\n\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n        if ($key == $maxKey)\
    \ {\n            break;\n        }\n    }\n    return $result;\n}\n", "  $result\
    \ = array();\n  foreach ($arr as $item) {\n    foreach ($result as $max) {\n \
    \     if ($item > $max || $max == $item) {\n        $result = array();\n     \
    \   break;\n      }\n      else {\n        $result[] = $max;\n      }\n    }\n\
    \    $result[] = $item;\n  }\n  return array_slice($result, 0, $k);\n}\n", " \
    \   $sort = array();\n    foreach($arr as $key => $value) {\n        array_push($sort,\
    \ $value);\n    }\n    usort($sort, \"maximum\");\n    return array_slice($sort,\
    \ 0, $k);\n}\n", "    $arr = $arr->sort();\n    $max_arr = array_slice($arr, 0,\
    \ $k);\n    return $max_arr;\n}", "    if ($k > count($arr)) {\n        return\
    \ array();\n    }\n    $max_arr = array();\n    foreach ($arr as $key => $val)\
    \ {\n        if ($val > 0) {\n            $max_arr[] = $val;\n            unset($arr[$key]);\n\
    \            $k--;\n        }\n        if ($k == 0) {\n            break;\n  \
    \      }\n    }\n    return $max_arr;\n}\n", "    $result = [];\n    foreach ($arr\
    \ as $val) {\n        array_push($result, $val);\n        if (count($result) >=\
    \ $k) {\n            array_pop($result);\n        }\n    }\n    return $result;\n\
    }\n", "    return array_slice($arr, 0, $k);\n}\n", "    \n    // initialize result\
    \ array\n    $result = array();\n    \n    // loop through the input array arr\n\
    \    foreach ($arr as $v) {\n        // push current element to result array\n\
    \        $result[] = $v;\n        \n        // if the result array contains more\
    \ than k (k is k's value)\n        if (count($result) > $k) {\n            //\
    \ pop all elements\n            array_pop($result);\n        }\n    }\n    \n\
    \    // return the result array\n    return $result;\n}", "    if ($k > count($arr))\
    \ {\n        return array();\n    }\n\n    $maximum = array();\n    $maximum_size\
    \ = count($arr);\n    for ($i = 0; $i < $maximum_size; $i++) {\n        $current_value\
    \ = $arr[$i];\n        if ($i > 0 && $current_value < $maximum[0]) {\n       \
    \     $maximum = array_merge($maximum, array($current_value));\n        }\n  \
    \  }\n\n    return $maximum;\n}", "    $result = array();\n    $arrLength = count($arr);\n\
    \    \n    for($i = 0; $i < $arrLength; ++$i){\n        if($i == 0){\n       \
    \     $result[] = $arr[$i];\n        }else{\n            if($arr[$i] < $result[$k-1]){\n\
    \                $result[$k-1] = $arr[$i];\n            }\n        }\n    }\n\
    \    return $result;\n}", "    $max_key = array_fill(0, $k, 0);\n    foreach ($arr\
    \ as $key => $value) {\n        $max_key[$key] = max($max_key[$key], $key);\n\
    \    }\n    return array_slice($arr, $max_key[$k]);\n}\n", "    $res = array();\n\
    \    \n    foreach($arr as $v) {\n        sort($res);\n        if(count($res)\
    \ > $k) {\n            $res = [];\n        }\n        \n        array_push($res,\
    \ $v);\n    }\n    \n    sort($res);\n    return $res;\n}\n\nprint_r(maximum([-3,\
    \ -4, 5], 3));\nprint_r(maximum([4, -4, 4], 2));\nprint_r(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));\n</code>\nOutput\n<code>\nArray\n(\n    [0] => -4\n    [1]\
    \ => -3\n    [2] => 5\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n)\nArray\n(\n\
    \    [0] => -2\n    [1] => 2\n)\n</code>\n<|/ a |>\n<| a |>\n<code>", "    $max\
    \ = [];\n    $n = count($arr);\n\n    for ($i = 0; $i < $n; $i++) {\n        $temp[$i]\
    \ = $arr[$i];\n    }\n    sort($temp);\n    for ($i = 0; $i < $k; $i++) {\n  \
    \      $max[$i] = $temp[$i];\n    }\n\n    return $max;\n}\n\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 3));\n</code>\n<|/ a tags=sorting,arrays,algorithm,php\
    \ dscore=1 |>\n<| a dscore=0 |>\nHere's my code which works as expected:\n<code>\n\
    $arr = [-3, -4, 5]; // original array\n$k = 2;\n$newArr = $arr;\nrsort($newArr);\n\
    $newArr = [];\nfor($i = 0; $i < $k; $i++){\n    $newArr[$i] = $newArr[$i-1];\n\
    }\n\nprint_r($newArr);\n</code>\nResult:\n<code>\nArray\n(\n    [0] => -4 \n \
    \   [1] => -3 \n    [2] => 5 \n)\n</code>\n<|/ a tags=sorting,arrays,algorithm,php\
    \ |>\n<| a dscore=0 |>\nPHP has native array functions. You can do this in one\
    \ line using array_slice().\n<code>\n$array = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $array = array_slice($array,0,3);\n</code>\nhttp://php.net/manual/en/function.array-slice.php\n\
    <|/ a tags=sorting,arrays,algorithm,php |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = [-3, 2, 1, 2, -1, -2, 1];\n", "    $maximum = $arr[0];\n    for ($i = 1;\
    \ $i < $k; $i++) {\n        if ($maximum > $arr[$i]) {\n            $maximum =\
    \ $arr[$i];\n        }\n    }\n    return $maximum;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI think you need to set `$maximum = $arr[0];` just before the first\
    \ `for` loop to avoid unnecessary loops. Also, your code only returns one element\
    \ per array if there are multiple elements with max value. OP said that there\
    \ might be duplicates and wants the multiple elements if there are multiple max\
    \ values.\n<|/ c |>\n<| c |>\nPlease see my answer, which doesn't require setting\
    \ `$maximum` before the first loop.\n<|/ c |>\n<| c |>\nI see you added that comment\
    \ in 2019. But this answer was already given 3 years ago and wasn't mentioned\
    \ at that time. Did you even look at my comment on your answer or the one I left\
    \ there?\n<|/ c |>\n<| a dscore=0 |>\nTry this\n<code>", "    $max = [];\n   \
    \ $result = [];\n\n    foreach ($arr as $key => $value) {\n        if ($key %\
    \ $k == 0 && $key < count($max)) {\n            $max[$key] = max($max[$key], $value);\n\
    \        }\n        else {\n            $result[] = $value;\n        }\n    }\n\
    \n    return $max;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,arrays,php |>\n<code>\n\
    <?php\n$array = array(1, 2, 4, 8, 3, 6, 5);\n$array_count = count($array);\n$highest_count\
    \ = max(array_count_values($array));\n$highest_array = array();\n\nfor ($i = 0;\
    \ $i < $highest_count; $i++) {\n    $highest_array[] = array_slice($array, $i,\
    \ 1);\n}\n\nvar_dump($highest_array);", "    sort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n</code>\n<|/ a |>\n<| c |>\nI think you've missed the point of the\
    \ question. The question was to find the kth maximum number in the list, not the\
    \ k largest numbers. Your solution finds the kth largest number, not kth maximum\
    \ number.\n<|/ c |>\n<| c |>\nThe question is to find the kth maximum number in\
    \ the list, not the k largest numbers. I've updated my answer.\n<|/ c |>\n<| c\
    \ |>\nThis is O(nlogn) complexity, but it is already the top-voted answer. Nothing\
    \ wrong with it.\n<|/ c |>\n<| c |>\nI think the question was to find the kth\
    \ maximum number. Your code finds the kth largest number. I had the same question\
    \ a while ago and I posted the same code. Maybe it's just me who doesn't understand\
    \ what OP wants.\n<|/ c |>\n<| c |>\nThe question was to find the kth maximum\
    \ number in the list. I've updated my answer.\n<|/ c |>\n<| a tags=php |>\n<code>\n\
    <?php\n$array = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$sorted = sort($array);\n\n\
    if (count($sorted) == $k) {\n   echo array_slice($sorted, 0, 1);\n}", "    //\
    \ write your code here\n    $max = array_slice($arr, 0, $k);\n    $max[] = $arr[$k];\n\
    \    ksort($max);\n    return $max;\n}\n</code>\n<|/ a tags=sorting,arrays,php\
    \ |>\n<| a dscore=1 tags=sorting,arrays,php |>\nThis solution sorts up to k elements\
    \ from the array in O(log(k)) time complexity and returns the result array:\n\
    <code>", "  $result = array();\n  for ($i = 0; $i < $k; ++$i) {\n    $result[]\
    \ = array_shift($arr);\n  }\n  return $result;\n}", "    $results = [];\n    foreach\
    \ ($arr as $item) {\n        $results[] = $item;\n    }\n    sort($results);\n\
    \    $results = [$k] + array_slice($results, 0, $k);\n    return $results;\n}",
  "    if ($k == 0) {\n        return $arr;\n    }\n    $resultArr = array($arr[0]);\n\
    \    for ($i = 1; $i < $k; $i++) {\n        $maxValue = max($arr[$i], $arr[$i\
    \ - 1]);\n        $resultArr[] = $maxValue;\n    }\n    return $resultArr;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding *why* and/or *how* this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\nI think\
    \ this is an interesting problem to solve. So here is the solution.\n<code>\n\
    <?php", "    sort($arr);\n    $result = array_slice($arr, 0, $k);\n    return\
    \ $result;\n}", "    $res = array();\n    $len = count($arr);\n    for($i = 0;\
    \ $i < $k; $i++){\n        $max = -100000;\n        $temp = $arr[0];\n       \
    \ for($j = 1; $j < $len; $j++){\n            $temp = $arr[$j];\n            if($temp\
    \ > $max){\n                $max = $temp;\n            }\n        }\n        $res[]\
    \ = $max;\n    }\n    return $res;\n}\n", "    $max = [];\n    for($i=0; $i<$k;\
    \ $i++){\n        if(isset($arr[$i]) && is_numeric($arr[$i])){\n            $max[]\
    \ = $arr[$i];\n            unset($arr[$i]);\n        }\n    }\n    for($i = 0;\
    \ $i < count($arr); $i++){\n        if(!isset($arr[$i])){\n            $max[]\
    \ = $arr[$i];\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a |>\n<code>\n<?php", "    \n    $sortedArr = array();\n    $maxElement\
    \ = -1;\n    \n    foreach($arr as $key => $value){\n        if($value > $maxElement){\n\
    \            $maxElement = $value;\n            $sortedArr[$key] = $maxElement;\n\
    \        }\n    }\n    \n    $finalArr = array_slice($sortedArr, 0, $k);\n   \
    \ \n    return $finalArr;\n}\n", "    $result = array();\n    $length = count($arr);\n\
    \    \n    // create an empty array and fill it with $k+1 integers\n    $arr =\
    \ array_fill(0, $k + 1, 0);\n    \n    // fill the array with 0 and $k+1 elements\n\
    \    foreach ($arr as $index => $val) {\n        $arr[$index] = 0;\n    }\n  \
    \  \n    // fill the array with values from $arr\n    foreach ($arr as $index\
    \ => $val) {\n        if ($index === 0) {\n            $result[] = $val;\n   \
    \     } else {\n            $prev = $result[$index-1];\n            $val = $arr[$index]\
    \ - $prev;\n            $arr[$index] = $val;\n            $result[$index] = $prev\
    \ + $val;\n        }\n    }\n    \n    return array_slice($result, 0, $k);\n}\n",
  "    $count = count($arr);\n    $tempArr = array();\n    $resultArr = array();\n\
    \    \n    for ($i = 0; $i < $k; $i++) {\n        $result = max($arr);\n     \
    \   $tempArr[] = $result;\n        $resultArr[] = $result;\n    }\n    \n    for\
    \ ($i = 0; $i < $count; $i++) {\n        $tempArr[] = $arr[$i];\n    }\n    \n\
    \    return array_slice($tempArr, 0, $k);\n}", "    $kArray = [];\n    foreach\
    \ ($arr as $key => $value) {\n        $kArray[] = $value;\n    }\n    ksort($kArray);\n\
    \    $max = array_slice($kArray, 0, $k);\n    return $max;\n}\n</code>\n<|/ a\
    \ tags=sorting,algorithm,php dscore=2 |>\n<| a |>\nSince it seems no one has provided\
    \ a solution using PHP, I will post my solution in Ruby here.\n<code>\ndef maximum_elements(list,\
    \ n)\n  maximum, minimum = list.min, list.max\n  maximum.zip(minimum).each_cons(n).map(&:flatten)\n\
    end\n</code>\n<|/ a tags=sorting,algorithm,php dscore=1 |>\n<| a |>\nI wrote this\
    \ simple php code that seems to do what you need:\n<code>\n$input = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\n\n$kArray = array();\nforeach ($input as $value) {\n\
    \    $kArray[] = $value;\n}\n\nksort($kArray);\n$outputArray = array_slice($kArray,\
    \ 0, $k);\n\nvar_dump($outputArray);\n</code>\n<|/ a tags=sorting,algorithm,php\
    \ dscore=0 |>\n<| c |>\nThanks. This is what I was looking for.\n<|/ c |>\n<|\
    \ a |>\n<code>", "    $result = [];\n    $arr = array_reverse($arr);\n    for\
    \ ($i = count($arr); $i > 0; $i--) {\n        $result[$i] = $arr[$i];\n    }\n\
    \n    for ($j = 1; $j <= $k; $j++) {\n        for ($i = count($arr) - 1; $i >=\
    \ 0; $i--) {\n            if ($result[$i] > $result[$i - 1]) {\n             \
    \   $result[$i] = $result[$i - 1];\n            } else {\n                $result[$i]\
    \ = $arr[$i];\n            }\n        }\n    }\n    return $result;\n}\n\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 3));\n</code>\n<|/ a |>\n<| c |>\nYour solution looks nice,\
    \ but I think that it needs more time complexity than yours. My solution needs\
    \ n^2. Your solution takes O(n).\n<|/ c |>\n<| c |>\nIt does not require `n^2`.\
    \ We use a hash table to store the elements and we only iterate through half the\
    \ elements of `arr`. The complexity is `O(n)` as we only iterate through half\
    \ of the elements in `arr`.\n<|/ c |>\n<| c |>\nThis solution does not work if\
    \ you have a very big array, because the array gets reversed.\n<|/ c |>\n<| c\
    \ |>\nYou also do not need to reverse the array first if you first reverse it\
    \ and then do your algorithm, see my answer: https://stackoverflow.com/a/65243225/13608143\n\
    <|/ c |>\n<| c |>\nHow come you do not need to reverse it first? Your solution\
    \ does not give the correct result if you have a large array. And your solution\
    \ is not correct when you have a very large array e.g. `maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 3)` gives the result `[2, -1, -2]`, but it should give `[-2, -1,\
    \ 2]`\n<|/ c |>\n<| a dscore=0 |>\nAs I mentioned in my comment, you do not need\
    \ to reverse the array first.\nYou also do not need to reverse the array first\
    \ if you first reverse it and then do your algorithm. \nI changed your solution\
    \ to this, which works perfectly fine for me, even for very big arrays.\n<code>\n\
    <?php\n", "    $result = [];\n    $j = 0;\n    $n = count($arr);\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        while ($j < $n && $arr[$j] < $arr[$j + 1]) {\n\
    \            $j++;\n        }\n        if ($j == 0) {\n            $result[] =\
    \ $arr[$j];\n            $j++;\n        }\n        if ($j == $n - 1) {\n     \
    \       $result[] = $arr[$j];\n        }\n    }\n    return $result;\n}\n", " \
    \   $max = array();\n    \n    for($i = 0; $i < $k; $i++) {\n        \n      \
    \  sort($arr);\n        \n        $max[] = $arr[$i];\n        \n        unset($arr[$i]);\n\
    \    }\n    \n    return $max;\n}", "    $max = $arr[0];\n    $temp = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($key < $max) {\n          \
    \  $temp[$key] = $value;\n        } else {\n            $max = $key;\n       \
    \ }\n    }\n    return array_slice($temp, 0, $k);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis code does not run for `maximum([-3, -4, 5], 3)`. Please check.\n\
    <|/ c |>\n<| c |>\n, you are right, fixed the code. Thanks!\n<|/ c |>\n<| a tags=sorting,arrays,php\
    \ |>\nSolution 1\nJust use sort() function in PHP. \n<code>\n<?php\n$arr = array(5,\
    \ 7, 2, 8, -4, -6, 10, 2, 1);\nsort($arr);\n\necho \"<pre>\";\nprint_r($arr);\n\
    echo \"</pre>\";", "    $max = array_pop($arr);\n    $rest = array();\n    foreach\
    \ ($arr as $item) {\n        if ($item > $max) {\n            $rest[] = $max;\n\
    \            $max = $item;\n        } else {\n            $rest[] = $item;\n \
    \       }\n    }\n    if (count($rest) > $k) {\n        return array_slice($rest,\
    \ 0, $k);\n    }\n    return array($max);\n}\n\n$input = array(\n    array(-3,\
    \ 4, 5),\n    array(4, 5, 8),\n    array(3, 6, 9, 10, 11),\n    array(1, 2, 3,\
    \ 7, 9)\n);\n\n$ans = maximum($input, 1);\nprint_r($ans);\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nNot sure why, but your solution doesn't work for me... :-)\n<|/\
    \ c |>\n<| a tags=php,arrays,laravel,algorithm |>\nThe best solution I can come\
    \ up with is this:\n<code>", "    $result = [];\n    foreach($arr as $key => $val)\
    \ {\n        if(!isset($result[$key])) {\n            $result[$key] = $val;\n\
    \        } else {\n            if($result[$key] > $val) {\n                $result[$key]\
    \ = $val;\n            }\n        }\n    }\n    arsort($result);\n    return array_slice($result,\
    \ 0, $k);\n}\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\necho \"<pre>\";\nprint_r(maximum($arr,\
    \ $k));\necho \"</pre>\";", "    $arr = array_reverse($arr);\n    sort($arr);\n\
    \    $result = array();\n    for($i=0;$i<$k;$i++) {\n        array_push($result,$arr[$i]);\n\
    \    }\n    return array_reverse($result);\n}\n</code>\n<|/ a |>\n<| c |>\nThank\
    \ you for your answer but i think it is not working. i have put array from 1-4\
    \ but it is giving output as 3-5 which is wrong\n<|/ c |>\n<| c |>\nI have made\
    \ some modifications to the code and it works now.\n<|/ c |>\n<| c |>\nI have\
    \ tested your solution. However it is not giving proper output for array like\
    \ [1,2,3,4,5] with k = 1 which is wrong as it should behave like [1,2,3,4] since\
    \ 1 is the maximum number\n<|/ c |>\n<| c |>\nI have tested it for array with\
    \ length 5. It works now.\n<|/ c |>\n<| c |>\nThank you so much for the help it\
    \ works great for me. but now i have to find max number in an array with length\
    \ 10. I used my own approach but it is too slow for big array. Can you help me\
    \ with that\n<|/ c |>\n<| a |>\nI hope this solution is helpful for you. You can\
    \ use usort,\n<code>\n<?php\n", "    $result = [];\n    $temp_arr = [];\n    \n\
    \    for($i=0; $i<$k; $i++) {\n        $temp_arr[] = $arr[$i];\n    }\n    \n\
    \    for($i=0; $i<count($temp_arr); $i++) {\n        for($j=$i+1; $j<count($temp_arr);\
    \ $j++) {\n            if ($temp_arr[$i] > $temp_arr[$j]) {\n                array_splice($temp_arr,\
    \ $i, 1, $temp_arr[$j]);\n            }\n        }\n    }\n    \n    for($i=0;\
    \ $i<count($temp_arr); $i++) {\n        array_push($result, $temp_arr[$i]);\n\
    \    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=php,algorithm,arrays,sorting\
    \ dscore=0 |>\n<| a |>\nYou can create a heap in O(n) and then get the highest\
    \ k values. After that, you can heapify the array again. Here's an implementation:\n\
    <code>", "    $m = null;\n    $max = null;\n    $maxLength = 0;\n\n    for($i\
    \ = 0; $i < $k; $i++) {\n        $curMax = array();\n        foreach ($arr as\
    \ $value) {\n            if ($max === null || $value > $max) {\n             \
    \   $max = $value;\n                $maxLength = $i;\n            }\n        \
    \    if ($value == $max) {\n                $curMax[] = $value;\n            }\n\
    \        }\n        $m = $max;\n        $max = $curMax;\n    }\n    return $max;\n\
    }", "    $arr = array_reverse($arr);\n    $ret = [];\n    $min = PHP_INT_MAX;\n\
    \    foreach($arr as $i) {\n        $min > $i ? $min = $i : $ret[] = $i;\n   \
    \ }\n    return array_slice($ret, 0, $k);\n}\n</code>\n<|/ a tags=arrays,sorting,php\
    \ |>\n<| c |>\nYour answer works well in PHP version 7.3, but not in PHP version\
    \ 7.2.\n<|/ c |>\n<| c |>\nI tested it on 7.3.11 and it worked fine.\n<|/ c |>\n\
    <| c |>\nThanks for sharing. :)\n<|/ c |>\n<| a tags=arrays,sorting,php |>\n<code>\n\
    <?php\n$arr = array(4, -4, -3, 4, -4, -3, -6, 4, 6, 4, 4, 4, 4);\n$max_numbers\
    \ = max($arr);\n$result = array_slice($arr, $max_numbers, count($arr) - $max_numbers);\n\
    var_dump($result);", "    $maximum = $arr[0];\n    for ($i = 1; $i < $k; $i++)\
    \ {\n        $maximum = max($maximum, $arr[$i]);\n    }\n    return $maximum;\n\
    }", "    $res = array();\n    for($i = 0; $i < $k; $i++) {\n        $tmp = $arr[0];\n\
    \        for($j = 1; $j < $k; $j++) {\n            if($arr[$j] > $tmp) {\n   \
    \             $tmp = $arr[$j];\n            }\n        }\n        $res[] = $tmp;\n\
    \    }\n    return $res;\n}\n", "    sort($arr);\n    $result = [];\n    $result[0]\
    \ = $arr[0];\n    \n    for ($i = 1; $i < $k; $i++) {\n        if ($arr[$i] >\
    \ $result[0]) {\n            $result[0] = $arr[$i];\n        }\n    }\n    \n\
    \    return $result;\n}", "    $max_len = min(count($arr), $k);\n    $result =\
    \ array_fill(0, $max_len, -1);\n    for ($i = 0; $i < $max_len; $i++) {\n    \
    \    for ($j = max($i, $k - $i - 1); $j < $k; $j++) {\n            $result[$j]\
    \ = max($result[$j], $arr[$j]);\n        }\n    }\n\n    return $result;\n}\n\
    </code>\n<|/ a tags=php,algorithm,performance,arrays,sorting dscore=4 |>\n<| a\
    \ tags=php,algorithm,performance,arrays,sorting |>\nThis is not an answer to your\
    \ question about what sorting algorithm to use, it's just a solution which may\
    \ help you in solving your problem.\nYou can use array keys to do your job.\n\
    <code>\n$numbers = array(\n  array(4, 1),\n  array(2, 2),\n  array(8, 9),\n  array(7,\
    \ 3)\n);\n\nusort($numbers, function($a, $b){\n    return $b[0] - $a[0];\n});\n\
    \nprint_r($numbers);\n</code>\nhttp://php.net/manual/en/function.usort.php\n<|/\
    \ a dscore=4 |>\n<| c |>\nThat does only work on numeric arrays, though.\n<|/\
    \ c |>\n<| a dscore=2 |>\nA simple solution to get the max k elements would be:\n\
    <code>", "    sort($arr);\n    $n = count($arr);\n    $result = array();\n   \
    \ if ($k <= 0 || $k > $n) {\n        return $result;\n    }\n\n    $index = 0;\n\
    \    $tmp = $arr[0];\n    sort($arr);\n\n    for($i = 1; $i < $n; $i++) {\n  \
    \      if ($k - $i < 0) {\n            $result[] = $tmp;\n            while (count($arr)\
    \ > $k) {\n                array_shift($arr);\n            }\n            $index++;\n\
    \        } else {\n            $tmp = $arr[$i];\n            while ($k - $index\
    \ < 0) {\n                array_pop($arr);\n                $index--;\n      \
    \      }\n            $result[] = $tmp;\n            $index++;\n        }\n  \
    \  }\n    return $result;\n}\n</code>\n<|/ a tags=arrays,php,sorting,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>", "  for ($i = 0; $i < $k; $i++) {\n    $max =\
    \ max($arr);\n    $arr = array_filter($arr, 'is_int');\n  }\n  return $arr;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint(maximum($arr, $k));", "    $max_arr = array_slice($arr,\
    \ 0, $k);\n    foreach ($arr as $key => $value) {\n        $max_arr[$key] = max($value,\
    \ $max_arr[$key]);\n    }\n    return $max_arr;\n}\n", "    $sortedArr = sortArr($arr);\n\
    \    return array_slice($sortedArr, 0, $k);\n}\n", "    $arr = array_reverse($arr);\n\
    \    $res = array();\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    return array_reverse($res);\n}\n</code>\n<|/ a tags=sorting,arrays,php,max\
    \ dscore=5 |>\n<| c |>\nWhat about O(n) complexity?\n<|/ c |>\n<| c |>\nThe O(n)\
    \ solution would be to find the first element that is greater than the k th element\
    \ and remove it from the array. This would result in O(n) complexity. There is\
    \ an O(n) solution which i will post later\n<|/ c |>\n<| c |>\nYour O(n) solution\
    \ has two bugs: 1) you need to start from the end 2) it's O(n*k) where n is the\
    \ size of the input array. Correct solution is O(k) complexity. Also O(0) is O(1)\n\
    <|/ c |>\n<| c |>\n: No, my solution is O(k). As I said, O(0) is O(1). You are\
    \ free to choose the correct answer, but please don't use the one with O(n*k)\
    \ complexity\n<|/ c |>\n<| c |>\nOk, sorry misunderstood you. I see your solution\
    \ is O(k), but that was not the question :)\n<|/ c |>\n<| a tags=sorting,arrays,php,max\
    \ |>\nJust for fun, here's a solution in O(n) complexity using array_reduce().\
    \  \n<code>\n$numbers = array(-3, -4, 5);\n\n$max_numbers = array_reduce(\n  \
    \  $numbers,\n    function (array $result, int $number) {\n        return $result\
    \ === []\n            ? [$number]\n            : ($number > $result[0] ? [$number]\
    \ : $result);\n    },\n    []\n);\n\nvar_dump($max_numbers);\n</code>\nOutput:\n\
    <code>\narray\n  0 => int -4\n  1 => int -3\n  2 => int 5\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThat is the most elegant solution. Nice one! +1\n<|/ c |>\n<| c\
    \ |>\nVery interesting approach!\n<|/ c |>\n<| a dscore=5 |>\nTo get the maximum\
    \ value from an array in PHP\n<code>\n<?php\n$numbers = array(-3, -4, 5);\n\n\
    $max_number = max($numbers);\n\nvar_dump($max_number);\n</code>\nIf you ", " \
    \   $result = [];\n\n    // first find largest element\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        // check current element of array\n        if (!empty($arr[$i]))\
    \ {\n            // if element larger than largest element\n            if ($arr[$i]\
    \ > $largest) {\n                // set largest element\n                $largest\
    \ = $arr[$i];\n            }\n        }\n    }\n\n    // now iterate array again\n\
    \    for ($i = 0; $i < $k; $i++) {\n        // check current element of array\n\
    \        if (!empty($arr[$i])) {\n            // if element larger than largest\
    \ element\n            if ($arr[$i] > $largest) {\n                // set largest\
    \ element to current element\n                $largest = $arr[$i];\n         \
    \   }\n        }\n    }\n\n    // now we find the next largest element\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        // check current element of array\n     \
    \   if (!empty($arr[$i])) {\n            // if element larger than largest element\n\
    \            if ($arr[$i] > $largest) {\n                // set largest element\
    \ to current element\n                $largest = $arr[$i];\n            }\n  \
    \      }\n    }\n\n    // now we find the next largest element\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        // check current element of array\n        if (!empty($arr[$i]))\
    \ {\n            // if element larger than largest element\n            if ($arr[$i]\
    \ > $largest) {\n                // set largest element to current element\n \
    \               $largest = $arr[$i];\n            }\n        }\n    }\n\n    //\
    \ set result\n    $result[] = $largest;\n\n    // return\n    return $result;\n\
    }\n", "    $count = 0;\n    foreach ($arr as $value) {\n        $count++;\n  \
    \  }\n    if ($k > $count) {\n        return $arr;\n    }\n    $result = array();\n\
    \    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        $result[$i]\
    \ = $arr[$i];\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i] =\
    \ max($result[$i], $arr[$i + 1]);\n    }\n    return $result;\n}\n</code>\n<|/\
    \ a tags=algorithm,arrays dscore=0 |>\n<| a |>\nThis problem can be solved in\
    \ O(n) time and O(k) space. We just need to keep track of the largest number and\
    \ it's index. So, we can start with a simple loop over the array, and compare\
    \ each element with the maximum:\n<code>\nint largestSoFar = Integer.MIN_VALUE;\n\
    int maxIndex = -1;\nfor (int i = 0; i < arr.length; i++) {\n    if (arr[i] > largestSoFar)\
    \ {\n        largestSoFar = arr[i];\n        maxIndex = i;\n    }\n}\n</code>\n\
    We can then output this maxIndex, which gives us the max element that has been\
    \ encountered so far. We can then use this index to output all previous elements\
    \ from the start until we hit this index:\n<code>\nfor (int i = 0; i <= maxIndex;\
    \ i++) {\n    System.out.println(arr[i]);\n}\n</code>\nThe result will be:\n<code>\n\
    -1000\n-4\n-3\n</code>\n<|/ a dscore=0 tags=algorithm,arrays |>\n<| a dscore=0\
    \ tags=algorithm,arrays |>\nYou can use the following algorithm:\n<code>\nInput:\n\
    1 2 3 4 5 6 7 8\n\nk = 2 -> O(2n)\n\nk = 1 -> O(n)\n\nk = n -> O(1)\n\nInput:\n\
    1 2 3 4 5 6 7 8\n\nk = 10 -> O(n*10)\n\nk = 1000 -> O(n*1000)\n\nk = 10000 ->\
    \ O(n*10000)\n\nk = 100000 -> O(n*100000)\n\nk = 1000000 -> O(n*1000000)\n\nk\
    \ = 10000000 -> O(n*10000000)\n</code>\nHere is the full Java code with both sorting\
    \ and printing.\n<code>\npublic class SortArray {\n    \n    static final int\
    \ N = 10;\n    \n    public static void main(String args[]) {\n        int[] arr\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        sort(arr);\n    }\n\n    public static\
    \ void sort(int[] arr) {\n        sort(arr, N);\n    }\n\n    private static void\
    \ sort(int[] arr, int k) {\n        \n        int maxValue = arr[0];\n       \
    \ int maxIndex = 0;\n", "    if ($k > count($arr)) {\n        return array($arr[$k\
    \ - 1]);\n    }\n    $ans = array();\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        $pos = $i;\n        for ($j = 1; $j < $k; $j++) {\n            if\
    \ ($arr[$pos] > $arr[$pos + $j]) {\n                $pos = $pos + $j;\n      \
    \      }\n        }\n        $ans[] = $arr[$pos];\n    }\n    return $ans;\n}",
  "    $result = [];\n    $length = 0;\n    foreach ($arr as $element) {\n       \
    \ $result[$length] = $element;\n        $length++;\n    }\n\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        for ($j = 0; $j < $k; $j++) {\n            if\
    \ ($result[$i] < $result[$i + 1]) {\n                list($a, $b) = [$result[$i],\
    \ $result[$i + 1]];\n                $result[$i] = $a;\n                $result[$i\
    \ + 1] = $b;\n            }\n        }\n    }\n\n    return $result;\n}\n", " \
    \   $count = [];\n    foreach ($arr as $num => $value) {\n        if (!isset($count[$value]))\
    \ {\n            $count[$value] = 0;\n        }\n        $count[$value]++;\n \
    \   }\n    $result = [];\n    foreach ($count as $num => $value) {\n        if\
    \ ($value >= $k) {\n            $result[] = $num;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\nOutput:\n<code>\n[-3, -4, 5]\n</code>\n<|/ a |>\n<| a\
    \ tags=php,sorting,algorithm |>\nI believe this can be achieved with O(n) complexity\
    \ and O(n) space.\n<code>\n<?php\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n\
    $sorted = $arr;\n$max = [];\n$max_values = [];\n$i = count($arr);\nwhile ($i <\
    \ 1000) {\n    $value = [];\n    for ($j = $i; $j >= 0; $j--) {\n        if (in_array($arr[$j],\
    \ $max_values)) {\n            continue;\n        }\n        $value[] = $arr[$j];\n\
    \    }\n    $max_values[] = max($value);\n    sort($value);\n    $sorted[] = $value[0];\n\
    \    for ($j = count($value) - 1; $j >= 0; $j--) {\n        if ($j > 0) {\n  \
    \          if ($value[$j] >= $value[$j - 1]) {\n                $value[$j - 1]\
    \ = $value[$j];\n            }\n        }\n    }\n    sort($value);\n    $sorted[]\
    \ = $value[0];\n    $max[] = max($value);\n    $i++;\n}\nforeach ($sorted as $i\
    \ => $value) {\n    if ($i == $k) {\n        echo $value . \"<br>\";\n       \
    \ break;\n    }\n}\nforeach ($max as $i => $value) {\n    if ($i == $k) {\n  \
    \      echo $value . \"<br>\";\n        break;\n    }\n}\n</code>\nDemo\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,sorting,algorithm |>\n<code>\n sort($arr);\n $length\
    \ = count($arr);\n for($i=0;$i<$length-1;$i++)\n {\n     if($arr[$i]<$arr[$i+1])\n\
    \     {\n         $temp = $arr[$i];\n         $arr[$i] = $arr[$i+1];\n       \
    \  $arr[$i+1] = $temp;\n         $length = count($arr);\n     }\n }\n \n $max\
    \ = max($arr);\n sort($arr);\n for($i=0;$", "    sort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n", "    if($k == 1) {\n        return $arr;\n    }\n    $max = array_shift($arr);\n\
    \    $k = $k - 1;\n    foreach ($arr as $v) {\n        if($v > $max) {\n     \
    \       $max = $v;\n            $k = $k + 1;\n        }\n    }\n    return maximum($arr,\
    \ $k);\n}\n", "    $maxs = array();\n    sort($arr);\n\n    foreach (array_slice($arr,\
    \ 0, $k) as $val) {\n        if (count($maxs) > 0) {\n            if ($val > $maxs[0])\
    \ {\n                $maxs = array($val);\n            } else {\n            \
    \    $maxs[] = $val;\n            }\n        } else {\n            $maxs = array($val);\n\
    \        }\n    }\n\n    return $maxs;\n}\n", "    $max = $arr;\n    $size = sizeof($max);\n\
    \    for($i = 0; $i < $k; $i++) {\n        $j = -1;\n        for($j; $j < $size\
    \ - 1; $j++) {\n            if($max[$j] > $max[$j + 1]) {\n                break;\n\
    \            }\n        }\n        $max[$j] = $arr[$j];\n    }\n    return $max;\n\
    }\n", "    sort($arr);\n    $result = array();\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        if ($arr[$i] <= 0) {\n            break;\n        }\n        $result[]\
    \ = $arr[$i];\n    }\n    return $result;\n}\n", "    $arr = array_reverse($arr);\n\
    \    $result = [];\n    sort($arr);\n    $k--;\n    foreach ($arr as $v) {\n \
    \       if ($k <= 0) {\n            break;\n        }\n        $k--;\n       \
    \ $result[] = $v;\n    }\n    return $result;\n}\n", "    $n = count($arr);\n\
    \    if ($k > $n) {\n        return array();\n    }\n\n    // Sort the array in\
    \ descending order\n    sort($arr, SORT_NUMERIC);\n\n    // Build result array\n\
    \    $rem = $n;\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \        if ($rem == 0) {\n            break;\n        }\n        $rem -= 1;\n\
    \    }\n\n    return $res;\n}\n\n$result = maximum([-3, -4, 5], 3);\nprint_r($result);",
  "    $result = [];\n    foreach ($arr as $i => $num) {\n        if ($i === $k) {\n\
    \            $result[] = $num;\n        } else {\n            $temp = $i;\n  \
    \          for ($j = $k; $j > ($i - $k); $j--) {\n                $temp = $result[$j];\n\
    \            }\n            $result[] = $num;\n            $result[$temp] = $num;\n\
    \        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ |>\nMy answer is also based on recursive function.\n<code>\n<?php\n    $arr1\
    \ = array(1, 3, 2, 4, 5, 6);\n    $arr2 = array(2, 4, 5, 6, 7);\n\n    $arr_sorted\
    \ = array_merge($arr1, $arr2);\n\n    $count = count($arr_sorted);\n\n    function\
    \ merge_sort($arr, $start, $end)\n    {\n        if($start < $end)\n        {\n\
    \            $mid = intval(($start + $end) / 2);\n            merge_sort($arr,\
    \ $start, $mid);\n            merge_sort($arr, $mid + 1, $end);\n\n          \
    \  merge($arr, $start, $mid, $end);\n        }\n    }\n\n    function merge($arr,\
    \ $start, $mid, $end)\n    {\n        for($i = $start; $i <= $mid; $i++)\n   \
    \     {\n            $arr[$i] = max($arr[$i], $arr[$i + 1]);\n        }\n\n  \
    \      for($i = $mid; $i <= $end; $i++)\n        {\n            $arr[$i] = max($arr[$i],\
    \ $arr[$i - 1]);\n        }\n    }\n\n    merge_sort($arr_sorted, 0, $count);\n\
    \n    print_r($arr_sorted);", "    \n    $max = [];\n    \n    for($i = 0; $i\
    \ < $k; $i++) {\n        $max[$i] = $arr[0];\n        \n        for($j = 1; $j\
    \ < $k; $j++) {\n            if($arr[$j] > $max[$i]) {\n                $max[$i]\
    \ = $arr[$j];\n            }\n        }\n    }\n    \n    return $max;\n}\n",
  "    $res = [];\n    foreach ($arr as $key => $value) {\n        if ($key < $k)\
    \ {\n            $res[] = $value;\n            unset($arr[$key]);\n        } else\
    \ {\n            $temp = $key;\n            $temp = $temp - 1;\n            $res[]\
    \ = $arr[$temp];\n            $arr[$temp] = 0;\n        }\n    }\n    return array_merge($res,\
    \ $arr);\n}\n", "    sort($arr);\n    array_pop($arr);\n    return array_slice($arr,\
    \ $k, $k);\n}\n\n$arr = array(3, -4, 5);\necho maximum($arr, 3);\n", "    $nums\
    \ = array_chunk($arr, ceil(count($arr) / $k));\n    \n    $max = null;\n    foreach\
    \ ($nums as $arr) {\n        $arr = array_slice($arr, 0, $k);\n        $min =\
    \ array_reduce($arr, 'min');\n        if (null === $max || $min > $max) {\n  \
    \          $max = $min;\n        }\n    }\n    return $max;\n}", "    $sortedArr\
    \ = array_slice($arr, 0, $k);\n    \n    sort($sortedArr);\n    \n    return array_slice($sortedArr,\
    \ 0, $k);\n}\n\n$result = maximum($arr, 3);\necho json_encode($result);", "  \
    \  $result = array();\n    \n    for($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[0];\n        array_shift($arr);\n    }\n    \n    $result[] = $arr[0];\n\
    \    \n    return $result;\n}\n", "    $arr = array_reverse($arr);\n    $ans =\
    \ $arr;\n    \n    for($i = 0; $i < $k; $i++) {\n        $max = $arr[$k - 1];\n\
    \        $i--;\n        \n        for($j = $k; $j > 0; $j--) {\n            \n\
    \            if($j - $i >= 0) {\n                if($max * $ans[$j - $i] > $arr[$j])\
    \ {\n                    $ans[$j - $i] = $arr[$j];\n                }\n      \
    \      }\n        }\n    }\n    \n    return array_reverse($ans);\n}\n\n$ans =\
    \ maximum($arr, 2);\nprint_r($ans);\n</code>\n<|/ a tags=arrays,sorting,php |>\n\
    <| c |>\nOkay, this works, but it's kinda slow on large arrays? I was hoping to\
    \ find a solution without a for loop\n<|/ c |>\n<| c |>\nI tested it on array\
    \ of 1000000 numbers and it was fast enough. Can you provide some numbers so I\
    \ can test it faster?\n<|/ c |>\n<| c |>\nOkay, I've updated my answer to include\
    \ an alternative solution - it uses array_reverse() because I am pretty sure it\
    \ doesn't matter if you reverse the array at the end or not. Hope it helps :)\n\
    <|/ c |>\n<| c |>\nI updated my answer to include another solution, without array_reverse()\
    \ which should also work on large arrays.\n<|/ c |>\n<| a tags=arrays,sorting,php\
    \ |>\nFor PHP you can use array_chunk to split the array into chunks and then\
    \ sort each chunk using usort().\n<code>", "    $result = array();\n    $count\
    \ = 1;\n    $max = $arr[0];\n    $result[] = $max;\n    foreach ($arr as $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n        } else\
    \ {\n            $count++;\n        }\n        $result[] = $value;\n        if\
    \ ($count == $k) {\n            $result[] = $max;\n            $count = 1;\n \
    \       }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php,algorithm\
    \ |>\nThis solution works only if there are at least two non-negative integer\
    \ in the array:\n<code>", "    $result = array();\n    $max = $arr[0];\n    \n\
    \    for($i = 1; $i < $k; ++$i) {\n        $tmp = $arr[$i];\n        \n      \
    \  foreach($result as $value) {\n            if($value < $tmp) {\n           \
    \     $tmp = $value;\n            }\n        }\n        \n        $result[] =\
    \ $tmp;\n    }\n    \n    return array_slice($result, 0, $k);\n}\n", "    // code\
    \ here\n}\n", "    if ($k <= 0 || $k > count($arr)) {\n        echo \"invalid\
    \ input\";\n        die();\n    }\n    // \u5C06\u6570\u7EC4 arr \u6309 k \u6392\
    \u5E8F\uFF0C\u4E14\u4FDD\u7559\u7B2C k \u4E2A\u5143\u7D20\n    $sortedArr = array_slice($arr,\
    \ 0, $k);\n    // \u5C06\u5269\u4F59\u7684\u6570\u7EC4 arr \u5206\u6210\u4E24\u4E2A\
    \u90E8\u5206\n    $maxLeft = array_slice($arr, $k);\n    $maxRight = array_slice($arr,\
    \ 0, $k);\n    // \u7EDF\u8BA1 maxLeft \u7684\u5143\u7D20\u7684\u4E2A\u6570\n\
    \    $maxLeftCount = count($maxLeft);\n    // \u5C06 maxLeft \u5206\u6210 maxLeftCount\
    \ / 2 \u5757\uFF0C\u5373\u6BCF\u5757\u7684\u6570\u91CF\u662F maxLeftCount / 2\n\
    \    // \u5C06 maxLeft \u4E2D\u7684\u6570\u5B57 k \u4F4D\u6570\u505A\u5DEE\uFF0C\
    \u7136\u540E\u4E0E maxRight \u4E2D\u7684\u6570\u5B57 k \u4F4D\u6570\u505A\u5DEE\
    \n    // \u6700\u540E maxLeft \u548C maxRight \u4E24\u90E8\u5206\u7684\u548C \u5C31\
    \u662F\u6700\u5927\u503C\n    $maxLeftSum = array_sum(array_slice($maxLeft, $k\
    \ / 2));\n    $maxRightSum = array_sum(array_slice($maxRight, $k / 2));\n    //\
    \ \u5982\u679C maxLeft \u548C maxRight \u7684\u548C\u90FD\u5927\u4E8E 0 \uFF0C\
    \u90A3\u4E48 maxLeft \u548C maxRight \u5C31\u662F\u6700\u5927\u503C\n    return\
    \ $maxLeftSum >= 0 && $maxRightSum >= 0 ? array($maxLeft, $maxRight) : array();\n\
    }\n\n$max1 = maximum($arr, 1);\n$max2 = maximum($arr, 2);\n$max3 = maximum($arr,\
    \ 3);\n$max4 = maximum($arr, 4);\n$max5 = maximum($arr, 5);\n$max6 = maximum($arr,\
    \ 6);\n", "    $nums = array_count_values($arr);\n    $max = array();\n    $n\
    \ = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($nums[$arr[$i]]\
    \ > 1) {\n            $num[$arr[$i]] = $nums[$arr[$i]];\n        } else {\n  \
    \          $num[$arr[$i]] = 1;\n        }\n    }\n    // Sort in descending order\
    \ and limit result to k elements\n    arsort($num);\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max[] = $arr[$i];\n    }\n    return $max;\n}\n\n/**\n * Return\
    \ the number of subsets of S that sum to S\n *\n * string $s\n * int $k\n * int\
    \ The return value will be in the range [0, n]\n */", "  $result = [];\n  for\
    \ ($i=0; $i<$k; $i++) {\n    $result[] = $arr[0];\n  }\n  array_pop($result);\n\
    \  return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\n$newArr = maximum($arr,\
    \ $k);\nprint_r($newArr);", "    // Write your code here\n    if ($k > count($arr))\
    \ {\n        return $arr;\n    }\n    $maximums = array();\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        $maximums[] = $arr[$i];\n    }\n    if (count($maximums)\
    \ <= $k) {\n        for ($i = 0; $i < count($maximums); $i++) {\n            $maximums[$i]\
    \ = $maximums[$i] - 1;\n        }\n    } else {\n        $maximums = array_slice($maximums,\
    \ 0, $k);\n    }\n    return $maximums;\n}\n</code>\n<|/ a |>\n<| c |>\nI love\
    \ how this answer is the most concise and uses no loops. My impulse was to just\
    \ do some recursive approach, however I could not figure it out after so many\
    \ iterations.\n<|/ c |>\n<| a tags=sorting,algorithm,php,arrays dscore=2 |>\n\
    <code>\n$array = [-3,-4,5];\n$maximum = $array[0];\n$result = [];\nforeach($array\
    \ as $a) {\n    $result[] = $a;\n    if($a > $maximum) {\n        $maximum = $a;\n\
    \    }\n}\nif(count($result) > $maximum) {\n    $result = array_slice($result,0,$maximum);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nIt is not clear what the OP wants, he stated that\
    \ the array could be of any length and that the length is not fixed.\n<|/ c |>\n\
    <| c |>\nThe code does not work when the array has more than 1 max number. For\
    \ example: arr = [-3, 2, 1, 2, -1, -2, 1] and k = 2\n<|/ c |>\n<| c |>\nThanks\
    \ for catching my mistake. I've fixed it.\n<|/ c |>\n<| c |>\nThanks, but still\
    \ not quite right, now you get [4,4] instead of [4,4,4].\n<|/ c |>\n<| c |>\n\
    You are right, I've fixed it again by checking the size of the resulting array.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,php,arrays |>\nThis should be the most efficient\
    \ approach for this problem:\n<code>\n<?php\n\n$arr = array(-3, -4, 5);\n\n$max\
    \ = max($arr);\n$arr = array_diff($arr, array($max));\n$result = array_slice($arr,\
    \ 0, $max);\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$array = [-3,-4,5];\n\
    $length = sizeof($array", "    if ($k > count($arr)) return [];\n    $maximums\
    \ = array_fill(0, $k, -9999);\n    foreach ($arr as $v) {\n        for ($i = 0;\
    \ $i < $k; ++$i) {\n            if ($maximums[$i] < $v && $maximums[$i] >= 0)\
    \ {\n                $maximums[$i] = $v;\n            }\n        }\n    }\n  \
    \  return array_slice($maximums, 0, $k);\n}\n</code>\nThe time complexity is O(n+k).\n\
    The space complexity is O(n).\n<|/ a dscore=1 tags=arrays,php |>\n<| c |>\nCould\
    \ you share an explanation of how this code works? And why it does so? I'm curious\
    \ to see how this code is different from the accepted answer\n<|/ c |>\n<| c |>\n\
    : I added comments to the code.\n<|/ c |>\n<| a tags=arrays,php dscore=1 |>\n\
    <code>\n$arr = [-3, -4, 5]; \n$max = 5;\n$arr = array_slice($arr, 0, $max);\n\
    sort($arr);\nvar_dump($arr);\n</code>\n<|/ a |>\n<| a |>\nYou can simply use php\
    \ array_slice function and sort the array using php sort function \n<code>\n<?php\n\
    $array = [-3, -4, 5];\n$max = 5;\n$array = array_slice($array, 0, $max);\nsort($array);\n\
    print_r($array);\n</code>\nOutput:\n<code>\nArray ( [0] => -3 [1] => -4 [2] =>\
    \ 5 )\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a |>\n<code>\n<?php", " \
    \   $max_count = 0;\n    $maximums = [];\n    for($i=0;$i<$k;$i++) {\n       \
    \ $maximums[$i] = 0;\n    }\n    foreach($arr as $key => $value) {\n        $max_value\
    \ = $maximums[$key];\n        $tmp_count = 0;\n        while($key >= 0 && $key\
    \ <= $max_count) {\n            $tmp_count += $max_value;\n            $max_value\
    \ = $maximums[$key + 1];\n            $key--;\n        }\n        $maximums[$key\
    \ + 1] = $tmp_count;\n        $max_count++;\n    }\n    return $maximums;\n}\n",
  "    $len = count($arr);\n    if ($k > $len) {\n        return [];\n    }\n    $result\
    \ = array();\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i] = max($arr);\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=3 tags=php |>\n\
    A recursive solution would be the easiest to understand\n<code>", "  $result =\
    \ array();\n  foreach ($arr as $key => $value) {\n    array_push($result, max($value,\
    \ $key));\n  }\n  return array_slice($result, 0, $k);\n}\n", "    if (!is_array($arr))\
    \ {\n        return false;\n    }\n\n    $max = array();\n\n    foreach ($arr\
    \ as $v) {\n        if ($v > $max[$k - 1]) {\n            $max[$k - 1] = $v;\n\
    \        }\n    }\n\n    return $max;\n}\n", "    $max = array();\n    foreach\
    \ ($arr as $val) {\n        $max[] = $val;\n    }\n    asort($max);\n    if ($k\
    \ > count($arr)) {\n        return array();\n    }\n    $result = array();\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $result[] = $max[$i];\n    }\n    return\
    \ $result;\n}", "    $max = $arr[0];\n    $min = max($arr);\n    for($i = 1; $i\
    \ < $k; ++$i) {\n        if($max * $i < $min) break;\n        if($max * $i > $min)\
    \ $max -= $i;\n        else {\n            $max = $arr[$i];\n            $min\
    \ = $min + $i;\n        }\n    }\n    return array($max);\n}\n", "    $result\
    \ = array();\n    \n    foreach ($arr as $value) {\n        $result[] = $value;\n\
    \    }\n    \n    sort($result);\n    \n    return array_slice($result, 0, $k);\n\
    }\n", "    $result = [];\n    if (count($arr) > 0 && $k <= count($arr)) {\n  \
    \      $result[$k] = max($arr);\n        for ($i = 1; $i <= $k; $i++) {\n    \
    \        $result[$i] = max($result[$i - 1], $arr[$i - 1]);\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 tags=php |>\n\
    The idea is to go through the array in reverse order, find the maximum number\
    \ that can be obtained from any set of numbers in the given array. The complexity\
    \ should be O(n). We can do this by taking every element of the array and checking\
    \ if there are any such subsets that include it (all numbers in the subset).\n\
    We can do this by iterating over the array in reverse order, checking if we can\
    \ find an element, which we can get from any set. We know this element must be\
    \ the maximum such element, so if we get a new array that includes this element\
    \ we can return this set. This will reduce the number of subsets, since we can\
    \ stop looking for subsets and move on to other numbers. Here is an implementation:\n\
    <code>\n<?php\n$nums = [1,2,3,4,5];\n$k = min($k, count($nums)); // We know that\
    \ k <= number of elements in the array\n$max = array(); // Initialize an array\
    \ to store the maximum subsets\n$max[0] = max($nums); // Initialize max with first\
    \ element\nfor($i = count($nums)-1; $i >= 0; $i--) { // Loop through array in\
    \ reverse order\n    if(isSubset($nums, $i, $k)) { // If there is an element in\
    \ any subset\n        $max[$i] = max($nums, $max[$i - 1], $nums[$i]); // Update\
    \ max with the element in the subset\n    }\n}\n</code>\nThe above code will return\
    \ the expected result for given arrays of different lengths:\n<code>\n$nums =\
    \ [1,2,3,4];\n$k = min($k, count($nums)); // We know that k <= number of elements\
    \ in the array\n$max = array(); // Initialize an array to store the maximum subsets\n\
    $max[0] = max($nums); // Initialize max with first element\nfor($i = count($nums)-1;\
    \ $i >= 0; $i--) { // Loop through array in reverse order\n    if(isSubset($nums,\
    \ $i, $k)) { // If there is an element in any subset\n        $max[$i] = max($nums,\
    \ $max[$i - 1], $nums[$i]); // Update max with the element in the subset\n   \
    \ }\n}\nvar_dump($max);\n", "    if ($k <= 0 || $k > count($arr)) {\n        return\
    \ [];\n    }\n    $sortedArr = array_slice($arr, 0, $k);\n    usort($sortedArr,\
    \ function ($a, $b) {\n        return $a < $b ? -1 : 1;\n    });\n    return array_slice($arr,\
    \ 0, $k);\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php dscore=0 |>\nHere is the\
    \ solution using an array_map() with an anonymous function:\n<code>\n$array =\
    \ [-4, -4, 5];\n$max = 3;\n\n$result = array_map(function ($x) use ($max) {\n\
    \    return ($x < 0 || $x > $max) ? null : $x;\n}, $array);\n\nprint_r($result);\n\
    </code>\nDemo\n<|/ a |>\n<| a tags=php dscore=0 |>\nYou can use array_filter to\
    \ filter out all the negatives, sort them using asort() and finally use array_slice\
    \ to splice the first three items out of $array. \n<code>\n$array = [-4, -4, 5];\n\
    $max = 3;\n\n$result = array_slice($array, array_filter($array,'is_int')->asort($array)->count($array)\
    \ > $max ? $max : count($array), $max);\n\nprint_r($result);\n</code>\n<|/ a |>\n\
    <| a dscore=0 tags=php |>\n<code>\n$array = [-4, -4, 5];\n$max = 3;\n$result =\
    \ array();\nif(count($array) > $max){\n    foreach($array as $item){\n       \
    \ if($item > 0 && $item <= $max){\n            $result[] = $item;\n        }\n\
    \    }\n}\nprint_r($result);\n</code>\n<|/ a |>\n<| c |>\nPlease add some explanation\
    \ to your answer to explain why it does what it does.\n<|/ c |>\n<| a |>\nYou\
    \ can try with array_filter function, \n<code>\n$array = [-4, -4, 5];\n$max =\
    \ 3;\n$result = array_filter($array, function($item){\n    return $item > 0 &&\
    \ $item <= $max;\n});\n</code>\n<|/ a dscore=0 tags=php |>\n<| a tags=php dscore=0\
    \ |>\n<code>\n$array = [-4, -4, 5];\n$max = 3;\n$result = array();\nforeach($array\
    \ as $item){\n    if($item > 0 && $item <= $max){\n        $result[] = $item;\n\
    \    }\n}\nprint_r($result);\n</code>", "    if ($k > count($arr)) return array();\n\
    \    \n    $result = array();\n    foreach ($arr as $key => $value) {\n      \
    \  if ($key == 0) continue;\n        if ($k > 0 && $value < $result[count($result)\
    \ - 1]) $k = count($result) - 1;\n        $result[$key] = $value;\n        if\
    \ ($k == 0) {\n            foreach ($result as $k => $value) {\n             \
    \   $result[$k] = $value > $value ? $value : $k;\n            }\n            break;\n\
    \        }\n    }\n    return $result;\n}\n", "    $maxArray = [];\n    $numCount\
    \ = array_count_values($arr);\n    foreach ($numCount as $num => $count) {\n \
    \       if ($count > $k) {\n            $numCount[$num] = $k - $count;\n     \
    \   }\n    }\n    arsort($numCount);\n    $maxArray = [];\n    foreach ($numCount\
    \ as $num => $count) {\n        $maxArray[] = $num;\n    }\n    return $maxArray;\n\
    }\n\n$num = [-3, -4, 5];\n$k = 3;\n$num2 = maximum($num, $k);\n</code>\n<|/ a\
    \ tags=arrays,php,algorithm dscore=1 |>\n<| c |>\nThank you for your answer. But\
    \ I want to know is there any way to solve this with PHP alone ?\n<|/ c |>\n<|\
    \ c |>\nI've updated the answer with PHP code (just in case you were looking for\
    \ something other than `php` tag)\n<|/ c |>\n<| c |>\nThanks a lot. But this code\
    \ returns the maximum numbers of the array. What I need is getting the maximum\
    \ k numbers of the array.\n<|/ c |>\n<| c |>\nI think I see what you're saying.\
    \ Edited the answer to return k maximum elements of the array\n<|/ c |>\n<| c\
    \ |>\nThank you again. Yes, this is exactly what I want. But I wonder if there\
    \ is any way to solve this with PHP alone. The problem is that I have to solve\
    \ this problem by myself and I don't want to use external libraries.\n<|/ c |>\n\
    <| a tags=arrays,php,algorithm |>\nIn Python this would be:\n<code>\ndef maximum\
    \ (arr,k):\n    maximum = k - 1\n    maximums = []\n    while maximum > 0:\n \
    \       maximum = maximum - 1\n        maximums = []\n        for i in range(len(arr)):\n\
    \            if arr[i] not in maximums:\n                maximums.append(arr[i])\n\
    \        maximum = k - len(maximums)\n    return maximums\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 tags=arrays,php,algorithm |>\n<code>", "    // write your\
    \ code here\n    $result = array();\n    sort($arr);\n    foreach ($arr as $value)\
    \ {\n        $result[$k] = $value;\n        if (--$k === 0) {\n            break;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nGreat!\
    \ The first solution works well, thank you. But the second one does not work -\
    \ I get the wrong result.\n<|/ c |>\n<| c |>\nFor this case `maximum([-3, 2, 1,\
    \ 2, -1, -2, 1], 1)` it should return `[-2, 1]` right?\n<|/ c |>\n<| c |>\nYou\
    \ are correct. The second solution does not work, but thank you for answering\
    \ my question.\n<|/ c |>\n<| a tags=arrays,sorting,php,algorithm |>\nIf I'm understanding\
    \ the question correctly and you want your function to return the highest K values\
    \ from an array, then:\n<code>", "    $maximums = array();\n    $nums = count($arr);\n\
    \n    foreach ($arr as $i => $num) {\n        $maximums[$i] = $num;\n\n      \
    \  if (count($maximums) > $k) {\n            $j = 0;\n\n            foreach ($maximums\
    \ as $num) {\n                if ($num > $maximums[$j]) {\n                  \
    \  $j = $num;\n                }\n            }\n\n            unset($maximums[$j]);\n\
    \        }\n    }\n\n    return $maximums;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=php,arrays |>\nYou can use the following php script to solve your problem:\n\
    <code>\n$array = [-3, 2, 1, 2, -1, -2, 1];\n$k = 2;\n$arrayMax = array();\n$array\
    \ = array_filter($array, function($value) {\n    if (in_array($value, $arrayMax))\
    \ {\n        return FALSE;\n    } else {\n        return $value;\n    }\n});\n\
    $arrayMax = array_slice($array, 0, $k);\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    How are you getting this output? I don't get it.\n<|/ c |>\n<| c |>\nThe question\
    \ was: How to get maximum-k elements in array $array with maximum performance?\n\
    <|/ c |>\n<| a tags=php,arrays |>\nTry this\n<code>\n<?php\n$arr = [-3, -4, 5];\n\
    $k = 2;\n$array = array_slice($arr, max(count($arr) - $k, 0));\nprint_r($array);\n\
    </code>\nOutput\n<code>\nArray ( [0] => -4 [1] => -3 [2] => 5 )\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$arr = [-3, -4, 5];\n$k = 2;\n\
    $a = array_slice($arr,max(array_search($k,array_keys($arr)),0);\nprint_r($a);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nYou have to add $k instead of array_keys($arr)\
    \ in the last line.\n<|/ c |>\n<| c |>\nThanks for your help.\n<|/ c |>\n<| c\
    \ |>\nI fixed my answer.\n<|/ c |>\n<| a dscore=0 |>\nYou could use array_slice:\n\
    <code>\n$array = [-3, 2, 1, 2, -1, -2, 1];\n$k = 2;\n$array = array_slice($array,0,max(array_keys($array),$k));\n\
    </code>\n<|/ a tags=php,arrays |>\n<|", "    $n = count($arr);\n    if ($n < 1)\
    \ {\n        return null;\n    }\n    $result = [];\n    $max_val = 0;\n    $min_val\
    \ = 0;\n    $max_pos = 0;\n    $min_pos = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $pos = $arr[$i] - $min_val;\n        if ($pos > $max_pos) {\n   \
    \         $max_pos = $pos;\n            $max_val = $arr[$i];\n        }\n    \
    \    if ($pos < $min_pos) {\n            $min_pos = $pos;\n            $min_val\
    \ = $arr[$i];\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $max_val;\n        $max_pos -= 1;\n        $max_val -= $min_val;\n    }\n\
    \    return $result;\n}\n\n$testCases = [\n    [[-3, -4, 5], 3],\n    [[4, -4,\
    \ 4], 2],\n    [\n        [-3, 2, 1, 2, -1, -2, 1],\n        1,\n    ],\n];\n\
    for ($testCase of $testCases) {\n    $result = maximum($testCase[0], $testCase[1]);\n\
    \    if ($testCase[2] == 1) {\n        echo \"Failed: \" . $testCase[0] . \"\\\
    n\";\n        echo json_encode($result) . \"\\n\";\n    } else {\n        echo\
    \ \"Passed: \" . $testCase[0] . \"\\n\";\n        echo json_encode($result) .\
    \ \"\\n\";\n    }\n}\n</code>\n<|/ a tags=algorithm,php,sorting,arrays dscore=2\
    \ |>\n<| a dscore=1 |>\nThe solution is similar to the above answers but slightly\
    \ different \n<code>\npublic static function maximums($arr, $k, $reverse = false)\
    \ {\n    $maximum = [];\n    $reversed = $reverse;\n    $min = min($arr);\n  \
    \  $max = max($arr);\n\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $sum = 0;\n        foreach ($arr as $value) {\n           \
    \ if ($i < $value) {\n                $sum += $value;\n            } else if ($value\
    \ > $value) {\n                $sum -= $value;\n            }\n            if\
    \ ($sum > $max) {\n                $sum -= $max - $min;\n                if ($reversed)\
    \ {\n                    $sum = $max - $sum;\n                    $reversed =\
    \ false;\n                }\n                $max = $max;\n                $min\
    \ = $min;\n            } else if ($sum < $min) {\n                $sum -= $min\
    \ - $max;\n                if ($reversed) {\n                    $sum = $min -\
    \ $sum;\n                    $reversed = false;\n                }\n         \
    \       $min = $min;\n                $max", "    $max = array();\n    foreach\
    \ ($arr as $key => $val) {\n        if ($key >= $k) {\n            $max[] = $val;\n\
    \            unset($arr[$key]);\n            $k--;\n        }\n    }\n    return\
    \ $max;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n<?php\n\nclass\
    \ MaxK\n{\n\n    private $arr;\n    private $k;\n\n    public function __construct($arr,\
    \ $k)\n    {\n        $this->arr   = $arr;\n        $this->k     = $k;\n    }\n\
    \n    public function maxArr()\n    {\n        $maxArr  = array();\n\n       \
    \ foreach($this->arr as $key => $value)\n        {\n            if($key == $this->k)\n\
    \            {\n                $maxArr[] = $value;\n                unset($this->arr[$key]);\n\
    \                $this->k--;\n            }\n        }\n\n        return $maxArr;\n\
    \    }\n}\n\n$arr    = array(-3, -4, 5);\n$k      = 3;\n\n$maxArr = new MaxK($arr,\
    \ $k);\n\necho \"<pre>\";\nprint_r($maxArr->maxArr());\n</code>\n<|/ a tags=algorithm,arrays,php\
    \ |>\n<| a tags=algorithm,arrays,php dscore=1 |>\n<code>\n$max = [];\n\nfor ($i=0;\
    \ $i<count($arr); $i++) {\n    for ($j=$i+1; $j<count($arr); $j++) {\n       \
    \ if($arr[$i] > $arr[$j]) {\n            $temp = $arr[$i];\n            $arr[$i]\
    \ = $arr[$j];\n            $arr[$j] = $temp;\n        }\n    }\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nPlease add some explanation.\n<|/ c |>\n<| c |>\nThe code iterates\
    \ through each value from the first array one at a time, compares it to the remaining\
    \ values, sorts them, and puts them into the new array.\n<|/ c |>\n<| a |>\n<code>\n\
    class MaxK\n{\n\n    private $arr;\n    private $k;\n\n    public function __construct($arr,\
    \ $k)\n    {\n        $this->arr   = $arr;\n        $this->k     = $k;\n    }\n\
    \n    public function maxArr()\n    {\n        $maxArr  = array();\n\n       \
    \ foreach($this->arr as $key => $value)\n        {\n            if($key == $this->k)\n\
    \            {\n                $maxArr[] = $value;\n                unset($this->arr[$key]);\n\
    \                $this->k--;\n            }\n", "    $length = count($arr);\n\
    \    $sorted = array();\n    foreach ($arr as $key => $value) {\n        if ($key\
    \ === $length - $k) {\n            $sorted[] = $value;\n        }\n    }\n   \
    \ return $sorted;\n}\n</code>\n<|/ a |>\n<| c |>\nWhile this might work, it's\
    \ very inefficient and needlessly complicated. Using a [`sort` function](https://www.php.net/manual/en/function.sort.php)\
    \ would suffice.\n<|/ c |>\n<| c |>\nYeah I agree, sort is much better here.\n\
    <|/ c |>\n<| c |>\n: What about `array_slice`? It would also require only one\
    \ loop :p\n<|/ c |>\n<| c |>\nBut why would you use that one loop when there is\
    \ an inbuilt function which does it all ? :)\n<|/ c |>\n<| c |>\n: Yeah I know,\
    \ I missed that one :p\n<|/ c |>\n<| a tags=arrays,sorting,php |>\nThis is a more\
    \ generic solution:\n<code>", "    if ($k > count($arr)) {\n        return array();\n\
    \    }\n\n    $arr = array_reverse($arr);\n    $result = array();\n    $tmp =\
    \ $arr[$k - 1];\n\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $tmp;\n\
    \        $tmp = $arr[$i];\n    }\n\n    return array_reverse($result);\n}\n\n\
    $arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\necho \"maximum($arr, $k) = \" . implode(\"\
    , \", maximum($arr, $k));", "    $max = $arr[0];\n    for ($i = 1; $i < $k; $i++)\
    \ {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n\
    \    }\n    return $max;\n}\n", "    $arr = array_flip($arr); // remap the array\
    \ from negative to positive so \n                                  // that we\
    \ can sort the array later\n    $maximums = array();\n\n    for ($i = 0; $i <\
    \ $k; ++$i) {\n        $maximums[] = max($arr);\n    }\n    arsort($maximums);\
    \ // sort the maximums array\n    return $maximums;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThe question says \"no additional memory is allowed\" so I don't think\
    \ your answer can work.\n<|/ c |>\n<| c |>\nHow so? `maximum` returns `int[]`\n\
    <|/ c |>\n<| c |>\nI see it returns `int[]` now, but you also say \"no additional\
    \ memory is allowed\".  How do you know that `maximum` doesn't require additional\
    \ memory?  How do you know that \"the elements in the array will be in the range\
    \ of [-1000, 1000]\"?\n<|/ c |>\n<| c |>\nI updated my answer to address these\
    \ issues and explain why your solution doesn't work (though it may still be valid).\n\
    <|/ c |>\n<| c |>\nYour updated solution still doesn't work.  It doesn't sort\
    \ the array correctly.  Please read my note in the question.\n<|/ c |>\n<| a dscore=2\
    \ tags=arrays,algorithm |>\nThe most efficient solution is O(NlogN) and O(N).\n\
    <code>\npublic class Maximum {\n\n    public static int[] maximum(int[] arr, int\
    \ k) {\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(k, Integer::compare);\n\
    \        for(int num: arr) {\n            maxHeap.offer(num);\n        }\n   \
    \     int[] ret = new int[k];\n        for(int i = 0; i < k; i++) {\n        \
    \    ret[i] = maxHeap.poll();\n        }\n        return ret;\n    }\n}\n</code>\n\
    <|/ a |>\n<| a tags=arrays,algorithm |>\nYou can use binary search to get the\
    \ first and last element of the array and use them as the upper bound of binary\
    \ search. The final output will be the element at mid.\n<code>\nint last = 0;\n\
    int first = 0;\nint mid;\nint index = 0;\nint max = Integer.MIN_VALUE;\nwhile(\
    \ last < inputArray.length ){\n    mid = (last + first) / 2;\n    if( inputArray[mid]\
    \ > max ){\n        max = inputArray[mid];\n        index = mid;\n    }else{\n\
    \        first = mid;\n    }\n    last = mid;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <|", "    sort($arr);\n    $res = array();\n    $stack = array();\n    foreach\
    \ ($arr as $key => $value) {\n        array_push($stack, $value);\n        while\
    \ ($stack) {\n            $tmp = $stack[count($stack) - 1];\n            if ($k\
    \ > 1) {\n                $tmp = max($tmp, $stack[count($stack) - 2]);\n     \
    \       }\n            array_push($res, $tmp);\n            array_pop($stack);\n\
    \        }\n    }\n    return $res;\n}\n\n$tests = array(\n    array(array(-3,\
    \ -4, 5), 3),\n    array(array(4, -4, 4), 2),\n    array(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n);\nforeach ($tests as $test) {\n    var_dump(maximum($test[0],\
    \ $test[1]));\n}\n", "    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    array_push($max, max($arr));\n    }\n    return $max;\n}", "    $result =\
    \ array();\n    $min = 0;\n    $max = 0;\n    $n = 0;\n    \n    foreach($arr\
    \ as $k => $val) {\n        if($val > $max) {\n            $max = $val;\n    \
    \    }\n        \n        if($val < $min) {\n            $min = $val;\n      \
    \  }\n        \n        if($val != 0) {\n            $n++;\n        }\n    }\n\
    \    \n    $max = ceil($max/($k));\n    $min = floor($min/($k));\n    $min = $min-1;\n\
    \    \n    for($i=0; $i<$k; $i++) {\n        $result[$i] = $arr[$min+$i];\n  \
    \  }\n    \n    $result[$k] = $max;\n    \n    return $result;\n}\n\n$n = [5,-3,-100,3,-2,4,7,8,9,100];\n\
    $k = 3;\n$result = maximum($n,$k);\nprint_r($result);\n</code>\n<|/ a |>\n<| a\
    \ tags=php,sorting,algorithm dscore=0 |>\n<code>\n<?php", "    if ($k > count($arr))\
    \ {\n        return array();\n    }\n\n    $result = array();\n    $i = $j = 0;\n\
    \    foreach ($arr as $num) {\n        if ($i > $j) $result[] = $num;\n      \
    \  elseif ($j > $k) $result[] = $num;\n        else if ($num > $result[$j]) $result[$j]\
    \ = $num;\n        else $j++;\n        $i++;\n    }\n\n    return $result;\n}\n\
    </code>\n<|/ a dscore=1 tags=php,sorting,algorithm |>\n<| a dscore=1 |>\nYou can\
    \ use following code for this:\n<code>\n<?php\n$arr = array(6, 5, 3, 1);\n$max\
    \ = 10;\n$size = count($arr);\n$a = array();\n$count = 0;\n$index = 0;\n$temp\
    \ = 0;\nfor($i=0;$i<$max;$i++) {\n    for($j=0;$j<$size;$j++) {\n        if($index\
    \ == $i) {\n            $a[$i] = $arr[$j];\n            $index++;\n          \
    \  $j--;\n        }\n    }\n    for($j=0;$j<$size;$j++) {\n        if($arr[$j]\
    \ > $a[$i]) {\n            $temp = $arr[$j];\n            $arr[$j] = $a[$i];\n\
    \            $a[$i] = $temp;\n            $index++;\n            $j--;\n     \
    \   }\n    }\n}\necho \"<pre>\";\nprint_r($a);", "    $res = array();\n    $len\
    \ = count($arr);\n    $i = 0;\n    while($i < $k) {\n        if(!is_array($arr[$i]))\
    \ {\n            if($arr[$i] > $arr[$i - 1]) {\n                $res[] = $arr[$i\
    \ - 1];\n            }\n        } else {\n            $curr = $arr[$i];\n    \
    \        $next = array_shift($arr);\n            while(is_array($next)) {\n  \
    \              if($curr > $next[0]) {\n                    $res[] = $next[0];\n\
    \                }\n                $next = array_shift($next);\n            }\n\
    \            $res[] = $curr;\n        }\n        $i++;\n    }\n    return $res;\n\
    }", "    $maxes = array();\n    for($i = 0; $i < $k; $i++) {\n        $maxes[]\
    \ = $arr[$i];\n    }\n    sort($maxes);\n    return $maxes;\n}\n</code>\n<|/ a\
    \ |>\n<| a dscore=0 |>\nThis solution uses array_multisort.\nIt takes $array and\
    \ $k as inputs.\nThe method uses array_multisort function of PHP (http://php.net/manual/en/function.array-multisort.php).\n\
    It sorts the array in descending order from greatest to lowest element.\narray_multisort()\
    \ expects parameter 2 to be an array. It will sort this array in descending order\
    \ from greatest to lowest element. The sorting will happen first on the sorted\
    \ array and then in the original array.\nThe first argument of array_multisort\
    \ is array to be sorted. This can be achieved by the following code - \n<code>\n\
    $sorted = array();\nforeach($array as $element) {\n    $sorted[] = $element;\n\
    }\n</code>\nThis code will sort an array in descending order from greatest to\
    \ lowest element.\nNow we need to sort the original array using this sorted array.\n\
    To achieve this the code will use the function array_multisort as follows - \n\
    <code>\narray_multisort($sorted, SORT_DESC, $array);\n</code>\nThe second argument\
    \ of array_multisort is SORT_DESC. This means that sort will be done in descending\
    \ order i.e. from least to greatest element.\nThe third argument of array_multisort\
    \ is array to be sorted. This can be achieved by the following code - \n<code>\n\
    $sorted = array();\nforeach($array as $element) {\n    $sorted[] = $element;\n\
    }\n</code>\nThe method uses array_multisort function of PHP (http://php.net/manual/en/function.array-multisort.php).\n\
    It sorts the array in descending order from greatest to lowest element.\narray_multisort()\
    \ expects parameter 2 to be an array. It will sort this array in descending order\
    \ from greatest to lowest element. The sorting will happen first on the sorted\
    \ array and then in the original array.\nThe first argument of array_multisort\
    \ is array to be sorted. This can be achieved by the following code - \n<code>\n\
    $sorted = array();\nforeach($array as $element) {\n    $sorted[] = $element;\n\
    }\n</code>\nThis code will sort an array in descending order from greatest to\
    \ lowest element.\nNow we need to sort the original array using this sorted array.\n\
    To achieve this the code will use the function array_multisort as follows - \n\
    <code>\narray_multi", "    if (!is_array($arr)) {\n        return false;\n   \
    \ }\n    if (!isset($arr[0])) {\n        return false;\n    }\n    if (!is_int($k))\
    \ {\n        return false;\n    }\n    if (!isset($k)) {\n        return false;\n\
    \    }\n    if (!is_int($k)) {\n        return false;\n    }\n    $res = array();\n\
    \    $m = $arr[0];\n    for ($i = 1; $i < $k; $i++) {\n        if ($m < $arr[$i])\
    \ {\n            $m = $arr[$i];\n        }\n        $res[] = $m;\n    }\n    return\
    \ $res;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nSorry, but how does\
    \ this answer the question? It doesn't even return an array.\n<|/ c |>\n<| c |>\n\
    It seems like you are looking for a way to get the \"Maximum element in a subarray\
    \ given a specific number of elements in the subarray\". If that's true, you can\
    \ just do `$arr = array_slice($arr, 0, $k);`\n<|/ c |>\n<| c |>\n`function maxSlice($arr,$k){\
    \ $arr = array_slice($arr, 0, $k); return $arr; }`\n<|/ c |>\n<| c |>\nI made\
    \ it more simple, take a look at my answer\n<|/ c |>\n<| c |>\nThis does not answer\
    \ the question. I would like to return a sorted array of length k. Your code returns\
    \ an array, but that is already what the question asks for.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThis question has been answered here. I adapted it for php.\n<code>", " \
    \ $sorted = array_merge($arr);\n  for ($i = 0; $i < $k; ++$i) {\n    foreach ($sorted\
    \ as $key => $val) {\n      $sorted[$key] = $sorted[$key] > ($sorted[($key + 1)\
    \ % $k] ?\n      $sorted[$key] : ($sorted[($key + 1) % $k]));\n    }\n  }\n  return\
    \ $sorted;\n}\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\nprint_r(maximum($arr, 3));",
  "    sort($arr);\n    return array_slice($arr, 0, $k);\n}\n", "    $result = [];\n\
    \    $largest = $arr[0];\n    $count = 1;\n    for($i = 1; $i < $k; $i++) {\n\
    \        $largest = max($largest, $arr[$i]);\n        if($arr[$i] == $largest)\
    \ {\n            $count++;\n        } else {\n            $result[$i] = $largest;\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = array();\n    sort($arr);\n\
    \    $k = 0;\n    foreach ($arr as $key => $value) {\n        $result[$k++] =\
    \ $value;\n        if ($k == $k) {\n            break;\n        }\n    }\n   \
    \ return $result;\n}\n</code>\n<|/ a tags=algorithm,sorting,php,arrays dscore=1\
    \ |>\n<| c |>\nI thought that sort was a PHP function?\n<|/ c |>\n<| c |>\n: Yes\
    \ it is. I missed it because i read your solution wrong.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    return $k;\n}\n", "    $result = [];\n    foreach($arr as\
    \ $v) {\n        $result[] = $v;\n    }\n    sort($result);\n    return array_slice($result,\
    \ 0, $k);\n}\n", "    $arr2 = array_slice($arr, 0, $k);\n    $max = $arr2;\n \
    \   for ($i = $k; $i >= 0; $i--) {\n        $j = array_search($max[0], $arr2);\n\
    \        if ($j < 0)\n            $j = -$j;\n        if ($i < $j) {\n        \
    \    $max[0] = $arr2[$j];\n            $arr2[$j] = $max[0];\n            $max[1]\
    \ = array_slice($arr2, $j + 1);\n        }\n    }\n    return $max;\n}\n", " \
    \   $count = 0;\n    $max = $arr[0];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n    }\n\
    \    return $max;\n}\n", "    $nums = array_fill(0, $k, 0);\n    $max_nums = 0;\n\
    \    foreach($arr as $num) {\n        $nums[$num] = $num + 1;\n        if($nums[$num]\
    \ > $max_nums) {\n            $max_nums = $nums[$num];\n        }\n    }\n\n \
    \   for($i = 0; $i < $k; $i++) {\n        $arr[$i] = $max_nums - $nums[$i];\n\
    \    }\n    return $arr;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This code works. It's a very clever use of array_fill() to do this! A couple comments:\
    \ 1. When you call array_fill(), it takes in three parameters; the first one is\
    \ the initial value for the array, the second is the size of each element, and\
    \ the third is the default value of each element. So in our example, array_fill(0,\
    \ $k, 0); would set $nums to an array of size $k with each element equal to 0.\
    \ 2. You set $max_nums to 0 at the beginning of the function, however, $max_nums\
    \ isn't modified in any way until the end of the function. That means when you\
    \ call array_fill() again, the array will still be filled with 0s.\n<|/ c |>\n\
    <| c |>\nI should also note that because $max_nums is being set before $nums is\
    \ modified in the loop, it is possible for $nums to still be unchanged when $max_nums\
    \ is used in the $arr variable in the foreach loop. This means $arr will be unchanged\
    \ as well, unless you copy $nums into $arr after the foreach loop.\n<|/ c |>\n\
    <| c |>\nThanks for your comment. I have edited my answer. Maybe it's more understandable.\
    \ :)\n<|/ c |>\n<| c |>\nI understand what you're saying, but I don't see how\
    \ it helps. As I explained in my answer, the only thing that matters is the maximum\
    \ number. With your code, you could not use the maximum number for the first k\
    \ elements of the array. Besides, I think my code should be more efficient in\
    \ comparison to yours. Anyway, your method works because you've got the maximum\
    \ number in the first k elements. That's why I didn't consider it. I just thought\
    \ I should share it.\n<|/ c |>\n<| c |>\nThanks for your comment. I know what\
    \ you mean. I think my code is more clear. It is a little bit more efficient because\
    \ you don't have to count the maximum number every time.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\nAnother solution using array_slice()\n<code>\n<?php\n", "    $res = array();\n\
    \    $count = count($arr);\n\n    // Sort the array\n    $arr = sort($arr);\n\n\
    \    // Build result array\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n\n    for ($i = 0; $i < $count; $i++) {\n        $min =\
    \ array_shift($arr);\n        if ($i < $k - 1) {\n            while($i < $k -\
    \ 1 && $arr[$i] == $min) {\n                $i++;\n            }\n        }\n\n\
    \        $res[] = $min;\n    }\n\n    return $res;\n}\n", "    $result = array();\n\
    \    \n    $maximum = 0;\n    $index = -1;\n\n    // Sort by descending order\
    \ based on integers\n    sort($arr);\n\n    // Loop until k\n    for($i = 0; $i\
    \ < $k; $i++) {\n        // If index is out of range break\n        if($index\
    \ < 0) {\n            break;\n        }\n\n        // If current integer is greater\
    \ than maximum, save it and update index\n        if($arr[$index] > $maximum)\
    \ {\n            $maximum = $arr[$index];\n            $index++;\n        }\n\
    \    }\n\n    // Push the maximum integer after all the iteration\n    if($index\
    \ >= 0) {\n        $result = array_slice($arr, $index, 1);\n    }\n\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php", "    $nums\
    \ = array_flip(array_slice($arr, -$k));\n    return array_flip(ksort($nums, SORT_DESC));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI think this is an elegant answer, thank you\n\
    <|/ c |>\n<| c |>\nNice.  I like the use of ksort() to get the desired order.\n\
    <|/ c |>\n<| a |>\nHere is another solution using array_map() and array_slice().\
    \ I'm sure it could be optimized even more, but I find it very readable and understandable.\n\
    The function array_max_slice() takes an array of values, the index, and a maximum\
    \ value. It slices the array up to that max value and return the first element\
    \ of the slice. As soon as the slice is empty or less, it returns false.\nThe\
    \ function array_max_index() takes an array of values and an index. It finds the\
    \ slice of the array up to that index. If the slice is empty or less, it returns\
    \ false.\nThe function array_max_in_index() takes an array of values and an index.\
    \ Using array_max_index() it returns false if there is no value at the specified\
    \ index or if there is no value at all or the array is empty. It returns the maximum\
    \ value at the specified index or false if the array is empty or the specified\
    \ index is out of range.\n<code>", "  $newArr = array_chunk($arr, ceil($k/count($arr)));\n\
    \  return $newArr[count($newArr) - 1];\n}", "    sort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n", "    $ans = array($arr[0]);\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max_elem = $arr[0];\n        for ($j = 1; $j < $k; $j++) {\n   \
    \         if ($arr[$j] < $max_elem) {\n                $max_elem = $arr[$j];\n\
    \            }\n        }\n        $ans[] = $max_elem;\n    }\n    return $ans;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\nMy solution to the problem without\
    \ using any loops. Hope it helps someone. \n<code>\n<?php\n", "    // write your\
    \ code here\n    $max = array();\n    for($i=0; $i < $k; $i++){\n        $max[]\
    \ = $arr[$i];\n    }\n    sort($max);\n    return $max;\n}\n", "    // Your code\
    \ here\n    $result = array_slice($arr, 0, $k);\n    sort($arr);\n    sort($result);\n\
    \    return array_slice($result, 0, $k);\n}\n\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a tags=php,arrays,algorithm |>\nI have implemented this in Python\n<code>\n\
    a = [-3, -4, 5]\nk = 3\nsorted_a = sorted(a)\nresult = sorted_a[k:]\nprint(result)\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,algorithm dscore=1 |>\nSince\
    \ you have the constraint of k <= len(arr), we can use the following algorithm:\n\
    \nSort the array in ascending order\nCreate a temporary array\nLoop through the\
    \ array and append all elements from the temporary array to the result array until\
    \ we have k elements.\n\nPython implementation with sample data as requested:\n\
    <code>\ndef max_k_elements(arr, k):\n    sorted_arr = sorted(arr)\n    result\
    \ = []\n    temp = [0] * k\n    for elem in sorted_arr:\n        temp[0] += 1\n\
    \        if temp[0] < k:\n            result.append(elem)\n            temp[0]\
    \ -= 1\n    if temp[0] < k:\n        result.append(sorted_arr[temp[0]])\n    return\
    \ result\n\narr = [-3, -4, 5]\nprint(max_k_elements(arr, 3))\n</code>\nThe code\
    \ first sorts the array and then counts how many elements from the array need\
    \ to be appended to the result. Once the count reaches k, the remaining elements\
    \ are appended to the result array.\n<|/ a |>\n<| c |>\nThis is a very interesting\
    \ idea, but could you provide an implementation of this algorithm?\n<|/ c |>\n\
    <| c |>\nEdited the question to include Python implementation\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>", "    $result = [];\n    $n = count($arr);\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $result[$i] = max($arr[$i]);\n    }\n    for\
    \ ($i = $k - 1, $j = 0; $i < $k; $i++, $j++) {\n        $result[$j] = max($arr[$i],\
    \ $result[$j]);\n    }\n    return $result;\n}\n", "    $result = array();\n \
    \   foreach ($arr as $v) {\n        $result[] = maxWithK($v, $k);\n    }\n   \
    \ return $result;\n}\n", "    $result = [];\n    $sorted_arr = sort($arr);\n \
    \   \n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $sorted_arr[$i];\n\
    \    }\n    \n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe\
    \ question asked for an array with values sorted in ascending order.\n<|/ c |>\n\
    <| a dscore=0 tags=arrays,sorting,php |>\nA simple way is to sort your array and\
    \ then slice the result with array_slice()\n<code>", "    $n = count($arr);\n\
    \    $result = array();\n    for($i = 0; $i < $k; $i++) {\n        $result[] =\
    \ $arr[$i];\n    }\n    for($i = 0; $i < $n - $k; $i++) {\n        $min = INF;\n\
    \        foreach ($result as $key => $val) {\n            if ($val < $min) {\n\
    \                $min = $val;\n            }\n        }\n        $result[] = $min;\n\
    \    }\n    return $result;\n}\n\n/**\n * Returns the sum of the elements of an\
    \ array.\n *\n * @param array $arr An array of numbers.\n * @return integer The\
    \ sum of the numbers in the array.\n */", "    $result = array();\n    for ($i=0;\
    \ $i<$k; $i++) {\n        $max_key = -1;\n        foreach ($arr as $v) {\n   \
    \         if ($v > $max_key) {\n                $max_key = $v;\n            }\n\
    \        }\n        $result[] = $max_key;\n    }\n    return $result;\n}\n", " \
    \   $arr = array_reverse($arr);\n    $result = [];\n    foreach ($arr as $k =>\
    \ $v) {\n        $result[] = $v;\n        if (count($result) == $k) {\n      \
    \      break;\n        }\n    }\n    return array_reverse($result);\n}", "   \
    \ $result = [];\n    sort($arr);\n    if ($k > count($arr)) {\n        return\
    \ $result;\n    }\n    $max = array_slice($arr, 0, $k);\n    $result[] = array_pop($arr);\n\
    \    foreach ($arr as $value) {\n        if ($value > $max[0]) {\n           \
    \ $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$arr = [5,\
    \ 8, 6, 2, 3, 7, -10, 4];\n$arr2 = [-8, -9, -8, 6, -9, -10, 3, 7, -10, 4];\n$arr3\
    \ = [-8, -9, -8, 6, -9, -10, 3, 7, -10, 4];\n\n$k = 4;\nvar_dump(maximum($arr,\
    \ $k)); // [-10, -8, -7, -5, -4, -3, -2, 2, 3]\nvar_dump(maximum($arr2, $k));\
    \ // [-8, -9, -10, -7, -9, -10, -7, -9, -10, -8]\nvar_dump(maximum($arr3, $k));\
    \ // [-8, -9, -10, -7, -9, -10, -7, -9, -10, -8]", "    $result = array();\n\n\
    \    foreach($arr as $value) {\n        $temp = $result;\n        for ($i = 0;\
    \ $i < $k; ++$i) {\n            foreach($temp as $item) {\n                if\
    \ ($item<$value) {\n                    $temp = array($item);\n              \
    \      break;\n                }\n            }\n        }\n        $result =\
    \ $temp;\n    }\n\n    return $result;\n}\n</code>\n<|/ a dscore=1 tags=php,algorithm\
    \ |>\n<| a |>\nThis question is similar to this question :\nHow to get a max of\
    \ array with a given value\nI made it a little simpler.\n<|/ a dscore=0 tags=php,algorithm\
    \ |>\n<| a tags=php,algorithm |>\nYou could also use array_filter to filter the\
    \ array and then use arsort() to sort the array.\n<code>\n<?php\n\n$arr = array(5,\
    \ -1, 4, 3, -7, -6, 1, -1, -6, 8);\n$k = 4; //number of largest numbers\n$filter\
    \ = array_filter($arr, function ($value) use ($k) {\n    return $value > 0;\n\
    });\narsort($filter);\necho array_slice($filter, 0, $k);\n", "    $maxArray =\
    \ array();\n    \n    sort($arr);\n    \n    for($i = 0; $i < $k; $i++){\n   \
    \     array_push($maxArray, $arr[$i]);\n    }\n    \n    return $maxArray;\n}\n",
  "    $arr1 = $arr;\n    for ($j = 0; $j < $k; $j++) {\n        array_push($arr1,\
    \ max($arr1));\n    }\n    return $arr1;\n}\n", "    $n = count($arr);\n    $m\
    \ = ceil($n/$k);\n    for($i = 0; $i < $m; $i++) {\n        sort($arr);\n    \
    \    $arr1 = array_slice($arr, 0, $i);\n        $arr2 = array_slice($arr, $i,\
    \ $k);\n        sort($arr2);\n        $arr1 = $arr1 + $arr2;\n    }\n    sort($arr);\n\
    \    return $arr;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
