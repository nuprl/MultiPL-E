name: HumanEval_14_all_prefixes
language: php
results:
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $length = mb_strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $result[$i] = $string[$i];\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmp4ljwhwqu.php:7\nStack trace:\n#0 /tmp/tmp4ljwhwqu.php(14): all_prefixes('')\n\
    #1 /tmp/tmp4ljwhwqu.php(18): candidate('')\n#2 /tmp/tmp4ljwhwqu.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4ljwhwqu.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $shortest = strlen($string);\n    $prefixes = array();\n    $last = substr($string,\
    \ 0, 1);\n    for ($i = $shortest; $i > 0; $i--) {\n        $last = substr($string,\
    \ $i - 1, 1);\n        $prefixes[] = $last;\n    }\n    return array_reverse($prefixes);\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisqr72hq.php:22\n\
    Stack trace:\n#0 /tmp/tmpisqr72hq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpisqr72hq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51ipvfq0.php:19\n\
    Stack trace:\n#0 /tmp/tmp51ipvfq0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp51ipvfq0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $len = strlen($string);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $prefixes[] = $string[$i];\n    }\n    return $prefixes;\n\
    }\n$prefixes = all_prefixes('abc');\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp557e8mgc.php:20\n\
    Stack trace:\n#0 /tmp/tmp557e8mgc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp557e8mgc.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $string = $string . \"\";\n    $all_prefixes = array();\n    $max_len\
    \ = strlen($string);\n    $prefixes = array();\n\n    for ($i = 0; $i < $max_len;\
    \ $i++) {\n        if ($i == 0) {\n            $prefixes[] = $string[$i];\n  \
    \          $all_prefixes[] = $string[$i];\n            continue;\n        }\n\
    \        $prefixes[] = $string[$i];\n        $all_prefixes[] = $string[$i];\n\
    \        $all_prefixes[] = $string[$i - 1];\n    }\n\n    return $all_prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe24bygo8.php:31\n\
    Stack trace:\n#0 /tmp/tmpe24bygo8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpe24bygo8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if ($string === '') {\n        return array();\n    }\n    $retval =\
    \ array();\n    $prefix_length = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        $prefix = substr($string, 0, $i);\n        if ($prefix === $string)\
    \ {\n            $retval[] = $prefix;\n        }\n        if ($prefix) {\n   \
    \         $prefix_length++;\n        }\n    }\n    if ($prefix_length > $i) {\n\
    \        $retval[] = substr($string, $i);\n    }\n    return $retval;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuz2ws8sz.php:32\n\
    Stack trace:\n#0 /tmp/tmpuz2ws8sz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuz2ws8sz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        $prefixes[] = substr($string, 0, $i);\n    }\n\n    return array_reverse($prefixes);\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexl4_dyj.php:21\n\
    Stack trace:\n#0 /tmp/tmpexl4_dyj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpexl4_dyj.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    list($short, $long) = $string ? explode(',', $string) : array();\n  \
    \  return array_map(function($s) {\n        return $short ? substr($s, 0, $short)\
    \ : $s;\n    }, $long);\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, null given\
    \ in /tmp/tmpzwbzo5jx.php on line 9\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzwbzo5jx.php:17\nStack trace:\n#0 /tmp/tmpzwbzo5jx.php(22): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzwbzo5jx.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $shortest = $length = strlen($string);\n  \
    \  foreach (str_split($string, $length) as $character) {\n        if ($character\
    \ == '') {\n            $prefixes[] = '';\n            break;\n        }\n   \
    \     $prefixes[] = $character;\n        if ($length >= strlen($string) - strlen($character))\
    \ {\n            $shortest = $length;\n        }\n    }\n    if ($length < $shortest)\
    \ {\n        return $prefixes;\n    }\n    return array_merge(all_prefixes(substr($string,\
    \ 0, $length)), $prefixes);\n}\n</code>\n<|/ a |>\n<| a dscore=4 tags=php,string\
    \ |>\n<code>\n<?php\n\n    $string = \"abcde\";\n    echo implode(\"\", $string);\n\
    </code>\n<|/ a |>\n<| a tags=php,string |>\n<code>\n$str='abc';\necho implode('',$str);\n\
    </code>\n<|/ a dscore=3 |>\n<| a |>\nSimple answer if you just want to remove\
    \ leading spaces from a string without using explode()\n<code>\n$string = \"a\
    \   bc\";\necho str_replace(' ', '', $string);\n</code>\n<|/ a tags=php,string\
    \ dscore=3 |>\n<| c |>\nThis should be the accepted answer as it doesn't use unnecessary\
    \ variables and a loop.\n<|/ c |>\n<| c |>\nThis is actually the best solution\
    \ in most cases.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n<?php\n$string = \"a   bc\"\
    ;\necho ltrim($string);\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = explode(\" \",$string);\n$string = '';\nforeach($string\
    \ as $value){\n    $string .= $value;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string\
    \ dscore=2 |>\n<code>\n$string = \"a   bc\";\necho str_replace(' ', '', $string);\n\
    </code>\n<|/ a |>\n<| c |>\nThis will remove spaces from the beginning and end\
    \ of the string. Not just the ones separated by spaces.\n<|/ c |>\n<| c |>\nThis\
    \ would remove spaces around the words also.\n<|/ c |>\n<| c |>\nNope. `str_replace`\
    \ will replace all the occurrences of the string you provide.\n<|/ c |>\n<| a\
    \ dscore=2 tags=php,string \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3nplaign.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (empty($string)) {\n        return array();\n    }\n    if (strlen($string)\
    \ == 1) {\n        return array($string);\n    }\n    $prefixes = array();\n \
    \   $prefixes[] = $string;\n    $length = strlen($string) - 1;\n    $min_length\
    \ = min(strlen($string), 8);\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ $prefixes[] = substr($string, $i, 1);\n    }\n    $prefixes = array_merge($prefixes,\
    \ $all_prefixes(substr($string, $min_length)));\n    return $prefixes;\n}\n</code>\n\
    And here is another way to do it with a recursive function and array_slice():\n\
    <code>\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc5onecxj.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0, $str_len = strlen($string); $i < $str_len;\
    \ $i++) {\n    $char = $string[$i];\n    // The first character must not be a\
    \ letter or an underscore\n    if ($char !== preg_replace('/^[^a-zA-Z_]+/', '',\
    \ $char)) {\n      $prefixes[] = $char;\n    }\n  }\n  return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44e0b6pl.php:23\n\
    Stack trace:\n#0 /tmp/tmp44e0b6pl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp44e0b6pl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$array = array();\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t$array\
    \ = array_merge($array, array_slice(str_split($string), $i, strlen($string)));\n\
    \t}\n\treturn array_unique($array);\n}\n\nfunction candidate(...$args) {\n   \
    \ return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvrso2l7c.php:19\n\
    Stack trace:\n#0 /tmp/tmpvrso2l7c.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvrso2l7c.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = 0;\n    $prefix = null;\n\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($i < $length) {\n          \
    \  $prefix = $prefix.$string[$i];\n        } else {\n            $length++;\n\
    \        }\n        if ($length == strlen($string)) {\n            $prefixes[]\
    \ = $prefix;\n            $length = 0;\n            $prefix = null;\n        }\n\
    \    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6z_ehbt.php:31\n\
    Stack trace:\n#0 /tmp/tmpr6z_ehbt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpr6z_ehbt.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1kjoi48.php:19\n\
    Stack trace:\n#0 /tmp/tmpj1kjoi48.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpj1kjoi48.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length      = strlen($string);\n    $all_prefixes = array();\n\n   \
    \ for ($i = 0; $i < $length; $i++) {\n        $all_prefixes[] = substr($string,\
    \ 0, $i);\n    }\n\n    return $all_prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpean_8kxk.php:22\n\
    Stack trace:\n#0 /tmp/tmpean_8kxk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpean_8kxk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n    foreach (explode($string, '') as $s) {\n    \
    \    if ($s == '') continue;\n        foreach ($prefix as $prefix) {\n       \
    \     if (substr($s, 0, strlen($prefix)) == $prefix) break;\n        }\n     \
    \   $prefix[] = $s;\n    }\n    return $prefix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmprmvsgeaa.php on line 7\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmprmvsgeaa.php on\
    \ line 7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmvsgeaa.php:23\n\
    Stack trace:\n#0 /tmp/tmprmvsgeaa.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprmvsgeaa.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $output = array();\n    $prefix_len = strlen($string);\n    foreach (str_split($string)\
    \ as $char) {\n        $output[] = substr($string, 0, $prefix_len);\n    }\n \
    \   return $output;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvt_olbxf.php:18\n\
    Stack trace:\n#0 /tmp/tmpvt_olbxf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvt_olbxf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(\n        'trim',\n        array_slice(explode('', preg_replace('/\
    \ +/', '', $string)), 0, -1)\n    );\n}\n</code>\n<|/ a dscore=4 tags=php |>\n\
    <| c |>\nI like your use of array_map, since this makes it clear that you're doing\
    \ a map on an array.\n<|/ c |>\n<| c |>\nThis is elegant, but a little confusing.\
    \ Would anyone be able to explain the `array_map` part?\n<|/ c |>\n<| c |>\nThis\
    \ assumes that there will always be a space between the two words you are checking.\
    \ If that's the case, then this is the perfect solution. If there is no space\
    \ then this answer won't work.\n<|/ c |>\n<| c |>\nI prefer this answer, as it\
    \ allows to create custom prefix functions, and is also a lot more straightforward.\n\
    <|/ c |>\n<| c |>\nI like the `array_map` idea. Too bad it doesn't work with multibyte\
    \ languages (in php it is UTF-8 by default). So I use the following to get around\
    \ that: `$string = mb_convert_encoding($string, \"UTF-8\");` before applying it.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere's a quick one:\n<code>\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj7u5xa8s.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i=0,$c=strlen($string); $i<$c; $i++) {\n\
    \    $prefixes[] = $string[0];\n  }\n  return $prefixes;\n}\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfufyw66.php:18\n\
    Stack trace:\n#0 /tmp/tmppfufyw66.php(22): test()\n#1 {main}\n  thrown in /tmp/tmppfufyw66.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $ret = [];\n  $length = 0;\n  for ($i = 0, $len = strlen($string); $i <\
    \ $len; $i++) {\n    $length++;\n    if ($length >= strlen($string)) {\n     \
    \ break;\n    }\n    $ret[] = substr($string, 0, $length);\n  }\n  return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06fk2c_t.php:24\n\
    Stack trace:\n#0 /tmp/tmp06fk2c_t.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp06fk2c_t.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = [];\n  for ($i = strlen($string); $i > 0; $i--) $prefixes[]\
    \ = substr($string, 0, $i);\n  return $prefixes;\n}\n</code>\nAnd here is a link\
    \ to more information about preg_split: http://php.net/manual/en/function.preg-split.php\n\
    EDIT: It seems that you are new to regex (not very familiar with it). So let me\
    \ try to explain what does this line do: preg_split('#(\\P{L})#', $string);\n\
    What we did is split the string on the regex pattern \"every character that is\
    \ not in the list \\P{L}\". This is exactly the same as removing all the diacritics.\
    \ \\P{L} is the same as [^a-zA-Z]. \\P{L} is just a more precise way of saying\
    \ \"everything but alphabets\".\nAnother interesting regex pattern is the one\
    \ I used here: preg_split('#(\\p{L}+)#', $string);. Basically it means \"split\
    \ the string on every character, but only if you have more than one character\"\
    . Since \\p{L} matches more than just letters, it also matches punctuations and\
    \ other things like \"\xF8\", \"\xA5\"...\n<|/ a dscore=2 |>\n<| c |>\nThank you\
    \ for your answer, I'll test it in a couple of minutes. I edited my question,\
    \ added a link to the PHP manual about `preg_split`.\n<|/ c |>\n<| c |>\nSorry,\
    \ I forgot to mention that I didn't downvote your question. I upvoted it. You\
    \ can accept an answer by clicking the check mark next to it if you find it helpful.\
    \ Thanks.\n<|/ c |>\n<| c |>\nSure I will. Thank you for the help, I'll let you\
    \ know if it works or not.\n<|/ c |>\n<| c |>\nThank you for your detailed answer.\
    \ I'll test it in a couple of minutes and accept your answer if it works or not.\
    \ Just a couple of questions first: Why did you use `preg_split('#(\\P{L})#',\
    \ $string)` instead of `preg_split('#(\\p{L}+)#', $string)`? Is the difference\
    \ in the \"meaning\" of the `\\p{L}` pattern between `\\p{L}` and `\\P{L}`. Also,\
    \ could you please explain your regex pattern? Thanks again\n<|/ c |>\n<| c |>\n\
    I updated my answer, I think I explained everything now. Let me know if it still\
    \ doesn't make sense.\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplrwtegzl.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if ($string === '') {\n        return array();\n    }\n\n    $prefix\
    \ = $string[0];\n    $suffixes = array();\n\n    for ($i = 1; $i < strlen($string);\
    \ $i++) {\n        $suffix = $string[$i];\n\n        if (substr($string, $i, 1)\
    \ === $suffix) {\n            $suffixes[] = $suffix;\n        }\n    }\n\n   \
    \ if (count($suffixes) === 1) {\n        $suffixes[] = '';\n    }\n\n    sort($suffixes);\n\
    \n    return array($prefix, $suffixes);\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_cr3degs.php:36\n\
    Stack trace:\n#0 /tmp/tmp_cr3degs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_cr3degs.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $prefix = $string;\n    while ($prefix) {\n\
    \        $prefixes[] = $prefix;\n        $prefix = substr($prefix, 1);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lckuw_w.php:21\n\
    Stack trace:\n#0 /tmp/tmp0lckuw_w.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0lckuw_w.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $length = strlen($string);\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdujobso4.php:20\n\
    Stack trace:\n#0 /tmp/tmpdujobso4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdujobso4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n    $s = explode($string, \" \");\n    $i = count($s);\n\
    \    \n    while ($i > 1) {\n        $prefix[] = $s[$i - 1];\n        unset($s[$i\
    \ - 1]);\n        $i--;\n    }\n    \n    $prefix[] = $s[0];\n    \n    return\
    \ $prefix;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmpyw8kmsmh.php on line 7\n\
    \nWarning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmpyw8kmsmh.php on line 8\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpyw8kmsmh.php:26\nStack trace:\n#0 /tmp/tmpyw8kmsmh.php(31): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyw8kmsmh.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefix = substr($string, 0, $i);\n        $prefixes[] = $prefix;\n \
    \   }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkd9zs9sa.php:20\n\
    Stack trace:\n#0 /tmp/tmpkd9zs9sa.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkd9zs9sa.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  $length = strlen($string);\n  for ($i = 0; $i <\
    \ $length; $i++) {\n    $prefix = substr($string, 0, $i);\n    $prefixes[$prefix]\
    \ = $prefix;\n  }\n  return $prefixes;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8yv2v8ye.php:21\n\
    Stack trace:\n#0 /tmp/tmp8yv2v8ye.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8yv2v8ye.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $suffixes = array();\n\n    $length = mb_strlen($string);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $prefixes[] = $string[$i];\n\
    \    }\n\n    for ($i = 0; $i < $length; $i++) {\n        $suffix = mb_substr($string,\
    \ $i, 1);\n        $suffixes[] = $suffix;\n    }\n\n    return array_merge($prefixes,\
    \ $suffixes);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYour code does something\
    \ wrong: `ab` becomes `abccc`, but `abccc` should be `ababa`. Also you forgot\
    \ to take the last character of `abc` into account.\n<|/ c |>\n<| c |>\nOops,\
    \ my mistake. Corrected and fixed now.\n<|/ c |>\n<| a tags=string,php |>\nHere\
    \ is simple solution using simple recursion:\n<code>\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyc_kw6g_.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $len = strlen($string);\n    $all_prefixes = array();\n    for ($i =\
    \ 1; $i <= $len; $i++) {\n        $all_prefixes[] = substr($string, 0, $i);\n\
    \    }\n    return $all_prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  if (empty($string)) {\n    return array();\n  }\n\n  $prefixes = array();\n\
    \  $prefix_len = strlen($string);\n  for ($i = 0; $i < $prefix_len; $i++) {\n\
    \    $prefixes[$i] = $string;\n  }\n\n  for ($i = $prefix_len; $i > 0; $i--) {\n\
    \    $prefix = substr($string, 0, $i);\n    if (in_array($prefix, $prefixes))\
    \ {\n      unset($prefixes[array_search($prefix, $prefixes)]);\n    }\n  }\n\n\
    \  return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vuwj9pi.php:32\n\
    Stack trace:\n#0 /tmp/tmp0vuwj9pi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0vuwj9pi.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return preg_split('/(.)/', $string, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5y0qiksa.php:15\n\
    Stack trace:\n#0 /tmp/tmp5y0qiksa.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp5y0qiksa.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $prefix = 0;\n    $len = strlen($string);\n    foreach\
    \ (str_split($string) as $char) {\n        $prefixes[$prefix] = $char;\n     \
    \   ++$prefix;\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0_sm7ab.php:21\n\
    Stack trace:\n#0 /tmp/tmpz0_sm7ab.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpz0_sm7ab.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n\
    }\n</code>\n<|/ a tags=string,php,arrays |>\n<| c |>\nThe `if ($i == 0)` condition\
    \ looks suspicious. I think you meant `if ($i == 1)`\n<|/ c |>\n<| a |>\nJust\
    \ use array_map()\n<code>\n$arr=['a','ab','abc'];\n$result=array_map(function($item){return\
    \ substr($item,0,1);},$arr);\nvar_dump($result);\n</code>\n<|/ a dscore=0 tags=string,php,arrays\
    \ |>\n<| a tags=string,php,arrays |>\nYou could use a regular expression and return\
    \ the first match ([0]) of each group of one character:\n<code>\n$string = 'abcde';\n\
    preg_match_all('/./', $string, $matches);\nvar_dump($matches[0]);\n</code>\nOutput:\n\
    <code>\narray(1) {\n  [0] =>\n  array(1) {\n    [0] =>\n    string(1) \"a\"\n\
    \  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nYou don't need array map\
    \ or any for this. You can just use array_walk with str_replace to replace every\
    \ character from start to the end with an empty string and you'll be good to go:\n\
    <code>\n$string = 'abc';\n\narray_walk($string, function(&$value){\n    $value\
    \ = str_replace($value, '', 1);\n});\n\necho $string; //Outputs a\n</code>\nDemo\n\
    <|/ a tags=string,php,arrays |>\n<| a dscore=0 |>\nUse a combination of explode\
    \ and array_map to do it:\n<code>\n$string = 'a';\n$result = array_map(function($v){return\
    \ substr($v, 0, 1);}, explode($string));\n</code>\nThe explode function splits\
    \ the string into pieces, with the delimiter (in your case, a is a space) being\
    \ used as splitter, so it returns:\n<code>\narray(0=>'a', 1=>'', 2=>'', 3=>'a',\
    \ 4=>'', 5=>'', 6=>'', 7=>'a');\n</code>\nThe array_map function applies the function\
    \ on each of the elements of the array and returns an array with the result, so\
    \ now each element of the array has the right result from substr.\n<|/ a tags=string,php,arrays\
    \ |>\n<| c |>\nThis is not correct. `substr\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv6hre45j.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefixes[] = substr($string, 0, $i);\n    }\n    return array_reverse($prefixes);\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjse8v_wx.php:19\n\
    Stack trace:\n#0 /tmp/tmpjse8v_wx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjse8v_wx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); ++$i) {\n\
    \        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcd1effp.php:19\n\
    Stack trace:\n#0 /tmp/tmppcd1effp.php(23): test()\n#1 {main}\n  thrown in /tmp/tmppcd1effp.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n    foreach (explode($string, ' ') as $s) {\n   \
    \     $prefix[] = substr($s, 0, 1);\n    }\n    return $prefix;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmp6np6qmj5.php on line 7\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmp6np6qmj5.php on\
    \ line 7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6np6qmj5.php:19\n\
    Stack trace:\n#0 /tmp/tmp6np6qmj5.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6np6qmj5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $shortest_str = substr($string, 0, 1);\n  \
    \  $shortest_len = strlen($shortest_str);\n    $longest_str = substr($string,\
    \ -1);\n    $longest_len = strlen($longest_str);\n    for ($i = 0; $i < $shortest_len;\
    \ $i++) {\n        $prefixes[] = substr($string, 0, $i);\n    }\n    return array_merge($prefixes,\
    \ array_slice($string, 1, $shortest_len + 1), array_slice($string, $shortest_len\
    \ + 1));\n}\n</code>\n<|/ a |>\n<| a tags=string,php,algorithm,string |>\nHere\
    \ is my take on it, it is also very simple and efficient.\n<code>\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptlxhkpko.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $string_size = strlen($string);\n    for ($i\
    \ = 0; $i < $string_size; $i++) {\n        if (substr($string, $i, 1) === $string[$i])\
    \ {\n            $prefixes[] = substr($string, 0, $i);\n        }\n    }\n   \
    \ return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhpwlkxe.php:22\n\
    Stack trace:\n#0 /tmp/tmprhpwlkxe.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprhpwlkxe.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefix = substr($string, 0, $i);\n        $prefixes[] = $prefix;\n \
    \   }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnm1ml1j2.php:20\n\
    Stack trace:\n#0 /tmp/tmpnm1ml1j2.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnm1ml1j2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = strlen($string); $i > 0; $i--) $prefixes[]\
    \ = substr($string, 0, $i);\n  return array_reverse($prefixes);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI think this approach is more elegant than mine. Thanks!\n\
    <|/ c |>\n<| a |>\nHere is another way:\n<code>\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprc_qke1e.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $string = preg_replace('/.*/', '', $string);\n\
    \    foreach (str_split($string) as $c) {\n        if (strlen($c) == 1) {\n  \
    \          continue;\n        }\n        for ($i = 0; $i < strlen($string); $i++)\
    \ {\n            $prefix = substr($string, 0, $i);\n            if (preg_match('/^'\
    \ . $prefix . '/i', $c)) {\n                $prefixes[] = $prefix;\n         \
    \       break;\n            }\n        }\n    }\n    return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpix6fwxhj.php:29\n\
    Stack trace:\n#0 /tmp/tmpix6fwxhj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpix6fwxhj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = array();\n\t\n\tfor ($i=strlen($string)-1; $i>=0; $i--) {\n\
    \t\t$prefixes[] = substr($string, 0, $i);\n\t}\n\t\n\treturn $prefixes;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbl_j1tq.php:20\n\
    Stack trace:\n#0 /tmp/tmpzbl_j1tq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzbl_j1tq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0, $l = strlen($string); $i < $l;\
    \ $i++) {\n        for ($k = min(strlen($string) - $i, $l); $k >= 0; $k--) {\n\
    \            $prefixes[] = substr($string, $i, $k);\n        }\n    }\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7jdptmux.php:21\n\
    Stack trace:\n#0 /tmp/tmp7jdptmux.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7jdptmux.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $chars = str_split($string);\n    $prefixes = array();\n    foreach ($chars\
    \ as $char) {\n        $prefixes[] = $char;\n    }\n    return $prefixes;\n}\n\
    \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_auongr.php:19\n\
    Stack trace:\n#0 /tmp/tmpj_auongr.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj_auongr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n  \
    \  $prefixes[] = substr($string, 0, $i);\n  }\n  return $prefixes;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xuvaypo.php:18\n\
    Stack trace:\n#0 /tmp/tmp0xuvaypo.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0xuvaypo.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $l = mb_strlen($string);\n    for ($i = 0; $i <\
    \ $l; $i++) {\n        $prefixes[] = mb_substr($string, 0, $i, '8bit');\n    }\n\
    \    return $prefixes;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmp28qly_q3.php:7\nStack trace:\n#0 /tmp/tmp28qly_q3.php(14): all_prefixes('')\n\
    #1 /tmp/tmp28qly_q3.php(18): candidate('')\n#2 /tmp/tmp28qly_q3.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmp28qly_q3.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $result = array();\n  // Step one: split input string in array by length\n\
    \  $prefixes = explode($string, '');\n  // Step two: create result array by appending\
    \ first element of each of arrays in $prefixes\n  foreach ($prefixes as $prefix)\
    \ {\n    $result[] = substr($prefix, 0, 1);\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmp2rtkbplz.php on line 8\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmp2rtkbplz.php on\
    \ line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rtkbplz.php:22\n\
    Stack trace:\n#0 /tmp/tmp2rtkbplz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2rtkbplz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = array();\n    for ($i = 1; $i < strlen($string); $i++) {\n\
    \        $result[] = $string[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsep0xtb8.php:19\n\
    Stack trace:\n#0 /tmp/tmpsep0xtb8.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpsep0xtb8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $prefix = $string;\n    while (preg_match('/^[^_]/',\
    \ $prefix)) {\n        $prefixes[] = $prefix;\n        $prefix = substr($prefix,\
    \ 1);\n    }\n    return array_reverse($prefixes);\n}\n</code>\n<|/ a tags=php,mysql,regex,wordpress\
    \ dscore=0 |>\n<| c |>\nThanks Olivier, I am aware of the prefix problem, its\
    \ just really not that big of a deal to have the prefixes in that order. I am\
    \ just trying to find a solution which doesn't rely on that. Do you think its\
    \ the best I can do or is there another way to get around this?\n<|/ c |>\n<|\
    \ c |>\nWhat do you mean by \"not that big of a deal\"? And do you really want\
    \ a solution that gives you every possible combination of prefixes that match\
    \ the pattern? That would be a large combination of prefixes and would require\
    \ a very large database. Is that really what you want? Do you really want every\
    \ possible combination of prefixes? That would mean a very large database, and\
    \ that's not what you want to do. Do you want every possible combination of prefixes\
    \ that match the pattern? That's a different question...\n<|/ c |>\n<| c |>\n\
    I mean its not a big deal, the amount of prefixes in the table would probably\
    \ be very small (<10), and I just want to get them all at once. I don't care what\
    \ the order they are in as long as the prefixes are all in the list and then I\
    \ can loop through them without having to check them all against the pattern.\
    \ Does that make sense?\n<|/ c |>\n<| c |>\nSorry about that, yes, I mean every\
    \ possible combination of prefixes that match the pattern. I would like it to\
    \ work the same with other prefixes like `-`, `+`, `%`, `@`, `-@`, etc. but for\
    \ now it would be great if I could get this working for prefixes like `-`\n<|/\
    \ c |>\n<| c |>\nI see. In that case, you can use the code above but remove the\
    \ `preg_replace` line and instead add `$prefix = preg_replace('/[^a-zA-Z0-9_-]/',\
    \ '', $prefix);`. I updated my answer with the new code.\n<|/ c |>\n<| a tags=php,mysql,regex,wordpress\
    \ dscore=0 |>\nI did something like this once, which worked pretty well for me:\n\
    <code>\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph78yx3yx.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $shortest = '';\n    $longest = '';\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        $char = substr($string, $i,\
    \ 1);\n        if ($char === $shortest) {\n            $prefixes[] = $shortest;\n\
    \        } else {\n            $prefixes[] = $longest;\n            $longest =\
    \ $shortest;\n            $shortest = $char;\n        }\n    }\n    $prefixes[]\
    \ = $shortest;\n    return $prefixes;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a |>\nI use this function to solve this issue:\n<code>\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn083eh69.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $prefix = substr($string, 0, $i);\n        if (!isset($prefixes[$prefix]))\
    \ {\n            $prefixes[$prefix] = 1;\n        } else {\n            $prefixes[$prefix]\
    \ += 1;\n        }\n        if ($length < $i) {\n            $length = $i;\n \
    \       }\n    }\n    return array_keys($prefixes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkprdyrky.php:28\n\
    Stack trace:\n#0 /tmp/tmpkprdyrky.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkprdyrky.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = array();\n\n    for ($len = strlen($string); $len > 0; $len--)\
    \ {\n        $result[] = $string{0};\n    }\n\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz417_2v8.php:21\n\
    Stack trace:\n#0 /tmp/tmpz417_2v8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpz417_2v8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return array_slice(str_split($string), 0, -1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrzad5tc.php:15\n\
    Stack trace:\n#0 /tmp/tmpdrzad5tc.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpdrzad5tc.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n\n  for ($i = 0; $i < strlen($string); ++$i) {\n\
    \    $prefix_length = 0;\n\n    // Search for the longest prefix ending in the\
    \ current character\n    while($i >= 0 && !in_array($string[$i], $prefixes)\n\
    \               && $prefix_length < strlen($string)) {\n      $prefixes[] = $string[$i];\n\
    \      $prefix_length = strlen($prefixes[count($prefixes)-1]);\n      $i--;\n\
    \    }\n  }\n\n  return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tpoaou9.php:29\n\
    Stack trace:\n#0 /tmp/tmp1tpoaou9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1tpoaou9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $return = array();\n    for ($i = strlen($string); $i > 0; $i--) {\n\
    \        $return[] = substr($string, 0, $i);\n    }\n    return $return;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy1ptzwo.php:19\n\
    Stack trace:\n#0 /tmp/tmpmy1ptzwo.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmy1ptzwo.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $strings = explode(',', $string);\n    $result = array();\n    foreach\
    \ ($strings as $string) {\n        $prefix = substr($string, 0, 1);\n        $result[]\
    \ = $prefix;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0fagwrby.php:20\n\
    Stack trace:\n#0 /tmp/tmp0fagwrby.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0fagwrby.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (empty($string)) {\n        return array();\n    }\n    if (strlen($string)\
    \ <= 1) {\n        return array($string);\n    }\n    return array_merge(\n  \
    \      array_slice($string, 0, 1),\n        all_prefixes(substr($string, 1)),\n\
    \    );\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nthank you very much! But it doesn't\
    \ work, I'm getting an empty string as a result\n<|/ c |>\n<| c |>\nI'm getting\
    \ this error \"Call to a member function count() on a non-object in\"\n<|/ c |>\n\
    <| c |>\nI updated the code, try it again. The code is just an example of how\
    \ you can use the function.\n<|/ c |>\n<| c |>\nThank you very much again for\
    \ the answer but the output is this: \n\nstring(6) \"ab\"\nstring(1) \"a\"\nstring(6)\
    \ \"abc\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0)\
    \ \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaf9lyk9t.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $prefix_length = 0;\n\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        $c = substr($string, $i, 1);\n        if\
    \ ($c == '') {\n            if ($prefix_length) {\n                $prefixes[]\
    \ = substr($string, 0, $prefix_length);\n            }\n            $prefix_length\
    \ = 0;\n        } else {\n            $prefix_length++;\n        }\n    }\n\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv00xbv0l.php:30\n\
    Stack trace:\n#0 /tmp/tmpv00xbv0l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpv00xbv0l.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array_slice($string, 0, -1);\n    foreach ($prefixes as $key\
    \ => $prefix) {\n        $prefixes[$key] = $prefix . $prefixes[$key + 1];\n  \
    \  }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, string given\
    \ in /tmp/tmpa_54vrtg.php on line 6\n\nWarning: Invalid argument supplied for\
    \ foreach() in /tmp/tmpa_54vrtg.php on line 7\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa_54vrtg.php:18\nStack trace:\n#0 /tmp/tmpa_54vrtg.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa_54vrtg.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return array_map(function ($s) { return str_repeat($s, 3); }, str_split($string));\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphreukabt.php:14\n\
    Stack trace:\n#0 /tmp/tmphreukabt.php(19): test()\n#1 {main}\n  thrown in /tmp/tmphreukabt.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return array_map(function($s) {\n    return $s[0] . $s;\n  }, explode($string,\
    \ $string));\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmpz08b3oex.php on line 8\n\
    \nWarning: array_map(): Expected parameter 2 to be an array, bool given in /tmp/tmpz08b3oex.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz08b3oex.php:16\n\
    Stack trace:\n#0 /tmp/tmpz08b3oex.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz08b3oex.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for($i=0, $len=strlen($string); $i < $len; $i++)\
    \ {\n    $prefixes[] = substr($string, 0, $i);\n  }\n  return array_unique($prefixes);\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajp7t87v.php:19\n\
    Stack trace:\n#0 /tmp/tmpajp7t87v.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpajp7t87v.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $len = strlen($string);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $prefix = substr($string, 0, $i);\n        if ($prefix\
    \ != '' && $prefixes[$prefix] == 0) {\n            $prefixes[$prefix] = $len;\n\
    \        }\n    }\n    // Sort from shortest to longest length\n    ksort($prefixes);\n\
    \    // Return prefix array\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sbvyokq.php:26\n\
    Stack trace:\n#0 /tmp/tmp7sbvyokq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7sbvyokq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return array_map('strlen', explode(\"\", preg_split('~(?=^.{1})~', $string)));\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpuler9uvp.php\
    \ on line 6\n\nWarning: array_map(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmpuler9uvp.php on line 6\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpuler9uvp.php:14\nStack trace:\n#0 /tmp/tmpuler9uvp.php(19):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuler9uvp.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $current = $string;\n    while($current) {\n   \
    \     $current = substr($current, 0, 1);\n        $prefixes[] = $current;\n  \
    \  }\n    return array_reverse($prefixes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpm_lajocg.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = array();\n\t$cur = '';\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\t$cur .= $string[$i];\n\t\tif (isset($prefixes[$cur])) {\n\t\t\t\
    $prefixes[$cur][] = $i;\n\t\t} else {\n\t\t\t$prefixes[$cur] = array($i);\n\t\t\
    }\n\t}\n\treturn $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfcftivi.php:25\n\
    Stack trace:\n#0 /tmp/tmpvfcftivi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvfcftivi.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $prefix = $string;\n    while (substr($prefix,\
    \ 0, 1) === '-') {\n        $prefix = substr($prefix, 1);\n        if ($prefix\
    \ == $string) {\n            $prefixes[] = $prefix;\n            break;\n    \
    \    }\n        $prefixes[] = $prefix;\n    }\n    while (substr($prefix, -1,\
    \ 1) === '-') {\n        $prefix = substr($prefix, 0, -1);\n        $prefixes[]\
    \ = $prefix;\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqcv6j88.php:29\n\
    Stack trace:\n#0 /tmp/tmplqcv6j88.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplqcv6j88.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    foreach (str_split($string) as $char) {\n \
    \       $prefixes[] = $char;\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhuvc1tw.php:18\n\
    Stack trace:\n#0 /tmp/tmpjhuvc1tw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjhuvc1tw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = [];\n  for ($i = 1; $i < strlen($string); $i++) {\n    $prefix\
    \ = $string[$i - 1];\n    for ($j = $i - 1; $j > 0; $j--) {\n      $prefix = $prefix\
    \ . $string[$j];\n      if (isset($prefixes[$prefix])) {\n        break;\n   \
    \   }\n      $prefixes[$prefix] = 1;\n    }\n  }\n  return $prefixes;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeoc5maa5.php:25\n\
    Stack trace:\n#0 /tmp/tmpeoc5maa5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpeoc5maa5.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (strlen($string) === 1) {\n        return array($string);\n    }\n\
    \    return array_merge(\n        array_slice(array_merge(array($string), array_slice($string,\
    \ 0, -1)), 0, -1),\n        array($string)\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, string given\
    \ in /tmp/tmpyosu39u5.php on line 10\n\nWarning: array_merge(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmpyosu39u5.php on line 10\n\nWarning:\
    \ array_slice() expects parameter 1 to be array, null given in /tmp/tmpyosu39u5.php\
    \ on line 10\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmpyosu39u5.php on line 11\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyosu39u5.php:20\nStack trace:\n#0 /tmp/tmpyosu39u5.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyosu39u5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $length = strlen($string);\n    for($i = 0;\
    \ $i < $length; $i++) {\n        $prefixes[] = substr($string, 0, $i);\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8afzqxm.php:20\n\
    Stack trace:\n#0 /tmp/tmpy8afzqxm.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpy8afzqxm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefix = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n    $prefix[]\
    \ = $string[$i];\n  }\n  return $prefix;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdaa_wvg.php:19\n\
    Stack trace:\n#0 /tmp/tmpwdaa_wvg.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwdaa_wvg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $all_prefixes = array();\n    $shortest_length = strlen($string);\n \
    \   $longest_length = 0;\n    foreach (str_split($string) as $i => $char) {\n\
    \        $this_length = $shortest_length - $i;\n        $longest_length = max($longest_length,\
    \ $this_length);\n        $all_prefixes[] = substr($string, 0, $this_length);\n\
    \    }\n    return $all_prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpctjknbm_.php:22\n\
    Stack trace:\n#0 /tmp/tmpctjknbm_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpctjknbm_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $all_prefixes = array();\n    $all_prefixes[] = '';\n    $prefix_length\
    \ = strlen($all_prefixes[0]);\n    $i = 1;\n    foreach (str_split($string) as\
    \ $char) {\n        $all_prefixes[$i] = $all_prefixes[$i - 1] . ($prefix_length\
    \ + strlen($char));\n        $i++;\n    }\n    return $all_prefixes;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlh88wev.php:21\n\
    Stack trace:\n#0 /tmp/tmprlh88wev.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprlh88wev.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  foreach (explode($string, '') as $s) {\n    if\
    \ ($s) {\n      $prefix = implode('', array_slice(explode($s), 0, 3));\n     \
    \ $prefixes[] = $prefix;\n    }\n  }\n  return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmpjcreqrhn.php on line 7\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmpjcreqrhn.php on\
    \ line 7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcreqrhn.php:22\n\
    Stack trace:\n#0 /tmp/tmpjcreqrhn.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjcreqrhn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array();\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawmnap9s.php:15\n\
    Stack trace:\n#0 /tmp/tmpawmnap9s.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpawmnap9s.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    sort(preg_split('//u', $string));\n    $output = array();\n    foreach\
    \ ($string as $prefix) {\n        $output[] = $prefix;\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp9ax80kvi.php\
    \ on line 8\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp9ax80kvi.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ax80kvi.php:20\n\
    Stack trace:\n#0 /tmp/tmp9ax80kvi.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9ax80kvi.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_keys(str_split($string));\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpva44ohe4.php:14\n\
    Stack trace:\n#0 /tmp/tmpva44ohe4.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpva44ohe4.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  // Find prefix lengths, longest first.\n  $prefix_lengths = array();\n\
    \  foreach (array_map('strlen', $string) as $str) {\n    $prefix_lengths[] = $prefix_length\
    \ = $str;\n    if ($prefix_length < 1) {\n      break;\n    }\n  }\n  // Build\
    \ list of possible prefixes starting with longest string.\n  $prefixes = array();\n\
    \  foreach ($prefix_lengths as $prefix_length) {\n    $prefix = substr($string,\
    \ 0, $prefix_length);\n    while (array_search($prefix, $prefixes) === false)\
    \ {\n      $prefixes[] = $prefix;\n    }\n  }\n  return array_reverse($prefixes);\n\
    }\n</code>\n<|/ a tags=algorithm,php dscore=0 |>\n<| c |>\nI have edited the question\
    \ to be more clear on what i need\n<|/ c |>\n<| c |>\nI updated my answer, take\
    \ a look.\n<|/ c |>\n<| a tags=algorithm,php |>\nYou can use combinations to get\
    \ all combinations of $str in $len. \nExample:\n<code>\n$str = 'abc';\n$len =\
    \ count($str);\n$cmb = comb($str, $len);\nvar_dump($cmb);\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprkfd96i8.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $char_count = strlen($string);\n\n    // Add\
    \ first character of string to array if it doesn't already have one\n    if (!array_key_exists($string{0},\
    \ $prefixes)) {\n        $prefixes[$string{0}] = 1;\n    }\n\n    // Continue\
    \ to remove successive characters from string until only one remaining\n    //\
    \ character is left and add it to the list\n    while ($char_count > 1) {\n  \
    \      $prefix = substr($string, 0, 1);\n        if (!array_key_exists($prefix,\
    \ $prefixes)) {\n            $prefixes[$prefix] = 1;\n        }\n        $string\
    \ = substr($string, 1);\n        $char_count = strlen($string);\n    }\n\n   \
    \ // If there is only one remaining character add the remaining character to array\n\
    \    if ($char_count == 1) {\n        $prefix = substr($string, 0, 1);\n     \
    \   if (!array_key_exists($prefix, $prefixes)) {\n            $prefixes[$prefix]\
    \ = 1;\n        }\n    }\n\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8x7bvpb2.php:41\n\
    Stack trace:\n#0 /tmp/tmp8x7bvpb2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8x7bvpb2.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\treset($string);\n\t$prefixes = array();\n\twhile (current($string)) {\n\
    \t\t$prefixes[] = current($string);\n\t\tnext($string);\n\t}\n\treturn $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: reset() expects parameter 1 to be array, string given in /tmp/tmpqw1ngwi1.php\
    \ on line 6\n\nWarning: current() expects parameter 1 to be array, string given\
    \ in /tmp/tmpqw1ngwi1.php on line 8\n\nWarning: reset() expects parameter 1 to\
    \ be array, string given in /tmp/tmpqw1ngwi1.php on line 6\n\nWarning: current()\
    \ expects parameter 1 to be array, string given in /tmp/tmpqw1ngwi1.php on line\
    \ 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqw1ngwi1.php:21\n\
    Stack trace:\n#0 /tmp/tmpqw1ngwi1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqw1ngwi1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    sort($string);\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $prefix = substr($string, 0, $i);\n        $prefixes[] = $prefix;\n\
    \    }\n    return $prefixes;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpri52shwi.php\
    \ on line 6\n\nWarning: sort() expects parameter 1 to be array, string given in\
    \ /tmp/tmpri52shwi.php on line 6\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpri52shwi.php:20\nStack trace:\n#0 /tmp/tmpri52shwi.php(24): test()\n\
    #1 {main}\n  thrown in /tmp/tmpri52shwi.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $stringToTest = preg_replace('/^/', '', $string);\n    $returnValue =\
    \ [];\n    foreach($stringToTest as $char) {\n        if(substr($string, 0, strlen($char))\
    \ == $char) {\n            $returnValue[] = $char;\n            $string = substr($string,\
    \ strlen($char));\n        }\n    }\n    return $returnValue;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpmi6wd4ue.php\
    \ on line 8\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpmi6wd4ue.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi6wd4ue.php:23\n\
    Stack trace:\n#0 /tmp/tmpmi6wd4ue.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmi6wd4ue.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefix_array = [];\n  foreach(array_reverse(str_split($string)) as $char)\
    \ {\n    $prefix_array[] = $char;\n  }\n  return $prefix_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1e7y6w0.php:18\n\
    Stack trace:\n#0 /tmp/tmpb1e7y6w0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpb1e7y6w0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0, $len = strlen($string); $i < $len;\
    \ ++$i) {\n        $prefix = substr($string, 0, $i);\n        if (!in_array($prefix,\
    \ $prefixes)) {\n            $prefixes[] = $prefix;\n        }\n    }\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5i8u179.php:22\n\
    Stack trace:\n#0 /tmp/tmpz5i8u179.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpz5i8u179.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefix[] = $string;\n    }\n\n    return array_slice($prefix, 0, count($prefix)\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwittl53.php:21\n\
    Stack trace:\n#0 /tmp/tmpxwittl53.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxwittl53.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    foreach (explode($string, '') as $char) {\n\
    \        $all_prefixes = array_merge($prefixes, array_keys($char === $string ?\
    \ '' : $char));\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmp4e4vvkz2.php on line 7\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmp4e4vvkz2.php on\
    \ line 7\n\nWarning: array_keys() expects parameter 1 to be array, string given\
    \ in /tmp/tmp4e4vvkz2.php on line 8\n\nWarning: array_merge(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmp4e4vvkz2.php on line 8\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp4e4vvkz2.php:19\nStack trace:\n\
    #0 /tmp/tmp4e4vvkz2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4e4vvkz2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for($i=0; $i<strlen($string); $i++) {\n    $prefixes[]\
    \ = $string[0];\n  }\n  return $prefixes;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_r23r9b4.php:19\n\
    Stack trace:\n#0 /tmp/tmp_r23r9b4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_r23r9b4.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(function ($prefix) {\n        return $prefix . str_repeat($prefix,\
    \ strlen($string));\n    }, str_split($string));\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz18yf9eu.php:16\n\
    Stack trace:\n#0 /tmp/tmpz18yf9eu.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz18yf9eu.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n    foreach(preg_split('//', $string) as $char) {\n\
    \        $prefix[] = $char;\n    }\n    return $prefix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv309v32y.php:18\n\
    Stack trace:\n#0 /tmp/tmpv309v32y.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpv309v32y.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  $length   = strlen($string);\n  for ($i = 0; $i\
    \ < $length; $i++) {\n    $prefixes[] = $string[$i];\n  }\n  return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jd6n7cg.php:20\n\
    Stack trace:\n#0 /tmp/tmp_jd6n7cg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_jd6n7cg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    foreach (str_split($string) as $char) {\n \
    \       $prefixes[] = $char;\n    }\n    return $prefixes;\n}\n</code>\nDemo here.\n\
    <|/ a tags=php,regex |>\n<| c |>\nThank you for your help. I haven't tested this\
    \ yet, but now I understand a bit more about regular expressions. Your function\
    \ returns a list of all possible prefixes of a given string. But the problem is\
    \ I want the longest prefix. Eg. for 'ab' I want 'abc'.\n<|/ c |>\n<| c |>\nYou\
    \ can modify the function accordingly to get all prefixes or longest prefix. I've\
    \ edited my answer to include both.\n<|/ c |>\n<| a dscore=1 |>\nI assume that\
    \ you are only looking for common prefixes and not common suffixes, because a\
    \ prefix of a string can only have one suffix (unless it is the empty string).\
    \ So you only need to look at the length of the string as prefix and suffix, and\
    \ check if it is a substring.\n<code>\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp14bavfr1.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (!is_string($string)) {\n        return false;\n    }\n    $prefixes\
    \ = array();\n    $current = &$prefixes[0];\n    foreach (str_split($string) as\
    \ $char) {\n        $current[] = $char;\n        $current = &$prefixes[count($prefixes)\
    \ - 1];\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n \
    \   return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmc4ca2iu.php:23\n\
    Stack trace:\n#0 /tmp/tmpmc4ca2iu.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmc4ca2iu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        $prefix = substr($string, 0, $i);\n        if (!in_array($prefix,\
    \ $prefixes)) {\n            $prefixes[] = $prefix;\n        }\n    }\n\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin07qia0.php:24\n\
    Stack trace:\n#0 /tmp/tmpin07qia0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpin07qia0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array_fill(0, strlen($string), '');\n  $prefix_counts = array_fill(0,\
    \ strlen($string), 0);\n  foreach (str_split($string) as $char) {\n    $char =\
    \ strtolower($char);\n    $prefix_counts[$char]++;\n  }\n  foreach ($prefix_counts\
    \ as $prefix => $count) {\n    $prefix_counts[$prefix] = $count;\n  }\n  asort($prefix_counts);\n\
    \  foreach ($prefix_counts as $prefix => $count) {\n    $prefixes[$prefix] = $prefix;\n\
    \  }\n  return array_values($prefixes);\n}\n</code>\n<|/ a |>\n<| c |>\nThank\
    \ you for the help but it does not return the desired output.\n<|/ c |>\n<| c\
    \ |>\nThe code sample is intended to be run in isolation. You'll have to adapt\
    \ it to your actual requirements. Just the function name should do the trick I\
    \ guess?\n<|/ c |>\n<| c |>\nThank you! This solution works perfectly as expected\
    \ :)\n<|/ c |>\n<| c |>\nThis is a nice solution but it's far from optimal. Using\
    \ `preg_match()`'s `PREG_SET_ORDER` option allows to retrieve substrings ordered\
    \ from longest to shortest. Also, the order of the substrings returned is arbitrary,\
    \ but as long as they're ordered from longest to shortest it's fine.\n<|/ c |>\n\
    <| c |>\nThis is nice but for me it returns `[0 => '']` instead of `[0]=>'a'`.\
    \ Do you know why?\n<|/ c |>\n<| a tags=php,algorithm,prefix,substring |>\nHere\
    \ is another solution:\n<code>\n$str=\"abce\";\n$sub=1;\n$result=array();\nforeach(str_split($str)\
    \ as $c){\n    for($i=$sub;$i>=0;$i--){\n        if(substr($str,$i,1)==$c){\n\
    \            $sub=substr($str,0,$i);\n            $result[]=$sub;\n        }\n\
    \    }\n}\n\nforeach($result as $r){\n    echo $r.\"<br>\";\n}\n</code>\n<|/ a\
    \ dscore=4 |>\n<| a dscore=4 |>\nThe original answer was fine, but as pointed\
    \ out it was not optimal.\nHere is a slightly different version, that makes use\
    \ of a prefix array which doesn't have to exist in the first place.\nIt is slightly\
    \ faster and also a bit clearer, and easier to understand:\n<code>\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvwa5510t.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $result = array();\n  $last = strlen($string) - 1;\n  for ($i = 0; $i <\
    \ strlen($string); $i++) {\n    $result[] = substr($string, 0, $i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p78cllc.php:20\n\
    Stack trace:\n#0 /tmp/tmp_p78cllc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_p78cllc.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $list = [];\n  foreach (str_split($string) as $char) {\n    $list[] = substr($string,\
    \ 0, strlen($char));\n  }\n  return array_unique($list);\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklmeekmq.php:18\n\
    Stack trace:\n#0 /tmp/tmpklmeekmq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpklmeekmq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0, $len = mb_strlen($string, '8bit');\
    \ $i < $len; $i++) {\n    $prefixes[] = mb_substr($string, 0, $i, '8bit');\n \
    \ }\n  return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmp2fsb8iuf.php:7\nStack trace:\n#0 /tmp/tmp2fsb8iuf.php(14): all_prefixes('')\n\
    #1 /tmp/tmp2fsb8iuf.php(18): candidate('')\n#2 /tmp/tmp2fsb8iuf.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2fsb8iuf.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $length = strlen($string);\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $prefixes[] = $string[$i];\n    }\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4frcor7.php:20\n\
    Stack trace:\n#0 /tmp/tmpt4frcor7.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpt4frcor7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for($i=0;$i<strlen($string);$i++) {\n     \
    \   $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pzf1v2e.php:19\n\
    Stack trace:\n#0 /tmp/tmp5pzf1v2e.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5pzf1v2e.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n\n  for ($i = 1; $i < strlen($string); $i++) {\n\
    \    $prefixes[] = substr($string, 0, $i);\n  }\n\n  return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawz78i8v.php:21\n\
    Stack trace:\n#0 /tmp/tmpawz78i8v.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpawz78i8v.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return call_user_func_array('array_merge', array_map(function($x) {\n\
    \        return str_split($x, 1);\n    }, $string));\n}\n</code>\n<|/ a |>\n<|\
    \ a |>\nI have written the following code that gets the desired result:\n<code>\n\
    $string = \"abcdefghijklmnopqrstuvwxyz\";\n$array = str_split($string);\n$prefix_array\
    \ = array_map('str_split', $array);\n$result = array_reduce($prefix_array, 'array_merge',\
    \ array_fill(0, count($array), []));\n$result = array_map(function ($val) {\n\
    \    return array_fill(0, count($val), $val);\n}, $result);\nprint_r($result);\n\
    </code>\nIt returns:\n<code>\nArray\n(\n    [0] => Array\n        (\n        \
    \    [0] => a\n            [1] => ab\n            [2] => abc\n            [3]\
    \ => abcd\n            [4] => abcde\n            [5] => abcdef\n            [6]\
    \ => abcdefg\n            [7] => abcdefgh\n            [8] => abcdefghi\n    \
    \        [9] => abcdefghij\n            [10] => abcdefghijk\n            [11]\
    \ => abcdefghijkl\n            [12] => abcdefghijklm\n            [13] => abcdefghijklmn\n\
    \            [14] => abcdefghijklmno\n            [15] => abcdefghijklmnop\n \
    \           [16] => abcdefghijklmnopq\n            [17] => abcdefghijklmnopqr\n\
    \            [18] => abcdefghijklmnopqrs\n            [19] => abcdefghijklmnopqrsu\n\
    \            [20] => abcdefghijklmnopqrsuv\n            [21] => abcdefghijklmnopqrsuvw\n\
    \            [22] => abcdefghijklmnopqrsuvwxy\n            [23] => abcdefghijklmnopqrsuvwxyz\n\
    \            [24] => abcdefghijklmnopqrsuvwxyza\n            [25] => abcdefghijklmnopqrsuvwxyzab\n\
    \            [26] => abcdefghijklmnopqrsuvwxyzabc\n            [27] => abcdefghijklmnopqrsuvwxyzabcd\n\
    \            [28] => abcdefghijklmnopqrsuvwxyzabcde\n            [29] => abcdefghijklmnopqrsuvwxyzabcdef\n\
    \            [30] => abcdefghijklmnopqrsuvwxyzabcdefg\n            [31] => abcdefghijklmnopqrsuvwxyzabcdefgh\n\
    \            [32] => \nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0ss50vip.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  preg_match_all('/.*/', $string, $matches);\n  foreach\
    \ ($matches[0] as $match) {\n    $prefixes = array_merge($prefixes, preg_split('/(?=[a-z])/',\
    \ $match));\n  }\n  return array_unique($prefixes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhdr0z9y.php:19\n\
    Stack trace:\n#0 /tmp/tmpuhdr0z9y.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpuhdr0z9y.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    foreach (array_reverse(str_split($string)) as $prefix) {\n        yield\
    \ $prefix;\n    }\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdqjtrru.php:16\n\
    Stack trace:\n#0 /tmp/tmpxdqjtrru.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxdqjtrru.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $prefix = '';\n    for($i = 0; $i < strlen($string);\
    \ $i++) {\n        $prefix = substr($string, $i, 1) . $prefix;\n        $prefixes[]\
    \ = $prefix;\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpikxslr4w.php:21\n\
    Stack trace:\n#0 /tmp/tmpikxslr4w.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpikxslr4w.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  foreach (explode('', $string) as $char) {\n   \
    \ foreach ($prefixes as $prefix => $prefix_length) {\n      if (substr($prefix,\
    \ 0, strlen($char)) == $char) {\n        $prefixes[$prefix]++;\n        break;\n\
    \      }\n    }\n  }\n  return $prefixes;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmpli51lpp4.php on line 7\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmpli51lpp4.php on\
    \ line 7\n\nWarning: explode(): Empty delimiter in /tmp/tmpli51lpp4.php on line\
    \ 7\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpli51lpp4.php\
    \ on line 7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpli51lpp4.php:24\n\
    Stack trace:\n#0 /tmp/tmpli51lpp4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpli51lpp4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); ++$i) {\n\
    \        $prefixes[] = $string[$i];\n    }\n    return array_reverse($prefixes);\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d4avf9x.php:19\n\
    Stack trace:\n#0 /tmp/tmp7d4avf9x.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7d4avf9x.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $i = 0;\n    $len = strlen($string);\n\n  \
    \  while ($i < $len) {\n        $prefixes[] = substr($string, 0, $i);\n      \
    \  $i += 1;\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3aza42xl.php:23\n\
    Stack trace:\n#0 /tmp/tmp3aza42xl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3aza42xl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    foreach (str_split($string) as $char) {\n \
    \       foreach ($prefixes as $prefix => $prefix_chars) {\n            if (strpos($char,\
    \ $prefix) === 0) {\n                $prefixes[$prefix][] = $char;\n         \
    \       $prefixes[$prefix . $char] = $char;\n            }\n        }\n    }\n\
    \    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5r26lu4a.php:24\n\
    Stack trace:\n#0 /tmp/tmp5r26lu4a.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5r26lu4a.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $length = strlen($string);\n  $prefixes = array();\n  for ($i = 0; $i <\
    \ $length; $i++) {\n    $prefixes[] = substr($string, 0, $i);\n  }\n  return $prefixes;\n\
    }\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvt9tjye.php:19\n\
    Stack trace:\n#0 /tmp/tmpsvt9tjye.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpsvt9tjye.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  $len = strlen($string);\n  for ($i = 1; $i < $len;\
    \ $i++) {\n    $prefixes[] = $string[$i];\n  }\n  return $prefixes;\n}\n</code>\n\
    <|/ a dscore=4 tags=prefix,function,php |>\n<| c |>\nI love this, but I don't\
    \ think it is going to be very fast for large strings. Also I'm assuming the input\
    \ is validated before using this function.\n<|/ c |>\n<| c |>\nIt is indeed slow,\
    \ but I think its faster than the recursive solution. Not sure though, as it does\
    \ use recursion.\n<|/ c |>\n<| c |>\nHow fast is it? How many times would you\
    \ call this function?\n<|/ c |>\n<| c |>\nI used a benchmark and my function was\
    \ the fastest. I benchmarked it on a string with 10,000,000 characters. My function\
    \ took 1.77 seconds. While the recursive function took 53.65 seconds. So I guess\
    \ the recursive function is the fastest here.\n<|/ c |>\n<| c |>\nThis is good\
    \ but what if the input string is like `abcdefg` and I want the output array to\
    \ be `['abc','ab','a','bc','b','cd','c','de','d','ef','e','fg','f']` i.e. the\
    \ array should contain all the prefixes of input string..\n<|/ c |>\n<| a |>\n\
    Here's a recursive method that will do the trick:\n<code>\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqxw3slvm.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefixes[] = $string[$i];\n        $new = '';\n        foreach ($prefixes\
    \ as $prefix) {\n            $new .= $prefix . $string[$i];\n        }\n     \
    \   $prefixes = array($new);\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyhudvw2.php:24\n\
    Stack trace:\n#0 /tmp/tmplyhudvw2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplyhudvw2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  $len = strlen($string);\n\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    $prefix = $string;\n    for ($j = $i; $j < $len; $j++) {\n\
    \      $prefix .= $string[$j];\n      if ($string[$j] !== $string[$i]) {\n   \
    \     $prefixes[] = $prefix;\n        break;\n      }\n    }\n  }\n\n  return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2bs0pv5.php:29\n\
    Stack trace:\n#0 /tmp/tmph2bs0pv5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph2bs0pv5.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_filter(str_split($string), function($value) {\n        return\
    \ $value !== '';\n    });\n}\n</code>\n<code>\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkgga2pba.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n  \
    \  $prefixes[] = substr($string, 0, $i);\n  }\n  return $prefixes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jjt6ass.php:19\n\
    Stack trace:\n#0 /tmp/tmp3jjt6ass.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3jjt6ass.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = array();\n\t$s = strlen($string);\n\tfor ($i = 0; $i < $s;\
    \ ++$i) {\n\t\t$prefix = substr($string, 0, $i);\n\t\t$prefixes[] = $prefix;\n\
    \t}\n\treturn $prefixes;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1vausr7.php:20\n\
    Stack trace:\n#0 /tmp/tmpw1vausr7.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpw1vausr7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $lenght = strlen($string);\n    for ($i = 0;\
    \ $i < $lenght; $i++) {\n        $prefix = substr($string, 0, $i);\n        $prefixes[]\
    \ = $prefix;\n    }\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeatji3aj.php:21\n\
    Stack trace:\n#0 /tmp/tmpeatji3aj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpeatji3aj.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $length = mb_strlen($string);\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $prefixes[] = mb_substr($string, 0, $i, '8bit');\n\
    \    }\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpfg4krgqb.php:7\nStack trace:\n#0 /tmp/tmpfg4krgqb.php(15): all_prefixes('')\n\
    #1 /tmp/tmpfg4krgqb.php(19): candidate('')\n#2 /tmp/tmpfg4krgqb.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfg4krgqb.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    foreach (explode('b', $string) as $char) {\n\
    \        $char = $char ? 'b' : '';\n        $prefixes = array_merge($prefixes,\
    \ str_split($char));\n    }\n    return $prefixes;\n}\n\n/**\n * Returns true\
    \ if a string is a permutation of another string\n * >>> is_permutation_of('abc',\
    \ 'abd')\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 14 in /tmp/tmp0y7mrdu2.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $prefix = '';\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $prefix .= $string[$i];\n        $prefixes[$prefix] = $prefix;\n\
    \    }\n    asort($prefixes);\n    return array_values($prefixes);\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $result[] = substr($string, 0, $i);\n    }\n    return array_reverse($result);\n\
    }\n</code>\n<|/ a dscore=1 tags=php |>\n<| a tags=php |>\n<code>\n<?php\n$string\
    \ = 'abcdefghijklmnop';\n$pref = array();\n\nfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n    for ($j = 0; $j < strlen($string); $j++) {\n        $pref[$i][$j]\
    \ = str_repeat($string, $j);\n        $pref[$j][$i] = str_repeat($string, $i);\n\
    \    }\n}\n\nprint_r($pref);\n</code>\nResult:\n<code>\nArray\n(\n    [0] => Array\n\
    \        (\n            [0] => abcdefghijklmnop\n            [1] => abcdefghijklmnop\n\
    \            [2] => abcdefghijklmnop\n            [3] => abcdefghijklmnop\n  \
    \          [4] => abcdefghijklmnop\n            [5] => abcdefghijklmnop\n    \
    \        [6] => abcdefghijklmnop\n            [7] => abcdefghijklmnop\n      \
    \      [8] => abcdefghijklmnop\n            [9] => abcdefghijklmnop\n        \
    \    [10] => abcdefghijklmnop\n            [11] => abcdefghijklmnop\n        \
    \    [12] => abcdefghijklmnop\n            [13] => abcdefghijklmnop\n        \
    \    [14] => abcdefghijklmnop\n            [15] => abcdefghijklmnop\n        \
    \    [16] => abcdefghijklmnop\n            [17] => abcdefghijklmnop\n        \
    \    [18] => abcdefghijklmnop\n            [19] => abcdefghijklmnop\n        \
    \    [20] => abcdefghijklmnop\n        )\n\n    [1] => Array\n        (\n    \
    \        [0] => abefghijklmnop\n            [1] => abefghijklmnop\n          \
    \  [2] => abefghijklmnop\n            [3] => abefghijklmnop\n            [4] =>\
    \ abefghijklmnop\n            [5] => abefghijklmnop\n            [6] => abefghijklmnop\n\
    \            [7] => abefghijklmnop\n            [8\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8yopp8s6.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefix_list = array();\n\twhile ( strlen($string) > 0) {\n\t\t$prefix_list[]\
    \ = substr($string, 0, strrpos($string, ':'));\n\t\t$string = substr($string,\
    \ strrpos($string, ':') + 1);\n\t}\n\treturn $prefix_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsb6ali5.php:20\n\
    Stack trace:\n#0 /tmp/tmpwsb6ali5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwsb6ali5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_slice(str_split($string), 1);\n}\n</code>\n<code>\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8kt7r9dq.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  $prefix = '';\n  foreach (str_split($string) as\
    \ $char) {\n    $prefix .= $char;\n    $prefixes[] = $prefix;\n  }\n  return $prefixes;\n\
    }\n</code>\n<|/ a tags=recursion,php |>\n<| a tags=recursion,php dscore=1 |>\n\
    <code>\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx29t4zct.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = array();\n\t$shortest = strlen($string);\n\tfor ($i = 0; $i\
    \ < $shortest; $i++) {\n\t\t$prefixes[] = substr($string, 0, $i);\n\t}\n\tsort($prefixes);\n\
    \treturn $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjhc0oq9.php:21\n\
    Stack trace:\n#0 /tmp/tmpmjhc0oq9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmjhc0oq9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = array();\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t\
    $prefix = substr($string, 0, $i);\n\t\t$prefixes[] = $prefix;\n\t}\n\treturn $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt6x3mpx.php:20\n\
    Stack trace:\n#0 /tmp/tmplt6x3mpx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplt6x3mpx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  foreach ($string as $char) {\n    if (!isset($prefixes[$char]))\
    \ {\n      $prefixes[$char] = $char;\n    } else {\n      $prefixes[$char] = $prefixes[$char]\
    \ . $char;\n    }\n  }\n  return $prefixes;\n}\n</code>\n<|/ a |>\n<| c |>\nThank\
    \ you for sharing this solution! It was the fastest in my benchmark!\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\n/**\n * Get all prefixes from a given string.\n * \n\
    \ * string $string\n * array\n */\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzvhwko_h.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return preg_split('//u', $string, null, PREG_SPLIT_NO_EMPTY);\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3rs1ruj.php:15\n\
    Stack trace:\n#0 /tmp/tmpx3rs1ruj.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpx3rs1ruj.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $suffixes = [];\n    foreach (preg_split('//', $string) as $suffix) {\n\
    \        $suffixes[] = $string;\n        if ($string === $suffix) {\n        \
    \    $string = '';\n        } else {\n            $string = $suffix;\n       \
    \ }\n    }\n    return $suffixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8purwyh.php:23\n\
    Stack trace:\n#0 /tmp/tmpb8purwyh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb8purwyh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $length = 0;\n  $prefixes = array();\n  $length = strlen($string);\n  for\
    \ ($i = 0; $i < $length; $i++) {\n    $prefixes[] = substr($string, 0, $length);\n\
    \  }\n  return $prefixes;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9t4cl67.php:20\n\
    Stack trace:\n#0 /tmp/tmpl9t4cl67.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpl9t4cl67.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $length    = strlen($string);\n    $prefixes = array();\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $prefix = substr($string, 0, $i);\n    \
    \    if (!in_array($prefix, $prefixes)) $prefixes[] = $prefix;\n    }\n    return\
    \ $prefixes;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzaffsl4c.php:20\n\
    Stack trace:\n#0 /tmp/tmpzaffsl4c.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzaffsl4c.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return array_reduce(\n    preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY),\
    \ // split on unsafe chars\n    function ($output, $char) {\n      // add prefix\
    \ if it starts a new word (and don't end with whitespace or punct)\n      if (!isset($output[$char])\
    \ && preg_match('/^(\\S+)(\\S)?$/u', $char, $matches)) {\n        $output[$char]\
    \ = $matches[1];\n      }\n      return $output;\n    },\n    []\n  );\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsntfd9d.php:25\n\
    Stack trace:\n#0 /tmp/tmpnsntfd9d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnsntfd9d.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n\n    // Iterate through input string from shortest\
    \ to longest\n    foreach (str_split($string) as $letter) {\n        $prefix[]\
    \ = $letter;\n    }\n\n    // Return prefix array\n    return $prefix;\n}\n</code>\n\
    <|/ a tags=arrays,prefix,php,search dscore=2 |>\n<| a tags=arrays,prefix,php,search\
    \ |>\nIn case you don't have access to a database to check against a full table\
    \ of prefixes and you want to avoid looping through it for each letter, you can\
    \ use the following code to find it all using a regular expression and preg_match:\n\
    <code>\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeieqz4ei.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $current = $string;\n    while ($current !==\
    \ '' && $current[0] !== '#') {\n        $current = preg_replace('/^[^\\s#]+/',\
    \ '', $current);\n        $prefixes[] = $current;\n    }\n    return array_reverse($prefixes);\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_jjjm9t.php:21\n\
    Stack trace:\n#0 /tmp/tmp6_jjjm9t.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6_jjjm9t.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  if (strlen($string) <= 1) {\n    return array($string);\n  }\n\n  $prefixes\
    \ = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n    $prefixes[] =\
    \ substr($string, 0, $i);\n  }\n\n  return array_merge(\n    array_reverse($prefixes),\n\
    \    array($string),\n    array_reverse($prefixes)\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jbu9844.php:27\n\
    Stack trace:\n#0 /tmp/tmp_jbu9844.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_jbu9844.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $array = array();\n  foreach (str_split($string) as $c) {\n    if (!isset($array[$c]))\
    \ {\n      $array[$c] = 1;\n    }\n  }\n  foreach ($array as $c => $d) {\n   \
    \ $array[$c] = $string[$d];\n  }\n  return array_keys($array);\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbvc3g62.php:23\n\
    Stack trace:\n#0 /tmp/tmpnbvc3g62.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnbvc3g62.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  if (strlen($string) == 0) return array();\n  return array_slice(str_split($string),\
    \ 0, count(str_split($string))-1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmex7eg25.php:16\n\
    Stack trace:\n#0 /tmp/tmpmex7eg25.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpmex7eg25.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $min_length = strlen($string);\n    foreach(str_split($string)\
    \ as $char) {\n        $length = strlen($char);\n        if($length <= $min_length)\
    \ {\n            $prefixes[] = $char;\n            $min_length = $length;\n  \
    \      }\n    }\n    return $prefixes;\n}\n</code>\n<|/ a dscore=2 tags=algorithm,string,permutation\
    \ |>\n<| c |>\nThis is great! A little explanation would be great so I can understand\
    \ the code more. I've tried reading the PHP documentation on `str_split()` but\
    \ I'm still struggling with the concepts. How does it know which positions to\
    \ split on? Does it just split on the first occurrence of a space, for instance?\
    \ Or could I split the string on all spaces?\n<|/ c |>\n<| c |>\nThanks a lot\
    \ for the explanation as well! I really appreciate it! I was wondering if you\
    \ could explain to me what happens in the `foreach` loop? How does the loop know\
    \ when to stop? I understand most of the code except for how it knows to stop\
    \ splitting when it reaches the end of the string?\n<|/ c |>\n<| c |>\nWhen you\
    \ do a `foreach(str_split($string)` it runs through *all* the characters in the\
    \ string, and for each one calls the `str_split()` function again to split it\
    \ into substrings. Then for each substring you get the length of it, and decide\
    \ where to split it into prefixes or suffixes. When you reach the end of the string,\
    \ you know that you reached the end of every prefix or suffix, and can return\
    \ it.\n<|/ c |>\n<| c |>\nOh ok! I figured that out but thanks for the explanation!\
    \ I really appreciate it!\n<|/ c |>\n<| a |>\nHere's a simple Python implementation.\
    \ \n<code>\ndef all_prefixes(s):\n    stack = []\n    ret = []\n    for c in s:\n\
    \        stack.append(c)\n        while len(stack):\n            prefix = stack.pop()\n\
    \            ret.append(prefix)\n            if stack:\n                stack.append(stack[-1])\n\
    \    return ret\n</code>\n<|/ a dscore=1 tags=algorithm,string,permutation |>\n\
    <| a |>\nHere is a solution in Ruby:\n<code>\ndef all_prefixes(str)\n  result\
    \ = []\n  str.chars.each do |c|\n    result << c if result and result[-1] == c\n\
    \    result.unshift(c) if c\n  end\n  return result\nend\n</code>\n<|/ a dscore=0\
    \ tags=algorithm,string,permutation |>\n<|\nfunction candidate(...$args) {\n \
    \   return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp74_rhg6n.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($length = strlen($string); $length--;\
    \ ) {\n        $prefixes[] = substr($string, 0, $length);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6v4suc8e.php:19\n\
    Stack trace:\n#0 /tmp/tmp6v4suc8e.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6v4suc8e.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i=0;$i<strlen($string);$i++) {\n    \
    \    $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmdupcfn.php:19\n\
    Stack trace:\n#0 /tmp/tmpkmdupcfn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpkmdupcfn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = array();\n    $prefix = '';\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $prefix = $prefix . $string[$i];\n        if (isset($result[$prefix]))\
    \ {\n            $result[$prefix]++;\n        } else {\n            $result[$prefix]\
    \ = 1;\n        }\n    }\n    return array_keys($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n    $string = strtolower($string);\n    $longest\
    \ = strlen($string);\n    for ($i = 0; $i < $longest; $i++) {\n        $prefix[]\
    \ = substr($string, 0, $i);\n    }\n    return $prefix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_ypz472.php:21\n\
    Stack trace:\n#0 /tmp/tmpo_ypz472.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpo_ypz472.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n\n    foreach (explode(' ', $string) as $word) {\n \
    \       $length = strlen($word);\n\n        if ($length == 0) {\n            continue;\n\
    \        }\n\n        $prefixes[] = substr($word, 0, $length);\n    }\n\n    return\
    \ $prefixes;\n}\n\n$prefixes = all_prefixes('abc');\nprint_r($prefixes);\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => abc\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpm6jbe_gx.php:29\nStack trace:\n#0 /tmp/tmpm6jbe_gx.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmpm6jbe_gx.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  // get prefix of string starting at index 1\n \
    \ // eg. 'abbc' => 'ab'\n  for ($i = 1; $i < strlen($string); $i++) {\n    //\
    \ start adding prefixes to output array\n    $prefix = substr($string, 0, $i);\n\
    \    // if we have already added the prefix to the output array before\n    //\
    \ add it now\n    if (array_key_exists($prefix, $prefixes)) {\n      $prefixes[$prefix][]\
    \ = $prefix;\n    } else {\n      // add a new prefix to the output array\n  \
    \    $prefixes[$prefix] = array();\n    }\n  }\n  return $prefixes;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8jcnhql.php:29\n\
    Stack trace:\n#0 /tmp/tmpy8jcnhql.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpy8jcnhql.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n    $suffixes = explode($string, '');\n    foreach\
    \ ($suffixes as $suffix) {\n        foreach ($prefix as $prefixed) {\n       \
    \     if (strlen($prefixed) + strlen($suffix) > strlen($prefix)) {\n         \
    \       $prefix[] = $prefixed;\n            }\n        }\n    }\n    return $prefix;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmpa7ehdnz6.php on line 7\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmpa7ehdnz6.php on\
    \ line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7ehdnz6.php:24\n\
    Stack trace:\n#0 /tmp/tmpa7ehdnz6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpa7ehdnz6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefix_array = array();\n\tfor ($i=0,$len = strlen($string); $i<$len;\
    \ $i++) {\n\t\t$prefix_array[] = substr($string, 0, $i);\n\t}\n\treturn $prefix_array;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0d3ukqfx.php:19\n\
    Stack trace:\n#0 /tmp/tmp0d3ukqfx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp0d3ukqfx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n\n    $length = strlen($string);\n    foreach (range(0,\
    \ $length) as $k) {\n        $s = '';\n        for ($i = 0; $i < $length; $i++)\
    \ {\n            $s = $s . $string[$i];\n        }\n        $prefixes[] = $s;\n\
    \    }\n\n    return $prefixes;\n}\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qowyie7.php:24\n\
    Stack trace:\n#0 /tmp/tmp8qowyie7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8qowyie7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0, $length = strlen($string); $i\
    \ < $length; $i++) {\n        $prefixes[] = $string[$i];\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fj0snxh.php:19\n\
    Stack trace:\n#0 /tmp/tmp8fj0snxh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp8fj0snxh.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n  \
    \  $prefixes[] = substr($string, 0, $i);\n  }\n  return $prefixes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqi7swmn1.php:19\n\
    Stack trace:\n#0 /tmp/tmpqi7swmn1.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpqi7swmn1.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if ($string === '') return [];\n\n    $prefixes = [];\n    $length =\
    \ 0;\n    $prevChar = null;\n    $curChar = null;\n\n    foreach (str_split($string)\
    \ as $char) {\n        if ($prevChar === null && $curChar === $char) {\n     \
    \       $length++;\n        } else {\n            if ($prevChar !== null) {\n\
    \                $prefixes[$length] = $prevChar;\n                $length++;\n\
    \            }\n\n            $prevChar = $char;\n            $length = 1;\n \
    \       }\n\n        $curChar = $char;\n    }\n\n    $prefixes[$length] = $prevChar;\n\
    \    $length++;\n\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n\
    \    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qcsz59f.php:41\n\
    Stack trace:\n#0 /tmp/tmp6qcsz59f.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6qcsz59f.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = array();\n\n    for ($i = strlen($string); $i > 0; $i--) {\n\
    \        $result[] = substr($string, 0, $i);\n    }\n\n    return $result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis worked great for me and I made a minor tweak\
    \ to allow me to include a number of 'levels' in the string\n<|/ c |>\n<| a dscore=1\
    \ |>\nA variation on Ivan's answer that allows you to set an arbitrary depth.\n\
    <code>\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj54etym5.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefix[] = $string[$i];\n    }\n    return $prefix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_82_oq61.php:19\n\
    Stack trace:\n#0 /tmp/tmp_82_oq61.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_82_oq61.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $length = strlen($string);\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $prefixes[] = $string[$i];\n    }\n    return\
    \ array_reverse($prefixes);\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgfl2_sk.php:20\n\
    Stack trace:\n#0 /tmp/tmpdgfl2_sk.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdgfl2_sk.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n\n    $len = strlen($string);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        for ($j = 0; $j < $len; $j++) {\n            $prefixes[]\
    \ = substr($string, $i, $j);\n        }\n    }\n\n    return $prefixes;\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8mqwslg.php:24\n\
    Stack trace:\n#0 /tmp/tmpz8mqwslg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpz8mqwslg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $result = array();\n  $length = strlen($string);\n  for ($i = 1; $i < $length;\
    \ $i++) {\n    $prefix = substr($string, 0, $i);\n    if (substr($string, $i)\
    \ === $prefix) {\n      $result[] = $prefix;\n      $i = $i + 1;\n    }\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24l8s2p7.php:23\n\
    Stack trace:\n#0 /tmp/tmp24l8s2p7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp24l8s2p7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = array();\n\t$length = strlen($string);\n\tfor ($i = 1; $i <=\
    \ $length; $i++) {\n\t\t$prefixes[] = substr($string, 0, $i);\n\t}\n\treturn $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    // Store original string in a temp variable\n    // because it will be\
    \ overwritten by $prefixes array\n    $temp = $string;\n    // Return empty array\
    \ if input string is empty\n    if (empty($string)) {\n        return array();\n\
    \    }\n    // Initialize prefixes array to be returned to the caller\n    $prefixes\
    \ = array();\n    // Initialize prefix to be returned to the caller\n    $prefix\
    \ = \"\";\n    // Continue as long as there are characters left in input string\n\
    \    while ($temp != \"\") {\n        // Get first character of the string\n \
    \       $first = $temp{0};\n        // Get last character of the string\n    \
    \    $last = $temp{length};\n        // Remove first character from the string\n\
    \        $temp = $temp{1};\n        // Append first character of input string\
    \ to $prefix\n        $prefix .= $first;\n        // Append rest of the input\
    \ string to $prefix if it's not empty\n        if ($temp != \"\") {\n        \
    \    $prefix .= $temp;\n        }\n        // Store prefix of the string to be\
    \ returned to the caller\n        $prefixes[] = $prefix;\n        // Initialize\
    \ prefix to be returned to the caller\n        $prefix = \"\";\n        // Append\
    \ $last character of input string to $prefix\n        $prefix .= $last;\n    \
    \    // Append rest of the input string to $prefix if it's not empty\n       \
    \ if ($temp != \"\") {\n            $prefix .= $temp;\n        }\n        // Store\
    \ prefix of the string to be returned to the caller\n        $prefixes[] = $prefix;\n\
    \    }\n    // Return prefixes array\n    return $prefixes;\n}\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmp297gbxja.php on line 22\n\
    \nWarning: Illegal string offset 'length' in /tmp/tmp297gbxja.php on line 22\n\
    \nWarning: Use of undefined constant length - assumed 'length' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp297gbxja.php on line 22\n\n\
    Warning: Illegal string offset 'length' in /tmp/tmp297gbxja.php on line 22\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp297gbxja.php:53\nStack\
    \ trace:\n#0 /tmp/tmp297gbxja.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp297gbxja.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $array = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n    $array[]\
    \ = substr($string, 0, $i);\n  }\n  return $array;\n}\n</code>\nAnd the prefix\
    \ of all prefixes of any string of the form xABC is:\n<code>\n$all_prefixes =\
    \ array_reduce(all_prefixes($testString), function($result, $prefix) {\n  return\
    \ array_merge($result, array_filter(all_prefixes($prefix)));\n});\n</code>\n<|/\
    \ a |>\n<| a dscore=3 |>\nHere is a simple recursive solution that only uses built-in\
    \ PHP functions.\n<code>\n$testString = \"abc\";\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprvytrfcp.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaoy6dvbw.php:19\n\
    Stack trace:\n#0 /tmp/tmpaoy6dvbw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpaoy6dvbw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(function($s) { return $s; }, preg_split('~/(?=[a-z_])~',\
    \ $string));\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuiagddvp.php:14\n\
    Stack trace:\n#0 /tmp/tmpuiagddvp.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpuiagddvp.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  if ($string === '') return [];\n  $prefixes = preg_split(\"/(?<=^|[[:space:]])/\"\
    , $string);\n  return array_slice($prefixes, 1);\n}\n</code>\n<|/ a dscore=1 tags=php,arrays,string\
    \ |>\n<| c |>\nThanks Johannes, I appreciate the time and effort. I would like\
    \ to add that I found this one to be the most useful, because it allowed me to\
    \ not have to manually enter the prefixes into the array. Also, my data had been\
    \ coming from the database, so  I could also use it to create my array from there.\
    \ Good stuff to know for next time, thanks.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ dscore=1 |>\nI came up with a much simpler solution:\n<code>\n$prefixes = preg_split(\"\
    /(?<=^|[[:space:]])/\", $string);\n</code>\nIt takes advantage of the lookbehind\
    \ regex (?<=) to split the string without adding a leading space.  \nSo if you\
    \ want a list with no leading spaces, then just use preg_split(\"/(?<=^|[[:space:]])/\"\
    , $string);\nIf you want a list of prefixes with leading spaces, then use preg_split(\"\
    /(?<=^|[[:space:]])/\", $string, 2);\n<|/ a |>\n<| a |>\n<code>\n$array = explode(\"\
    ,\", $string);\n$new_array = array();\nforeach($array as $key=>$val){\n    if(!is_numeric($key))\
    \ $new_array[] = $val;\n}\nprint_r($new_array);\n</code>\nThis will give you a\
    \ new array with all the numbers. If you need them in their original order then\
    \ just use $array = array_reverse($array);\n<|/ a dscore=0 tags=php,arrays,string\
    \ |>\n<| a tags=php,arrays,string |>\nIf you want an array with each item starting\
    \ at a certain position in the string, you can use the explode() function:\n<code>\n\
    $array = explode(',', $string);\n</code>\nIf you want an array with each item\
    \ starting with a specific character, you can use the strpos() function:\n<code>\n\
    $array = strpos($string, ',');\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$array = explode(\",\", $string);\n$new_array = array();\nforeach($array\
    \ as $key=>$val){\n    if(!is_numeric($key)) $new_array[] = $val;\n}\nprint_\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_2a7l067.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  if ($string == '')\n    return array();\n\n  $result = array();\n\n  for\
    \ ($i = 0; $i < strlen($string); $i++)\n    $result[] = substr($string, 0, $i);\n\
    \n  return $result;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3kp4b19c.php:23\n\
    Stack trace:\n#0 /tmp/tmp3kp4b19c.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3kp4b19c.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$words = str_split($string);\n\t$prefixes = array();\n\tforeach ($words\
    \ as $word) {\n\t\t$prefixes[] = $word;\n\t\t$prefix = implode('', $prefixes);\n\
    \t\t$prefixes[] = $prefix;\n\t}\n\treturn $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5lmuzik.php:21\n\
    Stack trace:\n#0 /tmp/tmph5lmuzik.php(26): test()\n#1 {main}\n  thrown in /tmp/tmph5lmuzik.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefixes = array();\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\t$prefix = substr($string, 0, $i);\n\t\t$prefixes[] = $prefix;\n\
    \t}\n\treturn $prefixes;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilwbv4n0.php:20\n\
    Stack trace:\n#0 /tmp/tmpilwbv4n0.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpilwbv4n0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $shortest = $string = preg_replace('/[^a-z]/i',\
    \ '', $string);\n    do {\n        $last_char = $shortest = preg_replace('/[^a-z]/i',\
    \ '', $shortest);\n        $prefixes[] = $last_char;\n    } while ($string !=\
    \ $shortest);\n    return array_reverse($prefixes);\n}\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gd1m2gk.php:19\n\
    Stack trace:\n#0 /tmp/tmp2gd1m2gk.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2gd1m2gk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $shortest = $longest_length = 0;\n    $length\
    \ = strlen($string);\n    for ($i = 0; $i < $length; ++$i) {\n        $char =\
    \ substr($string, $i, 1);\n        if (isset($prefixes[$char])) {\n          \
    \  $prefixes[$char] = max($prefixes[$char], $i);\n        } else {\n         \
    \   if ($shortest<$i) {\n                $shortest = $i;\n            }\n    \
    \        if ($longest_length < strlen($char)) {\n                $longest_length\
    \ = $length;\n            }\n            $prefixes[$char] = $i;\n        }\n \
    \   }\n    return $prefixes;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo02leeiv.php:31\n\
    Stack trace:\n#0 /tmp/tmpo02leeiv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo02leeiv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = [];\n  for ($i = 0, $len = mb_strlen($string); $i < $len; $i++)\
    \ {\n    $prefixes[] = mb_substr($string, 0, $i, '8bit');\n  }\n  return $prefixes;\n\
    }\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpffqyhh2a.php:7\nStack trace:\n#0 /tmp/tmpffqyhh2a.php(13): all_prefixes('')\n\
    #1 /tmp/tmpffqyhh2a.php(17): candidate('')\n#2 /tmp/tmpffqyhh2a.php(22): test()\n\
    #3 {main}\n  thrown in /tmp/tmpffqyhh2a.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  return array_map(\n    function ($str) {\n      return implode('', array_slice(str_split($str),\
    \ 0, max(str_length($str), 0)));\n    },\n    str_split($string)\n  );\n}\n</code>\n\
    <|/ a dscore=3 tags=php,string |>\n<| c |>\nThis isn't quite right.  You shouldn't\
    \ include the 'abc' in the result, since that isn't in the original string.  You\
    \ also shouldn't include the 'ab' in the result, since that isn't in the original\
    \ string.  You could fix it by changing `array_slice(str_split($str), 0, max(str_length($str),\
    \ 0))` to `array_slice(str_split($str), 0, min(str_length($str), 0))`, but that\
    \ isn't right.  You need to return the longest prefix of $str, not the entire\
    \ string.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I have fixed my answer.\n\
    <|/ c |>\n<| c |>\nI fixed the code as per your suggestions. Please review\n<|/\
    \ c |>\n<| a |>\nThe best way to do this is using the following snippet:\n<code>\n\
    $string = 'ABCDabc';\n\n$start = 1;\n$count = 0;\n\n$prefix = '';\n\nfor ($i =\
    \ 0; $i < strlen($string); $i++) {\n    $count += $string[$i] === $string[$start];\n\
    \    $prefix = substr($string, 0, $start) . $prefix . $string[$start];\n    $start++;\n\
    }\n\nvar_dump($prefix);\n</code>\nOutput:\n<code>\nstring(3) \"ABCD\"\n</code>\n\
    <|/ a dscore=3 tags=php,string |>\n<| c |>\nI think you should change `substr($string,\
    \ 0, $start)` to `substr($string, 0, $i)` so you get the whole string from 0 to\
    \ $i and not just the first.\n<|/ c |>\n<| c |>\nYes you're right. Now fixed.\
    \ Thanks\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = \"ABCDabc\";\n\
    $prefix = \"\";\nfor ($i = 1; $i <= strlen($string); $i++) {\n    if ($string[$i-1]\
    \ == $string[$i]) {\n        $prefix .= $string[$i-1];\n    } else {\n       \
    \ $prefix .= $string[$i-1] . substr($string, $i - 1);\n        break;\n    }\n\
    }\necho $prefix;\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI have done this\
    \ in python. I tested with PHP5.6 \n<code>\n $string = \"ABCD\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi0b61xmk.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefix = $string;\n    $prefixes = array();\n    do {\n        $prefixes[]\
    \ = $prefix;\n    } while (($index = strrpos($prefix)) !== false && $prefix !==\
    \ '.');\n    return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strrpos() expects at least 2 parameters, 1 given in /tmp/tmpke3gt941.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpke3gt941.php:19\n\
    Stack trace:\n#0 /tmp/tmpke3gt941.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpke3gt941.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    foreach(str_split($string) as $char) {\n  \
    \      $charcode = ord($char);\n        if (!isset($prefixes[$charcode])) {\n\
    \            $prefixes[$charcode] = $char;\n        }\n    }\n    return array_reverse($prefixes);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>\nHere's an idea:\n<code>\n\
    $length = strlen($string);\n$prefixes = array();\n$i = 0;\nwhile ($i < $length)\
    \ {\n  $prefixes[$i] = substr($string, $i, $length);\n  ++$i;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nHmm.. it works, but I thought there would be a more\
    \ elegant way..\n<|/ c |>\n<| c |>\nOh yeah... It won't work if you have a string\
    \ that's already a prefix; e.g. \"asdf\" should return \"as\", not \"a\".\n<|/\
    \ c |>\n<| a dscore=0 |>\nThe answer given by Daniel Hirst is the correct one.\
    \ I found it interesting to write a simple function to do this:\n<code>\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxvicq7_n.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(function ($string) use ($string) {\n        $parts =\
    \ explode($string, $string, 2);\n        return $parts[0] . $parts[1];\n    },\
    \ reverse(str_split($string)));\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use lexical variable $string as a parameter name\
    \ in /tmp/tmp8zjwfxza.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_slice(str_split($string), 0, -1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplffyfm81.php:15\n\
    Stack trace:\n#0 /tmp/tmplffyfm81.php(19): test()\n#1 {main}\n  thrown in /tmp/tmplffyfm81.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); ++$i) {\n  \
    \  $prefixes[] = $string[$i];\n  }\n  return array_reverse($prefixes);\n}\n\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56bjz3el.php:19\n\
    Stack trace:\n#0 /tmp/tmp56bjz3el.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp56bjz3el.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); ++$i) {\n\
    \        $prefixes[] = $string[$i];\n    }\n    return $prefixes;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dhx5szv.php:18\n\
    Stack trace:\n#0 /tmp/tmp7dhx5szv.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp7dhx5szv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    foreach (all_prefixes_recursive($string, \"\") as\
    \ $prefix) {\n        $result[] = $prefix;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function all_prefixes_recursive()\
    \ in /tmp/tmp9eo3f6cr.php:7\nStack trace:\n#0 /tmp/tmp9eo3f6cr.php(13): all_prefixes('')\n\
    #1 /tmp/tmp9eo3f6cr.php(17): candidate('')\n#2 /tmp/tmp9eo3f6cr.php(22): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9eo3f6cr.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefix_array = array();\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_array = array_merge($prefix_array,\
    \ $string);\n\t$prefix_array = array_merge($prefix_array, $string);\n\t$prefix_array\
    \ = array_merge($prefix_array, $string);\n\t$prefix_\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsdozafhw.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $all_prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n\
    \    $all_prefixes[] = substr($string, 0, $i);\n  }\n  return $all_prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoddzuquu.php:19\n\
    Stack trace:\n#0 /tmp/tmpoddzuquu.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpoddzuquu.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_map(function($x) { return $x; }, str_split($string));\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvucmsal.php:14\n\
    Stack trace:\n#0 /tmp/tmpxvucmsal.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpxvucmsal.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $prefix = '';\n    for ($i = 0; $i < strlen($string);\
    \ ++$i) {\n        $prefix .= $string[$i];\n        if (isset($string[$i]) &&\
    \ is_string($string[$i])) {\n            $prefixes[] = $prefix;\n            $prefix\
    \ = $string[$i];\n        }\n    }\n    return $prefixes;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThank you for this. It is the only solution that worked for me.\
    \ My use case is different in that it is not required to get the prefixes in a\
    \ particular order, however it's important that it is in some manner. Thank you!\n\
    <|/ c |>\n<| c |>\nI noticed that this function doesn't return an empty string\
    \ when the input string is empty. I added an if statement to check whether the\
    \ string length is 0\n<|/ c |>\n<| c |>\nthank you so much for this function.\
    \ This works great.\n<|/ c |>\n<| c |>\nI liked this idea but found it to be quite\
    \ slow for large strings. I found [my own answer](http://stackoverflow.com/a/15325535/1149562)\
    \ to be a lot more performant for large strings.\n<|/ c |>\n<| c |>\nVery very\
    \ very inefficient.\n<|/ c |>\n<| a |>\nI came here searching for an answer to\
    \ the same question, since I didn't want to use recursion.  For those who find\
    \ this thread in future, I thought I'd share my own solution using recursion:\n\
    <code>\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq40fot0e.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return preg_split('/(?<!^)(?!$)/', $string);\n}\n</code>\nThis works\
    \ because preg_split uses regex to split the string on the delimiters. As a negative\
    \ lookbehind asserts there is not a string immediately preceding the current match,\
    \ (?!^) makes sure that that assertion does not succeed.\n<|/ a |>\n<| c |>\n\
    : I know, I know.. I've added some explanation.\n<|/ c |>\n<| a tags=string,php,split\
    \ |>\n<code>\n$string=\"This is  a  demo string\";\n\n$words = explode(\" \",$string);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nI like this approach, but it breaks on strings\
    \ with punctuation (like \"this's\")\n<|/ c |>\n<| c |>\nwhat is the advantage\
    \ of explode() over preg_split?\n<|/ c |>\n<| c |>\n: preg_split is more flexible.\
    \ preg_split is for regex pattern matching. I wouldn't recommend exploding a string\
    \ like that without using preg_split.\n<|/ c |>\n<| a dscore=5 |>\nPHP has an\
    \ explode() function that can split a string based on a delimiter. You could use\
    \ that:\n<code>\n$str = 'This is a demo string';\n$arr = explode(\" \", $str);\n\
    </code>\n<|/ a tags=string,php,split |>\n<| a dscore=4 tags=string,php,split |>\n\
    Use preg_split to split a string based on a pattern.\n<code>\n$string = 'This\
    \ is a demo string';\n$pattern = '/[^A-Za-z0-9]/';\n\n$words = preg_split($pattern,\
    \ $string);\n</code>\nThe above example would return an array with the words in\
    \ it separated by spaces, punctuation or other characters that don't belong to\
    \ a word.\n<|/ a |>\n<| a dscore=3 |>\n<code>\npreg_split('/[\\s,]+/', $string);\n\
    </code>\n<|/ a tags=string,php,split |>\n<| c |>\nThis answer does not add any\
    \ additional information over the other answers, as the regex `[\\s,]+` is not\
    \ specific to the task. Furthermore, you don't even need to escape a comma (unless\
    \ you want to split it into a `preg_split()` array).\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\n$string = 'This is  a  demo string';\n$words = explode(\" \",$string);\n\
    </code>\n<|/ a tags=string,php,split |>\n\nfunction candidate(...$args) {\n  \
    \  return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7i8g9zty.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz541yi7i.php:19\n\
    Stack trace:\n#0 /tmp/tmpz541yi7i.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpz541yi7i.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $result = [];\n    $prefix_lengths = array();\n    foreach (preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY) as $char) {\n        $prefix_lengths[] = strlen($char);\n\
    \    }\n\n    foreach ($prefix_lengths as $i => $length) {\n        for ($j =\
    \ 0; $j < $length; $j++) {\n            $result[] = substr($string, 0, $j);\n\
    \        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ tags=algorithm,php,string-comparison,string,python-2.7 |>\nI think this should\
    \ do it (PHP 7.1):\n<code>\n$a = 'ab';\n$b = 'abc';\n\n$shortest = '';\n$longest\
    \ = '';\n\nfor ($i = 0, $count = mb_strlen($a); $i < $count; ++$i) {\n    $shortest\
    \ .= $a[$i];\n\n    if ($count - $i == mb_strlen($b)) {\n        break;\n    }\n\
    \n    $longest .= $b[$i];\n}\n\nvar_dump($shortest, $longest);\n</code>\n<|/ a\
    \ |>\n<| a dscore=1 tags=algorithm,php,string-comparison,string,python-2.7 |>\n\
    <code>\ndef all_prefixes(s):\n    if s == '': \n       return []\n    if len(s)\
    \ < 2:\n       return [s]\n    res1 = all_prefixes(s[1:])\n    res2 = all_prefixes(s[:1])\n\
    \    return res1 + res2\n\nfor s in [\n        'ab',\n        'abc',\n       \
    \ 'abcd',\n        'abe',\n        'abed',\n        'abec',\n        'abef',\n\
    \        'abefg',\n        'abefgh',\n        'abefghi',\n        'abefghij',\n\
    \        'abefghijk',\n        'abefghijkl',\n        'abefghijklm',\n       \
    \ 'abefghijklmn',\n        'abefghijklmno',\n        'abefghijklmnop',\n     \
    \   'abefghijklmnopq',\n        'abefghijklmnopqrs',\n        'abefghijklmnopqrst',\n\
    \        'abefghijklmnopqrstu',\n        'abefghijklmnopqrstuv',\n        'abefghijklmnopqrstuvw',\n\
    \        'abefghijklmnopqrstuvwx',\n        'abefghijklmnopqrstuvwxy',\n     \
    \   'abefghij\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpswyliw8o.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $chars = preg_split('//', $string);\n    $prefix = array();\n    foreach\
    \ ($chars as $c) {\n        $prefix[] = $c;\n    }\n    sort($prefix);\n    return\
    \ $prefix;\n}\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zy4umai.php:19\n\
    Stack trace:\n#0 /tmp/tmp6zy4umai.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6zy4umai.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n\n    // Find longest prefix\n    $max_length = -1;\n\
    \    for ($i = 0, $length = strlen($string); $i < $length; ++$i) {\n        if\
    \ (strncmp($string, 'a', $i) === 0) {\n            $length = strlen($string) -\
    \ $i;\n            $prefixes[] = $string[$i];\n        } else {\n            if\
    \ ($length < $max_length) {\n                $max_length = $length;\n        \
    \        $prefixes[] = $string[$i];\n            }\n        }\n    }\n\n    return\
    \ $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpges0v3lg.php:31\n\
    Stack trace:\n#0 /tmp/tmpges0v3lg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpges0v3lg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    return array_reduce(\n        $string,\n        function ($carry, $item)\
    \ {\n            return array_merge($carry, preg_split('~([^.]+?)(\\.|$)~', $item,\
    \ -1, PREG_SPLIT_NO_EMPTY));\n        },\n        []\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_reduce() expects parameter 1 to be array, string given\
    \ in /tmp/tmpl25wszjt.php on line 11\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpl25wszjt.php:20\nStack trace:\n#0 /tmp/tmpl25wszjt.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl25wszjt.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array_fill(0, strlen($string) + 1, 0);\n    for ($i = 0;\
    \ $i <= strlen($string); $i++) {\n        $prefixes[$i] = $i;\n    }\n    return\
    \ $prefixes;\n}\n</code>\nThis algorithm will run fast in PHP because of the $prefixes\
    \ array being static, and thus not modified on each invocation. The algorithm\
    \ will also be relatively easy to understand. \nIt's O(n) because each invocation\
    \ of the function takes O(n) time to complete, which in turn implies that it is\
    \ O(n^2).\n<|/ a tags=php,algorithm |>\n<| c |>\nWhy do you think this is O(n^2)?\
    \ It's linear, O(n).\n<|/ c |>\n<| c |>\nYou're right, it's O(n) but I thought\
    \ the algorithm is O(n^2) because of the `for` loop and the two `if` statements\n\
    <|/ c |>\n<| c |>\nI agree with you, but that's irrelevant to what the question\
    \ is about. The algorithm is O(n), you just don't have to write it in PHP. Just\
    \ saying.\n<|/ c |>\n<| a tags=php,algorithm |>\nThe answer above is correct but\
    \ misses an important point.\nThe input is a set of words, so the output is also\
    \ a set of words. A naive algorithm is as follows:\n<code>\nFor each word, add\
    \ it to the output if it does not already exist\n</code>\nTo see why the naive\
    \ algorithm is wrong, consider a set of words {'abc', 'def', 'ghi', 'jkl'} and\
    \ an input of {'abc', 'def', 'ghi', 'jkl', 'mno'}. The naive algorithm would output\
    \ {'abc', 'def', 'ghi', 'jkl', 'mno'}.\nAnother example:\n<code>\nFor 'abcdefghijk'\
    \ the output is 'abc', \nfor input 'bcdefghijk' the output is 'def', \nfor input\
    \ 'cdefghijk' the output is 'ghi', \nfor input 'ddefghijk' the output is 'def',\
    \ \nfor input 'edefghijk' the output is 'ghi', \nfor input 'fdefghijk' the output\
    \ is 'ghi', \nfor input 'gdefghijk' the output is 'ghi', \nfor input 'hdefghijk'\
    \ the output is 'ghi', \nfor input 'idefghijk' the output is 'ghi', \nfor input\
    \ 'jdefghijk' the output is 'ghi', \nfor input 'kdefghijk' the output is 'gh\n\
    function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxyztylp9.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    // TODO: This is inefficient. Could use trie.\n\
    \    foreach (str_split($string, 1) as $character) {\n        $prefixes[] = $character;\n\
    \        foreach ($prefixes as $prefix => $prefix2) {\n            $prefixes[$prefix]\
    \ = $prefix . $prefix2;\n        }\n    }\n    return $prefixes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6a1nlfj.php:22\n\
    Stack trace:\n#0 /tmp/tmpn6a1nlfj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpn6a1nlfj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    list($string) = str_split($string, 1);\n    $result = array();\n\n  \
    \  foreach (str_split($string) as $char) {\n        $result[] = $char;\n     \
    \   $result[] = $char . $string;\n    }\n\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpviv88hgz.php:22\n\
    Stack trace:\n#0 /tmp/tmpviv88hgz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpviv88hgz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\tpreg_match_all('/(.{1,})/', $string, $matches);\n\treturn $matches[1];\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprllp5_74.php:16\n\
    Stack trace:\n#0 /tmp/tmprllp5_74.php(20): test()\n#1 {main}\n  thrown in /tmp/tmprllp5_74.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  $_len = strlen($string);\n  for ($i = $_len; $i;\
    \ $i -= $i) {\n    $prefixes[] = substr($string, 0, $i);\n  }\n  return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12hs_idz.php:20\n\
    Stack trace:\n#0 /tmp/tmp12hs_idz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp12hs_idz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  $current_prefix = '';\n  while ($string = substr($string,\
    \ 1)) {\n    $current_prefix .= $string;\n    $prefixes[] = $current_prefix;\n\
    \  }\n  return $prefixes;\n}\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltm2_2wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpltm2_2wv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpltm2_2wv.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  $prefixes = array();\n  for ($i = strlen($string) - 1; $i >= 0; $i--) {\n\
    \    $prefixes[] = $string[$i];\n  }\n  return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposkk4yqk.php:19\n\
    Stack trace:\n#0 /tmp/tmposkk4yqk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmposkk4yqk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (strlen($string) === 0) {\n        return array();\n    }\n\n    $prefixes\
    \ = array();\n\n    // Test if first character is letter or number\n    if (ctype_alpha($string[0]))\
    \ {\n        $prefix = strtolower($string[0]);\n\n        $prefixes[] = $prefix;\n\
    \        $prefixes[] = $prefix . 'a';\n        $prefixes[] = $prefix . 'b';\n\
    \        $prefixes[] = $prefix . 'c';\n        $prefixes[] = $prefix . 'ab';\n\
    \        $prefixes[] = $prefix . 'c';\n        $prefixes[] = $prefix . 'c';\n\
    \        $prefixes[] = $prefix . 'b';\n        $prefixes[] = $prefix . 'a';\n\
    \        $prefixes[] = $prefix . 'a';\n    }\n\n    // Test if first character\
    \ is uppercase letter or number\n    elseif (ctype_upper($string[0])) {\n    \
    \    $prefix = strtoupper($string[0]);\n\n        $prefixes[] = $prefix;\n   \
    \     $prefixes[] = $prefix . 'A';\n        $prefixes[] = $prefix . 'B';\n   \
    \     $prefixes[] = $prefix . 'C';\n        $prefixes[] = $prefix . 'AB';\n  \
    \      $prefixes[] = $prefix . 'C';\n        $prefixes[] = $prefix . 'C';\n  \
    \      $prefixes[] = $prefix . 'B';\n        $prefixes[] = $prefix . 'A';\n  \
    \      $prefixes[] = $prefix . 'A';\n    }\n\n    return $prefixes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrqqpnqb.php:53\n\
    Stack trace:\n#0 /tmp/tmprrqqpnqb.php(57): test()\n#1 {main}\n  thrown in /tmp/tmprrqqpnqb.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = array();\n    $first = $string;\n    while (strlen($first)\
    \ > 0) {\n        $last = $first;\n        while (strlen($last) > 0) {\n     \
    \       $prefix = substr($last, 0, strrpos($last, '/'));\n            if (!in_array($prefix,\
    \ $prefixes)) {\n                $prefixes[] = $prefix;\n            }\n     \
    \       $last = substr($last, strrpos($last, '/') + 1);\n        }\n        $first\
    \ = substr($first, strlen($last) + 1);\n    }\n    return $prefixes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmv_7p1h6.php:28\n\
    Stack trace:\n#0 /tmp/tmpmv_7p1h6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmv_7p1h6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    $prefixes = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $prefixes[] = $string[$i];\n    }\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv1xmca0.php:20\n\
    Stack trace:\n#0 /tmp/tmpjv1xmca0.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjv1xmca0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$prefix = array();\n\tforeach (explode($string, '') as $s) {\n\t\t$prefix[]\
    \ = $s;\n\t\t$prefix[] = substr($s, 0, 1);\n\t}\n\treturn array_reverse($prefix);\n\
    }\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmpibggroz_.php on line 7\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmpibggroz_.php on\
    \ line 7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpibggroz_.php:19\n\
    Stack trace:\n#0 /tmp/tmpibggroz_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpibggroz_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    // O(n) approach\n    if (strlen($string) == 1) {\n        return array($string);\n\
    \    }\n\n    $prefixes = array();\n    $prefix = '';\n\n    for ($i = 1; $i <\
    \ strlen($string); $i++) {\n        if (strlen($string) == $i) {\n           \
    \ array_push($prefixes, $prefix);\n            break;\n        }\n\n        $prefix\
    \ = $prefix . $string[$i];\n        $suffixes = all_prefixes($prefix);\n     \
    \   foreach ($suffixes as $suffix) {\n            array_push($prefixes, $suffix);\n\
    \        }\n    }\n\n    return $prefixes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6m5elqgv.php:36\n\
    Stack trace:\n#0 /tmp/tmp6m5elqgv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6m5elqgv.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n    if (strlen($string) < 3) {\n        return array();\n    }\n    $prefixes\
    \ = array();\n    for ($i = 0; $i < strlen($string) - 1; $i++) {\n        $prefixes[]\
    \ = $string[$i];\n    }\n    $prefixes[] = $string[$i];\n    return $prefixes;\n\
    }\n\nfunction candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17skt7tn.php:23\n\
    Stack trace:\n#0 /tmp/tmp17skt7tn.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp17skt7tn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n\t$string = preg_replace('~^0+~', '', $string);\n\t$string = strlen($string);\n\
    \tif ($string === 0) return array();\n\t$output = array();\n\t$i = 0;\n\twhile\
    \ (strlen($string) > 0) {\n\t\t$output[] = substr($string, 0, 1);\n\t\t$string\
    \ = substr($string, 1);\n\t\t$i++;\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdnqu6ha.php:25\n\
    Stack trace:\n#0 /tmp/tmphdnqu6ha.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphdnqu6ha.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of all prefixes from shortest to longest of the\
    \ input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes($string)\
    \ {\n  // Split into array of words on whitespace\n  $words = explode(' ', $string);\n\
    \  $prefix = array();\n  // Iterate over array of words and return longest prefix\
    \ as first\n  // item in array\n  foreach ($words as $word) {\n    $prefix[] =\
    \ $word;\n    if (strlen($prefix[0]) > strlen($word)) {\n      $prefix = array($word);\n\
    \    }\n  }\n  return $prefix;\n}\n\nfunction candidate(...$args) {\n    return\
    \ all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"\
    W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna6j1uy_.php:25\n\
    Stack trace:\n#0 /tmp/tmpna6j1uy_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpna6j1uy_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
