name: HumanEval_15_string_sequence
language: php
results:
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n, '0'));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10awmuul.php:15\n\
    Stack trace:\n#0 /tmp/tmp10awmuul.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp10awmuul.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $s .= ' ' . intval($i);\n  }\n  return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6voj8mb.php:19\n\
    Stack trace:\n#0 /tmp/tmpv6voj8mb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpv6voj8mb.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', array_map(function($i)\
    \ {\n        return sprintf('%03d', $i);\n    }, range($n)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpmdwjruji.php\
    \ on line 10\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmpmdwjruji.php on line 10\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpmdwjruji.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmdwjruji.php:18\nStack trace:\n#0 /tmp/tmpmdwjruji.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmdwjruji.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn implode(' ', range(0,\
    \ $n));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $list = \"\";\n  for($i=0;\
    \ $i<$n; $i++) {\n    $list .= \" \".$i;\n  }\n  return $list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8i9xpoa.php:20\n\
    Stack trace:\n#0 /tmp/tmpf8i9xpoa.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpf8i9xpoa.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = \"\";\n    $i\
    \ = 0;\n    while ($i < $n) {\n        $result .= $i;\n        $i++;\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nWhat about `string_sequence(0)`?\n\
    <|/ c |>\n<| c |>\nIf `n` is `0` then that is the same as returning the empty\
    \ string. If `n` is greater than `0` then the function will return a string containing\
    \ the numbers 0 through `n-1`.\n<|/ c |>\n<| c |>\nTo be more clear, `string_sequence(0)`\
    \ returns an empty string. `string_sequence(5)` returns `\"0 1 2 3 4 5\"`.\n<|/\
    \ c |>\n<| c |>\n`string_sequence(0)` is the same as `\"\"`.  It returns an empty\
    \ string.\n<|/ c |>\n<| c |>\nGood answer. I used your function and improved it\
    \ a bit: `function string_sequence($n) { return \"0 1 2 3 4 5\"; }`\n<|/ c |>\n\
    <| a dscore=5 |>\nIf you're looking for something that can handle an infinite\
    \ sequence, I think that you'll find that this question has an elegant solution.\n\
    <code>\necho implode(' ', range($n));\n</code>\nThe range function takes an optional\
    \ start value and a stop value (defaults to infinity if omitted). It's an easy\
    \ way to get the next value from the current value. It's also an elegant way to\
    \ get the next value from a range.\n<|/ a tags=php,sequence |>\n<| c |>\nI like\
    \ your solution. But the function should be `string_sequence($n)`. Also `implode`\
    \ doesn't work as expected in PHP5.4 (`string(6) \"1 2 3 4 5\"`)\n<|/ c |>\n<|\
    \ c |>\nFor PHP >= 5.4 you could use [range](http://php.net/range) instead of\
    \ `range`\n<|/ c |>\n<| c |>\nAh! That's much better. I've updated my answer accordingly.\n\
    <|/ c |>\n<| c |>\nIn case you're using this within a loop, be sure to `array_pop`\
    \ the array to get the next value: `echo implode(' ', array_pop(range($n)));`\n\
    <|/ c |>\n<| a |>\n<code>\n$i = 0;\nwhile($i <= $n){\necho $i;\n$i++;\n}\n</code>\n\
    This will echo the numbers from 0 to the number you put in.\n<|/ a tags=php,sequence\
    \ dscore=5 |>\n<| a tags=php\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwyegvilo.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $range = ($n < 0) ? -1 : $n;\n\
    \  return implode(\" \", array_map(function($x) {\n    return $x + $range;\n \
    \ }, range($n)));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpyvejau_6.php\
    \ on line 11\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmpyvejau_6.php on line 11\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpyvejau_6.php on line 11\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyvejau_6.php:19\nStack trace:\n#0 /tmp/tmpyvejau_6.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyvejau_6.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$i = 0;\n\t$result = \"\"\
    ;\n\twhile ($i < $n) {\n\t\t$result .= \"$i\";\n\t\t$i++;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpok71c3ug.php:22\n\
    Stack trace:\n#0 /tmp/tmpok71c3ug.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpok71c3ug.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return str_pad('', $n, '0');\n\
    }\n</code>\nNow, to create the string you need in Python, you would use:\n<code>\n\
    In [14]: s = '{:{width}}'.format(n, width=len(str(n)))\n\nIn [15]: print(s)\n\
    0000000000\n</code>\n<|/ a |>\n<| c |>\nThank you for your answer. I was working\
    \ with strings not integers so i changed your code a bit to make the answer work\
    \ for me. My code was like this:\n    `return '{:0>{width}}'.format(n,width=len(str(n)))`\n\
    <|/ c |>\n<| a |>\nI tried to solve the problem using the below code and it works\
    \ fine.\n<code>\ndef string_sequence(n):\n    result = ''\n    while n > 0:\n\
    \        result = str(n) + result\n        n -= 1\n    return result\n</code>\n\
    The above code is a recursive solution to your problem, but it still needs a little\
    \ bit of work.\n<code>\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n\
    '0 1 2 3 4 5'\n</code>\n<|/ a tags=python,string,numbers dscore=3 |>\n<| a |>\n\
    <code>\n>>> \"{:0>3}\".format('5')\n'00005'\n>>> \"{:0>3}\".format('10')\n'000010'\n\
    >>> \"{:0>3}\".format('0')\n'0000000'\n>>> \"{:0>3}\".format('1')\n'0000001'\n\
    >>> \"{:0>3}\".format('15')\n'000015'\n>>> \"{:0>3}\".format('16')\n'000016'\n\
    </code>\n<|/ a tags=python,string,numbers dscore=3 |>\n<| c |>\nThis is not the\
    \ correct answer.  The first argument `'5'` is formatted as a string.  The second\
    \ argument `'{:0>3}'` is formatted by `str.format` as a string, which is then\
    \ converted to a number.\n<|/ c |>\n<| c |>\nI think it's important to note that\
    \ in this case, the argument `'{:0>3}'` is **not** converted to a number.  It's\
    \ simply formatted as text.  It could be interpreted as a number by another function,\
    \ but it is a string, not a number.\n<|/ c |>\n<| a dscore=3 tags=python,string,numbers\
    \ |>\nHere is another way to do it:\n<code>\n>>> def string_sequence(x):\n...\
    \     return ''.join(\"%3d\" % i for i in range(x))\n... \n>>> string_sequence(5)\n\
    '00005'\n>>> string_sequence(10)\n'000010'\n>>> string_sequence(0)\n'0000000'\n\
    >>> string_\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjnw_hf6w.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn implode(\" \", array_map(function($x)\
    \ { return $x + 1; }, range($n)));\n}\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpo7q7ubs2.php\
    \ on line 8\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmpo7q7ubs2.php on line 8\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpo7q7ubs2.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpo7q7ubs2.php:15\nStack trace:\n#0 /tmp/tmpo7q7ubs2.php(20):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo7q7ubs2.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return join(\" \", range($n));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmprfv80zai.php\
    \ on line 8\n\nWarning: join(): Invalid arguments passed in /tmp/tmprfv80zai.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfv80zai.php:16\n\
    Stack trace:\n#0 /tmp/tmprfv80zai.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprfv80zai.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(array_fill(0,\
    \ $n, ''), ' ');\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays dscore=2 |>\nThe\
    \ below will do the trick.\n<code>\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx14qgxid.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range($n));\n\
    }\n\n/**\n * @task ranges     Ranges\n * @task iterators  Iterators\n * @task\
    \ collections  Collections\n * @task arraytype   Arrays\n * @task arrays     Arrays\n\
    \ * @task objecttypes Object types\n */\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpvm8s5204.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpvm8s5204.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm8s5204.php:24\n\
    Stack trace:\n#0 /tmp/tmpvm8s5204.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvm8s5204.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  do {\n    $str\
    \ .= ++$n;\n  } while ($n);\n  return $str;\n}\n\n/**\n * Creates new string sequence\
    \ objects from array and concatenates them into a single string sequence.\n *\n\
    \ * @param array $stringArray The array of string values to be combined into a\
    \ single string sequence.\n * @return string The concatenated string sequence.\n\
    \ */\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 130023432 bytes) in /tmp/tmp_ves_ikd.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function($i)\
    \ {\n    return str_pad($i, 3, '0', STR_PAD_LEFT);\n  }, range(0, $n)));\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$number = \"123456789\"\
    ;\n$result = str_split($number);\n$result2 = array_map('chr', $result);\necho\
    \ implode($result2);\n</code>\n<|/ a tags=string,php |>\n<| c |>\nWhile this code\
    \ snippet may solve the problem, it doesn't explain why or how it answers the\
    \ question. Please [include an explanation for your code](//meta.stackexchange.com/q/114762/269535),\
    \ as that really helps to improve the quality of your post. Remember that you\
    \ are answering the question for readers in the future, and those people might\
    \ not know the reasons for your code suggestion. **Flaggers / reviewers:** [For\
    \ code-only answers such as this one, downvote, don't delete!](//meta.stackoverflow.com/a/260413/2747593)\n\
    <|/ c |>\n<| a |>\n<code>\n$string = \"123456789\";\n$string2 = $string[0] .$string[1]\
    \ .$string[2] .$string[3] .$string[4] .$string[5];\n</code>\n<|/ a tags=string,php\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n$number = \"123456789\";\n$number2 =\
    \ '';\nfor($i=0; $i<strlen($number); $i++) {\n    $number2 .= $number[$i];\n}\n\
    \necho $number2;\n</code>\n<|/ a tags=string,php |>\n<| c |>\nIt would be better\
    \ to add some description to your answer\n<|/ c |>\n<| a tags=string,php dscore=1\
    \ |>\n<code>\n$str=\"123456789\";\n\nfor ($i=0; $i<strlen($str); $i++) {\n   \
    \ $str2 = $str[$i];\n}\n\necho $str2;\n</code>\n<|/ a |>\n<| a tags=string,php\
    \ |>\nTry this one:\n<code>\n$input = \"123456789\";\n$output = \"\";\nfor($x\
    \ = 0; $x < strlen($input); $x++)\n    $output .= $input[$x];\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nNo need of loop here you can simply do\n\n`echo substr($input,\
    \ 0 , 1);`\n`echo substr($input, 1 , 1);`\n`echo substr($input, 2 , 1);\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp561omng2.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= str_pad($i, 3, ' ', STR_PAD_LEFT);\n\
    \    }\n    return $result;\n}\n\n/**\n * Concatenate a sequence of strings into\
    \ one string.\n */\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h5ggl2a.php:23\n\
    Stack trace:\n#0 /tmp/tmp8h5ggl2a.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8h5ggl2a.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $ret = '';\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $ret .= ' ' . $i;\n  }\n  return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vmrec77.php:20\n\
    Stack trace:\n#0 /tmp/tmp1vmrec77.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1vmrec77.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n, '0'));\n}\n</code>\nOutput\n<code>\n<?php\n$result = string_sequence(5);\n\
    echo $result;\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppvylzsoq.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(\" \", array_map(function($i)\
    \ { return $i; }, range($n)));\n}\n</code>\n<|/ a |>\n<| c |>\n`range($n)` will\
    \ give values from 0 to `$n-1` (including `$n`). Your code will generate numbers\
    \ from 0 to `$n`. Just use `range(0, $n)` instead\n<|/ c |>\n<| c |>\nGood call!\
    \ I did that so he could easily replace the space with comma. Thanks!\n<|/ c |>\n\
    <| a |>\nI used the accepted answer above and wrote a function that will return\
    \ a string with the specified number of characters without using implode and range\n\
    <code>\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9a2z0qto.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function($n)\
    \ {\n    return chr($n);\n  }, range($n)));\n}\n</code>\n<|/ a |>\n<| a tags=unicode,php,string,utf-8\
    \ |>\nHere's a PHP function that will generate a random UTF-8 string of a given\
    \ length, including a delimiter and a start character. It will also add a few\
    \ additional characters to the beginning of the string, to give a more complete\
    \ set of Unicode symbols.\n<code>\n/**\n * Generates a random UTF-8 string of\
    \ a given length, including a delimiter\n * and a start character.\n *\n * string\
    \ $length\n * string $delimiter\n * string $start\n * bool\n */\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4274usmm.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = \"\";\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $str .= $i;\n  }\n  return $str;\n}\n</code>\n<|/ a\
    \ tags=php,numbers,sequence |>\n<| a dscore=1 |>\nIf you're looking for an answer\
    \ that doesn't require loops and can only handle a max of 32 numbers, this is\
    \ the best I could come up with:\n<code>\nfunction candidate(...$args) {\n   \
    \ return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfr_7ksb_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  do {\n    $str\
    \ .= (string) ($n);\n    $n++;\n  } while ($n);\n  return $str;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 130023432 bytes) in /tmp/tmpw2gwti8b.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(\" \", array_fill(0,\
    \ $n, \"$n\"));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmk7zo0l.php:15\n\
    Stack trace:\n#0 /tmp/tmpbmk7zo0l.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpbmk7zo0l.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $strs = array();\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $strs[] = $i;\n  }\n  return implode(' ', $strs);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6rb3hh3.php:20\n\
    Stack trace:\n#0 /tmp/tmpb6rb3hh3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpb6rb3hh3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $s .= ($i > 0) ? ' ' : '';\n    $s .= $i;\n  }\n  return\
    \ $s;\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgh60ui3e.php:20\n\
    Stack trace:\n#0 /tmp/tmpgh60ui3e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgh60ui3e.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $string = '';\n  for ($i =\
    \ 0; $i < $n; ++$i) {\n    $string .= $i;\n  }\n  return $string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp060uie6h.php:20\n\
    Stack trace:\n#0 /tmp/tmp060uie6h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp060uie6h.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = array();\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $str[] = ++$i;\n  }\n  return implode(\" \", $str);\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThe array_fill function only works for\
    \ PHP 5.5 or greater, and is generally much slower than the while loop method\
    \ using array_fill.\n<|/ c |>\n<| a tags=loops,php,performance |>\nJust for the\
    \ record - array_fill\n<code>\n$arr = array();\nfor ($i = 0; $i < 10; $i++) {\n\
    \    $arr[$i] = $i;\n}\n</code>\nis about 40 times slower than this loop\n<code>\n\
    $arr = array_fill(0, 10, 0);\n</code>\n(tested in PHP 5.3.18 - for me it's the\
    \ most efficient so far)\n<|/ a dscore=3 |>\n<| c |>\nI didn't even know `array_fill`\
    \ existed.  +1 for mentioning it.\n<|/ c |>\n<| c |>\nI believe that array_fill\
    \ is actually slower than simple assignment.\n<|/ c |>\n<| c |>\n- Not necessarily.\
    \ The `array_fill` function can be optimized in some cases (see  http://stackoverflow.com/a/25793268/24874\
    \ ). However, it's still a tad slower than the loop in my tests.\n<|/ c |>\n<|\
    \ a |>\nFor PHP >= 5.4 you can simply use array_fill() function:\n<code>\n$arr\
    \ = array_fill(0, 10, 0);\n</code>\n<|/ a tags=loops,php,performance dscore=3\
    \ |>\n<| c |>\nAnd as of PHP 5.4 the function works even for negative integers\n\
    <|/ c |>\n<| a dscore=3 tags=loops,php,performance |>\nI recently stumbled upon\
    \ this question and after a while I found that the array_fill function is extremely\
    \ fast. \nI just wanted to share my results with the community.\nI created an\
    \ array with 1000000 values and took the average time of execution by each function\
    \ below:\n<code>\n$arr = array_fill(0, 1000000, 0);\n</code>\n(The average time\
    \ was 0.1296 seconds)\n<code>\n$arr = array();\nfor ($i = 0; $i < 1000000; $i++)\
    \ {\n    $arr[$i] = $i;\n}\n</code>\n(The average time was 0.1347 seconds)\n<code>\n\
    $arr = array_fill(0, 1000000, 0);\n</code>\n(The average time was 0.0913 seconds)\n\
    <code>\nfor ($i = 0; $i < 1000000\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8z3cxxed.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', array_map(function($i)\
    \ use ($n) {return $i; }, range($n)));\n}\n</code>\nThe main advantage of this\
    \ approach is you can re-use this function whenever you want it to generate multiple\
    \ numbers in the same way by passing the same number to it:\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2bhhd_5k.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(array_fill(0,\
    \ $n, ''), array_fill(1, $n - 1, ''));\n}\n\n/**\n * Create an array containing\
    \ the values at indices, of the given length.\n * Only integer values are permitted.\
    \ Indices are counted from zero.\n */\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_fill(): Number of elements can't be negative in /tmp/tmp60gd0j9_.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60gd0j9_.php:20\n\
    Stack trace:\n#0 /tmp/tmp60gd0j9_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp60gd0j9_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $a = '';\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $a .= ' '.$i;\n  }\n  return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn61ih5wv.php:20\n\
    Stack trace:\n#0 /tmp/tmpn61ih5wv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpn61ih5wv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = str_pad('', $n, '0');\n\
    \  return $str;\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzp4wfy5b.php:16\n\
    Stack trace:\n#0 /tmp/tmpzp4wfy5b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpzp4wfy5b.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(\" \", range($n));\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpmuns9ym9.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpmuns9ym9.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmuns9ym9.php:15\n\
    Stack trace:\n#0 /tmp/tmpmuns9ym9.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpmuns9ym9.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', str_split('0'..$n));\n\
    }\n</code>\nAs a bonus, we do not have to bother with any if/else/elseif, etc.\
    \ to decide what function to use to generate a string.\n<|/ a dscore=5 tags=php,string,arrays,numbers\
    \ |>\n<| c |>\nI really like this. I never thought about doing it this way. Good\
    \ idea.\n<|/ c |>\n<| c |>\nI like this one too. However, you should add a $n\
    \ += 1 after each call ($n++), otherwise the function will return '0 1 2 3 4 5'\
    \ instead of '1 2 3 4 5 6'.\n<|/ c |>\n<| c |>\n: I already noticed that, but\
    \ I thought that was obvious. I added that in my edit and also linked to that\
    \ other question in which I provided a link to this answer.\n<|/ c |>\n<| c |>\n\
    The function does not work as expected. It returns '1 2 3 4 5 6', but I expect\
    \ '1 2 3 4 5 6 7'.\n<|/ c |>\n<| c |>\nGood answer. Just a note, you can use `$n\
    \ += 1;` instead of `$n++`, which I think is more readable (and also has slightly\
    \ different semantics, i.e. `$n++;` will return the value of `$n` + 1 and `$n\
    \ = $n + 1` will assign the value `$n` + 1 to `$n`).\n<|/ c |>\n<| a dscore=5\
    \ tags=php,string,arrays,numbers |>\nYou can use implode() and range():\n<code>\n\
    implode(\" \", range(1,10));\n</code>\n<|/ a |>\n<| c |>\nIt's a good solution\
    \ but I think this method is way better than the accepted answer. At least for\
    \ large numbers range.\n<|/ c |>\n<| c |>\nThis should be the correct answer!\
    \ Range() is much faster than for loop! This was the fastest solution when I tested\
    \ in Codewars.\n<|/ c |>\n<| c |>\nThis is also the fastest solution! In PHP 7.0.18\
    \ the range method was much faster (2x slower) than the \"for\" method.\n<|/ c\
    \ |>\n<| c |>\nJust tried this and it's surprisingly slower than using range().\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Most of the other answers\
    \ are overcomplicating a simple problem. One line solutions. Thank you\n<|/ c\
    \ |>\n<|\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp52f_jtkm.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$sequence = array();\n\tfor($i\
    \ = 0; $i < $n; ++$i) {\n\t\t$sequence[] = $i;\n\t}\n\treturn implode(' ', $sequence);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9b8p2hk.php:20\n\
    Stack trace:\n#0 /tmp/tmpp9b8p2hk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp9b8p2hk.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n + 1, 0));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdczh1pl.php:17\n\
    Stack trace:\n#0 /tmp/tmpvdczh1pl.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpvdczh1pl.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  static $s;\n  if ($s) {\n\
    \    return $s;\n  }\n  else {\n    $s = '';\n    do {\n      $s .= chr(mt_rand(0,\
    \ 255));\n    } while (--$n >= 0);\n    return $s;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisces7qy.php:26\n\
    Stack trace:\n#0 /tmp/tmpisces7qy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpisces7qy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$string = '0';\n\tfor ($i\
    \ = 1; $i <= $n; $i++) {\n\t\t$string .= ' ' . $i;\n\t}\n\treturn $string;\n}\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function\
    \ ($i) { return $i + 0; }, range($n)));\n}\n\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpzfhgah23.php\
    \ on line 8\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmpzfhgah23.php on line 8\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpzfhgah23.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzfhgah23.php:16\nStack trace:\n#0 /tmp/tmpzfhgah23.php(21):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzfhgah23.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = '';\n    foreach\
    \ (range(0, $n) as $i) {\n        $str .= $i . ' ';\n    }\n    return substr($str,\
    \ 0, -2);\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m09u9gz.php:19\n\
    Stack trace:\n#0 /tmp/tmp5m09u9gz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp5m09u9gz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = array();\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $s[] = sprintf('%d', $i);\n  }\n  return implode('\
    \ ', $s);\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9y2yi23k.php:20\n\
    Stack trace:\n#0 /tmp/tmp9y2yi23k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9y2yi23k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for($i = 0; $i\
    \ < $n; $i++) {\n    $s .= ' '.$i;\n  }\n  return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylsxx4uh.php:19\n\
    Stack trace:\n#0 /tmp/tmpylsxx4uh.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpylsxx4uh.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn implode(\" \", range($n,\
    \ 0, -1));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsmv0ux0.php:16\n\
    Stack trace:\n#0 /tmp/tmpjsmv0ux0.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpjsmv0ux0.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function($n)\
    \ {\n    return \"$n\";\n  }, range($n)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmprnhgm97_.php\
    \ on line 10\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmprnhgm97_.php on line 10\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmprnhgm97_.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprnhgm97_.php:18\nStack trace:\n#0 /tmp/tmprnhgm97_.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprnhgm97_.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return array_map(function\
    \ ($n) { return ++$n; }, range(0, $n));\n}\n</code>\n<|/ a |>\n<| a tags=php,string\
    \ |>\nHere is a variation using the anonymous function/lambda method with array_map\n\
    <code>\necho array_map(function($n) { return ++$n; }, range(0, 5));\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's a solution that works with any range\
    \ you put in. The range is split into even and odd numbers, then a separate string\
    \ is returned for each.\n<code>\n$str = '1,2,3,4,5,6,7,8,9,10,11,12';\n$str =\
    \ str_split($str,3);\n$evens = array_slice($str,0,count($str)/2);\n$odds = array_slice($str,count($str)/2,count($str));\n\
    $ranges = $evens.'-'.$odds;\n</code>\nOutput: \n<code>\narray(6) {\n  [0]=>\n\
    \  string(2) \"11\"\n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"4\"\n\
    \  [3]=>\n  string(2) \"13\"\n  [4]=>\n  string(2) \"15\"\n  [5]=>\n  string(1)\
    \ \"6\"\n}\n</code>\n<|/ a tags=php,string |>\n<| a dscore=0 |>\nThis was my answer\
    \ to the similar question:\n<code>\n$string = '1,2,3,4,5,6,7,8,9,10,11,12';\n\
    $numbers = explode(',',$string);\n$result = array();\nforeach($numbers as $number)\n\
    {\n    $result[] = $number+1;\n}\necho implode(',',$result);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis is still not what the OP was asking for. He wants a comma\
    \ separated list, not an array.\n<|/ c |>\n<| c |>\n, thanks, I didn't notice\
    \ the commas before. I thought the numbers were integers. I just updated my answer\
    \ and added the commas.\n<|/ c |>\n<| c |>\nI added another solution that works\
    \ with any range you put in. The range is split into even and odd numbers, then\
    \ a separate string is returned for each.\n<|/ c |>\n<| a dscore=0 |>\nUsing array_map:\n\
    <code>\n$range = range(0, 12);\n$range2 = array_map(function($n){\n    return\
    \ ++$n;\n}, $range);\n</code>\n<|/ a tag\nfunction candidate(...$args) {\n   \
    \ return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz7_k_go8.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $seq = '';\n  while (--$n)\
    \ {\n    $seq .= ' '.$n;\n  }\n  return $seq;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 130023432 bytes) in /tmp/tmplruc6oj4.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function($i)\
    \ { return $i; }, range($n)));\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nApologies\
    \ - I didn't know about the 'range()' function.\n<|/ c |>\n<| c |>\nIt is a really\
    \ neat solution.\n<|/ c |>\n<| a dscore=1 |>\nHere is another solution with array_chunk:\n\
    <code>\n$seq = '000001';\n\n$result = array_map(\n    function($chunk) {\n   \
    \     return implode(\" \", $chunk);\n    },\n    array_chunk(str_split($seq),\
    \ 4)\n);\n</code>\n<|/ a tags=php |>\n<| c |>\nThe array 'array_chunk' can be\
    \ replaced by 'range' with the number of chunks as the first parameter, eg: array_chunk(range(4),\
    \ 4)\n<|/ c |>\n<| a tags=php |>\n<code>\n$n = 4;\n$str = implode(array_fill(0,\
    \ $n, '0'), range($n, 0, -1));\n</code>\nThis produces:\n<code>\n0000\n0001\n\
    0002\n0003\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe array 'array_fill' can be\
    \ replaced by 'range' with the number of chunks as the first parameter, eg: array_fill(0,\
    \ $n, 0)\n<|/ c |>\n<| a tags=php dscore=0 |>\n<code>\n$n = 4;\n$str = '0000';\n\
    $n = $n - 1;\n\nfor ($i = $n; $i>=0; $i--){\n  $str = $str.$i;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThe array 'for' can be replaced by 'foreach' with the 'as' parameter,\
    \ eg: foreach ($i in $n) {$str = $str.$i;}\n<|/ c |>\n<| a |>\nI like the solution\
    \ from Marcus Aurelius. However, it doesn't always work. This one is working fine:\n\
    <code>\n$n = 4;\n$str = '0000';\n$n = $n - 1;\n\nfor ($i = $n; $i>=0; $i--){\n\
    \  $str = $str.$i;\n}\n\necho $str;\n</code>\n<|/ a tags=php dscore=0 |>\n<| c\
    \ |>\nThe array 'for' can be replaced by 'foreach' with the 'as' parameter, eg:\
    \ foreach ($i in $n) {$str = $str.$i;}\n<|/ c |>\n<| a tags=\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj5hn3jgv.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(array_map(function($i)\
    \ {\n        return str_pad(++$i, 3, '0', STR_PAD_LEFT);\n    }, $range(0, $n)));\n\
    }\n</code>\nOutput:\n<code>\nphp > var_dump(string_sequence(5));\nstring(10) \"\
    012345\"\n</code>\n<|/ a |>\n<| a dscore=3 |>\nHere is an approach using range():\n\
    <code>\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbqcfq4nl.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $seq = '0';\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $seq .= ' ' . $i;\n  }\n  return $seq;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = \"\";\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $str .= $i;\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjbwb3wh.php:20\n\
    Stack trace:\n#0 /tmp/tmpyjbwb3wh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpyjbwb3wh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return join(\" \", array_fill(0,\
    \ $n, \"0\"));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgk2zjfay.php:15\n\
    Stack trace:\n#0 /tmp/tmpgk2zjfay.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpgk2zjfay.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return join(\" \", array_map(function($i)\
    \ {\n        return sprintf(\"%u\", $i);\n    }, range($n)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp0510wil7.php\
    \ on line 10\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmp0510wil7.php on line 10\n\nWarning: join(): Invalid arguments\
    \ passed in /tmp/tmp0510wil7.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0510wil7.php:18\nStack trace:\n#0 /tmp/tmp0510wil7.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0510wil7.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = str_pad('', $n, '0');\n\
    \  $str[] = $n;\n  return implode(' ', $str);\n}\n</code>\n<|/ a tags=php,string-concatenation\
    \ |>\n<| a dscore=0 tags=php,string-concatenation |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprye_ophj.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $string = '';\n  for($i =\
    \ 0; $i < $n; $i++) {\n    $string .= $i;\n  }\n  return $string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2o1pavxa.php:20\n\
    Stack trace:\n#0 /tmp/tmp2o1pavxa.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2o1pavxa.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(\" \", array_map(function($i)\
    \ {\n    return str_pad($i, 2, \"0\", STR_PAD_LEFT);\n  }, range(0, $n)));\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nFor PHP 5.2.*, you can do this:\n\
    <code>\n<?php\n$start = 0;\n$end   = 10;\n\n$result = array();\n$result[] = $start;\n\
    for ($i=1; $i <= $end; $i++) {\n    $result[] = $i.' '.$start;\n}\n$result = implode(\"\
    \\n\", $result);\necho $result;\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpidsmb_72.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n, '0'));\n}\n</code>\n<|/ a |>\n<| c |>\nYou mean \"`foreach` instead of `for`\"\
    .\n<|/ c |>\n<| a |>\nThe simplest method would be to convert your string to an\
    \ array, and then use the implode function. To do this, you would do something\
    \ like this.\n<code>\n$mystring = \"A very long sentence that I need to shorten.\"\
    ;\n$myarray = explode(\" \", $mystring);\n\n$stringystring = implode(\" \", $myarray);\n\
    </code>\nYou would then use the stringystring variable as you wish.\n<|/ a tags=string,php\
    \ dscore=2 |>\n<| a |>\n<code>\n<?php\n    $string = 'I love PHP so much I love\
    \ you and everyone who loves me';\n    $pattern = '/([a-z]+)(\\s*)([A-Z])/';\n\
    \    $replace = '$1 $2$3';\n    $output = preg_replace($pattern, $replace, $string);\n\
    \    echo $output;\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplcq_0bw1.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', array_fill(0,\
    \ $n, 0));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s8bis_7.php:16\n\
    Stack trace:\n#0 /tmp/tmp0s8bis_7.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp0s8bis_7.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $s = '';\n    do {\n   \
    \     $s .= $n . ' ';\n    } while ($n--);\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwj1p583.php:20\n\
    Stack trace:\n#0 /tmp/tmpmwj1p583.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmwj1p583.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$result = \"\";\n\tfor ($i\
    \ = 0; $i <= $n; $i++) {\n\t\t$result .= $i . \" \";\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63kxtpdm.php:20\n\
    Stack trace:\n#0 /tmp/tmp63kxtpdm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp63kxtpdm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $strings = [];\n    $start\
    \ = 0;\n    while ($start <= $n) {\n        $strings[] = $start++ . ' ';\n   \
    \ }\n    return implode(' ', $strings);\n}\n\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_fa47qi.php:21\n\
    Stack trace:\n#0 /tmp/tmpf_fa47qi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpf_fa47qi.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  while ($n >\
    \ 0) {\n    $str .= str_pad(++$n, ' ', STR_PAD_RIGHT);\n    $n--;\n  }\n  return\
    \ $str;\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rosvzs6.php:20\n\
    Stack trace:\n#0 /tmp/tmp8rosvzs6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8rosvzs6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = '';\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $str .= $i;\n    }\n    return $str;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnc6_yhg3.php:19\n\
    Stack trace:\n#0 /tmp/tmpnc6_yhg3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnc6_yhg3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn implode(' ', range($n));\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpatjsnv9p.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpatjsnv9p.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpatjsnv9p.php:15\n\
    Stack trace:\n#0 /tmp/tmpatjsnv9p.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpatjsnv9p.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn implode(\n\t\t' ',\n\
    \t\tarray_map(\n\t\t\tfunction ($i) {\n\t\t\t\treturn sprintf('%010d', $i);\n\t\
    \t\t},\n\t\t\trange(0, $n)\n\t\t)\n\t);\n}\nfunction candidate(...$args) {\n \
    \   return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7wvoyxv.php:23\n\
    Stack trace:\n#0 /tmp/tmpj7wvoyxv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpj7wvoyxv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $res = '';\n  for($i = 0;\
    \ $i < $n; $i++) {\n    $res.=' '.($i+1);\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_andjhp.php:20\n\
    Stack trace:\n#0 /tmp/tmph_andjhp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmph_andjhp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence = '';\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $sequence .= ' ' . implode(' ', str_split($i));\n\
    \    }\n    return $sequence;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_6jpoo8.php:20\n\
    Stack trace:\n#0 /tmp/tmpu_6jpoo8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpu_6jpoo8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn implode(' ', range($n));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpf7js1zhs.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpf7js1zhs.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7js1zhs.php:16\n\
    Stack trace:\n#0 /tmp/tmpf7js1zhs.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpf7js1zhs.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(\" \", range($n));\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp0o3akfky.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp0o3akfky.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o3akfky.php:15\n\
    Stack trace:\n#0 /tmp/tmp0o3akfky.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp0o3akfky.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $ret = '';\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $ret .= ($i > 0 ? ' ' : '') . ($i);\n  }\n  return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucw_cqu3.php:20\n\
    Stack trace:\n#0 /tmp/tmpucw_cqu3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpucw_cqu3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $n = intval($n);\n    return\
    \ implode(' ', array_map(function ($i) {\n            return $i !== $n ? $i.'\
    \ '.($i-n+1).'' : $i;\n        }, $range($n)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpz5b0axte.php:11\n\
    Stack trace:\n#0 /tmp/tmpz5b0axte.php(15): string_sequence(0)\n#1 /tmp/tmpz5b0axte.php(19):\
    \ candidate(0)\n#2 /tmp/tmpz5b0axte.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz5b0axte.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', array_map(function($i)\
    \ { return $i; }, range($n)));\n}\n</code>\n<|/ a |>\n<| c |>\nI like it. And\
    \ I love that I can use that same logic for more things besides numbers: `\"abcde\"\
    .toCharArray().reverse()`\n<|/ c |>\n<| c |>\nI was just about to post a question\
    \ about this, but I like it!\n<|/ c |>\n<| a |>\n<code>\n<?php\n$arr=array(0,1,2,3,4,5);\n\
    $str=implode($arr,' ');\necho $str;\n</code>\n<|/ a dscore=3 tags=arrays,php,string\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post.\n<|/\
    \ c |>\n<| c |>\nThe OP asked for PHP code which generates a string from a range\
    \ of integers. This is a straightforward solution, no?\n<|/ c |>\n<| c |>\nIt\
    \ does answer the question exactly: \"How can I convert an array of integers into\
    \ a string?\" If that's not what the OP was looking for, then they should have\
    \ edited the question to ask specifically what they were looking for.\n<|/ c |>\n\
    <| c |>\nYour code doesn't work when `0` is in the array, so it won't work in\
    \ some cases like `array(0,1)`\n<|/ c |>\n<| c |>\nI didn't say my code is perfect.\
    \ I'm not a PHP developer, I'm just a computer science student trying to learn\
    \ PHP for my own sake and because I have an interesting problem to solve. Yes,\
    \ I understand that `0` can be part of that array, but that is not what the OP\
    \ asked for. \"How can I convert an array of integers into a string?\" This answer\
    \ is perfect for what was asked for. If you want something else, edit the question\
    \ and clarify.\n<|/ c |>\n<| a tags=arrays,php,string |>\n<code>\n$arr=array();\n\
    $arr[0]='a';\n$arr[1]='b';\n$arr[2]='c';\n$arr[3]='d';\n$arr[4]='e';\n\n$string=implode($arr);\n\
    echo $string;\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\n$arr=array(0,1,2,3,4,5);\n\
    $str=implode(array_map('int\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7ysyysar.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', array_map('chr',\
    \ range($n)));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp92vjba10.php\
    \ on line 8\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmp92vjba10.php on line 8\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp92vjba10.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp92vjba10.php:16\nStack trace:\n#0 /tmp/tmp92vjba10.php(21):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp92vjba10.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', range($n));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpx_3ng8lr.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpx_3ng8lr.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_3ng8lr.php:16\n\
    Stack trace:\n#0 /tmp/tmpx_3ng8lr.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpx_3ng8lr.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  while (--$n\
    \ > 0) {\n    $str .= $n ? ' ' : '';\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpae47i94b.php:20\n\
    Stack trace:\n#0 /tmp/tmpae47i94b.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpae47i94b.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $string = '0';\n  $len = strlen($string);\n\
    \  for ($i = 1; $i < $n; $i++) {\n    $string .= ' ' . str_pad($i, $len);\n  }\n\
    \  return $string;\n}\n$myseq = 1;\necho string_sequence($myseq);\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwn9765i4.php:23\n\
    Stack trace:\n#0 /tmp/tmpwn9765i4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpwn9765i4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return implode(\" \", array_map(function($s) { return\
    \ $s . string_sequence($n - 1); }, range($n)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7w0dqwn.php:19\n\
    Stack trace:\n#0 /tmp/tmpm7w0dqwn.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpm7w0dqwn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(array_map(function\
    \ ($i) {\n    return (string) $i;\n  }, range($n)));\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=php,function,loops |>\nHere's a more general approach\n<code>\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfj0id4jk.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $numbers = range($n);\n  return\
    \ implode(array_map(function ($number) { return (string) $number; }, $numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp29lfucps.php\
    \ on line 8\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmp29lfucps.php on line 9\n\nWarning: implode(): Argument must\
    \ be an array in /tmp/tmp29lfucps.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp29lfucps.php:17\nStack trace:\n#0 /tmp/tmp29lfucps.php(22):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp29lfucps.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n, $n));\n}\nadd_shortcode('string_sequence', 'string_sequence');\n\n/**\n\
    \ * Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n * If a negative number is passed, it is treated as if it was 0.\n\
    \ * >>> string_sequence(0)\n * '0'\n * >>> string_sequence(5)\n * '0 1 2 3 4 5'\n\
    \ * >>> string_sequence(10)\n * '0 1 2 3 4 5 6 7 8 9'\n */\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function add_shortcode()\
    \ in /tmp/tmprnlteu7r.php:10\nStack trace:\n#0 {main}\n  thrown in /tmp/tmprnlteu7r.php\
    \ on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $s .= $i;\n  }\n  return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu14rlz4x.php:20\n\
    Stack trace:\n#0 /tmp/tmpu14rlz4x.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpu14rlz4x.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $str .= $i;\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg08pgej0.php:20\n\
    Stack trace:\n#0 /tmp/tmpg08pgej0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpg08pgej0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return array_reduce(array_merge(range($n),\
    \ array_fill(1, $n, $n)), function($result, $value) {\n    return $result . str_pad($value,\
    \ $n - strlen($result), ' ');\n  });\n}\n\nfunction candidate(...$args) {\n  \
    \  return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpu1_eqi8_.php\
    \ on line 8\n\nWarning: array_merge(): Expected parameter 1 to be an array, bool\
    \ given in /tmp/tmpu1_eqi8_.php on line 8\n\nWarning: array_reduce() expects parameter\
    \ 1 to be array, null given in /tmp/tmpu1_eqi8_.php on line 10\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpu1_eqi8_.php:18\nStack trace:\n\
    #0 /tmp/tmpu1_eqi8_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpu1_eqi8_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = '';\n  for ($i =\
    \ 0; $i <= $n; $i++) {\n    $result .= ($i > 0) ? ' ' : 0;\n    $result .= $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40fp1xtl.php:21\n\
    Stack trace:\n#0 /tmp/tmp40fp1xtl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp40fp1xtl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  while ($n--) {\n\
    \    $s .= ' '.$n;\n  }\n  return $s;\n}\n\nfunction candidate(...$args) {\n \
    \   return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2olc7euw.php:20\n\
    Stack trace:\n#0 /tmp/tmp2olc7euw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2olc7euw.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // Return the first $n space-separated\
    \ numbers starting from 0, separated by spaces.\n    // >>> string_sequence(3)\n\
    \    // '0 1 2 3'\n    $x = '';\n    for ($i = 0; $i < $n; $i++) {\n        $x\
    \ .= ' ' . ($i + 0);\n    }\n    return $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujk26rng.php:23\n\
    Stack trace:\n#0 /tmp/tmpujk26rng.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpujk26rng.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $seq = '';\n  while (true)\
    \ {\n    $seq .= ($n--) . ' ';\n    if (!$n) {\n      break;\n    }\n  }\n  return\
    \ rtrim($seq);\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 130023440 bytes) in /tmp/tmposubam3x.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return join(array_map(function($v)\
    \ {\n        return str_pad($v, STR_PAD_LEFT);\n    }, range($n, 0)), ' ');\n\
    }\n</code>\nIf you don't like array_map, it can also be written like this:\n<code>\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkawq8gzl.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n + 1, 0));\n}\n\n$output = array_map(function($v){\n  return $v . ' ' . $v;\n\
    }, array_map(null, $array));\nvar_export($output);\n</code>\nResult:\n<code>\n\
    array (\n  0 => '0 0',\n  1 => '0 1',\n  2 => '0 2',\n  3 => '0 3',\n  4 => '0\
    \ 4',\n  5 => '0 5',\n  6 => '1 0',\n  7 => '1 1',\n  8 => '1 2',\n  9 => '1 3',\n\
    \  10 => '1 4',\n  11 => '1 5',\n  12 => '2 0',\n  13 => '2 1',\n  14 => '2 2',\n\
    \  15 => '2 3',\n  16 => '2 4',\n  17 => '2 5',\n  18 => '3 0',\n  19 => '3 1',\n\
    \  20 => '3 2',\n  21 => '3 3',\n  22 => '3 4',\n  23 => '3 5',\n  24 => '4 0',\n\
    \  25 => '4 1',\n  26 => '4 2',\n  27 => '4 3',\n  28 => '4 4',\n  29 => '4 5',\n\
    \  30 => '5 0',\n  31 => '5 1',\n  32 => '5 2',\n  33 => '5 3',\n  34 => '5 4',\n\
    \  35 => '5 5',\n)\n</code>\n<|/ a |>\n<| c |>\nThanks, I'll take a look at your\
    \ answer. Though, since array_map isn't going to work for me, I'll have to go\
    \ with the `foreach` solution I came up with as that one was a lot more concise.\n\
    <|/ c |>\n<| c |>\n: That's not a valid reason to downvote anyone's answer. `array_map`\
    \ is perfectly fine for this.\n<|/ c |>\n<| c |>\nI did not downvote your answer,\
    \ but I think the question was how to do it with array_map, not how to do it with\
    \ array_map. I am sure there are many ways to do this with array_map though.\n\
    <|/ c |>\n<| c |>\n: Oops, sorry about that. My bad.\n<|/ c |>\n<| c |>\n: I've\
    \ added the array_map solution too.\n<|/ c |>\n<| a tags=arrays,php,sorting,multidimensional-array\
    \ dscore=1 |>\nHere is another solution, using foreach loops, using array_splice\
    \ and a counter to keep track of the number of elements to output:\n<code>\nforeach\
    \ ($arr as $\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0bk0xy4e.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $out = '';\n  for ($i = 0;\
    \ $i < $n; ++$i) {\n    $out .= $i;\n  }\n  return $out;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoffi3z3e.php:19\n\
    Stack trace:\n#0 /tmp/tmpoffi3z3e.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpoffi3z3e.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $s .= $i;\n  }\n  return $s;\n}\n$_SERVER['argv'][2] = '--verbose';\n\
    $_SERVER['argv'][3] = $argv[1]; // <-- here\n$_SERVER['argv'][4] = $argv[2];\n\
    $_SERVER['argv'][5] = $argv[3];\n$_SERVER['argv'][6] = $argv[4];\n$_SERVER['argv'][7]\
    \ = $argv[5];\n$_SERVER['argv'][8] = $argv[6];\n$_SERVER['argv'][9] = $argv[7];\n\
    $_SERVER['argv'][10] = $argv[8];\n$_SERVER['argv'][11] = $argv[9];\n$_SERVER['argv'][12]\
    \ = $argv[10];\n$_SERVER['argv'][13] = $argv[11];\n$_SERVER['argv'][14] = $argv[12];\n\
    $_SERVER['argv'][15] = $argv[13];\n$_SERVER['argv'][16] = $argv[14];\n$_SERVER['argv'][17]\
    \ = $argv[15];\n$_SERVER['argv'][18] = $argv[16];\n$_SERVER['argv'][19] = $argv[17];\n\
    $_SERVER['argv'][20] = $argv[18];\n$_SERVER['argv'][21] = $argv[19];\n$_SERVER['argv'][22]\
    \ = $argv[20];\n$_SERVER['argv'][23] = $argv[21];\n$_SERVER['argv'][24] = $argv[22];\n\
    $_SERVER['argv'][25] = $argv[23];\n$_SERVER['argv'][26] = $argv[24];\n$_SERVER['argv'][27]\
    \ = $argv[25];\n$_SERVER['argv'][28] = $argv[26];\n$_SERVER['argv'][29] = $argv[27];\n\
    $_SERVER['argv'][30] = $argv[28];\n$_SERVER['argv'][31] = $argv[29];\n$_SERVER['argv'][32]\
    \ = $argv[30];\n$_SERVER['argv'][33] = $argv[31];\n$_SERVER['argv'][34] = $argv[32];\n\
    $_SERVER['argv'][35] = $argv[33];\n$_SERVER['argv'][36] = $argv[34];\n$_SERVER['argv'][37]\
    \ = $argv[35];\n$_SERVER['argv'][38] = $argv[36];\n$_SERVER['argv'][39] = $argv[37];\n\
    $_SERVER['\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsw09lgee.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = $n;\n  for ($i =\
    \ 2; $i < $n; $i++) {\n    $result .= ' '.$i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmql6c2_8.php:20\n\
    Stack trace:\n#0 /tmp/tmpmql6c2_8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmql6c2_8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $out = '';\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $out .= ' ' . string($i);\n  }\n  return $out;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7f9ngx3m.php:19\n\
    Stack trace:\n#0 /tmp/tmp7f9ngx3m.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7f9ngx3m.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $range = new Range($n);\n\
    \  $str = join(\" \", array_map(function($i) {\n    return $range->from($i);\n\
    \  }, range($n)));\n  return $str;\n}\n</code>\nSo the full code would look like\
    \ this:\n<code>\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpohcpvggr.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return str_pad($n, $n = max(str_split((string)$n)),\
    \ \" \", STR_PAD_RIGHT);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php |>\nI think\
    \ I got something that will work for you.\n<code>\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsbluedao.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$res = '';\n\tfor ($i = 0;\
    \ $i < $n; $i++) {\n\t\t$res .= ' ' . intval($i);\n\t}\n\treturn $res;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ey21ro7.php:20\n\
    Stack trace:\n#0 /tmp/tmp4ey21ro7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4ey21ro7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range($n));\n\
    }\n\n/**\n * A function that generates strings using ranges of numbers.\n *\n\
    \ * @return string\n */\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpzijrhn_i.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpzijrhn_i.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzijrhn_i.php:21\n\
    Stack trace:\n#0 /tmp/tmpzijrhn_i.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzijrhn_i.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', str_split($n));\n\
    }\n</code>\n<|/ a tags=php,recursion dscore=2 |>\n<| a tags=php,recursion dscore=1\
    \ |>\n<code>\n<?php\nclass RecursiveGenerator extends Generator\n{\n    private\
    \ $currentRecursionLevel = 0;\n\n    public function __construct($maxDepth)\n\
    \    {\n        $this->maxDepth = $maxDepth;\n    }\n\n    public function __invoke(...$args)\n\
    \    {\n        parent::__invoke($args);\n\n        if ($this->currentRecursionLevel\
    \ < $this->maxDepth) {\n            ++$this->currentRecursionLevel;\n        \
    \    $this->yield($this);\n            --$this->currentRecursionLevel;\n     \
    \   }\n    }\n}\n\n$recursiveGenerator = new RecursiveGenerator(3);\n\nforeach\
    \ ($recursiveGenerator as $number) {\n    echo($number);\n}\n</code>\n<|/ a |>\n\
    <| a tags=php,recursion |>\n<code>\n$var=3;\n$recurse=true;\n$array=array(1,2,3);\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph8406kft.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn str_split('0', strlen((string)$n));\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6h12wuy.php:15\n\
    Stack trace:\n#0 /tmp/tmpz6h12wuy.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpz6h12wuy.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $nstr = '';\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $nstr .= (string)$i;\n  }\n  return $nstr;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_22t22gi.php:19\n\
    Stack trace:\n#0 /tmp/tmp_22t22gi.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_22t22gi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$str = '0123456789';\n\treturn\
    \ implode(\" \", array_map('chr', str_split($str, $n)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_split(): The length of each segment must be greater than\
    \ zero in /tmp/tmpn560sh1d.php on line 9\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, bool given in /tmp/tmpn560sh1d.php on line 9\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpn560sh1d.php on line 9\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpn560sh1d.php:17\nStack trace:\n#0 /tmp/tmpn560sh1d.php(22):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn560sh1d.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence = '';\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $sequence .= $i === 0 ? '0' : ' . $i . '\
    \ ';\n    }\n    return $sequence;\n}\n</code>\nThe above is a very simple solution\
    \ to what you're looking for, but it may be good enough for your purposes.\n<|/\
    \ a tags=php,codeigniter |>\n<| c |>\nThanks for your answer. Its working. but\
    \ i dont want that if its 0 it should be 0. it should be 1\n<|/ c |>\n<| c |>\n\
    : I'm sorry, I misunderstood the question. I thought the solution was to show\
    \ each number with a space between, instead of starting a new line with each number.\n\
    <|/ c |>\n<| a dscore=0 |>\nIn your case you can simply use $i to print each value\
    \ in each iteration. \n<code>\necho $i.'<br>';\n</code>\n<|/ a tags=php,codeigniter\
    \ |>\n<| a dscore=0 tags=php,codeigniter |>\ntry this code it can give you a result\
    \ \n<code>\n$i = 1;\nforeach ($data as $value) {\n    if ($i == 1) {\n       \
    \ echo $value.'<br>';\n    } else {\n        echo $value.' '.'<br>';\n    }\n\
    \    $i++;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Its working.\
    \ but i dont want that if its 0 it should be 0. it should be 1.\n<|/ c |>\n<|\
    \ a |>\nYou can use array_reduce() to do it: \n<code>\n$array = [\n    0 => 'Zero',\n\
    \    1 => 'One',\n    2 => 'Two',\n    3 => 'Three',\n    4 => 'Four',\n    5\
    \ => 'Five',\n];\n\n$reducedArray = array_reduce(\n    $array, \n    function\
    \ ($carry, $value) {\n        array_push($carry, $value);\n        return $carry;\n\
    \    },\n    []\n);\n\nprint_r($reducedArray);\n</code>\nOutput:\n<code>\nArray\n\
    (\n    [0] => Zero\n    [1] => One\n    [2] => Two\n    [3] => Three\n    [4]\
    \ => Four\n    [5] => Five\n)\n</code>\nTo keep it an actual array, just change\
    \ return $carry; to return $carry;[]\n<|/ a dscore=0 tags=php,codeigniter |>\n\
    <| c |>\nThanks for your answer. Its working. but i dont want that if its 0 it\
    \ should be 0. it should be 1.\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfinla_mx.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $string = '';\n  foreach (range($n)\
    \ as $i) {\n    $string .= $i;\n  }\n  return $string;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpyusycltk.php\
    \ on line 9\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpyusycltk.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyusycltk.php:19\n\
    Stack trace:\n#0 /tmp/tmpyusycltk.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpyusycltk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = '';\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $result .= $i;\n  }\n  return $result;\n}\n</code>\n\
    <|/ a |>\n<| a |>\nNot very elegant but you could use a closure:\n<code>\n<?php\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg83o2ng9.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $strings = array();\n  \
    \  $n--;\n    $i = 0;\n    while ($i <= $n) {\n        $strings[] = $i;\n    \
    \    $i++;\n    }\n    return implode(' ', $strings);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbvh6dt6.php:23\n\
    Stack trace:\n#0 /tmp/tmpdbvh6dt6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdbvh6dt6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$string = \"\";\n\tfor ($i\
    \ = 0; $i < $n; $i++) {\n\t\t$string .= \" $i\";\n\t}\n\treturn $string;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf16wbw8h.php:20\n\
    Stack trace:\n#0 /tmp/tmpf16wbw8h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpf16wbw8h.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $s = '';\n    for($i=0;\
    \ $i<$n; $i++) {\n        $s .= $i;\n    }\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2xuv_3h.php:20\n\
    Stack trace:\n#0 /tmp/tmpm2xuv_3h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpm2xuv_3h.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range($n));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp59qo76ng.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp59qo76ng.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59qo76ng.php:16\n\
    Stack trace:\n#0 /tmp/tmp59qo76ng.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp59qo76ng.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(array_fill(0,\
    \ $n, ''), array_fill(0, $n - 1, ' '));\n}\n</code>\n<|/ a dscore=5 tags=php |>\n\
    <| c |>\nThe second array_fill is unnecessary, the first can be done with str_pad\
    \ or similar.\n<|/ c |>\n<| c |>\n`array_fill` is not available in PHP < 5.4.\n\
    <|/ c |>\n<| c |>\nJust realized you're the first person to suggest `array_fill()`\
    \ :-)\n<|/ c |>\n<| c |>\nThis is great, but unfortunately doesn't work if you\
    \ need a leading zero, e.g. if you want a string output of `'03'` rather than\
    \ `'3'`.\n<|/ c |>\n<| c |>\nYes, this is definitely a nice solution, thank you.\n\
    <|/ c |>\n<| a dscore=5 |>\nTry this one:\n<code>\n<?php\n$n = 5;\n\n$str = str_pad($n,\
    \ 2, ' ', STR_PAD_LEFT);\n</code>\n<|/ a tags=php |>\n<| c |>\nThis is also the\
    \ only solution that correctly preserves leading zeros when the number of digits\
    \ are greater than the length of the desired string (e.g. `10` becomes two digits\
    \ of `'01'`).\n<|/ c |>\n<| a dscore=5 |>\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvfv9hcyo.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = \"\";\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $result .= \"$i\";\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpy4biq0.php:20\n\
    Stack trace:\n#0 /tmp/tmpqpy4biq0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqpy4biq0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $ret = \"0\";\n  while ($n--\
    \ > 0) {\n    $ret .= \" $n\";\n  }\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx482qq3u.php:21\n\
    Stack trace:\n#0 /tmp/tmpx482qq3u.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpx482qq3u.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    do {\n\
    \        $result .= $n;\n    } while ($n-- > 0);\n\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoamdw1v8.php:22\n\
    Stack trace:\n#0 /tmp/tmpoamdw1v8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpoamdw1v8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return array_reduce(range(0,\
    \ $n), [\n    'array_merge',\n    ['implode', ['', ' ']],\n  ]);\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nWith php 7.x you can use Generator and GeneratorFunction\
    \ to iterate over all integers up to an arbitrary number:\n<code>\nclass Numbers\n\
    {\n    public static function generate(int $start)\n    {\n        $nums = [];\n\
    \        \n        function* gen($start = null)\n        {\n            $nums[]\
    \ = $start;\n            \n            for ($num = $start; $num < 10; $num++)\
    \ {\n                yield $num;\n            }\n        }\n        \n       \
    \ return new GeneratorFunction($gen)->current();\n    }\n}\n\n$numbers = Numbers::generate(0);\n\
    \nforeach ($numbers as $number) {\n    echo '$number: ', $number, \"\\n\";\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n<?php\n\n/**\n * Generate\
    \ and print integers between 0 to N\n * in array with one value per each item\n\
    \ * \n * $min Minimum value\n * $max Maximum value\n * \n * array\n */\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj9sp2bj4.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = \"\";\n  for($i = 0;\
    \ $i < $n; $i++)\n    $s .= ($i ? \" \" : \"\") . str_pad($i, 3, '0', STR_PAD_LEFT);\n\
    \  return $s;\n}\n</code>\n<|/ a |>\n<| a tags=php,recursion,concatenation,arrays\
    \ |>\nI like this solution\n<code>\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcfjfoevj.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  for($i = 0;\
    \ $i < $n; $i++) {\n    $str .= $i;\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgtwbelzp.php:20\n\
    Stack trace:\n#0 /tmp/tmpgtwbelzp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgtwbelzp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn str_pad('', $n, '0');\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsltn2m_.php:16\n\
    Stack trace:\n#0 /tmp/tmpcsltn2m_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpcsltn2m_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $seq = array();\n  for ($i\
    \ = 0; $i <= $n; $i++) {\n    $seq[] = (string) $i;\n  }\n  return implode(' ',\
    \ $seq);\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = '';\n  for($i =\
    \ 0; $i < $n; $i++) {\n    $result .= ($i ? ' ' : '') . '0';\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvpa2qpq.php:19\n\
    Stack trace:\n#0 /tmp/tmpbvpa2qpq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbvpa2qpq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range($n));\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp1338183u.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp1338183u.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1338183u.php:15\n\
    Stack trace:\n#0 /tmp/tmp1338183u.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp1338183u.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $seq = '';\n  for($i = 0;\
    \ $i < $n; $i++) {\n    $seq .= $i;\n  }\n  return $seq;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpien188bq.php:19\n\
    Stack trace:\n#0 /tmp/tmpien188bq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpien188bq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = str_pad('', $n, '0');\n\
    \    $str = substr($str, 0, strrpos($str, \"\\n\"));\n    return $str;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6rva0jc.php:17\n\
    Stack trace:\n#0 /tmp/tmpu6rva0jc.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu6rva0jc.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = \"\";\n  $i = 0;\n\
    \  while ($i <= $n) {\n    $result .= \" $i\";\n    $i++;\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9m660el6.php:21\n\
    Stack trace:\n#0 /tmp/tmp9m660el6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9m660el6.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $sequence = '';\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $sequence .= ' ' . $i;\n  }\n  return $sequence;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8s5faz47.php:20\n\
    Stack trace:\n#0 /tmp/tmp8s5faz47.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8s5faz47.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n, '0'));\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,math |>\nAnother way\
    \ of doing it...\n<code>\n<?php\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp51p_x74k.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$i = 0;\n\treturn str_pad('',\
    \ $n, \"0\", STR_PAD_RIGHT) . ($i < $n ? $i++ : '');\n}\n\t\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_l4g9th.php:17\n\
    Stack trace:\n#0 /tmp/tmpb_l4g9th.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb_l4g9th.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $i = 0;\n    while (++$i\
    \ < $n)\n        $s .= $i;\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzw49w81.php:19\n\
    Stack trace:\n#0 /tmp/tmptzw49w81.php(24): test()\n#1 {main}\n  thrown in /tmp/tmptzw49w81.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = '';\n  for ($i =\
    \ 0; $i <= $n; $i++) {\n    $result .= ($i > 0) ? ' '.$i : $i;\n  }\n  return\
    \ $result;\n}\n</code>\nOutput:\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb8jk8gbf.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = \"\";\n  for ($n; $n\
    \ >= 1; $n--) $s .= ($n?' ':'0').$n;\n  return $s;\n}\n</code>\nNote that this\
    \ function is basically the same as str_pad but without the leading zeros.\n<|/\
    \ a tags=string,php,string-concatenation,string-formatting,numbers |>\n<| a tags=string,php,string-concatenation,string-formatting,numbers\
    \ |>\nTo format a number, use number_format()\n<code>\n$number = 20;\n$formatted\
    \ = number_format($number, 0);\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't\
    \ exactly answer the question, which is for formatting strings for numbers. I\
    \ only have numbers in my string, like \"20\" not \"20.000\".\n<|/ c |>\n<| c\
    \ |>\nThis answer is fine.  Just be careful that it uses `number_format()` because\
    \ that function will pad numbers with leading zeros.\n<|/ c |>\n<| a |>\nIn PHP\
    \ 7+ you can use sprintf:\n<code>\necho sprintf(\"%05d\", $number);\n</code>\n\
    This produces:\n<code>\n00020\n</code>\n<|/ a dscore=3 tags=string,php,string-concatenation,string-formatting,numbers\
    \ |>\n<| a dscore=2 |>\nThe PHP sprintf() function can be used to pad integers\
    \ with zeroes:\n<code>\n$number= 20;\necho sprintf('%05d', $number);\n</code>\n\
    The output will be 00020\n<|/ a tags=string,php,string-concatenation,string-formatting,numbers\
    \ |>\n<| a |>\nTo format a number using sprintf you can use the following code:\n\
    <code>\n$number = 20;\n$formatted = sprintf(\"%05d\", $number);\n</code>\n<|/\
    \ a dscore=2 tags=string,php,string-concatenation,string-formatting,numbers |>\n\
    <| a dscore=2 |>\nUse sprintf as suggested above by others but make sure you use\
    \ the decimal point and not the comma.\n<code>\n$number = 20;\n$formatted = sprintf(\"\
    %05d\", $number);\n</code>\nThis should give you 00020\n<|/ a tags=string,php,string-concatenation,string-formatting,numbers\
    \ |>\n<| a tags=string,php,string-concatenation,string-formatting,numbers |>\n\
    <code>\n$number = 20;\n$formatted = sprintf(\"%05d\", $number);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\necho sprintf(\"%05d\", $number);\n</code>\n\
    <|/ a tags=string,php\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt_vgr0pi.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function\
    \ ($n) {\n    return sprintf('%04d', $n);\n  }, range(0, $n)));\n}\n</code>\n\
    <|/ a tags=algorithm,php |>\n<| c |>\nThis is almost perfect. Just one issue -\
    \ it seems to be doing it in a specific order. Is there a way to reverse it so\
    \ it does it from n down to 0?\n<|/ c |>\n<| c |>\nYes, of course. Just change\
    \ the `$n` value to `$n - 1`.\n<|/ c |>\n<| c |>\nAh yes that did it. Thank you\
    \ very much.\n<|/ c |>\n<| c |>\nThe problem is it only seems to print out the\
    \ correct amount of numbers for some reason. So for instance, `string_sequence(4)`\
    \ should return `000 001 002 003 004` but it only prints `004 002 001 000 000`\n\
    <|/ c |>\n<| a |>\nIf n is small, use preg_split.\n<code>\n$string = preg_split('/(?<=\\\
    d)(?=[^\\d])/', $string, -1, PREG_SPLIT_NO_EMPTY);\n</code>\nBut if your string\
    \ is really large, use preg_match_all to match digits in one big chunk:\n<code>\n\
    $string = '12345';\n$string = preg_match_all('/\\d+/', $string, $matches);\n$result\
    \ = array_map(function($digit) { return sprintf('%04d', $digit); }, $matches[0]);\n\
    </code>\n<|/ a tags=algorithm,php dscore=1 |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwls8cb2x.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$ret = '';\n\tfor ($i = 0;\
    \ $i < $n; $i++) {\n\t\t$ret .= $i;\n\t}\n\treturn $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgk8ywk50.php:20\n\
    Stack trace:\n#0 /tmp/tmpgk8ywk50.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgk8ywk50.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $seq = array();\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $seq[] = sprintf('%d', $i);\n  }\n  return implode('\
    \ ', $seq);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe best answer (it uses\
    \ no php functions)\n<|/ c |>\n<| c |>\nthis is actually better than the accepted\
    \ answer because it works with non-standard characters (such as unicode)\n<|/\
    \ c |>\n<| c |>\nIf `str_pad` is not available then this function is probably\
    \ the best option.\n<|/ c |>\n<| c |>\nThis is not an accurate one. `str_pad()`\
    \ is not guaranteed to produce exact output when used in conjunction with `echo`\
    \ - see http://stackoverflow.com/questions/11709057/php-string-pad-is-not-exactly-left-padded-with-spaces\n\
    <|/ c |>\n<| c |>\n- `str_pad` doesn't guarantee anything. It may produce a result\
    \ that is identical to the input (because `str_pad` always pads with spaces),\
    \ or it may produce a different result than the input. No matter what it does\
    \ with `str_pad`, you cannot rely on the output being identical.\n<|/ c |>\n<|\
    \ a tags=php |>\nThis seems to work quite well\n<code>\n$length = 10;\n$space\
    \ = \"  \";\n\n$string = \"Hello World\";\necho preg_replace('/(.{' . $length\
    \ . '})/', '$1' . $space, $string);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nNice,\
    \ simple and effective. Thanks!\n<|/ c |>\n<| c |>\nI liked this one because it\
    \ can be used for other characters as well!\n<|/ c |>\n<| c |>\nThis is a bad\
    \ idea because it will match any character at any position in the string, not\
    \ just the characters in $length. `preg_replace('/(.{' . $length . '})/', '$1'\
    \ . $space, $string, 1);` will limit the match to only $length characters and\
    \ it will still work if $length is greater.\n<|/ c |>\n<| c |>\nHow to use it\
    \ if i want to add space after a specific character in a string? Like i have a\
    \ string \"Welcome\" and want to add space after the \"c\" character so it should\
    \ output as \"Welcome  \" ??\n<|/ c |>\n<| c |>\nuse $space=\"&nbsp;\"\n<|/ c\
    \ |>\n<| a dscore=5 tags=php |>\nIf you want to add space after a \nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpku6bbue8.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$a = 0; $n = intval($n);\n\
    \tdo {\n\t\t$a .= \" \" . intval($n);\n\t} while ($n--);\n\treturn $a;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps6nqenx1.php:19\n\
    Stack trace:\n#0 /tmp/tmps6nqenx1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmps6nqenx1.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $s .= $i;\n  }\n  return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdhqc2dbg.php:19\n\
    Stack trace:\n#0 /tmp/tmpdhqc2dbg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdhqc2dbg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range($n));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpwz08oc5o.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpwz08oc5o.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwz08oc5o.php:16\n\
    Stack trace:\n#0 /tmp/tmpwz08oc5o.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpwz08oc5o.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range(0,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function\
    \ ($i) {\n    return sprintf('%03d', $i);\n  }, range(0, $n)));\n}\n</code>\n\
    <|/ a tags=php,mysql,html dscore=0 |>\n<| a |>\nTry this.\n<code>\n<?php \n$result\
    \ = mysql_query(\"SELECT * FROM `table` WHERE `user_id`=\".$_SESSION['userId'].\"\
    \") or die(mysql_error());\nwhile($row = mysql_fetch_array($result)){\n  echo\
    \ '<tr>';\n  echo '<td>'.$row['email'].'</td>';\n  echo '<td>'.$row['first_name'].'</td>';\n\
    \  echo '<td>'.$row['last_name'].'</td>';\n  echo '<td>'.$row['city'].'</td>';\n\
    \  echo '<td>'.$row['country'].'</td>';\n  echo '<td>'.$row['phone'].'</td>';\n\
    \  echo '<td>'.$row['fax'].'</td>';\n  echo '<td>'.$row['website'].'</td>';\n\
    \  echo '<td>'.$row['other'].'</td>';\n  echo '<td>'.$row['comments'].'</td>';\n\
    \  echo '</tr>';\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplm6ioh61.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$string = array_map(function($v)\
    \ { return (string) $v; }, range($n));\n\treturn implode(' ', $string);\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp5sjvs7s4.php\
    \ on line 8\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmp5sjvs7s4.php on line 8\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp5sjvs7s4.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5sjvs7s4.php:17\nStack trace:\n#0 /tmp/tmp5sjvs7s4.php(22):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5sjvs7s4.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function($i)\
    \ {\n    return str_pad($i, 3, '0', STR_PAD_LEFT);\n  }, range($n)));\n}\n\n/**\n\
    \ * Returns the URL of a given path.\n *\n * @param string $path\n * @param string\
    \ $query OPTIONAL\n * @return string\n */\nfunction candidate(...$args) {\n  \
    \  return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpzw1bx8lt.php\
    \ on line 10\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmpzw1bx8lt.php on line 10\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpzw1bx8lt.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzw1bx8lt.php:25\nStack trace:\n#0 /tmp/tmpzw1bx8lt.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzw1bx8lt.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function\
    \ ($i) {\n    return sprintf('%04d', $i);\n  }, range(0, $n)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1lkqs02.php:18\n\
    Stack trace:\n#0 /tmp/tmpn1lkqs02.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpn1lkqs02.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $a = 0;\n  for($i = 1; $i\
    \ < $n; $i++) {\n    $a .= $i;\n  }\n  return $a;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\n`function string_sequence($n) {\n  $a = 0;\n  for($i = 1; $i < $n; $i++)\
    \ {\n    $a .= $i;\n  }\n  return $a;\n}`\n\nThis is perfect.\n<|/ c |>\n<| a\
    \ tags=php,sequence,numbers |>\n<code>\n<?php\n  $numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    \  $s = '';\n  foreach ($numbers as $number) {\n    $s .= $number . ' ';\n  }\n\
    \  echo $s;\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6zk1_6cy.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $s .= $i;\n  }\n  return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0oczpkkf.php:20\n\
    Stack trace:\n#0 /tmp/tmp0oczpkkf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0oczpkkf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = array();\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $str[] = str_pad($i, strlen($n) + 1);\n  }\n  return\
    \ implode(' ', $str);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nYou can\
    \ use array_chunk to split into arrays with equal lengths then join them with\
    \ a space.\n<code>\n<?php\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkb6wgdbd.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $sequence = '';\n  while (--$n\
    \ >= 0) {\n    $sequence .= ' '.$n;\n  }\n  return $sequence;\n}\n</code>\nIf\
    \ you need to support a variable length string, then you only need to add more\
    \ conditions:\n<code>\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyxbo6b7m.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $sequence = array();\n  while\
    \ ($n--) {\n    $sequence[] = $n;\n  }\n  return implode(\" \", $sequence);\n\
    }\n</code>\n<|/ a tags=php,wordpress,jquery,javascript,html |>\n<| c |>\nOk, I\
    \ am still learning and I see what you are saying, however I do not see how this\
    \ solves my problem, I do not know how to implement this into my code.\n<|/ c\
    \ |>\n<| c |>\nWell - if you put this `<script>` tag within the `<head>` section\
    \ of the HTML, then you can easily use it in your HTML. But again, I would probably\
    \ go for a solution that does not rely on Javascript (like PHP), as PHP is a server-side\
    \ language and might not be installed on the client machine.\n<|/ c |>\n<| c |>\n\
    The javascript is just for making it look nicer. Of course you don't have to implement\
    \ the javascript into your code, but if you look at the source code (which is\
    \ what you are looking at after all), you'll see that these strings have been\
    \ replaced by these php strings.\n<|/ c |>\n<| c |>\nAhh I see! Ok I understand\
    \ now.\n<|/ c |>\n<| c |>\nIf you could please elaborate on how I can implement\
    \ this into my code, it would be a great help. Thanks.\n<|/ c |>\n<| a tags=php,wordpress,jquery,javascript,html\
    \ |>\nTry this\n<code>\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp472xsz5v.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range($n));\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpwlp98ox0.php\
    \ on line 8\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpwlp98ox0.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwlp98ox0.php:15\n\
    Stack trace:\n#0 /tmp/tmpwlp98ox0.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpwlp98ox0.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$str = '';\n\twhile ($n--\
    \ > 0) {\n\t\t$str .= (0 === $n) ? \"0\" : \" \";\n\t}\n\treturn $str;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8l48th0u.php:20\n\
    Stack trace:\n#0 /tmp/tmp8l48th0u.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8l48th0u.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence = '';\n    $x\
    \ = 0;\n    while (count($sequence) < $n) {\n        $sequence.= $x;\n       \
    \ ++$x;\n    }\n    return $sequence;\n}\n\nfunction candidate(...$args) {\n \
    \   return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpsjc8bbwb.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsjc8bbwb.php:22\nStack trace:\n#0 /tmp/tmpsjc8bbwb.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjc8bbwb.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  while (++$n <\
    \ PHP_INT_MAX) {\n    $s .= sprintf('%u', $n);\n  }\n  return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 130023432 bytes) in /tmp/tmp9g5zmwiv.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $s = \"\";\n    for ($i\
    \ = 0; $i < $n; ++$i) {\n        $s .= $i;\n    }\n    return $s;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0f4ltmg0.php:19\n\
    Stack trace:\n#0 /tmp/tmp0f4ltmg0.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0f4ltmg0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $start = 0;\n    $string\
    \ = '';\n    while ($start < $n) {\n        $string .= $start . ' ';\n       \
    \ $start++;\n    }\n    return $string;\n}\nfunction candidate(...$args) {\n \
    \   return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgflms1ic.php:21\n\
    Stack trace:\n#0 /tmp/tmpgflms1ic.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgflms1ic.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', str_split($n));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgx8ld91.php:17\n\
    Stack trace:\n#0 /tmp/tmptgx8ld91.php(21): test()\n#1 {main}\n  thrown in /tmp/tmptgx8ld91.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $res = '';\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $res .= ($i ? ' ' : '') . '0';\n  }\n  return $res;\n\
    }\n</code>\nAnd here is my code to get the maximum sum:\n<code>\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo63b4_ex.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $numbers = range(0, $n);\n\
    \  return implode(array_slice($numbers, 0, count($numbers) - 1), ' ');\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5w1wh5ea.php:16\n\
    Stack trace:\n#0 /tmp/tmp5w1wh5ea.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp5w1wh5ea.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', str_split($n));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhncsrr9.php:17\n\
    Stack trace:\n#0 /tmp/tmpyhncsrr9.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpyhncsrr9.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(array_fill(0,\
    \ $n, ' '), range($n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpho_ieqos.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpho_ieqos.php:16\n\
    Stack trace:\n#0 /tmp/tmpho_ieqos.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpho_ieqos.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', str_split($n,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_split(): The length of each segment must be greater than\
    \ zero in /tmp/tmppk_ufjgx.php on line 8\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmppk_ufjgx.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppk_ufjgx.php:16\nStack trace:\n#0 /tmp/tmppk_ufjgx.php(21):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppk_ufjgx.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = str_pad('', $n, '0');\n\
    \  return $str;\n}\n</code>\nOutput:\n<code>\n$ php sandbox.php \nArray ( [0]\
    \ => 0 [1] => 1 [2] => 2 [3] => 3 [4] => 4 [5] => 5 )\n</code>\n<|/ a dscore=0\
    \ tags=php |>\n<| a |>\nIf you just want to get all digits starting from 0 to\
    \ $n, this could be the easiest one:\n<code>\n$n = 3;\n$digits = range(1, $n);\n\
    $numbers = array_map(function($digit) {\n    return $digit;\n}, $digits);\n\n\
    print_r($numbers);\n</code>\n<|/ a tags=php dscore=0 |>\n<| a |>\nI dont think\
    \ that is what OP asked. OP ask for all numbers from 0 to n. Lets say n=3\nOutput\n\
    <code>\n[0] => 0\n[1] => 1\n[2] => 2\n[3] => 3\n</code>\nWhat this does is \n\
    <code>\n$numbers = array_fill(0, $n, 0);\n</code>\nBut it will add all array numbers\
    \ (0,1,2,...) instead of 0 to 3 only.\nTo get all numbers from 0 to 3 just use\
    \ below code:\n<code>\n$numbers = range(0,3);\n</code>\n<|/ a tags=php dscore=0\
    \ |>\n<| a |>\nIf you really want to get all numbers from 0 to $n, you can do\
    \ something like this :\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8d6gn3f_.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n, '0'));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=algorithm,php\
    \ |>\nThe algorithm for solving this problem is fairly simple. Just go through\
    \ the digits from left to right. For each digit you have to determine whether\
    \ or not it is the last digit in the sequence. For each digit that is not a final\
    \ digit, put it into the sequence if it is smaller than the previous digit. Otherwise,\
    \ put it into the sequence if it is greater or equal to the previous digit. \n\
    So for 0 to 9 we'd go through the digits of 0 and determine that 0 < 1. Now the\
    \ sequence is 0 1 2 3 4 5 6 7 8 9. Now we determine the next digit of the sequence\
    \ by looking at it relative to the first digit in the sequence. Since the first\
    \ digit of the sequence is 1, we look for the next digit in the sequence which\
    \ equals 2. Since 2 is the last digit in the sequence, 2 is the next digit. So\
    \ we put 2 into the sequence.\nFor 10 to 99 we'd look at the first digit in the\
    \ sequence and determine that 10 > 1. Now we look 1 to the right and determine\
    \ that 1 > 9. So we put 9 into the sequence.\nFor 100 to 999 we'd look at the\
    \ first digit in the sequence and determine that 100 > 10. Now we look 10 to the\
    \ right and determine that 10 > 9. So we put 9 into the sequence.\nFor 1000 to\
    \ 9999 we'd look at the first digit in the sequence and determine that 1000 >\
    \ 100. Now we look 100 to the right and determine that 100 > 9. So we put 9 into\
    \ the sequence.\nFor 10000 to 99999 we'd look at the first digit in the sequence\
    \ and determine that 10000 > 1000. Now we look 1000 to the right and determine\
    \ that 100 > 9. So we put 9 into the sequence.\nFor 1000000 to 999999 we'd look\
    \ at the first digit in the sequence and determine that 1000000 > 10000. Now we\
    \ look 10000 to the right and determine that 100 > 9. So we put 9 into the sequence.\n\
    For 10000000 to 999999999 we'd look at the first digit in the sequence and determine\
    \ that 100000000 > 100000. Now we look 100000 to the right and determine that\
    \ 100 > 9. So we put 9 into the sequence.\nFor 1000000000 to 99999999999 we'd\
    \ look at the first digit in the sequence and determine that 1000000000 > 1000000.\
    \ Now we look 1000000 to the right and determine that 100 > 9. So we put 9 into\
    \ the sequence.\nAnd so on...\nThe algorithm has O(n) time complexity and O(1)\
    \ space complexity.\n<code>\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprt3yppi5.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $numbers = range(0, $n+1);\n\
    \  return implode(' ', $numbers);\n}\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp802d0kmu.php:16\n\
    Stack trace:\n#0 /tmp/tmp802d0kmu.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp802d0kmu.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$sequence = '';\n\tfor ($i\
    \ = 0; $i <= $n; $i++) {\n\t\t$sequence .= (string) $i;\n\t}\n\treturn $sequence;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_cvuqyw.php:21\n\
    Stack trace:\n#0 /tmp/tmpj_cvuqyw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpj_cvuqyw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  while ($n--)\
    \ {\n    $str .= $n;\n  }\n  return $str;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpia84huei.php:20\n\
    Stack trace:\n#0 /tmp/tmpia84huei.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpia84huei.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = \"\";\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $result .= $i;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvepbl7pg.php:20\n\
    Stack trace:\n#0 /tmp/tmpvepbl7pg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvepbl7pg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $string = '';\n  for ($i =\
    \ 0; $i < $n; $i++) $string .= $i;\n  return $string;\n}\n</code>\nAnd now we\
    \ got the basic logic of how to perform the actual counting. We just need a way\
    \ to generate the output without having to do all the incrementing ourselves.\
    \ Fortunately there's a nice and simple function we can use to do this. It's called\
    \ array_map, and it can accept a callback function to perform any kind of modification\
    \ on each item in the array.\nSo let's use the anonymous callback function to\
    \ increment the value of the elements in the array by one. It could also be written\
    \ more tersely as $value++ but that would require us to declare $value first which\
    \ is not always possible or desirable.\nThe function is declared as:\n<code>\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdcr_znh0.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = str_repeat('0', $n);\n\
    \    $str = substr($str, 0, strlen($str) - 1);\n    return $str;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1dfnas4.php:18\n\
    Stack trace:\n#0 /tmp/tmpf1dfnas4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpf1dfnas4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $n = (int)$n;\n    return\
    \ implode(', ', array_map(function($i) {\n        return $i;\n    }, range($n)));\n\
    }\n</code>\n<|/ a |>\n<| a dscore=3 tags=php,string,algorithm |>\nMy take on it:\n\
    <code>\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg0e0we84.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $s = '';\n    for($i = 0;\
    \ $i < $n; $i++) {\n        $s .= $i;\n    }\n    return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjq2ifim.php:19\n\
    Stack trace:\n#0 /tmp/tmpcjq2ifim.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcjq2ifim.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for($i = 0; $i\
    \ < $n; $i++) {\n    $s .= ($i ? ' ' : '').$i;\n  }\n  return $s;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cebmht7.php:19\n\
    Stack trace:\n#0 /tmp/tmp7cebmht7.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7cebmht7.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn implode(' ', array_map(function($i)\
    \ {\n\t\treturn (string) $i;\n\t}, range($n)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpdycnsa4d.php\
    \ on line 10\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmpdycnsa4d.php on line 10\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpdycnsa4d.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdycnsa4d.php:18\nStack trace:\n#0 /tmp/tmpdycnsa4d.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdycnsa4d.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = \"\";\n  for($i\
    \ = 0; $i < $n; $i++) {\n    $result .= $i . \" \";\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbib4mdgg.php:19\n\
    Stack trace:\n#0 /tmp/tmpbib4mdgg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbib4mdgg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n  return implode(\"\
    \ \", array_map(function ($n) {\n    return str_pad($n, strlen($n) + 1);\n  },\
    \ range($n)));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp45nnh9az.php\
    \ on line 11\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmp45nnh9az.php on line 11\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp45nnh9az.php on line 11\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp45nnh9az.php:18\nStack trace:\n#0 /tmp/tmp45nnh9az.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp45nnh9az.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $n = (int) $n;\n    if ($n\
    \ < 0)\n        throw new InvalidArgumentException(\"Number of elements must be\
    \ positive\");\n    return implode(' ', range($n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpou_es2df.php\
    \ on line 11\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpou_es2df.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou_es2df.php:19\n\
    Stack trace:\n#0 /tmp/tmpou_es2df.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpou_es2df.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n === 0) {\n      \
    \  return '0';\n    }\n    if ($n < 0) {\n        return '';\n    }\n    $n =\
    \ (int) $n;\n    if ($n === 0) {\n        return '0 ';\n    }\n    $s = '';\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $s .= $i;\n        if ($i < $n - 1)\
    \ {\n            $s .= ' ';\n        }\n    }\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacnh0nap.php:34\n\
    Stack trace:\n#0 /tmp/tmpacnh0nap.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpacnh0nap.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $string = '';\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $string .= $i;\n  }\n  return $string;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t8b3g7h.php:19\n\
    Stack trace:\n#0 /tmp/tmp6t8b3g7h.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6t8b3g7h.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  for ($i=0; $i<$n;\
    \ ++$i) {\n    $str .= chr($i+48);\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8w8a_ila.php:20\n\
    Stack trace:\n#0 /tmp/tmp8w8a_ila.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8w8a_ila.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function($i)\
    \ { return \"$i\"; }, range($n)));\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpfdhnr472.php\
    \ on line 8\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmpfdhnr472.php on line 8\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpfdhnr472.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfdhnr472.php:16\nStack trace:\n#0 /tmp/tmpfdhnr472.php(21):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfdhnr472.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  while ($n--)\
    \ {\n    $str .= '%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvygv4q3t.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', array_map(function($i)\
    \ { return (string) $i; }, range(0, $n)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $strs = array();\n  for ($i\
    \ = 0; $i < $n; ++$i) {\n    $strs[] = $i;\n  }\n  return implode(' ', $strs);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_97ohhn.php:20\n\
    Stack trace:\n#0 /tmp/tmpr_97ohhn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpr_97ohhn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $return = '';\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $return .= $i;\n  }\n  return $return;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftff9rkd.php:19\n\
    Stack trace:\n#0 /tmp/tmpftff9rkd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpftff9rkd.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map(function\
    \ ($i) {\n    return str_pad($i, 5, '0', STR_PAD_LEFT);\n  }, range(0, $n)));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdq6nk643.php:18\n\
    Stack trace:\n#0 /tmp/tmpdq6nk643.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdq6nk643.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$result = '';\n\tfor ($i =\
    \ 0; $i < $n; $i++) {\n\t\t$result .= ($i > 0 ? ' ' : '') . ($i + 1);\n\t}\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56ouie9q.php:20\n\
    Stack trace:\n#0 /tmp/tmp56ouie9q.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp56ouie9q.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = \"\";\n  for($i=0;\
    \ $i<$n; $i++) {\n    $result .= $i.\" \";\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc46oi_f4.php:19\n\
    Stack trace:\n#0 /tmp/tmpc46oi_f4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpc46oi_f4.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $s = \"\";\n    for($i=0;$i<$n;$i++)\
    \ {\n        $s .= \" $i\";\n    }\n    return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81sbgiyv.php:19\n\
    Stack trace:\n#0 /tmp/tmp81sbgiyv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp81sbgiyv.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range($n,\
    \ 0, -1));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58hxep8k.php:17\n\
    Stack trace:\n#0 /tmp/tmp58hxep8k.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp58hxep8k.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = '';\n    for($i =\
    \ 0; $i < $n; $i++) $str .= (isset($i) ? ' ' : '').$i;\n    return $str;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bjkfc01.php:18\n\
    Stack trace:\n#0 /tmp/tmp1bjkfc01.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1bjkfc01.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $string = '';\n  while ($n--)\
    \ {\n    $string .= ' '.$n;\n  }\n  return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1ishslk.php:20\n\
    Stack trace:\n#0 /tmp/tmpy1ishslk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpy1ishslk.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_fill(0,\
    \ $n, \"$n\"));\n}\n\n/**\n * Returns whether a value is truthy. A value is considered\
    \ truthy if it is not null, empty, or undefined.\n */\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4iqdj_6w.php:19\n\
    Stack trace:\n#0 /tmp/tmp4iqdj_6w.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4iqdj_6w.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $seq = '';\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $seq .= (string) $i;\n  }\n  return $seq;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr320gjim.php:20\n\
    Stack trace:\n#0 /tmp/tmpr320gjim.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpr320gjim.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  while ($n--) {\n\
    \    $s .= ' '.$n;\n  }\n  return $s;\n}\n\nfunction candidate(...$args) {\n \
    \   return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tmspq95.php:20\n\
    Stack trace:\n#0 /tmp/tmp6tmspq95.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6tmspq95.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $numbers = '';\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $numbers .= $i;\n  }\n  return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqs9z4cz.php:20\n\
    Stack trace:\n#0 /tmp/tmpfqs9z4cz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfqs9z4cz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = '';\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $result .= ($i > 0) ? ' ' : '';\n    $result .= $i;\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6je7zgmb.php:20\n\
    Stack trace:\n#0 /tmp/tmp6je7zgmb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6je7zgmb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = str_split((string)$n,\
    \ 1);\n  return implode(' ', array_fill(0, count($str), $str[0]));\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbvzkxr3.php:18\n\
    Stack trace:\n#0 /tmp/tmplbvzkxr3.php(22): test()\n#1 {main}\n  thrown in /tmp/tmplbvzkxr3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  for ($i = 0;\
    \ $i <= $n; $i++) {\n    $str .= $i;\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cxgk8fh.php:21\n\
    Stack trace:\n#0 /tmp/tmp8cxgk8fh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8cxgk8fh.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $numbers = range($n);\n  return\
    \ implode(' ', array_map(function ($number) {\n    return sprintf('%d', $number);\n\
    \  }, $numbers));\n}\n</code>\n<|/ a |>\n<| a |>\nThis is not exactly a recursive\
    \ function, but it is easy to understand\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdabaq8hr.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', array_map('chr',\
    \ range($n)));\n}\n\n/**\n * Given a UTF-8 encoded string $string, return its\
    \ HTML entity counterpart.\n * >>> unescape_html_entities(html_entity_decode('&amp;'))\n\
    \ * '&'\n * >>> unescape_html_entities(html_entity_decode('&amp;amp;'))\n * '&amp;'\n\
    \ * >>> unescape_html_entities(html_entity_decode('&amp;amp;amp;'))\n * '&amp;amp;'\n\
    \ */\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmplm5s0qde.php\
    \ on line 8\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmplm5s0qde.php on line 8\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmplm5s0qde.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplm5s0qde.php:25\nStack trace:\n#0 /tmp/tmplm5s0qde.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplm5s0qde.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $numbers = '';\n    for\
    \ ($i = 0; $i < $n; $i++)\n        $numbers .= $i;\n    return $numbers;\n}\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfcq1q3y.php:18\n\
    Stack trace:\n#0 /tmp/tmpzfcq1q3y.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpzfcq1q3y.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $sequence = [];\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $sequence[] = $i;\n  }\n  return implode(' ', $sequence);\n\
    }\n</code>\n<|/ a tags=php,performance,arrays,functional-programming dscore=0\
    \ |>\n<| a tags=php,performance,arrays,functional-programming |>\nI like answer\
    \ but I would like to see a solution where you just need to loop once.\n<code>\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpia_igtuh.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if (is_numeric($n)) {\n  \
    \  return $n;\n  }\n  return implode(' ', range(0, $n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydeoexyf.php:19\n\
    Stack trace:\n#0 /tmp/tmpydeoexyf.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpydeoexyf.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $str .= ' '.$i;\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpni8bdn73.php:20\n\
    Stack trace:\n#0 /tmp/tmpni8bdn73.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpni8bdn73.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = '';\n  while ($n)\
    \ {\n    $result = ' ' . $result;\n    $n--;\n  }\n  return $result;\n}\n\n/**\n\
    \ * Returns a list of CSS classes in the given CSS.\n *\n * If $css is provided\
    \ as a string or array, the values will be merged with the default\n * CSS classes.\n\
    \ *\n * If $classes is an integer, the class names will be returned in CSS format.\
    \ If\n * $classes is an array, the values will be merged with the default CSS\
    \ classes.\n *\n * If $classes is true, the default CSS classes will be returned\
    \ in CSS format.\n *\n * If $classes is a string, the string will be added to\
    \ the default CSS classes.\n *\n * If $classes is a CSS array, the values will\
    \ be merged with the default CSS classes.\n *\n * @param array|string $css CSS\
    \ classes to return. Passing an array will merge the classes.\n * @param bool|integer\
    \ $classes If $classes is an integer, the CSS classes will be returned in\n *\
    \     CSS format. If $classes is true, the CSS classes will be returned in array\
    \ format.\n *     If $classes is a string, then the string will be added to the\
    \ default CSS classes.\n * @param bool $add_default If $classes is true, then\
    \ the default CSS classes will be added\n *     to $classes after merging the\
    \ $css array into it. If $add_default is a boolean, then\n *     the $classes\
    \ array will be merged with the default CSS classes. If $add_default is\n *  \
    \   a string, then $classes will be merged with the default CSS classes before\
    \ adding the\n *     string as the $classes array value.\n *\n * @return array\
    \ The CSS classes for the given CSS.\n */\nfunction candidate(...$args) {\n  \
    \  return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0ol9wfv.php:48\n\
    Stack trace:\n#0 /tmp/tmpu0ol9wfv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpu0ol9wfv.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  $count = 0;\n\
    \  do {\n    $s .= $count;\n    $count += $n;\n  } while ($count <= $n);\n  return\
    \ $s;\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 130023432 bytes) in /tmp/tmpjct7hwqh.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $ret = '';\n  for($i = 0;\
    \ $i < $n; $i++) {\n    $ret .= ($i > 0) ? ' ' : '';\n    $ret .= (string)($i\
    \ + 1);\n  }\n  return $ret;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0stjkdva.php:21\n\
    Stack trace:\n#0 /tmp/tmp0stjkdva.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0stjkdva.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
