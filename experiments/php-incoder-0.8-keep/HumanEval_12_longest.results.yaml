name: HumanEval_12_longest
language: php
results:
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!is_iterable($strings)) throw new InvalidArgumentException(\"Argument\
    \ must be iterable\");\n  $lengths = array_map(function($s) {\n    return mb_strlen($s);\n\
    \  }, @$strings);\n\n  array_pop($lengths);\n  sort($lengths, SORT_NUMERIC);\n\
    \  return array_shift($lengths);\n}\n</code>\nThe above code is written in PHP\
    \ 7.\n<|/ a |>\n<| c |>\nThis is a great solution.\n<|/ c |>\n<| c |>\nHow would\
    \ you modify this to count the longest substring of the array that contains the\
    \ longest string in that array?\n<|/ c |>\n<| a tags=arrays,string,php dscore=5\
    \ |>\nI found a nice solution here on StackOverflow: \nhttps://stackoverflow.com/a/10305318/1218992\n\
    <code>\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptk0729qk.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = strlen(max($strings, null));\n    foreach ($strings as $str)\
    \ {\n        if (strlen($str) > $longest) {\n            $longest = strlen($str);\n\
    \        }\n    }\n    return $longest ? $strings[array_search($longest, $strings)]\
    \ : null;\n}\n</code>\n<|/ a tags=php,string,arrays |>\n<| c |>\nI liked this\
    \ one because it allowed me to change the \"longest\" function to find the longest\
    \ word in a list of strings.\n<|/ c |>\n<| a |>\n<code>\n$str = 'Hello';\n$array\
    \ = array('Hello','Hi','How','Are','You');\n$count = array_count_values($array);\n\
    \nforeach($count as $letter=>$counts){\n    $max[$letter] = $counts>$count[$letter]?$counts[$letter]:$count[$letter];\n\
    }\n\nforeach($count as $letter=>$counts){\n    if($counts==$max[$letter])\n  \
    \      echo $letter.' occurs '.$counts.' times'; \n}\n</code>\n<|/ a dscore=2\
    \ tags=php,string,arrays |>\n<| c |>\nThanks, that's a great solution\n<|/ c |>\n\
    <| c |>\nThis answer is incorrect because it doesn't take into account repeated\
    \ values in $strings. So if you have \"Hi Hi\" it will only return \"Hi\" because\
    \ it is the longest word in the array. My answer also does exactly that.\n<|/\
    \ c |>\n<| a tags=php,string,arrays dscore=2 |>\nThis is what I would do:\n<code>\n\
    $strings = array('Hello World', 'Hello', 'How', 'Are', 'You');\n\n$count = array_count_values($strings);\n\
    \n$longest = null;\nforeach($count as $string=>$count) {\n    if ($count > $longest\
    \ or $longest === null) {\n        $longest = $string;\n    }\n}\n\necho $longest;\n\
    </code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpouk4qpii.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = count($strings) > 1 ? max(array_map('strlen', $strings)) :\
    \ null;\n    return $longest === null ? $strings[0] : $longest;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoi6015cr.php:19\n\
    Stack trace:\n#0 /tmp/tmpoi6015cr.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpoi6015cr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $maxLength = -1;\n    foreach ($strings as $s) {\n        if (strlen($s)\
    \ > $maxLength) {\n            $maxLength = strlen($s);\n        }\n    }\n  \
    \  return $maxLength === -1 ? None : $strings[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmptqwdev6d.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptqwdev6d.php:24\nStack\
    \ trace:\n#0 /tmp/tmptqwdev6d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptqwdev6d.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (count($strings) == 0) {\n    return None;\n  }\n\n  $longest = $strings[0];\n\
    \  foreach ($strings as $str) {\n    if (strlen($str) > strlen($longest)) {\n\
    \      $longest = $str;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpjnrmslkq.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjnrmslkq.php:28\nStack\
    \ trace:\n#0 /tmp/tmpjnrmslkq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjnrmslkq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    foreach ($strings as $string) {\n        $count = 1;\n        foreach\
    \ ($strings as $testString) {\n            if (strlen($testString) > strlen($string))\
    \ {\n                $count++;\n            }\n            if ($string === $testString)\
    \ {\n                $count++;\n            }\n        }\n        if ($count >\
    \ 1) {\n            return $string;\n        }\n    }\n    return null;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmap8m12w.php:34\n\
    Stack trace:\n#0 /tmp/tmpmap8m12w.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmap8m12w.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $maxSize = 0;\n \
    \   foreach ($strings as $s) {\n        if (strlen($s) > $maxSize) {\n       \
    \     $maxSize = strlen($s);\n        }\n    }\n    return $maxSize > 0 ? $strings[strlen($strings)\
    \ === $maxSize ? 0 : strlen($strings)] : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpeay5e2tl.php\
    \ on line 19\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpeay5e2tl.php on line 19\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpeay5e2tl.php:28\nStack trace:\n#0 /tmp/tmpeay5e2tl.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeay5e2tl.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings))\n        return null;\n    $longest = count($strings)\
    \ > 1 ? mb_strlen($strings[0], 'UTF-8') : 0;\n    foreach ($strings as $s)\n \
    \       if (mb_strlen($s, 'UTF-8') > $longest)\n            $longest = mb_strlen($s,\
    \ 'UTF-8');\n    return empty($strings) ? null : $strings[0];\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nWorks perfectly in our codebase. Thanks.\n<|/ c |>\n<| a dscore=3\
    \ tags=string,php,arrays |>\nI had the same problem and found the function here:\
    \ http://php.net/manual/en/function.array-pop.php#96426\n<code>\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt2_zcy0d.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $maxlen = PHP_INT_MAX;\n\
    \    foreach ($strings as $s) {\n        $len = strlen($s);\n        if ($len\
    \ > $maxlen) {\n            $maxlen = $len;\n        }\n    }\n    return $maxlen\
    \ > 0 ? '%'.str_pad($maxlen, $maxlen, '0', STR_PAD_LEFT) : null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: str_pad(): Padding length is too long in /tmp/tmps_pe_0du.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_pe_0du.php:29\n\
    Stack trace:\n#0 /tmp/tmps_pe_0du.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps_pe_0du.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest_length =\
    \ -1;\n    $longest_value = null;\n    foreach ($strings as $string) {\n     \
    \   if (strlen($string) > $longest_length) {\n            $longest_value = $string;\n\
    \            $longest_length = strlen($string);\n        }\n    }\n    return\
    \ $longest_value;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if ($strings) {\n    $string = end($strings);\n    $longest = strlen($string);\n\
    \    foreach ($strings as $string) {\n      if (strlen($string) > $longest) {\n\
    \        $longest = strlen($string);\n        $string = end($strings);\n     \
    \ }\n    }\n    return $string;\n  } else {\n    return null;\n  }\n}\n</code>\n\
    Now you can simply call it like this:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm7pmatt6.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $result = NULL;\n    $maxLength = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $maxLength) {\n\
    \            $maxLength = $length;\n            $result = $string;\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $lengths =\
    \ array_map(function($s) { return strlen($s); }, $strings);\n    $max_length =\
    \ array_reduce($lengths, function($prev, $current) { return max($prev, $current);\
    \ }, 0);\n\n    $results = array();\n    foreach ($strings as $string) {\n   \
    \     $length = strlen($string);\n        if ($length >= $max_length) {\n    \
    \        $results[] = $string;\n        }\n    }\n\n    if (count($results) >\
    \ 0) {\n        return max($results);\n    }\n\n    return null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptstpef9y.php:38\n\
    Stack trace:\n#0 /tmp/tmptstpef9y.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptstpef9y.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!is_array($strings)) {\n        return $strings;\n    }\n\n    $longest\
    \ = '';\n    $length = count($strings);\n    foreach ($strings as $s) {\n    \
    \    if (strlen($s) > $length) {\n            $length = strlen($s);\n        \
    \    $longest = $s;\n        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgj5uzvft.php:31\n\
    Stack trace:\n#0 /tmp/tmpgj5uzvft.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgj5uzvft.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  return $strings && count($strings) > 0 && array_reduce($strings, function($a,\
    \ $b) {\n    return strlen($b) > strlen($a) ? $b : $a;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnx6d5xb.php:20\n\
    Stack trace:\n#0 /tmp/tmppnx6d5xb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppnx6d5xb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return implode('', array_map(function($s) {\n        return strlen($s);\n\
    \    }, $strings));\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzruc86e.php:20\n\
    Stack trace:\n#0 /tmp/tmpbzruc86e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbzruc86e.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = array();\n  $strlens = array();\n  foreach ($strings as $str)\
    \ {\n    $strlens[] = mb_strlen($str, 'UTF-8');\n  }\n  sort($strlens);\n  foreach\
    \ ($strlens as $strlen) {\n    if (0 === $strlen) {\n      return '';\n    }\n\
    \    if (isset($longest[$strlen])) {\n      $longest[$strlen] = $longest[$strlen]\
    \ . ' ' . $str;\n    } else {\n      $longest[$strlen] = $str;\n    }\n  }\n \
    \ return reset($longest);\n}\n</code>\n<|/ a dscore=2 tags=php,arrays,function\
    \ |>\n<| a dscore=1 |>\nTry this:\n<code>\n<?php\n    function longestString($array){\n\
    \        $strLen = array();\n        foreach ($array as $arr){\n            $strLen[]\
    \ = mb_strlen($arr,'UTF-8');\n        }\n        return max($strLen);\n    }\n\
    \n    echo longestString($array);\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpps4eb7uf.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max_length = 0;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $max_length) {\n            $max_length\
    \ = $length;\n        }\n    }\n    return $max_length > 0 ? substr(strrchr($strings[0],\
    \ $max_length), 1) : null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9jgxbg3.php:26\n\
    Stack trace:\n#0 /tmp/tmpi9jgxbg3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpi9jgxbg3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    foreach ($strings as $s) {\n        if (strlen($s)\
    \ > strlen($longest)) {\n            $longest = $s;\n        }\n    }\n    return\
    \ $longest ?: null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    $max_length = 0;\n    foreach ($strings as $str)\
    \ {\n        $length = strlen($str);\n        if ($length > $max_length) {\n \
    \           $longest = $str;\n            $max_length = $length;\n        } else\
    \ if ($length == $max_length) {\n            $longest = $str . $longest;\n   \
    \     }\n    }\n    return $max_length > 1 ? $longest : $strings[0];\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kbtt79c.php:30\n\
    Stack trace:\n#0 /tmp/tmp9kbtt79c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9kbtt79c.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings || count($strings) == 0) return null;\n    $max_length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $max_length) {\n            $max_length = $length;\n  \
    \      }\n    }\n    return ($strings[0] == '') ? $strings[0] : substr($strings[0],\
    \ 0, $max_length);\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\n<code>\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx4sjvid5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $shortest = null;\n    foreach ($strings as $string)\
    \ {\n        if (is_null($shortest)) {\n            $longest = $string;\n    \
    \        $shortest = $string;\n        } elseif (mb_strlen($string) > mb_strlen($shortest))\
    \ {\n            $longest = $string;\n        } else {\n            $shortest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n</code>\n<|/ a dscore=2\
    \ tags=laravel,eloquent,php |>\n<| c |>\nThis works well. I still had to modify\
    \ the `get()` to `get()->orderBy('id')` to get it to work.\n<|/ c |>\n<| c |>\n\
    Yes. I overlooked the fact that Laravel does not use IDs in its Eloquent models.\
    \ I guess I was a bit lazy. Sorry for the trouble.\n<|/ c |>\n<| a |>\nI did a\
    \ quick test with my own project and found that this solution worked better (based\
    \ on some of the other answers here).\nIt seems that if your data contains any\
    \ null values the \"max\" function will get confused, so I added a filter function\
    \ to filter out null values before doing the max call.\n<code>\n$query = User::where('email',\
    \ '=', '');\n$query = $query->filter(function ($query) {\n    $query->whereNull('email');\n\
    })->max('id');\n</code>\n<|/ a tags=laravel,eloquent,php dscore=1 |>\n<| a |>\n\
    It seems that the max() method doesn't work with eloquent models.\nSo I did this:\n\
    <code>\n$users = User::where('email', '=', '')\n    ->get()\n    ->orderBy('id')\n\
    \    ->take(1);\n</code>\n<|/ a tags=laravel,eloquent,php dscore=0 |>\n<| c |>\n\
    If you really need it to be max you can change it to `take(2)` and then just get\
    \ the first element of the collection.\n<|/ c |>\n<| a tags=laravel,eloquent,php\
    \ |>\nIf you have multiple users with the same name, and you want to return the\
    \ user with the largest ID, you can do it like this:\n<code>\n$user = User::where('name',\
    \ '=', 'John')->orderBy('id')->take(1)->first();\n</code>\nThis will return the\
    \ User with the highest ID named \"John\".\n<|/ a dscore=0 |>\n<| a tags=laravel,eloquent,php\
    \ |>\nI use this in my projects. It's simple.\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9_pc_i46.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $max_len = -1;\n\
    \    $longest = null;\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if ($length > $max_len) {\n            $longest =\
    \ $string;\n            $max_len = $length;\n        } else if ($length == $max_len)\
    \ {\n            $longest = $string . 'x';\n            $max_len = $length;\n\
    \        }\n    }\n    if ($longest !== null) {\n        return $longest;\n  \
    \  }\n    return;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_5xlzc8.php:37\n\
    Stack trace:\n#0 /tmp/tmps_5xlzc8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps_5xlzc8.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $s) {\n \
    \       if (strlen($s) > strlen($longest)) {\n            $longest = $s;\n   \
    \     }\n    }\n    return $longest;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n\
    Here's a simple solution I implemented, using PHP's array_intersect() function\
    \ (this does not require any sorting and is very efficient):\n<code>\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfktvjooi.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    $lengths = array_map(function ($s) {\n        return\
    \ mb_strlen($s);\n    }, $strings);\n    // The first entry in $lengths will be\
    \ the longest, and all others will be reduced using the formula:\n    // min(lengths)\
    \ - lengths[-1] = lengths[-1] - lengths[-2] + ...\n    // This formula will work\
    \ even if all the strings happen to be the same length.\n    $max = array_reduce($lengths,\
    \ function ($acc, $item) {\n        return $acc > $item ? $acc : $item;\n    },\
    \ 0);\n    foreach ($strings as $string) {\n        $length = mb_strlen($string);\n\
    \        if ($length > $max) {\n            $longest = $string;\n            $max\
    \ = $length;\n        }\n    }\n    return $longest ?: null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmps1sm0zx8.php:12\nStack trace:\n#0 [internal function]: {closure}('x')\n\
    #1 /tmp/tmps1sm0zx8.php(13): array_map(Object(Closure), Array)\n#2 /tmp/tmps1sm0zx8.php(31):\
    \ longest(Array)\n#3 /tmp/tmps1sm0zx8.php(36): candidate(Array)\n#4 /tmp/tmps1sm0zx8.php(40):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmps1sm0zx8.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    foreach ($strings as $string) {\n        $length = mb_strlen($string);\n\
    \        if (isset($lengths[$length])) {\n            $lengths[$length] = max($lengths[$length],\
    \ $length);\n        } else {\n            $lengths[$length] = $length;\n    \
    \    }\n    }\n\n    return isset($lengths[0]) ? $lengths[0] : null;\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmptrfnjp_p.php:11\nStack trace:\n#0 /tmp/tmptrfnjp_p.php(22): longest(Array)\n\
    #1 /tmp/tmptrfnjp_p.php(27): candidate(Array)\n#2 /tmp/tmptrfnjp_p.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmptrfnjp_p.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings || count($strings) < 2) return;\n  arsort($strings);\n  $max_length\
    \ = 0;\n  foreach ($strings as $s) {\n    $max_length = max($max_length, strlen($s));\n\
    \  }\n  return reset($strings);\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3\
    \ |>\nHere is an example with PHP 7.3.2 using the new Sort and Sort Keys array\
    \ sorting functions:\n<code>\n<?php\n$strings = ['a', 'bb', 'ccc', 'dddd', 'eeee'];\n\
    var_dump(longest($strings)); // string(3) \"ccc\"\n</code>\nAs this answer pointed\
    \ out a bug (unfortunately this bug was not reported before PHP 7.3.2), the solution\
    \ might not be applicable to all situations. Therefore, here is my contribution:\n\
    <code>\n<?php\n$strings = ['a', 'bb', 'ccc', 'dddd', 'eeee'];\nvar_dump(longest($strings,\
    \ true)); // string(4) \"dddd\"\nvar_dump(longest($strings, false)); // string(3)\
    \ \"ccc\"\n</code>\nAnd the function:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9_gkc3c2.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest_string = '';\n  $longest_string_length = 0;\n\n  foreach ($strings\
    \ as $string) {\n    $string_length = strlen($string);\n    if ($string_length\
    \ >= $longest_string_length) {\n      $longest_string = $string;\n      $longest_string_length\
    \ = $string_length;\n    }\n  }\n\n  return $longest_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthe6u9zu.php:29\n\
    Stack trace:\n#0 /tmp/tmpthe6u9zu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpthe6u9zu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  return max(array_map('strlen', $strings));\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmp0u9tbva4.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0u9tbva4.php:18\n\
    Stack trace:\n#0 /tmp/tmp0u9tbva4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp0u9tbva4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = end($strings);\n    foreach ($strings as $string) {\n    \
    \    if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33e8f9cr.php:24\n\
    Stack trace:\n#0 /tmp/tmp33e8f9cr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp33e8f9cr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return is_array($strings) ?\n      max(array_map('strlen', $strings),\
    \ null) :\n      max(array_map('strlen', (array)$strings), null);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThat's an interesting approach. However it also needs\
    \ a sorting step. I'd rather avoid sorting in case it already does it in some\
    \ hidden behind the scenes php function.\n<|/ c |>\n<| c |>\n: You can always\
    \ pass an array of strings to the `longest` function without sorting, it should\
    \ do that automatically. I've updated my answer.\n<|/ c |>\n<| c |>\nYes, I know.\
    \ I already have that functionality implemented and working well. I was just wondering\
    \ if there is a native php function or a function that already does that.\n<|/\
    \ c |>\n<| c |>\n: There is no such thing as an \"already existing function\"\
    \ in PHP. You'll have to write one. The `longest` function you've posted is pretty\
    \ good, it just needs to be rewritten to return the longest string in the array\
    \ instead of just the first one it encounters.\n<|/ c |>\n<| c |>\n: There is\
    \ a *native* function that does that. `max` does that.\n<|/ c |>\n<| a |>\nIf\
    \ you want the longest word you could use something like this:\n<code>\n$longestWord\
    \ = array();\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp97z9q9p6.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest ?:\
    \ $strings[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  foreach ($strings as $string) {\n    $length = strlen($string);\n    if\
    \ ($length > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n\n  if\
    \ (!$strings || count($strings) === 0) {\n    return null;\n  }\n\n  return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest_string = null;\n    $longest_string_length = 0;\n    foreach\
    \ ($strings as $string) {\n        $string_length = strlen($string);\n       \
    \ if ($longest_string === null || $longest_string_length < $string_length) {\n\
    \            $longest_string = $string;\n            $longest_string_length =\
    \ $string_length;\n        }\n    }\n    return $longest_string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return null;\n    }\n\n    $lengths = array_map(function($s)\
    \ { return mb_strlen($s); }, $strings);\n    sort($lengths);\n\n    return empty($lengths)\
    \ ? null : $lengths[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpn7t11xbc.php:14\nStack trace:\n#0 [internal function]: {closure}('x')\n\
    #1 /tmp/tmpn7t11xbc.php(14): array_map(Object(Closure), Array)\n#2 /tmp/tmpn7t11xbc.php(21):\
    \ longest(Array)\n#3 /tmp/tmpn7t11xbc.php(26): candidate(Array)\n#4 /tmp/tmpn7t11xbc.php(30):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmpn7t11xbc.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) return null;\n\n    $length = array_reduce($strings,\
    \ function ($carry, $string) { return max($carry, strlen($string)); });\n    return\
    \ $strings[array_search(max($length), $length)];\n}\n</code>\n<|/ a dscore=3 tags=php,multidimensional-array\
    \ |>\n<| c |>\n`array_reduce` requires PHP 5.5.\n<|/ c |>\n<| a tags=php,multidimensional-array\
    \ |>\nI realize this is an old question, but I found a way in 5.4 that doesn't\
    \ require foreach or array_reduce. I used array_reduce and array_column to create\
    \ a temporary array with keys from the original array and the values from each\
    \ original array item. \n<code>\n$array = array(\n    array('hello'),\n    array('world'),\n\
    \    array('how are you?'),\n    array('hello'),\n);\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqtnoq4h3.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!count($strings)) {\n    return NULL;\n  }\n  $max = null;\n  foreach\
    \ ($strings as $s) {\n    $length = strlen($s);\n    if ($max === NULL || $length\
    \ > $max) {\n      $max = $length;\n    }\n  }\n  return $max === NULL ? None\
    \ : $max;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqty7_7i.php:29\n\
    Stack trace:\n#0 /tmp/tmphqty7_7i.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphqty7_7i.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return null;\n    }\n\n    $length = count($strings);\n\
    \    $result = $strings[0];\n\n    for ($i = 1; $i < $length; $i++) {\n      \
    \  $current_length = strlen($strings[$i]);\n        if ($current_length > strlen($result))\
    \ {\n            $result = $strings[$i];\n        }\n    }\n\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI thought this was pretty clever, but since you\
    \ use it to solve the other problem, I tried to apply it to my problem and now\
    \ I'm stuck at this. Any suggestions?\n<|/ c |>\n<| c |>\nI have changed my code\
    \ - see above.\n<|/ c |>\n<| c |>\nThanks, this seems much more elegant than my\
    \ solution. I tried to implement it, but my code keeps running for over an hour.\
    \ I'll let you know how it goes later tonight. Thank you very much for taking\
    \ the time to post this! Much appreciated.\n<|/ c |>\n<| c |>\nOkay, so it took\
    \ me about an hour to implement this - thank you very much! It seems to have worked\
    \ perfectly. You're awesome and I really appreciate you taking the time to post\
    \ this.\n<|/ c |>\n<| a dscore=1 tags=php,arrays |>\nI have created this function\
    \ for finding the Longest word in Array and return the longest word and it's position\
    \ in Array. Just call this Function\n<code>\n$array = [\"word1\",\"word2\",\"\
    word3\",\"word4\"];\necho longestWord($array);\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph08de7ra.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return null;\n  }\n  $max_length = 0;\n  $max_length_first\
    \ = null;\n  foreach ($strings as $string) {\n    $length = strlen($string);\n\
    \    if ($length > $max_length) {\n      $max_length = $length;\n      $max_length_first\
    \ = $string;\n    }\n  }\n  return $max_length_first;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    $length = 0;\n    foreach ($strings as $s) {\n  \
    \      $length = strlen($s);\n        if (strlen($s) >= $length) {\n         \
    \   $longest = $s;\n        }\n    }\n    if ($length == 0) {\n        return\
    \ $longest;\n    }\n    $longestLength = strlen($longest);\n    $final = '';\n\
    \    $found = false;\n    foreach ($strings as $s) {\n        if (strlen($s) >\
    \ $length) {\n            $found = true;\n            $final = $s;\n        }\n\
    \        else {\n            if (strlen($s) == $length) {\n                $final\
    \ = $s;\n            }\n        }\n    }\n    if ($found == false) {\n       \
    \ if ($longestLength > $length) {\n            return $longest;\n        }\n \
    \       $final = $longest;\n    }\n    return $final;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_u60u9d.php:49\n\
    Stack trace:\n#0 /tmp/tmp2_u60u9d.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2_u60u9d.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return max($strings, function($string, $other) { return strlen($string)\
    \ < strlen($other) ?: strlen($other); });\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzbqd6i7.php:18\n\
    Stack trace:\n#0 /tmp/tmpkzbqd6i7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpkzbqd6i7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $maxLength = 0;\n    $firstElement = null;\n    foreach ($strings as\
    \ $string) {\n        $length = strlen($string);\n        if ($maxLength < $length)\
    \ {\n            $maxLength = $length;\n            $firstElement = $string;\n\
    \        }\n    }\n    if ($maxLength > 0) {\n        return $firstElement;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return None;\n    }\n    sort($strings);\n\
    \    $lengths = array_map(function($str) { return strlen($str); }, $strings);\n\
    \    return $lengths ? array_pop($lengths) : None;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp4q0w8n9e.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp4q0w8n9e.php:23\nStack\
    \ trace:\n#0 /tmp/tmp4q0w8n9e.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4q0w8n9e.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max = 0;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > $max) {\n            $max = strlen($string);\n        }\n    }\n\n    return\
    \ empty($strings) ? null : $strings[0];\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpquo7sq5g.php:27\n\
    Stack trace:\n#0 /tmp/tmpquo7sq5g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpquo7sq5g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $maxLength\
    \ = -1;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($maxLength < $length) {\n            $maxLength = $length;\n    \
    \    }\n    }\n\n    if ($maxLength > 0) {\n        return $strings[0];\n    }\n\
    \n    return null;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nJust\
    \ tested this and it appears to work! Although I wish it did it the way I wanted\
    \ it to. Thanks so much!\n<|/ c |>\n<| c |>\nThis is awesome, thank you. I've\
    \ been trying to get the longest substring in an array in PHP and this was the\
    \ only way I could get it to work.\n<|/ c |>\n<| c |>\nThis doesn't appear to\
    \ work when I have an array with a single string inside of it. It returns 'a'.\
    \ I can't seem to figure out what I need to change in the function to make it\
    \ work. I'm still very much a beginner at PHP, so please go easy on me. :)\n<|/\
    \ c |>\n<| a dscore=0 |>\nHere's my solution to this problem using recursion.\
    \ As you can see I first try to find the longest string in a list of strings and\
    \ then I try to find if the first string is equal to the longest string I found.\
    \ If so I return the first. If not, then I use the recursive method to find the\
    \ longest string in the remaining list. This way I find each possible combination\
    \ of longest string in the list.\n<code>\nfunction candidate(...$args) {\n   \
    \ return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_wmkiu_n.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (!$strings) {\n\t\treturn null;\n\t}\n\n\t$longest = $strings[0];\n\t\
    foreach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\
    \t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $string = current($strings);\n  if (!count($strings)) return $string;\n\
    \  $max = $string;\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($max)) $max = $string;\n  }\n  return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ufs9bpg.php:24\n\
    Stack trace:\n#0 /tmp/tmp_ufs9bpg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_ufs9bpg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings || !count($strings)) {\n    return None;\n  }\n  // Get a\
    \ list of all unique strings in the input list so we can check their lengths\n\
    \  $uniqueStrings = array_unique(array_map('strval', $strings));\n  // Sort them\
    \ to find the longest one\n  sort($uniqueStrings);\n  // If the list has only\
    \ 1 string, return it\n  return count($uniqueStrings) === 1 ? strval($uniqueStrings[0])\
    \ : $uniqueStrings[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpr17eay1m.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpr17eay1m.php:26\nStack\
    \ trace:\n#0 /tmp/tmpr17eay1m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpr17eay1m.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  return !$strings ? None :\n    count($strings) > 1 ?\n    max($strings,\
    \ function ($first, $second) {\n      return strlen($first) > strlen($second)\
    \ ? $first : $second;\n    }) :\n    $strings[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmptbmvm6wh.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptbmvm6wh.php:23\nStack\
    \ trace:\n#0 /tmp/tmptbmvm6wh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptbmvm6wh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return max($strings, function($s) {\n        return strlen($s);\n   \
    \ });\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuecrvp31.php:20\n\
    Stack trace:\n#0 /tmp/tmpuecrvp31.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpuecrvp31.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null) {\n            $longest = $string;\n        } elseif (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max = null;\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if ($max === null || $length < $max) {\n         \
    \   $max = $length;\n        }\n    }\n    return $max === null ? null : $strings[$max];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8vbikc7y.php:26\n\
    Stack trace:\n#0 /tmp/tmp8vbikc7y.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8vbikc7y.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $max = -PHP_INT_MAX;\n\
    \    $found = false;\n    foreach ($strings as $string) {\n        $stringLen\
    \ = strlen($string);\n        if ($stringLen > $max) {\n            $found = $stringLen;\n\
    \            $max = $stringLen;\n        } elseif ($stringLen === $max) {\n  \
    \          $found = $stringLen + 1;\n        }\n    }\n    return $found ? $strings[$found-1]\
    \ : null;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfmfmybg.php:32\n\
    Stack trace:\n#0 /tmp/tmplfmfmybg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplfmfmybg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return;\n    }\n    asort($strings);\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\nAnother\
    \ option can be using array_filter() and strlen() function.\n<code>\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmhxn5r6d.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max_length = -1;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $max_length) {\n            $max_length\
    \ = $length;\n        }\n    }\n    return $max_length > 0 ? $strings[0] : null;\n\
    }\n</code>\n<|/ a tags=longest-substring,php dscore=1 |>\n<| c |>\nI really like\
    \ this solution, it's elegant, and so obvious once you see it.\n<|/ c |>\n<| c\
    \ |>\nI agree with. The code has only two lines of code and the result is correct\
    \ even for input such as `['abc', 'abcd', 'abcde']`.\n<|/ c |>\n<| c |>\nThis\
    \ is a simple implementation of Longest common substring, not a Longest Increasing\
    \ Substring.\n<|/ c |>\n<| c |>\nThis algorithm is wrong when there is a substring\
    \ that is repeated more than once. For example, for the input `[\"ab\",\"bb\"\
    ,\"cc\",\"cb\"]`, the output should be `\"ab\"`, not `\"bb\"`.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nI like to use this kind of solution because it works for me and\
    \ is simple to understand.\nI take input as an array and loop through the input\
    \ string by character and count the occurrence of every character. \n<code>\n\
    $input = array('abbba');\n$counts = array_count_values(str_split($input));\n</code>\n\
    $counts will give output like this and you can easily count the occurrence of\
    \ any character by looping through the counts array and use strlen\n<code>\nArray\n\
    (\n    [a] => 1\n    [b] => 2\n    [b] => 1\n)\n</code>\nAfter this, use array_search\
    \ to find the key where the value equals the largest number\n<code>\n$charKey\
    \ = array_search(max($counts), $counts);\n</code>\nIn this case, since 'b' has\
    \ the highest count, we want the key to be 1 i.e. the character 'b'.\n<code>\n\
    echo $charKey;\n</code>\nYou can use this as a reference to achieve your desired\
    \ output.\n<|/ a tags=longest-substring,php |>\n<| a |>\nUsing array_count_values\
    \ and array_search to get the key with the longest value.\n<code>\n$input = 'abcdab';\n\
    \n$arrayCount = array_count_values(str_split($input));\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_yiqkg8c.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $len = array();\n    $idx = 0;\n    foreach ($strings\
    \ as $string) {\n        $len[$idx] = strlen($string);\n        $idx += 1;\n \
    \   }\n    $idx = 0;\n    while ($idx < count($len)) {\n        if ($len[$idx]\
    \ > $len[$longest ? $longest : 0]) {\n            $longest = $idx;\n        }\n\
    \        $idx += 1;\n    }\n    return empty($len) ? null : $strings[$longest];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaa758am8.php:33\n\
    Stack trace:\n#0 /tmp/tmpaa758am8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpaa758am8.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    foreach ($strings as $s) {\n        $length = strlen($s);\n        if\
    \ (isset($longest_str) && $length > $longest_str) {\n            return $longest_str;\n\
    \        } elseif ($length > 0) {\n            $longest_str = $s;\n        }\n\
    \    }\n\n    return $longest_str;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvfu_wo9.php:29\n\
    Stack trace:\n#0 /tmp/tmpgvfu_wo9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgvfu_wo9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    static $longest = null;\n    if ($longest !== null) {\n        foreach\
    \ ($strings as $s) {\n            if (strlen($s) > strlen($longest)) {\n     \
    \           $longest = $s;\n            }\n        }\n        return $longest;\n\
    \    }\n    if (count($strings) === 0) {\n        return null;\n    }\n    $lengths\
    \ = array_map('strlen', $strings);\n    $maxlen = max($lengths);\n    $longest\
    \ = array_intersect($lengths, array_fill(0, count($lengths), $maxlen));\n    if\
    \ ($longest === $lengths) {\n        return array_pop($strings);\n    }\n    return\
    \ null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpibk1d9nr.php:37\n\
    Stack trace:\n#0 /tmp/tmpibk1d9nr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpibk1d9nr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  foreach ($strings as $string) {\n    if (!is_string($string)) {\n     \
    \ return null;\n    }\n  }\n  $highestLength = 1;\n  $longestString = null;\n\
    \  foreach ($strings as $string) {\n    $length = strlen($string);\n    if ($length\
    \ > $highestLength) {\n      $highestLength = $length;\n      $longestString =\
    \ $string;\n    }\n  }\n  return $longestString;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxcq0po1q.php:33\n\
    Stack trace:\n#0 /tmp/tmpxcq0po1q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxcq0po1q.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null) {\n            $longest = $string;\n        } elseif (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return None;\n  }\n  $longest = '';\n  $lengths\
    \ = array_map(function ($str) {\n    return mb_strlen($str);\n  }, $strings);\n\
    \  usort($lengths, function ($a, $b) {\n    if ($a === $b) {\n      return 0;\n\
    \    }\n    return $a < $b ? -1 : 1;\n  });\n  $longest = $strings[array_search($lengths[0],\
    \ array_keys($lengths))];\n  if (count($lengths) === 1) {\n    return $longest;\n\
    \  }\n  if (count($lengths) === 2) {\n    return $longest . ' & ' . $strings[array_search($lengths[1],\
    \ array_keys($lengths))];\n  }\n  foreach ($lengths as $i => $length) {\n    if\
    \ ($i === 0) {\n      continue;\n    }\n    if ($length === $lengths[$i - 1])\
    \ {\n      $strings[$i] = substr($strings[$i], 0, -1);\n    } else {\n      $strings[$i]\
    \ = substr($strings[$i], 0, -1);\n      break;\n    }\n  }\n  return longest($strings);\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpyrcadecw.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpyrcadecw.php:48\nStack\
    \ trace:\n#0 /tmp/tmpyrcadecw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpyrcadecw.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n\n    foreach ($strings as $string) {\n        if (is_null($longest)\
    \ || mb_strlen($string) > mb_strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n\n    return $longest;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\nHere is a simple implementation that works only on PHP 7.1 and above:\n\
    <code>\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz0oflqo1.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $result = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($result === null || $length < $result) {\n \
    \           $result = $length;\n        }\n    }\n\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptkx9mggq.php:27\n\
    Stack trace:\n#0 /tmp/tmptkx9mggq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptkx9mggq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $maxLen = 0;\n  foreach ($strings as $str) {\n    $len = mb_strlen($str,\
    \ 'UTF-8');\n    if ($maxLen < $len) {\n      $maxLen = $len;\n    }\n  }\n  return\
    \ count($strings) > 0 ? $strings[0] : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpuc79pwed.php:12\nStack trace:\n#0 /tmp/tmpuc79pwed.php(21): longest(Array)\n\
    #1 /tmp/tmpuc79pwed.php(26): candidate(Array)\n#2 /tmp/tmpuc79pwed.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuc79pwed.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $lengths = [];\n  foreach ($strings as $string) {\n    $length = mb_strlen($string,\
    \ \"UTF-8\");\n    if (empty($lengths)) {\n      $lengths[] = $length;\n    }\
    \ else {\n      $lengths[] = $lengths[count($lengths) - 1];\n    }\n  }\n  return\
    \ max($lengths);\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmp8pxr6rxw.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pxr6rxw.php:27\n\
    Stack trace:\n#0 /tmp/tmp8pxr6rxw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8pxr6rxw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = count($strings[0]);\n\
    \    foreach ($strings as $string) {\n        $len = count($string);\n       \
    \ if ($len > $longest) {\n            $longest = $len;\n        }\n    }\n   \
    \ return $longest ? $strings[0][$longest] : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmph8qxfvco.php on line 13\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmph8qxfvco.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmph8qxfvco.php on line 15\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmph8qxfvco.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8qxfvco.php:29\n\
    Stack trace:\n#0 /tmp/tmph8qxfvco.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph8qxfvco.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return null;\n  }\n\n  $longest_string = $strings[0];\n\
    \  foreach ($strings as $string) {\n    $length = strlen($string);\n    if ($length\
    \ > strlen($longest_string)) {\n      $longest_string = $string;\n    }\n  }\n\
    \n  return $longest_string;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n$longest =\
    \ current(array_map(function($a) {\n    return strlen($a);\n}, $strings));\n</code>\n\
    <|/ a dscore=2 tags=php,longest-substring |>\n<| c |>\nI got that answer from\
    \ [this](http://stackoverflow.com/questions/1265282/how-do-i-find-the-longest-string-among-all-array-items)\
    \ question.\n<|/ c |>\n<| c |>\nThis answer is better if you need to get the longest\
    \ word and you don't have to use any loop.\n<|/ c |>\n<| a dscore=2 tags=php,longest-substring\
    \ |>\nIf you have an unsorted array and want to get the longest substring from\
    \ it you can use this:\n<code>\n$string = 'abcabcbb';\n$longestSubString = array_reduce(str_split($string),\
    \ function ($result, $char) {\n    return max($result, strlen($char));\n}, 0);\n\
    </code>\n<|/ a |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqgtyb21r.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = count($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    if ($longest !== null) {\n    \
    \    return $longest;\n    }\n    $strings[0] = '';\n    $length = count($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > $length) {\n\
    \            $length = strlen($string);\n        }\n    }\n    return $strings[0];\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z1w811p.php:34\n\
    Stack trace:\n#0 /tmp/tmp7z1w811p.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7z1w811p.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) return null;\n    $maxLength = 0;\n    foreach ($strings\
    \ as $s) {\n        if (strlen($s) > $maxLength) $maxLength = strlen($s);\n  \
    \  }\n    foreach ($strings as $s) {\n        if (strlen($s) < $maxLength) return\
    \ $s;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lzv0ao_.php:27\n\
    Stack trace:\n#0 /tmp/tmp9lzv0ao_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9lzv0ao_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings) return None;\n  $lengths = array_map('strlen', $strings);\n\
    \  return $lengths == array_max($lengths) ? $strings[array_search(max($lengths),\
    \ $lengths)] : None;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmppe5rv9m5.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmppe5rv9m5.php:20\nStack\
    \ trace:\n#0 /tmp/tmppe5rv9m5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppe5rv9m5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = strlen(max($strings,\
    \ null));\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length == $longest) {\n            return $string;\n        }\n\
    \        $longest = $length;\n    }\n    return None;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp8wac9ju5.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8wac9ju5.php:29\nStack\
    \ trace:\n#0 /tmp/tmp8wac9ju5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8wac9ju5.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) < 1) return null;\n    $max = null;\n    $maxLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($max === null || ($length > $maxLength && $length < $max)) {\n  \
    \          $maxLength = $length;\n            $max = $string;\n        }\n   \
    \ }\n    return $max;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2czdtzfe.php:29\n\
    Stack trace:\n#0 /tmp/tmp2czdtzfe.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2czdtzfe.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!count($strings)) return None;\n    $lengths = array_map(function($s)\
    \ { return strlen($s); }, $strings);\n    return array_reduce($lengths, function($max,\
    \ $len) { return max($max, $len); });\n}\n\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp4gf8xalv.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp4gf8xalv.php:20\nStack\
    \ trace:\n#0 /tmp/tmp4gf8xalv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4gf8xalv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n\n    $max = $strings[0];\n\
    \    foreach ($strings as $str) {\n        if (strlen($str) > strlen($max)) {\n\
    \            $max = $str;\n        }\n    }\n\n    return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n\n\
    \    return $longest ?: reset($strings);\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7c3k8mps.php:26\n\
    Stack trace:\n#0 /tmp/tmp7c3k8mps.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7c3k8mps.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return implode('', array_map(function ($x) {\n        return strlen($x)\
    \ > strlen($x[0]) ? $x : null;\n    }, array_filter($strings)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprb3qunbs.php:20\n\
    Stack trace:\n#0 /tmp/tmprb3qunbs.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprb3qunbs.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return None;\n    }\n\n    $longestLength =\
    \ 0;\n    $longestStr    = '';\n    foreach ($strings as $string) {\n        $stringLength\
    \ = strlen($string);\n        if ($stringLength > $longestLength) {\n        \
    \    $longestLength = $stringLength;\n            $longestStr    = $string;\n\
    \        }\n    }\n\n    return $longestStr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpcjkk_knz.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpcjkk_knz.php:32\nStack\
    \ trace:\n#0 /tmp/tmpcjkk_knz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcjkk_knz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  // Iterate over the input strings to find out the longest one.\n  $longest\
    \ = \"\";\n  foreach ($strings as $string) {\n    $length = mb_strlen($string,\
    \ \"UTF-8\");\n    if ($length > strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n\n  // Return the first string if there are multiples of the same\
    \ length. Return\n  // None otherwise.\n  return count($strings) > 1 ? $longest\
    \ : NULL;\n}\n</code>\nThe same algorithm for string concatenation can be used.\n\
    <|/ a tags=php,regex |>\n<| c |>\nWhy do you think this code is less efficient?\
    \ It is actually much more efficient than other answers.\n<|/ c |>\n<| c |>\n\
    Yes, it is better, since it doesn't use a regular expression which can easily\
    \ be slower.\n<|/ c |>\n<| a dscore=2 |>\nThis is a solution with one preg_match_all\n\
    <code>\n<?php\n$string = 'aaa\nbbb\nccc';\n$string = 'aaa\nbbb\nccc';\n$string\
    \ = 'aaa\nbbb\nccc';\n$string = 'aaa\nbbb\nccc';\n$string = 'aaa\nbbb\nccc';\n\
    \necho preg_match_all('/([a-z]{3})\\n([a-z]{3})\\n([a-z]{3})/', $string, $m);\n\
    \nprint_r($m);\n\necho '<pre>';\nvar_dump($m);\necho '</pre>';\n\necho '<pre>';\n\
    var_dump($m[0]);\necho '</pre>';\n\necho '<pre>';\nvar_dump($m[1]);\necho '</pre>';\n\
    \necho '<pre>';\nvar_dump($m[2]);\necho '</pre>';\n\necho '<pre>';\nvar_dump($m[3]);\n\
    echo '</pre>';\n\necho '<pre>';\nvar_dump($m[4]);\necho '</pre>';\n\necho '<pre>';\n\
    var_dump($m[5]);\necho '</pre>';\n\necho '<pre>';\nvar_dump($m[6]);\necho '</pre>';\n\
    \necho '<pre>';\nvar_dump($m[7]);\necho '</pre>';\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a dscore=2 tags=php,regex |>\n<code>\n$string = 'aaa\nbbb\nccc';\n$arr\
    \ = explode(\"\\n\",$string);\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpek1julfm.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $max_length\
    \ = 0;\n    $max_length_index = 0;\n    $current_string = '';\n    for ($i = 0;\
    \ $i < count($strings); $i++) {\n        $current_string .= $strings[$i];\n  \
    \      $length = strlen($current_string);\n        if ($length > $max_length)\
    \ {\n            $max_length = $length;\n            $max_length_index = $i;\n\
    \        }\n    }\n    return $strings[$max_length_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpw43ndqn6.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpw43ndqn6.php:32\nStack\
    \ trace:\n#0 /tmp/tmpw43ndqn6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw43ndqn6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n\n    asort($strings);\n\
    \    $longest = '';\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi37bqle_.php:31\n\
    Stack trace:\n#0 /tmp/tmpi37bqle_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpi37bqle_.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  foreach ($strings as $key => $string) {\n    // For each string, get the\
    \ longest one (first one)\n    $max = strlen($string);\n    foreach ($strings\
    \ as $key2 => $string2) {\n      // If string 2 is bigger, break the loop and\
    \ return it\n      if (strlen($string2) < $max) {\n        break;\n      }\n \
    \     // If string 2 is the same length, compare it and break the loop if they\
    \ are different\n      else if (strlen($string2) === $max) {\n        if ($string\
    \ != $string2) {\n          break;\n        }\n      }\n      // If string 2 is\
    \ bigger, set max to string 2 and continue the loop\n      else {\n        $max\
    \ = $string2;\n      }\n    }\n    if ($strings[$key] != $max) {\n      return\
    \ $max;\n    }\n  }\n}\n</code>\n<|/ a |>\n<| c |>\nThis seems overly complex...\
    \ I wonder if there's a simpler approach? I'm looking for something that works\
    \ with an arbitrary list of strings.\n<|/ c |>\n<| c |>\nThe complexity of the\
    \ above algorithm is `O(n^2)`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvr6ak95_.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // Sort strings by the length of the string so we can find longest string\
    \ in the list\n    // and also return the first one if we have multiple strings\
    \ of the same length.\n    $sortedStrings = array_map('strlen', $strings);\n \
    \   array_multisort($sortedStrings, $strings);\n\n    // If we have only one string\
    \ in the list then return it.\n    if (count($strings) <= 1) {\n        return\
    \ $strings[0];\n    }\n\n    // Loop through all the strings to find the longest\
    \ one.\n    $longestString = null;\n    $longestStringLength = 0;\n    for ($i\
    \ = 0; $i < count($strings); $i++) {\n        $currentStringLength = $strings[$i];\n\
    \        if ($currentStringLength > $longestStringLength) {\n            $longestString\
    \ = $strings[$i];\n            $longestStringLength = $currentStringLength;\n\
    \        }\n    }\n    return $longestString;\n}\n\n/**\n * Returns a random value\
    \ from the array.\n *\n * @param array $array\n *\n * @return mixed random value\
    \ or None if $array is empty.\n */\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8_e0mox.php:46\n\
    Stack trace:\n#0 /tmp/tmpl8_e0mox.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpl8_e0mox.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // Return None in case of empty list\n    if (count($strings) === 0)\
    \ {\n        return None;\n    }\n\n    // Return longest string if multiple are\
    \ equal length\n    foreach ($strings as $s) {\n        // If length is greater\
    \ than 1, return it\n        if (strlen($s) > 1) {\n            return $s;\n \
    \       }\n    }\n\n    // Return first string in case of multiple strings of\
    \ equal length\n    return $strings[0];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ tags=php,python,algorithm |>\nHere's an example in PHP:\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg4ic1xnd.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // If there are zero strings, return None\n    if (count($strings) ===\
    \ 0) {\n        return None;\n    }\n    // If the string is empty, return None\n\
    \    if (count($strings) === 1 && $strings[0] === '') {\n        return None;\n\
    \    }\n    // If all the strings are the same length, return the first one\n\
    \    if (count($strings) === 1 && strlen($strings[0]) === 1) {\n        return\
    \ $strings[0];\n    }\n    // If the first one isn't the same length as the others,\
    \ return the first\n    if (strlen($strings[0]) !== count($strings)) {\n     \
    \   return $strings[0];\n    }\n    // Otherwise, recurse through the list and\
    \ keep track of the length of each one\n    $longestLength = 0;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > $longestLength) {\n           \
    \ $longestLength = strlen($string);\n        }\n    }\n    // Return the longest\
    \ one\n    return $strings[$longestLength];\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ Mike - that solved my problem.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $str1 = 'hello, world';\n$str2 = 'hello';\n\n$arr1 = explode(', ', $str1);\n$arr2\
    \ = explode(', ', $str2);\n\n$maxLength = max(count($arr1), count($arr2));\n$longestString\
    \ = '';\nif ($maxLength > 1) {\n    foreach ($arr1 as $item) {\n        $longestString\
    \ .= $item . ', ';\n    }\n    foreach ($arr2 as $item) {\n        $longestString\
    \ .= $item . ', ';\n    }\n}\nif ($maxLength == 1) {\n    $longestString = $arr1[0];\n\
    }\necho $longestString;\n</code>\nThis should output \"hello\"\n<|/ a tags=string,arrays,compare,php\
    \ |>\n<| a |>\nI solved the problem using explode and array_map functions:\n<code>\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq9t_j1sc.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings || !count($strings)) {\n        return None;\n    }\n\n\
    \    $longest = '';\n    $max_length = count($strings);\n    foreach ($strings\
    \ as $s) {\n        $len = (strlen($s) > $max_length) ? strlen($s) : $max_length;\n\
    \        if (strlen($s) > $longest) {\n            $longest = $s;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp0c6f_4z1.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0c6f_4z1.php:30\nStack\
    \ trace:\n#0 /tmp/tmp0c6f_4z1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0c6f_4z1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    if (count($strings)\
    \ === 1) {\n        return $strings[0];\n    }\n    $maxLength = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > $maxLength) {\n            $maxLength = $length;\n        }\n    }\n    return\
    \ $strings[$maxLength];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpd0ma2wmw.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpd0ma2wmw.php:31\nStack\
    \ trace:\n#0 /tmp/tmpd0ma2wmw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpd0ma2wmw.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    sort($strings);\n\
    \    $longest_length = count($strings);\n    for ($i = 1; $i < count($strings);\
    \ $i++) {\n        $current_length = $strings[$i];\n        if ($current_length\
    \ > $longest_length) {\n            $longest_length = $current_length;\n     \
    \   }\n    }\n\n    return $longest_length ? $strings[$i] : None;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmphug1zzi1.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphug1zzi1.php:31\nStack\
    \ trace:\n#0 /tmp/tmphug1zzi1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphug1zzi1.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) return null;\n    $longest = array();\n    $length\
    \ = 0;\n    foreach ($strings as $s) {\n        $len = strlen($s);\n        if\
    \ ($len > $length) {\n            $longest = $s;\n            $length = $len;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  foreach ($strings as $string) {\n    $len = strlen($string);\n    if ($len\
    \ > 0) {\n      return $string;\n    }\n  }\n  return null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmped64rbxt.php:26\n\
    Stack trace:\n#0 /tmp/tmped64rbxt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmped64rbxt.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!is_array($strings))\n    throw new \\InvalidArgumentException('First\
    \ argument is not an array.');\n\n  $longest = '';\n  $max_len = -1;\n  foreach\
    \ ($strings as $string) {\n    $len = strlen($string);\n    if ($len > $max_len)\
    \ {\n      $max_len = $len;\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yl8bh14.php:31\n\
    Stack trace:\n#0 /tmp/tmp_yl8bh14.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yl8bh14.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $length = -1;\n    foreach ($strings as $string) {\n        $length =\
    \ max($length, mb_strlen($string));\n    }\n\n    return $strings[count($strings)\
    \ === $length ? 0 : $length - 1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmp9x9uddpd.php:12\nStack trace:\n#0 /tmp/tmp9x9uddpd.php(19): longest(Array)\n\
    #1 /tmp/tmp9x9uddpd.php(24): candidate(Array)\n#2 /tmp/tmp9x9uddpd.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9x9uddpd.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > $longest) {\n\
    \            $longest = $length;\n        }\n    }\n    return $longest === null\
    \ ? 'None' : $strings[array_search($longest, $strings)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcovgp40_.php:25\n\
    Stack trace:\n#0 /tmp/tmpcovgp40_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcovgp40_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (!empty($strings)) {\n\t\t$longest = array_reduce($strings, function\
    \ ($previous, $string) {\n\t\t\treturn strlen($previous) >= strlen($string) ?\
    \ $previous : $string;\n\t\t}, '');\n\t\treturn $longest ? $longest : null;\n\t\
    }\n\treturn null;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings))\n        return None;\n    $max = $lengths = array_map('strlen',\
    \ $strings);\n    sort($lengths);\n    $lengths = array_unique($lengths);\n  \
    \  if (!empty($lengths)) {\n        if (count($lengths) == 1)\n            return\
    \ reset($lengths);\n        $max = reset($lengths);\n        foreach ($lengths\
    \ as $len => $newlen) {\n            if ($newlen > $max)\n                $max\
    \ = $newlen;\n        }\n    }\n    return None;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpviahryu2.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpviahryu2.php:32\nStack\
    \ trace:\n#0 /tmp/tmpviahryu2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpviahryu2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $first_longest = null;\n    $i = 0;\n\n    foreach\
    \ ($strings as $string) {\n        if ($longest == null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n            $first_longest = $i;\n     \
    \   }\n    }\n\n    if ($longest == null) {\n        // Empty list\n        return\
    \ null;\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n\n    if ($strings) {\n        $lengths\
    \ = [];\n        foreach ($strings as $string) {\n            $lengths[] = strlen($string);\n\
    \        }\n        $sorted = array_keys($lengths);\n        $longest = $sorted[0]\
    \ ?? null;\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsx2cwg0a.php:30\n\
    Stack trace:\n#0 /tmp/tmpsx2cwg0a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsx2cwg0a.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n\n    foreach ($strings as $s) {\n        if ($longest\
    \ === null || strlen($s) > strlen($longest)) {\n            $longest = $s;\n \
    \       }\n    }\n\n    return $longest;\n}\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a dscore=4 |>\nTo do this, you must first order the array by ascending order\
    \ of a given column and then by the length of the string. You can do that with\
    \ the usort function.\n<code>\nusort($data, \"sortByLengthAscending\");\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph3n1gy10.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) return null;\n    $strings = array_unique($strings);\n\
    \    $length = count($strings);\n    if (!$length) return null;\n    $max_length\
    \ = $length - 1;\n    $max_string = $strings[$max_length];\n    for ($i = 1; $i\
    \ <= $length; $i++) {\n        if ($strings[$i] != $max_string) {\n          \
    \  $max_length = $i;\n            $max_string = $strings[$max_length];\n     \
    \   }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcigmdna.php:31\n\
    Stack trace:\n#0 /tmp/tmprcigmdna.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprcigmdna.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $results =\
    \ [];\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > 0) {\n            $results[$length] = $string;\n      \
    \  }\n    }\n\n    if (empty($results)) {\n        return null;\n    }\n\n   \
    \ // Sort keys and return the first one. This allows us to return the longest\
    \ one if there are multiple\n    // strings of the same length.\n    ksort($results);\n\
    \    $result = key($results);\n\n    if (count($results) === 1) {\n        return\
    \ $result;\n    }\n\n    return null;\n}\n\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp82mb85i.php:44\n\
    Stack trace:\n#0 /tmp/tmpp82mb85i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp82mb85i.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings) return None;\n  $maxLength = -1;\n  $maxString = -1;\n \
    \ foreach ($strings as $string) {\n    $length = strlen($string);\n    if ($length\
    \ > $maxLength) {\n      $maxLength = $length;\n      $maxString = $string;\n\
    \    }\n  }\n  return $maxString;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp2rd4wss3.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2rd4wss3.php:28\nStack\
    \ trace:\n#0 /tmp/tmp2rd4wss3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2rd4wss3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // Handle empty input list\n    if (count($strings) === 0) {\n      \
    \  return null;\n    }\n    // Find the shortest string and store it in a variable\n\
    \    $shortestString = $strings[0];\n    // Find the longest string\n    foreach\
    \ ($strings as $s) {\n        if (strlen($s) > strlen($shortestString)) {\n  \
    \          $shortestString = $s;\n        }\n    }\n    // Return longest\n  \
    \  return $shortestString;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $strings = array_filter($strings);\n  if (empty($strings)) {\n    return\
    \ None;\n  }\n  $min_length = -1;\n  $max_length = 0;\n  $result = null;\n  foreach\
    \ ($strings as $string) {\n    $length = strlen($string);\n    if ($length >=\
    \ $min_length) {\n      $max_length = $length;\n      $result = $string;\n   \
    \ } elseif ($min_length == -1 || $length < $min_length) {\n      $min_length =\
    \ $length;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThis code assumes ASCII encoding. There are other encodings (like UTF-16)\
    \ that don't use the same set of characters. To handle these encodings, you would\
    \ have to implement a Unicode string length function, which is a large topic.\n\
    <|/ c |>\n<| a tags=php,string |>\nThis is what i use...\n<code>\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9p9wcpe8.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    // Get the\
    \ longest string in the list\n    $longest = array_reduce($strings, function($a,\
    \ $b) {\n        return mb_strlen($a) > mb_strlen($b) ? $a : $b;\n    });\n\n\
    \    // If we have multiple strings of the same length, return the first one.\n\
    \    // Otherwise return the longest string.\n    return count($strings) > 1 ?\
    \ $strings[0] : $longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate\
    \ the answer. I'm really new to PHP so I didn't know how to use this function,\
    \ but now I know how and I'll use it. Thank you!\n<|/ c |>\n<| a tags=string,arrays,preg-match,php\
    \ dscore=0 |>\nTry this one :\n<code>\npreg_match_all('/([a-z]+)$/i', $string,\
    \ $array);\n$biggest = $array[0][0]; //store first value in a variable\n</code>\n\
    <|/ a |>\n<| c |>\nThis seems to work, but I get a warning: preg_match_all() expects\
    \ at least 3 parameters, 2 given on line 5 of my php code. I looked it up, and\
    \ I should add an \"i\" at the end of the regex, so it'll be preg_match_all('/([a-z]+)$/i',\
    \ $string, $array);, but it doesn't seem to work. Any ideas?\n<|/ c |>\n<| a |>\n\
    try something like this:\n<code>\n<?php\n$string = 'abracadabra';\n$array = explode(\"\
    \ \", $string);\necho max($array);\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdbm9qpr2.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings) {\n    return null;\n  }\n  $lengths = array_map(function($x)\
    \ {\n    return strlen($x);\n  }, $strings);\n  return max($lengths);\n}\n</code>\n\
    And then:\n<code>\n$strings = array(\n  'The quick brown fox jumps over the lazy\
    \ dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The quick brown\
    \ fox jumps over the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n\
    \  'The quick brown fox jumps over the lazy dog',\n  'The quick brown fox jumps\
    \ over the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The\
    \ quick brown fox jumps over the lazy dog',\n  'The quick brown fox jumps over\
    \ the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The quick\
    \ brown fox jumps over the lazy dog',\n  'The quick brown fox jumps over the lazy\
    \ dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The quick brown\
    \ fox jumps over the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n\
    \  'The quick brown fox jumps over the lazy dog',\n  'The quick brown fox jumps\
    \ over the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The\
    \ quick brown fox jumps over the lazy dog',\n  'The quick brown fox jumps over\
    \ the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The quick\
    \ brown fox jumps over the lazy dog',\n  'The quick brown fox jumps over the lazy\
    \ dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The quick brown\
    \ fox jumps over the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n\
    \  'The quick brown fox jumps over the lazy dog',\n  'The quick brown fox jumps\
    \ over the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The\
    \ quick brown fox jumps over the lazy dog',\n  'The quick brown fox jumps over\
    \ the lazy dog',\n  'The quick brown fox jumps over the lazy dog',\n  'The quick\
    \ brown fox jumps over the lazy dog',\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplzvx9pf8.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        if (isset($lengths[strlen($string)])) {\n            $lengths[strlen($string)]\
    \ += 1;\n        } else {\n            $lengths[strlen($string)] = 1;\n      \
    \  }\n        if ($longest === null || $lengths[strlen($string)] > $lengths[strlen($longest)])\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n</code>\n<|/ a dscore=0 tags=php,sorting,arrays |>\n<| a dscore=0 |>\nI came\
    \ up with this solution, it is also possible to sort descending, as long as you\
    \ sort from larger to smaller alphabet (ZA to AZ), so if your string starts with\
    \ a number it will still work.\n<code>\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp91xzloo.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $shortest = $longest = count($strings) ? array_pop($strings) : null;\n\
    \    foreach ($strings as $s) {\n        $len = strlen($s);\n        if ($len\
    \ > $longest || $len < $shortest) {\n            $longest = $shortest;\n     \
    \       $shortest = $len;\n        }\n    }\n    return $longest ? $strings[$longest-1]\
    \ : null;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpikhdoh_s.php:27\n\
    Stack trace:\n#0 /tmp/tmpikhdoh_s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpikhdoh_s.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $length) {\n            $longest = $string;\n\
    \            $length = strlen($string);\n        } elseif (strlen($string) ==\
    \ $length) {\n            // Handle the case where we have multiple strings of\
    \ the same length\n            if ($longest == null) {\n                $longest\
    \ = $string;\n            }\n        }\n    }\n\n    return $longest;\n}\n</code>\n\
    In practice:\n<code>\n<?php\n$strings = array(\n    \"string1\",\n    \"string2\"\
    ,\n    \"string3\",\n    \"string4\",\n    \"string5\",\n    \"string6\",\n  \
    \  \"string7\",\n    \"string8\",\n    \"string9\",\n    \"string10\",\n    \"\
    string11\",\n    \"string12\",\n    \"string13\",\n    \"string14\",\n    \"string15\"\
    ,\n    \"string16\",\n    \"string17\",\n    \"string18\",\n    \"string19\",\n\
    \    \"string20\",\n    \"string21\",\n    \"string22\",\n    \"string23\",\n\
    \    \"string24\",\n    \"string25\",\n    \"string26\",\n    \"string27\",\n\
    \    \"string28\",\n    \"string29\",\n    \"string30\",\n    \"string31\"\n);\n\
    \nforeach ($strings as $string) {\n    echo $string . \" => \" . longest($string)\
    \ . \"\\n\";\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk1xlx35y.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest_string = NULL;\n\n    foreach ($strings as $string) {\n    \
    \    $str_length = strlen($string);\n\n        if ($longest_string === NULL ||\
    \ $str_length < strlen($longest_string)) {\n            $longest_string = $string;\n\
    \        }\n    }\n\n    return $longest_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9o_nnh_1.php:30\n\
    Stack trace:\n#0 /tmp/tmp9o_nnh_1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9o_nnh_1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $strings = array_map(\"strlen\", $strings);\n    $maxLength = 0;\n  \
    \  foreach ($strings as $length) {\n        if ($length > $maxLength) {\n    \
    \        $maxLength = $length;\n        }\n    }\n    return $maxLength ? array_shift($strings)\
    \ : null;\n}\n</code>\nThe function longest() returns the longest string in its\
    \ input list and the longest string is not necessarily the first one. In case\
    \ of multiple strings, the first string in the list is returned instead of the\
    \ longest one. You could also specify a threshold value in case the longest string\
    \ has multiple lengths.\nDemo here - https://3v4l.org/DjfF7\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpksl2yr7n.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if ($strings === []) {\n        return None;\n    }\n\n    $longest_length\
    \ = 0;\n    $longest_value   = null;\n\n    foreach ($strings as $string) {\n\
    \        $string_length = strlen($string);\n        if ($string_length >= $longest_length)\
    \ {\n            $longest_length = $string_length;\n            $longest_value\
    \ = $string;\n        }\n    }\n\n    return $longest_value;\n}\n</code>\n<|/\
    \ a tags=string,php,algorithm |>\n<| c |>\nI thought about this, but it's kind\
    \ of ugly and not O(n). A better solution would be to use `array_filter` and apply\
    \ a callback which returns a boolean saying whether to remove an element from\
    \ the array.\n<|/ c |>\n<| c |>\n: I agree. I was just trying to write the most\
    \ \"concise\" code I could find. I also thought about writing my own variant of\
    \ array_filter which would take a callback and return a new array, but I didn't\
    \ want to reinvent the wheel and since I didn't know about the array_filter function\
    \ I thought I should stick to my original answer.\n<|/ c |>\n<| a tags=string,php,algorithm\
    \ |>\nYou can use a regex to find the longest string in the array.\n<code>\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbrsmm5zi.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n\n    foreach ($strings as $string) {\n        $length\
    \ = mb_strlen($string);\n\n        if ($length > mb_strlen($longest)) {\n    \
    \        $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\n\
    $string = 'Ivan Korotkov Ivan Ivanov';\necho longest($string) . \"\\n\";\n</code>\n\
    <|/ a tags=php,longest-substring dscore=0 |>\n<| a dscore=0 tags=php,longest-substring\
    \ |>\nA simple way is to iterate through all characters. If the current character\
    \ is the same as the previous character, keep counting, otherwise, set the count\
    \ to the previous count, and add the current character to the output. \n<code>\n\
    $string = 'Ivan Korotkov Ivan Ivanov';\n\n$output = \"\";\n$count = 0;\n\nfor\
    \ ($i = 0; $i < strlen($string); $i++) {\n    if ($i == 0) {\n        $output\
    \ .= $string[$i];\n        $count = 1;\n    } else {\n        if ($string[$i]\
    \ == $string[$i-1]) {\n            $count++;\n        } else {\n            $output\
    \ = $count . $string[$i];\n            $count = 1;\n        }\n    }\n}\n\nvar_dump($output);\n\
    </code>\n<|/ a |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5dwyyuyf.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = $first_longest = '';\n    $string_lengths = array_map(function\
    \ ($s) use (&$longest, &$first_longest) {\n        return mb_strlen($s);\n   \
    \ }, array_values($strings));\n    $count = count($strings);\n    $current_length\
    \ = -1;\n    $current_index = 0;\n    foreach ($string_lengths as $index => $length)\
    \ {\n        if ($current_length != -1) {\n            if ($length > ($current_length\
    \ + $longest[$current_index])) {\n                $longest[$current_index] = $length;\n\
    \            }\n        }\n        $current_length = $length;\n        $current_index\
    \ = $index;\n    }\n    return $first_longest ?: null;\n}\n</code>\nDemo: https://3v4l.org/9n9Ws\n\
    <|/ a tags=php,sorting,multidimensional-array |>\n<| c |>\nthis returns only 1\
    \ value not all of them\n<|/ c |>\n<| c |>\n: yeah, I forgot that requirement.\
    \ Fixed now.\n<|/ c |>\n<| c |>\nThank you very much for your effort\n<|/ c |>\n\
    <| a dscore=1 tags=php,sorting,multidimensional-array |>\nHere is a function that\
    \ will sort your array by column length:\n<code>\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppb4liv_5.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) return None;\n    $longest = array_reduce($strings,\
    \ function($acc, $item) use ($strings) {\n        return strlen($item) > strlen($acc)\
    \ ? $item : $acc;\n    });\n    $longest = ($longest === '') ? '' : $longest;\n\
    \    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpxzfm7xo3.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxzfm7xo3.php:23\nStack\
    \ trace:\n#0 /tmp/tmpxzfm7xo3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxzfm7xo3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ null;\n    $longestLength = -1;\n\n    foreach ($strings as $string) {\n   \
    \     $length = strlen($string);\n        if ($length >= $longestLength) {\n \
    \           $longest = $string;\n            $longestLength = $length;\n     \
    \   }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0k944rxa.php:34\n\
    Stack trace:\n#0 /tmp/tmp0k944rxa.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0k944rxa.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max = null;\n    foreach ($strings as $string) {\n        if ($max ===\
    \ null || mb_strlen($string) > mb_strlen($max)) {\n            $max = $string;\n\
    \        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php,sorting |>\n<|\
    \ c |>\nIt doesn't work for all cases. Try this one: `echo longest([\n    'aaaaaaa',\n\
    \    'aaaaaa',\n    'aaaaaaa',\n    'aaaaaa',\n    'aaaaa',\n    'aaaaaa',\n \
    \   'aaaaaa',\n    'aaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n\
    \    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n\
    \    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n\
    \    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n\
    \    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n\
    \    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n\
    \    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n\
    \    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n\
    \    'aaaaaaaa',\n    'aaaaaaaaa'\n]);`\n<|/ c |>\n<| a tags=php,sorting |>\n\
    Here is another solution that doesn't rely on PHP 5.3.  It uses the PHP sort function\
    \ and implements different sorting algorithms:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbeut4c7z.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings))\n        return;\n\n    $maxLen = 0;\n    $firstChar\
    \ = false;\n    foreach ($strings as $string) {\n        if ($firstChar) {\n \
    \           $maxLen = strlen($string);\n            $firstChar = false;\n    \
    \    } elseif ($maxLen < strlen($string)) {\n            $maxLen = strlen($string);\n\
    \        }\n    }\n\n    return $maxLen ? substr($strings[0], 0, $maxLen) : null;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadxxmno1.php:33\n\
    Stack trace:\n#0 /tmp/tmpadxxmno1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpadxxmno1.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    $longestLen = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $longestLen) {\n            $longest = $string;\n\
    \            $longestLen = strlen($string);\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8eylzi8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp8eylzi8p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8eylzi8p.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = null;\n  $lengths = [];\n\n  foreach ($strings as $string) {\n\
    \    $length = strlen($string);\n    if ($length > 0 && isset($lengths[$length]))\
    \ {\n      if ($lengths[$length] > $length) {\n        $lengths[$length] = $string;\n\
    \      }\n    } else {\n      $lengths[$length] = $string;\n    }\n  }\n\n  foreach\
    \ ($lengths as $length) {\n    if ($longest === null || strlen($longest) < strlen($length))\
    \ {\n      $longest = $length;\n    }\n  }\n\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function($carry, $item) {\n       \
    \ return isset($carry[0]) ? max($carry[0], strlen($item)) : strlen($item);\n \
    \   });\n    return count($strings) > 0 ? $strings[array_search(max($longest),\
    \ $strings)] : null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp24apylxm.php on line 13\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmp24apylxm.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp24apylxm.php:23\nStack trace:\n\
    #0 /tmp/tmp24apylxm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp24apylxm.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $max_length\
    \ = 0;\n    $max_length_element = null;\n    foreach ($strings as $string) {\n\
    \        $length = (string) strlen($string);\n        if ($length > $max_length)\
    \ {\n            $max_length = $length;\n            $max_length_element = $string;\n\
    \        }\n    }\n    return $max_length_element;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        } elseif (strlen($string) == strlen($longest))\
    \ {\n            $longest = $strings[0];\n        }\n    }\n\n    return $longest\
    \ ?: null;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzey4ryq_.php:27\n\
    Stack trace:\n#0 /tmp/tmpzey4ryq_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzey4ryq_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest_string = array_reduce($strings, function ($a, $b) { return strlen($a)\
    \ > strlen($b) ? $a : $b; });\n    return $longest_string ? $longest_string :\
    \ array_shift($strings);\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq8skxtt.php:20\n\
    Stack trace:\n#0 /tmp/tmplq8skxtt.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplq8skxtt.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    if (empty($strings))\
    \ {\n        return $longest;\n    }\n\n    foreach ($strings as $string) {\n\
    \        $length = strlen($string);\n        if ($length > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return;\n    }\n\n    $longest\
    \ = count($strings) > 0 ? $strings[0] : null;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!empty($strings)) {\n        $max_length = 0;\n        $max_value\
    \ = null;\n        foreach ($strings as $string) {\n            $value_length\
    \ = strlen($string);\n            if ($max_length < $value_length) {\n       \
    \         $max_length = $value_length;\n                $max_value = $string;\n\
    \            }\n        }\n        if ($max_length > 0) {\n            return\
    \ $max_value;\n        }\n    }\n    return null;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max = null;\n\n    foreach ($strings as $string) {\n        if ($string\
    \ != '' && strlen($string) > $max) {\n            $max = strlen($string);\n  \
    \      }\n    }\n\n    return $max == 0 ? null : $strings[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02dxza47.php:28\n\
    Stack trace:\n#0 /tmp/tmp02dxza47.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp02dxza47.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        throw new \\InvalidArgumentException('Input\
    \ list is empty.');\n    }\n\n    $longest = null;\n    $length = count($strings);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $len = strlen($strings[$i]);\n\
    \        if ($longest === null || $len > $longest) {\n            $longest = $len;\n\
    \        }\n    }\n\n    return $longest !== null ? $strings[$longest] : null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: Input list is empty.\
    \ in /tmp/tmp2lyvks8p.php:11\nStack trace:\n#0 /tmp/tmp2lyvks8p.php(27): longest(Array)\n\
    #1 /tmp/tmp2lyvks8p.php(31): candidate(Array)\n#2 /tmp/tmp2lyvks8p.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2lyvks8p.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return None;\n    }\n\n    // Sort the string\
    \ and return the longest one.\n    return max($strings, function ($value) {\n\
    \        return strlen($value);\n    });\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpaepuel5n.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpaepuel5n.php:25\nStack\
    \ trace:\n#0 /tmp/tmpaepuel5n.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpaepuel5n.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return empty($strings) ? None : $strings[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp65olz4qp.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp65olz4qp.php:18\nStack\
    \ trace:\n#0 /tmp/tmp65olz4qp.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp65olz4qp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = null;\n  $length = null;\n  foreach ($strings as $str) {\n \
    \   if (is_null($length)) {\n      $length = strlen($str);\n    } else if (strlen($str)\
    \ > $length) {\n      $length = strlen($str);\n    }\n    if (is_null($longest)\
    \ || strlen($str) > strlen($longest)) {\n      $longest = $str;\n    }\n  }\n\
    \  return $longest ?: null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $max_length = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $max_length) {\n            $max_length = $length;\n     \
    \   }\n    }\n    return $strings[$max_length];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmh972su.php:29\n\
    Stack trace:\n#0 /tmp/tmpwmh972su.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwmh972su.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) { return null; }\n\n    // This code makes it easier\
    \ to work with arrays of different sizes.\n    // It makes the assumption that\
    \ each array only has one type of value, and\n    // that each value could be\
    \ cast to that type.\n    foreach ($strings as $str) {\n        $num = count($strings);\n\
    \        for ($i = 0; $i < $num; $i++) {\n            if ($strings[$i] == $str)\
    \ {\n                $strings[$i] = $str;\n                break;\n          \
    \  }\n        }\n    }\n\n    foreach ($strings as $str) {\n        $num = count($strings);\n\
    \        for ($i = 0; $i < $num; $i++) {\n            if (is_string($strings[$i])\
    \ && is_string($str) && strlen($str) == strlen($strings[$i])) {\n            \
    \    $strings[$i] = $str;\n                break;\n            }\n        }\n\
    \    }\n\n    // Now each array only has strings in it, and we can find the longest\n\
    \    // one in O(n).\n    $longest = array();\n    foreach ($strings as $str)\
    \ {\n        if (is_string($str) && strlen($str) > count($longest)) {\n      \
    \      $longest = $str;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpwdn1gw9u.php on line 39\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpwdn1gw9u.php\
    \ on line 39\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdn1gw9u.php:53\n\
    Stack trace:\n#0 /tmp/tmpwdn1gw9u.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwdn1gw9u.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!empty($strings)) {\n        $max_len = -PHP_INT_MAX;\n        foreach\
    \ ($strings as $str) {\n            $len = mb_strlen($str);\n            if ($len\
    \ > $max_len) {\n                $max_len = $len;\n            }\n        }\n\
    \        return $strings[$max_len];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpakxt_m25.php:13\nStack trace:\n#0 /tmp/tmpakxt_m25.php(23): longest(Array)\n\
    #1 /tmp/tmpakxt_m25.php(28): candidate(Array)\n#2 /tmp/tmpakxt_m25.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpakxt_m25.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return;\n    }\n\n    $longest = strlen(max($strings,\
    \ null));\n    $longestString = null;\n\n    foreach ($strings as $string) {\n\
    \        $stringLength = strlen($string);\n\n        if ($stringLength === $longest)\
    \ {\n            $longestString = $string;\n            continue;\n        }\n\
    \n        if ($stringLength > $longest) {\n            $longestString = $string;\n\
    \        }\n    }\n\n    return $longestString;\n}\n</code>\n<|/ a dscore=1 tags=php,laravel\
    \ |>\n<| a dscore=1 |>\nYou can also use laravel collection for this. Just use\
    \ max() on collection and it will give you the longest string out of the collection\n\
    <|/ a tags=php,laravel |>\n<| c |>\nFor someone who is trying to find the longest\
    \ string in a collection of strings, this is the best answer. Also, it is an excellent\
    \ example of how laravel collections can work.\n<|/ c |>\n<| a |>\nIf you use\
    \ Laravel collections, you can use the max() function on the collection:\n<code>\n\
    $max = $yourCollection->max();\n</code>\n<|/ a dscore=0 tags=php,laravel |>\n\
    <| a tags=php,laravel |>\nLaravel collection max function returns the maximum\
    \ element in the collection\n\n<code>\nuse Illuminate\\Support\\Facades\\DB;\n\
    $maxPrice = DB::table('products')->max('price');\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,laravel |>\nFor someone who is trying to find the longest string\
    \ in a collection of strings, this is the best answer. Also, it is an excellent\
    \ example of how laravel collections can work.\n<code>\n$strings = ['a', 'bb',\
    \ 'ccc'];\n$longestString = $strings[0];\n$largest = 0;\nforeach ($strings as\
    \ $string) {\n    $stringLength=strlen($string);\n    if ($stringLength > $largest)\
    \ {\n        $longestString = $string;\n        $largest = $stringLength;\n  \
    \  }\n}\necho $longestString;\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThe Collection\
    \ max function will return a value.\n<code>\n$strings = ['a', 'bb', 'ccc'];\n\
    $string = $strings[0];\n\n$stringLength=strlen($string);\n$maxLength = $stringLength;\n\
    foreach ($strings as $string) {\n    $stringLength=strlen($string);\n    if ($stringLength\
    \ > $maxLength) {\n        $maxLength = $string\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjv8rn7t0.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return empty($strings) ? None : max($strings, function($string) {\n \
    \       return strlen($string);\n    });\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpg3oh34vo.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpg3oh34vo.php:20\nStack\
    \ trace:\n#0 /tmp/tmpg3oh34vo.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpg3oh34vo.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $maxLen = 0;\n  $foundMaxLen = false;\n  foreach ($strings as $string)\
    \ {\n    $len = mb_strlen($string, 'utf-8');\n    if ($len > $maxLen) {\n    \
    \  $maxLen = $len;\n      $foundMaxLen = true;\n    }\n  }\n\n  if (!$foundMaxLen)\
    \ {\n    return None;\n  }\n\n  return $strings[$maxLen];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp07bhl7wc.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp07bhl7wc.php:32\nStack\
    \ trace:\n#0 /tmp/tmp07bhl7wc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp07bhl7wc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return $strings[0] ?\n        length($strings) === count($strings) ?\n\
    \            max($strings) :\n            longest(array_slice($strings, 0, count($strings)\
    \ - 1)) :\n        None;\n}\n</code>\n<|/ a dscore=0 tags=php,string |>\n<| a\
    \ tags=php,string |>\nOne more solution that doesn't require PHP7 :-)\n<code>\n\
    $strings = [\n    'a string',\n    'string',\n    'string string',\n    'string1\
    \ string2',\n    'string1 string2 string3'\n];\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppftvdjjx.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $maxlen = 0;\n  $longest = null;\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > $maxlen) {\n      $maxlen = strlen($string);\n     \
    \ $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = array_reduce($strings, function ($carry, $string) {\n    return\
    \ strlen($string) > strlen($carry) ? $string : $carry;\n  });\n\n  return $longest\
    \ ? $longest : $strings[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return $strings[0] ?: (count($strings) > 1 ? key(array_slice($strings,\
    \ 0, count($strings) - 1)) : null);\n}\n</code>\n<|/ a |>\n<| c |>\nI did not\
    \ want to use array_count_values() because i would still be needing all the keys\
    \ (so I would still be iterating through them), but this works very well for what\
    \ I was looking for.  Thanks!!\n<|/ c |>\n<| c |>\nNo problem. I didn't know you\
    \ wanted to print multiple options for the same length. Thanks for clarifying.\n\
    <|/ c |>\n<| a |>\n<code>\n$a1 = array('a', 'b', 'b', 'c', 'c', 'd');\n$a2 = array('d',\
    \ 'e', 'e', 'e', 'e', 'f', 'f');\n\n$newArr = array();\nforeach ($a1 as $a11)\
    \ {\n    $newArr[$a11] = (isset($newArr[$a11]) ? $newArr[$a11] : 0) + 1;\n}\n\
    foreach ($a2 as $a21) {\n    $newArr[$a21] = (isset($newArr[$a21]) ? $newArr[$a21]\
    \ : 0) + 1;\n}\nksort($newArr);\n\nprint_r($newArr);\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2sbtcbqs.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings) return null;\n  $lens = array_map('strlen', $strings);\n\
    \  $maxlen = max($lens);\n  $longest = array_filter($lens, function($len) use\
    \ ($lens) {\n    return $len === $maxlen;\n  })[0];\n\n  return !$longest ? None\
    \ : $longest;\n}\n\n/**\n * Maps $value into $key within $dict and returns a new\
    \ dictionary with the mapped values.\n */\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpd7stk7jz.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpd7stk7jz.php:29\nStack\
    \ trace:\n#0 /tmp/tmpd7stk7jz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd7stk7jz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) return null;\n    $longest = null;\n    $n = count($strings);\n\
    \    foreach ($strings as $s) {\n        if (strlen($s) > $n) {\n            $longest\
    \ = $s;\n            break;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm2m0h5g.php:28\n\
    Stack trace:\n#0 /tmp/tmplm2m0h5g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplm2m0h5g.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings) return None;\n  $max_length = 0;\n  $max_length = array_reduce($strings,\
    \ function ($max_length, $s) { return max($max_length, strlen($s)); });\n  foreach\
    \ ($strings as $string) {\n    if (strlen($string) > $max_length) {\n      return\
    \ $string;\n    }\n  }\n  return None;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpcx1rfwsw.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpcx1rfwsw.php:26\nStack\
    \ trace:\n#0 /tmp/tmpcx1rfwsw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcx1rfwsw.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return !empty($strings) ? max($strings, strlen) : null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant strlen - assumed 'strlen' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmprsxri1ef.php on line 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsxri1ef.php:19\nStack\
    \ trace:\n#0 /tmp/tmprsxri1ef.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprsxri1ef.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longestLength = 0;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $longestLength) {\n            $longestLength\
    \ = $length;\n        }\n    }\n    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    return $longestLength == 0 ? $strings[0] : $strings[$longestLength];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz2pcfoi.php:29\n\
    Stack trace:\n#0 /tmp/tmpsz2pcfoi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsz2pcfoi.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!is_array($strings) || count($strings) === 0) {\n        throw new\
    \ InvalidArgumentException('String list must not be empty.');\n    }\n    $len\
    \ = max(array_map('strlen', $strings));\n    return array_reduce($strings, function($result,\
    \ $item) use ($len) {\n        return max($result, strlen($item), $len);\n   \
    \ });\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: String list must not\
    \ be empty. in /tmp/tmp18ysi4y9.php:11\nStack trace:\n#0 /tmp/tmp18ysi4y9.php(20):\
    \ longest(Array)\n#1 /tmp/tmp18ysi4y9.php(24): candidate(Array)\n#2 /tmp/tmp18ysi4y9.php(29):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp18ysi4y9.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $largest = null;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($largest))\
    \ {\n            $largest = $string;\n        }\n    }\n    return $largest;\n\
    }\n\n/**\n * @template T\n * @param $list\n * @param $property\n * @param $value\n\
    \ * @return array\n */\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpv91vja70.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpv91vja70.php:34\nStack\
    \ trace:\n#0 /tmp/tmpv91vja70.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv91vja70.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n</code>\nThen using it\
    \ in your code would be:\n<code>\n$strings = ['hello', 'world', 'python', 'test',\
    \ 'foo', 'bar', 'baz'];\n$longest = longest($strings);\nforeach ($data as $row)\
    \ {\n    $data['title'] = $row->title;\n    $data['title'] = preg_replace('/[^a-z\
    \ 0-9\\-\\.\\']/', '', $data['title']);\n    $data['title'] = trim($data['title']);\n\
    \    $data['title'] = str_replace(' ', '', $data['title']);\n    $data['title']\
    \ = trim($data['title']);\n    $data['title'] = strtolower($data['title']);\n\
    \    $data['title'] = preg_replace('/\\s\\s+/', ' ', $data['title']);\n    $data['title']\
    \ = preg_replace('/\\s+/', ' ', $data['title']);\n    $data['title'] = trim($data['title']);\n\
    \    $data['title'] = preg_replace('/\\W+/', '', $data['title']);\n    $data['title']\
    \ = trim($data['title']);\n    $data['title'] = preg_replace('/[\\W]+/', '', $data['title']);\n\
    \    $data['title'] = trim($data['title']);\n    $data['title'] = preg_replace('/\\\
    s+/', ' ', $data['title']);\n    $data['title'] = preg_replace('/\\s+/', ' ',\
    \ $data['title']);\n    $data['title'] = preg_replace('/\\s+/', ' ', $data['title']);\n\
    \    $data['title'] = preg_replace('/\\s+/', ' ', $data['title']);\n    $data['title']\
    \ = preg_replace('/\\s+/', ' ', $data['title']);\n    $data['title'] = preg_replace('/\\\
    s+/', ' ', $data['title']);\n    $data['title'] = preg_replace('/\\s+/', ' ',\
    \ $data['title']);\n    $data['title'] = preg_replace('/\\s+/', ' ', $data['title']);\n\
    \    $data['title'] = preg_replace('/\\s+/', ' ', $data['title']);\n    $data['title']\
    \ = preg_replace('/\\s+/', ' ', $data['title']);\n    $data['title'] = preg_replace('/\\\
    s+/', ' ', $data['title']);\n    $data['title'] = preg_replace('/\\s+/', ' ',\
    \ $data['title']);\n    $data['title'] = preg_replace('/\\s+/', ' ', $data['title']);\n\
    \    $data['title'] = preg_replace('/\\s+/', ' ', $data['title']);\n    $data['title']\
    \ = preg_replace('/\\s+/', ' ', $data['title']);\n    $data['title'] = pre\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1pkydsj8.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $max_length = count($strings);\n\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > $max_length) {\n            $max_length\
    \ = strlen($string);\n            $longest = $string;\n        }\n    }\n\n  \
    \  return $longest;\n}\n\n$strings = array('a', 'bb', 'ccc', 'dddd');\n\n$result\
    \ = longest($strings);\n\necho 'Longest string: ' . $result;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$a1 = array('Hello', 'World', '!');\n\
    $a2 = array('How', 'are', 'you', '?');\n\n$a1 = array_count_values($a1);\n$a2\
    \ = array_count_values($a2);\n$a1 = $a1[\"Hello\"];\n$a2 = $a2[\"How\"];\n$max\
    \ = max($a1, $a2);\n\n$output = $max != 1 ? $max : $a1;\n\necho $output;\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9brzcynu.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if(empty($strings)) {\n    return;\n  }\n\n  $max = $strings[0];\n\n  foreach($strings\
    \ as $string) {\n    if(strlen($string) > strlen($max)) {\n      $max = $string;\n\
    \    }\n  }\n\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $maxLength =\
    \ 0;\n    $maxString = strval($strings[0]);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $maxLength) {\n            $maxLength = strlen($string);\n\
    \            $maxString = $string;\n        }\n    }\n    return $maxString;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = count($strings);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        if ($longest === null || strlen($longest) < strlen($strings[$i]))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  return array_reduce($strings, function ($maxLength, $string) {\n    return\
    \ mb_strlen($string) > $maxLength ? mb_strlen($string) : $maxLength;\n  }, 0);\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpng58u9hb.php:20\n\
    Stack trace:\n#0 /tmp/tmpng58u9hb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpng58u9hb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $length) {\n            $longest = $string;\n\
    \            $length = strlen($string);\n        }\n    }\n    return $longest\
    \ ?: $strings[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $s) {\n        if (strlen($s)\
    \ > strlen($longest)) {\n            $longest = $s;\n        }\n    }\n    return\
    \ $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return;\n    }\n    if (count($strings) ===\
    \ 1) {\n        return reset($strings);\n    }\n    $longest = null;\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = (strlen($string)\
    \ > $longestLength) ? strlen($string) : $longestLength;\n        if ($length >\
    \ $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptolyglnv.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $maxLength = 0;\n    $longestString = '';\n\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > $maxLength) {\n            $maxLength\
    \ = strlen($string);\n            $longestString = $string;\n        }\n    }\n\
    \n    return $longestString;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr96rqt2.php:28\n\
    Stack trace:\n#0 /tmp/tmpyr96rqt2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyr96rqt2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $len = max(array_map(function($s)\
    \ {\n            return mb_strlen($s, 'utf-8');\n        }, $strings));\n    foreach\
    \ ($strings as $k => $s) {\n        $len = max($len, mb_strlen($s, 'utf-8'));\n\
    \        if ($len == mb_strlen($s, 'utf-8')) {\n            return $s;\n     \
    \   }\n    }\n    return None;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmphrh169e1.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphrh169e1.php:30\nStack\
    \ trace:\n#0 /tmp/tmphrh169e1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphrh169e1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $longest) {\n            $longest = $length;\n        }\n\
    \    }\n    if ($longest === 0) {\n        return None;\n    }\n    return $strings[0];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp8eij36r8.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8eij36r8.php:31\nStack\
    \ trace:\n#0 /tmp/tmp8eij36r8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8eij36r8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n\n    $shortestLength\
    \ = null;\n    $longestString = null;\n\n    foreach ($strings as $string) {\n\
    \        $length = mb_strlen($string, '8bit');\n        if ($shortestLength ===\
    \ null || $length < $shortestLength) {\n            $shortestLength = $length;\n\
    \            $longestString = $string;\n        }\n    }\n\n    return $longestString;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmppwfjcec1.php:18\nStack trace:\n#0 /tmp/tmppwfjcec1.php(29): longest(Array)\n\
    #1 /tmp/tmppwfjcec1.php(34): candidate(Array)\n#2 /tmp/tmppwfjcec1.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmppwfjcec1.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  return max(array_map('strlen', $strings));\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmp20nih983.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20nih983.php:18\n\
    Stack trace:\n#0 /tmp/tmp20nih983.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp20nih983.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $max = NULL;\n\
    \    foreach ($strings as $str) {\n        if (strlen($str) > strlen($max)) {\n\
    \            $max = $str;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpz9stw9ek.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpz9stw9ek.php:27\nStack\
    \ trace:\n#0 /tmp/tmpz9stw9ek.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpz9stw9ek.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($result, $str) use ($strings)\
    \ {\n        if (strlen($str) > strlen($result)) {\n            $result = $str;\n\
    \        }\n        return $result;\n    });\n    if (empty($strings)) {\n   \
    \     return;\n    }\n    $max = 0;\n    foreach ($strings as $str) {\n      \
    \  if (strlen($str) > $max) {\n            $max = $strlen($str);\n           \
    \ $longest = $str;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp7ad2whp1.php:22\n\
    Stack trace:\n#0 /tmp/tmp7ad2whp1.php(30): longest(Array)\n#1 /tmp/tmp7ad2whp1.php(35):\
    \ candidate(Array)\n#2 /tmp/tmp7ad2whp1.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp7ad2whp1.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  // If there are no strings, the output is `None`\n  if (!$strings || !count($strings))\
    \ {\n    return None;\n  }\n\n  // Get the length of all the strings\n  $lengths\
    \ = array_map(function ($string) {\n    return strlen($string);\n  }, $strings);\n\
    \n  // Return longest string\n  return reset($lengths);\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp940zp1lm.php on line 12\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp940zp1lm.php:29\nStack\
    \ trace:\n#0 /tmp/tmp940zp1lm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp940zp1lm.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings))\n        return null;\n    $longest = current($strings);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest_str = null;\n    foreach ($strings as $string) {\n        $new_str\
    \ = $string;\n        $str_length = strlen($new_str);\n        if ($longest_str\
    \ === null) {\n            $longest_str = $new_str;\n            $longest_str_length\
    \ = $str_length;\n        } elseif ($longest_str_length > $str_length) {\n   \
    \         $longest_str = $new_str;\n            $longest_str_length = $str_length;\n\
    \        } elseif ($longest_str === $new_str) {\n            $longest_str = $new_str;\n\
    \            $longest_str_length = $str_length;\n        }\n    }\n    if ($longest_str)\
    \ {\n        return $longest_str;\n    }\n    return null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwv_nonj.php:38\n\
    Stack trace:\n#0 /tmp/tmpdwv_nonj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdwv_nonj.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings) return None;\n  $max_len = -1;\n  $max_str = None;\n  foreach\
    \ ($strings as $str) {\n    if (strlen($str) > $max_len) {\n      $max_len   =\
    \ strlen($str);\n      $max_str   = $str;\n    }\n  }\n  return $max_str;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpj6vshxen.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpj6vshxen.php:27\nStack\
    \ trace:\n#0 /tmp/tmpj6vshxen.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj6vshxen.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  return implode('', array_map(function ($s) { return strlen($s); }, $strings))\n\
    \    ? max(array_map(function ($s) { return strlen($s); }, $strings))\n    : null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmu9hgpmc.php:21\n\
    Stack trace:\n#0 /tmp/tmpmu9hgpmc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmu9hgpmc.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) return '';\n    $longest_str = array_shift($strings);\n\
    \    foreach ($strings as $str) {\n        if (strlen($str) > strlen($longest_str))\
    \ {\n            $longest_str = $str;\n        }\n    }\n    return $longest_str;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wgh66nn.php:25\n\
    Stack trace:\n#0 /tmp/tmp2wgh66nn.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2wgh66nn.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_reduce($strings,\
    \ function ($c, $v) {\n        return max($c, strlen($v));\n    });\n    return\
    \ $strings[array_search($longest, $strings)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5mv_68o.php:26\n\
    Stack trace:\n#0 /tmp/tmps5mv_68o.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps5mv_68o.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest_length =\
    \ strlen(reset($strings));\n    $longest = '';\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length >= $longest_length)\
    \ {\n            $longest = $string;\n            $longest_length = $length;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvf5_j12.php:31\n\
    Stack trace:\n#0 /tmp/tmpbvf5_j12.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbvf5_j12.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) return null;\n  $longest_length = PHP_INT_MAX;\n \
    \ $longest = '';\n  foreach ($strings as $string) {\n    $length = strlen($string);\n\
    \    if ($length > $longest_length) {\n      $longest_length = $length;\n    \
    \  $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiauuu0zl.php:29\n\
    Stack trace:\n#0 /tmp/tmpiauuu0zl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiauuu0zl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $sorted = sort($strings);\n    if (count($sorted) === 0) {\n        return;\n\
    \    }\n    $longest = array();\n    foreach ($sorted as $string) {\n        $length\
    \ = strlen($string);\n        if (isset($longest[$length])) {\n            if\
    \ ($length > $longest[$length]) {\n                $longest[$length] = $string;\n\
    \            }\n        } else {\n            $longest[$length] = $string;\n \
    \       }\n    }\n    return $longest;\n}\n</code>\n<|/ a |>\n<| c |>\nYes, but\
    \ you didn't answer the question: \"Why doesn't PHP return the longest string\
    \ by itself?\", you just answered \"why doesn't PHP return an array\". The question\
    \ asks for an algorithm to do that.\n<|/ c |>\n<| c |>\nI don't really understand\
    \ the \"why doesn't PHP return an array\" part. As far as I can tell, it does.\
    \ In fact it even returns a string that is the longest string in that array. The\
    \ part you're interested in is the part that converts the array to a string. This\
    \ can be done using the implode function. All the other parts just help get the\
    \ string that is in the longest form.\n<|/ c |>\n<| c |>\nIt returns: string(5)\
    \ \"aaaa\" because `implode($longest)` returns \"aaaa\"\n<|/ c |>\n<| c |>\nThat\
    \ is correct. I don't understand what you don't understand. You've given me a\
    \ solution to OP's question of how to *return* the longest string in an array.\
    \ I've also given you a solution to finding the longest string in an array. If\
    \ that's not what you want, then just rephrase your question. Nobody is going\
    \ to write your code from scratch.\n<|/ c |>\n<| c |>\nI understand how your solution\
    \ works. I'm asking why it isn't possible to just return it without converting\
    \ to an array. It doesn't make any sense to me that a function returning an object\
    \ would take less time to execute than one returning an array. There has to be\
    \ some sort of performance hit that I'm missing, I just can't figure out what.\n\
    <|/ c |>\n<| a |>\nYou can use array_filter to remove empty strings, otherwise\
    \ it returns all non-empty strings.\n<code>\n$array = array();\n$array[] = \"\
    hello\";\n$array[] = \"  \";\n$array[] = \"  hello\";\n$array[] = \"  hello  \"\
    ;\n\necho max(array_filter($array, \"strlen\"));\n</code>\n<|/ a dscore=2 tags=php\
    \ |>\n<| c |>\nThis doesn't answer the question, just restates what he already\
    \ know.\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1hdcqpul.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array(count($strings)=>null);\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (isset($longest[$length]))\
    \ {\n            if ($longest[$length] < $length) {\n                $longest[$length]\
    \ = $string;\n            }\n        } else {\n            $longest[$length] =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n</code>\n<|/ a |>\n<| a\
    \ |>\nThis is not the most efficient way to do this, but you can always use preg_match\
    \ to extract the parts of the string, sort them and return the longest one:\n\
    <code>\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp62bx4_a6.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = null;\n  $maxLen = 0;\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > $maxLen) {\n      $longest = $string;\n      $maxLen\
    \ = strlen($string);\n    }\n  }\n  return $longest ?: null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) return null;\n\n    $max_length = -1;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > $max_length) $max_length = strlen($string);\n\
    \    }\n\n    return $max_length > 0 ? $strings[0] : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce1ltqf9.php:27\n\
    Stack trace:\n#0 /tmp/tmpce1ltqf9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpce1ltqf9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) return None;\n    sort($strings);\n    $longest_length\
    \ = array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ == $longest_length) {\n            return $string;\n        }\n    }\n    return\
    \ None;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp1_9s_tbf.php on line 10\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp1_9s_tbf.php:26\nStack\
    \ trace:\n#0 /tmp/tmp1_9s_tbf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1_9s_tbf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (!$strings) return null;\n\tif (count($strings) == 1) return $strings[0];\n\
    \tif (count($strings) == 0) return null;\n\t$maxLength = -1;\n\tforeach ($strings\
    \ as $string) {\n\t\t$length = strlen($string);\n\t\tif ($maxLength < $length)\
    \ {\n\t\t\t$maxLength = $length;\n\t\t}\n\t}\n\treturn $maxLength ? array_pop($strings)\
    \ : null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvkp1y3g.php:29\n\
    Stack trace:\n#0 /tmp/tmppvkp1y3g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppvkp1y3g.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!empty($strings)) {\n        $min_len = strlen(reset($strings));\n\
    \        $max_len = -1;\n        $max_element = current($strings);\n        foreach\
    \ ($strings as $string) {\n            $len = strlen($string);\n            if\
    \ ($len < $min_len) $min_len = $len;\n            if ($len > $max_len) $max_len\
    \ = $len;\n            $max_element = max($max_element, $string);\n        }\n\
    \        if ($max_len == $min_len) {\n            return $max_element;\n     \
    \   }\n    }\n    return None;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpf4_j10p_.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpf4_j10p_.php:32\nStack\
    \ trace:\n#0 /tmp/tmpf4_j10p_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpf4_j10p_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $s) {\n        if (strlen($s)\
    \ > strlen($longest)) {\n            $longest = $s;\n        }\n    }\n    return\
    \ $longest;\n}\n</code>\nThis solution is similar to yours, but uses list comprehension\
    \ instead of foreach loop and it works also with empty lists, i.e. [].\n<|/ a\
    \ |>\n<| a dscore=1 tags=php,arrays |>\n<code>\n$longest = max( array_map( function(\
    \ $string ){\n    return strlen( $string );\n}, $strings ) );\n</code>\n<|/ a\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a |>\nYou could do it with array_filter and count the length:\n\
    <code>\n$longest = array_filter($myArray, function($item){\n  return strlen($item)\
    \ == max(array_map('strlen', $myArray));\n});\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| a dscore=1 tags=php,arrays |>\n<code>\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9y7sdgcz.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return !empty($strings) ? implode('', array_map(function ($string) {\n\
    \        return strlen($string);\n    }, $strings)) : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3we2cam.php:21\n\
    Stack trace:\n#0 /tmp/tmph3we2cam.php(25): test()\n#1 {main}\n  thrown in /tmp/tmph3we2cam.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return None;\n    }\n    $longest = max(count($strings),\
    \ 1);\n    foreach ($strings as $s) {\n        $length = count($s);\n        if\
    \ ($length > $longest) {\n            $longest = $length;\n        }\n    }\n\
    \    return $longest ? reset($strings) : None;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmps3o8ah3r.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmps3o8ah3r.php:27\nStack\
    \ trace:\n#0 /tmp/tmps3o8ah3r.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps3o8ah3r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!count($strings))\n        return null;\n    $longest = PHP_INT_MAX;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > $longest)\
    \ {\n            $longest = strlen($string);\n        }\n    }\n    return $strings[array_search(max($longest),\
    \ $strings)];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp4grbf0tt.php on line 18\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmp4grbf0tt.php on line 18\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp4grbf0tt.php:28\nStack trace:\n\
    #0 /tmp/tmp4grbf0tt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4grbf0tt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings))\n        return null;\n\n    // Find the length\
    \ of the longest string.\n    $max_len = -1;\n    foreach ($strings as $string)\
    \ {\n        $len = strlen($string);\n        if ($len > $max_len)\n         \
    \   $max_len = $len;\n    }\n\n    // Find its position.\n    $position = 0;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) == $max_len)\n\
    \            return $strings[$position++];\n    }\n\n    return null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphu_r9co3.php:38\n\
    Stack trace:\n#0 /tmp/tmphu_r9co3.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphu_r9co3.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > strlen(last($strings))) {\n            list($last, $lastLength)\
    \ = last($strings);\n            if ($length == $lastLength) {\n             \
    \   return $last;\n            }\n        }\n    }\n    return None;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpy8fia761.php on line 19\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpy8fia761.php:27\nStack\
    \ trace:\n#0 /tmp/tmpy8fia761.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy8fia761.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return None;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    }, None);\n    return $longest ? $longest : reset($strings);\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpvum9ey_b.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpvum9ey_b.php:24\nStack\
    \ trace:\n#0 /tmp/tmpvum9ey_b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvum9ey_b.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  foreach($strings as $s) {\n    if (strlen($s) > $max) {\n      $maxstr\
    \ = $s;\n    }\n  }\n  return $maxstr != null ? $maxstr : null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi988ifpw.php:24\n\
    Stack trace:\n#0 /tmp/tmpi988ifpw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpi988ifpw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) return null;\n    $longest = strlen(max($strings,\
    \ null));\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longest) {\n            $longest = $length;\n        }\n\
    \    }\n    return $longest ? $strings[$longest] : null;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis solution is probably the best for PHP as it deals with (most)\
    \ edge cases where \"strlen\" may not work (especially when dealing with UTF-8\
    \ characters).\n<|/ c |>\n<| c |>\nstrlen() will also fail when dealing with Unicode\
    \ characters http://stackoverflow.com/a/4796175/375929\n<|/ c |>\n<| a tags=php\
    \ dscore=4 |>\nIf you're looking for a way to get the longest string from a list,\
    \ you can use array_reduce to reduce it to a single string by concatenating all\
    \ the strings, then use strlen to get the longest string:\n<code>\n$longest =\
    \ array_reduce($myStrings, function ($a, $b) {\n    return $a . $b; \n}, '');\n\
    \n$longestLen = strlen($longest);\n</code>\n<|/ a |>\n<| a dscore=3 |>\n<code>\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm86a9xy3.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings) return null;\n  $max = count($strings);\n  return $max >\
    \ 1 ? max($strings) : null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37532ynb.php:21\n\
    Stack trace:\n#0 /tmp/tmp37532ynb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp37532ynb.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return None;\n    }\n\n    if (count($strings)\
    \ < 1) {\n        return None;\n    }\n\n    $longest_string = count($strings)\
    \ == 1 ? $strings[0] : $strings[0];\n    foreach ($strings as $s) {\n        $length_of_s\
    \ = strlen($s);\n\n        if ($length_of_s > strlen($longest_string)) {\n   \
    \         $longest_string = $s;\n        }\n    }\n    return $longest_string;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp0lffjjtf.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0lffjjtf.php:34\nStack\
    \ trace:\n#0 /tmp/tmp0lffjjtf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0lffjjtf.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    static $length = null;\n    if ($length === null) {\n        $length\
    \ = array_map(function ($s) {\n            return mb_strlen($s);\n        }, $strings);\n\
    \        $length = array_sum($length);\n    }\n    $max = 0;\n    foreach ($strings\
    \ as $s) {\n        $len = mb_strlen($s);\n        if ($len > $max) {\n      \
    \      $max = $len;\n        }\n    }\n    return isset($strings[$max]) ? $strings[$max]\
    \ : $max;\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\nThis works well for\
    \ me:\n<code>\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfsmrywyc.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $lengths = array_map(function($s) { return strlen($s); }, $strings);\n\
    \n    $max_length = max($lengths);\n    $max_length = array_search($max_length,\
    \ $lengths);\n\n    return $strings[$max_length];\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nI think you mean `max($lengths)`.\n<|/ c |>\n<| c |>\nIt's also worth mentioning\
    \ that `array_search` only finds the *first* occurrence of `$max_length` in the\
    \ given array.\n<|/ c |>\n<| c |>\nI know, I know, I didn't see that when I wrote\
    \ the code. Sorry.\n<|/ c |>\n<| c |>\nI do wish I could upvote this one twice...\
    \ thank you so much!!\n<|/ c |>\n<| c |>\nThis was really helpfull! I wish I had\
    \ upvoted it twice :)\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array\
    \ = array(\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\");\necho longest_string($array);\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1dqca53j.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    return max($strings, function() use (&$strings) {\n        $length =\
    \ strlen(func_get_arg(0));\n        foreach ($strings as $string) {\n        \
    \    if (strlen($string) === $length) continue;\n            return $string;\n\
    \        }\n    });\n}\n</code>\nTo use it you'd do:\n<code>\n$strings = ['a',\
    \ 'bb', 'ccc'];\necho longest($strings);\n</code>\n<|/ a tags=arrays,function,php,string\
    \ |>\n<| c |>\nI like the use of `array_map` and `max`, but doesn't the OP want\
    \ `['aa', 'bbb', 'cccc']`?\n<|/ c |>\n<| c |>\nIt might be that OP didn't understand\
    \ what he was doing, or didn't know about the `max` function - either way, this\
    \ is a good answer. I just thought I'd offer something more \"readable\".\n<|/\
    \ c |>\n<| c |>\nI've upvoted this solution, but I think it would be easier to\
    \ understand if you, instead, added a usage example. Thanks!\n<|/ c |>\n<| c |>\n\
    - I agree. I've added an example to the answer.\n<|/ c |>\n<| a dscore=3 |>\n\
    You can do it like this with array_walk:\n<code>\n$array = ['aa', 'bbb', 'cccc',\
    \ 'dddd'];\n$array[0] = null;\n\narray_walk($array, function(&$item, $key){\n\
    \    if ($item === null) $item = max($array);\n});\n\nprint_r($array);\n</code>\n\
    <|/ a tags=arrays,function,php,string |>\n<| c |>\nWow, this is great, I had no\
    \ idea `array_walk` was even a thing. Nice answer!\n<|/ c |>\n<| c |>\nI didn't\
    \ even know about `array_walk`, but I'm now curious, what does `function(&$item,\
    \ $key)` do? I've never seen that syntax.\n<|/ c |>\n<| c |>\n- I've added a link\
    \ to documentation (`array_walk`).\n<|/ c |>\n<| c |>\n: What do you mean? What\
    \ should I change in the answer if I wanted to do that with something else than\
    \ arrays?\n<|/ c |>\n<| c |>\n- It would require a slight modification.\n<|/ c\
    \ |>\n<| a dscore=3 |>\nJust my two cents:\n<code>\n$inputs = ['aa', 'bbb', 'cccc',\
    \ 'dddd'];\n</code>\nMethod 1 (using array_filter):\n<code>\n$result = array_filter($inputs,\
    \ function(\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt68e92dk.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n        $lengths[] = strlen($string);\n\
    \    }\n    if (count($lengths) > 1) {\n        array_pop($lengths); // Remove\
    \ longest string\n        $longest = implode('', $lengths);\n    }\n    return\
    \ $longest;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nHow does this work\
    \ when you have a value with a leading space in front of the word \"test\", and\
    \ you run this through the `longest` function above?\n<|/ c |>\n<| c |>\nThis\
    \ is how longest is implemented, to ignore leading spaces. If you want to exclude\
    \ leading spaces then change `strlen($longest)` to `ltrim($longest)`, where `ltrim`\
    \ returns the string with leading spaces removed.\n<|/ c |>\n<| a dscore=3 |>\n\
    As for me I like to use array_reduce and some standard array manipulation functions:\n\
    <code>\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph8cjh3vq.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) return NULL;\n\n    $longest_length = max(array_map('strlen',\
    \ $strings));\n\n    return array_reduce($strings, function ($out, $string) use\
    \ ($longest_length) {\n        $length = strlen($string);\n        return $out\
    \ ? $length >= $longest_length ? $string : $out : null;\n    }, NULL);\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphxgo4ll7.php:25\n\
    Stack trace:\n#0 /tmp/tmphxgo4ll7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphxgo4ll7.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return None;\n    }\n    $longestStringLength\
    \ = 0;\n    $longestString = NULL;\n    foreach ($strings as $string) {\n    \
    \    $length = strlen($string);\n        if ($length > $longestStringLength) {\n\
    \            $longestString = $string;\n            $longestStringLength = $length;\n\
    \        }\n    }\n    return $longestString;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpr5czdumg.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpr5czdumg.php:30\nStack\
    \ trace:\n#0 /tmp/tmpr5czdumg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpr5czdumg.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest_length = 0;\n    foreach ($strings as $s) {\n        $current_length\
    \ = getStrLen($s);\n        if ($current_length > $longest_length) {\n       \
    \     $longest_length = $current_length;\n        }\n    }\n    return $longest_length\
    \ > 0 ?\n        $strings[array_search(max((int)$longest_length, 0), $strings)]\
    \ :\n        null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getStrLen() in\
    \ /tmp/tmpnur4uius.php:12\nStack trace:\n#0 /tmp/tmpnur4uius.php(23): longest(Array)\n\
    #1 /tmp/tmpnur4uius.php(28): candidate(Array)\n#2 /tmp/tmpnur4uius.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnur4uius.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
