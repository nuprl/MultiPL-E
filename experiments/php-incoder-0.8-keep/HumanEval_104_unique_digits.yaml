name: HumanEval_104_unique_digits
language: php
prompt: "<?php\n// Given a list of positive integers x. return a sorted list of all\
  \ \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted\
  \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
  // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits($x)\
  \ {\n"
tests: "function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
  \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
  \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) {\
  \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    sort($x);\n    $ans = array();\n    $found = 0;\n    foreach ($x\
    \ as $v) {\n        if ($found != $v) {\n            $found = $v;\n          \
    \  $ans[] = $found;\n        }\n    }\n    return $ans;\n}\n", "    $result =\
    \ [];\n    $len = count($x);\n    for($i = 0; $i < $len; $i++) {\n        $tmp\
    \ = array_count_values($x);\n        asort($tmp);\n        foreach($tmp as $v){\n\
    \            if($v == 0){\n                break;\n            }\n           \
    \ if($v % 2 == 0){\n                $result[] = $v;\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "  $arr = [];\n  for ($i = 0; $i < count($x);\
    \ $i++) {\n    $d = $x[$i];\n    $m = $d % 10;\n    if ($m % 2 != 0) {\n     \
    \ $arr[] = $d;\n    }\n  }\n  return $arr;\n}\n", "   $res = [];\n   foreach ($x\
    \ as $v) {\n       foreach (str_split($v) as $d) {\n           if ($d != '0')\
    \ {\n               if (in_array($d, $res)) {\n                   break;\n   \
    \            }\n               $res[] = $d;\n           }\n       }\n   }\n  \
    \ return $res;\n}\n", "    $result = [];\n    foreach ($x as $v) {\n        $n\
    \ = 0;\n        while ($v % 10 !== 0) {\n            $v = (int) ($v / 10);\n \
    \           $n++;\n        }\n        if ($n === 0) {\n            $result[] =\
    \ $v;\n        }\n    }\n    return $result;\n}\n", "    if (count($x) == 0) return\
    \ array();\n    \n    $list = array();\n    foreach ($x as $val) {\n        $list[]\
    \ = $val;\n    }\n    \n    $even = true;\n    while ($even) {\n        $even\
    \ = false;\n        $n = rand(1, count($list));\n        $odds = array();\n  \
    \      foreach ($list as $val) {\n            if (($val % 2) == 0) {\n       \
    \         $odds[] = $val;\n            } else {\n                if (count($odds)\
    \ == 0) {\n                    $even = true;\n                    break;\n   \
    \             }\n            }\n        }\n        $list = $odds;\n    }\n   \
    \ \n    return $list;\n}\n", "  $result = array();\n  foreach($x as $number) {\n\
    \    foreach(str_split($number) as $digit) {\n      if (!isset($result[$digit]))\
    \ {\n        $result[$digit] = $number;\n      }\n    }\n  }\n  return $result;\n\
    }\n", "    sort($x);\n    $even = [];\n    foreach($x as $y) {\n        $y = $y\
    \ - 0;\n        if ($y % 2 == 0) {\n            $even[] = $y;\n        }\n   \
    \ }\n    return array_filter($x);\n}\n", "\tsort($x);\n\t$digits = array();\n\t\
    foreach ($x as $y) {\n\t\t$digits[$y] = 0;\n\t}\n\tforeach ($x as $y) {\n\t\t\
    if ($y % 2 == 0 && $y != 0) {\n\t\t\t$digits[$y] += 1;\n\t\t}\n\t}\n\t$newx =\
    \ array();\n\tforeach ($x as $y) {\n\t\tif ($digits[$y] > 0) {\n\t\t\t$newx[]\
    \ = $y;\n\t\t}\n\t}\n\treturn $newx;\n}", "    $digits = [];\n    foreach($x as\
    \ $i) {\n        $str = decbin($i);\n        $nums = str_split($str);\n      \
    \  foreach($nums as $num) {\n            if(intval($num) % 2 == 0) {\n       \
    \         array_push($digits, $num);\n            }\n        }\n    }\n    return\
    \ array_unique($digits);\n}\n", "    $count = count($x);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        $sum = 0;\n        $odds = 0;\n        for ($j =\
    \ $i; $j < $count; $j++) {\n            $digit = $x[$j];\n            $sum +=\
    \ $digit;\n            $odds += $digit & 1;\n        }\n        if (!$odds) {\n\
    \            $x[$i] = $sum;\n        }\n    }\n    return $x;\n}", "    $ret =\
    \ [];\n    $d = array_count_values($x);\n    foreach ($d as $v => $k) {\n    \
    \    if ($v > 1) {\n            if ($k % 2 == 0) {\n                $ret[] = $v;\n\
    \            } else {\n                unset($d[$v]);\n            }\n       \
    \ }\n    }\n    return $ret;\n}\n", "    $arr = array_count_values($x);\n    arsort($arr);\n\
    \    foreach ($arr as $key => $val) {\n        if ($val > 1) {\n            $ret[]\
    \ = $key;\n        }\n    }\n    return $ret;\n}\n", "    return array_filter(\n\
    \        $x, \n        function($y){return !preg_match('/^\\D*(\\d)\\D*$/', $y);}\n\
    \    );\n}", "    $r = array();\n    foreach($x as $x) { \n        $len = strlen($x);\n\
    \        $count = 0;\n        while($len > 0) {\n            $d = $x{0} % 10;\n\
    \            $x  = $x/10;\n            $count += $d;\n            $r[] = $d;\n\
    \            $len--;\n        }\n    }\n    foreach($r as $a) { \n        if ($a\
    \ % 2 != 0) { \n            $x[] = $a; \n        }\n    }\n    sort($x);\n   \
    \ return $x;\n}\n", "    $unique_digits = array();\n    foreach ($x as $k => $v)\
    \ {\n        if ($v % 2 != 0) $unique_digits[] = $v;\n    }\n    sort($unique_digits);\n\
    \    return $unique_digits;\n}", "    // write your code here\n}\n", "    $arr=array();\n\
    \    foreach($x as $a){\n        $arr[]=strval($a);\n    }\n    sort($arr);\n\
    \    $re=array();\n    foreach($arr as $a){\n        foreach(str_split($a) as\
    \ $k=>$v){\n            if($v%2==0){\n                continue;\n            }\n\
    \            $re[]=$v;\n        }\n    }\n    return $re;\n}\n</code>\nTest:\n\
    <code>\nvar_dump(unique_digits(array(1,2,4,5,9,11)));\nvar_dump(unique_digits(array(1,2,4,5,6,9)));\n\
    var_dump(unique_digits(array(1,2,4,5,6,9,11)));\nvar_dump(unique_digits(array(1,2,4,5,6,9,11,22)));\n\
    var_dump(unique_digits(array(1,2,4,5,6,9,11,22,33)));\nvar_dump(unique_digits(array(1,2,4,5,6,9,11,22,33,44)));\n\
    var_dump(unique_digits(array(1,2,4,5,6,9,11,22,33,44,55)));\nvar_dump(unique_digits(array(1,2,4,5,6,9,11,22,33,44,55,66)));\n\
    </code>\nOutput:\n<code>\narray(6) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1)\
    \ \"2\"\n  [2]=>\n  string(1) \"4\"\n  [3]=>\n  string(1) \"5\"\n  [4]=>\n  string(1)\
    \ \"6\"\n  [5]=>\n  string(1) \"9\"\n}\narray(5) {\n  [0]=>\n  string(1) \"1\"\
    \n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"4\"\n  [3]=>\n  string(1)\
    \ \"5\"\n}\narray(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\
    \n  [2]=>\n  string(1) \"4\"\n}\narray(6) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n\
    \  string(1) \"2\"\n  [2]=>\n  string(1) \"4\"\n  [3]=>\n  string(1) \"5\"\n \
    \ [4]=>\n  string(1) \"6\"\n}\narray(4) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n\
    \  string(1) \"2\"\n  [2]=>\n  string(1) \"4\"\n  [3]=>\n  string(1) \"5\"\n}\n\
    array(5) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"", "    $result\
    \ = [];\n    foreach ($x as $e) {\n        if($e % 2 == 0 && $e != 0) {\n    \
    \        $result[] = $e;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis fails for some edge cases. For example it can fail on\
    \ `unique_digits([15, 33, 1422, 1])`.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ It fails for some edge cases. But OP didn't specify anything about edge cases.\
    \ Anyway, the OP can modify it as per his need. I just gave a general example.\
    \ Of course he can modify it as per his need.\n<|/ c |>\n<| c |>\nHe clearly stated\
    \ in his question that he already has a working solution. I just wanted him to\
    \ point out that he could improve his code even more. And since he accepted the\
    \ answer, it means that the question as been answered. If someone wants me to\
    \ improve the code, I'll do it too.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "\t$x = array_reverse($x);\n\t$result = [];\n\tforeach ($x as $n) {\n\t\t$digits\
    \ = str_split($n);\n\t\t$odd = true;\n\t\tforeach ($digits as $digit) {\n\t\t\t\
    if (!$odd) {\n\t\t\t\t$result[] = $digit;\n\t\t\t} else {\n\t\t\t\t$odd = false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n", "    $ret = [];\n\n    foreach ($x\
    \ as $e) {\n        $p = str_pad('', $e, 0);\n\n        if ($p{0} == '0' && $p{0}\
    \ !== '0') {\n            $ret[] = $e;\n        }\n    }\n\n    return $ret;\n\
    }\n\n/**\n * Get all unique numbers from 1 to $n inclusive\n * @param int $n The\
    \ max number of the unique numbers. \n * @return array\n */", "    $result = [];\n\
    \    foreach ($x as $key => $value) {\n        $number = str_split($value, 1);\n\
    \        $even = 0;\n        foreach ($number as $value) {\n            if ($value\
    \ % 2 == 0) {\n                $even = 1;\n            }\n        }\n        if\
    \ ($even == 0) {\n            $result[] = $value;\n        }\n    }\n    return\
    \ $result;\n}", "    $results = [];\n\n    foreach($x as $key => $value) {\n \
    \       $temp = array_filter($x, function($elem) use ($key) {\n            return\
    \ $elem % 10 == 0;\n        });\n\n        if(count($temp) == 0) {\n         \
    \   $results[] = $x;\n        }\n    }\n\n    return array_values(array_merge($results,\
    \ $x));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work, it returns\
    \ `[1, 15, 33]` instead of `[1, 15, 33]`.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it worked fine for me. My code returns `[1, 15, 33]`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "\t$ret = [];\n\tforeach($x as $n){\n\t\t$found = false;\n\t\t\
    foreach($ret as $t){\n\t\t\tif($n % 10 == 0 && $t != $n){\n\t\t\t\t$found = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!$found)\n\t\t\t$ret[] = $n;\n\t}\n\treturn\
    \ $ret;\n}\n", "    return array_filter(\n        array_map(\n            function($a)\
    \ { return strval($a); },\n            array_count_values($x)\n        ),\n  \
    \      function($a) { return !($a % 2); } \n    );\n}\n", "  $digits = [];\n \
    \ foreach($x as $y) {\n    foreach($y as $d) {\n      if($d !== 0 && $d % 2 ===\
    \ 0) $digits[] = $d;\n    }\n  }\n  return $digits;\n}\n", "    if (count($x)\
    \ === 0)\n        return $x;\n    $sorted = array_map('intval', array_map('strval',\
    \ $x));\n    $sorted = array_unique($sorted);\n    $sorted[] = '';\n    return\
    \ array_filter($sorted, 'strval');\n}\n</code>\n<|/ a tags=php,algorithm dscore=0\
    \ |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n$n = 10;\n\n$numbers = array(\n\
    \    5,\n    6,\n    7,\n    8,\n    10,\n    11,\n    12,\n    13,\n    14,\n\
    \    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n\
    \    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n\
    \    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n\
    \    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    50,\n\
    \    51,\n    52,\n    53,\n    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n\
    \    60,\n    61,\n    62,\n    63,\n    64,\n    65,\n    66,\n    67,\n    68,\n\
    \    69,\n    70,\n    71,\n    72,\n    73,\n    74,\n    75,\n    76,\n    77,\n\
    \    78,\n    79,\n    80,\n    81,\n    82,\n    83,\n    84,\n    85,\n    86,\n\
    \    87,\n    88,\n    89,\n    90,\n    91,\n    92,\n    93,\n    94,\n    95,\n\
    \    96,\n    97,\n    98,\n    99,\n    100,\n    101,\n    102,\n    103,\n\
    \    104,\n    105,\n    106,\n    107,\n    108,\n    109,\n    110,\n    111,\n\
    \    112,\n    113,\n    114,\n    115,\n    116,\n    117,\n    118,\n    119,\n\
    \    120,\n    121,\n    122,\n", "    sort($x);\n    $res = array();\n    for\
    \ ($i=0; $i<count($x); $i++) {\n        if (is_int($x[$i]) && $x[$i] % 2 == 0)\
    \ {\n            $res[] = $x[$i];\n        }\n    }\n    return $res;\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis does not meet the requirement `should\
    \ be sorted in increasing order.` The question says _all_ elements except the\
    \ first\n<|/ c |>\n<| c |>\nThe second example above shows what happens when you\
    \ take the first element off your list. If you use the first example and your\
    \ list is `[100, 2, 9, 101, 11]` it returns the list `[100, 2, 9, 11]`. If you\
    \ use the second example it returns an empty array.\n<|/ c |>\n<| c |>\nYou edited\
    \ your comment to say \"This does not meet the requirement should be sorted in\
    \ increasing order.\"\n<|/ c |>\n<| c |>\nHaving said that, this answer has two\
    \ problems: 1) It does not use `array_reduce()`, which was introduced in PHP 5.5,\
    \ and 2) It sorts all the digits in the array before comparing the values, which\
    \ doesn't scale well for large arrays.\n<|/ c |>\n<| c |>\nThanks for your feedback,\
    \ I've changed the answer according to your feedback. Yes, I think your solution\
    \ will be much faster for large arrays. But I didn't have enough time to test\
    \ it, as I've already spent too much time in preparing my solution. I think my\
    \ solution is still easier to read, though.\n<|/ c |>\n<| a |>\nYou can use array_filter()\
    \ to filter the values based on your condition and use array_values() to return\
    \ the array in sorted order.\n<code>\n$arr = array_filter($arr, function($v){\n\
    \    return !is_int($v);\n});\nsort($arr);\n</code>\n<|/ a dscore=0 tags=arrays,php\
    \ |>\n<| c |>\nThis doesn't meet the requirement `should be sorted in increasing\
    \ order.`\n<|/ c |>\n<| c |>\nThis doesn't even work because you are returning\
    \ true or false\n<|/ c |>\n<| a tags=arrays,php |>\nThe answer is already here,\
    \ but I find it more elegant this way:\n<code>\n$arr = [100, 2, 9, 101, 11]; //\
    \ or whatever your input is\n$arr = array_filter($arr, function($v){\n    return\
    \ !is_int($v);\n});\nsort($arr);", "\t$digits = array();\n\tforeach ($x as $n\
    \ => $el) {\n\t\t$digits[$n] = $el % 10;\n\t}\n\t\n\tforeach ($digits as $i =>\
    \ $d) {\n\t\tif ($d % 2 != 0) {\n\t\t\tunset($digits[$i]);\n\t\t}\n\t}\n\t\n\t\
    asort($digits);\n\t\n\t$ret = [];\n\tforeach ($x as $n) {\n\t\tif ($n > 9 && $digits[$n]\
    \ >= 8) {\n\t\t\t$ret[] = $n;\n\t\t}\n\t}\n\t\n\treturn $ret;\n}\n", "    sort($x);\n\
    \    $new_x = [];\n    foreach ($x as $val) {\n        if ($val % 2 == 0) {\n\
    \            continue;\n        }\n        if (empty($new_x)) {\n            $new_x[]\
    \ = $val;\n        } else {\n            $found = false;\n            foreach\
    \ ($new_x as $nval) {\n                if ($nval % 10 == $val) {\n           \
    \         $found = true;\n                    break;\n                }\n    \
    \        }\n            if (!$found) {\n                $new_x[] = $val;\n   \
    \         }\n        }\n    }\n    return $new_x;\n}\n</code>\n<|/ a tags=arrays,sorting,php,recursion\
    \ |>\n<| c |>\n`uniq($x)` should be replaced with `sort($x)` as he specifically\
    \ stated that the output should be sorted.\n<|/ c |>\n<| c |>\n`sort()` function\
    \ sorts an array. So the result is correct.\n<|/ c |>\n<| c |>\nThe `sort()` function\
    \ sorts an array but that doesn't mean that the original array is sorted. If you\
    \ check the code I provided in the question, you'll see that the original array\
    \ is untouched, only the result of the sorting is returned. In your answer you\
    \ use `sort()` function on the original array which is not the correct way.\n\
    <|/ c |>\n<| c |>\nI used the `sort()` function because I used it before to sort\
    \ the original array. That's why I said that the result should be sorted.\n<|/\
    \ c |>\n<| c |>\n`uniq()` returns the original array, so it doesn't sort the original\
    \ array. Also it doesn't work on objects/strings so I used `sort()` instead.\n\
    <|/ c |>\n<| a dscore=2 tags=arrays,sorting,php,recursion |>\nThis question can\
    \ be solved using a recursive function.\n<code>", "  $sorted = sort($x);\n  \n\
    \  foreach($sorted as $k) {\n    if ($k % 2 == 0) return $k;\n  }\n}", "    $unique_digits\
    \ = array();\n    foreach($x as $number) {\n        $unique_digits = array_merge($unique_digits,\
    \ range($number % 10, $number + 1));\n    }\n    sort($unique_digits);\n    return\
    \ $unique_digits;\n}\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\nI believe\
    \ the goal was to only count the digits in the first digit. Your algorithm would\
    \ return all numbers with even digits.\n<|/ c |>\n<| c |>\nHi Chris thanks for\
    \ the solution. The problem I faced is i have to get it without using sort function\
    \ as it is very slow, is there any way to get the same result faster.\n<|/ c |>\n\
    <| c |>\nYeah, my initial answer used a sort function, but then I realized it\
    \ wasn't necessary. I've updated my answer to use the `range` function instead,\
    \ which should make it much faster (albeit not as fast as Chris Morgan's answer).\n\
    <|/ c |>\n<| a |>\n<code>", "    $result = array();\n    foreach ($x as $i) {\n\
    \        $str = '';\n        for ($i; $i; $i--) {\n            $str = sprintf('%01d',\
    \ $i % 10);\n        }\n        if (!in_array($str, $result)) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=2 |>\n<| c |>\nThanks for your answer.\n<|/ c |>\n<| c |>\nIf you don't\
    \ understand this code then please add comments and ask.\n<|/ c |>\n<| a |>\n\
    In a comment you said you don't understand the code.  I assume you only want an\
    \ explanation of how this works, not how to implement it.\nHere is a quick explanation\
    \ of how this algorithm works.  I'll use the code that you provided as a starting\
    \ point.  First I'll define some variables:\n<code>\n$nums = array(15, 33, 1422,\
    \ 1);\n</code>\nNow, we loop through the array and find the digit for each number.\
    \  I'll use a temporary variable ($digit) to store the digit we're currently processing.\n\
    <code>\n$digit = null;\nforeach ($nums as $n) {\n    // find the digit for the\
    \ current number\n    $digit = number_format($n, 0, '.', '');\n</code>\nNow, what\
    \ we're doing here is finding the first digit in the number, which will be the\
    \ one that is NOT a 0.  We can do this by taking the modulus of the current number\
    \ with 10.  Note that $n is already a string, which means that dividing by 10\
    \ will produce a string that doesn't have a decimal point.  So if $n is 15, we\
    \ get 15.  If the number is 32, we get 2 since 32 % 10 is 2.\n<code>\n    if ($digit\
    \ > 9) {\n        // The current number has a digit larger than 9\n        //\
    \ We only want to take the first one\n        break;\n    }\n}\n</code>\nNow,\
    \ we only want to take the first digit if the current number does not have any\
    \ zeroes.  So let's check if the $digit variable has a leading zero, which we\
    \ know is true if the $digit variable was larger than 9.  To determine this, we\
    \ check if the number has a remainder when divided by 10.  Let's put this in another\
    \ variable:\n<code>\n$mod = $digit % 10;\n</code>\nThe remainder is 0 if the number\
    \ was originally a multiple of 10, otherwise it's 1.  So if $mod is 1, then $digit\
    \ is a multiple of 10.  To determine this, we check whether the number is equal\
    \ to 0 ($digit == 0).\n<code>\nif ($mod == 0) {\n    // The number doesn't have\
    \ a leading zero.\n    // The first number in the sorted array is this one\n}\n\
    </code>\nNow, let's look at the next number.  We want to know ", "    $res = array_map(function($number)\
    \ {\n        return $number % 10 ;\n    }, $x);\n    $result = array_reduce($res,\
    \ function($acc, $item) {\n        return $acc && in_array($item % 10, $acc);\n\
    \    });\n    return !$result ? $res : array();\n}\n", "  $digits = [];\n  foreach($x\
    \ as $val) {\n    foreach(str_split($val) as $digit) {\n      if ($digit % 2 !=\
    \ 0) {\n        $digits[] = $digit;\n      }\n    }\n  }\n  ksort($digits);\n\
    \  return $digits;\n}\n", "    sort($x);\n    return array_filter($x, function($n){\n\
    \        return $n%2 == 0;\n    });\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    Try this\n<code>\n<?php\n", "    $return = array();\n    foreach ($x as $val)\
    \ {\n        $return[] = intval($val);\n    }\n    sort($return);\n    $count\
    \ = count($return);\n    for ($i = 0; $i < $count; $i++) {\n        if ($return[$i]\
    \ % 2 == 0) {\n            array_splice($return, $i, 1);\n        }\n    }\n \
    \   return $return;\n}", "  // write your code here\n  return $x;\n}\n", "\t$arr1\
    \ = array_count_values($x);\n\t$arr2 = array_filter($arr1, function ($k) {\n\t\
    \treturn (bool)((int)$k);\n\t});\n\tasort($arr2);\n\t$arr3 = array_keys($arr2);\n\
    \treturn array_values($arr3);\n}\n", "    sort($x);\n    $result = [];\n    $x\
    \ = array_reverse($x);\n    foreach($x as $n) {\n        $result[] = $n;\n   \
    \     while(!array_key_exists($n % 10, $result)) {\n            $result[] = $n\
    \ % 10;\n        }\n    }\n    return $result;\n}", "  $result = array();\n\n\
    \  foreach ($x as $i) {\n    if ($i % 2 == 0) {\n      array_push($result, $i);\n\
    \    }\n  }\n\n  return $result;\n}\n", "    $unique_digits = array();\n    foreach($x\
    \ as $key=>$val){\n        if($val % 2 != 0){\n            $unique_digits[] =\
    \ $val;\n        }\n    }\n    \n    return sort($unique_digits);\n}\n", "   \
    \ $ret = [];\n    foreach ($x as $n) {\n        foreach (str_split($n) as $k =>\
    \ $c) {\n            if ($c !== '0') {\n                $ret[] = $n;\n       \
    \         break;\n            }\n        }\n    }\n    sort($ret);\n    return\
    \ $ret;\n}\n</code>\n<|/ a tags=arrays,php,algorithm |>\n<| a tags=arrays,php,algorithm\
    \ |>\nYou can use the following function, that return all unique numbers in an\
    \ array but not in order:\n<code>", "    if (!is_array($x)) return [];\n    $result\
    \ = array();\n    foreach ($x as $el) {\n        if ($el % 2 !== 0) continue;\n\
    \        foreach (range($el / 2, 1, -1) as $k) {\n            $result[] = $el\
    \ - $k + 1;\n        }\n    }\n    return array_unique($result);\n}", "    sort($x);\n\
    \    $digits = array_count_values($x);\n    $result = array();\n    foreach ($x\
    \ as $n) {\n        $result[] = $n;\n    }\n    foreach ($digits as $k => $v)\
    \ {\n        if (($v == 0) || ($v == 2)) {\n            continue;\n        }\n\
    \        foreach ($result as $m) {\n            if ($m == 0) {\n             \
    \   $result[$k] = 0;\n                break;\n            }\n            $d =\
    \ $m % 10;\n            $t = floor($m / 10);\n            if ($t != $k) {\n  \
    \              if ($d != 0) {\n                    if ($t == $k) {\n         \
    \               break;\n                    }\n                    $result[$k]\
    \ = 0;\n                }\n                break;\n            }\n           \
    \ if ($d != $v) {\n                $result[$k] = 0;\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \n    foreach ($x as $k => $v) {\n        $k = intval($k);\n\n        if (!isset($x[$k\
    \ - 1])) {\n            $result[] = $v;\n        } else {\n            // $x[$k\
    \ - 1] is odd, so not unique (even digit)\n            $result[] = $k;\n     \
    \   }\n    }\n\n    return $result;\n}\n", "    foreach($x as $v) {\n        $y\
    \ = $v % 10;\n        if ($y > 2) {\n            continue;\n        }\n      \
    \  $z[] = $v;\n    }\n    $x = $z;\n    return $x;\n}\n</code>\n<|/ a tags=php,arrays,unique-values\
    \ |>\n<| c |>\nThis won't work: `unique_digits([15, 33, 1422, 1])` returns `[1,\
    \ 1, 15, 33]`.\n<|/ c |>\n<| c |>\n: No, it doesn't return `[1, 1, 15, 33]`.\n\
    <|/ c |>\n<| c |>\n: You are right. I've made a mistake. I've fixed the code now.\n\
    <|/ c |>\n<| c |>\n: Thanks for your comment. It has helped me a lot.\n<|/ c |>\n\
    <| a tags=php,arrays,unique-values |>\nOk, I did it. Here is the code:\n<code>\n\
    <?php\n", "    $digits = array();\n    $counts = array();\n    foreach ($x as\
    \ $i){\n        $digits[] = $i;\n        $counts[$i]++;\n    }\n    $min = array_search(min($counts),\
    \ $counts);\n    for($i = 0; $i < count($counts); $i++){\n        if($counts[$i]\
    \ == 0){\n            unset($counts[$i]);\n            unset($digits[$i]);\n \
    \       }\n    }\n    return array_diff($digits, $min);\n}\n", "\tsort($x);\n\t\
    $s = array();\n\tfor ($i = 0; $i < count($x); $i++) {\n\t\tif ($x[$i] % 2 == 0)\
    \ {\n\t\t\t$s[] = $x[$i];\n\t\t}\n\t}\n\treturn $s;\n}\n", "    sort($x, SORT_NUMERIC);\n\
    \    $result = [];\n    foreach($x as $y) {\n        if ($y % 2 == 0) {\n    \
    \        $result[] = $y;\n        }\n    }\n    return $result;\n}\n</code>\n\
    This can be done in two nested for loops. We first go through each digit of every\
    \ number and check for all the digits we already have. If we have one, we skip\
    \ this number and move to the next one. If we didn't find any, we add this number\
    \ and move to the next one:\n<code>", "  if (is_empty($x)) {\n    return [];\n\
    \  }\n\n  $digits = array_count_values($x);\n  arsort($digits);\n\n  $result =\
    \ [];\n  foreach ($x as $k => $v) {\n    if ($digits[$k] === 0) {\n      $result[]\
    \ = $k;\n    }\n  }\n\n  return $result;\n}\n\n/**\n * Return all positive integers\
    \ that doesn't have any even digit.\n * Note: Returned list should be sorted in\
    \ increasing order.\n * For example:\n * >>> unique_digits_except_last([15, 33,\
    \ 1422, 1])\n * [1, 33, 1422]\n * >>> unique_digits_except_last([152, 323, 1422,\
    \ 10])\n * []\n * @param $x\n * @return array\n */", "  $res = [];\n  foreach($x\
    \ as $v) {\n    $temp = preg_replace('/([0-9])/', '', $v);\n    $temp = '1'.$temp;\n\
    \    if(!in_array($temp, $res)) {\n      $res[] = $temp;\n    }\n  }\n  sort($res);\n\
    \  return array_unique($res);\n}\n", "  $digits = $ret = [];\n  foreach($x as\
    \ $v){\n    while($v > 0){\n      $d = $v % 10;\n      if(!isset($digits[$d]))\n\
    \        $digits[$d] = 0;\n      $digits[$d]++;\n      $v = floor($v / 10);\n\
    \    }\n  }\n  foreach($digits as $k => $v)\n    if($v > 1)\n      $ret[] = $k;\n\
    \  return $ret;\n}\n", "    return array_filter($x, function ($x) { return !is_null(preg_match('/\\\
    d/', $x));});\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI wrote this algorithm\
    \ to solve this problem, but it is not the most efficient solution.\n<code>\n\
    <?php", "  $digit_count = count($x) - 1;\n  return array_filter($x, function($n)\
    \ use ($digit_count) {\n    return strlen($n) == strlen(preg_replace('/\\d/',\
    \ '', $n));\n  }, ARRAY_FILTER_USE_BOTH);\n}", "  $x = array_map(function($y)\
    \ { return $y - 0; }, $x);\n  $y = array();\n  foreach($x as $z) {\n    $b = 0;\n\
    \    for($i = 0; $i < strlen($z); ++$i) {\n      $b = ($b << 1) + (ord($z[$i])\
    \ - ord('0'));\n    }\n    $y[$z] = $b;\n  }\n  asort($y);\n  $y = array_keys($y);\n\
    \  foreach($y as $z) {\n    $y[$z] = $z % 10;\n  }\n  return $y;\n}\n", "  $ret\
    \ = [];\n  foreach ($x as $element) {\n    // check if all digits are even\n \
    \   if ($element % 2 == 0) {\n      // remove that number\n      $x = $x - $element;\n\
    \      // add it to the list\n      $ret[] = $element;\n    }\n  }\n  return $ret;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm |>\nI did this in python\
    \ and it came out to be extremely fast:\n<code>\ndef unique_digits(xs):\n    digits\
    \ = {}\n    for x in xs:\n        if x in digits:\n            digits[x].append(x)\n\
    \        else:\n            digits[x] = [x,]\n    return filter(lambda x: len(x[1])\
    \ == 1, digits.iteritems())\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm\
    \ |>\nI have made some changes and simplified the algorithm,\n<code>\n<?php\n\
    $array = [15,33,1422,1];\nprint_r($array);\n$uniqueDigits1 = [];\n$uniqueDigits2\
    \ = [];\n\nforeach($array as $key => $value)\n{\n    $uniqueDigit1 = array_search($value,$uniqueDigits1);\n\
    \    if($uniqueDigit1 == false)\n    {\n        array_push($uniqueDigits1,$value);\n\
    \    }\n}\n\nforeach($uniqueDigits1 as $key => $value)\n{\n    $uniqueDigit2 =\
    \ array_search($value,$uniqueDigits2);\n    if($uniqueDigit2 == false)\n    {\n\
    \        array_push($uniqueDigits2,$value);\n    }\n}\n\necho '<br><br>';\nprint_r($uniqueDigits1);\n\
    echo '<br><br>';\nprint_r($uniqueDigits2);", "    $result = [];\n    foreach ($x\
    \ as $value) {\n        if ($value % 2 == 0) {\n            continue;\n      \
    \  }\n        foreach (str_split($value) as $char) {\n            if ($char !==\
    \ '0') {\n                continue;\n            }\n            $result[] = $value;\n\
    \            break;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| c |>\nThanks for your help. Can you please let me know\
    \ why you think my code is not working ? I am new to PHP. Thanks again.\n<|/ c\
    \ |>\n<| c |>\nyour code is not working because you are returning the whole array\
    \ even after getting the first element of array which is not even digit.\n<|/\
    \ c |>\n<| a dscore=0 |>\nTry this function, it works well:\n<code>", "    sort($x);\n\
    \    $result = [];\n    foreach ($x as $item) {\n        if (is_int($item) &&\
    \ $item > 0 && $item % 2 === 0) {\n            $result[] = $item;\n        }\n\
    \    }\n    return $result;\n}\n</code>\nTest it here and here\n<|/ a dscore=0\
    \ tags=arrays,php,algorithm |>\n<| c |>\nThanks, I was able to code this in javascript,\
    \ it works but not in php.\n<|/ c |>\n<| a |>\nHere is how I solved it:\n<code>\n\
    <?php", "    sort($x);\n    $ret = [];\n    foreach($x as $k=>$v)\n        if($v\
    \ & 1)\n            $ret[$k] = $v;\n    return array_values($ret);\n}\n", "  \
    \  $result = [];\n    foreach ($x as $value) {\n        $result[] = substr($value,\
    \ 0, 1);\n    }\n    return array_unique($result);\n}", "    $n = count($x);\n\
    \    \n    for($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n        \
    \    $found = false;\n            for($j = 0; $j < $n; $j++) {\n             \
    \   if ($x[$j] % 2 == 0) {\n                    $found = true;\n             \
    \       break;\n                }\n            }\n            if ($found) {\n\
    \                array_shift($x);\n            }\n        }\n    }\n    \n   \
    \ return $x;\n}\n", "    $digits = array_filter($x, function($n) {\n        return\
    \ is_integer($n) && $n % 2 === 0;\n    });\n    $result = array();\n    foreach\
    \ ($digits as $n) {\n        if (in_array($n % 10, $result)) {\n            return\
    \ array();\n        } else {\n            $result[] = $n % 10;\n        }\n  \
    \  }\n    return $result;\n}\n", "  foreach ($x as $x) {\n    $sum = 0;\n    $x--;\n\
    \    do {\n      $sum += ($x % 10) * 10 * $x;\n      $x /= 10;\n    } while ($x\
    \ > 0);\n    if ($sum % 2 === 0) {\n      return $x;\n    }\n  }\n}\n", "  $arr\
    \ = array();\n  foreach($x as $e) {\n    $str = decbin($e);\n    $len = strlen($str);\n\
    \    for($i = 0; $i < $len; $i++) {\n      if(!isset($arr[$str[$i]])) {\n    \
    \    $arr[$str[$i]] = 1;\n      } else {\n        $arr[$str[$i]] += 1;\n     \
    \ }\n    }\n  }\n  $keys = array_keys($arr);\n  sort($keys);\n  return array_diff($keys,\
    \ array_filter($keys, 'is_odd'));\n}\n", "    $ret = [];\n    foreach ($x as $num)\
    \ {\n        $count = 0;\n        foreach($ret as $val) {\n            if ($val\
    \ % 10 == 0) {\n                $count++;\n            }\n        }\n        if\
    \ ($count < 2) {\n            $ret[] = $num;\n        }\n    }\n    return $ret;\n\
    }", "    $arr = [];\n    $x_length = count($x);\n\n    // iterate over all elements\n\
    \    for($i=0; $i < $x_length; $i++) {\n        $x_digits = str_split($x[$i]);\n\
    \n        // iterate over all digits and remove any element that has even number\
    \ of digits\n        for($j=0; $j < count($x_digits)-1; $j++) {\n            if($x_digits[$j]\
    \ % 2 == 0) {\n                unset($x_digits[$j]);\n            }\n        }\n\
    \n        // add any digit that hasn't any even digit\n        if(count($x_digits)\
    \ == 0) {\n            $arr[] = $x[$i];\n        }\n    }\n\n    return $arr;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    sort($x);\n    $result =\
    \ [];\n    foreach ($x as $val) {\n        $digits = str_split($val);\n      \
    \  if (array_search(0, $digits) === false) {\n            $result[] = $val;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ so much for your answer! But it doesn't seem to work.\n\n```\n$ cat test.php\n\
    <?php\n\n$x = array( \n        152, \n        323, \n        1422, \n        10\
    \ \n    );\n```\n\n```\n$ php test.php\nPHP Fatal error:  Array sort() expects\
    \ parameter 1 to be array, integer given in test.php on line 3\nPHP Stack trace:\n\
    PHP   1. {main}() /home/myname/test.php:0\n```\n<|/ c |>\n<| c |>\nI made a mistake\
    \ in my original post.  I fixed it.  It should be fixed now.\n<|/ c |>\n<| a tags=php,algorithm\
    \ dscore=0 |>\nHere is a solution which works on PHP 5.6+\n<code>", "    $unique_digits\
    \ = array();\n    foreach ($x as $key => $val)\n        if (!is_numeric($val)\
    \ && preg_match(\"/[^\\d]/\",$val) === 0)\n            $unique_digits[] = $val;\n\
    \    $unique_digits = array_unique($unique_digits);\n    sort($unique_digits);\n\
    \    return $unique_digits;\n}\n", "    $ret = [];\n    foreach($x as $k=>$v)\
    \ {\n        $n = 0;\n        $temp = $v;\n        while($temp >> 0) {\n     \
    \       $n++;\n            $temp %= 10;\n        }\n        if ($n > 0) {\n  \
    \          $ret[] = $v;\n        }\n    }\n    return $ret;\n}\n", "\tsort($x);\n\
    \t$result = array();\n\tfor ($i = 0; $i < count($x); $i++) {\n\t\tif (is_even($x[$i]))\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\t$result[] = $x[$i];\n\t}\n\treturn $result;\n\
    }\n", "    $n = count($x);\n    for ($i = 0; $i < $n; $i++) {\n        $sum =\
    \ 0;\n        $m = $i;\n        for ($j = ++$m; $j < $n; $j++) {\n           \
    \ $sum += $x[$m]*pow(10, count($x)-$m-$j);\n        }\n        if ($sum % 2 !=\
    \ 0) {\n            $ret[] = $x[$i];\n        }\n    }\n    return $ret;\n}\n\
    </code>\nI realized that if you just want the sum of unique digits, you don't\
    \ need to do the sum of all the digits. So my above code can be reduced to:\n\
    <code>", "\tsort($x);\n\t$result = [];\n\tforeach ($x as $x_value) {\n\t\t$sum\
    \ = 0;\n\t\twhile ($x_value > 0) {\n\t\t\t$sum += floor($x_value % 10);\n\t\t\t\
    $x_value /= 10;\n\t\t}\n\t\t$result[$sum]++;\n\t}\n\treturn array_filter(array_keys($result));\n\
    }", "    $result = [];\n    $sum = $x;\n    for ($i = 0; $i < count($x); $i++)\
    \ {\n        $j = 0;\n        do {\n            $j++;\n            $sum -= $x[$i]\
    \ * $j;\n        } while ($sum >= 10);\n        $result[$i] = $x[$i];\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThe trick\
    \ is to use the modulus operator to keep track of how many times you've seen a\
    \ given digit. \n<code>\n$input = [1, 12, 24, 3, 44, 6, 556, 789];\n", "    $array\
    \ = array();\n    for($i = 0; $i < count($x); $i++) {\n        $array[$i][] =\
    \ $x[$i];\n    }\n    \n    $result = array();\n    foreach($array as $element)\
    \ {\n        if(array_key_exists(0, $element)) {\n            $result[] = $element[0];\n\
    \        }\n    }\n    \n    return $result;\n}", "    $temp = array_count_values($x);\n\
    \    return array_keys($temp, $temp[1] === 0);\n}", "    $result = array();\n\
    \    foreach($x as $number) {\n        $result[] = $number;\n    }\n    array_multisort($result,\
    \ SORT_DESC, $x);\n    return $x;\n}\n</code>\n<|/ a tags=php,arrays,filter,algorithm,sorting\
    \ dscore=0 |>\n<| c |>\nThank you, but I need to use the function unique_digits\
    \ as a filter instead of sorting.\n<|/ c |>\n<| c |>\nDo you have any constraint\
    \ on it? What kind of array is it?\n<|/ c |>\n<| c |>\nIt can be any array, from\
    \ 1 to infinite. Not always integers though.\n<|/ c |>\n<| c |>\nOh yes, it's\
    \ going to be a bit complicated, I will post my answer.\n<|/ c |>\n<| c |>\nYou\
    \ don't need recursion in this case, it is just some kind of list comprehension.\n\
    <|/ c |>\n<| a dscore=0 |>\nI came up with a similar solution to yours, but I\
    \ chose to make it a recursive function instead of using a loop. \n<code>", " \
    \   $result = [];\n    foreach ($x as $y) {\n        foreach (str_split($y) as\
    \ $digit) {\n            if ($digit == 1) {\n                $result[] = $y;\n\
    \            }\n        }\n    }\n    return sort($result);\n}", "    $unique_digits\
    \ = [];\n    foreach ($x as $y) {\n        $is_unique = true;\n        foreach\
    \ ($unique_digits as $z) {\n            if ($z !== false && $z !== $y) {\n   \
    \             $is_unique = false;\n                break;\n            }\n   \
    \     }\n        if ($is_unique) {\n            $unique_digits[] = $y;\n     \
    \   }\n    }\n    return $unique_digits;\n}\n", "    if ( is_null($x) ) {\n  \
    \      return array();\n    }\n\n    if ( count($x) == 0 ) {\n        return array();\n\
    \    }\n\n    $result = array();\n\n    $odd = array_fill(0, count($x), true);\n\
    \    $even = array_fill(0, count($x), false);\n\n    foreach ($x as $i) {\n  \
    \      if ( $i & 1 ) {\n            $even[$i] = true;\n        } else {\n    \
    \        $odd[$i] = true;\n        }\n    }\n\n    foreach ($odd as $i) {\n  \
    \      if ( !$even[$i] ) {\n            $result[] = $i;\n        }\n    }\n\n\
    \    return $result;\n}\n\n/*\n * Given a list of positive integers, return a\
    \ list of all prime numbers.\n * Each element in the output should appear only\
    \ once in the final list.\n * Example:\n * >>> prime_numbers([1, 2, 3, 4, 5, 6])\n\
    \ * [1, 3, 5, 17]\n * >>> prime_numbers([1, 11])\n * [1, 11]\n */", "    $digits\
    \ = array();\n    foreach ($x as $digit) {\n        $digits[$digit] = 1;\n   \
    \ }\n    $return = array();\n    foreach ($x as $digit) {\n        if (isset($digits[$digit\
    \ % 10])) {\n            $return[] = $digit;\n        }\n    }\n    sort($return);\n\
    \    return $return;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nOne can use array_walk\
    \ here, which iterates over the array and stores the indexes of non-even digits\
    \ in a new array :\n<code>\n$input = array(15, 33, 1422, 1);\n$evens = array_walk(\n\
    \    $input,\n    function($a) use (&$evens){\n        $evens[$a % 10] = true;\n\
    \    },\n    array_fill(0, count($input), false)\n);\n\nvar_dump($evens);\n</code>\n\
    Which will output :\n<code>\narray(3) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n\
    \  [2]=>\n  bool(false)\n}\n</code>\n<|/ a tags=php dscore=2 |>\n<| a tags=php\
    \ dscore=1 |>\n<code>\n<?php\n", "    $digits = [];\n    foreach ($x as $xItem)\
    \ {\n        foreach (str_split($xItem) as $xDig) {\n            if ($xDig !==\
    \ strval($xDig % 10)) {\n                $digits[] = $xItem;\n            }\n\
    \        }\n    }\n    return $digits;\n}\n</code>\n<|/ a tags=php,sorting,algorithm\
    \ |>\n<| a tags=php,sorting,algorithm |>\nThe fastest way would be:\n<code>",
  "    if (count($x) === 0)\n        return array();\n    $uniques = array();\n  \
    \  $last_key = array_pop($x);\n    foreach ($x as $y) {\n        if ($y % 2 ===\
    \ 0) {\n            $uniques[] = $y;\n        } else {\n            $uniques[]\
    \ = $last_key;\n        }\n        $last_key = $y;\n    }\n    return $uniques;\n\
    }\n</code>\n<|/ a dscore=0 tags=php |>\n<| c |>\nThis fails for `unique_digits([12])`\
    \ - `12` should appear before `1`, not after `1`.\n<|/ c |>\n<| c |>\nThanks.\
    \ Fixed.\n<|/ c |>\n<| c |>\nAlso note that `unique_digits([5])` returns `[5]`\
    \ not `[5]` because 5 is divisible by 2.\n<|/ c |>\n<| c |>\nYou are right, thanks\
    \ for catching it. Fixed.\n<|/ c |>\n<| a tags=php |>\nA solution that works with\
    \ any type of array and does not use array_unique but array_count_values as suggested\
    \ by:\n<code>", "  $r = [];\n  foreach($x as $key => $val) {\n    // loop through\
    \ each digit of number.\n    for($i = 0; $i < strlen($val); $i++) {\n      //\
    \ loop through each position of number.\n      $d = $val[$i];\n      // check\
    \ if the digit is even.\n      if ($d % 2 !== 0) {\n        // if not, add this\
    \ digit to result array and remove it from the original number.\n        $r[$key][]\
    \ = $d;\n        unset($x[$key][$i]);\n      }\n    }\n  }\n  return $x;\n}\n",
  "    $r = [];\n    foreach($x as $e) {\n        $r[] = intval($e);\n    }\n    $ret\
    \ = array_merge($r);\n    sort($ret);\n    return $ret;\n}", "  $n = array_count_values($x);\n\
    \  $result = array();\n  foreach ($n as $key => $val) {\n    if ($val % 2 == 0)\
    \ {\n      $result[] = $key;\n    }\n  }\n  return array_reverse($result);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI ran your script, it gives me this output:\
    \ \n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\narray(1) {\n  [0]=>\n\
    \  int(15)\n}\n<|/ c |>\n<| c |>\nPlease don't post code-only answers. Please\
    \ add an explanation of what you did and why you did it that way.\n<|/ c |>\n\
    <| c |>\n, It was a little tricky since I didn't know about the array_count_values\
    \ function. I edited the code a bit.\n<|/ c |>\n<| a dscore=0 |>\nHere is another\
    \ solution which does not use array_count_values() and can handle very big arrays\
    \ (tested up to 500 000 elements):\n<code>", "\t$unique = [];\n\tfor ($i = 0;\
    \ $i < count($x); $i++) {\n\t\t$num = array_keys($x, $x[$i]);\n\t\t$digits = str_split($x[$i]);\n\
    \t\tfor ($j = 0; $j < count($num); $j++) {\n\t\t\tif (!in_array($digits[$j], $unique))\
    \ {\n\t\t\t\t$unique[] = $digits[$j];\n\t\t\t}\n\t\t}\n\t}\n\tsort($unique);\n\
    \treturn $unique;\n}\n", "\t$nums = [];\n\tforeach ($x as $n) {\n\t\tif (strlen($n)\
    \ > 0) {\n\t\t\t$nums[] = $n;\n\t\t}\n\t}\n\tasort($nums);\n\t$evens = [];\n\t\
    foreach ($nums as $n) {\n\t\t$digit = strlen($n) - 1;\n\t\tfor ($i = 0; $i <=\
    \ $digit; $i++) {\n\t\t\tif ($n % 2 == 0) {\n\t\t\t\t$evens[] = $n;\n\t\t\t}\n\
    \t\t\t$n = $n / 10;\n\t\t}\n\t}\n\treturn $evens;\n}\n", "    $result = [];\n\
    \    foreach ($x as $e) {\n        if ($e % 2 === 0)\n            continue;\n\
    \        $result[] = $e;\n    }\n    sort($result);\n    return $result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIf you're looking to just get the\
    \ unique digits you can just do something like this:\n<code>\n$input = 'abc0123';\n\
    $output = array_unique( str_split( $input ) );\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nNot really. OP wants to remove numbers which have even digits.\n\
    <|/ c |>\n<| a dscore=0 tags=php,arrays,string |>\nYou can use the power of regular\
    \ expressions \n<code>\n$string = \"abc0123\";\npreg_match_all(\"/(?=[^0]+0)/\"\
    ,$string,$matches);\n$unique = array_unique($matches[0]);\n</code>\n<|/ a |>\n\
    <| a tags=php,arrays,string |>\nHere is a function that does the job without using\
    \ regex.\n<code>", "    $ret = [];\n    foreach($x as $x_val) {\n        foreach($x\
    \ as $x_val_2) {\n            if ($x_val != $x_val_2 && $x_val % 2 == 0) {\n \
    \               $ret[] = $x_val;\n            }\n        }\n    }\n    return\
    \ sort($ret);\n}\n", "    $r = array();\n    foreach($x as $k=>$v) {\n       \
    \ $r[$v] = $k;\n    }\n    ksort($r);\n    $r = array_reverse($r);\n    return\
    \ $r;\n}\n", "    $r = [];\n    for ($y = 0; $y < count($x); $y++) {\n       \
    \ for ($z = 0; $z < count($r); $z++) {\n            if ($r[$z] % 2 != 0 && $y%2\
    \ == 0) {\n                $r[$z] = $r[$z] + $x[$y];\n            }\n        }\n\
    \    }\n    return $r;\n}\n", "  $result = array();\n  $n = count($x);\n  \n \
    \ for ($i = 0; $i < $n; ++$i) {\n    $a = $x[$i];\n    \n    if ($a >= 10) {\n\
    \      if ($a % 2 == 0) {\n        $b = $a / 10;\n        if ($b % 2 != 0) {\n\
    \          $result[] = $b;\n        }\n      }\n    }\n  }\n  \n  return $result;\n\
    }\n", "    $newList = [];\n    foreach ($x as $e) {\n        $d = $e%10;\n   \
    \     if($d == 0) {\n            continue 2; // skip 0\n        }\n        $newList[]\
    \ = $e;\n    }\n    return $newList;\n}", "    return array_unique($x, SORT_NUMERIC);\n\
    }\n", "  if (empty($x)) {\n    return [];\n  }\n  $uniques = [];\n  $unique_digit\
    \ = false;\n  $size = sizeof($x);\n  for($i = 0; $i < $size; $i++) {\n    if ($x[$i]\
    \ % 2 === 0) {\n      $uniques[$i] = $x[$i];\n      $unique_digit = true;\n  \
    \  } else {\n      if (!$unique_digit) {\n        $uniques[$i] = $x[$i];\n   \
    \   }\n    }\n  }\n  return $uniques;\n}\n", "    $result = [];\n    foreach($x\
    \ as $val) {\n        $digit = intval($val / 10); \n        if($val > 9) $digit++;\n\
    \        if(!isset($result[$digit])) $result[$digit] = $val;\n    }\n    return\
    \ $result;\n}", "  $result = [];\n  $digits = array_map('intval', str_split($x));\n\
    \  foreach ($x as $key => $value) {\n    if ($value != 0) {\n      $digit = array_search($value,\
    \ $digits);\n      if ($digit === false) {\n        $result[] = $value;\n    \
    \    unset($digits[$key]);\n      }\n    }\n  }\n  return $result;\n}\n", "  \
    \  if (count($x) == 1) {\n        return $x;\n    }\n    $ret = [];\n    $digits_set\
    \ = new SplObjectStorage();\n    foreach ($x as $x_val) {\n        if (!is_integer($x_val))\
    \ {\n            throw new InvalidArgumentException('The argument should be an\
    \ array.');\n        }\n        if ($x_val < 0) {\n            throw new InvalidArgumentException('The\
    \ argument should not be negative.');\n        }\n        $x_digits = str_split($x_val,\
    \ 1);\n        foreach ($x_digits as $x_digit) {\n            if ($x_digit ==\
    \ '0') {\n                continue;\n            }\n            $found_digit =\
    \ $digits_set->contains($x_digit);\n            if ($found_digit == true) {\n\
    \                continue;\n            }\n            $found_digit = true;\n\
    \            $ret[] = $x_val;\n            $digits_set->offsetSet($x_digit, true);\n\
    \        }\n    }\n    return $ret;\n}\n", "    foreach($x as $i => $e) {\n  \
    \      if($i % 2 === 0) {\n            unset($x[$i]);\n        }\n    }\n    return\
    \ array_unique($x);\n}\n", "  $result = [];\n  for($i = 0; $i < count($x); $i++)\
    \ {\n    for($j = 1; $j < 10; $j++) {\n      $result = array_merge($result, array_slice($x,\
    \ $i, $j));\n    }\n  }\n  $result = array_unique($result);\n  return $result;\n\
    }\n", "  // Write your code here\n  $arr=array();\n  foreach($x as $y){\n    $arr[]=$y;\n\
    \  }\n  foreach($arr as $val){\n    if($val % 2==0){\n      continue;\n    }\n\
    \    $c=1;\n    while($val%10==0){\n      $c++;\n      $val/=10;\n    }\n    if($c==$val){\n\
    \      if(in_array($val,$arr)){\n        continue;\n      }\n    }\n    array_push($arr,$val);\n\
    \  }\n  ksort($arr);\n  return $arr;\n}\n", "    if (empty($x)) {\n        return\
    \ array();\n    }\n\n    // sort array before filtering\n    sort($x);\n    //\
    \ filter only odd elements\n    return array_filter(\n        $x,\n        function\
    \ ($y) { return $y % 2 === 0; });\n}\n", "    sort($x, SORT_NUMERIC);\n    $even\
    \ = true;\n    $digits = array();\n    foreach ($x as $x) {\n        $y = $x;\n\
    \        while ($y > 0) {\n            $digits[] = $y % 10;\n            $y =\
    \ floor($y / 10);\n        }\n        if (!$even) {\n            $digits[] = $x;\n\
    \        }\n        $even = !$even;\n    }\n    return array_filter($digits, function\
    \ ($digit) {\n        return $digit === 0;\n    });\n}\n", "    $x_count = array_count_values($x);\n\
    \    $result = array();\n    foreach ($x_count as $key => $val) {\n        if($val\
    \ % 2 != 0) {\n            $result[] = $key;\n        }\n    }\n    return $result;\n\
    }", "    $result = [];\n    $len = count($x);\n    \n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $rem = $x[$i];\n        $even = true;\n        for ($j = $i\
    \ + 1; $j < $len; $j++) {\n            $rem = $x[$j] - $rem;\n            if ($rem\
    \ > 9) {\n                $rem = $rem % 10;\n            } else {\n          \
    \      $even = false;\n            }\n        }\n        if ($even) {\n      \
    \      $result[] = $x[$i];\n        }\n    }\n    \n    return $result;\n}\n",
  "    // write your code here\n    $counter = array();\n    foreach($x as $y){\n\
    \        if($y % 2 != 0){\n            $counter[$y]++;\n        }\n    }\n   \
    \ $result = array();\n    foreach($x as $y){\n        if($counter[$y] == 1){\n\
    \            $result[] = $y;\n        }\n    }\n    return $result;\n}", "  $result\
    \ = array();\n  foreach ($x as $number) {\n    if ($number % 2 == 0) {\n     \
    \ continue;\n    }\n    for ($i = 0; $i < 9; $i++) {\n      if ($number % 10 ==\
    \ $i) {\n        $result[] = $number;\n        break;\n      }\n    }\n  }\n \
    \ sort($result);\n  return $result;\n}\n", "    $digits = array_count_values($x);\n\
    \    $result = [];\n    foreach ($x as $k => $v) {\n        if ($v % 2 != 0) {\n\
    \            $result[] = $v;\n        }\n    }\n    asort($result);\n    return\
    \ array_slice($result, 0, -1);\n}\n", "    $ret = [];\n    foreach ($x as $x_item)\
    \ {\n        $x_item = abs($x_item);\n        foreach (range(($x_item/10), 10)\
    \ as $key_x) {\n            if ($x_item % $key_x == 0) {\n                $ret[]\
    \ = $key_x;\n                break;\n            }\n        }\n    }\n    return\
    \ $ret;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=algorithm,arrays,php\
    \ |>\nHere's my solution in Python. I'm sure you can convert this to PHP. \n<code>\n\
    def digits_not_in_arr(arr, digits):\n    digits_not_in_arr = []\n    for d in\
    \ digits:\n        if not any(x in d for x in range(10)):\n            digits_not_in_arr.append(d)\n\
    \    return digits_not_in_arr\n\nprint(digits_not_in_arr([15, 33, 1422, 1], [1]))\n\
    </code>\n<|/ a |>\n<| c |>\nThank you, this is very close to what I want. I need\
    \ to sort the array in increasing order, but this works well for me in Python.\
    \ Thank you!\n<|/ c |>\n<| c |>\nSorted the array in increasing order:  `digits_not_in_arr\
    \ = [d for d in digits_not_in_arr if d not in sorted(digits_not_in_arr)]`\n<|/\
    \ c |>\n<| c |>\nYes, sorry about that - the comment wasn't supposed to do anything\
    \ but be an improvement.\n<|/ c |>\n<| a tags=algorithm,arrays,php dscore=0 |>\n\
    A simple and fast solution would be:\n<code>\n<?php\n$arr = [15, 33, 1422, 1];\n\
    $digits = [1];\n\n$temp = array_intersect($digits, $arr);\nif (!empty($temp))\
    \ {\n    $digits = array_diff($temp, $arr);\n}\nvar_dump($digits);\n</code>\n\
    <|/ a |>\n<| c |>\nThis will not work if the first element is `[10]`, which it\
    \ would be in OP's question.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  sort($x);\n\
    \  $result = [];\n  foreach($x as $y) {\n    if(!($y & 1)) { continue; }\n   \
    \ if($y == 0) {\n      $result[] = $y;\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis was the first thing I tried, but\
    \ it doesn't work. The problem is that the digits that appear first come first\
    \ in the result list, so if I use `unique_digits([152, 323, 1422, 10])`, I get\
    \ `[1, 10, 15, 33]` instead of `[1, 15, 10, 33]`\n<|/ c |>\n<| c |>\nAh I see\
    \ - I misread the question. I thought you wanted to remove duplicates but only\
    \ if the duplicates were adjacent to each other. Thanks.\n<|/ c |>\n<| a |>\n\
    <code>", "   $result = [];\n   $len = count($x);\n   for($i = 0; $i < $len; $i++)\
    \ {\n       for($j = 0; $j < $len; $j++) {\n           if($i == $j) continue;\n\
    \           if($x[$i] % $x[$j] == 0) {\n               $x[$i] = $x[$i] / $x[$j];\n\
    \               $result[] = $x[$i];\n               break;\n           }\n   \
    \    }\n   }\n   return $result;\n}\n", "    $ret = [];\n    foreach($x as $y)\
    \ {\n        foreach($ret as $d) {\n            if($y % $d === 0) {\n        \
    \        $ret[] = $y;\n                break;\n            }\n        }\n    }\n\
    \    return $ret;\n}\n</code>\n<|/ a tags=php,algorithm,arrays dscore=0 |>\n<|\
    \ a |>\nIt can be done this way:\n\nSort array using sort() function\nGet first\
    \ digit from sorted array using array_shift() function\nRemove that digit from\
    \ array using array_diff() function\nLoop through array and put back all values\
    \ that doesn't have that digit\n\nHere is code:\n<code>", "    \n}", "    $result\
    \ = array();\n    foreach($x as $key => $val) {\n        $result[$key] = $val;\n\
    \    }\n    return $result;\n}\n", "    if (count($x) == 0) return $x;\n    $digits\
    \ = array();\n    foreach ($x as $xx)\n        $digits[$xx%10]++;\n    $d = array();\n\
    \    foreach ($digits as $xx)\n        if ($xx < 1)\n            $d[] = $xx;\n\
    \    return array_unique($d);\n}\n", "    $res = array();\n    foreach ($x as\
    \ $y) {\n        while ($y != 0) {\n            $d = ($y % 10);\n            $res\
    \ = array_merge($res, range($d - 1, $d));\n            $y /= 10;\n        }\n\
    \    }\n    $res = array_unique($res);\n    sort($res, SORT_NUMERIC);\n    return\
    \ $res;\n}\n", "    sort($x);\n    $result = [];\n    foreach ($x as $v) {\n \
    \       $n = intval($v);\n        $k = count($x) - 1;\n        while ($k > 0)\
    \ {\n            $d = $x[$k];\n            if ($n <= $d) {\n                break;\n\
    \            }\n            $result[] = $d;\n            $k--;\n        }\n  \
    \  }\n    return $result;\n}\n", "  $results = [];\n  foreach ($x as $k => $v)\
    \ {\n    // remove all the numbers that don't include even digits\n    if (!($v\
    \ % 2)) {\n      unset($x[$k]);\n    }\n  }\n  $x = array_unique($x);\n  foreach\
    \ ($x as $k => $v) {\n    if ($v % 2 == 0) {\n      $results[] = $v;\n    }\n\
    \  }\n  return $results;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThat is the\
    \ correct answer.  I just found another way to do it in Python (see the other\
    \ answer) but yours is a much better solution.  Thank you.\n<|/ c |>\n<| c |>\n\
    Just saw your other answer and yes, your approach is better.\n<|/ c |>\n<| c |>\n\
    : In case this approach is helpful to you, can you please accept the answer?\n\
    <|/ c |>\n<| a tags=php,algorithm |>\nYou could try this using array_unique():\n\
    <code>", "    $digits = array();\n    foreach($x as $key => $value) {\n      \
    \  foreach($x as $key2 => $value2) {\n            if ($key == $key2) {\n     \
    \           continue;\n            }\n            if (is_int($value) && is_int($value2))\
    \ {\n                $digits[] = $value;\n            }\n        }\n    }\n  \
    \  return $digits;\n}\n", "    $res = array();\n    foreach($x as $e) {\n    \
    \    $res[] = $e;\n    }\n    usort($res, 'sort_by_digit');\n    return $res;\n\
    }", "    return array_reduce($x, function($acc, $el) {\n        $digits = str_split($el);\n\
    \        $count  = count($digits);\n        \n        return array_merge($acc,\
    \ $digits ? array_fill(0, $count, $el) : []);\n    }, []);\n}\n", "    $result\
    \ = [];\n    foreach($x as $v) {\n        $v = str_replace($v, \"\", $v);\n  \
    \      if(count($v) > 0) {\n            $result[] = $v;\n        }\n    }\n  \
    \  sort($result);\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\n`function\
    \ unique_digits($x) {\n    $result = array_filter($x, function($n) { return strlen($n)\
    \ > 0; });\n    sort($result);\n    return $result;\n}`\n<|/ c |>\n<| c |>\n-\
    \ What happened to `str_replace()` when all I needed was `count()`? What does\
    \ `strlen()` do?\n<|/ c |>\n<| c |>\n`count($v)` is the number of elements that\
    \ `$v` holds. `strlen()` is how you find the length of a string, whether it's\
    \ numeric, alphabet, etc.\n<|/ c |>\n<| c |>\n- Ah I see! Thanks.\n<|/ c |>\n\
    <| c |>\nThis is an example where the callback function should return boolean.\
    \ http://php.net/manual/en/function.array-filter.php#example-4417\n<|/ c |>\n\
    <| a |>\nYou would want to use array_filter():\n<code>", "  $sorted = array_map('intval',\
    \ array_unique($x));\n  $sorted = array_values($sorted);\n  return $sorted;\n\
    }\n", "   $return = [];\n   \n   foreach($x as $y){\n      if($y > 0){\n     \
    \    $digit = str_pad($y, 2, \"0\", STR_PAD_LEFT);\n         $return[] = $digit;\n\
    \      }\n   }\n   \n   return $return;\n}\n", "  $result = [];\n  foreach ($x\
    \ as $x) {\n    if ($x % 2 == 0) {\n      $result[] = $x;\n    }\n  }\n  return\
    \ $result;\n}\n", "    // make an array\n    $arr = array_map(function ($value)\
    \ {\n        return str_pad($value, 2, '0', STR_PAD_LEFT);\n    }, $x);\n    //\
    \ find unique digit\n    $result = array_unique($arr);\n    // sort the unique\
    \ digit\n    sort($result);\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "\t$unique_digits = $x = array_reverse($x);\n\
    \tforeach ($x as $key => $value) {\n\t\t$unique_digits[] = $value;\n\t\t$x[$key]\
    \  = floor($value / 10);\n\t\t$x[$key] -= $x[$key] * 10;\n\t}\n\tksort($x);\n\t\
    return $x;\n}\n", "    $n = array_map('intval', str_split($x));\n    foreach ($n\
    \ as $key => $value) {\n        if ($value%2 == 0) unset($n[$key]);\n    }\n \
    \   return $n;\n}\n", "    $res = [];\n    foreach ($x as $e) {\n        $d =\
    \ $e % 10;\n        if (!isset($res[$d])) {\n            $res[$d] = 1;\n     \
    \   } else {\n            unset($res[$d]);\n        }\n    }\n    $r = array();\n\
    \    foreach ($res as $k => $v) {\n        if ($v == 1) {\n            $r[] =\
    \ $k;\n        }\n    }\n    return $r;\n}\n", "  $result = array();\n  foreach\
    \ ($x as $key => $val) {\n    $result[$key] = $val % 10;\n  }\n  return array_count_values($result);\n\
    }\n", "    if (empty($x)) {\n        return [];\n    }\n    $result = array();\n\
    \    foreach ($x as $num) {\n        if ($num % 2 == 0) {\n            $result[]\
    \ = $num;\n        }\n    }\n    return $result;\n}\n", "    $res = [];\n    $i\
    \ = 0;\n    foreach ($x as $xVal) {\n        if ($xVal%2 != 0) {\n           \
    \ $res[$i] = $xVal;\n            $i++;\n        }\n    }\n    return array_filter($res);\n\
    }", "    if (!is_array($x)) {\n        return false;\n    }\n\n    $unique_digit\
    \ = array();\n    $unique_digits = array();\n    $length_count = count($x);\n\
    \    for ($i = 0; $i < $length_count; $i++) {\n        $value = $x[$i];\n    \
    \    $count = 1;\n        for ($j = $i + 1; $j < $length_count; $j++) {\n    \
    \        if ($x [$j] != $value) {\n                ++$count;\n            }\n\
    \        }\n\n        if ($count == 2) {\n            $unique_digit [] = $value;\n\
    \        } else {\n            $unique_digits [] = $value;\n        }\n    }\n\
    \n    return $unique_digits;\n}", "    sort($x);\n    $out = array();\n    foreach\
    \ ($x as $key => $val) {\n        if ($val % 2 == 0) {\n            if (isset($out[$val]))\
    \ $out[$val]++;\n            else $out[$val] = 1;\n        }\n    }\n    ksort($out);\n\
    \    return $out;\n}\n", "    $d = array_count_values($x);\n    return array_filter($x,\
    \ function ($y) use ($d) {\n        return !isset($d[$y]); \n    });\n}\n", " \
    \   $ans = array();\n    foreach ($x as $k => $v) {\n        $is_even = is_integer($v\
    \ % 2);\n        if (!$is_even) {\n            $ans[] = $v;\n        }\n    }\n\
    \    return $ans;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a really nice solution.\
    \ However, the answer from Hafeez does not take into account the fact that the\
    \ array is already sorted, so his code is faster. But for my personal purpose,\
    \ Hafeez's answer should be enough. Thank you anyway!\n<|/ c |>\n<| c |>\nYeah,\
    \ that's true. But it seems that Hafeez's code uses some tricks that we haven't\
    \ covered in the book yet. And that's why I used this one instead of Hafeez's\
    \ one.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using a stack. \n<code>",
  "\t$temp = array_fill_keys(range(9, 0), 0);\n\tforeach ($x as $item) {\n\t\t$key\
    \ = array_search($item, $temp);\n\t\tif ($key !== false) {\n\t\t\tunset($temp[$key]);\n\
    \t\t}\n\t}\n\t$return = array_keys($temp);\n\tsort($return);\n\treturn $return;\n\
    }\n", "\t$result = [];\n\tforeach ($x as $key => $value) {\n\t\t$count = count(array_filter($x,\
    \ 'strlen'));\n\t\t$result[] = $value;\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n", "    foreach($x as $key=>$val) {\n        $y = $val % 10;\n        if($y\
    \ == 0) {\n            unset($x[$key]);\n        }\n    }\n    return $x;\n}\n\
    </code>\n<|/ a tags=php,algorithm,arrays dscore=0 |>\n<| c |>\nThanks mate! I\
    \ really appreciate it!\n<|/ c |>\n<| c |>\nYou are welcome. I see that you have\
    \ not accepted any answers to your questions yet. Please see [What should I do\
    \ when someone answers my question?](https://stackoverflow.com/help/someone-answers)\n\
    <|/ c |>\n<| a dscore=0 |>\nThis should do the trick:\n<code>\n$array = array(15,\
    \ 33, 1422, 10);\nsort($array);\n$result = array_filter($array, function($v){\n\
    \    return $v % 10 == 0;\n});\n</code>\n<|/ a tags=php,algorithm,arrays |>\n\
    <| a dscore=0 |>\nHere is a simple way with a single loop, using a boolean flag.\n\
    <code>\n$arr = [15, 33, 1422, 10];\n", "\t$digits = array();\n\t$count = 0;\n\t\
    foreach ($x as $key => $val) {\n\t\twhile ($val % 2 != 0 && $count < $val) {\n\
    \t\t\t$digits[] = $key;\n\t\t\t$count++;\n\t\t}\n\t}\n\t$ret = array();\n\tforeach\
    \ ($x as $key => $val) {\n\t\tif (in_array($key, $digits)) {\n\t\t\t$ret[] = $key;\n\
    \t\t}\n\t}\n\treturn $ret;\n}\n", "    $arr = array();\n    foreach($x as $e)\
    \ {\n        $key = array_search($e, range(1, 9));\n        if($key == FALSE)\n\
    \            $arr[] = $e;\n    }\n    return $arr;\n}\n", "    return array_filter($x,\
    \ function($v) {\n        return !is_int($v) && preg_match('/^\\d+$/', $v) &&\
    \ $v % 2 == 0;\n    }, ARRAY_FILTER_USE_BOTH);\n}", "    $x_array = array_map(function($y)\
    \ {\n        return $y;\n    }, $x);\n    $x_array = array_filter($x_array, 'is_int');\n\
    \n    sort($x_array);\n\n    $counter = 0;\n    $result = array();\n    foreach($x_array\
    \ as $y) {\n        $result[$counter] = $y;\n        $counter += $y;\n    }\n\
    \    return $result;\n}\n\n$x = [15, 33, 1422, 1];\n$y = unique_digits($x);\n\
    print_r($y);", "    $x = array_reverse($x);\n    $unique_digits = array();\n \
    \   foreach ($x as $key => $value) {\n        if ($value % 2 == 0) {\n       \
    \     $unique_digits[$value] = $value;\n        }\n    }\n    arsort($unique_digits);\n\
    \    $unique_digits = array_keys($unique_digits);\n    $unique_digits = array_values($unique_digits);\n\
    \    return $unique_digits;\n}\n", "    $a = array();\n    foreach ($x as $e)\
    \ {\n        $temp = str_split($e);\n        $a = array_merge($a, array_diff($temp,\
    \ array_filter($temp, 'is_int')));\n    }\n    return $a;\n}", "  if (empty($x))\
    \ {\n    return [];\n  }\n\n  $nums = array_map(function ($item) {\n    return\
    \ (int)$item;\n  }, $x);\n  $result = array();\n  foreach ($nums as $key => $num)\
    \ {\n    $result[$key] = (bool)($num % 2 === 0);\n  }\n  return array_filter(\n\
    \      array_keys($result),\n      function ($key) use ($nums) {\n        return\
    \ !in_array($nums[$key], $result);\n      });\n}\n\n/**\n * Return the smallest\
    \ number with n digits.\n * Note: The returned number should be in increasing\
    \ order\n */", "  $x = sort($x);\n  $result = [];\n  foreach ($x as $val) {\n\
    \    if ($val % 2 === 0) {\n      continue;\n    }\n    $result[] = $val;\n  }\n\
    \  return $result;\n}\n", "    sort($x);\n    $out = array();\n    foreach($x\
    \ as $el) {\n        $el = intval($el);\n        if($el & 1)\n            $out[]\
    \ = $el;\n    }\n    return $out;\n}\n", "  $result = array();\n  $odd = array();\n\
    \n  foreach($x as $num) {\n    if($num % 2 != 0) {\n      array_push($odd, $num);\n\
    \    } else {\n      $num_str = str_pad($num, 0, STR_PAD_LEFT);\n      $num2 =\
    \ array_search(substr($num_str, -1, 1), $odd);\n\n      if($num2 !== FALSE) {\n\
    \        array_push($result, $num);\n      }\n    }\n  }\n  return $result;\n\
    }\n\n$digits = unique_digits([15, 33, 1422, 1]);\necho \"<pre>\";\nprint_r($digits);\n\
    echo \"</pre>\";", "  $output = [];\n  foreach($x as $a) {\n    if($a % 2 ===\
    \ 0) {\n      $output[] = $a;\n    }\n  }\n  return $output;\n}", "    $sorted_x\
    \ = sort($x);\n    $ans = [];\n    foreach ($sorted_x as $v) {\n        $n = 0;\n\
    \        foreach (str_split($v) as $s) {\n            if ($s != '0') {\n     \
    \           $n++;\n            }\n        }\n        if ($n == 0) {\n        \
    \    $ans[] = $v;\n        }\n    }\n    return $ans;\n}\n", "    $digits = array();\n\
    \    $size = count($x);\n    for ($i = 0; $i < $size; ++$i) {\n        $digits[$x[$i]]\
    \ = $x[$i];\n    }\n    asort($digits);\n    $digits = array_keys($digits);\n\
    \    return array_unique($digits);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ tags=php |>\n<code>\n<?php\n$numbers=array(\"15\",\"33\",\"1422\",\"1\");\n\
    print_r($numbers);\nprint_r(unique_digits($numbers));\n", "    $digits = [];\n\
    \    foreach($x as $xvalue) {\n        $digits[$xvalue] = isset($digits[$xvalue])?$digits[$xvalue]+1:1;\n\
    \    }\n    return array_filter($digits, function($value) {\n        return $value%2\
    \ === 0;\n    });\n}", "    $digits = array();\n    foreach ($x as $n) {\n   \
    \     $digits[$n % 10] = true;\n    }\n    $result = array();\n    foreach ($digits\
    \ as $d) {\n        if ($d === true) {\n            $result[] = $d;\n        }\n\
    \    }\n    return $result;\n}\n", "\t$array = array();\n\tforeach ($x as $i)\
    \ {\n\t\t$d = intval($i);\n\t\tif ($d > 0 && $d % 2 == 0) {\n\t\t\t$array[] =\
    \ $i;\n\t\t}\n\t}\n\treturn $array;\n}\n", "    $seen = array();\n    $ret = [];\n\
    \    foreach($x as $num) {\n        $digits = str_split($num);\n        foreach($digits\
    \ as $digit) {\n            if(in_array($digit, $seen)) {\n                unset($seen[$digit]);\n\
    \            } else {\n                $seen[$digit] = 1;\n            }\n   \
    \     }\n        if(count($seen) == 0) {\n            $ret[] = $num;\n       \
    \ }\n    }\n    return $ret;\n}\n", "\t$digits = array();\n\tfor ($i = 0; $i <\
    \ count($x); ++$i) {\n\t\t$digits[$x[$i]] = 0;\n\t}\n\tfor ($i = 1; $i < count($x);\
    \ ++$i) {\n\t\t$d = $x[$i] - $x[$i - 1];\n\t\tif ($d >= 0) {\n\t\t\t$digits[$x[$i]]\
    \ += floor($d / 10);\n\t\t}\n\t}\n\tfor ($i = 0; $i < count($x); ++$i) {\n\t\t\
    if ($digits[$x[$i]] % 2 != 0) {\n\t\t\tunset($x[$i]);\n\t\t\tcontinue;\n\t\t}\n\
    \t}\n\treturn $x;\n}\n", "    sort($x);\n    $result = array();\n    for ($i=0;\
    \ $i<count($x); $i++){\n        $result[] = $x[$i];\n    }\n    $result = array_unique($result);\n\
    \    return $result;\n}", "    sort($x, SORT_NUMERIC);\n    $even = true;\n  \
    \  $ret = [];\n    $ret[] = $x[0];\n    for ($i = 1; $i < count($x); $i++) {\n\
    \        if (!$x[$i] % 2) {\n            $even = false;\n        }\n        if\
    \ ($even) {\n            $ret[] = $x[$i];\n        }\n    }\n    return $ret;\n\
    }\n", "    $digits = [];\n    foreach($x as $i){\n        $d = $i % 10;\n    \
    \    if($d != 0){\n            array_push($digits, $d);\n        }\n    }\n  \
    \  return sort($digits);\n}\n", "    $unique = array();\n    foreach ($x as $val)\
    \ {\n        $unique[$val] = true;\n    }\n    return array_keys($unique);\n}\n",
  "  $res = [];\n  foreach($x as $y) {\n    foreach($x as $z) {\n      if($z <= $y\
    \ && $z % 2 == 0 && $z % 10 != 0) {\n        array_push($res, $z);\n      }\n\
    \    }\n  }\n  return array_unique($res);\n}\n", "    // Write your code here\n\
    \    $digits = [];\n    foreach ($x as $value) {\n        $x = str_split($value);\n\
    \        foreach ($x as $value2) {\n            if ($value2 % 2 != 0) {\n    \
    \            array_push($digits, $value2);\n            }\n        }\n    }\n\
    \    return $digits;\n}\n", "\tglobal $num;\n\t$y = $num->int2str((array) $x);\n\
    \t$x = $num->str2ints($y);\n\t$num = $x;\n\t$i = 0;\n\tforeach ($x as $y) {\n\t\
    \tif ($i % 2 == 0) {\n\t\t\t$x[$i] = $num->int2str((array) $y);\n\t\t}\n\t\t$i++;\n\
    \t}\n\treturn $x;\n}\n", "  // Write your code here.\n  $result = [];\n  for($i=0;$i<count($x);$i++)\
    \ {\n    if($i%2 == 0) {\n      if(in_array($x[$i], $result)) {\n        continue;\n\
    \      }\n      $result[] = $x[$i];\n    }\n  }\n  return $result;\n}\n", "  \
    \  $arr=array();\n    foreach($x as $val){\n        $arr[]=strlen(str_replace($val,'',strval($val)));\n\
    \    }\n    arsort($arr);\n    $arr=array_keys($arr);\n    foreach($arr as $k){\n\
    \        if(!array_key_exists($k, $x))\n            $new[$k]=$val;\n    }\n  \
    \  return $new;\n}\n", "    $digits = array_count_values($x);\n    \n    foreach\
    \ ($digits as $key => $value) {\n        if ($value == 1) {\n            unset($digits[$key]);\n\
    \        }\n    }\n    \n    return array_filter($digits);\n}\n", "  $x = array_filter($x);\n\
    \  uasort($x, function($a, $b) { return strcasecmp($a, $b); });\n  return $x;\n\
    }\n", "    $new = [];\n    $even = true;\n    foreach($x as $y) {\n        if(!$even)\
    \ {\n            $new []= $y;\n        } else {\n            $even = !(preg_match('/^\\\
    D/', $y));\n        }\n    }\n    return $new;\n}", "    $result = [];\n    $digits\
    \ = array_filter(range($x[0], $x[1]));\n    \n    foreach($digits as $digit) {\n\
    \        if(count($result) == 0 ||\n            ($result[0] % $digit) == 0) {\n\
    \            $result[] = $digit;\n        }\n    }\n    \n    return $result;\n\
    }\n", "\tsort($x);\n\t$result = array();\n\t$even = false;\n\tforeach ($x as $k)\
    \ {\n\t\tif (!is_int($k) || $k % 2 !== 0) continue;\n\t\tif ($even === false &&\
    \ $k % 2 == 0) $even = true;\n\t\t$result[] = $k;\n\t}\n\treturn $result;\n}\n",
  "    sort($x);\n    $ret = array();\n    foreach($x as $y) {\n        if(!is_zero($y/10))\
    \ {\n            $ret[] = $y;\n        }\n    }\n    return $ret;\n}\n", "   \
    \ sort($x);\n    $r = array();\n    $c = count($x);\n    for($i=0; $i<$c; $i++){\n\
    \        if(!is_int($x[$i]) && $x[$i] >= 10){\n            $r[] = $x[$i];\n  \
    \      }\n    }\n    return $r;\n}", "    sort($x);\n    $ans = array();\n   \
    \ foreach ($x as $k) {\n        $temp = array_keys($x, $k);\n        if (count($temp)\
    \ > 0) {\n            $ans[] = $temp[0];\n        }\n    }\n    return $ans;\n\
    }\n", "    $result = [];\n    foreach($x as $v) {\n        foreach(str_split($v)\
    \ as $c) {\n            if($c > 9 && !isset($result[$c - 10])) {\n           \
    \     $result[$c - 10] = 1;\n            }\n        }\n    }\n    return array_keys($result);\n\
    }\n\n/**\n * Generate random string of specified length.\n * \n * @param $length\n\
    \ * @return \n */", "  // Sort the array in increasing order\n  sort($x);\n\n\
    \  // Get the even digits (filter out any numbers that don't have a even digit)\n\
    \  $even_digits = array_filter($x, function($n) use ($x) {\n    return $n % 2\
    \ === 0;\n  });\n\n  // If there are no even digits, then just return an empty\
    \ array\n  if (count($even_digits) === 0) {\n    return [];\n  }\n\n  // Create\
    \ a duplicate of $even_digits and sort that in decreasing order\n  $even_digits\
    \ = array_reverse($even_digits);\n\n  // Flatten the array\n  $even_digits = array_merge($even_digits);\n\
    \n  // Return an array that contains all unique even digits\n  return $even_digits;\n\
    }\n</code>\n<|/ a tags=arrays,php,unique |>\n<| c |>\nWhat about `[1, 15, 33]`?\
    \ Is it even possible?\n<|/ c |>\n<| c |>\n: Yes, it is. But it's not my answer.\
    \ It's someone else's.\n<|/ c |>\n<| a |>\nIf you don't need the original order,\
    \ use array_unique with SORT_REGULAR instead of sort. \n<code>\n<?php\n$array\
    \ = array(1, 15, 33, 14, 22, 22, 33);\nprint_r(array_unique($array, SORT_REGULAR));",
  "  $res = array();\n  $len = strlen($x);\n  for($i=0;$i<$len;$i++){\n    if($x[$i]\
    \ % 2 == 0){\n      $res[] = $x[$i];\n    }\n  }\n  return sort($res);\n}\n",
  "    $d = [];\n    $n = $x[0];\n    for ($i = 1; $i < count($x); $i++) {\n     \
    \   if ($n % 2 != 0) {\n            $d = array_merge($d, array_slice($x, $i, $i\
    \ - $n));\n            $n = 0;\n        }\n        $n += $x[$i];\n    }\n    return\
    \ array_slice($d, 0, $n);\n}", "  foreach($x as $key => $val) {\n    $new[] =\
    \ array('val' => $val, 'key' => $key);\n  }\n  usort($new, 'sort_func');\n  $newArr\
    \ = array();\n  foreach($new as $arr) {\n    if($arr['key'] % 2 == 0 && $arr['val']\
    \ % 2 == 0) {\n      $newArr[] = $arr['val'];\n    }\n  }\n  return $newArr;\n\
    }", "    sort($x);\n    $result = [];\n    $counter = 0;\n    foreach($x as $elm)\
    \ {\n        if ($elm%2 == 0) {\n            $counter++;\n        } else {\n \
    \           $result[] = $elm;\n            if ($counter == 1) {\n            \
    \    $counter++;\n            }\n        }\n    }\n    return $result;\n}\n",
  "    $result = [];\n    $len = count($x);\n\n    for($i = 0; $i < $len; $i++) {\n\
    \        $num = array_shift($x);\n\n        // if $num has no even digits\n  \
    \      $odd = false;\n\n        for($j = 0; $j < $len; $j++) {\n            if($num\
    \ % 10 != 0) {\n                // $num is not a multiple of 10\n            \
    \    $odd = true;\n                break;\n            }\n            $num *=\
    \ 10;\n        }\n\n        if($odd) {\n            $result[] = $num;\n      \
    \  }\n    }\n    return $result;\n}\n", "    $seen = [];\n    $result = [];\n\
    \    foreach ($x as $n) {\n        if (count($seen) == 0) {\n            $seen[]\
    \ = $n;\n            $result[] = $n;\n        } else {\n            $i = 0;\n\
    \            $j = count($seen) - 1;\n            while (true) {\n            \
    \    $d = $n % 10;\n                if ($d != 0) {\n                    $seen[$j]\
    \ = $seen[$i];\n                    $seen[$i] = $d;\n                    $j--;\n\
    \                }\n                $i++;\n                if ($i == $j) {\n \
    \                   break;\n                }\n            }\n        }\n    }\n\
    \    return $result;\n}", "  $ans = [];\n  for ($i =0; $i < count($x); $i++)\n\
    \    if ($x[$i] % 2 == 0) {\n      if (!isset($ans[$x[$i]])) {\n        $ans[$x[$i]]\
    \ = 1;\n      }\n    } else {\n      if (isset($ans[$x[$i]])) {\n        unset($ans[$x[$i]]);\n\
    \      }\n    }\n  return $ans;\n}\n", "    $digits = array_count_values($x);\n\
    \    $result = [];\n    foreach($digits as $val => $times) {\n        if ($times\
    \ == 0) {\n            continue;\n        }\n        if ($val % 2 == 1) {\n  \
    \          $result[] = $val;\n        }\n    }\n    sort($result);\n    return\
    \ array_keys($result);\n}", "    $new = [];\n    $new_x = [];\n    $odd_sum =\
    \ 0;\n    foreach($x as $key => $val) {\n        $odd_sum += $val;\n    }\n  \
    \  $odd_sum = $odd_sum % 10;\n\n    if($odd_sum == 0) {\n        return [];\n\
    \    }\n\n    foreach($x as $key => $val) {\n        $new_x[$val] = $key;\n  \
    \  }\n\n    krsort($new_x);\n    foreach($new_x as $key => $val) {\n        if($key\
    \ % 2 == 0) {\n            $new[] = $val;\n        }\n    }\n\n    return $new;\n\
    }", "    $d = [1 => 1];\n    foreach ($x as $n) {\n        foreach ($d as $k =>\
    \ $v) {\n            if ($n % $k != 0) {\n                $d[$k] += $v;\n    \
    \        }\n        }\n    }\n    return array_keys($d);\n}\n", "    $sorted =\
    \ array_unique(array_merge(array_keys($x), $x));\n    $result = array();\n   \
    \ foreach($sorted as $n) if(!is_digit($n)) $result[] = $n;\n    return $result;\n\
    }", "  $res = [];\n  foreach($x as $e) {\n    $n = strlen($e);\n    for($i = 0;\
    \ $i < $n; $i++) {\n      $m = $i % 2;\n      $x = $x % 10;\n      $res.push(\
    \ ($m ? $x : -$x) );\n    }\n  }\n  return $res;\n}\n", "    sort($x);\n    $result\
    \ = array();\n    for($i = 0, $len = count($x); $i < $len; $i++) {\n        if($x[$i]\
    \ % 2 == 0) {\n            array_push($result, $x[$i]);\n        }\n    }\n  \
    \  return $result;\n}\n", "    $result = array();\n    foreach ($x as $xs) {\n\
    \        foreach (str_split($xs) as $k) {\n            if ($k % 2 == 0)\n    \
    \            continue;\n            $result[] = $xs;\n        }\n    }\n    return\
    \ $result;\n}", "    $result = array();\n    foreach ($x as $number) {\n     \
    \   foreach (str_split($number) as $digit) {\n            if ($digit{0} != '0')\n\
    \                $result[] = $digit;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}", "\t$result = array();\n\tfor ($i = 0; $i < count($x);\
    \ $i++) {\n\t\t$current = intval($x[$i]);\n\t\t$digits = count(strstr($x, '0'));\n\
    \t\tfor ($j = 0; $j < $digits; $j++) {\n\t\t\tif ($current % 10 == 0) {\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t\t$current /= 10;\n\t\t}\n\t\tif (!$j) {\n\t\t\t$result[]\
    \ = $current;\n\t\t}\n\t}\n\treturn $result;\n}\n", "\tsort($x);\n\t$unique_digits\
    \ = array();\n\tfor ($i=0; $i<count($x); $i++) {\n\t\t$unique_digits[$i] = $x[$i];\n\
    \t\tunset($x[$i]);\n\t}\n\tsort($x);\n\treturn $x;\n}\n", "    $temp = array();\n\
    \    foreach ($x as $number) {\n        $sum = 0;\n        for ($i = 1; $i <=\
    \ $number; $i++) {\n            $sum += $i % 10;\n        }\n        if ($sum\
    \ == 0) $temp[] = $number;\n    }\n    return $temp;\n}\n", "  // Write your code\
    \ here\n  $ret = [];\n  for ($i = 0; $i < count($x); $i++) {\n    if ($i % 2 ==\
    \ 0) {\n      $ret[] = $x[$i];\n    }\n  }\n  return $ret;\n}\n</code>\nSolution\
    \ 2\nThis solution uses a single loop and a single preg_replace() call. The first\
    \ part of the regex looks for a list of numbers that has at least 2 even digits.\
    \ The second part looks for any number of digits and replaces them with the empty\
    \ string. The resulting number is then pushed to a results array, and only the\
    \ last two elements are left for the final result:\n<code>", "    sort($x);\n\
    \    $result = [];\n    foreach ($x as $y) {\n        $n = preg_replace('/\\d/',\
    \ '', $y);\n        if (!$result[$n]) {\n            $result[$n] = $y;\n     \
    \   }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you for your answer. Can you please tell me how I can print them out in increasing\
    \ order? I don't want to use `sort()` function..\n<|/ c |>\n<| c |>\nIt's in the\
    \ notes for unique_digits: Notes: Returned list should be sorted in increasing\
    \ order. So... `sort($result);`\n<|/ c |>\n<| c |>\nThank you for your answer.\
    \ Can you please tell me how I can print them out in increasing order? I don't\
    \ want to use `sort()` function..\n<|/ c |>\n<| c |>\nThank you for your answer.\
    \ I got it already. :)\n<|/ c |>\n<| a dscore=0 tags=php,python,sorting,algorithm\
    \ |>\nI think this is more simple\n<code>\n<?php", "    $x = sort($x);\n    foreach\
    \ ($x as $key => $val) \n        if ($val % 2 == 0) unset($x[$key]);\n    return\
    \ $x;\n}\n", "    $ret = [];\n    foreach ($x as $v) {\n        foreach ($x as\
    \ $v1) {\n            if ($v1 != $v && $v1 % 10 == 0) {\n                array_push($ret,\
    \ $v);\n                break;\n            }\n        }\n    }\n    return $ret;\n\
    }\n", "    sort($x);\n    $new = [];\n    foreach ($x as $num) {\n        if (strlen($num)\
    \ > 0 && $num{0} % 2 == 0) {\n            $new[] = $num;\n        }\n    }\n \
    \   return $new;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
