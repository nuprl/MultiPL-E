name: HumanEval_139_special_factorial
language: php
results:
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1uqrexf.php:23\n\
    Stack trace:\n#0 /tmp/tmph1uqrexf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmph1uqrexf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4avdhzj.php:23\n\
    Stack trace:\n#0 /tmp/tmpb4avdhzj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb4avdhzj.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n < 0)\n\t\treturn NULL;\n\telse if ($n == 0 || $n == 1)\n\t\treturn 1;\n\
    \telse if ($n%2 == 0)\n\t\treturn special_factorial($n/2) * special_factorial($n-1);\n\
    \telse\n\t\treturn special_factorial($n/2) * special_factorial($n-1) * special_factorial($n-2);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpso_2xxp1.php:26\n\
    Stack trace:\n#0 /tmp/tmpso_2xxp1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpso_2xxp1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    $factorial_number = 1;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $factorial = $factorial * $factorial_number;\n        $factorial_number++;\n\
    \    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2q3q062.php:25\n\
    Stack trace:\n#0 /tmp/tmph2q3q062.php(31): test()\n#1 {main}\n  thrown in /tmp/tmph2q3q062.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0)\n        return 1;\n    else {\n        return $n * (special_factorial($n\
    \ - 1));\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9yr76ydc.php:23\n\
    Stack trace:\n#0 /tmp/tmp9yr76ydc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9yr76ydc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) return 1;\n    if ($n == 1) return 1;\n    return ($n * (special_factorial($n\
    \ - 1)))\n             * (special_factorial(array_slice($n, -1)));\n}\n\n$x =\
    \ special_factorial(4);\necho \"special_factorial(4) returned: {$x}\\n\";\n\n\
    echo \"\\n\\n\";\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmppesinieh.php on line 14\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmppesinieh.php on line 14\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, int given in /tmp/tmppesinieh.php on line 14\n\
    special_factorial(4) returned: 24\n\n\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmppesinieh.php on line 14\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, int given in /tmp/tmppesinieh.php on line 14\n\
    \nWarning: array_slice() expects parameter 1 to be array, int given in /tmp/tmppesinieh.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppesinieh.php:27\n\
    Stack trace:\n#0 /tmp/tmppesinieh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppesinieh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n < 2) {\n    return 1;\n  }\n  return special_factorial($n - 1) * $n;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xabgazq.php:22\n\
    Stack trace:\n#0 /tmp/tmp8xabgazq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8xabgazq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n\
    \ - 1);\n}\n\n/**\n * Define the factorial of a given integer without using recursion.\n\
    \ * \n * Warning: This function is only for educational purposes, you should not\
    \ use\n * it in your applications.\n * \n * @param $n integer\n * @return integer\n\
    \ */\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5_wn5qf.php:31\n\
    Stack trace:\n#0 /tmp/tmpf5_wn5qf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpf5_wn5qf.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\n$n = 4; // Brazilian factorial of this number\n\
    $factorial = special_factorial($n);\n\necho \"The Brazilian factorial of this\
    \ number $n is $factorial.\";\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "The Brazilian factorial of this number 4 is 24.\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpthi1edsh.php:27\nStack trace:\n#0 /tmp/tmpthi1edsh.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpthi1edsh.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) return $n;\n    return special_factorial($n - 1) * $n;\n}\n</code>\n\
    <|/ a tags=php,factorial |>\n<| c |>\nA little explanation of what you're doing\
    \ might be helpful.\n<|/ c |>\n<| c |>\nThis is not an answer to the question\
    \ - it just repeats the code in the other answer.\n<|/ c |>\n<| c |>\nThe explanation\
    \ of why OP has this error is not the main question here, since this code is very\
    \ similar to OP's code.\n<|/ c |>\n<| c |>\nI do not understand why you post a\
    \ solution that does not work. It is a correct solution and it works. It is only\
    \ to point out that he can improve it for his own purposes.\n<|/ c |>\n<| c |>\n\
    The code is the same. The function returns the factorial of the number. The only\
    \ difference is the way the number is passed (in this case the number passed is\
    \ directly the value of the input number). Anyway, thanks for the comment\n<|/\
    \ c |>\n<| a tags=php,factorial dscore=4 |>\nPHP has native function to calculate\
    \ factorial without using recursive function\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvm3lnqe7.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n < 0) {\n    return 0;\n  }\n  $result = 1;\n  for ($i = 1; $i < $n; $i++)\
    \ {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5h2khzf.php:26\n\
    Stack trace:\n#0 /tmp/tmpj5h2khzf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj5h2khzf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n<=1) {\n        return 1;\n    } else {\n        return $n * (special_factorial($n-1));\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5e6kfbd.php:23\n\
    Stack trace:\n#0 /tmp/tmpt5e6kfbd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt5e6kfbd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvsnum64.php:23\n\
    Stack trace:\n#0 /tmp/tmprvsnum64.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprvsnum64.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $f = $n;\n    $n = $n;\n    $factorial = 1;\n    while ($n >= 1) {\n     \
    \   $factorial *= $n;\n        $n--;\n    }\n    return $factorial;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkys7n2ny.php:26\n\
    Stack trace:\n#0 /tmp/tmpkys7n2ny.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkys7n2ny.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  if ($n===0) {\n    return 1;\n  }\n  for ($i=1; $i<=$n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5k1mro7q.php:26\n\
    Stack trace:\n#0 /tmp/tmp5k1mro7q.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5k1mro7q.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = $n; $i >= 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0q6tzop7.php:23\n\
    Stack trace:\n#0 /tmp/tmp0q6tzop7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0q6tzop7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 1) {\n        return 1;\n    }\n    $result = 1;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pxzbo7l.php:26\n\
    Stack trace:\n#0 /tmp/tmp4pxzbo7l.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4pxzbo7l.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 1) {\n    return $n;\n  }\n  return special_factorial(--$n) * ($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_kuabdg.php:22\n\
    Stack trace:\n#0 /tmp/tmpm_kuabdg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpm_kuabdg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0 || $n == 1) {\n    return 1;\n  }\n  return special_factorial($n\
    \ - 1) * $n;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpay6o_761.php:21\n\
    Stack trace:\n#0 /tmp/tmpay6o_761.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpay6o_761.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    $fact2 = 2;\n    for($i = 3; $i <= $n; $i++) {\n        $fact\
    \ *= $i;\n        $fact *= $fact2;\n        $fact2 *= $i;\n    }\n    return $fact;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphq7d_43j.php:25\n\
    Stack trace:\n#0 /tmp/tmphq7d_43j.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphq7d_43j.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $special_factorial = 1;\n    while ($n >= 1) {\n        $special_factorial\
    \ = $special_factorial * $n;\n        $n--;\n    }\n    return $special_factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9t8bdlu.php:23\n\
    Stack trace:\n#0 /tmp/tmpw9t8bdlu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw9t8bdlu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0) {\n        return 0;\n    }\n\n    $factorial = 1;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\n    return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1h9ojp9r.php:28\n\
    Stack trace:\n#0 /tmp/tmp1h9ojp9r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1h9ojp9r.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factorial = 1;\n\tfor ($i=1; $i<=$n; $i++) {\n\t\t$factorial *= $i;\n\t}\n\t\
    return $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70awx_i0.php:22\n\
    Stack trace:\n#0 /tmp/tmp70awx_i0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp70awx_i0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n < 1) {\n\t\treturn 1;\n\t}\n\telse if ($n == 1) {\n\t\treturn 1;\n\t}\n\
    \telse {\n\t\treturn $n * (special_factorial($n - 1));\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0xq645z.php:27\n\
    Stack trace:\n#0 /tmp/tmpj0xq645z.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpj0xq645z.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    $factorial = 1;\n\n    for($i=1; $i < $n; $i++) {\n    \
    \    $factorial *= $i;\n    }\n\n    while($n > 1) {\n        $result *= $factorial;\n\
    \        $n--;\n        $factorial *= $n;\n    }\n\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fvo5lye.php:32\n\
    Stack trace:\n#0 /tmp/tmp6fvo5lye.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6fvo5lye.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) return 1;\n    return $n * special_factorial($n - 1);\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaky6um9q.php:20\n\
    Stack trace:\n#0 /tmp/tmpaky6um9q.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpaky6um9q.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial(--$n);\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqz2p0x2z.php:21\n\
    Stack trace:\n#0 /tmp/tmpqz2p0x2z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqz2p0x2z.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if (!is_numeric($n) || $n <= 0) {\n        return 0;\n    }\n    $fact = 1;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n    }\n    return $fact;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4sfivlq8.php:26\n\
    Stack trace:\n#0 /tmp/tmp4sfivlq8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4sfivlq8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for ($i = 0; $i <= $n; $i++) {\n        $fact *= $i;\n   \
    \ }\n    return $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknz8uza8.php:23\n\
    Stack trace:\n#0 /tmp/tmpknz8uza8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpknz8uza8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // This line makes sure that we get the correct factorial\n    if ($n < 1)\
    \ return 0; // We throw an error and let the program continue\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2t_u14np.php:25\n\
    Stack trace:\n#0 /tmp/tmp2t_u14np.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2t_u14np.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Write the code for special_factorial here\n    \n    return $n;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlj_uavo.php:21\n\
    Stack trace:\n#0 /tmp/tmprlj_uavo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprlj_uavo.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $f = 1;\n    $i = 2;\n    while ($i <= $n) {\n        $f *= $i;\n        $i++;\n\
    \    }\n    return $f;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigpth6a5.php:25\n\
    Stack trace:\n#0 /tmp/tmpigpth6a5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpigpth6a5.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for($i=1; $i<=$n; $i++) {\n        $fact *= $i;\n    }\n \
    \   return $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0g7jqd4.php:23\n\
    Stack trace:\n#0 /tmp/tmpo0g7jqd4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpo0g7jqd4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhhsw8da.php:23\n\
    Stack trace:\n#0 /tmp/tmpkhhsw8da.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkhhsw8da.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    The general problem of doing something like this in PHP is called exponentiation.\
    \ Here is a link about exponentiation in PHP. There are several other pages with\
    \ other more useful algorithms and implementations.\n<|/ a tags=php,factorial\
    \ dscore=1 |>\n<| a dscore=1 |>\nThe following code uses the fact that:\n<code>\n\
    a! = factorial(a) * factorial(a - 1)\n</code>\nTherefore, we simply need to multiply\
    \ factorial(a) by the number of times the value of factorial(a - 1) is repeated,\
    \ starting from 1.\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb3n7imsx.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5imjzmh.php:22\n\
    Stack trace:\n#0 /tmp/tmpd5imjzmh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd5imjzmh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n == 0 || $n == \"0\") {\n\t\treturn \"0\";\n\t} else if ($n == 1) {\n\t\t\
    return \"1\";\n\t} else if (is_string($n)) {\n\t\t$n = str_replace(\",\", \"\"\
    , $n);\n\t\t$n = str_replace(\".\", \"\", $n);\n\t\t$n = str_replace(\"$\", \"\
    \", $n);\n\t\t$n = str_replace(\"!\", \"\", $n);\n\t\t$n = str_replace(\"0\",\
    \ \"\", $n);\n\t\t$n = str_replace(\"1\", \"\", $n);\n\t\t$n = str_replace(\"\
    2\", \"\", $n);\n\t\t$n = str_replace(\"3\", \"\", $n);\n\t\t$n = str_replace(\"\
    4\", \"\", $n);\n\t\t$n = str_replace(\"5\", \"\", $n);\n\t\t$n = str_replace(\"\
    6\", \"\", $n);\n\t\t$n = str_replace(\"7\", \"\", $n);\n\t\t$n = str_replace(\"\
    8\", \"\", $n);\n\t\t$n = str_replace(\"9\", \"\", $n);\n\t\t$n = str_replace(\"\
    $\", \"\", $n);\n\t\t$n = str_replace(\"!\", \"\", $n);\n\t\t$n = str_replace(\"\
    0\", \"\", $n);\n\t\t$n = str_replace(\"1\", \"\", $n);\n\t\t$n = str_replace(\"\
    2\", \"\", $n);\n\t\t$n = str_replace(\"3\", \"\", $n);\n\t\t$n = str_replace(\"\
    4\", \"\", $n);\n\t\t$n = str_replace(\"5\", \"\", $n);\n\t\t$n = str_replace(\"\
    6\", \"\", $n);\n\t\t$n = str_replace(\"7\", \"\", $n);\n\t\t$n = str_replace(\"\
    8\", \"\", $n);\n\t\t$n = str_replace(\"9\", \"\", $n);\n\t\t$n = str_replace(\"\
    &\", \"\", $n);\n\t\t$n = str_replace(\"(\", \"\", $n);\n\t\t$n = str_replace(\"\
    )\", \"\", $n);\n\t\t$n = str_replace(\"!\", \"\", $n);\n\t\t$n = str_replace(\"\
    ?\", \"\", $n);\n\t\t$n = str_replace(\",\", \"\", $n);\n\t\t$n = str_replace(\"\
    ;\", \"\", $n);\n\t\t$n = str_replace(\":\", \"\", $n);\n\t\t$n = str_replace(\"\
    ;\", \"\", $n);\n\t\t$n = str_replace(\"=\", \"*\", $n);\n\t\t$n = str_replace(\"\
    &\", \"+\", $n);\n\t\t$n = str_replace(\"%\", \"*\", $n);\n\t\t$n = str_replace(\"\
    ^\", \"*\", $n);\n\t\t$n = str_replace(\"*\", \"*\", $n);\n\t\t$n = str_replace(\"\
    (\", \"*\", $n);\n\t\t$n = str_replace(\")\", \"*\", $n);\n\t\t$n = \nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoqewu2l6.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0)\n        return 1;\n    return $n * special_factorial(--$n);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwsjq0_l.php:21\n\
    Stack trace:\n#0 /tmp/tmpiwsjq0_l.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpiwsjq0_l.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporx3dnai.php:22\n\
    Stack trace:\n#0 /tmp/tmporx3dnai.php(28): test()\n#1 {main}\n  thrown in /tmp/tmporx3dnai.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return $n * special_factorial(--$n);\n}\n</code>\n<|/ a tags=factorial,php\
    \ dscore=0 |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzj0_1eyd.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) {\n        return 1;\n    } else {\n        return $n * special_factorial($n\
    \ - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgobpltn.php:23\n\
    Stack trace:\n#0 /tmp/tmppgobpltn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppgobpltn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    $factorial = 1;\n    $counter = 1;\n    // loop while n\
    \ is bigger than zero\n    while (--$n) {\n        // calculate the factorial\
    \ of n\n        $factorial *= $counter;\n        // decrement n\n        $counter--;\n\
    \    }\n    // loop while n is bigger than zero\n    while (--$n) {\n        //\
    \ calculate the factorial of n\n        $factorial *= $counter;\n        // decrement\
    \ n\n        $counter--;\n    }\n    // loop while n is bigger than zero\n   \
    \ while (--$n) {\n        // calculate the factorial of n\n        $factorial\
    \ *= $counter;\n        // decrement n\n        $counter--;\n    }\n    // loop\
    \ while n is bigger than zero\n    while (--$n) {\n        // calculate the factorial\
    \ of n\n        $factorial *= $counter;\n        // decrement n\n        $counter--;\n\
    \    }\n    // loop while n is bigger than zero\n    while (--$n) {\n        //\
    \ calculate the factorial of n\n        $factorial *= $counter;\n        // decrement\
    \ n\n        $counter--;\n    }\n    // loop while n is bigger than zero\n   \
    \ while (--$n) {\n        // calculate the factorial of n\n        $factorial\
    \ *= $counter;\n        // decrement n\n        $counter--;\n    }\n    // loop\
    \ while n is bigger than zero\n    while (--$n) {\n        // calculate the factorial\
    \ of n\n        $factorial *= $counter;\n        // decrement n\n        $counter--;\n\
    \    }\n    // loop while n is bigger than zero\n    while (--$n) {\n        //\
    \ calculate the factorial of n\n        $factorial *= $counter;\n        // decrement\
    \ n\n        $counter--;\n    }\n    // loop while n is bigger than zero\n   \
    \ while (--$n) {\n        // calculate the factorial of n\n        $factorial\
    \ *= $counter;\n        // decrement n\n        $counter--;\n    }\n    // loop\
    \ while n is bigger than zero\n    while (--$n) {\n        // calculate the factorial\
    \ of n\n        $factorial *= $counter;\n        // decrement n\n        $counter--;\n\
    \    }\n    // loop while n is bigger than zero\n    while (--$n) {\n        //\
    \ calculate the factorial of n\n        $factorial *= $counter;\n        // decrement\
    \ n\n        $counter--;\n    }\n    // loop while n is bigger than zero\n   \
    \ while (--$n) {\n        // calculate the factorial of n\n        $factorial\
    \ *= $counter;\n        // decrement n\n        $counter--;\n    }\n    // loop\
    \ while n is bigg\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqr2d2ged.php on line 110\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $f = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $f *= $i;\n  }\n  return $f;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppc77eymc.php:23\n\
    Stack trace:\n#0 /tmp/tmppc77eymc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppc77eymc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return $factorials[$n];\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4uhe9ezb.php:19\n\
    Stack trace:\n#0 /tmp/tmp4uhe9ezb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4uhe9ezb.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n < 1) {\n\t\ttrigger_error('Invalid argument: ' . $n, E_USER_WARNING);\n\
    \t\treturn null;\n\t}\n\t$factorial = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\
    \t$factorial *= $i;\n\t}\n\treturn $factorial;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdhbc0b1.php:27\n\
    Stack trace:\n#0 /tmp/tmpcdhbc0b1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcdhbc0b1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlvaxsvt.php:23\n\
    Stack trace:\n#0 /tmp/tmpnlvaxsvt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnlvaxsvt.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // A special factorial is defined as: n! * (n-1)! * (n-2)! * ... * 1!\n  if\
    \ ($n < 2) {\n    return 1;\n  } else {\n    return factorial($n) * special_factorial($n\
    \ - 1);\n  }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpkfs8p2d6.php:15\nStack trace:\n#0 /tmp/tmpkfs8p2d6.php(20): special_factorial(4)\n\
    #1 /tmp/tmpkfs8p2d6.php(24): candidate(4)\n#2 /tmp/tmpkfs8p2d6.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkfs8p2d6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9osibfp.php:23\n\
    Stack trace:\n#0 /tmp/tmpq9osibfp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq9osibfp.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $factorial *= $i;\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $result\
    \ *= $factorial;\n        $factorial *= $i;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbubnjz0.php:28\n\
    Stack trace:\n#0 /tmp/tmpkbubnjz0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkbubnjz0.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3lqyiq6.php:23\n\
    Stack trace:\n#0 /tmp/tmpd3lqyiq6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd3lqyiq6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ return $factorials[$n];\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5lrg54uk.php:19\n\
    Stack trace:\n#0 /tmp/tmp5lrg54uk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5lrg54uk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0)\n        return 1;\n    else\n        return $n * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkqmcet2.php:22\n\
    Stack trace:\n#0 /tmp/tmppkqmcet2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppkqmcet2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcw6jvzg.php:23\n\
    Stack trace:\n#0 /tmp/tmppcw6jvzg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppcw6jvzg.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) {\n        return 1;\n    }\n    return $n * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7xn1se17.php:22\n\
    Stack trace:\n#0 /tmp/tmp7xn1se17.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7xn1se17.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Initialize factorial variable\n  $factorial = 1;\n  // Initialize counter\
    \ variable\n  $counter = 1;\n\n  // While the counter is less than n\n  while\
    \ ($counter <= $n) {\n    // Multiply the current factorial by the counter and\
    \ increment the counter\n    $factorial *= $counter;\n    $counter++;\n  }\n\n\
    \  // Return the factorial\n  return $factorial;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzg1qojqa.php:32\n\
    Stack trace:\n#0 /tmp/tmpzg1qojqa.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzg1qojqa.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $result = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$result *= $i;\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6khfil8f.php:23\n\
    Stack trace:\n#0 /tmp/tmp6khfil8f.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6khfil8f.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmc343osx.php:22\n\
    Stack trace:\n#0 /tmp/tmpmc343osx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmc343osx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9dubk5j.php:23\n\
    Stack trace:\n#0 /tmp/tmpv9dubk5j.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpv9dubk5j.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if(($n == 0) || ($n == 1)) {\n\t\treturn 1;\n\t} else {\n\t\treturn $n * special_factorial($n\
    \ - 1);\n\t}\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7k6x1fgi.php:22\n\
    Stack trace:\n#0 /tmp/tmp7k6x1fgi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7k6x1fgi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 1)\n  {\n    return 1;\n  }\n  return ($n) * (special_factorial($n\
    \ - 1));\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0du6efj.php:22\n\
    Stack trace:\n#0 /tmp/tmpa0du6efj.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpa0du6efj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 1) return 1;\n  $f = $n * special_factorial($n - 1);\n  return $f;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo43m9hcy.php:21\n\
    Stack trace:\n#0 /tmp/tmpo43m9hcy.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpo43m9hcy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   for($i = 1; $i <= $n; $i++) {\n        $fact = $n * $i;\n        $fact = $fact;\n\
    \    }\n\n    return $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp005cjmye.php:24\n\
    Stack trace:\n#0 /tmp/tmp005cjmye.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp005cjmye.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n === 0) {\n    return 1;\n  }\n  else {\n    return $n * special_factorial($n\
    \ - 1);\n  }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1lsomky.php:24\n\
    Stack trace:\n#0 /tmp/tmpv1lsomky.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpv1lsomky.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return $factorials[$n] * special_factorial($n-1);\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpv1rx0ibp.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    $n = intval($n);\n    if ($n == 0 || $n == 1) {\n   \
    \     return $n;\n    } else {\n        for ($i = $n - 2; $i >= 0; $i--) {\n \
    \           $factorial *= $n;\n        }\n        return $factorial;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr47ug_iv.php:28\n\
    Stack trace:\n#0 /tmp/tmpr47ug_iv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpr47ug_iv.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 1) {\n        $n = 0;\n    }\n    $factorial = 1;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_5kkvd5.php:25\n\
    Stack trace:\n#0 /tmp/tmpa_5kkvd5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpa_5kkvd5.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $res = $n;\n    for ($i = 2; $i < $n; $i++) {\n        $res *= $i;\n    }\n\
    \    return $res;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jq6l_te.php:23\n\
    Stack trace:\n#0 /tmp/tmp8jq6l_te.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8jq6l_te.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) {\n        return $n;\n    } else {\n        return special_factorial($n\
    \ - 1) * $n;\n    }\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi2kamav.php:22\n\
    Stack trace:\n#0 /tmp/tmpxi2kamav.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxi2kamav.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $res = $n;\n    $counter = 1;\n    while ($counter > 1) {\n        $res =\
    \ $res * ($counter - 1);\n        $counter++;\n    }\n    return $res;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp35t72lp3.php:25\n\
    Stack trace:\n#0 /tmp/tmp35t72lp3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp35t72lp3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    while ($n > 1) {\n        $factorial *= $n;\n       \
    \ $n--;\n    }\n    return $factorial;\n}\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzwgdxsf.php:23\n\
    Stack trace:\n#0 /tmp/tmpgzwgdxsf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgzwgdxsf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Initialize factorial and factorials counter\n  $factorial = 1; // 1! = 1\n\
    \  $factorials = array();\n\n  // Iterate from 0 to n\n  for ($i = 0; $i < $n;\
    \ $i++) {\n    // Calculate factorial\n    $factorial *= $i;\n\n    // Save factorial\
    \ to array\n    $factorials[] = $factorial;\n  }\n\n  // Return the factorial\
    \ with the smallest index\n  return $factorials[array_search(min($factorials),\
    \ $factorials)];\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvspc6lp.php:33\n\
    Stack trace:\n#0 /tmp/tmpjvspc6lp.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjvspc6lp.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $fact = array(\n\t\t1  => 1,\n\t\t2  => 1,\n\t\t3  => 2,\n\t\t4  => 6,\n\t\t5\
    \  => 6,\n\t\t6  => 24,\n\t\t7  => 120,\n\t\t8  => 720,\n\t\t9  => 5040,\n\t\t\
    10 => 40320,\n\t\t11 => 362880,\n\t\t12 => 3628800,\n\t\t13 => 39916800,\n\t\t\
    14 => 479001600,\n\t\t15 => 6227020800,\n\t\t16 => 87178291200,\n\t\t17 => 1307674368000,\n\
    \t\t18 => 20922789888000,\n\t\t19 => 355687428096000,\n\t\t20 => 6402373705728000,\n\
    \t\t21 => 121645100408832000,\n\t\t22 => 2432902008176640000,\n\t\t23 => 51090942171709440000,\n\
    \t\t24 => 1124000727777607680000,\n\t\t25 => 25852016738884976640000,\n\t\t26\
    \ => 620448401733239439360000,\n\t\t27 => 15511210043330985984000000,\n\t\t28\
    \ => 403291461126605635584000000,\n\t\t29 => 10888869450418352160768000000,\n\t\
    \t30 => 304888344611713860501504000000,\n\t\t31 => 8841761993739701954543616000000,\n\
    \t\t32 => 26525285981219105863630848000000,\n\t\t33 => 8222838654177922817725562880000000\n\
    \t);\n\n\t$nn = $n;\n\t$product = 1;\n\twhile($nn) {\n\t\t$product = $fact [ $nn\
    \ - 1 ] * $product;\n\t\t$nn -= 1;\n\t}\n\treturn $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0aa6gfra.php:61\n\
    Stack trace:\n#0 /tmp/tmp0aa6gfra.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp0aa6gfra.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 1) {\n        return 1;\n    } else {\n        return $n * special_factorial($n\
    \ - 1);\n    }\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7780bjwp.php:22\n\
    Stack trace:\n#0 /tmp/tmp7780bjwp.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7780bjwp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Create a variable to hold the result\n  $factorial = 1;\n\n  // Loop through\
    \ the remaining numbers\n  for ($i = 1; $i <= $n; $i++) {\n    // Multiply the\
    \ number by the factorial\n    $factorial *= $i;\n  }\n\n  // Return the result\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnx_rjpuw.php:29\n\
    Stack trace:\n#0 /tmp/tmpnx_rjpuw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnx_rjpuw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0) {\n        return 0;\n    }\n    $res = 1;\n    $limit = $n -\
    \ 1;\n    for ($i = 1; $i <= $limit; $i++) {\n        $res += $n * ($i - 1);\n\
    \    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnld27eer.php:27\n\
    Stack trace:\n#0 /tmp/tmpnld27eer.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnld27eer.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial(--$n);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwoa2zlcx.php:22\n\
    Stack trace:\n#0 /tmp/tmpwoa2zlcx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwoa2zlcx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * (special_factorial($n\
    \ - 1));\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_f6zyts.php:22\n\
    Stack trace:\n#0 /tmp/tmp7_f6zyts.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7_f6zyts.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return\
    \ $n;\n    }\n    return special_factorial($n - 1) * $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqdqy8h_.php:25\n\
    Stack trace:\n#0 /tmp/tmpdqdqy8h_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdqdqy8h_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n < 2) return 1;\n  return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7ngk009.php:20\n\
    Stack trace:\n#0 /tmp/tmpn7ngk009.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn7ngk009.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) {\n        return 1;\n    }\n    else {\n        return $n *\
    \ special_factorial($n - 1);\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja40ydzi.php:23\n\
    Stack trace:\n#0 /tmp/tmpja40ydzi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpja40ydzi.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7scv0i1v.php:23\n\
    Stack trace:\n#0 /tmp/tmp7scv0i1v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7scv0i1v.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n\n    for($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp458txnva.php:25\n\
    Stack trace:\n#0 /tmp/tmp458txnva.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp458txnva.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return $factorial = $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fact = 1;\n  for($i=1; $i <= $n; $i++) {\n    $fact *= $i;\n  }\n  return $fact;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9ymuajr.php:23\n\
    Stack trace:\n#0 /tmp/tmpd9ymuajr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd9ymuajr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fact = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $fact *= $i;\n  }\n  return\
    \ $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1sormqe.php:23\n\
    Stack trace:\n#0 /tmp/tmpq1sormqe.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq1sormqe.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n == 0) {\n\t\treturn 1;\n\t}\n\treturn $n * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dxria3r.php:22\n\
    Stack trace:\n#0 /tmp/tmp0dxria3r.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0dxria3r.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 0; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_s2x0hco.php:23\n\
    Stack trace:\n#0 /tmp/tmp_s2x0hco.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_s2x0hco.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    if ($n <= 1) {\n        return $factorial;\n    } else\
    \ {\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n \
    \       }\n        return $factorial;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdaiaspm.php:27\n\
    Stack trace:\n#0 /tmp/tmpxdaiaspm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxdaiaspm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n <= 1)\n\t\treturn $n;\n\t\n\treturn special_factorial($n - 1) * $n;\n}\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpju0ecgxt.php:22\n\
    Stack trace:\n#0 /tmp/tmpju0ecgxt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpju0ecgxt.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 2; $i <= $n; ++$i) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4lzfmux.php:23\n\
    Stack trace:\n#0 /tmp/tmpt4lzfmux.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt4lzfmux.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n == 0 || $n==1) {\n\t\treturn 1;\n\t}\n\t\n\treturn $n * (special_factorial($n-1)\
    \ * special_factorial($n-2) * special_factorial($n-3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0 || $n >= 21) {\n        echo \"Error: input number $n out of range\\\
    n\";\n        exit;\n    }\n\n    $res = 1;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $res *= $i;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7e1yeypy.php:28\n\
    Stack trace:\n#0 /tmp/tmp7e1yeypy.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7e1yeypy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for($i = 2; $i <= $n; $i++) {\n        $fact *= $i;\n    }\n\
    \    return $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrnjafhm.php:23\n\
    Stack trace:\n#0 /tmp/tmpwrnjafhm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwrnjafhm.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $sum = 1;\n  for($i = 1; $i <= $n; $i++) {\n    $sum *= $i;\n  }\n  return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyefi5xkr.php:23\n\
    Stack trace:\n#0 /tmp/tmpyefi5xkr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyefi5xkr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) {\n        return $n;\n    }\n    return $factorial($n) * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpom_klgb2.php:14\n\
    Stack trace:\n#0 /tmp/tmpom_klgb2.php(18): special_factorial(4)\n#1 /tmp/tmpom_klgb2.php(22):\
    \ candidate(4)\n#2 /tmp/tmpom_klgb2.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpom_klgb2.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factorial = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$factorial *= $i;\n\t}\n\
    \treturn $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3xirvdl.php:23\n\
    Stack trace:\n#0 /tmp/tmpe3xirvdl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpe3xirvdl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 1; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt12ow352.php:23\n\
    Stack trace:\n#0 /tmp/tmpt12ow352.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt12ow352.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return ($n-1) * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvy_83ps1.php:22\n\
    Stack trace:\n#0 /tmp/tmpvy_83ps1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvy_83ps1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1)\n        return 1;\n    return $n * special_factorial($n - 1);\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyu6evzm5.php:20\n\
    Stack trace:\n#0 /tmp/tmpyu6evzm5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyu6evzm5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0 || $n == 1) {\n \
    \       return $n;\n    }\n    return $n * special_factorial($n - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1pspjew6.php:24\n\
    Stack trace:\n#0 /tmp/tmp1pspjew6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1pspjew6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question does not ask for the factorial\
    \ of a number. Rather it asks for the factorial of some `p` by repeated multiplication.\n\
    <|/ c |>\n<| c |>\n- I answered the question asked in the OP's comments section.\
    \  The OP's comment on [this answer](https://stackoverflow.com/a/46707060/2057709)\
    \ seems to indicate that they want the factorial of `p` by repeated multiplication.\n\
    <|/ c |>\n<| c |>\nMy point was: This answer does not really answer the question.\
    \ While it does answer a part of the question (the question in the title is answered\
    \ correctly), it does not answer the second part of the question (the question\
    \ that is actually asked).\n<|/ c |>\n<| c |>\n- I added an alternative solution\
    \ to the answer that I was able to get working in 30 seconds with PHP and a text\
    \ editor like Sublime Text.\n<|/ c |>\n<| c |>\nYou don't need recursion. Recursion\
    \ makes this kind of calculation very slow and inefficient. Just loop from 0 to\
    \ 10 and add factorials.\n<|/ c |>\n<| a tags=php,math,factorial,algorithm |>\n\
    You can use the following recursive function:\n<code>\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp11c2vlt4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n<=1){\n\t\treturn 1;\n\t}else{\n\t\treturn ($n) * (special_factorial($n-1));\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t1eetw4.php:23\n\
    Stack trace:\n#0 /tmp/tmp0t1eetw4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0t1eetw4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factorial = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$factorial *= $i;\n\t}\n\
    \treturn $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40kfsofb.php:23\n\
    Stack trace:\n#0 /tmp/tmp40kfsofb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp40kfsofb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for($i=1;$i<=$n;$i++) {\n        $fact *= $i;\n    }\n   \
    \ return $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr666wyhd.php:23\n\
    Stack trace:\n#0 /tmp/tmpr666wyhd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpr666wyhd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    $special_factorial = $special_factorial;\n\
    \    return $special_factorial($n-1);\n}\nfunction candidate(...$args) {\n   \
    \ return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp9fcrjwv9.php:15\n\
    Stack trace:\n#0 /tmp/tmp9fcrjwv9.php(18): special_factorial(4)\n#1 /tmp/tmp9fcrjwv9.php(22):\
    \ candidate(4)\n#2 /tmp/tmp9fcrjwv9.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp9fcrjwv9.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0 || $n == 1) {\n        return $n;\n    }\n\n    if ($n == 2) {\n\
    \        return 2;\n    }\n\n    // Special case for the factorial of 0\n    if\
    \ ($n == 0) {\n        return 0;\n    }\n\n    // Calculate the factorial recursively\n\
    \    return special_factorial($n - 1) * $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8oo0owej.php:33\n\
    Stack trace:\n#0 /tmp/tmp8oo0owej.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8oo0owej.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 1; $i < $n; $i++) {\n        $factorial *= $i;\n\
    \    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxve9iu8.php:23\n\
    Stack trace:\n#0 /tmp/tmptxve9iu8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptxve9iu8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphinz25sd.php:23\n\
    Stack trace:\n#0 /tmp/tmphinz25sd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphinz25sd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factorial = pow($n, $n);\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\t$factorial *=\
    \ $n;\n\t}\n\treturn $factorial;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpai082p3b.php:23\n\
    Stack trace:\n#0 /tmp/tmpai082p3b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpai082p3b.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 1) {\n        return 1;\n    }\n\n    $result = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt03_oitr.php:27\n\
    Stack trace:\n#0 /tmp/tmpt03_oitr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt03_oitr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Calculating factorial of non-negative numbers only\n    // to avoid returning\
    \ an error when input is 0 or negative\n    if ($n < 1) {\n        return 0;\n\
    \    }\n    // Calculating factorial of positive numbers only\n    // to avoid\
    \ returning an error when input is 0 or negative\n    if ($n >= 1) {\n       \
    \ // Calculating factorial of n!\n        $fact = 1;\n        // Calculating factorial\
    \ of (n-1)!\n        $fact = factorial($n - 1) * $fact;\n        // Calculating\
    \ factorial of (n-2)!\n        $fact = factorial($n - 2) * $fact;\n        //\
    \ ...\n        // Calculating factorial of 1!\n        $fact = factorial($n) *\
    \ $fact;\n        // Return the factorial of the received number\n        return\
    \ $fact;\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp_1u8pcy1.php:22\nStack trace:\n#0 /tmp/tmp_1u8pcy1.php(34): special_factorial(4)\n\
    #1 /tmp/tmp_1u8pcy1.php(38): candidate(4)\n#2 /tmp/tmp_1u8pcy1.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_1u8pcy1.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) {\n        return 1;\n    } else {\n        return $n * (special_factorial($n\
    \ - 1));\n    }\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_e2ib9a.php:22\n\
    Stack trace:\n#0 /tmp/tmpf_e2ib9a.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpf_e2ib9a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1)\n        return 1;\n    else {\n        return $n * (special_factorial($n\
    \ - 1));\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdj0smjf.php:23\n\
    Stack trace:\n#0 /tmp/tmptdj0smjf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptdj0smjf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n\n    $f = 1;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $f *= $i;\n    }\n    return $f;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpse5c22w6.php:27\n\
    Stack trace:\n#0 /tmp/tmpse5c22w6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpse5c22w6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 1)\n        return 1;\n    return $n * ($special_factorial($n - 1));\n\
    }\n\n$numbers = [1, 2, 3, 4, 5];\nforeach ($numbers as $n) {\n    echo $special_factorial($n).\"\
    <br>\\n\";\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpqbh9n2mq.php:18\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpqbh9n2mq.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return $factorial = pow($n, $factorial);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jcssa0d.php:19\n\
    Stack trace:\n#0 /tmp/tmp9jcssa0d.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9jcssa0d.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0 || $n == 1) {\n        return 1;\n    }\n    return factorial($n)\
    \ * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpcylpn9xx.php:14\nStack trace:\n#0 /tmp/tmpcylpn9xx.php(18): special_factorial(4)\n\
    #1 /tmp/tmpcylpn9xx.php(22): candidate(4)\n#2 /tmp/tmpcylpn9xx.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcylpn9xx.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $n = (int)$n;\n    if ($n < 2)\n        return 1;\n    return $n * ($n - 1)\
    \ * ($n - 2) * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_j9pfwv.php:22\n\
    Stack trace:\n#0 /tmp/tmp9_j9pfwv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9_j9pfwv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n\n  for ($i = 0; $i < $n; $i++) {\n    $result *= $i;\n  }\n\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_k_bfml.php:25\n\
    Stack trace:\n#0 /tmp/tmp4_k_bfml.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4_k_bfml.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factorial = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$factorial *= $i;\n\t}\n\
    \treturn $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_gumob8.php:23\n\
    Stack trace:\n#0 /tmp/tmpd_gumob8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd_gumob8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuoju93d.php:23\n\
    Stack trace:\n#0 /tmp/tmpeuoju93d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpeuoju93d.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Base case\n  if ($n === 0) {\n    return 1;\n  }\n  // Recursive case\n \
    \ $ret = factorial($n - 1);\n  return $ret  * $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpl97a6m72.php:16\nStack trace:\n#0 /tmp/tmpl97a6m72.php(20): special_factorial(4)\n\
    #1 /tmp/tmpl97a6m72.php(24): candidate(4)\n#2 /tmp/tmpl97a6m72.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl97a6m72.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9qe7906.php:25\n\
    Stack trace:\n#0 /tmp/tmpi9qe7906.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpi9qe7906.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  }\n\n  return ($n) * (special_factorial($n\
    \ - 1));\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmponbzt3g_.php:23\n\
    Stack trace:\n#0 /tmp/tmponbzt3g_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmponbzt3g_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 1) {\n        return 1;\n    }\n    $factorial = 1;\n    while ($n--)\
    \ {\n        $factorial *= $n;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ksucz2p.php:26\n\
    Stack trace:\n#0 /tmp/tmp_ksucz2p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_ksucz2p.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7c8nugi.php:22\n\
    Stack trace:\n#0 /tmp/tmpm7c8nugi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpm7c8nugi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Let's get the factorial of $n\n  $fact = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $fact *= $i;\n  }\n  return $fact;\n}\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01_l_yeu.php:23\n\
    Stack trace:\n#0 /tmp/tmp01_l_yeu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp01_l_yeu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpig20xh67.php:23\n\
    Stack trace:\n#0 /tmp/tmpig20xh67.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpig20xh67.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $n = (int) $n;\n    if($n == 0)\n        return 1;\n    elseif($n == 1)\n\
    \        return $n;\n    else\n        return $n * special_factorial($n - 1);\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoo0vyxs0.php:24\n\
    Stack trace:\n#0 /tmp/tmpoo0vyxs0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpoo0vyxs0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 1) {\n        $n = 1;\n    }\n    $result = 1;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1jvt80yq.php:26\n\
    Stack trace:\n#0 /tmp/tmp1jvt80yq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1jvt80yq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n\n    if ($n==1) {\n        return\
    \ $n;\n    }\n\n    return $n*special_factorial($n-1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdatli534.php:27\n\
    Stack trace:\n#0 /tmp/tmpdatli534.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdatli534.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0)\n        return 1;\n\n    $factorial = 1;\n    for ($i = 1; $i\
    \ <= $n; $i++)\n        $factorial *= $i;\n\n    return $factorial;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3h4gwmbq.php:26\n\
    Stack trace:\n#0 /tmp/tmp3h4gwmbq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3h4gwmbq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return $factorial = array_reduce(range($n, 1, -1), (function($carry,$n) {\
    \ return $carry + $n*$n; }), 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvav9w3qd.php:19\n\
    Stack trace:\n#0 /tmp/tmpvav9w3qd.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvav9w3qd.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3dvmwq79.php:22\n\
    Stack trace:\n#0 /tmp/tmp3dvmwq79.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3dvmwq79.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 1) {\n        return 1;\n    } else {\n        return $n * (special_factorial($n\
    \ - 1));\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8ycu73c.php:23\n\
    Stack trace:\n#0 /tmp/tmpo8ycu73c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpo8ycu73c.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    $factorial = $factorial\
    \ * $i;\n  }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjq_t82s5.php:23\n\
    Stack trace:\n#0 /tmp/tmpjq_t82s5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjq_t82s5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Check that n is greater than or equal to 1\n  if ($n <= 1) {\n    echo 'The\
    \ number ' . $n . ' cannot be factorialized!';\n    echo '<br />';\n    echo 'The\
    \ factorial of ' . $n . ' must be greater than zero!';\n    exit;\n  }\n  // Initialise\
    \ the variable \"fact\" to the factorial of n\n  $fact = 1;\n  // Calculate and\
    \ display the factorial of n\n  for ($i = 1; $i <= $n; $i++) {\n    $fact = $fact\
    \ * $i;\n    echo 'The factorial of ' . $n . ' is ' . $fact . '<br />';\n  }\n\
    \  // Return the factorial of n\n  return $fact;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "The factorial of 4 is 1<br />The factorial of 4 is 2<br />The factorial\
    \ of 4 is 6<br />The factorial of 4 is 24<br />\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqv_c835v.php:34\nStack trace:\n#0 /tmp/tmpqv_c835v.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqv_c835v.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) return 1;\n    return ($n * (special_factorial($n-1))) * pow\
    \ ($n,$n);\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvnfrawsw.php:19\n\
    Stack trace:\n#0 /tmp/tmpvnfrawsw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvnfrawsw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Check to see if the number is negative:\n    if ($n < 0){\n        // Yes,\
    \ the number is negative. Throw an error.\n        echo \"The number you are trying\
    \ to calculate the factorial of is negative. \";\n        // Exit the program:\n\
    \        exit();\n    }\n    // Initialize the factorial variable to 1:\n    $factorial\
    \ = 1;\n    // Check to see if the number is greater than zero:\n    if ($n >\
    \ 0){\n        // No. Just keep going:\n        echo \"The factorial of $n is\
    \ $factorial.\\n\";\n    } else {\n        // No. Throw an error:\n        echo\
    \ \"No number entered was greater than zero. \\n\";\n        // Exit the program:\n\
    \        exit();\n    }\n    // Loop as long as $n is greater than zero:\n   \
    \ for($i = 1; $i <= $n; $i++){\n        // Multiply the previous factorial by\
    \ $i:\n        $factorial *= $i;\n    }\n    // Return the factorial:\n    return\
    \ $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "The factorial of 4 is 1.\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbr0jl5c8.php:43\nStack trace:\n#0 /tmp/tmpbr0jl5c8.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbr0jl5c8.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ return $n * special_factorial($n - 1);\n}\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $f = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $f *= $i;\n    }\n  \
    \  return $f;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv91vw4rr.php:23\n\
    Stack trace:\n#0 /tmp/tmpv91vw4rr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpv91vw4rr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngp6jaqp.php:24\n\
    Stack trace:\n#0 /tmp/tmpngp6jaqp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpngp6jaqp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0) {\n        echo \"Error: Negative factorials are not allowed\"\
    ;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial\
    \ = $factorial * $i;\n    }\n    return $factorial;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkk8u7az1.php:25\n\
    Stack trace:\n#0 /tmp/tmpkk8u7az1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkk8u7az1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaefjfyul.php:23\n\
    Stack trace:\n#0 /tmp/tmpaefjfyul.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpaefjfyul.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0)\n        return 1;\n\n    if ($n == 1)\n        return $n;\n\n\
    \    $factorial = 1;\n    for ($i = 1; $i < $n; $i++)\n        $factorial *= $i;\n\
    \n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7zq3wjr.php:29\n\
    Stack trace:\n#0 /tmp/tmpk7zq3wjr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk7zq3wjr.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $resultado = $n;\n  for ($i = 1; $i <= $n; $i++) {\n    $resultado = $resultado\
    \ * ($n - $i);\n  }\n  return $resultado;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1lqqrg_e.php:23\n\
    Stack trace:\n#0 /tmp/tmp1lqqrg_e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1lqqrg_e.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if (!is_numeric($n) || $n < 1) {\n        return false;\n    }\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpufj8d_i3.php:26\n\
    Stack trace:\n#0 /tmp/tmpufj8d_i3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpufj8d_i3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for($i = 1; $i < $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbggia0f7.php:23\n\
    Stack trace:\n#0 /tmp/tmpbggia0f7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbggia0f7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return\
    \ 1;\n    }\n    if ($n == 1) {\n        return $n;\n    }\n    return ($n * (special_factorial($n\
    \ - 1)) * (special_factorial($n - 2)));\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93ggz73r.php:28\n\
    Stack trace:\n#0 /tmp/tmp93ggz73r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp93ggz73r.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 1) {\n    return 1;\n  }\n  return special_factorial($n - 1) * $n;\n\
    }\n</code>\nThis code uses the recursion feature of the language. The function\
    \ calls itself until it reaches the termination condition and then it returns\
    \ the calculated value of the factorial.\n<|/ a dscore=0 |>\n<| c |>\nThis answer\
    \ is only valid if you're working with small numbers. If you're working with large\
    \ numbers, you'll run into stack overflow.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I didn't know about the recursive definition. I will read about it now.\n\
    <|/ c |>\n<| a dscore=0 tags=factorial,php |>\nThis is a solution in JavaScript\
    \ that does not use recursion.  It uses a while loop to compute the first n factorials.\
    \  It returns a string that is a concatenation of the factorials.  It will return\
    \ a string if n is 1.\n<code>\nvar factorials = function(n){\n    var fact = '';\n\
    \    var i = 0;\n    while(i < n){\n        fact += i;\n        i++;\n    }\n\
    \    return fact;\n};\n\nconsole.log(factorials(4));\n</code>\n<|/ a |>\n<| a\
    \ |>\nI used this function and it's works well for me, \n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4fv_8bjm.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0) {\n        return -1;\n    }\n    return ($n) * (special_factorial($n\
    \ - 1));\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9k4vdf7.php:22\n\
    Stack trace:\n#0 /tmp/tmps9k4vdf7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmps9k4vdf7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n < 2)\n\t\treturn 1;\n\treturn $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkk_iqr2.php:21\n\
    Stack trace:\n#0 /tmp/tmpkkk_iqr2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkkk_iqr2.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n == 0) {\n\t\treturn 1;\n\t} else if ($n == 1) {\n\t\treturn $n;\n\t} else\
    \ if ($n == 2) {\n\t\treturn 2 * $n;\n\t} else if ($n <= 3) {\n\t\treturn $n *\
    \ special_factorial($n - 1);\n\t} else if ($n >= 4) {\n\t\treturn $n * special_factorial($n\
    \ - 3);\n\t}\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecmtsuhc.php:29\n\
    Stack trace:\n#0 /tmp/tmpecmtsuhc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpecmtsuhc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = factorial($n);\n\n    for ($i = 1; $i <= $n; $i++) {\n      \
    \  $factorial *= $i;\n    }\n\n    return $factorial;\n}\n</code>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpewruh1x9.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) return 1;\n    return $n! * special_factorial($n - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5xl7zqlw.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkjo39l5f.php:23\n\
    Stack trace:\n#0 /tmp/tmpkjo39l5f.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkjo39l5f.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycd15kgh.php:22\n\
    Stack trace:\n#0 /tmp/tmpycd15kgh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpycd15kgh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 0; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vlzx5qm.php:22\n\
    Stack trace:\n#0 /tmp/tmp2vlzx5qm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2vlzx5qm.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n\
    \ - 1);\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovtl3nlo.php:21\n\
    Stack trace:\n#0 /tmp/tmpovtl3nlo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpovtl3nlo.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 1) {\n        return 1;\n    }\n    return factorial($n) * ($n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpaxrj6_ew.php:14\nStack trace:\n#0 /tmp/tmpaxrj6_ew.php(18): special_factorial(4)\n\
    #1 /tmp/tmpaxrj6_ew.php(22): candidate(4)\n#2 /tmp/tmpaxrj6_ew.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpaxrj6_ew.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr08rmbtz.php:22\n\
    Stack trace:\n#0 /tmp/tmpr08rmbtz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpr08rmbtz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 1) {\n        return 1;\n    }\n    return $n * (special_factorial($n\
    \ - 1));\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc870h3i4.php:22\n\
    Stack trace:\n#0 /tmp/tmpc870h3i4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpc870h3i4.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   \n    // I set the initial result to 1. \n    $result = 1;\n    \n    // I\
    \ calculate the factorial of the given number.\n    // I do this in a while loop,\
    \ which will continue as long as the number \n    // is not 0\n    while($n !=\
    \ 0){\n        $result = $result * $n;\n        $n = $n - 1;\n    }\n    \n  \
    \  // I return the result to the calling function.\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s0zxbcq.php:32\n\
    Stack trace:\n#0 /tmp/tmp0s0zxbcq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0s0zxbcq.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n<=1) {\n\t\treturn 1;\n\t}\n\treturn $n*special_factorial($n-1);\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8f02v2xh.php:22\n\
    Stack trace:\n#0 /tmp/tmp8f02v2xh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8f02v2xh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39ap35bf.php:23\n\
    Stack trace:\n#0 /tmp/tmp39ap35bf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp39ap35bf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 1) {\n        return $n;\n    }\n\n    $result = 1;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75eg02a9.php:28\n\
    Stack trace:\n#0 /tmp/tmp75eg02a9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp75eg02a9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $res = $n; // Start at n = 0.\n    for($i = 1; $i <= $n; $i++) {\n       \
    \ $res *= $i; // Multiply by n!.\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjv4siuc.php:23\n\
    Stack trace:\n#0 /tmp/tmpdjv4siuc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdjv4siuc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $result = 1;\n\tfor ($i=1; $i <= $n; $i++) {\n\t\t$result *= $i;\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2oz8m7kw.php:23\n\
    Stack trace:\n#0 /tmp/tmp2oz8m7kw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2oz8m7kw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $f = 0;\n\tfor($i = 1; $i <= $n; $i++) {\n\t\t$f = $i * $f;\n\t}\n\treturn $f;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsjkg7oo.php:23\n\
    Stack trace:\n#0 /tmp/tmpnsjkg7oo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnsjkg7oo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2cqi8617.php:22\n\
    Stack trace:\n#0 /tmp/tmp2cqi8617.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2cqi8617.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9rnbsl9.php:26\n\
    Stack trace:\n#0 /tmp/tmpb9rnbsl9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb9rnbsl9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 0; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n$new_value = special_factorial($value);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdja6oque.php:23\n\
    Stack trace:\n#0 /tmp/tmpdja6oque.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdja6oque.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n < 0) {\n    return 0; // n is negative\n  }\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2fyaly8.php:26\n\
    Stack trace:\n#0 /tmp/tmph2fyaly8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmph2fyaly8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n >= 1) {\n    $factorial *= $n;\n    $n--;\n  }\n\
    \  return $factorial;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding why\
    \ and/or how this code answers the question improves its long-term value.\n<|/\
    \ c |>\n<| c |>\nThank you for your feedback.\n<|/ c |>\n<| a tags=php |>\nTry\
    \ this \n<code>\n$result = 1;\n$num = 0;\nwhile($num < $max)\n{\n    $result *=\
    \ $num;\n    $num++;\n}\necho $result;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nTry This \n<code>\n<?php\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptqeqq93u.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Define factorial\n    function factorial($n) {\n        if ($n < 0)\n \
    \           return 0;\n        elseif ($n == 0)\n            return 1;\n     \
    \   else\n            return $n * factorial($n - 1);\n    }\n    // Define the\
    \ special factorial\n    function special_factorial($n) {\n        if ($n < 0)\n\
    \            return 0;\n        elseif ($n == 0)\n            return 1;\n    \
    \    else\n            return $n * factorial($n - 1);\n    }\n    // Return the\
    \ factorial of $n\n    return factorial($n);\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Cannot redeclare special_factorial() (previously declared\
    \ in /tmp/tmpef9db2_s.php:10) in /tmp/tmpef9db2_s.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return ($n === 0) ? 1 : $n * special_factorial(--$n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_ti7pdx.php:19\n\
    Stack trace:\n#0 /tmp/tmpc_ti7pdx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpc_ti7pdx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhtoidt5.php:23\n\
    Stack trace:\n#0 /tmp/tmpqhtoidt5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqhtoidt5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 0) return null;\n    if ($n == 0) return 1;\n    return $n * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkwm05t3t.php:21\n\
    Stack trace:\n#0 /tmp/tmpkwm05t3t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkwm05t3t.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 0; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgzgjg43.php:23\n\
    Stack trace:\n#0 /tmp/tmpmgzgjg43.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmgzgjg43.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return\
    \ 1;\n    }\n\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6v1es14g.php:26\n\
    Stack trace:\n#0 /tmp/tmp6v1es14g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6v1es14g.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpergzecym.php:23\n\
    Stack trace:\n#0 /tmp/tmpergzecym.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpergzecym.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n == 0) {\n\t\treturn 1;\n\t}\n\treturn $factorial[$n] * special_factorial($n-1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qnmmnnl.php:22\n\
    Stack trace:\n#0 /tmp/tmp5qnmmnnl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5qnmmnnl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegglsbdk.php:23\n\
    Stack trace:\n#0 /tmp/tmpegglsbdk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpegglsbdk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 0; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps80vu9ds.php:23\n\
    Stack trace:\n#0 /tmp/tmps80vu9ds.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps80vu9ds.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ihjf_1g.php:24\n\
    Stack trace:\n#0 /tmp/tmp5ihjf_1g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5ihjf_1g.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0mf21l5.php:23\n\
    Stack trace:\n#0 /tmp/tmpa0mf21l5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpa0mf21l5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factorial = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$factorial *= $i;\n\t}\n\
    \treturn $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8txutaa.php:23\n\
    Stack trace:\n#0 /tmp/tmpp8txutaa.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpp8txutaa.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhlxtywy.php:26\n\
    Stack trace:\n#0 /tmp/tmpvhlxtywy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvhlxtywy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    if ($n == 0 || $n == 1) {\n        return 1;\n    } else\
    \ {\n        for ($i = 2; $i <= $n; $i++) {\n            $factorial *= $i;\n \
    \       }\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mjbuhst.php:27\n\
    Stack trace:\n#0 /tmp/tmp9mjbuhst.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9mjbuhst.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $n = (int) $n;\n  $factorial = 1;\n  if ($n <= 1) {\n    return $factorial;\n\
    \  }\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgchcr_t_.php:27\n\
    Stack trace:\n#0 /tmp/tmpgchcr_t_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgchcr_t_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n < 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn $n * special_factorial($n\
    \ - 1);\n\t}\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxk0mg4n.php:23\n\
    Stack trace:\n#0 /tmp/tmppxk0mg4n.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppxk0mg4n.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n < 2) {\n        return $n;\n    }\n    // Calculate brazilian factorial\
    \ of the $n number\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $factorial *= $i;\n    }\n    // Return it\n    return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppay2yamj.php:27\n\
    Stack trace:\n#0 /tmp/tmppay2yamj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppay2yamj.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    else {\n        return $n *\
    \ special_factorial(--$n);\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfu6a4da3.php:24\n\
    Stack trace:\n#0 /tmp/tmpfu6a4da3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfu6a4da3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $fact *= $i;\n   \
    \ }\n    return $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx65fyuoa.php:23\n\
    Stack trace:\n#0 /tmp/tmpx65fyuoa.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpx65fyuoa.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfatgsynl.php:23\n\
    Stack trace:\n#0 /tmp/tmpfatgsynl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfatgsynl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if (!is_integer($n)) {\n        echo \"Error!\";\n        exit;\n    }\n \
    \   $res = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $res *= $i;\n    }\n\
    \    return $res;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptizukgp3.php:26\n\
    Stack trace:\n#0 /tmp/tmptizukgp3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptizukgp3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcva5nt4u.php:23\n\
    Stack trace:\n#0 /tmp/tmpcva5nt4u.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcva5nt4u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    if ($n == 0) {\n        return 1;\n    } else if ($n\
    \ == 1) {\n        return $factorial;\n    } else {\n        while ($n > 0) {\n\
    \            $factorial *= $n;\n            $n--;\n        }\n        return $factorial;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplui4ry0f.php:30\n\
    Stack trace:\n#0 /tmp/tmplui4ry0f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplui4ry0f.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $f = 1;\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n       \
    \ $factorial *= $i;\n        $f *= $i;\n    }\n    return $factorial;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvi2cb5xh.php:25\n\
    Stack trace:\n#0 /tmp/tmpvi2cb5xh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvi2cb5xh.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $nFactorial = array_fill(0, $n, 1);\n    $nFactorial[0] = 1;\n\n    for ($x\
    \ = 1; $x <= $n; $x++) {\n        for ($i = 1; $i <= $x; $i++) {\n           \
    \ $nFactorial[$x] *= $i;\n        }\n    }\n\n    return $nFactorial[$n - 1];\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjx2rp4lr.php:27\n\
    Stack trace:\n#0 /tmp/tmpjx2rp4lr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjx2rp4lr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
