name: HumanEval_121_solution
language: php
results:
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = [];\n    $odd = [];\n  \
    \  foreach ($lst as $item) {\n        if ($item % 2 == 0) {\n            $evens[]\
    \ = $item;\n        } else {\n            $odd[] = $item;\n        }\n    }\n\n\
    \    return array_sum(array_slice($evens, 0, count($evens) / 2)) + array_sum(array_slice($odd,\
    \ count($evens) / 2, count($evens)));\n}\n\n$arr = [5, 8, 7, 1];\n$sol = solution($arr);\n\
    echo $sol; // prints 12\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ix1gxd_.php:29\n\
    Stack trace:\n#0 /tmp/tmp1ix1gxd_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1ix1gxd_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if(count($lst) == 0) return 0;\n\
    \    $even = 0;\n    $odd = 0;\n    foreach($lst as $v){\n        if ($v%2 ==0)\
    \ $even += $v;\n        else $odd += $v;\n    }\n    return $even + $odd;\n}\n\
    </code>\n<|/ a dscore=0 tags=php,algorithm |>\n<| c |>\nThank you for your answer!\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$numbers = array(\n    1 => 5,\n    2 => 8,\n\
    \    3 => 7,\n    4 => 1\n);\n\n$sumOdd = 0;\n$sumEven = 0;\n\nforeach ($numbers\
    \ as $k => $num) {\n    if ($num % 2 != 0) {\n        $sumEven+= $num;\n    }\
    \ else {\n        $sumOdd+= $num;\n    }\n}\necho 'Sum of even numbers: ' . $sumEven;\n\
    echo '<br />Sum of odd numbers: ' . $sumOdd;\n</code>\n<|/ a dscore=0 tags=php,algorithm\
    \ |>\n<| a dscore=0 |>\nIn Perl\n<code>\nmy = qw/5 8 7 1/;\n$even = sum grep {\
    \ ($_ % 2) == 0 };\n$odd = sum grep { not ($_ % 2) };\n</code>\nOr, if you want\
    \ a variable number of elements $arr:\n<code>\nmy = qw/5 8 7 1/;\nmy $even = $arr[0]+$arr[1]+$arr[2];\n\
    my $odd = $arr[3]+$arr[4];\n</code>\n<|/ a tags=php,algorithm |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = [1,2,3,4,5,6];\n$even = array_sum(array_filter($arr,'is_even'));\n\
    $odd = array_sum(array_filter($arr,'is_odd'));\necho \"Sum of even numbers is:\
    \ \".$even;\necho \"Sum of odd numbers is: \".$odd;\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0ql2br30.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $oddSum = 0;\n    foreach ($lst as\
    \ $item) {\n        if ($item % 2 == 1) {\n            $oddSum += $item;\n   \
    \     }\n    }\n    return $oddSum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnylfn0e.php:22\n\
    Stack trace:\n#0 /tmp/tmptnylfn0e.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptnylfn0e.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = array_filter($lst, 'is_int');\n\
    \    $odds = array_filter($lst, 'is_int');\n    return array_sum(array_diff($odds,\
    \ $evens));\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkfixe46p.php:17\n\
    Stack trace:\n#0 /tmp/tmpkfixe46p.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkfixe46p.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (empty($lst)) {\n        return\
    \ 0;\n    }\n    // Odd positions means they have even values\n    $evens = $odds\
    \ = 0;\n    foreach ($lst as $key => $value) {\n        if ($key % 2 == 0) {\n\
    \            $evens += $value;\n        } else {\n            $odds += $value;\n\
    \        }\n    }\n    return ($evens + $odds);\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\n<?php \n    function fun($nums)\n    {\n        return $nums[count($nums)-1];\n\
    \    }\n\n    function fun2($nums,$count)\n    {\n        if($count == count($nums)-1)\n\
    \        {\n            return fun($nums);\n        }\n        else\n        {\n\
    \            return $nums[$count] + fun2($nums,$count+1);\n        }\n    }\n\n\
    \    function fun3($nums)\n    {\n        return fun2($nums,0);\n    }\n\n   \
    \ echo fun3(array(1,2,3,4,5));\n</code>\n<|/ a tags=php,arrays,sum |>\n<| c |>\n\
    Why would you choose to not use array_sum? The only reason I can see to not use\
    \ array_sum is if the OP can't use it. It's a shame that you can't use array_sum.\n\
    <|/ c |>\n<| a tags=php,arrays,sum |>\n<code>\n<?php \n$a=array(1,2,3,4,5,6);\n\
    $sum=0;\n$sum=$a[sizeof($a)-1]+$a[sizeof($a)-2];\n\necho $sum;\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv0gehaop.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) < 3) return 0;\n\
    \    $odd = 0;\n    foreach ($lst as $i => $n) {\n        if ($i % 2 != 0) continue;\n\
    \        $odd += $n;\n    }\n    return $odd;\n}\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnnit9ql.php:24\n\
    Stack trace:\n#0 /tmp/tmpwnnit9ql.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwnnit9ql.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  return array_sum(array_filter($lst,\
    \ 'odd'));\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,algorithm,array-difference\
    \ |>\n<| a tags=php,arrays,algorithm,array-difference dscore=0 |>\nThis solution\
    \ works for me:\n<code>\n<?php\n$array = [3, 6, 2, 5, 9, 1, 4];\n$array_result\
    \ = array_filter(\n    $array,\n    function($n) {\n        return $n % 2 == 0;\n\
    \    }\n);\nprint_r($array_result);\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI took\
    \ your array and just modified the code so that it also returns negative numbers.\
    \ If you don't like that behavior you can make it return only positive numbers\
    \ by changing the return to return $n % 2 != 0; The other array methods are very\
    \ well documented but array_filter() is the method that most people are forgetting\
    \ about. array_filter() takes a callback function and returns a new array which\
    \ contains all of the elements that returned true from the callback function.\
    \ Since arrays in PHP support bool as well as integer values this lets you check\
    \ for even numbers by returning a boolean value.\n<code>\n$array = [3, 6, 2, 5,\
    \ 9, 1, 4];\n\n$even = array_filter($array, function($value) {\n    return $value\
    \ % 2 == 0;\n});\n\n$odd = array_filter($array, function($value) {\n    return\
    \ $value % 2 != 0;\n});\n\n$sum = array_sum($even) + array_sum($odd);\n\necho\
    \ 'Sum for Evens: ' . $sum . \"\\n\";\necho 'Sum for Odds: ' . -$sum . \"\\n\"\
    ;\n</code>\n<|/ a tags=php,arrays,algorithm,array-difference |>\n<| c |>\nI used\
    \ the array from OP's question and I got the result `Sum for Evens: 24\nSum for\
    \ Odds: -1` on PHP 7.2. I also get a warning `Warning: array_sum() expects parameter\
    \ 1 to be array, boolean given`. PHP 7.2.27-0ubuntu0.18.04.1\n<|/ c |>\n<| c |>\n\
    I did not realize that `array_sum()` returned a boolean. I've updated the code\
    \ to make it return integers instead of boolean.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$array = [3, 6, 2, 5, 9, 1, 4];\n$even = array_filter($array, function($value)\
    \ {\n  return $value % 2 == 0;\n});\n$odd = array_filter($array, function($value)\
    \ {\n  return $value % 2 != 0;\n});\n$sum =array_sum($even)+array_\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo3_rvoxw.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    foreach ($lst as $key => $value)\
    \ {\n        if ($key % 2 == 0) {\n            $sum = $value;\n        }\n   \
    \ }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThe only issue here is that\
    \ the loop will continue even if the sum is 0, which is not the case here.\n<|/\
    \ c |>\n<| c |>\nYes I agree that there can be other solutions. I thought of implementing\
    \ it in many different ways because I wanted to show how it can be done with loops.\
    \ I just wanted to show how it can be done with loops. Thanks for your comment\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php \n$sum=0;\nforeach($array as $key\
    \ => $value) {\n    if($key%2==0) $sum+=$value;\n}\n</code>\n<|/ a tags=php |>\n\
    <| a dscore=1 |>\nI do not know of any native PHP method that can do this, but\
    \ a very concise way of doing it is to use array_reduce:\n<code>\n<?php\n$sum\
    \ = array_reduce($list, function($result, $item) use ($list) {\n    return $result\
    \ + ($item % 2);\n});\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n\
    $sum = 0;\n$list = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n$array = array_filter($list,\
    \ function($v) { return $v % 2 === 0; });\n\nforeach ($array as $key => $value)\
    \ {\n    $sum += $value;\n}\n\necho \"Sum: \".$sum;\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nWhile this code may answer the question, it would be better to explain\
    \ how it solves the problem without introducing others and why to use it. Code-only\
    \ answers are not useful in the long run.\n<|/ c |>\n<| a dscore=0 |>\nI believe\
    \ this would be the most efficient in terms of execution time and memory usage.\
    \ Try this code:\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppsfcul_z.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $res = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 2 === 1) {\n            $res += $value;\n \
    \       }\n    }\n    return $res;\n}\n</code>\n<|/ a |>\n<| c |>\nI doubt it\
    \ is efficient to iterate a list twice and sum the values.\n<|/ c |>\n<| c |>\n\
    This also doesn't work if you have an empty list\n<|/ c |>\n<| c |>\n: Yes it\
    \ does work, although I think your example is flawed because it assumes an array\
    \ of size 1, i.e. an even number of elements.\n<|/ c |>\n<| c |>\n, why do you\
    \ think this would not work if you have an empty list?\n<|/ c |>\n<| c |>\n: Because\
    \ you have a nested foreach and it will throw an error if there are no elements\
    \ in the list.\n<|/ c |>\n<| a tags=php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj0xqvtqn.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(array_slice($lst,\
    \ 0, array_search($lst[0], $lst)));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays\
    \ |>\nThis may seem like a strange way to use array_sum and array_slice but it\
    \ will get the job done.\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsywk2u07.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odd = array_filter($lst);\n    $even\
    \ = array_filter($lst, function($x){\n        return !($x & 1);\n    });\n   \
    \ return array_sum(array_map(function($x){\n        return $x * 2 - 2 * $x & 1;\n\
    \    }, $odd) & array_map(function($x){\n        return $x * 2 - 2 * $x & 1;\n\
    \    }, $even));\n}\n</code>\nAs you see in the code, first we create two arrays,\
    \ one with all odd numbers and one with all even numbers, then we apply some arithmetic\
    \ operations between these two arrays. And the solution simply converts every\
    \ odd number to even number and sums them.\n<|/ a tags=arrays,array-filter,sum,php,filter\
    \ |>\n<| a tags=arrays,array-filter,sum,php,filter |>\nYou can try this:\n<code>\n\
    <?php\n\n$a = array(1, 2, 3, 4, 5);\n$b = array(1, 2, 3, 4);\n\n$sum = array_sum(array_intersect($a,\
    \ array_flip($b))); // 12\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpopns5818.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    sort($lst);\n    $total = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 2 === 0) {\n       \
    \     $total += $value;\n        }\n    }\n    return $total;\n}\n</code>\n<|/\
    \ a tags=php,performance,laravel |>\n<| a dscore=0 tags=php,performance,laravel\
    \ |>\nI suggest you write it simple with php:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4jkhidxo.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $evens = array_filter($lst, 'is_int');\n\
    \  $evens_sum = array_sum($evens);\n\n  return $evens_sum - array_sum(array_filter($lst,\
    \ 'is_odd'));\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nYour code won't work with\
    \ the input `solution([30, 13, 24, 321])`\n<|/ c |>\n<| a tags=php |>\nThis one\
    \ would work for the specific scenario you provided. The only caveat is that if\
    \ the array contains negative integers it would return the wrong answer. For that\
    \ specific scenario you would need to check the value against the opposite negative\
    \ number:\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6cs0f7a5.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  // code here\n  return $sum;\n}\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpikj0le8v.php:16\n\
    Stack trace:\n#0 /tmp/tmpikj0le8v.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpikj0le8v.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $res = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 2 == 0) {\n            $res += $value;\n  \
    \      }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvv7wy8i.php:24\n\
    Stack trace:\n#0 /tmp/tmpqvv7wy8i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqvv7wy8i.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = array();\n    for ($i=0;\
    \ $i<count($lst); $i++) {\n        if ($i%2 == 0) {\n            $result[] = $lst[$i];\n\
    \        } else {\n            $result += array_filter(range($lst[$i], $lst[$i+1]),\
    \ 'is_int');\n        }\n    }\n    return array_sum($result);\n}\n</code>\n<|/\
    \ a tags=algorithm,math,php dscore=3 |>\n<| a tags=algorithm,math,php dscore=3\
    \ |>\nThe naive solution works fine but has a worst-case time complexity of O(n^2),\
    \ where n is the number of elements in your list. Even worse is O(n^2) on a \"\
    real\" machine with some crazy big numbers. That is why I tend to prefer the \"\
    clever\" solution.\nHere is how I did it using PHP:\n<code>\n<?php\n\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_ib90msi.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = 0;\n    foreach ($lst as\
    \ $key => $value) {\n        $result += ($key % 2 != 0) ? $value : 0;\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpojyjs679.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Write your code here\n    sort($lst);\n\
    \    $odd = array();\n    $even = array();\n    foreach ($lst as $key => $value)\
    \ {\n        if ($key % 2 == 0) {\n            $even[] = $value;\n        }else{\n\
    \            $odd[] = $value;\n        }\n    }\n    $result = array_sum($odd);\n\
    \    return $result;\n}\n\n$list = [2, 3, 7, 10];\n$result = solution($list);\n\
    echo $result;\n</code>\n<|/ a dscore=0 tags=php,algorithm,arrays |>\n<| c |>\n\
    I appreciate your answer but I am not allowed to use any functions from the standard\
    \ PHP libary.\n<|/ c |>\n<| c |>\nI posted a sample solution using only standard\
    \ library functions. If you can not use them, just use the `$list` variable. You\
    \ should also know that in PHP, we start counting array indexing from 0 not 1\n\
    <|/ c |>\n<| c |>\nYes I know but my code is just an example of how I would do\
    \ it, it's not meant to be copy and paste ready code. I'm new to coding so I apologize\
    \ for that.\n<|/ c |>\n<| c |>\nI thought my answer was very clear enough that\
    \ you were able to write the solution without using built-in PHP functions. The\
    \ code is not meant to be a complete solution. I hope this clarifies it.\n<|/\
    \ c |>\n<| c |>\nYes I understand but it's not the point. The point is that I\
    \ haven't been able to use any built-in functions or library functions. I'm new\
    \ to PHP so I don't know all of the functions. I appreciate your help.\n<|/ c\
    \ |>\n<| a tags=php,algorithm,arrays |>\nThe solution I came up with:\n<code>\n\
    <?php\n$list = [2, 3, 7, 10];\n$even = [];\n$odd = [];\nforeach ($list as $key\
    \ => $value) {\n    $key = array_search($value, $even);\n    if ($key == FALSE)\
    \ {\n        array_push($even, $value);\n    }else{\n        array_push($odd,\
    \ $value);\n    }\n}\n\necho array_sum($odd);\nfunction candidate(...$args) {\n\
    \    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6n01ler0.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    foreach($lst as $key => $value) {\n\
    \        $temp = $value;\n        $sum = 0;\n        while(true) {\n         \
    \   $sum += $temp % 2;\n            if($sum == 0 && $key == 0) {\n           \
    \     return $value;\n            }\n            $temp++;\n        }\n    }\n\
    \    return 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$array=array(5,8,7,1,3,30,13,24,321);\n\
    $length=count($array);\nfor($i=0;$i<$length;$i++){\n    if($i%2==1){\n       \
    \ $sum+=$array[$i];\n    }\n}\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<|\
    \ c |>\nI guess you got the question wrong. You should get the sum of odd numbers\
    \ only, not the sum of odd numbers and even numbers.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmxlcqqsd.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odd = 0;\n    for ($i = 0; $i <\
    \ count($lst); $i++) {\n        if ($i % 2 === 0) {\n            $odd += $lst[$i];\n\
    \        }\n    }\n\n    return $odd;\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,arrays\
    \ |>\nAnother solution (but using array_filter):\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4l06pzn4.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $sum = 0;\n  foreach ($lst as $num)\
    \ {\n    if ($num % 2 === 0) {\n      $sum += $num;\n    }\n  }\n  return $sum;\n\
    }\n</code>\n<|/ a tags=loops,arrays,php |>\n<| c |>\nI like how this answer uses\
    \ a more logical approach than mine :). I'll +1 it if OP accepts.\n<|/ c |>\n\
    <| c |>\nThis solution doesn't work for me.  It seems to work for you?  Please\
    \ try running this code.  It outputs `0` for me: http://sandbox.onlinephpfunctions.com/code/10a68a18d44cf7d15acb0b4ac0c50b57ce7ca996\n\
    <|/ c |>\n<| c |>\nI forgot a `$` on `$sum` on the second line. Should be fixed\
    \ now.\n<|/ c |>\n<| a tags=loops,arrays,php dscore=1 |>\nThe algorithm you are\
    \ looking for is called \"summing subsets\". You can see this solution as a subset\
    \ sum problem - given a set with N elements, you only need to sum the numbers\
    \ in two subsets consisting of N/2 elements. The solution is the same as the one\
    \ I provided below.\nIn PHP, you can do this as follows:\n<code>\n<?php\n\n$array\
    \ = [5, 8, 7, 1];\n\n$sum = 0; // sum for first subset\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp9lfte47.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach($lst as $key\
    \ => $value) {\n        if($key % 2 == 0) {\n            $sum += $value;\n   \
    \     }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,php-internals,php-extension\
    \ |>\n<| a tags=php,php-internals,php-extension dscore=2 |>\nThe PHP code is available\
    \ here. As can be seen there is a single function called array_reduce, and this\
    \ function is used in quite a lot of different places.\nOne of the places it may\
    \ be used is within array_filter. Let's look at the source code.\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyqb9lkje.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evenSum = 0;\n    foreach ($lst\
    \ as $value) {\n        if($value % 2 == 0) {\n            $evenSum += $value;\n\
    \        }\n    }\n    return $evenSum;\n}\n\n$lst = array(5, 8, 7, 1);\nprint_r(solution($lst));\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "8\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u4e4l0n.php:24\n\
    Stack trace:\n#0 /tmp/tmp4u4e4l0n.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4u4e4l0n.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $res = 0;\n    for($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $res += $lst[$i];\n       \
    \ }\n    }\n\n    return $res;\n}\n</code>\n<|/ a |>\n<| c |>\nYeah, I did realize\
    \ this was the best solution, however I was curious as to why my code wasn't giving\
    \ me the correct results.\n<|/ c |>\n<| c |>\nThis solution uses `array_sum()`\
    \ which means it makes a copy of your list, then sums it. Your code does not do\
    \ this.\n<|/ c |>\n<| c |>\nAh ok, thanks. I guess I don't understand why `array_sum()`\
    \ wouldn't work?\n<|/ c |>\n<| a dscore=1 |>\nFor efficiency reasons, I'd suggest\
    \ you to use array_filter and array_keys like so:\n<code>\n<?php\n\n$numbers =\
    \ [5, 8, 7, 1];\n\n$result = array_sum(array_filter($numbers, function ($number)\
    \ use ($numbers) {\n    return $number % 2 === 0;\n}, ARRAY_FILTER_USE_BOTH));\n\
    \nvar_dump($result);\n</code>\nOutput:\n<code>\nint 12\n</code>\nIf you'r looking\
    \ to use array_sum, you need to make a copy of the array and apply array_sum to\
    \ the copy, then merge the results like so:\n<code>\n<?php\n\n$numbers = [5, 8,\
    \ 7, 1];\n\n$copy = array_filter($numbers, function ($number) use ($numbers) {\n\
    \    return $number % 2 === 0;\n});\n\n$result = array_sum($copy);\n\nvar_dump($result);\n\
    </code>\nOutput:\n<code>\nint 12\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    Yeah, I did realize this was the best solution, however I was curious as to why\
    \ my code wasn't giving me the correct results.\n<|/ c |>\n<| c |>\nYour problem\
    \ was that when you passed the array into the `array_sum()` function, it made\
    \ a copy of your array (which would have given you the desired result). My solution\
    \ uses a closure function which captures the variable from the parent scope by\
    \ using the `use` keyword.\n<|/ c |>\n<| c |>\nIt's interesting though that you\
    \ used the use keyword. I've never seen that before.\n<|/ c |>\n<| c |>\nI actually\
    \ just learned about it by looking at this question: http://stackoverflow.com/questions/12393399/php-use-in-array-filter-how-does-it-work\n\
    <|/ c |>\n<| c |>\nNice\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprith62q8.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Write your code here.\n    $sum\
    \ = 0;\n    $odd = 0;\n    $even = 0;\n    foreach ($lst as $val) {\n        if\
    \ ($val % 2 == 0) {\n            $even += $val;\n        } else {\n          \
    \  $odd += $val;\n        }\n    }\n    $sum = $odd + ($even * 2);\n    return\
    \ $sum;\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\n$lst\
    \ = [3, 31, 45, 30, 14, 32, 6, 9, 23, 56, 32, 6, 45, 15, 13, 24, 32, 21, 56, 21,\
    \ 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32,\
    \ 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14,\
    \ 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45,\
    \ 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56,\
    \ 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32,\
    \ 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13,\
    \ 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32,\
    \ 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56,\
    \ 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16,\
    \ 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30,\
    \ 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13,\
    \ 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45,\
    \ 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30,\
    \ 32, 23, 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23,\
    \ 13, 24, 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24,\
    \ 32, 21, 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21,\
    \ 56, 21, 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21,\
    \ 16, 32, 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, 32,\
    \ 30, 14, 13, 45, 45, 56, 30, 32, 23, 13, 24, 32, 21, 56, 21, 16, \nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppvs3y93q.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $count = 0;\n    foreach ($lst as\
    \ $key=>$value) {\n        if ($key%2==0) {\n            $count += $value;\n \
    \       }\n    }\n    return $count;\n}\n\n$lst = [5, 8, 7, 1];\necho solution($lst);\n\
    </code>\n<|/ a dscore=0 tags=php |>\n<| a tags=php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy6n8j0mi.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // code here\n    $odd = array();\n\
    \    $even = array();\n    foreach ($lst as $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    array_multisort($odd, $even, SORT_DESC, $lst);\n\
    \    return array_sum($lst);\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpq8p9ovxo.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8p9ovxo.php:26\n\
    Stack trace:\n#0 /tmp/tmpq8p9ovxo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq8p9ovxo.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key\
    \ => $num) {\n        if ($key % 2 !== 0) {\n            $sum += $num;\n     \
    \   }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,laravel\
    \ |>\n<| c |>\nIf this helped you, you should accept the answer. This will help\
    \ future users find the answer quicker.\n<|/ c |>\n<| a |>\nJust another solution\
    \ using array_filter() and array_sum() functions:\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjihjw0c2.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(array_slice($lst,0,array_search($lst,array_filter($lst,function($v){return\
    \ $v%2==1;}))));\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lcp795y.php:15\n\
    Stack trace:\n#0 /tmp/tmp2lcp795y.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2lcp795y.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_reduce($lst, function($acc,\
    \ $val) {\n        if ($val % 2 != 0) {\n            $acc += $val;\n        }\n\
    \        return $acc;\n    });\n}\n</code>\n<|/ a |>\n<| a |>\nI got here just\
    \ now, trying to learn the different ways to solve this problem. I'm fairly new\
    \ to the language, but I figured this was the way to go. \n<code>\nvar solution\
    \ = function(arr) {\n    arr.sort((a,b) => a - b);\n    for(var i = 0; i < arr.length;\
    \ i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i]\
    \ == arr[j]){\n                arr[i] = 0;\n                arr[j] = 0;\n    \
    \        }\n        }\n    }\n    console.log(arr);\n    return arr.reduce((a,\
    \ b) => a + b);\n};\n</code>\n<|/ a dscore=2 tags=arrays,php,javascript |>\n<|\
    \ a |>\nIn PHP you can use array_reduce. Try below code:\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7bolcfvr.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $even = array_filter($lst, 'is_int');\
    \ // Get even numbers\n    $odd = array_diff($lst, $even); // Get odd numbers\n\
    \    return array_sum(array_filter($odd, 'is_int')); // Return sum of odd numbers\n\
    }\n</code>\n<|/ a |>\n<| a tags=php dscore=1 |>\nHere's a pretty straightforward\
    \ solution just with array_filter since that's the most straightforward.\n<code>\n\
    $a = [3, 30, 13, 24, 321];\n$b = array_filter($a, function($val) {\n    return\
    \ !is_int($val);\n});\n$c = array_filter($a, function($val) {\n    return is_int($val);\n\
    });\n$sum = $b + $c;\necho $sum; // => 90\n</code>\n<|/ a |>\n<| c |>\nNot a bad\
    \ one. Mind explaining how this works? `$c` is not an array, its just a list of\
    \ numbers, is that why you use `+`?\n<|/ c |>\n<| c |>\nThe first call passes\
    \ a function to `array_filter` to select only the odd numbers. Then the second\
    \ call passes a function to `array_filter` to select only the even numbers.\n\
    <|/ c |>\n<| a |>\nThis also works... \n<code>\n<?php \n\n$input = [3, 30, 13,\
    \ 24, 321];\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphl8e315t.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odd = array_filter($lst, 'is_odd');\n\
    \    return array_reduce($odd, 'array_sum', array_keys($odd));\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nWow, that is pretty awesome. Thanks very much.\n<|/\
    \ c |>\n<| a dscore=1 tags=algorithm,php |>\nA php version of this solution:\n\
    <code>\n<?php\n$oddSum = array_reduce($list, function($c, $v){\n    return $c\
    \ + ($v & 1) * $v;\n}, 0);\n</code>\n<|/ a |>\n<| a tags=algorithm,php |>\nYou\
    \ can use array_reduce() function, like this:\n<code>\n$sum = $lst[0]; // start\
    \ with initial value\n\narray_reduce($lst, function ($sum, $value) use ($sum)\
    \ { // use $sum as \"accumulator\"\n    return $sum + ($value & 1) * ($sum * $value);\
    \ // \"bitwise AND\" operation on $sum and $value\n}, 0); // \"initial\" value\n\
    </code>\nSee live demo.\n<|/ a dscore=0 |>\n<| a tags=algorithm,php dscore=0 |>\n\
    You can simply add all odd values in an array, and simply multiply it by all even\
    \ numbers.\n<code>\n<?php\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpel5oqg9l.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $oddsPos = array_filter($lst, 'is_odd');\n\
    \    $evenPos = array_filter($lst, 'is_even');\n    return array_sum($oddsPos)\
    \ + array_sum($evenPos);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ reply! But i think there is a problem with the is_odd and is_even, because you\
    \ use 2 arrays. So the code is not really efficient.\n<|/ c |>\n<| c |>\nThanks\
    \ for your reply! But i think there is a problem with the is_odd and is_even,\
    \ because you use 2 arrays. So the code is not really efficient. My code is a\
    \ little bit better but it doesn't return the correct result because of a mistake\
    \ with is_odd and is_even. I think i need to use 2 arrays to make things easier\
    \ but it doesn't work\n<|/ c |>\n<| c |>\nThanks for your reply! But i think there\
    \ is a problem with the is_odd and is_even, because you use 2 arrays. So the code\
    \ is not really efficient. My code is a little bit better but it doesn't return\
    \ the correct result because of a mistake with is_odd and is_even. I think i need\
    \ to use 2 arrays to make things easier but it doesn't work\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nMy solution with two arrays, instead of one with is_odd and another with\
    \ is_even:\n<code>\n<?php\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqzt5blz3.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key\
    \ => $val) {\n        if ($key & 1) {\n            $sum += $val;\n        }\n\
    \    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfi8y_30.php:21\n\
    Stack trace:\n#0 /tmp/tmpnfi8y_30.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnfi8y_30.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    sort($lst);\n    $sum = 0;\n    foreach\
    \ ($lst as $i => $num) {\n        if ($i % 2 == 0) {\n            $sum += $num;\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3faqep8.php:23\n\
    Stack trace:\n#0 /tmp/tmpm3faqep8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpm3faqep8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(array_filter($lst,\
    \ 'odd'));\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| a |>\n<code>\n<?php\n\
    \n$arr = array(10, 9, 1, 5, 7, 3, 6, 4);\n$sum = 0;\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmc7bclca.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evenSum = 0;\n    foreach($lst as\
    \ $val){\n        if($val %2 ==0){\n            $evenSum = $evenSum + $val;\n\
    \        }\n    }\n    return $evenSum;\n}\n\n$arr = [1, 45, 3, 8, 2];\n$arr2\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n$arr3 = [1, 4, 5];\n\
    $arr4 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n$arr5 = [1, 4,\
    \ 5];\n\n$arr6 = [1, 2, 3, 4];\n\n$arr7 = [5, 8, 7, 1];\n$arr8 = [3, 3, 3, 3,\
    \ 3];\n$arr9 = [30, 13, 24, 321];\n$arr10 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15];\n$arr11 = [1, 4, 5];\n\n$arr12 = [1, 2, 3, 4];\n\n$arr13\
    \ = [1, 2, 3];\n\n$arr14 = [1, 2, 3, 4];\n$arr15 = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15];\n\n$arr16 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15];\n$arr17 = [1, 4, 5];\n$arr18 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15];\n$arr19 = [1, 4, 5];\n\n$arr20 = [1, 2, 3, 4];\n$arr21\
    \ = [1, 2, 3];\n\n$arr22 = [1, 2, 3, 4];\n$arr23 = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15];\n$arr24 = [1, 4, 5];\n$arr25 = [0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n$arr26 = [1, 2, 3, 4];\n$arr27 = [1, 2,\
    \ 3];\n\n$arr28 = [1, 2, 3, 4];\n$arr29 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15];\n$arr30 = [1, 4, 5];\n$arr31 = [0, 1, 2]; // not even list\n\
    \n$arr32 = [1, 2, 3];\n\n$arr33 = [1, 2, 3, 4];\n$arr34 = [1, 2, 3];\n$arr35 =\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n$arr36 = [1, 2, 3];\n\
    $arr37 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n$arr38 = [1,\
    \ 2, 3, 4];\n\n$arr39 = [1, 2, 3];\n\n$arr40 = [1, 2, 3];\n$arr41 = [5, 6, 7];\n\
    \n$arr42 = [1, 3, 5];\n\n$arr43 = [1, 4, 5];\n$arr44 = [1, 2, 3];\n\n$arr45 =\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, \nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoxm55icu.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  // Write your code in PHP7.0\n\n}\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0l8ic5ff.php:16\n\
    Stack trace:\n#0 /tmp/tmp0l8ic5ff.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0l8ic5ff.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $even = [];\n    foreach($lst as\
    \ $num){\n        if($num % 2 == 0){\n            $even[] = $num;\n        }\n\
    \    }\n    return array_sum($even);\n}\n\n$result = solution($lst);\necho \"\
    <result>{$result}</result>\";\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpf04qcirj.php\
    \ on line 9\n<result>0</result>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpf04qcirj.php:24\nStack trace:\n#0 /tmp/tmpf04qcirj.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmpf04qcirj.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    $odd_count = 0;\n\
    \    foreach($lst as $key => $el){\n        if($el % 2){\n            $sum = $sum\
    \ + $el;\n        }else{\n            $sum = $sum - $el;\n            $odd_count++;\n\
    \        }\n        if($odd_count == 2){\n            break;\n        }\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nwhat if i need\
    \ sum of odd elements and i need negative numbers also?\n<|/ c |>\n<| a dscore=1\
    \ |>\nYou can use array_sum() to get the sum of all odd numbers in an array. And\
    \ array_filter() to remove all odd numbers from an array:\n<code>\n$array = [5,\
    \ 8, 7, 1];\n\n$odd_sum = array_sum(array_filter($array, function ($value) {\n\
    \    return !($value & 1);\n}));\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n\
    A simple solution in PHP for your case is\n<code>\n$sum = 0;\nforeach ($array\
    \ as $value) {\n    if ($value & 1) {\n        $sum += $value;\n    }\n}\n</code>\n\
    <|/ a tags=php,arrays dscore=1 |>\n<| a tags=php,arrays dscore=1 |>\nYou can use\
    \ array_sum() to sum up all odd numbers in array and then subtract all odd numbers\
    \ from that sum. \n<code>\n$oddnumbers = array_sum($arr) - array_sum(array_diff($arr,\
    \ array(1, 3, 5, 7, 9, 11, 13, 15)));\n</code>\n<|/ a |>\n<| a dscore=0 |>\nIn\
    \ pure php we can do this by array_sum($array) - array_sum(array_diff($array));\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$sum = 0;\nforeach($array\
    \ as $arr){\n    $sum += $arr;\n}\n$result = $sum - array_sum(array_diff($array,\
    \ 1));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php,arrays |>\nWe can easily\
    \ achieve this with array_sum() and array_diff()\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxbjxycpp.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evenIndex = [];\n    $sum = 0;\n\
    \    $isEven = false;\n\n    foreach ($lst as $key => $value) {\n        if ($isEven)\
    \ {\n            $sum += $value;\n        } else {\n            $sum -= $value;\n\
    \        }\n        if ($key % 2 == 0) {\n            $evenIndex[$key] = $value;\n\
    \            $isEven = true;\n        } else {\n            $isEven = false;\n\
    \        }\n    }\n\n    return $sum - array_sum($evenIndex);\n}\n\n$lst = [5,\
    \ 8, 7, 1];\necho \"The sum of odd elements that is in even positions: \".solution($lst).PHP_EOL;\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The sum of odd elements that is in even positions: -15\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphth0eaaa.php:36\nStack trace:\n\
    #0 /tmp/tmphth0eaaa.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphth0eaaa.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  // write your code in PHP7.0\n  $count\
    \ = 0;\n  $res = 0;\n  foreach ($lst as $key => $value) {\n    if ($key % 2 ==\
    \ 0 && $value != 0) {\n      $count++;\n      $res += $value;\n    }\n  }\n  return\
    \ $res;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nThis answer does work\
    \ but is unnecessarily complex. Simply use the `array_filter()` function. This\
    \ should be the accepted answer, although the other answers do work too.\n<|/\
    \ c |>\n<| c |>\nOh I see, my mistake. Thank you for pointing out that mistake.\
    \ :)\n<|/ c |>\n<| a dscore=0 |>\nThis answer is similar to's answer but doesn't\
    \ use the built-in filter function. This should also work for any list.\n<code>\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg3sy5vzg.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $even_sum = 0;\n    $odd_sum = 0;\n\
    \    $odd_positions = array_filter($lst, 'is_int');\n    foreach($odd_positions\
    \ as $odd_position) {\n        $even_sum += $odd_position;\n        if ($even_sum%2\
    \ == 1) {\n            $odd_sum += $odd_position;\n        }\n    }\n    return\
    \ $odd_sum;\n}\n</code>\n<|/ a tags=php |>\n<| a |>\nHere's a recursive solution,\
    \ using a stack to store \"what we've seen so far\". \n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcm16oks8.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = array_filter($lst, 'is_int');\n\
    \    $odd = array_filter($lst, 'is_int');\n    return array_sum(array_diff($evens,\
    \ $odd));\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution but I don't understand\
    \ why you use `array_filter()`  twice instead of once. Can you explain how that\
    \ works ?\n<|/ c |>\n<| c |>\nI use the second filter to remove all non-integer\
    \ elements from the original list. So the first filter gets an array of numbers,\
    \ and the second filter gets an array of non-integers. Then I simply use array_diff()\
    \ to return all elements from the first array that are in the second array.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$a = array(1,2,3,4,5,6,7,8,9,10);\nfor($i=0;$i<count($a);$i++){\n\
    \    if(!is_int($a[$i])) unset($a[$i]);\n}\n$b = array_filter($a);\n$c = array_keys($b);\n\
    $d = array_flip($c);\necho $d[2];\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\nJust use this code:\n<code>\n$array = array(\"1\",\"2\",\"3\",\"4\",\"5\"\
    );\n$array = array_filter($array, 'is_int');\n$array = array_keys($array);\n$array\
    \ = array_flip($array);\necho $array[2];\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$a = [1,2,3,4,5,6,7,8,9,10];\n$a2 = array_filter($a, 'is_int');\n\
    $c = array_keys($a2);\n$d = array_flip($c);\necho $d[2];\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php dscore=1 |>\nSolution using array_walk\n<code>\n$array\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$array = array_filter($array, 'is_int');\n\
    array_walk($array, function(&$item, $key) use (&$result) {\n    if ($key == 2)\
    \ {\n        $result = $item;\n    }\n}, $result);\n\nvar_dump($result);\n</code>\n\
    <|/ a |>\n<| a tags=arrays,php |>\nThe fastest method is to unset all non-integer\
    \ elements:\n<code>\nforeach ($array as $key => $value) {\n    if (!is_int($value))\
    \ {\n        unset($array[$key]);\n    }\n}\n</code>\nAnother method is \nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprxc1c9ws.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    \n    // Write your code here\n \
    \   \n    \n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpblsodird.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    \n    // Your code here\n    \n \
    \   return $sum;\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmuu4u2o2.php:19\n\
    Stack trace:\n#0 /tmp/tmpmuu4u2o2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmuu4u2o2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  return array_sum(array_filter(\n  \
    \  function ($x) {\n      return !($x & 1);\n    },\n    $lst));\n}\n\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 1 to be array, object given\
    \ in /tmp/tmpjmpxe1b8.php on line 12\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpjmpxe1b8.php on line 12\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjmpxe1b8.php:20\nStack trace:\n\
    #0 /tmp/tmpjmpxe1b8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjmpxe1b8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (empty($lst)) {\n        return\
    \ 0;\n    }\n    $oddIndexes = [];\n    $sum = 0;\n    foreach ($lst as $index\
    \ => $value) {\n        if ($index % 2 === 0) {\n            $sum += $value;\n\
    \            $oddIndexes[] = $index;\n        }\n    }\n    foreach ($oddIndexes\
    \ as $oddIndex) {\n        $sum += $lst[$oddIndex + 1];\n    }\n    return $sum;\n\
    }\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpjk_f3y.php:29\n\
    Stack trace:\n#0 /tmp/tmpfpjk_f3y.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfpjk_f3y.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $even = array_filter($lst);\n   \
    \ $odd = array_diff($lst, $even);\n    return array_sum($odd);\n}\n\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmeku4j4m.php:18\n\
    Stack trace:\n#0 /tmp/tmpmeku4j4m.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmeku4j4m.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    \n    return array_sum(array_slice($lst,\
    \ 0, array_search($lst, array_slice($lst,0, count($lst)/2)) + 1));\n    \n}\n\n\
    var_dump(solution([5, 8, 7, 1]));\n</code>\nResults:\n<code>\nstring(3) \"12\"\
    \n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6ere1e9b.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Write your code here\n    $odd\
    \ = array_filter($lst,function($v){return $v %2 == 0;});\n    return array_sum($odd);\n\
    }\n</code>\n<|/ a dscore=2 tags=php,arrays,sum |>\n<| a dscore=1 |>\nOne of the\
    \ possible solution is,\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0vxe6cx9.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    \n    sort($lst);\n    \n    $result\
    \ = array_filter(\n        $lst,\n        function($v) use ($lst) {\n        \
    \    return $v & 1;\n        }\n    );\n    \n    return array_sum($result);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThank you for this answer , its working fine!\n\
    <|/ c |>\n<| a dscore=3 |>\nTry this way\n<code>\n$lst=[5,8,7,1];\nsort($lst);\n\
    $evens=array_filter(array_keys($lst), function ($a) {\n    return($a & 1);\n});\n\
    $odd=array_diff($lst, $evens);\n$sum=array_sum($odd);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\n<code>\n$lst=[5,8,7,1];\nsort($lst);\n$arr = array_filter($lst,\
    \ 'odd');\n$sum=array_sum($arr);\n</code>\n<|/ a dscore=2 tags=php,arrays |>\n\
    <| a dscore=1 tags=php,arrays |>\nThis solution does not use loops (i.e. array_sum(),\
    \ array_filter(), array_keys()), but uses PHP's native functions:\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxajjbbpx.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) < 1)\n        return\
    \ false;\n    $sum = 0;\n    $even = 0;\n    $odd = 1;\n\n    foreach ($lst as\
    \ $val) {\n        if ($val % 2 != 0)\n            $sum += $val;\n        if ($val\
    \ % 2 == 0)\n            $even++;\n        else\n            $odd++;\n    }\n\n\
    \    return $sum - ($even * 2);\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThis\
    \ might work for you,\n<code>\n$odd = 0;\n$even = 0;\n\nforeach($a as $a1) {\n\
    \    if($a1 % 2 == 0){\n        $even++;\n    }else{\n        $odd++;\n    }\n\
    }\n\n$odd = $odd * 2 - $even;\necho $odd;\n</code>\n<|/ a tags=arrays,php,math\
    \ dscore=1 |>\n<| a |>\nHere's an interesting solution which I wrote up in PHP\
    \ 7.1 using array_sum() and array_reduce(), which should be available on all systems:\n\
    <code>\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn7_fs2cn.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = array_filter($lst, function\
    \ ($item) {\n        return $item & 1; // return true if the item is even\n  \
    \  });\n    return array_sum($evens);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This was my first idea, but I think the goal is to get to the solution in the\
    \ least number of lines of code.\n<|/ c |>\n<| c |>\nYou're right! This is not\
    \ the best approach. I changed my answer and added a solution that is almost as\
    \ elegant as my first suggestion. I was trying to be as elegant as possible in\
    \ my first answer as much as possible.\n<|/ c |>\n<| c |>\nHi David, thanks for\
    \ your help. This worked for me. Sorry about the late reply. I did try the other\
    \ answers first, but they were less elegant.\n<|/ c |>\n<| c |>\nHi Kevin, I appreciate\
    \ you helping me with this. This works perfectly. I tested it against the others\
    \ and it also works. I understand it now.\n<|/ c |>\n<| c |>\nGlad it helped!\
    \ Don't forget to accept the answer that worked best for you.\n<|/ c |>\n<| a\
    \ |>\nThe way I do it is using a counter and a loop.\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc__6vc8m.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return $lst\n        ->filter(function($num)\
    \ use ($lst) {\n            return $num % 2 === 0;\n        })\n        ->reduce(function($sum,\
    \ $num) use ($lst) {\n            return $sum + $lst->indexOf($num) / 2;\n   \
    \     }, 0);\n}\n\n$lst = [30, 13, 24, 321];\necho \"solution($lst) = {$solution($lst)}\\\
    n\";\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpxn3pt1_n.php:18\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpxn3pt1_n.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = array_filter($lst);\n  \
    \  $odds = array_diff($lst, $evens);\n    return array_sum($odds);\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=4 tags=sum,php,arrays |>\n<code>\n$arr=[5,8,7,1];\
    \ \n$sum=0;\n\nforeach($arr as $key => $value) {\n  if ($key % 2 == 0)\n    $sum+=$value;\n\
    }\n\necho $sum;\n</code>\n<|/ a |>\n<| c |>\nThis is unnecessary overhead and\
    \ unnecesary `if` statement.\n<|/ c |>\n<| c |>\nIt's unnecessary overhead because\
    \ it's a one liner and it can be easily read in one line of code. It's the if\
    \ statement that's unnecesary. It's easy to read your code.\n<|/ c |>\n<| c |>\n\
    This solution doesn't work for arrays with zeroes in it.  You need to check for\
    \ an even number too.  See my answer below.\n<|/ c |>\n<| c |>\n: Yes, I know.\
    \ You didn't read the answer. I didn't post it as part of my answer. I was only\
    \ trying to give a more clear solution for the question as it was asked. My answer\
    \ is an extension of my answer, and I didn't want to just copy-paste it because\
    \ there are so many other answers and my answer doesn't give the OP what they\
    \ asked for. My answer gives the OP the most complete answer possible, so the\
    \ question is answered fully.\n<|/ c |>\n<| c |>\n: And I gave you the exact same\
    \ answer as you gave, which is unnecessary. Why did you give that answer?\n<|/\
    \ c |>\n<| a |>\nI wanted to provide a different solution since the accepted answer\
    \ doesn't work for arrays with zeroes in it.\n<code>\n$arr = [1, 3, 6, 0, 5, 6];\n\
    \n$evenSum = 0;\n\nforeach($arr as $k => $v){\n    if($k % 2 == 0){\n        $evenSum\
    \ += $v;\n    }\n}\n</code>\n<|/ a tags=sum,php,arrays dscore=3 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26274901)\n\
    <|/ c |>\n<| c |>\nThis answer does provide an answer to the question and I've\
    \ posted it here because it was the first \nfunction candidate(...$args) {\n \
    \   return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpma51uztj.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) == 0) {\n       \
    \ return 0;\n    }\n    $sum = 0;\n    foreach ($lst as $value) {\n        if\
    \ ($value % 2 == 0) {\n            $sum = $sum + $value;\n        }\n    }\n \
    \   return $sum;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n$total=0;\n\
    $n=10;\nfor($i=0;$i<$n;$i++){\n  $total+=2*$i%2;\n}\n</code>\n<|/ a tags=php |>\n\
    <| a tags=php |>\nI hope this will helps you..\n<code>\n <?php\n    $arr = array(1,\
    \ 2, 3, 4, 5, 6, 7);\n    $arr2 = array(1, 2, 3, 4, 5, 6, 7);\n    $sum = 0;\n\
    \n    for ($i = 0; $i < count($arr); $i++) {\n        array_push($sum, (2 * $i)\
    \ % 2);\n    }\n\n    for ($j = 0; $j < count($arr2); $j++) {\n        array_push($sum,\
    \ (2 * $j) % 2);\n    }\n\n    echo $sum;\n    ?>\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\n<?php\n\n$arr1 = array(1,2,3,4,5,6);\n$arr2 = array(1,2,3,4,5,6);\n\
    $arr3 = array(1,2,3,4,5,6);\n$arr4 = array(1,2,3,4,5,6);\n$arr5 = array(1,2,3,4,5,6);\n\
    $arr6 = array(1,2,3,4,5,6);\n$arr7 = array(1,2,3,4,5,6);\n$arr8 = array(1,2,3,4,5,6);\n\
    $arr9 = array(1,2,3,4,5,6);\n$arr10 = array(1,2,3,4,5,6);\n\n$arr11 = array(1,2,3,4,5,6);\n\
    $arr12 = array(1,2,3,4,5,6);\n$arr13 = array(1,2,3,4,5,6);\n$arr14 = array(1,2,3,4,5,6);\n\
    $arr15 = array(1,2,3,4,5,6);\n$arr16 = array(1,2,3,4,5,6);\n$arr17 = array(1,2,3,4,5,6);\n\
    $arr18 = array(1,2,3,4,5,6);\n$arr19 = array(1,2,3,4,5,6);\n$arr20 = array(1,2,3,4,5,6);\n\
    \n$arr21 = array(1,2,3,4,5,6);\n$arr22 = array(1,2,3,4,5,6);\n$arr23 = array(1,2,3,4,5,6);\n\
    $arr24 = array(1,2,3,4,5,6);\n$arr25 = array(1,2,3,4,5,6);\n$arr26 = array(1,2,3,4,5,6);\n\
    $arr27 = array(1,2,3,4,5,6);\n$arr28 = array(1,2,3,4,5,6);\n$arr29 = array(1,2,3,4,5,6);\n\
    $\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeydfbf_e.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = array_filter($lst, 'is_int');\n\
    \    return array_sum(array_slice($lst,0,count($lst)-count($evens)));\n}\n</code>\n\
    <|/ a |>\n<| a |>\nHere is the solution using array_filter and array_reduce.\n\
    <code>\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0b786u2t.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $value)\
    \ {\n        if ($value & 1) {\n            $sum += $value;\n        }\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a dscore=0 tags=php\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3a21t1sj.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach($lst as $key\
    \ => $num) {\n        if($key % 2 === 0) {\n            $sum += $num;\n      \
    \  }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsl6rtyt.php:24\n\
    Stack trace:\n#0 /tmp/tmpjsl6rtyt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjsl6rtyt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $sum = 0;\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $sum = $sum + $lst[$i];\n    }\n  }\n\
    \  return $sum;\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcz0gwye.php:24\n\
    Stack trace:\n#0 /tmp/tmpkcz0gwye.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkcz0gwye.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    $len = count($lst);\n\
    \    \n    // Find all even indexes\n    foreach ($lst as $key => $value) {\n\
    \        if ($key % 2 === 0) {\n            $sum = $sum + $value;\n        }\n\
    \    }\n    \n    // Subtract all odd values from the total sum\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        if ($i % 2 === 0) {\n            $sum -= $lst[$i];\n\
    \        }\n    }\n    \n    return $sum;\n}\nfunction candidate(...$args) {\n\
    \    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2feudqg.php:32\n\
    Stack trace:\n#0 /tmp/tmps2feudqg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps2feudqg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(array_slice($lst,0,array_search($lst[0],$lst)));\n\
    }\n\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxho3_au.php:16\n\
    Stack trace:\n#0 /tmp/tmpqxho3_au.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqxho3_au.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    array_walk($lst, 'intval');\n   \
    \ return array_sum(array_slice($lst,$odd_indices,$odd_indices));\n}\n</code>\n\
    Output:\n<code>\nArray\n(\n    [phpversion] => 7.3.15\n    [solution] => 12\n\
    \    [code] => Array\n        (\n            [intval] => int\n        )\n\n)\n\
    </code>\n<|/ a tags=php,arrays,algorithm |>\n<| a tags=php,arrays,algorithm |>\n\
    You just need to use array_filter() function\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpayviri3j.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odds = array_filter($lst, function\
    \ ($n) {\n        return $n % 2 === 1;\n    });\n    $evens = array_filter($lst,\
    \ function ($n) {\n        return $n % 2 === 0;\n    });\n    return array_sum($odds)\
    \ + array_sum($evens);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php |>\n<code>\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp09rbfg1l.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (empty($lst)) {\n        return\
    \ 0;\n    }\n    return array_sum(array_filter(\n        $lst,\n        function\
    \ ($num) use ($lst) {\n            return $num % 2 === 0 && in_array($num, $lst);\n\
    \        }\n    ));\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3weytwf.php:23\n\
    Stack trace:\n#0 /tmp/tmpq3weytwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq3weytwf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evenPos = array_filter($lst, \"\
    is_int\");\n    $oddPos = array_filter($lst, \"!is_int\");\n\n    return array_sum(array_intersect_key($lst,$oddPos));\n\
    }\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 2 to be a valid callback, function\
    \ '!is_int' not found or invalid function name in /tmp/tmpst58l0zn.php on line\
    \ 9\n\nWarning: array_intersect_key(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmpst58l0zn.php on line 11\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpst58l0zn.php on line 11\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpst58l0zn.php:18\nStack trace:\n\
    #0 /tmp/tmpst58l0zn.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpst58l0zn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n\t$sum = 0;\n\tforeach ($lst as $key\
    \ => $value) {\n\t\t$sum += $value;\n\t\tif ($key % 2 == 1) {\n\t\t\t$sum -= $value;\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9cmhgt4.php:25\n\
    Stack trace:\n#0 /tmp/tmpg9cmhgt4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpg9cmhgt4.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = array_filter($lst, function\
    \ ($var) {\n        return $var % 2 == 0;\n    });\n    $evens = array_keys($evens);\n\
    \    return array_sum(array_slice($lst, array_search($lst, $evens) + 1, count($evens)\
    \ - 1));\n}\n\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\nUsing array_filter\
    \ twice :\n<code>\n$array = [5,8,7,1,3,3,3,3];\n$result = 0;\n$temp = array_filter($array,\
    \ function($var)use(&$result){\n    return $var % 2 === 0;\n});\n$result = array_sum(array_filter($temp,\
    \ function($var)use(&$result){\n    return $var % 2 === 1;\n}));\necho $result;\n\
    </code>\nUsing array_walk : \n<code>\n$array = [5,8,7,1,3,3,3,3];\n$result = 0;\n\
    $temp = [];\narray_walk($array, function($var) use(&$result){\n    $temp[] = $var\
    \ % 2 === 0;\n});\n$result = array_sum(array_filter($temp, function($var)use(&$result){\n\
    \    return $var % 2 === 1;\n}));\necho $result;\n</code>\n<|/ a dscore=1 tags=arrays,php\
    \ |>\n<| c |>\n`array_filter()` can be very slow on big arrays. Better use a `foreach`\
    \ loop with `array_push()` inside the loop and then call `array_sum()` after the\
    \ loop\n<|/ c |>\n<| a tags=arrays,php |>\nThis problem can be solved with two\
    \ simple operations:\n\nFilter the array by checking if its value is a multiple\
    \ of 2\nSum all the values of filtered array\n\n<code>\n$arr = [5,8,7,1,3,3,3,3];\n\
    $res = array_sum(array_filter($arr, function($val){\n   return $val%2 === 0;\n\
    }));\necho $res;\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n\n$arr =\
    \ [5,8,7,1,3,3,3,3];\n$sum = 0;\n\nforeach($arr as $key => $value){\n    if($value%2\
    \ == 0) $sum += $value;\n}\n\necho $sum;\n</code>\n<|/ a tags=arrays,php dscore=1\
    \ |>\n<| c |>\nThis doesn't use array_filter()\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ use array_filter(). It's a perfect example why it's not a good idea to post\
    \ answers without testing the code first...\n<|/ c |>\n<| a |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmxs7doo7.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // write your code in PHP7.0\n  \
    \  $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key % 2 ==\
    \ 0) {\n            $sum += $value;\n        }\n    }\n\n    return $sum;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease do not post only code as answer, but\
    \ also provide an explanation what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\n\
    Thanks for your advise, I will do that.\n<|/ c |>\n<| a |>\n<code>\n$list = array(2,\
    \ 3, 5, 8, 7, 1, 3, 6, 9, 6);\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfu4n44x2.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $even = array_filter($lst, 'is_int');\n\
    \    $odd = array_diff($lst, $even);\n    return array_sum(array_filter($odd,\
    \ function($number) {\n        return $number % 2 == 1;\n    }));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays |>\nMy solution is:\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp68leb0fi.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (!is_array($lst)) return 0;\n\
    \    $sum = array();\n    foreach ($lst as $i => $el) {\n        if ($i % 2 ===\
    \ 1) {\n            $sum[$el] = $sum[$el] + $i;\n        }\n    }\n    return\
    \ array_sum($sum);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis solution is more\
    \ elegant than mine\n<|/ c |>\n<| c |>\nA problem that I'm encountering is this\
    \ solution takes more time and space than my solution. My solution takes a little\
    \ longer but has a slight more space requirement, however, this method doesn't\
    \ seem to have a smaller execution time or space requirement.\n<|/ c |>\n<| c\
    \ |>\nYour solution does use less memory than mine but my solution uses more memory\
    \ than your solution.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php \nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp241ahe00.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Write your PHP solution here\n\
    \    return sum(array_filter($lst, function($e) use ($lst) {\n        return in_array($e\
    \ % 2 == 1, array_slice($lst, $e + 1, NULL, true));\n    }));\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis works. I do have a question, though. Why do I get\
    \ an error when I run this code? $sum is undefined. I am missing something here.\n\
    <|/ c |>\n<| c |>\nSorry I did not notice that $sum is not defined. You can use\
    \ the code above to replace your solution to test it. I have modified the answer.\n\
    <|/ c |>\n<| a tags=algorithm,php |>\nHere is a solution in Javascript that also\
    \ works with negative integers and does not throw errors for input with multiple\
    \ repeating integers:\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplo8__a3a.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 2 == 0) {\n            $sum += $value;\n  \
    \      }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<|\
    \ a |>\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgo549ta3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = 1;\n    foreach ($lst as\
    \ $k => $v) {\n        $result *= ($k + 1) / 2;\n        if ($k % 2 != 0) {\n\
    \            $result += $v;\n        }\n    }\n\n    return $result;\n}\n\n<|/\
    \ file ext=.php |>\n<| c |>\nWhat if the array contains negative numbers, what\
    \ will be the answer?\n<|/ c |>\n<| c |>\nThe answer is zero. Even numbers are\
    \ in even positions in the array, and odd numbers are in odd positions.\n<|/ c\
    \ |>\n<| c |>\nWhat if the input array is `[2, 4, 6, 8, 10]` what will be the\
    \ output?\n<|/ c |>\n<| c |>\nIf the array contains negative numbers, it will\
    \ be zero. Even numbers are in even positions in the array, and odd numbers are\
    \ in odd positions.\n<|/ c |>\n<| a |>\nUse array_filter and count the occurences\
    \ of each element:\n<code>\n$arr = array_filter($arr);\n$arrCount = count($arr);\n\
    \nreturn $arrCount * ($arrCount + 1) / 2;\n</code>\n<|/ a tags=php dscore=0 |>\n\
    <| c |>\nThis does not work if the array has negative numbers. For example, the\
    \ input array is `[-5, -2, -1, 4, -7, -8, 6, 5, -4, 7, -2, 4, 1, -7, -6, -4, 1,\
    \ -1]`. Your code returns \"-15\", but it should be \"0\".\n<|/ c |>\n<| c |>\n\
    I added an explanation, sorry for the lack of clarity, should have been more clear\n\
    <|/ c |>\n<| a tags=php |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptau64qsm.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = 0;\n    foreach($lst as\
    \ $key => $val) {\n        if($key % 2 == 0) {\n            $result += $val;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexrtcku1.php:24\n\
    Stack trace:\n#0 /tmp/tmpexrtcku1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpexrtcku1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $evenSum = 0;\n  foreach($lst as $k\
    \ => $v) {\n    if ($k % 2 !== 0) {\n      $evenSum+=(int)$v;\n    }\n  }\n  return\
    \ $evenSum;\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy75xyusg.php:21\n\
    Stack trace:\n#0 /tmp/tmpy75xyusg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy75xyusg.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(array_filter($lst,\
    \ function($v){\n        return $v % 2 === 1;\n    }));\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiexk5kqv.php:17\n\
    Stack trace:\n#0 /tmp/tmpiexk5kqv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpiexk5kqv.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    \n    for($i=0; $i<count($lst); $i++){\n\
    \        if($lst[$i]%2==0){\n            \n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6o5iznds.php:20\n\
    Stack trace:\n#0 /tmp/tmp6o5iznds.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6o5iznds.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $e)\
    \ {\n        if ($e % 2 === 0) {\n            $sum += $e;\n        }\n    }\n\
    \    return $sum;\n}\n\n$arr = [5, 8, 7, 1];\n$arr = [3, 3, 3, 3, 3];\n$arr =\
    \ [30, 13, 24, 321];\n$arr = [30, 13, 24, 321];\n\n$begin = new DateTime();\n\
    $begin->setTimezone(new DateTimeZone('UTC'));\n$begin->setDate(2006, 3, 15);\n\
    $begin->setTime(15, 44, 59);\n\n$end = new DateTime();\n$end->setTimezone(new\
    \ DateTimeZone('UTC'));\n$end->setDate(2006, 3, 16);\n$end->setTime(15, 44, 59);\n\
    \n$interval = new DateInterval(\"PT10M\");\n$period = new DatePeriod($begin, $interval,\
    \ $end);\n\n$period = new DateTimePeriod($begin, $interval, $end);\n$period->setDateFormat('d\
    \ F Y');\n\nforeach ($period as $dt) {\n    echo $dt->format(\"d F Y\").\"\\n\"\
    ;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php,algorithm,sum |>\nTry this\
    \ one:\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkq06ev6c.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key\
    \ => $val) {\n        if ($key % 2 == 1) {\n            if ($val % 2 != 0) {\n\
    \                $sum = $sum + $val;\n            }\n        }\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_x67u4l6.php:24\n\
    Stack trace:\n#0 /tmp/tmp_x67u4l6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_x67u4l6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $res = 0;\n    foreach ($lst as $k\
    \ => $v) {\n        if ($k % 2 == 1) {\n            $res += $v;\n        }\n \
    \   }\n    return $res;\n}\n</code>\nI guess that is all you need?\n<|/ a |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq1u543nl.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = array_reduce($lst, function($a,\
    \ $b) {\n        return $a + $b % 2 == 1 ? $a : 0;\n    });\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqupro18.php:19\n\
    Stack trace:\n#0 /tmp/tmpcqupro18.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcqupro18.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) == 0 || count($lst)\
    \ == 1) {\n        return 0;\n    }\n    return $lst[0] + array_sum(array_slice($lst,\
    \ 1));\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgb4ciat.php:19\n\
    Stack trace:\n#0 /tmp/tmpkgb4ciat.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkgb4ciat.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $arr = array_filter($lst);\n    foreach($arr\
    \ as $i => $num) {\n        if ($i % 2 === 0) {\n            $arr[$i] += $arr[$i+1];\n\
    \            unset($arr[$i+1]);\n        }\n    }\n    return $arr[0] + array_sum($arr);\n\
    }\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9i36jxn.php:22\n\
    Stack trace:\n#0 /tmp/tmpp9i36jxn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpp9i36jxn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = array_sum(array_slice($lst,\
    \ 0, ceil(count($lst) / 2)));\n    for ($i = 1; $i < count($lst); $i++) {\n  \
    \      $result += $lst[$i] * $i;\n    }\n    return $result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI like this solution, but I'm having trouble seeing why you are\
    \ using arrays to solve this problem. I've also heard that using loops is inefficient.\
    \ Can you please elaborate?\n<|/ c |>\n<| c |>\nIf you only use loops, you have\
    \ to search each element twice (once for even-odd index, once for odd-even index)\
    \ but if you use arrays, you only need to search the odd positions once\n<|/ c\
    \ |>\n<| c |>\nI like this solution. Would you mind explaining the code? I'm having\
    \ trouble understanding the array_slice and array_sum bits.\n<|/ c |>\n<| c |>\n\
    It took me a while to figure out what the `array_sum` line is doing, but it really\
    \ helps if you break it down into its pieces.\n<|/ c |>\n<| c |>\n: array_slice\
    \ and array_sum will take the first half of the array (starting at position 0),\
    \ plus the sum of the odd values multiplied by its index (multiplied by 2).\n\
    <|/ c |>\n<| a dscore=2 |>\nTry this:\n<code>\n<?php\n$list = array(\n    5,8,7,1\n\
    );\n$sum = 0;\nfor($i = 0; $i < count($list); $i++){\n    $sum+= $list[$i]*$i;\n\
    }\necho $sum;\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9r54mggl.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps107nb1e.php:15\n\
    Stack trace:\n#0 /tmp/tmps107nb1e.php(24): test()\n#1 {main}\n  thrown in /tmp/tmps107nb1e.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach($lst as $item)\
    \ {\n        $sum += isset($lst[$item - 1]) ? $lst[$item - 1] % 2 : 0;\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a terrible answer, it\
    \ fails to explain what you are doing with each line and also doesn't use any\
    \ built-in functionality that makes this problem simpler\n<|/ c |>\n<| c |>\n\
    This also uses some fairly advanced functionality that would most likely get lost\
    \ on someone.\n<|/ c |>\n<| a dscore=0 tags=arrays,php |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa0b5364s.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $number)\
    \ {\n        if ($number % 2 != 0) {\n            $sum+= $number;\n        }\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the\
    \ answer. I don't really understand this part: `$sum+= $number;`. Can you please\
    \ explain or give a link to an explanation as to what this line does?\n<|/ c |>\n\
    <| c |>\nIt adds the current number to the running sum. Basically it increments\
    \ the sum by one. Think of it like a tally counter in excel.\n<|/ c |>\n<| a tags=php,arrays\
    \ dscore=0 |>\nThe simplest solution i came up with is this\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp31mdgot4.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = $lst[0];\n    for ($i =\
    \ 1; $i < count($lst); $i++) {\n        if ($lst[$i] % 2 === 0 && ($result % 2\
    \ !== 0 || ($lst[$i - 1] % 2 === 0 && $lst[$i - 2] % 2 !== 0))) {\n          \
    \  $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=1 |>\nUsing array_filter():\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8oyqodkr.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    foreach($lst as $i => $v){\n    \
    \    if ($i % 2 === 0 && $v % 2 !== 0){\n            $sum += $v;\n        }\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThe OP\
    \ isn't asking to sum the numbers in an array. They are asking to sum the numbers\
    \ in the odd positions of the array. For example, `solution([30, 13, 24, 321])`\
    \ should return `0` as the sum of the odd numbers in the even positions of the\
    \ array is `0`.\n<|/ c |>\n<| c |>\nHmm, I missed that... I updated my answer\
    \ with a solution that I think is what OP is looking for.\n<|/ c |>\n<| a |>\n\
    You could use a callback with array_filter:\n<code>\n$evens = array_filter($array,\
    \ function ($v) { return $v % 2 == 0; });\n$odd = array_filter($array, function\
    \ ($v) { return $v % 2 != 0; });\n$sum = $odd[0] + $odd[1];\n</code>\n<|/ a dscore=2\
    \ tags=php,arrays |>\n<| a |>\nYou can do it using array_filter() and array_sum():\n\
    <code>\n$arr = [5,8,7,1];\n\n$odd = array_filter($arr, function ($v) {\n    return\
    \ $v & 1; \n});\n\n$even = array_filter($arr, function ($v) {\n    return !$v\
    \ & 1; \n});\n\n$sum = array_sum($odd) + array_sum($even);\n</code>\n<|/ a tags=php,arrays\
    \ dscore=2 |>\n<| a |>\n<code>\n$sum = 0;\nforeach ($list as $key => $value) {\n\
    \    if ($key % 2 == 0) {\n         $sum += $value;\n    }\n}\n</code>\n<|/ a\
    \ dscore=0 tags=php,arrays |>\n<| c |>\nThis doesn't work because the OP wants\
    \ the sum of odd positions in the array, not the sum of numbers in the odd positions\
    \ in the array.\n<|/ c |>\n<| a dscore=0 |>\nI think you want something like this:\n\
    <code>\n$arr = array( 5, 8, 7, 1 );\n$sum = 0;\n$odd = 0;\n$even = 0;\nforeach(\
    \ $arr as $key => $value )\n{\n    if( $key % 2 == 0 )\n    {\n        $odd +=\
    \ $value;\n    }\n    else\n    {\n        $even += $value;\n    }\n}\n$sum =\
    \ $odd + $even;\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\nYou can\
    \ \nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6h1a_bxf.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = 0;\n    foreach ($lst as\
    \ $number) {\n        if ($number & 1) $result += $number;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwt1ltjnd.php:20\n\
    Stack trace:\n#0 /tmp/tmpwt1ltjnd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwt1ltjnd.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (empty($lst)) {\n        return\
    \ 0;\n    }\n    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if\
    \ ($key % 2 !== 0) {\n            $sum += $value;\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a dscore=5 tags=php,arrays |>\n<| c |>\nThis is very\
    \ nice. But the code only works if your values are already sorted. So make sure\
    \ to run `array_multisort` first.\n<|/ c |>\n<| c |>\nHow does this answer the\
    \ question - it just returns every even index\n<|/ c |>\n<| a dscore=4 tags=php,arrays\
    \ |>\nSolution without foreach loop:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg0ntfi2d.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odds = array_filter($lst, 'is_odd');\n\
    \    $result = array_filter($lst, 'is_even');\n    return array_sum($odds) + array_sum($result);\n\
    }\n</code>\n<|/ a tags=math,php |>\n<| a |>\nI solved this with two loops \n<code>\n\
    $result = 0;\n\nfor($i=1;$i<=10;$i++){\n for($j=1;$j<=$i;$j++){\n    if ($j%2==0){\n\
    \       $result += $j;\n    }\n  }\n}\n</code>\n<|/ a dscore=0 tags=math,php |>\n\
    <| a tags=math,php |>\n<code>\n/**\n * integer[] $nums\n *\n * int\n */\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprel7ilip.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $sum = 0;\n  foreach($lst as $value)\
    \ {\n    if($value%2 != 0) {\n      $sum = $sum + $value;\n    }\n  }\n  return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbxfgz2a.php:22\n\
    Stack trace:\n#0 /tmp/tmpdbxfgz2a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdbxfgz2a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    foreach($lst as $i){\n        if($i%2!=0){\n\
    \            return ($i%2!==0?$i%2==1?$i:0:0:0);\n        }\n    }\n    return\
    \ $lst;\n}\n</code>\n<|/ a |>\n<| a |>\nHere is another solution (which I think\
    \ would be faster due to fewer loops).\n<code>\nfunction candidate(...$args) {\n\
    \    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp6x70npb.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $v)\
    \ {\n        if ($v % 2 != 0) {\n            $sum += $v;\n        }\n    }\n \
    \   return $sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nlet\
    \ input = [1,2,3,4]\nlet output = []\nfor (i in input) {\n  if (i % 2 === 0){\n\
    \    output.push(i)\n  }\n}\nconsole.log(output)\n</code>\n<|/ a tags=php |>\n\
    <| a |>\nUsing a regular for-loop:\n<code>\nfunction candidate(...$args) {\n \
    \   return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6w6ryhev.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach($lst as $value)\
    \ {\n        if ($value % 2 == 1) $sum += $value;\n    }\n    return $sum;\n}\n\
    </code>\n<|/ a |>\n<| a tags=sum,php,arrays |>\n<code>\n<?php\n\n$ar = array(5,\
    \ 8, 7, 1);\n\n$sum = 0;\nforeach($ar as $value) {\n    if($value % 2 == 1) {\n\
    \        $sum+= $value;\n    }\n}\n\necho $sum;\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0mbd8jql.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $ret = 0;\n    foreach ($lst as $k=>$v){\n\
    \        if (!$v%2) $ret += $v;\n    }\n    return $ret;\n}\n</code>\nThis solution\
    \ has time complexity O(N + M) where N is the number of elements in the input\
    \ list and M is the average number of odd values per input element.\n<|/ a tags=php,algorithm,arrays,recursion\
    \ dscore=2 |>\n<| c |>\nYes, that is one of the solution that I tried. But I need\
    \ a way without using a for loop.\n<|/ c |>\n<| a |>\nThis would be a straight\
    \ forward solution for you using arrays in PHP:\n<code>\n<?php\n\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $sum = 0;\n\nfor($i = 0; $i < count($array); $i++){\n    if ($array[$i] % 2 ==\
    \ 0){\n        $sum += $array[$i];\n    }\n}\n\nvar_dump($sum);\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3ghu4_os.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $odds = 0;\n  $evens = count($lst)\
    \ - 1;\n  for($i = 0; $i < count($lst); $i++) {\n    if($i % 2 === 0) {\n    \
    \  $evens += $lst[$i];\n    } else {\n      $odds += $lst[$i];\n    }\n  }\n \
    \ return $odds - $evens;\n}\n</code>\n<|/ a tags=php,sum,arrays |>\n<| a tags=php,sum,arrays\
    \ |>\n<code>\n$sum = 0; //sum of all odd numbers in array\n$sumOfOddNumbersInArray\
    \ = array(); //sum of odd numbers in array\n\nfor($i = 0; $i < count($arr); $i++){\n\
    \    if($arr[$i] % 2 != 0) { //checking whether current element is odd or not\n\
    \        $sumOfOddNumbersInArray[] = $arr[$i]; //adding odd numbers to array\n\
    \        $sum += $arr[$i]; //adding sum of odd numbers in array to sum variable\n\
    \    }\n}\n\necho \"Sum: \".$sum; //printing sum\n\necho \"<br>Sum of odd numbers\
    \ in array: \".array_sum($sumOfOddNumbersInArray); //printing sum of all odd numbers\
    \ in array\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThe above answers all work, but\
    \ this is my version.  \n<code>\n$array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\
    $odds = array_filter($array, function($n) use(&$odds){\n    return $n % 2 !==\
    \ 0;\n});\n\n$evens = array_filter($array, function($n) use(&$evens){\n    return\
    \ $n % 2 === 0;\n});\n\n$sumOdd = array_sum($odds);\n$sumEven = array_sum($evens);\n\
    \n$sum = $sumOdd + $sumEven;\n</code>\nThis version allows you to not change your\
    \ original array or add any other variables.  No loops, no variables, and no new\
    \ variables.\n<|/ a dscore=2 tags=php,sum,arrays |>\n<| a dscore=2 tags=php,sum,arrays\
    \ |>\nThis is a very simple solution using array_sum and array_filter.\n<code>\n\
    <?php\n    $arr = [1, 4, 9, 16, 25];\n    $sumOdd = array_sum(array_filter($arr,\
    \ function ($elem) {\n        return $elem % 2;\n    }));\n    echo $sumOdd; //\
    \ 25\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1gsvtxo1.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $odds = array_filter($lst,function($num){return\
    \ $num%2==1;});\n  return array_sum($odds);\n}\n\n$a=[5,8,7,1];\necho solution($a);\
    \ // 12\n</code>\n<|/ a dscore=0 tags=php |>\n<| a |>\nA simple approach would\
    \ be to use array_sum() with array_filter() to find all the even indexes and array_sum()\
    \ the even indexes to find the sum of all the odd values.\n<code>\n$arr = [5,8,7,1];\n\
    $odds = array_filter($arr,function($num){return $num%2==1;});\necho array_sum($odds);\
    \ // 12\n</code>\n<|/ a dscore=0 tags=php |>\n<| a dscore=0 |>\nOne liner:\n<code>\n\
    array_sum(array_filter(array_map('intval', str_split($str, 2)), fn($v) => (int)\
    \ $v % 2 === 1));\n</code>\n<|/ a tags=php |>\n<| a dscore=0 tags=php |>\n<code>\n\
    $sum=0;\n$str = '5,8,7,1';\n$arr_str = str_split($str, 2);\nforeach ($arr_str\
    \ as $key => $value) {\n    $sum+=$arr_str[$key]%2;\n}\necho $sum;\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nOne liner\n<code>\necho array_sum(array_filter(str_split($str,\
    \ 2), function($v){return $v%2==1;}));\n</code>\n<|/ a tags=php |>\n<| a |>\n\
    <code>\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpng8nuaae.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if(count($lst) <= 0) { return 0;\
    \ }\n\n    $odd_sum = 0;\n    $len = count($lst);\n    for($i = 0; $i < $len;\
    \ ++$i) {\n        if($i % 2 == 0) {\n            $odd_sum += $lst[$i];\n    \
    \    }\n    }\n\n    return $odd_sum;\n}\n</code>\nThis runs in O(n) time and\
    \ O(1) space, as is evident by the first and only for loop.\n<|/ a |>\n<| c |>\n\
    This does not run in O(1) space.\n<|/ c |>\n<| c |>\nThe space complexity is O(n)\
    \ since the list is never altered inside the `for` loop.\n<|/ c |>\n<| c |>\n\
    The question specifically asks for an O(1) space, so we can't get away from O(n)\
    \ space.\n<|/ c |>\n<| c |>\nIf I'm reading the question correctly, this solution\
    \ does not take into account the requirement that the sum of the odd elements\
    \ is returned. In the question you return the sum of the odd elements (12), but\
    \ in your solution you return 1 (the first odd element in [1,3,5,7,9]) - the question\
    \ doesn't say what they expect to see if the input doesn't match the expected\
    \ output. Based on the question body, I don't see how this answers it, but I'll\
    \ keep thinking about it...\n<|/ c |>\n<| c |>\nIt does take O(1) space. In the\
    \ `else` block you `return $odd_sum;`. Even if you had returned `$odd_sum + 1;`\
    \ instead, you'd still have a space complexity of O(n). You can prove this by\
    \ considering the number of assignments done during each iteration. The assignments\
    \ are limited to `$odd_sum += $lst[$i];`. So you can get away with O(1) assignment\
    \ and space complexity.\n<|/ c |>\n<| a |>\nIf you do not want to use an external\
    \ array, you can use array_sum():\n<code>\n$lst = [5, 8, 7, 1, 8, 7, 1, 8, 7,\
    \ 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8,\
    \ 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1,\
    \ 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7,\
    \ 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8,\
    \ 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, 8, 7, 1, \nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvysmzn39.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $evens = array_filter($lst, function($i)\
    \ { return $i & 1; });\n  $odds = array_filter($lst, function($i) { return $i\
    \ & 2; });\n  return array_sum($odds) + array_sum($evens);\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6kpph1f.php:17\n\
    Stack trace:\n#0 /tmp/tmpk6kpph1f.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpk6kpph1f.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $i\
    \ => $n) {\n        if ($i % 2 !== 0) {\n            $sum += $n;\n        }\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n`array_filter`\
    \ does not mutate the original array\n<|/ c |>\n<| a dscore=0 tags=php,algorithm\
    \ |>\nThis solution uses array_filter and array_map to filter the elements, and\
    \ array_sum to sum the filtered elements.\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpasdn8w7y.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(\n        array_filter($lst,\
    \ function ($i) { return $i%2 === 1; }));\n}\n</code>\n<|/ a tags=php,php-5.3,arrays\
    \ dscore=5 |>\n<| c |>\nThis is an O(n) solution, but it's very concise. I like\
    \ it :)\n<|/ c |>\n<| c |>\nNice solution, but why are you using `array_filter`\
    \ and not `array_reduce`?\n<|/ c |>\n<| c |>\n: Because I didn't know about `array_reduce`\
    \ until you asked. `array_reduce` works just like `array_filter` in this case,\
    \ but reduces more efficiently because we know that the last value is one we care\
    \ about. In most other situations, `array_reduce` would be a better choice, although\
    \ `array_reduce` also has a `3rd` argument that acts as a `callback` that is used\
    \ as the return value; I tend to forget that argument when I use it myself.\n\
    <|/ c |>\n<| c |>\n: Actually, my initial reaction to this question was that `array_reduce`\
    \ was the right choice in this situation, because `array_reduce` gives us the\
    \ ability to skip intermediate values when we're done. But then I realized that\
    \ `array_reduce` actually does *not* give us the ability to skip intermediate\
    \ values. It does allow us to specify `return $last;` as the callback, which makes\
    \ the `array_reduce` solution identical to the `array_filter` solution in this\
    \ case.\n<|/ c |>\n<| c |>\nI like this solution but the array_filter has a bug.\
    \ If the array is empty it returns an empty array. Easily fixed by adding || $arr\
    \ = [] before the first return.\n<|/ c |>\n<| a |>\nI do not see how array_filter\
    \ could be used to achieve the required outcome.\nThe solution that I would use\
    \ is probably array_reduce:\n<code>\n$input = array(5, 8, 7, 1);\n\n$result =\
    \ array_reduce($input, function ($carry, $item) {\n    return $carry + $item %\
    \ 2 != 0;\n});\n\nvar_dump($result);\n</code>\nIt returns 12.\n<|/ a tags=php,php-5.3,arrays\
    \ dscore=4 |>\n<| a dscore=4 tags=php,php-5.3,arrays |>\n<code>\n$input = array(5,\
    \ 8, 7, 1);\n\n$result = array_sum(\n  array_filter(\n    $input,\n    function\
    \ ($v) use ($input) {\n      return ($v & 1) == 0;\n    }\n  )\n);\n\necho $result;\n\
    </code>\n<|/ a |>\n<| c |>\nW\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq21rlwe5.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    $l = count($lst);\n\
    \    for ($i=0; $i<$l; $i++) {\n        if ($i % 2 == 0) {\n            $sum =\
    \ $sum + $lst[$i];\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a tags=php |>\nUsing array_filter and array_column to extract array values\n\
    <code>\n$array = array(5, 8, 7, 1);\necho array_sum(array_filter(array_column($array,\
    \ 'odd'),'odd'));\n</code>\n<|/ a dscore=4 |>\n<| a |>\nThe simplest way without\
    \ using array_filter and array_column (PHP 5.5+):\n<code>\narray_sum(array_filter(array_intersect_key(array_flip($array),\
    \ array_flip($array)));\n</code>\n<|/ a dscore=3 tags=php |>\n<| c |>\nI love\
    \ the use of array_flip and array_intersect_key here! This is by far the most\
    \ elegant and readable solution I've seen. Just the perfect use case for a combination\
    \ of array_filter and array_column!\n<|/ c |>\n<| a dscore=2 |>\nThe best way\
    \ I know, is:\n<code>\n$list = array('5', '8', '7', '1');\n$sum = array_reduce($list,\
    \ function ($sum, $n) {\n    return $sum + $n % 2;\n});\n</code>\narray_reduce\
    \ is better than array_sum in this case. \nThe function array_reduce is available\
    \ only since PHP 5.3.\n<|/ a tags=php |>\n<| c |>\nI believe that array_reduce\
    \ is available since 5.3\n<|/ c |>\n<| c |>\n`array_reduce` also has worse performance\
    \ than `array_filter` + `array_column`\n<|/ c |>\n<| c |>\n`array_reduce` is also\
    \ available since 5.4.\n<|/ c |>\n<| a dscore=2 tags=php |>\nFor arrays with one\
    \ value only, you can use the following, but keep in mind array_reduce is available\
    \ since PHP 5.3\n<code>\n$sum = array_sum(array_filter(array_slice($list, 1, 1)));\n\
    </code>\n<|/ a |>\n<| a tags=php |>\nThis is another solution using array_filter\
    \ and array_column to extract the odd numbers from the array:\n<code>\n$arr =\
    \ [5, 8, 7, 1];\n\n$odd = array_filter(array_column($arr,'odd')); // [1, 7, 5,\
    \ 8]\n\n$sum = array_sum($odd); // 12\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp4wrf30v.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    $len = count($lst);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe point is to find a solution by not using loops.\n<|/ c |>\n<| c |>\n\
    This answer does not require any loops, it just loops over the array twice.\n\
    <|/ c |>\n<| c |>\nYeah sorry, this doesn't have to be in PHP, it can be in any\
    \ language.\n<|/ c |>\n<| c |>\nBut isn't that an important requirement?\n<|/\
    \ c |>\n<| c |>\nIt is not. But I figured that out myself. Just wanted to write\
    \ my own answer, and I figured out the same solution before. :) But thanks for\
    \ posting your answer here, as I learnt something new :)\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe solution is simple when you realize that you can only add numbers in\
    \ groups of 2.  In other words, you are adding 1+2+3 and 2+3+4...\nFor every element\
    \ in the array, check if it is odd.  If it is, add it to the sum.  If it's even,\
    \ then check if it is a multiple of two, and if it is, add it to the sum.  You\
    \ will continue this until you reach the end of the array.\nThis code will achieve\
    \ this result (with a bit of extra code to handle corner cases):\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpomhf2qr5.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    for($i = 0, $sum = 0; $i < count($lst);\
    \ $i++){\n        if($lst[$i] % 2 === 0){\n            $sum += $lst[$i];\n   \
    \     }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease\
    \ don't post only code as answer, but also provide an explanation what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| c |>\nI agree with you, but there are some people who\
    \ are just beginners, that may have difficulties in understanding my answer. And\
    \ sometimes they may have to study harder before understanding the answer. So,\
    \ I'll give a more detailed answer, which is why I did it. I hope that someone\
    \ like me would be able to understand my answer more easily.\n<|/ c |>\n<| c |>\n\
    In that case I suggest you to read [How do I write a good answer](https://stackoverflow.com/help/how-to-answer)\
    \ from the Stack Overflow help center and to [edit] your answer to improve it.\n\
    <|/ c |>\n<| a tags=php dscore=0 |>\nIf you need to print all odd numbers between\
    \ two given numbers then you can also use below code :\n<code>\n$num = 100;\n\
    $lowerLimit = 60;\n$upperLimit = 100;\n\nfor($i=$lowerLimit; $i<=$upperLimit;\
    \ $i++){\n    if($i%2==1){\n        echo $i .\"<br>\";\n    }\n}\n</code>\n<|/\
    \ a |>\n<| a tags=php |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp433abbj.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // write your code in PHP7.0\n  \
    \  $array = array_filter($lst);\n    foreach ($array as $key=>$value) {\n    \
    \    if (($key % 2) == 0) {\n            $array[$key] += $array[$key+1];\n   \
    \     }\n    }\n    return array_sum($array);\n}\n\n$result = solution([30, 13,\
    \ 24, 321]);\nvar_dump($result);\n</code>\n<|/ a tags=arrays,php,php-7,array-filter\
    \ |>\n<| a dscore=2 |>\nI solved my own question using array_reduce().\n<code>\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy76wh3zz.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) == 0) {\n       \
    \ return 0;\n    }\n    $sum = 0;\n    foreach ($lst as $key => $item) {\n   \
    \     if ($key % 2 === 0) {\n            $sum += $item;\n        }\n    }\n  \
    \  return $sum;\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuloznk3k.php:26\n\
    Stack trace:\n#0 /tmp/tmpuloznk3k.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpuloznk3k.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum_odd = 0;\n    foreach ($lst\
    \ as $num) {\n        $odd = !($num % 2);\n        if ($odd) {\n            $sum_odd\
    \ += $num;\n        }\n    }\n    return $sum_odd;\n}\n\n</code>\n<|/ a dscore=1\
    \ tags=php |>\n<| a tags=php |>\nUse array_filter to filter the odd numbers in\
    \ the array $arr. Then, use array_sum to get the sum of the filtered odd numbers.\n\
    <code>\n$arr = [5, 8, 7, 1, 30, 13, 24, 321];\n$sum_odd = array_sum(array_filter($arr,\
    \ function($x) {\n    return $x % 2;\n}));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_zm_izox.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = 0;\n    foreach ($lst as\
    \ $key => $value) {\n        if ($key % 2 !== 0) {\n            $result +=$value;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5bjqncm.php:22\n\
    Stack trace:\n#0 /tmp/tmpz5bjqncm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpz5bjqncm.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    array_walk($lst, 'sort');\n    return\
    \ array_reduce($lst, function ($c, $v) use ($lst) {\n        if ($v & 1)\n   \
    \         $c += $lst[array_search($v, $lst)]; \n        return $c;\n    }, 0);\n\
    }\n</code>\nDemo on 3v4l.org\n<|/ a tags=arrays,php dscore=2 |>\n<| c |>\nThe\
    \ output for this one is `19` but the OP wants `12` as mentioned in the example.\
    \ :)\n<|/ c |>\n<| c |>\nI missed that, thanks for pointing it out. I've updated\
    \ my answer. :)\n<|/ c |>\n<| c |>\nThank you for the quick reply, but this one\
    \ will also print 0 for [3, 3, 3, 3, 3] where output should give 9 as 9 are the\
    \ odd elements that are in even positions in the array.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$nums = [5, 8, 7, 1];\n$sum = array_reduce($nums, function($carry,\
    \ $current){\n    return $carry + $current % 2;\n});\necho $sum;\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| c |>\nThe output for this one is `19` but the OP wants\
    \ `12` as mentioned in the example. :)\n<|/ c |>\n<| c |>\nI've changed my answer\
    \ to include 12. :)\n<|/ c |>\n<| a tags=arrays,php dscore=1 |>\nYou can use the\
    \ function array_filter() like this :\n<code>\n$nums = [5, 8, 7, 1];\n$sum = array_sum(array_filter($nums,\
    \ function($k){\n    return ($k&1);\n}));\necho $sum;\n</code>\n<|/ a |>\n<| c\
    \ |>\nThe output for this one is `19` but the OP wants `12` as mentioned in the\
    \ example. :)\n<|/ c |>\n<| c |>\nThe output is 12 :)\n<|/ c |>\n<| c |>\nThe\
    \ output of this answer is `19`, not `12`\n<|/ c |>\n<| c |>\nThe output for this\
    \ one is `19` but the OP wants `12` as mentioned in the example. :)\n<|/ c |>\n\
    <| c |>\nSorry, yes I forgot that `0` is also a value in my array, I've updated\
    \ the code with your solution, thanks.\n<|/ c |>\n<| a tags=arrays,php |>\nUsing\
    \ array_sum() and array_search() function\n<code>\n$arr\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9r5zx48v.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = array_sum(array_slice($lst,\
    \ 0, 2));\n    foreach (array_slice($lst, 2) as $val) {\n        $sum += $val\
    \ % 2 == 0;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n  \
    \  return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzc1jsbn.php:20\n\
    Stack trace:\n#0 /tmp/tmplzc1jsbn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplzc1jsbn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    foreach ($lst as $k => $v) {\n  \
    \      if ($k % 2 == 0) {\n            $total += $v;\n            unset($lst[$k]);\n\
    \        }\n    }\n    return $total;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    You can try this:\n<code>\n$array=array(5,8,7,1);\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6o7h_2wx.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Write your PHP code here. Enjoy!\n\
    }\n\n$result = solution($list);\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83rafzan.php:18\n\
    Stack trace:\n#0 /tmp/tmp83rafzan.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp83rafzan.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    $len = count($lst);\n\
    \    for($i = 0; $i < $len; $i++){\n        if($lst[$i] % 2 === 0){\n        \
    \    $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslm5zx6w.php:22\n\
    Stack trace:\n#0 /tmp/tmpslm5zx6w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpslm5zx6w.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // your code here\n    $result =\
    \ 0;\n    foreach ($lst as $key => $value) {\n        if ($value % 2 != 0) {\n\
    \            $result += $value;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=1 tags=php |>\n<| a tags=php dscore=1 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdd_kekqb.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = 0;\n    foreach($lst as\
    \ $value){\n        if($value % 2 == 1){\n            $result += $value;\n   \
    \     }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ dscore=1 |>\n<| c |>\nThank you for this code snippet, which may provide some\
    \ immediate help.  A proper explanation [would greatly improve](//meta.stackexchange.com/q/114762)\
    \ its educational value by showing *why* this is a good solution to the problem,\
    \ and would make it more useful to future readers with similar, but not identical,\
    \ questions.  Please [edit] your answer to add explanation, and give an indication\
    \ of what limitations and assumptions apply.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\nI have another simple solution (Not Sure).\n<code>\n$nums = [\n        5,8,7,1\n\
    ];\n\n$sum = 0;\nforeach($nums as $val){\n    if($val%2==0)\n        $sum += $val;\n\
    }\n\necho $sum;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI believe you can\
    \ find an elegant solution like this.\n<code>\nfunction candidate(...$args) {\n\
    \    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw_yq83x2.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_reduce($lst, 'array_filter',\
    \ [$this, 'filterOdd']);\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmppi7ot6q7.php:8\nStack trace:\n#0 /tmp/tmppi7ot6q7.php(12): solution(Array)\n\
    #1 /tmp/tmppi7ot6q7.php(16): candidate(Array)\n#2 /tmp/tmppi7ot6q7.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmppi7ot6q7.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if(count($lst) == 0 || count($lst)\
    \ == 1) {\n        return 0;\n    }\n    \n    $odd = array_filter($lst, 'is_odd');\n\
    \    \n    return $odd ? array_sum($odd) : false;\n}\n</code>\n<|/ a tags=php\
    \ dscore=0 |>\n<| a dscore=0 |>\nThis is what i came up with:\n<code>\n$numbers\
    \ = array(\n    1 => 1,\n    2 => 3,\n    3 => 5,\n    4 => 7,\n    5 => 9,\n\
    \    6 => 11\n);\n\nforeach ($numbers as $key => $value) {\n    if ($key % 2 !=\
    \ 0) {\n        $numbers[$key] = false;\n    }\n}\nprint_r($numbers);\necho array_sum($numbers);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n\
    \    [3] => 7\n    [4] => 9\n    [5] => 11\n)\n20\n</code>\n<|/ a tags=php |>\n\
    <| a |>\nAnother one:\n<code>\n<?php\n$a = array(1, 2, 3, 4, 5);\n$b = array(0,\
    \ 2, 4, 6, 8);\n$c = 0;\nforeach ($a as $k => $v){\n    if ($k % 2 != 0){\n  \
    \      $c += $b;\n    }\n}\necho $c;\n</code>\n<|/ a tags=php dscore=0 |>\n<|\
    \ a dscore=0 tags=php |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n    2\
    \ => 3,\n    3 => 5,\n    4 => 7,\n    5 => 9,\n    6 => 11\n);\n\n$count = 0;\n\
    $total = 0;\n\nforeach ($numbers as $key => $value) {\n    $total += $value;\n\
    \    if ($key % 2 != 0) {\n        $count++;\n    }\n}\necho \"Count: \" . $count;\n\
    echo \"Total: \" . $total;\n</code>\n<|/ a |>\n<| a tags=php dscore=0 |>\nThis\
    \ code does the job:\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppzy56_gc.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    sort($lst);\n    $evenPos = array_filter($lst,\
    \ 'is_int');\n    return $evenPos[array_keys($evenPos)[0]] * 2;\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppr8c1zs_.php:17\n\
    Stack trace:\n#0 /tmp/tmppr8c1zs_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppr8c1zs_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach($lst as $key\
    \ => $val){\n        if($val % 2 == 0){\n            $sum+= $val;\n        }\n\
    \    }\n    return $sum;\n}\n$myfile = fopen(\"results.txt\", \"w\") or die(\"\
    Unable to open file!\");\nfwrite($myfile, print_r($lst, true));\nfclose($myfile);\n\
    </code>\n<|/ a tags=php |>\n<| a |>\nHere is the php code\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxrip8ta_.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odd = array_filter($lst, function($val)\
    \ { return $val & 1; });\n    return array_sum($odd);\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_pfeip_.php:16\n\
    Stack trace:\n#0 /tmp/tmpu_pfeip_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpu_pfeip_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = array_sum(array_slice($lst,1,count($lst)/2));\n\
    \    for($i = count($lst)/2; $i; --$i){\n        if(isset($lst[$i])){\n      \
    \      $sum += $lst[$i];\n            unset($lst[$i]);\n        }\n    }\n   \
    \ return $sum;\n}\n</code>\n<|/ a dscore=1 tags=php,functional-programming,arrays\
    \ |>\n<| a dscore=0 |>\nYou don't need recursion, array_sum is enough.\n<code>\n\
    <?php\n\n$arr = [\n    5 => 8,\n    8 => 7,\n    7 => 1,\n    1 => 0,\n];\n\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ivvdot5.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $odd = 0;\n  foreach ($lst as $value)\
    \ {\n    if ($value % 2 === 1) {\n      $odd += $value;\n    }\n  }\n  return\
    \ $odd;\n}\n</code>\n<|/ a |>\n<| a |>\nI thought I'd answer this question for\
    \ anyone who finds it useful.\n<code>\n$test = $var1 + $var2 + $var3 + $var4 +\
    \ $var5;\nif($test % 2 == 0) {\n    $var6 = $var6;\n} else {\n    $var6 = 0;\n\
    }\n</code>\nThis worked for me. Hope it helps someone else out there. :)\n<|/\
    \ a dscore=1 tags=php |>\n<| c |>\nYou can't do math with strings\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuryn7rzl.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (!$lst) return 0;\n    $sum =\
    \ 0;\n    $odd = array();\n    foreach ($lst as $value) $odd[] = $value % 2;\n\
    \    foreach ($odd as $value => $is_odd) if ($is_odd) $sum += $value;\n    return\
    \ $sum;\n}\n</code>\n<|/ a |>\n<| a |>\nHere's an iterative solution using array_reduce()\
    \ in PHP:\n<code>\n$listOfNumbers = range(1, 31);\n$oddsOfEach = array_map(function($value)\
    \ use ($listOfNumbers) {\n    return $value % 2;\n}, $listOfNumbers);\n$result\
    \ = array_reduce($oddsOfEach, function($carry, $value) use ($listOfNumbers) {\n\
    \    return $carry + $listOfNumbers[$value];\n}, 0);\n\necho $result;\n</code>\n\
    Output:\n<code>\n36\n</code>\nDemo here\n<|/ a dscore=0 tags=php |>\n<| a tags=php\
    \ dscore=0 |>\nHere's a solution using array_reduce:\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3iq6lnu5.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item % 2 == 0) {\n            $sum += $item;\n        }\n  \
    \  }\n    return $sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nAnother solution.\
    \ \n<code>\n<?php\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpci0n8wzk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (empty($lst)) return 0;\n    $sum\
    \ = 0;\n    foreach ($lst as $value) {\n        if (($value % 2) === 0) {\n  \
    \          $sum += $value;\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_m8fosl3.php:22\n\
    Stack trace:\n#0 /tmp/tmp_m8fosl3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_m8fosl3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // your code here\n    // loop through\
    \ array\n    foreach($lst as $item){\n        if($item %2 == 0){\n           \
    \ $even = array_filter($lst, 'odd');\n            $sum += array_sum($even);\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 2 to be a valid callback, function\
    \ 'odd' not found or invalid function name in /tmp/tmp62i2vhkn.php on line 12\n\
    \nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp62i2vhkn.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62i2vhkn.php:24\n\
    Stack trace:\n#0 /tmp/tmp62i2vhkn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp62i2vhkn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  // Your code here\n  if(!is_array($lst))\
    \ return 0;\n  $sum = 0;\n  foreach($lst as $key=>$val){\n    if($val%2 === 0)\
    \ $sum+=2*$val;\n    if($val%2 !== 0) $sum+=2*$key;\n  }\n  return $sum;\n}\n\n\
    var_dump(solution([5, 8, 7, 1])); // 12\nvar_dump(solution([3, 3, 3, 3, 3]));\
    \ // 9\nvar_dump(solution([30, 13, 24, 321])); // 0\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nI'm sorry, I don't understand your comment. Could you please tell me\
    \ what are you asking?\n<|/ c |>\n<| c |>\nMy point was that you don't need to\
    \ loop in the second case. Just use `$key + $val`, since it's already even-indexed.\
    \ `if($val%2 !== 0) $sum+=2*$key;`.\n<|/ c |>\n<| c |>\nThanks, you're right.\
    \ I thought that `$key` would be even-indexed in both cases.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThis is a very efficient solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz1vo_49_.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 2 === 0) {\n            $sum += $value;\n \
    \       }\n    }\n    return $sum;\n}\n</code>\nThe code above has 2 loops, one\
    \ for getting the sum and the other for iterating over the list.\n<|/ a |>\n<|\
    \ a tags=php,arrays,math |>\n<code>\n<?php\nfunction candidate(...$args) {\n \
    \   return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpppr6pexv.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = array_filter($lst);\n  \
    \  return array_sum(array_slice($evens, 0, array_search($evens, $lst)));\n}\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96oud_ym.php:16\n\
    Stack trace:\n#0 /tmp/tmp96oud_ym.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp96oud_ym.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  foreach ($lst as $key => $value) {\n\
    \    if ($key % 2 !== 0) {\n      $sum += $value;\n    }\n  }\n  return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxu0ue2hv.php:21\n\
    Stack trace:\n#0 /tmp/tmpxu0ue2hv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxu0ue2hv.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    $i = 0;\n    foreach\
    \ ($lst as $num) {\n        $i++;\n        if ($i%2 === 0) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,functional-programming,oop,reduce\
    \ dscore=2 |>\nI love PHP :)\n<code>\n<?php\nclass Arr\n{\n    public function\
    \ sumOdd(array $arr)\n    {\n        $sum = 0;\n        foreach ($arr as $key\
    \ => $val) {\n            if ($key % 2 !== 0) {\n                $sum += $val;\n\
    \            }\n        }\n        return $sum;\n    }\n\n    public function\
    \ sumEven(array $arr)\n    {\n        $sum = 0;\n        foreach ($arr as $key\
    \ => $val) {\n            if ($key % 2 === 0) {\n                $sum += $val;\n\
    \            }\n        }\n        return $sum;\n    }\n}\n$arr = array(1, 2,\
    \ 3, 5);\necho Arr::sumEven($arr); // 10\necho Arr::sumOdd($arr); // 10\n</code>\n\
    <|/ a |>\n<| a |>\nTo solve this question, just add up all elements in odd positions\
    \ and all elements in even positions, like so:\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1j1jdt0r.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key\
    \ => $val) {\n        if ($key % 2 === 0) {\n            $sum += $val;\n     \
    \   } else {\n            $sum -= $val;\n        }\n    }\n    return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xdm_0yp.php:24\n\
    Stack trace:\n#0 /tmp/tmp4xdm_0yp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4xdm_0yp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    $len = count($lst);\n\
    \    for($i = 0; $i < $len; $i++) {\n        if($i % 2 == 0) {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nthanks bro !!! i was trying to do this thing in a different way\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$arr = [5,8,7,1];\n$arr1 = array_chunk($arr,\
    \ 2);\n$sum = 0;\nforeach ($arr1 as $value) {\n   $sum += $value[1];\n}\necho\
    \ $sum;\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nWhat about this approach\
    \ ?\n<|/ c |>\n<| c |>\ni think array_chunk will make each value in each element\
    \ as an array, this means $arr1[0] will be [5,8], $arr1[1] will be [7] etc\n<|/\
    \ c |>\n<| c |>\nThis is wrong answer it will throw a error as array_chunk returns\
    \ an array of arrays with keys and values. $arr1[0] will be [5,8], $arr1[1][7]\
    \ will throw error.\n<|/ c |>\n<| c |>\nYou are right, I thought that $arr1 would\
    \ be an array of arrays with index keys (0,1,2) and value ([5,8]) so $arr1[0][1]\
    \ would make sense but actually $arr1[0] is an array with keys (5,8) and the value\
    \ ([5,8]) is itself an array.\n<|/ c |>\n<| c |>\nI guess you meant $arr1[0] would\
    \ make sense. Corrected that\n<|/ c |>\n<| a tags=arrays,php |>\nI wanted to solve\
    \ the question with minimum complexity i.e. O(n) where n is the size of the array\
    \ and I came up with this code:\n<code>\n$numbers = [5, 8, 7, 1];\n\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8zn2nzzl.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $sum = 0;\n  for ($i = 1; $i <= count($lst);\
    \ $i++) {\n    if ($i % 2 == 0) {\n      if ($lst[$i] % 2 != 0) {\n        $sum\
    \ = $sum + $lst[$i];\n      }\n    }\n  }\n  return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputmymtgs.php:24\n\
    Stack trace:\n#0 /tmp/tmputmymtgs.php(33): test()\n#1 {main}\n  thrown in /tmp/tmputmymtgs.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (empty($lst)) {\n        return\
    \ 0;\n    }\n    $sum = 0;\n    foreach ($lst as $val) {\n        if ($val % 2\
    \ != 0) {\n            $sum += $val;\n        }\n    }\n    return $sum;\n}\n\n\
    $arr = [1, 4, 3, 10, 5, 6, 2, 9, 5, 8];\n\necho \"sum is \" . solution($arr);\n\
    </code>\n<|/ a tags=arrays,algorithm,php |>\n<| c |>\nWhat if the list is empty?\
    \ Your solution will return 0.\n<|/ c |>\n<| c |>\nThis was an example to show\
    \ how you can use a foreach loop to achieve the same result.\n<|/ c |>\n<| c |>\n\
    Oh I see, I misunderstood it.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n$array = array(1,2,3,4);\n\
    \necho \"Sum of odd numbers in array is: \".array_sum(array_slice($array,0,count($array)));\n\
    \nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa7yc61yk.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_reduce($lst, function($a,\
    \ $b) { return $a + (($b % 2 == 1) ? $b : 0); }, 0);\n}\n</code>\n<|/ a dscore=1\
    \ tags=php |>\n<| a tags=php |>\nYou can do this in two ways\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpymx5axm8.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  // Your code here\n  $sum = 0;\n  foreach($lst\
    \ as $number){\n    if($number % 2 == 1){\n      $sum += $number;\n    }\n  }\n\
    \  return $sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI guess the OP expects\
    \ the answer in this case: `solution([3, 3, 3, 3, 3])` should return `9` but in\
    \ your code you get `0`.\n<|/ c |>\n<| c |>\nYes, I see your point. I thought\
    \ he wanted the sum of all odd numbers in the given list. Answer updated.\n<|/\
    \ c |>\n<| a |>\nYou want to know if the number in the given list is an odd number.\
    \ \nThe array has numbers that represent a row of asterisks. If the number is\
    \ an even number, you want to replace it with a blank asterisk. If the number\
    \ is odd, you want to replace it with a blank asterisk, but only if it isn't the\
    \ number next to an even number. \n<code>\nfunction candidate(...$args) {\n  \
    \  return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6ithud_j.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  // Write your code here\n  return $lst;\n\
    }\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5m1emzt.php:16\n\
    Stack trace:\n#0 /tmp/tmph5m1emzt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmph5m1emzt.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // write your code in PHP7.0\n  \
    \  $oddSum = 0;\n    $evenSum = 0;\n\n    $oddArray = array_filter($lst, function($val,\
    \ $key) use (&$oddSum) {\n        return $val % 2 === 1;\n    });\n\n    foreach\
    \ ($oddArray as $val) {\n        $oddSum += $val;\n    }\n\n    return $oddSum;\n\
    }\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught ArgumentCountError: Too few arguments to function\
    \ {closure}(), 1 passed and exactly 2 expected in /tmp/tmpsi7ribbk.php:12\nStack\
    \ trace:\n#0 [internal function]: {closure}(5)\n#1 /tmp/tmpsi7ribbk.php(14): array_filter(Array,\
    \ Object(Closure))\n#2 /tmp/tmpsi7ribbk.php(23): solution(Array)\n#3 /tmp/tmpsi7ribbk.php(27):\
    \ candidate(Array)\n#4 /tmp/tmpsi7ribbk.php(36): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpsi7ribbk.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Your code here\n}\n</code>\n<|/\
    \ a tags=arrays,php,algorithm dscore=3 |>\n<| c |>\nIf I have an array of size\
    \ 500000 and it contains only integer values, what will be the best solution?\n\
    <|/ c |>\n<| c |>\nThis can be solved using only O(n), but your solution will\
    \ run indefinitely.\n<|/ c |>\n<| c |>\nThis is only a demonstration, not the\
    \ best solution. Using a while loop to go through the list only takes 2 lines\
    \ of code, which is far worse than the 5 line code the OP posted that does the\
    \ same thing.\n<|/ c |>\n<| a dscore=2 tags=arrays,php,algorithm |>\nUsing array_filter()\
    \ to filter array which satisfies your condition is O(n) which would be good enough.\
    \ Just for fun I'm doing it in O(n2) using a nested for loop:\n<code>\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz7qnfo9t.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $oddSum = 0;\n    foreach ($lst as\
    \ $k => $v) {\n        if ($k % 2 == 0) {\n            $oddSum += $v;\n      \
    \  }\n    }\n    return $oddSum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm\
    \ dscore=0 |>\n<code>\n<?php\n$values = [\n    5,8,7,1,\n    3,3,3,3,3,\n    30,13,24,321,\n\
    ];\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_ylidxv5.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  return array_sum(array_filter($lst,\
    \ 'odd'));\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 2 to be a valid callback, function\
    \ 'odd' not found or invalid function name in /tmp/tmpduu1yh25.php on line 8\n\
    \nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpduu1yh25.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpduu1yh25.php:15\n\
    Stack trace:\n#0 /tmp/tmpduu1yh25.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpduu1yh25.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_reduce($lst, function($c,\
    \ $v)\n    {\n        return ($v & 1) ? $c : $c + $c;\n    }, 0);\n}\n\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzij_53x.php:19\n\
    Stack trace:\n#0 /tmp/tmphzij_53x.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphzij_53x.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (!is_array($lst)) {\n        echo\
    \ 'Not an array';\n        return false;\n    }\n\n    foreach ($lst as $i =>\
    \ $val) {\n        // $i contains the current index and val the current value\n\
    \        if ($i % 2 != 0 && $val % 2 != 0) {\n            $sum = $sum + $val;\n\
    \        }\n    }\n\n    return $sum;\n}\nfunction candidate(...$args) {\n   \
    \ return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwf7j5oy.php:27\n\
    Stack trace:\n#0 /tmp/tmprwf7j5oy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprwf7j5oy.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = array_reduce($lst, 'array_sum',\
    \ 0);\n    $result %= 1000;\n    if ($result > 1000) {\n        return null;\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a tags=math,php,arrays,algorithm\
    \ |>\n<| c |>\nYour solution works, but it's unnecessarily complex. Why not simply\
    \ use `$result = array_sum($lst) % 1000;`? You don't need the extra array and\
    \ array reduce step.\n<|/ c |>\n<| c |>\nThat doesn't work well for large arrays,\
    \ for example `solution([5, 8, 7, 1])` should return `12`, but your solution returns\
    \ `11`\n<|/ c |>\n<| c |>\nYes, because I didn't think about it.\n<|/ c |>\n<|\
    \ c |>\nNo worries - my solution does work and it's easy to understand, so it's\
    \ better than most other answers.\n<|/ c |>\n<| a dscore=4 |>\nYou can do that\
    \ with a single expression using array_filter() function:\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptvvo0517.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $value)\
    \ {\n        $sum += $value % 2 ? $value : $value * -1;\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n\
    \    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph1g21fi7.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (empty($lst)) return 0;\n    $sum\
    \ = 0;\n    $even = array_filter($lst, 'is_int');\n    $odd  = array_filter($lst,\
    \ 'is_int');\n    for ($i=0, $n=count($odd); $i < $n; $i++) {\n        $sum =\
    \ $sum + ($odd[$i] + $even[$i] - (2 * $odd[$i] + $even[$i]));\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nIn Javascript, you can do this:\n\
    <code>\nconst arr = [5, 8, 7, 1]\n\nconst result = arr.reduce((acc, curr) => {\n\
    \    return (acc + (curr > 1 && curr%2)) || acc\n}, 0)\n\nconsole.log(result)\n\
    </code>\n<|/ a tags=algorithm,php dscore=1 |>\n<| a dscore=0 |>\nI believe this\
    \ would be the correct answer for the question:\n<code>\n$lst = [5,8,7,1];\n$sum\
    \ = 0;\nfor($i=0;$i<count($lst);$i++) {\n    if($lst[$i]%2) {\n        if($i>0)\
    \ {\n            $sum += ($lst[$i]-2*$lst[$i-1]);\n        } else {\n        \
    \    $sum = $sum + $lst[$i];\n        }\n    } else {\n        if($i>0) {\n  \
    \          $sum += ($lst[$i]-$lst[$i-1]);\n        } else {\n            $sum\
    \ = $sum + $lst[$i];\n        }\n    }\n}\necho $sum;\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| a dscore=0 |>\nHere's a solution in Java, using Collections:\n<code>\n\
    List<Integer> lst = new ArrayList<>(Arrays.asList(5,8,7,1));\nint sum = 0;\n\n\
    Collections.sort(lst);\n\nfor (int i = 0; i < lst.size(); i++) {\n    if(lst.get(i)%2\
    \ != 0){\n        if(i != 0) {\n            sum += (lst.get(i)-lst.get(i-1));\n\
    \        }\n        else {\n            sum += lst.get(i);\n        }\n    }\n\
    }\n\nSystem.out.println(sum);\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\n\
    Java 8+: `List<Integer> lst = Arrays.asList(5, 8, 7, 1);\n        int sum = 0;\n\
    \n        Collections.sort(lst);\n        \n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 != 0) {\n                if (i != 0)\
    \ {\n                    sum += (lst.get(i) - lst.get(i - 1));\n             \
    \   } else {\n                    sum += lst.get(i);\n                }\n    \
    \        }\n        }\n        \n        System.out.println(sum);`\n<|/ c \nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3xqgrb8l.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odd = array_filter(\n        $lst,\n\
    \        function($v) { return $v % 2 !== 0; }\n    );\n    return array_sum($odd);\n\
    }\n\n$arr = array(\n    array(3, 15, 16, 21, 23),\n    array(3, 15, 16, 21, 23),\n\
    \    array(3, 15, 16, 21, 23),\n    array(3, 15, 16, 21, 23),\n    array(3, 15,\
    \ 16, 21, 23),\n);\n\n$test = new \\PHPUnit_Framework_TestSuite;\n$test->addTest(new\
    \ \\PHPUnit_Framework_TestSuite_Reporter(\n    function () use ($arr) {\n    \
    \    return solution($arr);\n    },\n    array(\n        'data' => $arr,\n   \
    \     'expected' => 0,\n    )\n));\n\n$test->run();\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'PHPUnit_Framework_TestSuite' not\
    \ found in /tmp/tmpc52a9_mv.php:23\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpc52a9_mv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $evens = array_filter($lst, \"is_int\"\
    );\n    $odds = array_filter($lst, \"is_int\");\n    return array_sum(array_intersect_key($lst,\
    \ (array) $odds));\n}\n\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfno3qto8.php:18\n\
    Stack trace:\n#0 /tmp/tmpfno3qto8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfno3qto8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $evenSum = 0;\n  for ($i = 0; $i <\
    \ count($lst); $i++) {\n    if ($i % 2 === 0) {\n      $evenSum += $lst[$i];\n\
    \    }\n  }\n  return $evenSum;\n}\n\n$lst = array(\n    5,\n    8,\n    7,\n\
    \    1\n);\n\necho solution($lst);\nfunction candidate(...$args) {\n    return\
    \ solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "12\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3baffof.php:32\n\
    Stack trace:\n#0 /tmp/tmpc3baffof.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc3baffof.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $ans = 0;\n    for ($i = 0; $i <\
    \ count($lst); $i += 2) {\n        $ans += $lst[$i];\n    }\n\n    return $ans;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you! You helped me out a ton. Also\
    \ thank you for the explanation :)\n<|/ c |>\n<| c |>\nYou're welcome! Glad I\
    \ could help\n<|/ c |>\n<| a |>\nThe simplest solution I could think of was:\n\
    \nCreate an empty array for the result.\nLoop over the input array's elements\
    \ and use the modulus operator to check if an element is an odd index.\nIf it\
    \ is, add the element to the result array.\n\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpghv_fpxe.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    sort($lst);\n    $result = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        if ($i % 2 != 0) {\n    \
    \        $result -= $lst[$i];\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyebqr8l7.php:23\n\
    Stack trace:\n#0 /tmp/tmpyebqr8l7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyebqr8l7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Your code here\n    $sum=0;\n\
    \    for($i=0;$i<count($lst);$i++){\n        if($i%2==0){\n            $sum+=$lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5lui36op.php:25\n\
    Stack trace:\n#0 /tmp/tmp5lui36op.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5lui36op.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) === 0)\n    {\n \
    \       return 0;\n    }\n    $firstEven = array_filter($lst, function ($element)\
    \ use ($lst)\n    {\n        return $element % 2 === 0;\n    });\n    return array_sum(array_diff($firstEven,\
    \ $lst));\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nVery efficient solution.\
    \ But why `array_sum` instead of `array_reduce`?\n<|/ c |>\n<| c |>\nThe PHP manual\
    \ page on `array_reduce` says *\"The callback should return an integer value and\
    \ not a string\"*\n<|/ c |>\n<| c |>\nOh, I see, I thought the callback should\
    \ return a string. Sorry.\n<|/ c |>\n<| c |>\n`array_sum` accepts an array of\
    \ numeric types and sums them up - `array_reduce` expects a numeric type and the\
    \ callback returns something else - `array_reduce` expects a numeric type and\
    \ the callback returns something else. So in my example above, I used `array_sum`\n\
    <|/ c |>\n<| a dscore=1 |>\nIf your array is large, then array_filter will create\
    \ a new array with every entry that matches and then sum them all up will the\
    \ PHP runtime will have to create a new array in memory.\nYou can get the sum\
    \ of all even positions with the following code\n<code>\n$sum = array_sum(\n \
    \   array_filter(\n        $array, \n        function($n) use($arr) {\n      \
    \      return $n % 2 === 0;\n        }\n    )\n);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nHi, this solution won't work in case there are duplicates in the\
    \ original array, because it will only output the first occurrence\n<|/ c |>\n\
    <| c |>\n`array_filter` returns a new array instead of modifying the given array,\
    \ so there will be no duplicates.\n<|/ c |>\n<| c |>\nYou are right, thank you,\
    \ I will update my answer\n<|/ c |>\n<| a |>\nTry this:\n<code>\n<?php\n\n$numbers\
    \ = [1,6,3,7,10,12,5,8];\n\n$sum = array_sum(array_filter($numbers, function ($n)\
    \ { return $n % 2 == 1; }));\n\nprint $sum;\n\nfunction candidate(...$args) {\n\
    \    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt3_uwdgt.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if ($lst == null || count($lst) ==\
    \ 0 || $lst[0] < 1) {\n        return 0;\n    }\n    $lst_odd = array_filter($lst,\
    \ function ($num) use ($lst) {\n        return $num % 2 !== 0;\n    });\n    return\
    \ array_sum($lst_odd);\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpym87jx7m.php:21\n\
    Stack trace:\n#0 /tmp/tmpym87jx7m.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpym87jx7m.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) === 0)\n        return\
    \ 0;\n\n    // Sort the array in descending order so the first element is the\
    \ largest number.\n    $sorted = array_reverse($lst);\n    sort($sorted);\n\n\
    \    // Create a variable that is set to \"true\" if the value is odd or even\n\
    \    $even = false;\n\n    $sum = 0;\n\n    // Add each value to the sum but only\
    \ if it is even or odd respectively\n    foreach ($sorted as $value) {\n     \
    \   if ($value%2 === 0)\n            $sum += $value;\n\n        $even = $even\
    \ || $value%2 === 0;\n    }\n\n    return $sum;\n}\n</code>\n<|/ a tags=php |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpatnar9p4.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odd = array();\n    $even = array();\n\
    \    foreach ($lst as $key => $value) {\n        if ($key % 2 != 0) {\n      \
    \      $even[$value] = $value;\n        } else {\n            $odd[$value] = $value;\n\
    \        }\n    }\n    return array_sum(array_diff($odd, $even));\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis answer doesn't work if there is a duplicate\
    \ value in the array. For example: solution([3, 3, 3, 3, 3]) ==> 9 is incorrect\n\
    <|/ c |>\n<| c |>\nYou sir are a genius. Thank you very much.\n<|/ c |>\n<| a\
    \ tags=php,arrays |>\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpswbf3tjt.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odds = [];\n    $evens = [];\n\n\
    \    foreach ($lst as $key => $value) {\n        if ($key % 2 == 0) {\n      \
    \      $evens[] = $value;\n        } else {\n            $odds[] = $value;\n \
    \       }\n    }\n\n    return array_sum(array_diff($odds, $evens));\n}\n</code>\n\
    This assumes none of the arrays are empty though. If you want to remove those\
    \ empty arrays and get just the sum then you could use array_filter():\n<code>\n\
    $sum = array_sum(array_filter($lst, 'is_int'));\n</code>\n<|/ a tags=php,arrays,laravel,laravel-5\
    \ |>\n<| a |>\n<code>\n$arr = [1, 2, 3, 4, 5];\n$newArr = [];\nforeach ($arr as\
    \ $key => $value) {\n    if($key % 2 == 1){\n        $newArr[$value] = $value;\n\
    \    }\n}\n</code>\n<|/ a dscore=2 tags=php,arrays,laravel,laravel-5 |>\n<| a\
    \ tags=php,arrays,laravel,laravel-5 dscore=2 |>\nHere you go:\n<code>\n$numbers\
    \ = [1, 2, 3, 2, 3, 4];\n$sum = 0;\nforeach ($numbers as $number) {\n    if ($number\
    \ % 2 != 0) {\n        $sum += $number;\n    }\n}\necho $sum;\n</code>\n<|/ a\
    \ |>\n<| a |>\nTry this one also,\n<code>\nfunction candidate(...$args) {\n  \
    \  return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdaxwn4_q.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n\t$total = 0;\n\t$evenCount = 0;\n\t\
    foreach ($lst as $num) {\n\t\tif ($num % 2 === 0) {\n\t\t\t$evenCount ++;\n\t\t\
    }\n\t\tif ($evenCount > 0) {\n\t\t\t$total += $num;\n\t\t}\n\t}\n\treturn $total;\n\
    }\n\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgb606e4.php:26\n\
    Stack trace:\n#0 /tmp/tmpsgb606e4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsgb606e4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if(count($lst) <= 0) {\n        return\
    \ 0;\n    }\n\n    $sum = 0;\n    foreach($lst as $value) {\n        if($value\
    \ % 2 != 0) {\n            $sum += $value;\n        }\n    }\n\n    return $sum;\n\
    }\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1yguq42.php:26\n\
    Stack trace:\n#0 /tmp/tmpo1yguq42.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo1yguq42.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $sum = 0;\n  foreach($lst as $value)\
    \ {\n    if($value%2 ==1 ) {\n      $sum += $value;\n    }\n  }\n  return $sum;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 tags=php,arrays |>\n<code>\n\
    <?php\n\n$arr = [5, 8, 7, 1];\n$arr2 = array_filter($arr,function($a){\n    return\
    \ $a%2;\n});\necho array_sum($arr2);\n</code>\n<|/ a |>\n<| a tags=php,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzikk3wrr.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) === 0 || count($lst)\
    \ === 1) {\n        return 0;\n    }\n    $odd = array_filter($lst, 'is_int');\n\
    \    $even = array_filter($lst, 'is_int', ARRAY_FILTER_USE_BOTH);\n    $sum =\
    \ 0;\n    foreach ($odd as $i => $number) {\n        if ($i % 2 === 0) {\n   \
    \         $sum = $sum + $number;\n        }\n    }\n    return $sum;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you for your solution,, it's working fine but I am looking\
    \ for solution without using foreach loop.\n<|/ c |>\n<| c |>\nI didn't mean the\
    \ foreach loop. I'm looking for a solution to get the sum of even numbers only.\n\
    <|/ c |>\n<| c |>\nI understood that you are looking for an algorithm for solving\
    \ it without the foreach loop and I provided you with the answer. Sorry for not\
    \ understanding earlier.\n<|/ c |>\n<| a dscore=0 tags=php,arrays,sum |>\n<code>\n\
    <?php\n$sum = 0;\n$array = array(5,8,7,1);\n$even = array_filter($array, 'is_int');\n\
    $odds = array_filter($even, 'is_int');\nforeach($odds as $key=>$value){\n    $sum+=intval($value);\n\
    }\necho $sum;\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfodygndv.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    $len = count($lst);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($lst[$i] & 1) {\n          \
    \  $sum = $lst[$i] + $sum;\n        }\n    }\n    return $sum;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis is so much faster than the other methods I tested\
    \ (10x).\n<|/ c |>\n<| a tags=php |>\nThis was my solution using array_walk (for\
    \ large arrays)\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9yme155a.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $res = 0;\n    $len = count($lst);\n\
    \    for ($i = 0; $i < $len; ++$i) {\n        if ($i % 2 == 1) {\n           \
    \ $res += $lst[$i];\n        }\n    }\n    return $res;\n}\n</code>\n<|/ a dscore=0\
    \ tags=php,algorithm |>\n<| c |>\nPlease don't just dump code here... (even though\
    \ it might work)\n<|/ c |>\n<| c |>\nI believe my algorithm is self-explanatory.\
    \ It's not that complicated and also the most logical one. Also it only uses `O(n)`\
    \ space and requires no loops.\n<|/ c |>\n<| c |>\nYou really should explain how\
    \ you came to that solution. This way people don't have to \"reverse engineer\"\
    \ the solution and can just copy and paste it into their program.\n<|/ c |>\n\
    <| c |>\nYou say this is \"logical\" but you don't give the logic. It's not clear\
    \ what you're trying to do, but my guess is that you wanted to avoid loops entirely\
    \ so that it can be done with one loop. But the way you wrote the answer makes\
    \ it sound like you're trying to avoid loops entirely. Please explain.\n<|/ c\
    \ |>\n<| c |>\nI wanted to avoid loops entirely so that it can be done with one\
    \ loop. But the way you wrote the answer makes it sound like you're trying to\
    \ avoid loops entirely. Please explain.\n<|/ c |>\n<| a |>\nI believe this would\
    \ do it:\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr_tt0n7t.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $res = 0;\n    $evens = array_filter($lst,\
    \ function($val) use(&$evens) { return $val % 2 == 0; });\n    foreach ($evens\
    \ as $even) {\n        $res += $even;\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja6a90u4.php:20\n\
    Stack trace:\n#0 /tmp/tmpja6a90u4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpja6a90u4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(array_filter($lst,\
    \ function ($v, $k) {\n        return $k % 2 === 1;\n    }));\n}\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| c |>\n`array_filter($lst, function($v, $k) {return\
    \ $k % 2 === 1;})` should be `array_filter($lst, function($v, $k) {return $k %\
    \ 2 === 0;})`\n<|/ c |>\n<| c |>\n: Yes, thanks for the feedback. Will update\n\
    <|/ c |>\n<| c |>\nYep, fixed. I think I should really use more descriptive variable\
    \ names and use less anonymous functions. But I wanted to keep the code readable\
    \ in this example.\n<|/ c |>\n<| c |>\nNo need for lambda functions. Just pass\
    \ a simple callback to array_filter which is much more readable and maintainable:\
    \ `array_filter($lst, function($v){return $v % 2 === 0;})`\n<|/ c |>\n<| c |>\n\
    That is true, I was trying to keep the example as close to the original as possible\
    \ and use less lambda functions. But yeah I agree its much better to just use\
    \ a simple callback. Thanks\n<|/ c |>\n<| a tags=arrays,php |>\nJust loop through\
    \ the array and check each value with the modulus operator (%). Something like\
    \ this:\n<code>\n$total = 0;\nfor ($i = 0; $i < count($array); $i++) {\n   if\
    \ ($array[$i] % 2 == 1) {\n      $total += $array[$i];\n   }\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| a tags=arrays,php |>\nYou could try using array_filter along\
    \ with array_sum:\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n\n$odds = array_filter($arr,\
    \ function($v){\n    return $v % 2 != 0;\n});\n\nvar_dump(array_sum($odds));\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nIf you're in PHP 5.3 or above, you\
    \ can use array_reduce:\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n$total =\
    \ array_reduce($arr, function($total, $current) {\n    return $total + $current\
    \ * $current;\n}, 0);\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\nI think it\
    \ is good to use array_walk or array_walk array function because array_reduce\
    \ is deprecated\n<code>\n$array = array(1,2,3,4,5);\narray_\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp40udjwu3.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    for ($i = 0; $i <\
    \ count($lst); $i++) {\n        if ($lst[$i] % 2 === 0) {\n            $sum +=\
    \ $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst = array(5, 8, 7, 1);\n\
    echo \"Sum of odd elements that are in even positions is \" . solution($lst);\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Sum of odd elements that are in even positions is 8\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptxhc34ew.php:24\nStack trace:\n#0 /tmp/tmptxhc34ew.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptxhc34ew.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    for ($i = count($lst);\
    \ $i > 0; $i--) {\n        if ($i % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php\
    \ |>\nIf you already know that the input is a number array, you can simply sum\
    \ the odd values using a bit of PHP. No loops, just some array manipulation:\n\
    <code>\n$nums = array(1, 2, 3, 4, 5);\n$nums[count($nums) - 1] = ($nums[count($nums)\
    \ - 1] % 2 ? 0 : $nums[count($nums) - 1] + 1);\n$nums = array_filter($nums, function($x)\
    \ { return !is_numeric($x); });\n$sum = array_sum($nums); // 6\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 tags=php |>\n<code>\n<?php\n$array = [1, 2, 3, 4,\
    \ 5];\n$array = array_filter($array, function($e){\n    return !is_numeric($e);\n\
    });\n\n$sum = array_sum($array);\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n\
    $array = [1, 2, 3, 4, 5];\n$sum = array_sum(array_filter($array, function ($n)\
    \ {\n    return !is_numeric($n);\n}));\necho $sum;\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4or5xa07.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(array_slice($lst,0,count($lst)-1));\n\
    }\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_hmocio.php:15\n\
    Stack trace:\n#0 /tmp/tmp9_hmocio.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9_hmocio.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odd_sum = 0;\n    for ($i = 0; $i\
    \ < count($lst); $i++) {\n        $odd_sum += $lst[$i] % 2;\n        if ($lst[$i]\
    \ % 2 == 0) {\n            $even_sum -= $lst[$i];\n        }\n    }\n    return\
    \ $odd_sum + $even_sum;\n}\n$result = solution([5, 8, 7, 1]);\necho \"\\n\".'Solution\
    \ : '.$result.\"\\n\";\n\n$result = solution([3, 3, 3, 3, 3]);\necho \"\\n\".'Solution\
    \ : '.$result.\"\\n\";\n\n$result = solution([30, 13, 24, 321]);\necho \"\\n\"\
    .'Solution : '.$result.\"\\n\";\n</code>\n<|/ a dscore=0 tags=php |>\n<| a tags=php\
    \ |>\n<code>\n<?php\n$ar = [5, 8, 7, 1];\n$odd = array_filter($ar, function ($n)\
    \ { return $n % 2; });\n$sum = $odd[0] + $odd[1];\necho \"sum = \".$sum;\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe code does work, but can you tell me what `array_filter`\
    \ does? How does it differ from `array_search`?\n<|/ c |>\n<| c |>\narray_search\
    \ will return the position of the first element that matches a given condition.\
    \ array_filter will remove all elements that don't match a given condition.\n\
    <|/ c |>\n<| c |>\nSo, in other words, `array_search` will find the first item\
    \ that matches the condition and `array_filter` will remove that item from the\
    \ array while leaving the rest of the items?\n<|/ c |>\n<| c |>\nYes, that's what\
    \ it does. However, if there's a chance that one of the elements doesn't match\
    \ the condition then it won't remove it from the array so you would end up with\
    \ two elements left in the array.\n<|/ c |>\n<| a dscore=0 |>\nYou can do this\
    \ using array_walk:\n<code>\n$odd_sum = 0;\narray_walk($ar, function($item) use\
    \ (&$odd_sum) {\n    $odd_sum += $item % 2 == 0;\n});\necho \"Sum: $odd_sum\"\
    ;\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\nI made a little modification\
    \ to answer that can sum up even and odd numbers with same function.\n<code>\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpie61d7dn.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach($lst as $key\
    \ => $val)\n        if($key % 2 == 0)\n            $sum += $val;\n\n    return\
    \ $sum;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is another way to do the\
    \ same:\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr2rosfxj.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Write your code here\n    $odd\
    \ = 0;\n    $even = 0;\n    foreach ($lst as $value) {\n        if ($value%2 !=\
    \ 0) {\n            $odd += $value;\n        } else {\n            $even += $value;\n\
    \        }\n    }\n    return $odd+$even;\n}\n</code>\n<|/ a tags=php,javascript\
    \ |>\n<| c |>\nPlease include an explanation of your code to the answer, in order\
    \ for it to make more sense to other users of the site.\n<|/ c |>\n<| c |>\nThis\
    \ answer is not correct. `solution([30, 13, 24, 321])` returns `0`, not `9` as\
    \ the OP wanted. Also this solution doesn't consider the possibility of missing\
    \ elements in the array. The question is about a solution with complexity O(n),\
    \ so this answer is useless for that question.\n<|/ c |>\n<| c |>\nYou're right!\
    \ I changed it. Thank you for pointing it out! It looks like OP had the same problem\
    \ in his first attempt as I did.\n<|/ c |>\n<| a |>\nYou don't need to use a loop\
    \ or to sort if you don't need to. Just get the array and calculate the sum of\
    \ the even numbers:\n<code>\n<?php\n\n$arr = array(5, 8, 7, 1);\n\n$evenSum =\
    \ array_sum(array_filter($arr, function($value) {\n    return $value % 2 == 0;\n\
    }));\n</code>\n<|/ a tags=php,javascript dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_gc5wibw.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_sum(array_filter(function($v)\
    \ use ($lst) {\n        return $v % 2 == 1;\n    }, array_flip($lst)));\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=2 |>\n<| a dscore=0 tags=arrays,php |>\n<code>\n\
    <?php\n\n$input = [3,5,2,6,7,4,8,1];\n\nprint_r(array_sum(array_filter($input,\
    \ function($v){\n    return $v % 2 != 0;\n}));\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpix7lpy7g.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    // Your code here\n    $sum = 0;\n\
    \    foreach ($lst as $key => $value) {\n        if ($key % 2 != 0) {\n      \
    \      $sum = $sum + $value;\n        }\n    }\n    return $sum;\n}\n\n$result\
    \ = solution(array_map(\"intval\", array_slice($argv, 1)));\n\necho \"$result\\\
    n\";\n\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t0xt1bu.php:27\n\
    Stack trace:\n#0 /tmp/tmp_t0xt1bu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_t0xt1bu.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $oddSum = 0;\n    foreach ($lst as\
    \ $v) {\n        $oddSum = $oddSum + ($v % 2) ? $v : 0;\n    }\n    return $oddSum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nYou can just use array_filter()\
    \ and array_keys() to get the values you want.\n<code>\n$data = [\n    \"1\" =>\
    \ 5,\n    \"2\" => 8,\n    \"3\" => 7,\n    \"4\" => 1,\n    \"5\" => 3,\n   \
    \ \"6\" => 3,\n    \"7\" => 3,\n    \"8\" => 3,\n    \"9\" => 3,\n    \"10\" =>\
    \ 3,\n    \"11\" => 3,\n    \"12\" => 3\n];\n\n$result = array_filter(array_keys($data),\
    \ function($key) use ($data) {\n    return $data[$key] % 2 === 0;\n});\n\necho\
    \ '<pre>';\nprint_r($result);\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThat\
    \ is definitely a way to do it, but I was looking for a solution that did not\
    \ involve array_filter.\n<|/ c |>\n<| c |>\nThen you probably want to rephrase\
    \ your question. Also, please check my other answer, it is probably the best solution.\n\
    <|/ c |>\n<| c |>\nI updated my question to be more clear, sorry about that. Thank\
    \ you for helping me understand the question.\n<|/ c |>\n<| a dscore=0 |>\nYou\
    \ can loop over the array using array_filter(). Inside the callback of array_filter()\
    \ you just need to return the value if it is odd or 0 in the cases where it isn't\
    \ odd.\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxd_irmw8.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $evens = 0;\n  foreach ($lst as $item)\
    \ {\n    if ($item % 2 == 0) {\n      $evens += $item;\n    }\n  }\n  return $evens;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nYour answer makes sense, however\
    \ it does not work for [3, 3, 3, 3, 3] even though it is the correct answer.\n\
    <|/ c |>\n<| c |>\nYou are right, I was under the impression that the result was\
    \ the sum of all the odd elements, not just ones that are odd. I've updated my\
    \ answer to include the sum of all the odd elements.\n<|/ c |>\n<| c |>\nI have\
    \ tried this before and I do get the correct answer but then I realized that the\
    \ reason you suggested is probably because he only wants the odd elements and\
    \ that he already got the sum of all the odd elements in the array. So maybe I\
    \ should just delete my answer since it just makes you look like you are cheating.\n\
    <|/ c |>\n<| c |>\nFair enough, I misinterpreted your solution as \"sum of all\
    \ the odd elements\" instead of \"sum of odd elements that are in even positions\"\
    . Your answer is definitely more concise and I think I prefer it over my own.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$evens = [];\n$odds = [];\nforeach($arr\
    \ as $key => $value) {\n    if($value%2 == 0) {\n        $evens[] = $value;\n\
    \    } else {\n        $odds[] = $value;\n    }\n}\necho array_sum($odds);\n</code>\n\
    This will create two arrays, and then array_sum() will sum the two arrays.\n<|/\
    \ a dscore=0 |>\n<| c |>\nThank you for the answer. Is there a way to just get\
    \ the sum of all the odd elements in the array?\n<|/ c |>\n<| c |>\nSee edited\
    \ answer. I would say this isn't the most elegant solution, but its more concise.\n\
    <|/ c |>\n<| a dscore=0 tags=arrays,php |>\n<code>\nforeach($array as $key =>\
    \ $value){\n  if($value%2==0)\n  $evens[] = $value;\n}\necho array_sum($evens);\n\
    </code>\n<|/ a |>\n<| c |>\nThis works but is inefficient, creating two new arrays\
    \ and then doing an array_sum.\n<|/ c |>\n<| a |>\nAnother way is to use array_filter\
    \ which gives you a filtered array without using the foreach and array_sum.\n\
    <code>\n$arr = [\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpll891rc3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  $sum = 0;\n  for($i = 0; $i < count($lst);\
    \ $i++) {\n    if($i % 2 !== 0) {\n      $sum += $lst[$i];\n    }\n  }\n  return\
    \ $sum;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa298n852.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = 0;\n\n    foreach($lst\
    \ as $i => $number) {\n        if ($i % 2 === 0) {\n            $result += $number;\n\
    \        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThank\
    \ you for taking the time to answer the question. But if we're going to use the\
    \ `array_filter` method, why not use an anonymous function? It seems more straightforward\
    \ to me, and I'm no fan of defining functions inline if I can help it. Also your\
    \ code example uses the `return` statement in the anonymous function, which is\
    \ unnecessary. Lastly, how do you handle the case where the list is empty? If\
    \ it's empty, I'd expect a fatal error to occur.\n<|/ c |>\n<| c |>\nThe `return`\
    \ statement is necessary in anonymous functions to indicate that you're done executing\
    \ the function and the return value should be used as the return value for the\
    \ function call. As far as the `array_filter` method goes, that's an excellent\
    \ suggestion. I will update my answer.\n<|/ c |>\n<| c |>\nI updated the solution\
    \ to handle an empty array.\n<|/ c |>\n<| c |>\nGreat answer. One thing to be\
    \ aware of: The `if` statement in `array_filter()` will be executed once per array\
    \ element that passes through the filter. In the solution the `if` statement is\
    \ executed once per input element, which means it has to scan the entire input\
    \ array before it finds the odd element. If you're working with large arrays you\
    \ may want to consider implementing this as two separate `foreach` loops instead.\n\
    <|/ c |>\n<| a |>\nTry this\n<code>\nfunction candidate(...$args) {\n    return\
    \ solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzaco0x5h.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $i\
    \ => $num) {\n        if ($i % 2 == 0) {\n            $sum += $num;\n        }\n\
    \    }\n\n    return $sum;\n}\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n<|\
    \ c |>\nAs a note, you can use array_sum to sum an array: `echo array_sum($array);`\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$a = array(5, 8, 7, 1);\n$sum = 0;\n\
    foreach($a as $value){\n    if($value % 2 == 0){\n        $sum += $value;\n  \
    \  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphe12xhfb.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $result = 0;\n    foreach($lst as\
    \ $k){\n        $result += $k % 2;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0u2_zr5.php:20\n\
    Stack trace:\n#0 /tmp/tmpd0u2_zr5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd0u2_zr5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $even = [];\n    $odd = [];\n   \
    \ $oddIndexes = [];\n    foreach($lst as $i => $value) {\n        if ($i%2 ===\
    \ 0) {\n            $even[$i] = $value;\n        } else {\n            $odd[$i]\
    \ = $value;\n            $oddIndexes[] = $i;\n        }\n    }\n    foreach($evens\
    \ as $key => $value) {\n        foreach($odds as $key2 => $value2) {\n       \
    \     if ($key == $key2 && $value != $value2) {\n                $total = $even[$key]\
    \ + $odd[$key2];\n                unset($odd[$key2]);\n                $odd[$key]\
    \ = $total;\n            }\n        }\n    }\n    return array_sum($odd);\n}\n\
    </code>\n<|/ a tags=arrays,sorting,php dscore=0 |>\n<| a |>\nHere is a recursive\
    \ solution without looping through the entire array.\nThe main idea is to check\
    \ if the previous value was even, if it was, then the previous value was even\
    \ and we simply add it to the current value. However, if the previous value was\
    \ odd, then we add it to the previous even value as well. So, the next time the\
    \ code loops through the array it will have the correct values.\nThis solution\
    \ also doesn't use any additional data structures.\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6afewsa6.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $res = 0;\n    foreach ($lst as $k\
    \ => $v) {\n        $res += $k === 0 ? 0 : $v % 2 === 1 ? $v : 0;\n    }\n   \
    \ return $res;\n}\n\n$list = [\n    5, 8, 7, 1,\n    3, 3, 3, 3, 3,\n    30, 13,\
    \ 24, 321,\n];\n\nvar_dump(solution($list));\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ should be the accepted answer. Though there are some edge cases which are not\
    \ covered correctly - in case of odd list elements, there won't be any odd elements.\
    \ Also, there is 1 element in the list which is a perfect solution. So it is not\
    \ a perfect solution.\n<|/ c |>\n<| c |>\nThanks for spotting that. I updated\
    \ my answer. Still there is one edge case and I do not know what it is. I would\
    \ be happy if someone could comment on it.\n<|/ c |>\n<| c |>\nIt is an interesting\
    \ problem, but I do not think it can be solved using a simple loop. Think about\
    \ the case where you are given an array of three elements, and two of them are\
    \ even, therefore the third one must be odd. In this case, the loop will never\
    \ find the third element as it will stop at the second one. Of course this can\
    \ be fixed by doing the same thing, but this just makes the problem more complex.\n\
    <|/ c |>\n<| c |>\n- I updated my solution. It now works with 3 elements.\n<|/\
    \ c |>\n<| c |>\nGreat! Thank you for updating!\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nTry this -\n<code>\n$list=[5, 8, 7, 1,3,3,3,30,13,24,321];\n$evens=array_filter($list,function($val){\
    \ return $val%2==0;});\n$odds=array_diff($list,$evens);\n$sum=array_sum($odds);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThat does work, however as I said in the\
    \ question, I would like to avoid using PHP's array functions (at least for now).\n\
    <|/ c |>\n<| c |>\nIt's not that array functions would not be acceptable. Just\
    \ that there is not a single one in PHP that would do this, so you were forced\
    \ to use manual code.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzgdwu50u.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 2 == 0) {\n            $sum += $value;\n  \
    \      }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi7ztbqx.php:24\n\
    Stack trace:\n#0 /tmp/tmpyi7ztbqx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyi7ztbqx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $i = 0;\n    while($i < count($lst)){\n\
    \        if($lst[$i] % 2 == 1){\n            $i += 2;\n            continue;\n\
    \        }\n        $i += 1;\n    }\n    return array_sum(array_slice($lst,$i));\n\
    }\n</code>\n<|/ a tags=math,algorithm,php |>\n<| a |>\nJust for fun, here's my\
    \ solution, using array_reduce:\n<code>\n$numbers = [5,8,7,1];\n\n$reduced = array_reduce(\n\
    \    $numbers,\n    function ($carry, $number) {\n        return $carry + $number\
    \ % 2 ? $carry : 0;\n    },\n    0\n);\n\necho $reduced;\n</code>\n<|/ a tags=math,algorithm,php\
    \ dscore=1 |>\n<| c |>\nThanks so much!  I didn't know you could do that!\n<|/\
    \ c |>\n<| a tags=math,algorithm,php |>\nI have made an algorithm using javascript\
    \ which can handle up to a million numbers in average, here's a link to the jfiddle\n\
    <code>\nvar sum = 0;\nvar array = [5, 8, 7, 1];\nvar numOfArrayElements = array.length;\n\
    var currentSum = 0;\nvar currentIndex = 0;\n\nvar checkSum = function () {\n \
    \   currentSum = currentSum + array[currentIndex];\n    currentIndex++;\n    if\
    \ (currentIndex > numOfArrayElements) {\n        sum += currentSum;\n        currentSum\
    \ = 0;\n        currentIndex = 0;\n    }\n};\n\nfor (var i = 0; i < array.length;\
    \ i++) {\n    checkSum();\n}\nalert(sum);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    I would try something like this:  \n<code>\nvar array = [5, 8, 7, 1];\nvar sum\
    \ = 0;\n\nvar index = 0;\nwhile (index < array.length){\n    if (index % 2 !=\
    \ 0) {\n        sum += array[index];\n        index += 2;\n    }\n    else {\n\
    \        index += 1;\n    }\n}\n\nalert(sum);\n</code>\n<|/ a dscore=0 tags=math,algorithm,php\
    \ |>\n<| a |>\nI'm just going to throw this out there that you can do this in\
    \ PHP if you use array_reduce\n<code>\necho array_reduce(\n    range(0, count($arr)\
    \ - 1, 2),\n    function($carry, $num) {\n        return $carry + $arr[$num] %\
    \ 2;\n    },\n    0\n);\n</code>\n<|/ a tags=math,algorithm,php dscore=0 |>\n\
    <| a dscore=0 tags=math,algorithm,php |>\nHere's a Python solution:\n<code>\n\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcc31uap6.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $odds = array_filter(\n        $lst,\n\
    \        static function ($value) use (&$odds) {\n            return $value &\
    \ 1;\n        }\n    );\n    return array_sum($odds);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 tags=php,arrays |>\nHere is a simple solution using array_filter:\n\
    <code>\n$lst = [1,2,3,4,5,6,7,8,9,0];\n$odds = array_filter($lst,function($val){return\
    \ $val&1?$val:false;});\necho array_sum($odds);\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nUsing array_sum, array_filter and ternary operator:\n<code>\n$list = array(1,2,3,4,5);\n\
    $odds = array_filter($list, function($value) { return ($value & 1); });\nvar_dump(array_sum($odds));\n\
    </code>\nOutput:\n<code>\nint(3)\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\nI tried to find the even number using array_filter() and array_sum() like\
    \ you do, i got confused when i tried to filter array with empty values so i wrote\
    \ a little function :\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmn9174jr.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    \n    // Write your code here\n \
    \   foreach($lst as $key => $value) {\n        if($value % 2 != 0) {\n       \
    \     $odd_sum = $odd_sum + $value;\n            $even_rems[$key] = $value / 2;\n\
    \        }\n    }\n    $odd_sum = array_sum($odd_sum);\n    $odd_sum = array_sum($even_rems);\n\
    \    return $odd_sum;\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, int given in /tmp/tmpfjmv1aql.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjmv1aql.php:25\n\
    Stack trace:\n#0 /tmp/tmpfjmv1aql.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfjmv1aql.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return count(array_filter(\n    \
    \    $lst,\n        function ($x) { return $x & 1; }\n    )) * (count($lst) -\
    \ count(array_filter(\n        $lst,\n        function ($x) { return $x & 1; }\n\
    \    )));\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution takes O(n log n) time,\
    \ while solution with O(n) is possible here (and with O(n) it's also more readable)\n\
    <|/ c |>\n<| c |>\nI agree this solution is better, but I think it should be mentioned\
    \ that it is _not_ O(n) -- it is O(n log n).\n<|/ c |>\n<| c |>\nSure, O(n log\
    \ n) is a lot better than O(n), but it's also a lot less readable than O(n). Also\
    \ I believe that O(n) solution can not work with negative numbers (negative numbers\
    \ in an array are not considered as even), but O(n log n) solution is able to\
    \ do that.\n<|/ c |>\n<| c |>\nI agree, negative numbers are not allowed. I just\
    \ thought that this solution might be helpful for someone who doesn't know about\
    \ `array_filter` function and wants something that would work without using it.\
    \ And it worked for me and I thought it would be good to share it.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfaip5hiu.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n  if(count($lst)==0) return 0;\n\n  $sum\
    \ = 0;\n  for($i=0; $i<count($lst); $i+=2){\n    if($lst[$i]%2==0 && $lst[$i+1]%2==0){\n\
    \      $sum += $lst[$i];\n    }\n  }\n\n  return $sum;\n}\n</code>\n<|/ a |>\n\
    <| a |>\nHere's a PHP Solution to your problem.\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp58m89m6_.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $even_sum = 0;\n    foreach ($lst\
    \ as $key => $value) {\n        if ($key % 2 === 0) {\n            $even_sum +=\
    \ $value;\n        }\n    }\n\n    return $even_sum;\n}\n</code>\nThe code above\
    \ is fairly straightforward. As soon as a number is even, it's added to the sum.\
    \ If this sum is equal to the first element in the array, then we add the next\
    \ element, and so on until we have the complete sum.\n<|/ a dscore=3 tags=php,algorithm,arrays\
    \ |>\n<| c |>\nThanks. This is really helpful.\n<|/ c |>\n<| c |>\nNice solution,\
    \ i would just add a break after you add the value to `$even_sum`\n<|/ c |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0dxvvps0.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (empty($lst)) {\n        return\
    \ 0;\n    }\n\n    return array_reduce($lst, 'array_sum', 0);\n}\n\nvar_dump(solution([30,\
    \ 13, 24, 321])); // 0\n</code>\n<|/ a tags=php,arrays,function dscore=2 |>\n\
    <| a dscore=2 |>\nThe accepted answer works perfectly fine but it doesn't make\
    \ use of the array_reduce() function which is available in PHP since version 5.5.\n\
    As pointed out in the comments, array_reduce is PHP 5.5+ only.\nTherefore, here\
    \ is a simple version that works for PHP >= 5.5.\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp17rjsrxx.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach($lst as $val)\
    \ {\n        if ($val & 1) {\n            $sum += $val;\n        }\n    }\n  \
    \  return $sum;\n}\nfunction candidate(...$args) {\n    return solution(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uhzj56q.php:21\n\
    Stack trace:\n#0 /tmp/tmp7uhzj56q.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7uhzj56q.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    if (count($lst) == 0) {\n       \
    \ return 0;\n    }\n    foreach ($lst as $key => $element) {\n        if ($key\
    \ % 2 == 0) {\n            $evensum += $element;\n        } else {\n         \
    \   $oddsum += $element;\n        }\n    }\n    return $evensum + $oddsum;\n}\n\
    function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp639lmrkj.php:25\n\
    Stack trace:\n#0 /tmp/tmp639lmrkj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp639lmrkj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $oddSum = 0;\n    $evenSum = 0;\n\
    \    $evenSum = array_sum(array_slice($lst,0,-1));\n    foreach($lst as $val){\n\
    \        if($val%2 == 0){\n            $oddSum += $val;\n        }else{\n    \
    \        $evenSum += $val;\n        }\n    }\n    return $oddSum+$evenSum;\n}\n\
    </code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzig6q7lb.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    return array_reduce($lst, function($carry,\
    \ $item) {\n        if ($item % 2 !== 0) {\n            $carry += $item;\n   \
    \     }\n        return $carry;\n    }, 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv27j7f9.php:21\n\
    Stack trace:\n#0 /tmp/tmppv27j7f9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppv27j7f9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 2 === 0) {\n            $sum += $value;\n \
    \       }\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nIt seems this\
    \ code doesn't even work. First of all, where are you using `sum`? Secondly, `solution([30,\
    \ 13, 24, 321])` should be `0`, but it's `321`.\n<|/ c |>\n<| c |>\nI added sum\
    \ to the solution, though I didn't use it because I thought the OP was talking\
    \ about summing odd elements of a list.\n<|/ c |>\n<| c |>\nNo, you were not talking\
    \ about summing odd elements of a list. The OP was asking about summing odd positions,\
    \ not summing odd elements of a list.\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9k35cudx.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a non-empty list of integers, return the sum of all of\
    \ the odd elements that are in even positions.\n// Examples\n// solution([5, 8,\
    \ 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24,\
    \ 321]) ==>0\nfunction solution($lst) {\n    $res = 0;\n    foreach ($lst as $k\
    \ => $v) {\n        if ($k % 2 == 1) {\n            $res += $v;\n        }\n \
    \   }\n    return $res;\n}\n\n$lst = [5, 8, 7, 1];\necho solution($lst) . \"\\\
    n\";\n</code>\n<|/ a tags=php |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nThis is the shortest solution with less lines of code. I just added this\
    \ as an answer.\n<|/ c |>\n<| a tags=php |>\nThis is a simple trick I often use:\n\
    <code>\nfunction candidate(...$args) {\n    return solution(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3))\
    \ !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30,\
    \ 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp917n8b0j.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
