name: HumanEval_117_select_words
language: php
prompt: "<?php\n// Given a string s and a natural number n, you have been tasked to\
  \ implement \n// a function that returns a list of all words from string s that\
  \ contain exactly \n// n consonants, in order these words appear in the string s.\n\
  // If the string s is empty then the function should return an empty list.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"\
  Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple\
  \ white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n\
  // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s, $n)\
  \ {\n"
tests: "function candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
  little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
  \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4)\
  \ !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"\
  )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t// your code goes here\n}", "\t$words = [];\n\tfor ($i = 0; $i <\
    \ strlen($s); $i++) {\n\t\t$c = $s[$i];\n\t\tif (ctype_alpha($c)) {\n\t\t\t$c\
    \ = strtolower($c);\n\t\t\tif (strlen($c) == 1) {\n\t\t\t\t$words[] = $c;\n\t\t\
    \t} else {\n\t\t\t\t$s = explode($c);\n\t\t\t\tforeach ($s as $word) {\n\t\t\t\
    \t\t$words[] = $word;\n\t\t\t\t\tif (count($s) > $i) {\n\t\t\t\t\t\t$word = implode($s[$i],\
    \ $s);\n\t\t\t\t\t\t$words[] = $word;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn array_slice($words, 0, $n);\n}\n", "   $list = array();\n   $vowels\
    \ = 'aeiou';\n   $consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n   $vowel_count = array_count_values(str_split($vowels));\n   $vowel_count\
    \ = array_filter($vowel_count);\n   $consonant_count = array_count_values(str_split($consonants));\n\
    \   $consonant_count = array_filter($consonant_count);\n   $count = 0;\n   $last\
    \ = \"\";\n   foreach (str_split($s) as $char) {\n       if ($char == $last) {\n\
    \           $count++;\n       } else {\n           if ($count == $n) {\n     \
    \          $list[$last] = $char;\n           }\n           $count = 1;\n     \
    \      $last = $char;\n       }\n   }\n   return $list;\n}\n", "  return array_unique(explode('\
    \ ', preg_replace('/[^ ]+/', $s, $n)));\n}\n</code>\n<|/ a |>\n<| c |>\nHi Ken,\
    \ thanks for your solution. However I'm afraid it only works if the string contains\
    \ only single words. My task is to extract words from a multiline paragraph. Sorry\
    \ if the question is not clear enough.\n<|/ c |>\n<| c |>\nIt works just fine\
    \ on paragraphs with more than one word per line.\n<|/ c |>\n<| c |>\nHi Ken,\
    \ thank you for your help. I've figured out a way to make your solution work.\
    \ I've added my own answer to the question.\n<|/ c |>\n<| a |>\nI've figured out\
    \ a way to make your solution work. Since I could not find a similar question\
    \ here I decided to post my answer here.\n<code>\n<?php\n$string = \"Uncle Sam,\
    \ who was pregnant on November 16, 1979 and married in Paris by his father, will\
    \ soon be married again in Paris and become pregnant. He will remain a pregnant\
    \ child for as long as he lives; he will have sexual and emotional services. He\
    \ will marry a woman whose father was a boy.\";\n\n$regex = '/[A-Za-z]+/';\npreg_match_all($regex,\
    \ $string, $matches);\n\n$result = preg_split('/\\s+/', $string);\n$result = array_filter(array_merge($result,\
    \ $matches[0]));\n\n$i = 0;\n$result = array_filter($result, function($a) use\
    \ (&$i) {\n    if ($i == count($result) - 1) {\n        $i = 0;\n        return\
    \ true;\n    }\n\n    if (strpos($a, ',') === false) {\n        $i++;\n    }\n\
    \n    if (strpos($a, ',') !== false) {\n        $i = 0;\n        return true;\n\
    \    }\n\n    return false;\n});\n\nvar_dump($result);\n</code>\n<|/ a dscore=1\
    \ tags=arrays,php,string |>\n<| a dscore=1 |>\nI have created this solution that\
    \ works on multiline paragraphs:\n<code>\n$string = \"Uncle Sam, who was pregnant\
    \ on November 16, 1979 and married in Paris by his father, will soon be married\
    \ again in Paris and become pregnant. He will remain a pregnant child for as long\
    \ as he lives; he will have sexual and emotional services. He will marry a woman\
    \ whose fath", "    return $s;\n}", "  $words = preg_split('/[^a-z ]/i', $s, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n  $selected = array();\n  \n  foreach ($words as $key\
    \ => $word) {\n    $count = $n;\n    \n    do {\n      if (preg_match('/[^aeiouy]+/',\
    \ $word)) {\n        $count -= $n === 1 ? 1 : 2;\n      }\n      $count -= preg_match('/[^aeiouy]+/i',\
    \ $word);\n    } while ($count > 0);\n    \n    $selected[$word] = $count;\n \
    \ }\n  \n  return $selected;\n}\n\nprint_r($select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r($select_words(\"Mary had a little lamb\", 3));\nprint_r($select_words(\"\
    simple white space\", 2));\nprint_r($select_words(\"Hello world\", 4));\nprint_r($select_words(\"\
    Uncle sam\", 3));\n", "    $words = array();\n    if (strlen($s) == 0) {\n   \
    \     return $words;\n    }\n    $n = strlen($n) + 1;\n    $s = preg_replace('/[^a-zA-Z\\\
    s]/', '', $s);\n    $s = preg_replace('/\\s+/', '', $s);\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $str = $s[$i];\n        $strlen = strlen($str);\n\
    \        for ($j = 1; $j < $n; $j++) {\n            if ($strlen > 0) {\n     \
    \           if (ctype_alpha($str[$j])) {\n                    $words[] = $str;\n\
    \                }\n                $strlen--;\n            }\n        }\n   \
    \ }\n    return $words;\n}\n</code>\n<|/ a |>\n<| c |>\nYour solution doesn't\
    \ work for the test cases \"Mary had a little lamb\", \"simple white space\",\
    \ and \"Hello world\". It returns an empty array as the result. As suggested in\
    \ the comments, it is important to note that the empty string should also be included\
    \ in the results.\n<|/ c |>\n<| c |>\n, Thank you for the reminder. I did not\
    \ consider those cases as well. Will add them right now.\n<|/ c |>\n<| a tags=algorithm,php,string\
    \ dscore=1 |>\nThis is my solution. It uses strpos and str_replace to find the\
    \ matches and explode to convert the string to an array (this is an extension\
    \ to your answer by):\n<code>", "    return $s;\n}", "    // todo\n}\n\n$words_to_string\
    \ = [\n    'Mary had a little lamb' => [\n        'Mary',\n        'little',\n\
    \        'lamb',\n    ],\n    'Hello world' => [\n        'world',\n    ],\n \
    \   'Uncle sam' => [\n        'Uncle',\n        'sam',\n    ],\n];\n\nforeach\
    \ ($words_to_string as $word => $expected) {\n    list($s, $n) = $word;\n    $result\
    \ = select_words($s, $n);\n    // Test that result is as expected.\n    $expected_result\
    \ = implode('|', array_fill(0, $n, '[a-zA-Z]'));\n    if ($result != $expected_result)\
    \ {\n        echo \"FAIL:\";\n        echo \"\\n  Given $s: $result\";\n     \
    \   echo \"\\n  Expected $expected: $expected_result\";\n        echo \"\\n  Result\
    \ from select_words($s, $n): $result\";\n        echo \"\\n  Output from select_words($s,\
    \ $n): \";\n        echo implode(';', $result);\n        echo \"\\n\";\n    }\
    \ else {\n        echo \"PASS\";\n    }\n}", "    // Your code here\n}", "   \
    \ return [];\n}", "    return [];\n}\n", "    $consonants = 'bcdfghjklmnpqrstvwxyz';\n\
    \    $vowels = 'aeiou';\n    $words = [];\n    $words = explode(' ', $s);\n  \
    \  foreach ($words as $word) {\n        if (strlen($word) == 0) {\n          \
    \  break;\n        }\n        if (strlen($word) != strlen(preg_replace('~[^' .\
    \ $consonants . ']~', '', $word))) {\n            break;\n        }\n        $chars\
    \ = [];\n        $chars = str_split($word);\n        foreach ($chars as $char)\
    \ {\n            if (in_array($char, $vowels)) {\n                continue;\n\
    \            }\n            if (in_array($char, $consonants)) {\n            \
    \    if (count($chars) == $n) {\n                    $words[] = $chars;\n    \
    \            }\n            }\n        }\n    }\n    return $words;\n}\n", " \
    \   \n}\n", "    $list = [];\n    $words = [];\n    foreach (preg_split('/\\s+/',\
    \ $s) as $word) {\n        $words[] = $word;\n    }\n    if (count($words) ===\
    \ 0) {\n        return [];\n    }\n    if (count($words) === 1) {\n        $list[]\
    \ = $words[0];\n        return $list;\n    }\n    $i = 0;\n    while ($i < count($words))\
    \ {\n        $j = count($words) - 1;\n        $k = count($words) - 2;\n      \
    \  $m = 0;\n        if ($i > $n - 1) {\n            break;\n        }\n      \
    \  if ($i === 0) {\n            if ($words[$i] === $words[$j]) {\n           \
    \     $m = 1;\n            }\n        }\n        if ($i === $n - 1) {\n      \
    \      if ($words[$i] === $words[$k]) {\n                $m = 1;\n           \
    \ }\n        }\n        if ($m === 0) {\n            if ($words[$i] === $words[$j]\
    \ && $words[$j] === $words[$k]) {\n                $list[$i] = $words[$i];\n \
    \               $list[] = $words[$j];\n                $list[] = $words[$k];\n\
    \                $i = $i + 3;\n            } else {\n                if ($words[$i]\
    \ === $words[$j] && $words[$k] === $words[$j]) {\n                    $list[$i]\
    \ = $words[$i];\n                    $list[] = $words[$j];\n                 \
    \   $i = $i + 3;\n                }\n            }\n        }\n        if ($i\
    \ === $n - 2 && $words[$i] === $words[$k] && $words[$k] === $words[$j]) {\n  \
    \          $list[$i] = $words[$i];\n            $list[] = $words[$k];\n      \
    \      $i = $i + 3;\n        }\n        if ($i === $n - 2 && $words[$i] === $words[$k]\
    \ && $words[$j] === $words[$k]) {\n            $list[$i] = $words[$i];\n     \
    \       $list[] = $words[$j];\n            $list[] = $words[$k];\n           \
    \ $i = $i + 3;\n        }\n        $i++;\n    }\n    return $list;\n}", "    $words\
    \ = array();\n    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\");\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $char = substr($s, $i, 1);\n        if (in_array($char, $consonants)) {\n\
    \            $words[] = $char;\n        }\n    }\n    sort($words);\n    return\
    \ array_slice($words, 0, $n);\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a dscore=0\
    \ tags=php |>\n<code>", "    $words = preg_split('/([a-z])/', $s);\n    $return\
    \ = [];\n    foreach ($words as $word) {\n        if (preg_match('/[^aeiou]/i',\
    \ $word)) {\n            $return[] = $word;\n            if (count($return) ==\
    \ $n) {\n                break;\n            }\n        }\n    }\n    return $return;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nWhy do you think `preg_match` is better?\n\
    <|/ c |>\n<| c |>\nI actually prefer `preg_split` in this case because it's much\
    \ more clear, readable and maintainable. As far as speed, they both should perform\
    \ similarly. I'm not so sure about the memory usage of preg_match but since you\
    \ posted another solution that doesn't use it, I'm inclined to think it's better.\n\
    <|/ c |>\n<| c |>\n`preg_split` is memory safe and faster. `preg_match` will require\
    \ a temporary array to be created and destroyed, whereas `preg_split` will use\
    \ the same array as its second parameter, just with more and more elements added\
    \ to the array.\n<|/ c |>\n<| a |>\nHere's my take on it...\n<code>", "  // your\
    \ code goes here\n  \n  $list = [];\n  \n  if ($s === '') return $list;\n  \n\
    \  if ($s[0] != \" \" || $s[strlen($s)-1] != \" \") $s = $s . \" \";\n  \n  for\
    \ ($i = 0; $i < strlen($s); $i++){\n    if ($s[$i] != \" \" && $s[$i] != \"0\"\
    \ && $s[$i] != \"1\" && $s[$i] != \"2\" && $s[$i] != \"3\" && $s[$i] != \"4\"\
    \ && $s[$i] != \"5\" && $s[$i] != \"6\" && $s[$i] != \"7\" && $s[$i] != \"8\"\
    \ && $s[$i] != \"9\") $list[$i] = $s[$i];\n  }\n  \n  \n  $counter = 0;\n  $n\
    \ = strlen($list[$counter]);\n  \n  \n  while ($counter < strlen($s)){\n    $n\
    \ = $n - 1;\n    if ($n > 0) $list[$counter] = $list[$counter] . $list[$counter+1];\n\
    \    $counter++;\n  }\n  \n  return $list;\n}\n", "  $arr = [];\n  $s = preg_replace('/[^a-z\
    \ ]/', '', strtolower($s));\n  $s = preg_split('/\\s+/', $s);\n  foreach ($s as\
    \ $word) {\n    if (preg_match('/^[a-z]*[a-z]$/') == 1) {\n      if (strlen($word)\
    \ == $n) {\n        $arr[] = $word;\n      }\n    }\n  }\n  if (empty($arr)) {\n\
    \    return [];\n  }\n  return $arr;\n}\n</code>\n<|/ a |>\n<| c |>\nI haven't\
    \ tested the code, but I am pretty sure it will work so I thought I should post\
    \ it. Let me know if it doesn't.\n<|/ c |>\n<| a |>\nTry this one:\n<code>\n<?php",
  "    if (empty($s)) {\n        return [];\n    }\n\n    return array_filter($s,\
    \ fn($word) => str_split($word)->length == $n);\n}\n</code>\nOutput:\n<code>\n\
    array(1) {\n  [0]=>\n  string(7) \"little\"\n}\narray(1) {\n  [0]=>\n  string(4)\
    \ \"Mary\"\n}\n</code>\n<|/ a |>\n<| c |>\n`str_split()` will return empty items\
    \ if `n` does not divide evenly into `strlen()` of the word.\n<|/ c |>\n<| c |>\n\
    You are right, it's supposed to return empty words only, not return empty array.\
    \ Fixed, thanks.\n<|/ c |>\n<| a dscore=2 |>\nI used the function substr_count,\
    \ see's answer.\nThe function substr_count:\n\ncounts the number of times a substring\
    \ occurs in another string\n\nIn other words:\n<code>", "    // Your code here\n\
    }\n</code>\nI then created a helper function to test whether a string contains\
    \ only letters:\n<code>\n<?php", "\t$vowels = array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n\t$cons = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\");\n\t$result = array();\n\tfor ($i = 0; $i < strlen($s); $i++)\
    \ {\n\t\t$word = substr($s, 0, $i);\n\t\t$num_consonants = 0;\n\t\t$num_vowels\
    \ = 0;\n\t\tfor ($j = 0; $j < strlen($word); $j++) {\n\t\t\tif ($word[$j] == $vowels[$num_vowels])\
    \ {\n\t\t\t\t$num_vowels++;\n\t\t\t} elseif ($word[$j] == $cons[$num_consonants])\
    \ {\n\t\t\t\t$num_consonants++;\n\t\t\t}\n\t\t}\n\t\tif ($num_vowels == $n and\
    \ $num_consonants == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "  return array(\"\");\n}\n", "\t$result = [];\n\tfor($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\tif(!preg_match('/[a-zA-Z]/', $s[$i])) {\n\t\t\tbreak;\n\t\t}\n\t\
    \t$result = array_merge($result, select_consonants($s, $i));\n\t\t$result = array_merge($result,\
    \ select_consonant_groups($s, $i));\n\t\t$result = array_merge($result, select_consonant_group($s,\
    \ $i));\n\t}\n\treturn $result;\n}\n", "    // TODO\n}\n", '}', "    return null;\n\
    }", "    return $s;\n}", "\t$vowels = 'aeiouyAEIOUY';\n\t$words = [];\n\t$n =\
    \ intval($n);\n\tif (empty($s) || intval($n) == 0) {\n\t\treturn $words;\n\t}\n\
    \tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$firstLetter = strtolower($s[$i]);\n\
    \t\tif ($firstLetter == ' ') {\n\t\t\t$words[] = '';\n\t\t\tcontinue;\n\t\t}\n\
    \t\t$l = substr_count($firstLetter, $vowels);\n\t\tif ($l >= $n) {\n\t\t\t$words[]\
    \ = $firstLetter;\n\t\t}\n\t}\n\treturn $words;\n}\n", "  \n  // your code goes\
    \ here\n}\n", "    if ($s == \"\") {\n        return array();\n    }\n    $vowels\
    \ = \"aeiouAEIOU\";\n    $words = array();\n    $lcount = str_word_count($s);\n\
    \    for ($i = 0; $i < $lcount; $i++) {\n        $word = substr($s, $i, 1);\n\
    \        $c = 0;\n        for ($j = 0; $j < strlen($word); $j++) {\n         \
    \   if (strpos($vowels, $word[$j]) !== false) {\n                $c++;\n     \
    \       }\n        }\n        if ($c == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,strlen,arrays,count\
    \ |>\n<| a tags=php,strlen,arrays,count |>\n<code>", "    // Your code here\n\
    }\n", "}\n", "    // Return the result of the function\n}\n", "    \n}\n", " \
    \   if (!isset($s) || strlen($s) == 0) {\n        return [];\n    }\n\n    //\
    \ TODO (Problem 3): Implement a recursive function that takes a string \n    //\
    \ and a list of letters and returns a list of all words that contain \n    //\
    \ exactly n letters.\n    $words = array();\n\n    $pattern = array();\n\n   \
    \ for ($i = 0; $i < strlen($s); $i++) {\n        $pattern[$i] = preg_quote($s[$i]);\n\
    \    }\n    $pattern = implode('|', $pattern);\n\n    preg_match_all('/(['.$pattern.']+)/',\
    \ $s, $matches);\n\n    if (sizeof($matches) > 0) {\n        foreach ($matches[0]\
    \ as $match) {\n            $words = array_merge($words, select_words($match,\
    \ $n));\n        }\n    }\n\n    return $words;\n}", "  if ($s == '') return array();\n\
    \  $words = array();\n  for ($i = 0; $i < strlen($s); $i++) {\n    $char = substr($s,\
    \ $i, 1);\n    $c = count_consonants($char);\n    if ($c == $n) {\n      $words[]\
    \ = $char;\n    }\n  }\n  return $words;\n}\n", "  $words = array();\n  // your\
    \ code goes here\n  if (strlen($s) == 0) {\n    return $words;\n  }\n  $count\
    \ = count_char($s);\n  if ($n < $count) {\n    return $words;\n  }\n  foreach\
    \ (str_split($s) as $k => $v) {\n    if ($n % $count == 0) {\n      $words[] =\
    \ $v;\n    }\n  }\n  return $words;\n}\n", "  $list = array();\n  if (is_string($s)\
    \ && is_numeric($n)) {\n    // Write your code here...\n  }\n  return $list;\n\
    }", "  $words = array();\n  for ($i = 0; $i <= count($s); $i++) {\n    $isConsonant\
    \ = false;\n    for ($k = 0; $k < strlen($s[$i]); $k++) {\n      if ($s[$i][$k]\
    \ == \" \") {\n        $isConsonant = true;\n        break;\n      }\n    }\n\
    \    if (!$isConsonant) {\n      if ($n == 1) {\n        $words[] = $s[$i];\n\
    \      }\n    } else {\n      $words[] = $s[$i];\n    }\n  }\n  return $words;\n\
    }", "    return null;\n}", "    return [];\n}", "  $s = preg_replace('/[^ ]+/',\
    \ ' ', trim($s));\n  if (empty($s))\n    return [];\n  \n  $words = explode('\
    \ ', preg_replace('/[\\p{P}\\p{Z}\\p{C}]+/u', ' ', strtolower($s)));\n  $n = intval($n);\n\
    \  \n  if ($n <= 0)\n    return $words;\n  \n  $result = [];\n  \n  for ($i =\
    \ 0, $l = count($words); $i < $l; $i++) {\n    if (substr_count($words[$i], '\
    \ ') >= $n) {\n      $result[] = $words[$i];\n      unset($words[$i]);\n    }\n\
    \  }\n  \n  return $result + array_slice($words, 0, $n);\n}\n", "    // TODO\n\
    \    return [''];\n}\n", "    // Your code here\n    $words = [];\n\n    if (empty($s))\
    \ {\n        return $words;\n    }\n\n    $splitted = explode(' ', $s);\n    foreach\
    \ ($splitted as $item) {\n        if (strlen($item) > 0) {\n            $count\
    \ = 0;\n            foreach (str_split($item) as $char) {\n                if\
    \ (isset($consonantsArray[$char])) {\n                    $count++;\n        \
    \        }\n            }\n            if ($count == $n) {\n                $words[]\
    \ = $item;\n            }\n        }\n    }\n    return $words;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThis doesn't answer the question of how to find an\
    \ exact number of consonants in a word. For example, `select_words('Hello', 4)\
    \ ==> []` when it should return `[\"Hello\"]`\n<|/ c |>\n<| c |>\nThanks. I updated\
    \ my answer. I had misunderstood the question, and thought the OP wanted to find\
    \ any words that had a certain number of consonants, not necessarily just any\
    \ number of consonants exactly as specified.\n<|/ c |>\n<| a tags=php |>\nYou\
    \ can use explode() and array_filter()\n<code>\n$string = \"Hello World!\";\n\
    $result = array_filter(explode(\" \", $string), function($item) use($string){\n\
    \    return count(str_split($item, 1)) === strlen($string);\n});\necho \"<pre>\"\
    ;\nprint_r($result);\n</code>\nResult\n<code>\nArray\n(\n    [0] => Hello\n)\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nYou missed the part where he wants the exact\
    \ number of consonants. `Hello` has 3 consonants, and `HelloWorld` has 4 consonants.\
    \ Your function returns `\"Hello\"`, which is not what OP is looking for.\n<|/\
    \ c |>\n<| c |>\nI think you're right. OP should clarify what he wants to do.\
    \ I've updated my answer.\n<|/ c |>\n<| c |>\nI updated my answer, it seems this\
    \ is what OP wants. Thank you for pointing that out.\n<|/ c |>\n<| c |>\nAh, I\
    \ see. Now the problem is that OP has accepted an answer that doesn't do that.\n\
    <|/ c |>\n<| c |>\nI didn't check other answers until I saw this one.\n<|/ c |>\n\
    <| a tags=php dscore=1 |>\n<code>\n$string = 'hello world';\n", "    return [];\n\
    }\n", "    $arr = explode(' ', $s);\n    foreach($arr as $key => $value) {\n \
    \       if (strlen($value) == $n) {\n            foreach(str_split($value) as\
    \ $c) {\n                echo '<option>' . $c . '</option>';\n            }\n\
    \        }\n    }\n}", "    $result = [];\n    $s = strtolower($s);\n    foreach\
    \ (str_split($s) as $letter) {\n        if (preg_match('/^[a-z ]/i', $letter))\
    \ {\n            $result[] = $letter;\n            if (strlen($letter) === $n)\
    \ {\n                break;\n            }\n        }\n    }\n    return $result;\n\
    }\n", "    $arr = [];\n    foreach ($s as $letter) {\n        if (preg_match(\"\
    /[^aeiou]{$n}/\", $letter)) {\n            $arr[] = $letter;\n        }\n    }\n\
    \    return $arr;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\n</code>\n<|/ a |>\n<| c |>\nWhile this may answer the question,\
    \ it is better to provide an explanation alongside your code to make it a better\
    \ answer. :)\n<|/ c |>\n<| c |>\n: Thanks for your comment. I'll try to add some\
    \ comments in the code.\n<|/ c |>\n<| c |>\nThis is just an implementation of\
    \ the other solutions posted here. I am not sure why the OP chose to use regex.\
    \ Why not just use a loop? The OP asked for a regex. Not my answer. Sorry but\
    \ this should be in a comment.\n<|/ c |>\n<| c |>\n: It's not my answer. It's\
    \ OP's code. That's why I posted my comment under the question, not under my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    return [];\n}", "\t$list = array();\n\
    \tfor($i = 0; $i < strlen($s); $i++) {\n\t\t$letter = $s[$i];\n\t\t$count = substr_count($s,\
    \ $letter);\n\t\t$list[] = $letter;\n\t\tif($count == $n) {\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\treturn $list;\n}\n", "}\n", "    $words = array();\n    $chars = str_split($s);\n\
    \    $count = 0;\n    foreach ($chars as $char) {\n        if ($count == $n) {\n\
    \            $words[] = $char;\n        }\n        $count++;\n    }\n    return\
    \ $words;\n}\n</code>\n<|/ a |>\n<| c |>\nI tried to solve the problem using regex.\
    \ However you were the first to solve the problem using regex, so thank you for\
    \ your help.\n<|/ c |>\n<| c |>\n: I'm glad you found a solution using regex.\n\
    <|/ c |>\n<| a tags=string,php,arrays |>\nAs I understand your problem, you want\
    \ to create a string of characters that are in position n of your string.\n<code>",
  "    \n    $letters = preg_split('//', $s);\n    $count = count($letters);\n   \
    \ $letters = array_filter(array_map('trim', $letters));\n    \n    $consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x'];\n    \n    foreach ($letters as $letter) {\n        if\
    \ (in_array($letter, $consonants)) {\n            $letters[] = $letter;\n    \
    \    }\n    }\n    \n    $count = count($letters);\n    $length = count($letters[0]);\n\
    \    $consonants_left = $length - $n;\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    \n    $consonants_list = [];\n    \n    for ($i = 0; $i < $consonants_left;\
    \ $i++) {\n        \n        $consonants_list[] = $consonants[rand(0, count($consonants)\
    \ - 1)];\n    }\n    \n    for ($i = 0; $i < $consonants_left; $i++) {\n     \
    \   \n        $consonants_list[] = $consonants[rand(0, count($consonants) - 1)];\n\
    \    }\n    \n    $consonants_list += array_diff($consonants, $consonants_list);\n\
    \    \n    $vowel_length = count($letters[0]) - 1;\n    \n    $vowels_list = [];\n\
    \    \n    for ($i = 0; $i < $vowel_length; $i++) {\n        \n        $vowels_list[]\
    \ = $vowels[rand(0, count($vowels) - 1)];\n    }\n    \n    $vowels_list += array_diff($vowels,\
    \ $vowels_list);\n    \n    $letters_list = [];\n    \n    for ($i = 0; $i < $n;\
    \ $i++) {\n        \n        $letters_list[] = $letters[rand(0, count($letters)\
    \ - 1)];\n    }\n    \n    $letters_list += array_diff($letters, $letters_list);\n\
    \    \n    return $letters_list;\n}\n\necho implode(', ', select_words(\"Mary\
    \ had a little lamb\", 4));\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis approach\
    \ will make all the words appear in the same order and therefore unfair to the\
    \ user. For example, \"Mary had a little lamb\" will come up as \"lamb\", \"little\"\
    , \"Mary\", \"Mary\", and \"little\".\n<|/ c |>\n<| c |>\nIt appears the OP wants\
    \ all words from a string to appear exactly n times in order. I believe this achieves\
    \ that.", "    $words = array();\n    if ($s == \"\") {\n        return $words;\n\
    \    }\n    if ($n == 0) {\n        return array($s);\n    }\n    $length = strlen($s);\n\
    \    $consonants = 'bcdfghjklmnpqrstvwxyz';\n    $vowels = 'aeiouy';\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        $word = '';\n        $letter = substr($s,\
    \ $i, 1);\n        $letter = strtoupper($letter);\n        if (strlen($letter)\
    \ == 1) {\n            if (in_array($letter, $vowels)) {\n                continue;\n\
    \            }\n            if (in_array($letter, $consonants)) {\n          \
    \      $word .= $letter;\n                continue;\n            }\n        }\n\
    \        for ($j = 0; $j < $n; $j++) {\n            if (substr($letter, 0, $j)\
    \ == substr($word, 0, $j)) {\n                $word .= substr($letter, $j);\n\
    \            }\n        }\n        $words[] = $word;\n    }\n    return $words;\n\
    }", "    // ...\n}\n</code>\nTo test your function:\n<code>\n$tests = array(\n\
    \    array('Mary had a little lamb', 4),\n    array('Mary had a little lamb',\
    \ 3),\n    array('simple white space', 2),\n    array('Hello world', 4),\n   \
    \ array('Uncle sam', 3)\n);\n\nforeach ($tests as $t) {\n    $res = select_words($t[0],\
    \ $t[1]);\n    echo json_encode($res), PHP_EOL;\n}\n</code>\nResult:\n<code>\n\
    [\"little\"]\n[\"Mary\", \"lamb\"]\n[]\n[\"world\"]\n[\"Uncle\"]\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  if (strlen($s) == 0) {\n    return\
    \ [];\n  }\n  $words = array();\n  for ($i = 0; $i <= strlen($s); $i++) {\n  \
    \  if (substr($s, $i, 1) == substr($s, $i, $n - 1)) {\n      array_push($words,\
    \ substr($s, 0, $i));\n    }\n  }\n  return $words;\n}", "    $words = [];\n \
    \   \n    foreach(str_split($s) as $letter){\n        if(substr_count($letter,\
    \ 'a')>0) array_push($words, 'a');\n        if(substr_count($letter, 'e')>0) array_push($words,\
    \ 'e');\n        if(substr_count($letter, 'i')>0) array_push($words, 'i');\n \
    \       if(substr_count($letter, 'o')>0) array_push($words, 'o');\n        if(substr_count($letter,\
    \ 'u')>0) array_push($words, 'u');\n        if(substr_count($letter, 'e')>0) array_push($words,\
    \ 'e');\n        if(substr_count($letter, 'h')>0) array_push($words, 'h');\n \
    \       if(substr_count($letter, 'l')>0) array_push($words, 'l');\n        if(substr_count($letter,\
    \ 'o')>0) array_push($words, 'o');\n        if(substr_count($letter, 's')>0) array_push($words,\
    \ 's');\n        if(substr_count($letter, 't')>0) array_push($words, 't');\n \
    \       if(substr_count($letter, ' ')>0) array_push($words, ' ');\n    }\n   \
    \ \n    foreach($words as $w) {\n        if (substr_count($s, $w) == $n) return\
    \ [$w];\n    }\n    \n    return [];\n}\n</code>\n<|/ a tags=php,substr,string,algorithm\
    \ |>\n<| a |>\nHere's my solution using PHP:\n<code>", "    \n}", "    $list =\
    \ array();\n\n    if (!empty($s)) {\n        if (strlen($s) <= $n) {\n       \
    \     $list[] = implode(\" \", explode(\",\", $s));\n        } else {\n      \
    \      $list[] = implode(\" \", explode(\",\", array_slice($s, 0, $n)));\n   \
    \     }\n        if (!empty($s) && strlen($s) > $n) {\n            $list[] = implode(\"\
    \ \", explode(\",\", array_slice($s, $n)));\n        }\n    }\n    return $list;\n\
    }\n", "    $wordsArray = array();\n    for($i = 0; $i <= strlen($s); $i++) {\n\
    \        if($s{$i} == 'a' || $s{$i} == 'e' || $s{$i} == 'i' || $s{$i} == 'o' ||\
    \ $s{$i} == 'u') {\n            $wordsArray[] = $s{$i};\n        }\n    }\n  \
    \  return $wordsArray;\n}\n</code>\nOutput:\n<code>\n$ php test.php\nArray\n(\n\
    \    [0] => a\n    [1] => b\n    [2] => c\n    [3] => d\n    [4] => e\n    [5]\
    \ => f\n    [6] => g\n    [7] => h\n    [8] => i\n    [9] => j\n    [10] => k\n\
    \    [11] => l\n    [12] => m\n    [13] => n\n    [14] => o\n    [15] => p\n \
    \   [16] => q\n    [17] => r\n    [18] => s\n    [19] => t\n    [20] => u\n  \
    \  [21] => v\n    [22] => w\n    [23] => x\n    [24] => y\n    [25] => z\n   \
    \ [26] => A\n    [27] => B\n    [28] => C\n    [29] => D\n    [30] => E\n    [31]\
    \ => F\n    [32] => G\n    [33] => H\n    [34] => I\n    [35] => J\n    [36] =>\
    \ K\n    [37] => L\n    [38] => M\n    [39] => N\n    [40] => O\n    [41] => P\n\
    \    [42] => Q\n    [43] => R\n    [44] => S\n    [45] => T\n    [46] => U\n \
    \   [47] => V\n    [48] => W\n    [49] => X\n    [50] => Y\n    [51] => Z\n)\n\
    </code>\n<|/ a tags=php,foreach,loops |>\n<| a |>\nA more simple solution will\
    \ be\n<code>", "  return [];\n}\n", "    // Your code here\n    $words = [];\n\
    \    foreach($s as $key => $word){\n        for($i = 0; $i < strlen($word); $i++){\n\
    \            if($word[$i] == \"a\" || $word[$i] == \"e\" || $word[$i] == \"i\"\
    \ || $word[$i] == \"o\" || $word[$i] == \"u\" || $word[$i] == \"y\"){\n      \
    \          $words[] = $word;\n                break;\n            }\n        }\n\
    \    }\n    return $words;\n}\nvar_dump(select_words(\"Mary had a little lamb\"\
    , 4));\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your help, your\
    \ solution works well, however when running your code with these string 'hello\
    \ world' and n=1 it returns an empty array. I want to be able to select any number\
    \ of the words that contain only consonants. So for example if I set n=2 and input\
    \ 'hello world' it should return ['hello world']. Also I have not been taught\
    \ the foreach loops yet so I have not been able to apply your solution to my problem.\n\
    <|/ c |>\n<| c |>\nAh I misread the question, I'll update it.\n<|/ c |>\n<| a\
    \ |>\nThe function array_intersect solves this problem and can be called like\
    \ so:\n<code>", "    return $s;\n}\n", "  if (empty($s)) {\n    return array();\n\
    \  }\n\n  // Scan for consonants\n  $consonants = str_split('bcdfghjklmnpqrstvwxyz');\n\
    \n  // Create a pattern to scan the string with\n  $pattern = \"/([\" . implode($consonants,\
    \ \"\") . \"]*)(\" . implode($consonants, \"\") . \")*([^\" . implode($consonants,\
    \ \"\") . \"]+)/i\";\n\n  // Find all words that contain the correct number of\
    \ consonants in a row\n  $matches = array();\n  if (preg_match_all($pattern, $s,\
    \ $matches)) {\n    foreach($matches[0] as $key => $word) {\n      // If we found\
    \ a word that contained exactly n consonants then push it\n      // onto the result\
    \ array\n      if (strlen($word) == $n) {\n        $result[] = $word;\n      }\n\
    \    }\n  }\n\n  return $result;\n}\n", "  $words = array();\n  if (strlen($s)\
    \ <= 0) return array();\n  if ($n <= 0) {\n    return array();\n  }\n  $consonants\
    \ = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    );\n  foreach (str_split($s) as $letter) {\n    if (in_array($letter, $consonants))\
    \ {\n      if (strlen($words[$letter]) == $n) {\n        $words[$letter][] = $s;\n\
    \      }\n    } else {\n      foreach ($words as $letter => $values) {\n     \
    \   if (strlen($words[$letter]) == $n) {\n          $words[$letter][] = $s;\n\
    \          break;\n        }\n      }\n    }\n  }\n  return $words;\n}\n", " \
    \   // +++your code here+++\n}\n", "    // Your code here\n}\n</cell>\n<cell>",
  "    if (empty($s)) {\n        return array();\n    }\n    $words = array();\n \
    \   $last_word = \"\";\n    $consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $letter = substr($s, $i,\
    \ 1);\n        if (in_array($letter, $consonants)) {\n            $last_word =\
    \ $letter;\n            $words[] = $last_word;\n        } elseif ($n === 1) {\n\
    \            $last_word = $letter;\n            $words[] = $last_word;\n     \
    \   } else {\n            if ($words) {\n                array_push($words, $last_word);\n\
    \            }\n        }\n    }\n    return $words;\n}\n", "    $words = explode(\"\
    \ \",$s);\n    $result = [];\n    $i=0;\n    foreach($words as $word) {\n    \
    \    $i+= strlen($word);\n        for($j=0;$j<$i;$j++) {\n            $pos = strpos($word,$consonants[$j]);\n\
    \            if($pos!==false) {\n                if($j+$n>$i){\n             \
    \       break;\n                }\n                $result[] = $word;\n      \
    \          for($i=$j;$i<$pos;$i++) {\n                    $result[] = $words[$i];\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    return $result;\n}\n", "    // Your code here\n    if (empty($s)) {\n   \
    \     return array();\n    } else {\n        $words = preg_split('/\\s+/', $s);\n\
    \        foreach ($words as $word) {\n            if (strlen($word) === $n) {\n\
    \                sort($word);\n                array_push($words, $word);\n  \
    \          }\n        }\n        array_unique($words);\n        return $words;\n\
    \    }\n}", "    // Your code here\n}\n</code>\nThe code above shows you how to\
    \ implement a recursive function that returns a list of all words from a string\
    \ that contains exactly n consonants. In case you don't know how to create recursive\
    \ functions, I suggest you to have a look at this tutorial.\nIn your question\
    \ you also asked about how to convert the string into a list. There are several\
    \ ways to do that. The simplest one to convert a string into a list is:\n<code>\n\
    list($words) = explode(\" \", $s);\n</code>\nHowever, I strongly suggest you use\
    \ the solution I proposed above to create your list.\n<|/ a |>\n<| c |>\nI really\
    \ don't like `implode()`. If I were to write `explode()` I would use `preg_split()`,\
    \ or even `explode(\" \", preg_replace(\"/[^a-zA-Z ]+/\", \"\", $s))`. So I thought\
    \ I'd give `implode()` a try, but your way is better. I was going to try using\
    \ `explode()` but couldn't get it to work, so I thought I'd try `implode()`. But\
    \ this answer doesn't say anything about `implode()`... I really don't like that\
    \ answer, it would be better if you could tell me how to make `implode()` work.\n\
    <|/ c |>\n<| c |>\nI just updated my answer to show you how to use `implode()`\
    \ to convert the string into a list. I think my answer will help you to understand\
    \ the problem. As you can see, `implode()` can take an array and convert it into\
    \ a string.\n<|/ c |>\n<| c |>\n\"*In case you don't know how to create recursive\
    \ functions, I suggest you to have a look at this tutorial*\" The link you posted\
    \ contains all the answers you need.\n<|/ c |>\n<| c |>\nOh yes, I'm sorry I forgot\
    \ about it. I have edited my answer to include it.\n<|/ c |>\n<| a dscore=0 |>\n\
    Your question seems to boil down to \"how to split a string into an array of strings\"\
    . There are lots of ways to do that.\n<code>", "\t// write your code here\n\t\
    $count = 0;\n\tfor ($i=0; $i<strlen($s); $i++) {\n\t\tif (isConsonant($s[$i])\
    \ && $count < $n) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn preg_split('/\\s+/',\
    \ $s);\n}\n", "}\n", "  $words = array();\n  if ($s !== '') {\n    $pos = 0;\n\
    \    $n = strlen($s);\n    while ($pos < $n) {\n      $pos = strpos($s, ' ', $pos);\n\
    \      if ($pos === false) {\n        $words[] = substr($s, $pos);\n        $pos++;\n\
    \        continue;\n      }\n      $letter = substr($s, $pos, 1);\n      $new_pos\
    \ = strpos($s, ' ', $pos + 1);\n      if ($new_pos !== false && $new_pos - $pos\
    \ == $n) {\n        $words[] = substr($s, $pos, $new_pos - $pos);\n        $pos\
    \ = $new_pos + 1;\n        continue;\n      }\n      $letter = strtolower($letter);\n\
    \      if (strpos('aeiou', $letter) === false) {\n        $words[] = $letter;\n\
    \        $pos += 1;\n        continue;\n      }\n    }\n  }\n  return $words;\n\
    }\n", "  \n    $words = array();\n    $splits = str_split($s);\n    \n    for($i\
    \ = 0; $i < $n; $i++){\n        $words[] = $splits[$i];\n    }\n    \n    return\
    \ $words;\n}", "    // Insert your code here\n    $vowels = \"aeiouy\";\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxz\";\n    $letters = str_split($s);\n    $consonants_found\
    \ = [];\n    $vowels_found = [];\n    $words = [];\n    $found = [];\n    foreach\
    \ ($letters as $letter) {\n        if (in_array($letter, $vowels)) {\n       \
    \     $vowels_found[] = $letter;\n        } else {\n            $found[] = $letter;\n\
    \        }\n    }\n    foreach ($found as $letter) {\n        if (in_array($letter,\
    \ $consonants)) {\n            $consonants_found[] = $letter;\n        }\n   \
    \ }\n    return $consonants_found;\n}\n", "    $vowels = \"aeiou\";\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $consonant_lengths = array_count_values(str_split($consonants));\n\
    \    $vowel_lengths = array_count_values(str_split($vowels));\n    $vowel_numbers\
    \ = array_count_values(str_split($s));\n    $selected_words = [];\n    foreach\
    \ ($consonant_lengths as $k => $v) {\n        if ($v == 1) {\n            $selected_words[]\
    \ = $k;\n        }\n    }\n    foreach ($vowel_lengths as $k => $v) {\n      \
    \  if ($v == 1) {\n            $selected_words[] = $k;\n        }\n    }\n   \
    \ foreach ($vowel_numbers as $k => $v) {\n        if ($v == 1) {\n           \
    \ $selected_words[] = $k;\n        }\n    }\n    return $selected_words;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nCan you explain to me how this works?\n<|/\
    \ c |>\n<| c |>\nI added an explanation on what happens when the code runs. Let\
    \ me know if you have any questions.\n<|/ c |>\n<| c |>\nThank you, but I still\
    \ don't understand how this code works. Can you show me a step-by-step walkthrough\
    \ so I can follow it? I'm really new to PHP, and I have no idea what this code\
    \ is doing.\n<|/ c |>\n<| c |>\nI just added comments to the code to explain what\
    \ each line does. You should be able to see what each line is doing by looking\
    \ at it.\n<|/ c |>\n<| c |>\nI don't think it can be done by using a loop through\
    \ each letter in the string, because there may be more than one solution to a\
    \ given string like Mary had a little lamb which contains 4 consonants, like Mary\
    \ had a little lamb contains 3 consonants, like Mary had a little lamb contains\
    \ 2 consonants, etc.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    // Your code here\n\
    \    $vowels = \"aeiou\";\n    $vowels_count = count($vowels);\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $consonants_count = count($consonants);\n\
    \    $words = array();\n    \n    if($s == \"\") {\n        return array();\n\
    \    }\n\n    for($i=0; $i<$n; $i++) {\n        $word = \"\";\n        $letter\
    \ = substr($s, $i, 1);\n        \n        if($letter == \" \") {\n           \
    \ array_push($words, $word);\n        } else {\n            for($j=0; $j<$vowels_count;\
    \ $j++) {\n                if($letter == $vowels[$j]) {\n                    $word\
    \ .= \"aeiou\";\n                    $j = $vowels_count;\n                }\n\
    \            }\n            for($j=0; $j<$consonants_count; $j++) {\n        \
    \        if($letter == $consonants[$j]) {\n                    $word .= $letter;\n\
    \                    $j = $consonants_count;\n                }\n            }\n\
    \            array_push($words, $word);\n        }\n    }\n\n    return $words;\n\
    }\n", "    $words = [];\n    $currentWord = \"\";\n    $splitS = [];\n    foreach\
    \ (str_split($s) as $char) {\n        if (strlen($currentWord) > 0 && $char !=\
    \ \" \") {\n            $splitS[] = $currentWord;\n            $currentWord =\
    \ \"\";\n        }\n        $currentWord .= $char;\n    }\n    $splitS[] = $currentWord;\n\
    \    foreach ($splitS as $word) {\n        if (count($word) === $n) {\n      \
    \      $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThank you so much for taking the time to explain this to me.\
    \ I've been stuck on this for the last few hours.\n<|/ c |>\n<| c |>\nI've tried\
    \ running the code you provided, but every time I try it out, the output I get\
    \ is \"Array ( [0] => Array[] [1] => Array ) \" even though I've tried entering\
    \ something in the text box and it is not returning any results.\n<|/ c |>\n<|\
    \ c |>\nIt sounds like you have a problem in your input. Make sure you enter the\
    \ correct number of `consonants` and the `text` in the text box is really exactly\
    \ as you stated in your question.\n<|/ c |>\n<| c |>\nI've tried running the code\
    \ you provided, but every time I try it out, the output I get is \"Array ( [0]\
    \ => Array[] [1] => Array ) \" even though I've tried entering something in the\
    \ text box and it is not returning any results. I've also tried changing my input,\
    \ but I still seem to be having an issue. I've tried putting in \"simple\" and\
    \ \"hello world\" as my input and I have tried putting in \"lamb\" as the input\
    \ but it gives me the same output.\n<|/ c |>\n<| c |>\nYou have to enter the same\
    \ number of consonants as the number of letters in your input in the text box.\
    \ The example you provided had three consonants and no letters.\n<|/ c |>\n<|\
    \ a tags=php,javascript |>\nSo I finally figured it out. I figured it was an issue\
    \ with my input because I wasn't able to get it working in other ways so I went\
    \ through my code line by line and compared it to other solutions online and this\
    \ is what I found.\nHere's the code that works:\n<code>\n<?php\n$consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n$vowels = \"aeiou\";\n$input\
    \ = $_POST[\"input\"];\n$vowelsOutput = $", "    // Your code here\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYour answer is incorrect, your second example should return\
    \ `[\"Mary\", \"little\", \"lamb\"]` - you omitted the 'little' from the list\
    \ because it wasn't a whole consonant. Also your final example should return an\
    \ empty list because no word contains exactly 2 consonants. Please also see the\
    \ second example I added to the question. Thanks!\n<|/ c |>\n<| c |>\n, thanks\
    \ for pointing that out.  I actually read that example too quickly and didn't\
    \ realize that.  I modified my answer.\n<|/ c |>\n<| a tags=php,algorithm,logic,string\
    \ |>\nOne solution is to use Regex in conjunction with preg_match_all:\n<code>\n\
    <?php\n", "    return [];\n}\n", "    $words = array();\n\n    if (!is_string($s)\
    \ || !is_integer($n) || $n < 0 || $n >= strlen($s)) {\n        return $words;\n\
    \    }\n\n    $start = 0;\n    while ($start <= strlen($s) - $n) {\n        $words[]\
    \ = substr($s, $start, $n);\n        $start += $n;\n    }\n\n    return $words;\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string dscore=0 |>\nA recursive\
    \ function is an elegant way for doing this:\n<code>", "    // Write your code\
    \ here\n\n}\n</code>\n<|/ q |>\n<| c |>\nWhat's your question?\n<|/ c |>\n<| c\
    \ |>\nThe question is how to code the function\n<|/ c |>\n<| c |>\nWhat is the\
    \ expected output of your function? It looks like a homework question to me, but\
    \ you should always include that in your question.\n<|/ c |>\n<| c |>\nI have\
    \ updated my question with my expected output\n<|/ c |>\n<| c |>\nAnd what have\
    \ you tried so far? Have you done any debugging? What have you learned?\n<|/ c\
    \ |>\n<| a tags=php |>\nYou can do that using array_intersect\n<code>", "    //\
    \ Write your code here\n    $str=str_split($s);\n    $list=array();\n    foreach($str\
    \ as $word){\n        if(substr_count($word,$n)==$n){\n            $list[]=$word;\n\
    \        }\n    }\n    return $list;\n}\n", "    return \"\";\n}", "  if (empty($s))\
    \ {\n    return array();\n  }\n  \n  $a = array();\n  \n  for ($i = 0; $i <= strlen($s)\
    \ - $n; $i++) {\n    $letter = substr($s, $i, $n);\n    if (preg_match('/[aeiouyAEIOUY]/i',\
    \ $letter)) {\n      $a[] = $letter;\n    }\n  }\n  \n  return $a;\n}\n", "  return\
    \ array();\n}\n", "  if ($s == \"\") {\n    return array();\n  }\n  $arr = array();\n\
    \  $words = explode(\" \", $s);\n  $arr2 = array();\n  foreach ($words as $w)\
    \ {\n    $n = count($w);\n    if ($n == $n) {\n      $arr2[] = $w;\n    }\n  }\n\
    \  return $arr2;\n}", "    $arr = explode(\" \", $s);\n    $result = array();\n\
    \n    foreach($arr as $word){\n        $word = preg_replace(\"/[^a-zA-Z ]/\",\"\
    \",$word);\n        $word = str_replace(\" \", \"\", $word);\n        $word =\
    \ strtolower($word);\n        if (count($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nIt's a good answer. But, unfortunately, it fails with this test: \"AABBCCCCCCC\"\
    . It should return \"AABB CCCC\".\n<|/ c |>\n<| c |>\nSorry I missed that. Thanks!\n\
    <|/ c |>\n<| c |>\nThanks, I've updated the code so it should now handle this\
    \ case.\n<|/ c |>\n<| a tags=php,explode,substring |>\nYou can use a simple regex\
    \ to get the desired output from strings. Here's a working example:\n<code>\n\
    <?php\n  $str = \"AABBCCCCCCC\";\n  $matches = array();\n  $output = preg_match_all('/[A-Za-z]{1,2}\\\
    K/', $str, $matches);\n  print_r($matches[0]);", "    $words = array();\n    foreach\
    \ (str_split($s) as $char) {\n        if (ctype_alpha($char) && strlen($char)\
    \ == 1) {\n            if ($char === $words[0]) {\n                unset($words[0]);\n\
    \            }\n            foreach ($words as $word) {\n                if (count($word)\
    \ == $n && strpos($word, $char) !== false) {\n                    $words[] = $word;\n\
    \                }\n            }\n        }\n    }\n    return $words;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI didn't downvote you, but I can say that your function\
    \ is really good. Your teacher doesn't want you to use any sort of loops, and\
    \ they don't want you to use `explode` either. I think you should get rid of those\
    \ loops, and `explode` and try and solve the problem without them.\n<|/ c |>\n\
    <| c |>\nI didn't downvote either. I'm going to post my answer though\n<|/ c |>\n\
    <| c |>\nThank you! I appreciate the effort. I just want to know why you downvoted.\
    \ Thank you!\n<|/ c |>\n<| c |>\nI didn't downvote you. I upvoted your answer.\
    \ I hope you reconsider your decision then.\n<|/ c |>\n<| c |>\nI appreciate it.\
    \ I will definitely consider that next time. Thank you.\n<|/ c |>\n<| a tags=php,string\
    \ dscore=2 |>\n<code>", "    // Your code here\n    $words = array();\n    \n\
    \    if (empty($s)){\n        return $words;\n    }\n    \n    foreach (preg_split('/\\\
    s+/', $s) as $word){\n        \n        if (preg_match('/\\A[^\\W\\d_]{' . $n\
    \ . '}[^\\W\\d_]+\\z/u', $word)){\n            $words[] = $word;\n        }\n\
    \    }\n    \n    return $words;\n}\n</code>\n<|/ a dscore=2 tags=string,php,regex\
    \ |>\n<| c |>\nWow, thank you! I didn't realize this problem could be solved using\
    \ a regex like this. I'm going to have to research that regex thing and see if\
    \ I can use it in the future!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    return\
    \ [];\n}\n\n$result = select_words(\"Mary had a little lamb\", 4); // [\"little\"\
    ]", "    // TODO\n}", "  $words = array();\n  $i = 0;\n  $found = false;\n  while(!$found\
    \ && $i < strlen($s)) {\n    $found = true;\n    $letter = substr($s, $i, 1);\n\
    \    $i = $i + 1;\n    if(in_array($letter, array('a', 'e', 'i', 'o', 'u', 'y')))\
    \ {\n      if($i == strlen($s)) {\n        if($letter == 'a') {\n          $words[]\
    \ = 'a';\n        } else if($letter == 'e') {\n          $words[] = 'e';\n   \
    \     } else if($letter == 'i') {\n          $words[] = 'i';\n        } else if($letter\
    \ == 'o') {\n          $words[] = 'o';\n        } else if($letter == 'u') {\n\
    \          $words[] = 'u';\n        } else if($letter == 'y') {\n          $words[]\
    \ = 'y';\n        }\n      } else {\n        $letter = substr($s, $i, 1);\n  \
    \      if($letter == 'a') {\n          $words[] = 'a';\n        } else if($letter\
    \ == 'e') {\n          $words[] = 'e';\n        } else if($letter == 'i') {\n\
    \          $words[] = 'i';\n        } else if($letter == 'o') {\n          $words[]\
    \ = 'o';\n        } else if($letter == 'u') {\n          $words[] = 'u';\n   \
    \     } else if($letter == 'y') {\n          $words[] = 'y';\n        } else {\n\
    \          $found = false;\n        }\n      }\n    }\n  }\n  return $words;\n\
    }\n", "    $list = [];\n    foreach (str_split($s) as $word)\n        $list =\
    \ array_merge($list, select_word($word, $n));\n    return $list;\n}\n", "\t$str\
    \ = explode(' ',$s);\n\tforeach($str as $key => $value) {\n\t\t$count= substr_count($value,$str[$key]);\n\
    \t\tif($count==$n) {\n\t\t\t$ret[$key]= $value;\n\t\t}\n\t}\n\tif(count($ret)>0)\
    \ {\n\t\treturn $ret;\n\t}\n}", "  $l = [\"\"];\n  $c = count($s);\n  for ($i\
    \ = 0; $i < $c; $i++) {\n    $s = trim($s);\n    if ($s == \"\") {\n      break;\n\
    \    }\n    $a = explode(\" \", $s);\n    foreach ($a as $k => $v) {\n      if\
    \ (strpos($v, $n) != $i || !isset($a[$k + 1]) || $a[$k + 1] != \"\") {\n     \
    \   $l = array_merge($l, $v);\n      }\n    }\n  }\n  return $l;\n}", "    $a\
    \ = array_count_values(str_split($s));\n    $b = array_filter($a, function($item)\
    \ {\n        return ($item <= $n);\n    });\n    $words = array_keys($b);\n  \
    \  return $words;\n}", "  $arr = [];\n  foreach (str_split($s) as $word)\n  {\n\
    \    if (strpos($word, '') === false)\n    {\n      if (preg_match('/[^aeiou]/',\
    \ $word) === 0)\n      {\n        $arr[] = $word;\n      }\n    }\n  }\n  return\
    \ $arr;\n}", "    if (empty($s) || $n === 0) {\n        return [];\n    }\n  \
    \  $vowels = \"aeiouAEIOU\";\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n \
    \   $pattern = $consonants . $vowels;\n    $words = preg_split(\"/\\s+/\", $s);\n\
    \    $result = array();\n    foreach ($words as $word) {\n        if (preg_match(\"\
    /{$pattern}/\", $word)) {\n            $result[] = $word;\n        }\n    }\n\
    \    return $result;\n}\n", "    $words    = array();\n    $index    = 0;\n  \
    \  $prevChar = $s[0];\n    while ($index < strlen($s) && $index < $n) {\n    \
    \    $nextChar = $s[$index + 1];\n        if ($nextChar != $prevChar) {\n    \
    \        $words[] = $s[$index];\n            $index++;\n        }\n        $prevChar\
    \ = $nextChar;\n    }\n    return $words;\n}", "    $list = array();\n    if (strlen($s)\
    \ === 0) {\n        return $list;\n    }\n    $words = explode(\" \", $s);\n \
    \   $words = preg_grep(\"/[a-zA-Z ]\\K/\", $words);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $list[] = $word;\n      \
    \  }\n    }\n    return $list;\n}\n", "}\n", "    return $n;\n}", "    $result\
    \ = [];\n    $result2 = [];\n    foreach ($s as $key => $value) {\n        if\
    \ ($value == $n) {\n            $result2[] = $value;\n        } else {\n     \
    \       if ($result2[0] == '') {\n                $result2[] = $value;\n     \
    \       } else {\n                if ($key == count($s) - 1 && $value == $n){\n\
    \                    $result[] = $result2;\n                } else {\n       \
    \             if ($key != 0 && $value != $n) {\n                        if ($result2[$key\
    \ - 1] == $value || $result2[$key - 1] == $result2[$key + 1]) {\n            \
    \                $result[] = $result2;\n                        } else {\n   \
    \                         $result[] = $result2;\n                            $result2\
    \ = [];\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    if ($result2[0] == '') {\n        $result[]\
    \ = $result2;\n    }\n    if ($result2[0] == '') {\n        $result[] = $result2;\n\
    \    }\n    return $result;\n}\n", "    \n    $words = [];\n    \n    $length\
    \ = strlen($s);\n    \n    for ($i = 0; $i < $length; $i++) {\n        \n    \
    \    $count = ($i == $length) ? $n : $length - $i;\n        \n        $consonants\
    \ = 0;\n        \n        for ($j = 0; $j < $count; $j++) {\n            \n  \
    \          if (($s[$i] == \" \") || ($s[$i] == \"\")) {\n                \n  \
    \              $consonants = 0;\n                \n            } else {\n    \
    \            \n                $consonants += (mb_strpos($s, \" \", $i, $j));\n\
    \            }\n        }\n        \n        if ($consonants == $n) {\n      \
    \      \n            $words[] = mb_substr($s, $i, $length);\n        }\n    }\n\
    \    \n    return $words;\n}\n", "  $a = explode(' ', $s);\n  $b = explode(' ',\
    \ $n);\n  $return = [];\n\n  foreach($a as $k => $v){\n    $x = 0;\n    foreach($b\
    \ as $w){\n      if(strpos($v, $w) !== false){\n        $x++;\n      }\n    }\n\
    \    if($x === count($b)){\n      $return[] = $v;\n    }\n  }\n\n  return $return;\n\
    }", "  return array();\n}\n", "  $list = [];\n  // check if string contains only\
    \ letters and spaces\n  if (strlen($s) == 0) {\n    return [];\n  }\n  // Split\
    \ string into words\n  $words = explode(\" \", $s);\n  // count number of words\
    \ that contains n letters\n  $count = 0;\n  foreach ($words as $word) {\n    if\
    \ (strlen($word) == $n) {\n      $list[] = $word;\n      $count++;\n    }\n  }\n\
    \  if ($count > 0) {\n    return $list;\n  }\n  return [];\n}\n", "  $ret = [];\n\
    \  foreach($s as $word) {\n    $len = strlen($word);\n    for ($i = $len; $i >\
    \ 0; $i--)\n      if ($word[$i] == \" \") {\n        if ($n-- == 0) break;\n \
    \     }\n      else\n        $ret[] = $word;\n  }\n  return $ret;\n}", "    $words\
    \ = array();\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $words\
    \ = explode(' ', $s);\n    for ($i = 0; $i < count($words); $i++) {\n        $found\
    \ = 0;\n        for ($j=0; $j < count($vowels); $j++) {\n            $found =\
    \ $words[$i] == $vowels[$j];\n            if ($found == 0) {\n               \
    \ break;\n            }\n        }\n        if ($found == 0) {\n            $words[$i]\
    \ = $words[$i].' ';\n        }\n    }\n    return $words;\n}\n", "    return array();\n\
    }", "  // your code goes here\n}\n\n$words=select_words(\"Uncle sam\", 3);\nprint_r($words);",
  "    $words = preg_split('/\\s+/', $s);\n    $output = [];\n    foreach ($words\
    \ as $word) {\n        if (strpos($word, $n) !== false) {\n            array_push($output,\
    \ $word);\n        }\n    }\n    return $output;\n}\n", "    \n}", "\t\n\t$vowel_consonant_array\
    \ = array('a', 'e', 'i', 'o', 'u', 'y');\n\t$vowel_consonant_array2 = array('A',\
    \ 'E', 'I', 'O', 'U', 'Y');\n\t$vowel_consonant_array3 = array('a', 'e', 'i',\
    \ 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y');\n\t\n\t$s = strtolower($s);\n\t\
    $s = preg_replace('/[^a-zA-Z\\s]/', '', $s);\n\t$s = preg_replace('/[aeiouy]+/',\
    \ '', $s);\n\t$s = preg_replace('/[aeiou]+/', '', $s);\n\t$words = explode(\"\
    \ \", $s);\n\t\n\tif ($words[0] == '') {\n\t\tarray_shift($words);\n\t}\n\t\n\t\
    array_walk($words, function($word) use ($words) {\n\t\t$word = trim($word);\n\t\
    \tif (!$word) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$word = str_replace('y', 'i',\
    \ $word);\n\t\t$word = str_replace('u', 'o', $word);\n\t\t$word = str_replace('e',\
    \ 'e', $word);\n\t\t$word = str_replace('a', 'a', $word);\n\t\t$word = str_replace('o',\
    \ 'o', $word);\n\t\t$word = str_replace('i', 'i', $word);\n\t\t\n\t\t$word = preg_replace('/[aeiouy]+/',\
    \ '', $word);\n\t\t$word = preg_replace('/[aeiou]+/', '', $word);\n\t\t$word =\
    \ preg_replace('/[^a-zA-Z\\s]/', '', $word);\n\t\t\n\t\t$words[] = $word;\n\t\
    });\n\t\n\t$words = array_unique($words);\n\t\n\t$vowel_consonant_array = array_merge($vowel_consonant_array,\
    \ $vowel_consonant_array2, $vowel_consonant_array3);\n\t\n\tforeach ($words as\
    \ $word) {\n\t\t$word = preg_replace('/[aeiouy]+/', '', $word);\n\t\t$word = preg_replace('/[aeiou]+/',\
    \ '', $word);\n\t\t$word = preg_replace('/[^a-zA-Z\\s]/', '', $word);\n\t\t\n\t\
    \tif (str_length($word) == $n) {\n\t\t\tif (preg_match('/[aeiouyA]/i', $word))\
    \ {\n\t\t\t\t$words[] = $word;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $words;\n}\n\
    \n$str = 'Mary had a little lamb';\n$arrays = select_words($str, 3);\nprint_r",
  "  return array();\n}", "    // Your code here\n}\n</code>\n<|/ a dscore=0 tags=php,logic,algorithm,language-agnostic\
    \ |>\n<| c |>\nThank you for the helpful response, however I do not think this\
    \ solves the problem (though I am open to correction). You seemed to be assuming\
    \ that the input is guaranteed to be in alphabetical order, which is unlikely.\
    \ Also, the function must return all words that have $n consonants, not just any\
    \ word that has exactly $n consonants.\n<|/ c |>\n<| c |>\nYou're correct, I had\
    \ misread the original problem. I've rewritten the answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThis sounds like a classic algorithmic question. \nI would suggest going\
    \ through this problem with pen and paper to get a sense of the logic. \nA simple\
    \ algorithm would be: \n\nFor each word in the sentence, add its characters to\
    \ the list\nSort the list\nIf the list has $n elements, return the list.\n\nYou\
    \ could implement this in PHP as follows:\n<code>", "  $result = [];\n  foreach\
    \ ($s as $word) {\n    $is_allowed = true;\n    foreach (str_split($word) as $letter)\
    \ {\n      if (strlen($letter) == 1 && strpos($letter, \"aeiou\") !== false &&\
    \ strpos($letter, \"y\") === false) {\n        $is_allowed = false;\n      }\n\
    \    }\n    if ($is_allowed) {\n      $result[] = $word;\n    }\n  }\n  return\
    \ $result;\n}\n</code>\nOutput:\n<code>\narray(2) {\n  [0]=>\n  string(9) \"Mary\"\
    \n  [1]=>\n  string(11) \"lamb\"\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,algorithm\
    \ |>\nHere is a solution using RegEx:\n<code>\n$str = \"Mary had a little lamb\"\
    ;\n$str = preg_replace('/[^aeiou]/', '', $str);\n$arr = explode(' ', $str);\n\
    $arr = preg_split('/\\s+/', $arr);\n$res = array_filter($arr, 'strlen');\n\nvar_dump($res);\n\
    </code>\nOutput:\n<code>\narray(2) {\n  [0]=>\n  string(9) \"Mary\"\n  [1]=>\n\
    \  string(11) \"lamb\"\n}\n</code>\n<|/ a |>\n<| c |>\nOP said \"in the order\
    \ of appearance in the string\", so `preg_split('/\\s+/', $arr)` is unneccessary\n\
    <|/ c |>\n<| c |>\nI know. I put it in there because OP's example had spaces in\
    \ them, but I just added the second line just to make it easier for OP to see\
    \ that they can just remove it from the string without having to do the explode\
    \ and split.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n$string = 'Mary had\
    \ a little lamb';\n\n$regex = \"/([a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\\
    s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\\
    s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\\
    s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\s[a-z]*\\\
    s[a-z]*\\s[a-z]*\\s[a-z]*\\s[", "    // Your code here\n    $arr=array();\n  \
    \  for($i=0;$i<strlen($s);$i++){\n        $temp=str_split($s[$i]);\n        array_push($arr,$temp);\n\
    \    }\n    for($i=0;$i<count($arr);$i++){\n        if(count($arr[$i])==$n){\n\
    \            array_shift($arr[$i]);\n        }\n    }\n    return $arr;\n}\n$s=\"\
    Mary had a little lamb\";\n$n=3;\nprint_r(select_words($s,$n));", "    // Write\
    \ your code here\n}", "\treturn array();\n}\n", "    // Your code here\n    $words\
    \ = array();\n    if($s == \"\") {\n        return $words;\n    }\n    $arr =\
    \ explode(\" \", $s);\n    foreach ($arr as $word) {\n        $words = array_merge($words,\
    \ preg_split(\"//\", $word));\n    }\n    $output = array();\n    foreach($words\
    \ as $word) {\n        if(count(array_count_values(str_split($word))) == $n) {\n\
    \            $output[] = $word;\n        }\n    }\n    return $output;\n}\n</code>\n\
    <|/ a dscore=1 tags=arrays,php,string |>\n<| a |>\nThe below code is working as\
    \ expected in PHP:\n<code>\n<?php\n", "    if ($n <= 0 || $s == \"empty string\"\
    ) {\n        return array();\n    } else {\n        $vowels = \"aeiou\";\n   \
    \     $consonants = \"bcdfghjklmnpqrstvwxyz\";\n        $words = array();\n  \
    \      $s = trim($s);\n        $word = \"\";\n        $letters = array();\n  \
    \      $vowelCount = 0;\n        $vowels = explode(\",\", $vowels);\n        $consonants\
    \ = explode(\",\", $consonants);\n        $letterCount = strlen($s);\n       \
    \ $i = 0;\n        while (is_int($i) && $i < $letterCount) {\n            $letter\
    \ = substr($s, $i, 1);\n            foreach ($vowels as $vowel) {\n          \
    \      if ($letter == $vowel) {\n                    $vowelCount++;\n        \
    \            $words[] = $word;\n                    $word = \"\";\n          \
    \      }\n            }\n            foreach ($consonants as $consonant) {\n \
    \               if ($letter == $consonant) {\n                    $words[] = $word;\n\
    \                    $word = \"\";\n                }\n            }\n       \
    \     $i++;\n        }\n        return $words;\n    }\n}", "\t// +++your code\
    \ here+++\n\treturn [];\n}\n", "    // Your code here\n    return array_filter($s);\n\
    }\n</code>\n<|/ a tags=php |>\n<| a tags=php dscore=1 |>\n<code>", "\t// Your\
    \ code here\n\t$vowels=\"aeiouyAEIOUY\";\n\t$consonants=array();\n\tforeach(str_split($s)\
    \ as $c)\n\t\tif(strlen($c)==1)\n\t\t\t$consonants[]=$c;\n\t\telse\n\t\t\t$consonants=array_merge($consonants,\
    \ array_intersect(str_split($c), $vowels));\n\treturn array_intersect($consonants,\
    \ $vowels);\n}\n$input=\"Mary had a little lamb\";\n$n=4;\n$words=select_words($input,$n);\n\
    echo \"<pre>\";\nprint_r($words);\necho \"</pre>\";", "    $words = array();\n\
    \    if ($s == \"\") return $words;\n    $words = explode(\" \", $s);\n    foreach\
    \ ($words as $word) {\n        if (strlen($word) == $n) array_push($words, $word);\n\
    \    }\n    return $words;\n}\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis does not provide the\
    \ correct answer. It doesn't output all occurrences of `n` consonants. It only\
    \ outputs the first `n` occurrences.\n<|/ c |>\n<| c |>\nIt does output all occurrences\
    \ of `n` consonants. `Mary had a little lamb` contains 4 consonants: M, a, a,\
    \ l, l. I tested it before posting.\n<|/ c |>\n<| c |>\nYes, it does output all\
    \ occurrences of `n` consonants. Did you read my answer? It outputs `[M, a, a,\
    \ l, l]` as opposed to `[\"Mary\", \"little\"]`.\n<|/ c |>\n<| c |>\nYeah, I misread\
    \ your answer. I thought you wanted all occurrences of `n` consonants. I just\
    \ re-read your answer and noticed you said \"the function should return an empty\
    \ list\". What I read was it should only output `n` consonants (not all `n` consonants).\
    \ I'll edit my answer to reflect this.\n<|/ c |>\n<| c |>\nAha, I think I understand\
    \ what you mean. Yes, my answer should only output `n` consonants. I updated my\
    \ answer accordingly.\n<|/ c |>\n<| a tags=php,arrays |>\nYou can use the following\
    \ code:\n<code>\n$s = <<<END\nMary had a little lamb\nEND;\n\n$n = 4;\n$words\
    \ = explode(\" \", $s);\n$pattern = '/[^aeiouy]+/';\n$matches = array();\n\nforeach\
    \ ($words as $word) {\n    $found = true;\n    while($found) {\n        $found\
    \ = preg_match($pattern, $word);\n        if ($found) array_push($matches, $word);\n\
    \    }\n}\n\nprint_r($matches);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does\
    \ not provide the correct answer. It doesn't output all occurrences of `n` consonants.\
    \ It only outputs the first `n` occurrences.\n<|/ c |>\n<| c |>\nSorry, I was\
    \ confused by ", "    $s = preg_replace('/[^a-zA-Z ]/', \"\", $s);\n    $arr =\
    \ explode(\" \", $s);\n    $arr2 = [];\n    foreach ($arr as $word) {\n      \
    \  if (count(array_filter(str_split($word))) == $n) {\n            $arr2[] = $word;\n\
    \        }\n    }\n    return $arr2;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Nice solution. Just out of curiosity, what is the purpose of `$arr2[] = $word;`?\n\
    <|/ c |>\n<| c |>\n`explode` turns the string into an array of words. `array_filter`\
    \ removes the empty strings in the array. `array_filter` turns empty strings into\
    \ the empty array. `$arr2` is an empty array where we'll add the filtered words.\
    \ `$arr2[]` adds a word to the array.\n<|/ c |>\n<| a dscore=0 |>\nI do not have\
    \ much knowledge of PHP but i think the following code may help you.\n<code>",
  "  // Initialize an empty list and add the return value to it\n  $list = [];\n \
    \ // Create a variable called $index so that we can iterate through the string\
    \ and \n  // count the number of consonants in each word\n  $index = 0;\n  //\
    \ Iterate through the string and add each word that contains exactly $n consonants\
    \ to \n  // the list\n  while ($index < strlen($s)) {\n    // If the consonant\
    \ is found in the current word then increment the $index by \n    // the length\
    \ of the current word\n    if (strpos($s[$index], 'aeiou') !== FALSE) {\n    \
    \  $index += strlen($s[$index]);\n    }\n    // If the $index hasn't reached the\
    \ end of the string, then add the current \n    // word to the list\n    else\
    \ if ($index == strlen($s) - 1) {\n      $list[] = $s[$index];\n    }\n    //\
    \ If we've found a consonant, increment the $index by one and the $index \n  \
    \  // will now equal the index of the next consonant in the next word\n    else\
    \ {\n      $index += 1;\n    }\n  }\n  return $list;\n}\n", "  // Your code here\n\
    \  \n}\n\n$wordList = select_words(\"Mary had a little lamb\", 3);\nvar_dump($wordList);",
  "  $words = array();\n  if (!empty($s)) {\n    $words[] = $s;\n  }\n  for ($i =\
    \ 1; $i <= strlen($s); $i++) {\n    for ($j = 0; $j < $n; $j++) {\n      $words[]\
    \ = substr($s, 0, $i);\n      $s = substr($s, $i);\n    }\n  }\n  return $words;\n\
    }", "    // Write your code here\n    $pattern = \"/(?=($s))/\";\n    $match =\
    \ [];\n    preg_match_all($pattern, $s, $match);\n    return $match[0];\n}\n",
  "}\n", "    // Write your code here\n    $list = array();\n    for($i = 0; $i <\
    \ strlen($s); $i++) {\n        $x = $s[$i];\n        for($j = 0; $j < $n; $j++)\
    \ {\n            if(preg_match(\"/[^aeiou]$/\", $x)) {\n                $list[]\
    \ = $x;\n                break;\n            }\n            $x = $x . \"a\";\n\
    \        }\n    }\n    return $list;\n}", "    return array_filter($s, function\
    \ ($item) {\n        return str_count($item, 'aeiou') === $n;\n    });\n}\n",
  "    // TODO\n}", "    $list = array();\n    \n    // Your code here\n    return\
    \ $list;\n}", "    $words = array();\n    $count = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if ($count == $n) {\n            $words[] = substr($s, $i,\
    \ $i);\n        } else {\n            if (isset($s[$i + 1]) && $s[$i + 1] == '\
    \ ') {\n                $count ++;\n            }\n        }\n    }\n    return\
    \ $words;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm,string dscore=1\
    \ |>\nIn one line with regex:\n<code>\npreg_split('/(?<=\\s)(?=\\s)/', $string,\
    \ null, PREG_SPLIT_NO_EMPTY);\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>", "\t\
    $list = array();\n\t// write your code here\n\treturn $list;\n}", "}\n", "  //\
    \ Your code here\n}\n", "    \n    // your code here\n\n}\n\nselect_words($s,\
    \ $n);", "    // Code here\n}\n", "    if (strlen($s) === 0) {\n        return\
    \ [];\n    }\n\n    // Find all words from the string that contain the specified\
    \ number of consonants\n    $words = preg_split('/\\s+/', $s);\n\n    return array_filter($words,\
    \ function ($word) use ($n) {\n        $count = 0;\n\n        foreach (str_split($word)\
    \ as $letter) {\n            if ($letter !== '_' && $letter !== '.' && $letter\
    \ !== '-') {\n                $count += strlen($letter);\n            }\n    \
    \    }\n\n        return $n === $count;\n    });\n}\n", "    return [];\n}\n",
  "    \n}\n", "    // Your code goes here\n}\n", "    // TODO: Implement function\n\
    }", "  // your code here\n  $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\");\n  $s = strtolower($s);\n  $s = preg_replace('/[^a-z]+/i', '', $s);\n\
    \  $words = array();\n  $words = preg_grep(\"/^[aeiouy]+$/i\", $s);\n  if (count($words)\
    \ == 0) {\n    return array();\n  }\n  $vowels_count = count(array_filter(array_count_values($vowels),\
    \ function ($v) use ($words) {\n    return count(array_intersect($words, $v));\n\
    \  }));\n  foreach ($words as $word) {\n    if (strlen($word) == $n) {\n     \
    \ $count = 1;\n      foreach ($vowels as $vowel) {\n        $count = strpos($word,\
    \ $vowel);\n        if ($count !== false && $count > 0) {\n          break;\n\
    \        }\n      }\n      if ($count === count($vowels)) {\n        array_push($words,\
    \ $word);\n      }\n    }\n  }\n  return $words;\n}", "  $words = array();\n \
    \ foreach(str_split($s) as $word) {\n    if(count($word) == $n) {\n      $words[]\
    \ = $word;\n    }\n  }\n  return $words;\n}\n", "  return $s;\n}", "    // Your\
    \ code here\n}\n\n$tests = array(\n    \"Mary had a little lamb\",\n    \"Mary\
    \ had a little lamb\",\n    \"simple white space\",\n    \"Hello world\",\n  \
    \  \"Uncle sam\",\n    \"hello world\",\n    \"hello\",\n    \"\",\n    \"a\"\n\
    );\n\nfor ($i=0; $i < count($tests); $i++) {\n    print (select_words($tests[$i],\
    \ 4));\n}", "    \n}\n</cell>\n<cell>", "    // your code here\n    return array();\n\
    }\n\n$result = select_words('Mary had a little lamb', 4);\nprint_r($result);",
  "    // Insert code here\n}\n", "    $words = array();\n    $arr = explode(' ',\
    \ $s);\n    for($i = 0; $i < count($arr); ++$i) {\n        $str = $arr[$i];\n\
    \        if(preg_match('/(\\w)\\1{' . $n . '}/', $str, $matches)) {\n        \
    \    $words[] = $matches[1];\n        }\n    }\n    return $words;\n}\n\n$tests\
    \ = array(\n    array(\"Mary had a little lamb\", 4),\n    array(\"Mary had a\
    \ little lamb\", 3),\n    array(\"simple white space\", 2),\n    array(\"Hello\
    \ world\", 4),\n    array(\"Uncle sam\", 3)\n);\n\nforeach ($tests as $test) {\n\
    \    echo sprintf(\"The word contains %d consonants:\\n\", $test[1]);\n    echo\
    \ sprintf(\"- %s\\n\\n\", implode(', ', select_words($test[0], $test[1])));\n\
    }\n", "    $words = array();\n    $i = 0;\n    $len = strlen($s);\n    while ($i\
    \ < $n) {\n        $found = true;\n        $start = 0;\n        $found = false;\n\
    \        foreach ($words as $w) {\n            $len = strlen($w);\n          \
    \  $c = strpos($s, $w[$i], $start);\n            if ($c !== false) {\n       \
    \         $found = true;\n                break;\n            }\n            $start\
    \ += $len;\n        }\n        if ($found == true) {\n            $words[] = $w;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $words;\n}",
  "    \n}\n</cell>\n<text>\nExercise 4\nInstructions: Implement a function that returns\
    \ a list of all words from $s that contain at least $n vowels. In other words,\
    \ all words that contain at least $n$ vowels.\n\n\n</text>\n<cell>", "    return\
    \ []; // Replace this line with your own code\n}\n", "    return array_filter($s,\
    \ \n                        function($word) use ($n) {\n                     \
    \       $count = 0;\n                            foreach (str_split($word) as\
    \ $letter) {\n                                $count += strpos($word, strtolower($letter))\
    \ !== false ? 1 : 0;\n                            }\n                        \
    \    return $count === $n;\n                        });\n}\n", "    if ($s ==\
    \ \"\") return [];\n    $counts = count_chars($s);\n    $ret = [];\n    foreach\
    \ ($counts as $char => $num) {\n        if ($num == $n) $ret[] = substr($s, 0,\
    \ $char);\n    }\n    return $ret;\n}\n", "  $list = [];\n  if ($s == '') return\
    \ $list;\n  \n  array_shift($s);\n  foreach($s as $value){\n    if($value == '\
    \ ') array_shift($s);\n    if(strpos($value, ' ') > 0) $list[] = wordwrap($value,\
    \ ' ', 100);\n  }\n  \n  return $list;\n}\n", "    $words = explode(' ', $s);\n\
    \    $result = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I',\
    \ 'O', 'U', 'Y'];\n    foreach ($words as $word) {\n        $word_count = count(explode('\
    \ ', $word));\n        if ($word_count <= $n) {\n            $result[] = $word;\n\
    \        }\n        foreach ($vowels as $v1) {\n            foreach ($vowels as\
    \ $v2) {\n                if ($v1 != $v2 && !strpos($word, $v1 . $v2)) {\n   \
    \                 if ($word_count > $n) {\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return $result;\n}\n$result = select_words(\"Mary had a little lamb\", 4);\n\
    $result = select_words(\"Mary had a little lamb\", 3);\n$result = select_words(\"\
    simple white space\", 2);\n$result = select_words(\"Hello world\", 4);\n$result\
    \ = select_words(\"Uncle sam\", 3);\nprint_r($result);", "   $select_words = [];\n\
    \   $s = strtolower($s);\n   $length = strlen($s);\n   for ($i = 0; $i < $length;\
    \ $i++) {\n      if ($s[i] !== 'a' && $s[i] !== 'e' && $s[i] !== 'i' && $s[i]\
    \ !== 'o' && $s[i] !== 'u') {\n         // echo $s[i];\n         if ($i < $length\
    \ - 1) {\n            if ($s[i] == $s[i + 1]) {\n               if ($i < $length\
    \ - 1 && $s[i] != ' ') {\n                  $select_words[] = $s;\n          \
    \        $select_words[] = $s[i];\n               }\n               $i++;\n  \
    \             continue;\n            }\n         }\n         break;\n      }\n\
    \      $select_words[] = $s;\n      $select_words[] = $s[i];\n   }\n   return\
    \ $select_words;\n}\n", "    $words = [];\n    if (empty($s)) {\n        return\
    \ $words;\n    }\n    $s = preg_replace(\"/[^a-zA-Z ]/\",\"\",$s);\n    $length\
    \ = strlen($s);\n    for ($i=0; $i<$length; $i++) {\n        if (strpos(strtolower($s[$i]),\
    \ substr(\"aeiouybcdfghjklmnpqrstvwxyz\", $i, 1)) !== false) {\n            $words[]\
    \ = strtolower($s[$i]);\n        }\n    }\n    $count = count($words);\n    if\
    \ ($n == $count) {\n        return $words;\n    }\n    return [];\n}\n\n$str =\
    \ <<<STR\nThis is a long string that I am typing all day and will make your day\
    \ harder when\nI am asleep because of the nature of my nature.\nSTR;\n\necho \"\
    $str\\n\";\n\n$result = select_words($str, 3);\n\necho \"RESULT: \";\nprint_r($result);\n\
    </code>\nOUTPUT\n<code>\nThis is a long string that I am typing all day and will\
    \ make your day harder when\nI am asleep because of the nature of my nature.\n\
    RESULT: Array ( [0] => string ) \n</code>\n<|/ a |>\n<| c |>\nThis code does indeed\
    \ work, but it has some very inefficiencies, particularly since it's using regex,\
    \ and is comparatively slower than a solution using string functions.  It's much\
    \ better suited for teaching and learning purposes, however.\n<|/ c |>\n<| c |>\n\
    Yes, I agree. I also liked this approach. Just trying to help.\n<|/ c |>\n<| c\
    \ |>\nVery good solution, I think you forgot to change strpos to stristr. Your\
    \ code is working now.\n<|/ c |>\n<| c |>\nYes, you're right. I corrected it by\
    \ switching to `stristr` function. Thanks for noticing that!\n<|/ c |>\n<| a tags=php,string\
    \ |>\nThe shortest method I can think of is this:\n<code>\n<?php", "    if (!empty($s))\n\
    \    {\n        $words = explode(' ', $s);\n        $new_words = [];\n       \
    \ \n        foreach ($words as $word)\n        {\n            if (!empty($word))\n\
    \            {\n                $new_word = explode(' ', $word);\n           \
    \     if (count($new_word) == $n)\n                {\n                    $new_words[]\
    \ = $new_word;\n                }\n            }\n        }\n        \n      \
    \  return $new_words;\n    }\n    \n    return [];\n}\n", "  // We initialize\
    \ an array to store the words.\n  $words = array();\n  // We iterate through the\
    \ string and check if each word is equal to the given n or not.\n  foreach (str_word_count($s,\
    \ 1) as $word) {\n    // If $word equals the given n we append it to our array.\n\
    \    if (count(str_split($word, $n)) === $n) {\n      array_push($words, $word);\n\
    \    }\n  }\n  // We return the array.\n  return $words;\n}\n", "    if (strlen($s)\
    \ == 0) {\n        return [];\n    }\n\n    $words = explode(' ', $s);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (substr_count($word, 'consonant')\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n\n    return $result;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>", "  // Write your\
    \ code here\n  $result = array();\n  foreach (explode(' ',$s) as $word) {\n  \
    \  if (count(str_split($word,1)) === $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI did this but it's giving\
    \ me this error..\n<|/ c |>\n<| c |>\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in\n<|/ c |>\n<| c |>\n$string = 'Uncle\
    \ Sam I am';\n    \n    print_r(select_words($string, 3));\n<|/ c |>\n<| c |>\n\
    `select_words` will work if you change `$words` to `$wordsArray`. What is it that\
    \ you want it to do?\n<|/ c |>\n<| c |>\ni want the output to be the words from\
    \ the string that contain only 3 letters consonants\n<|/ c |>\n<| a |>\nFor this\
    \ you can use preg_match_all() and the following regex:\n<code>", "    return\
    \ [];\n}\n", "   $letters = count_letters($s);\n   if ($letters == 0) {\n    \
    \  return array();\n   } elseif ($letters == 1) {\n      return array($s);\n \
    \  } else {\n      $counter = count_consonants($s);\n      if ($counter == $n)\
    \ {\n         return array();\n      } else if ($counter > $n) {\n         return\
    \ array();\n      } else if ($counter <= 0) {\n         return array();\n    \
    \  }\n      $letters_array = split_string($s);\n      $consonant_array = split_consonants($s);\n\
    \      $result_array = array();\n      foreach ($letters_array as $letter) {\n\
    \         foreach ($consonant_array as $consonant) {\n            if (substr_count($consonant,\
    \ $letter) == 1) {\n               $result_array[] = $letter;\n            }\n\
    \         }\n      }\n      return $result_array;\n   }\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a tags=php |>\nThe easiest way to do this is to create a regex pattern\
    \ that matches a word and consonants, and then return all the matches.  \n<code>",
  "  $result = [];\n  for($i=0; $i<strlen($s); $i++){\n    if(preg_match('~([a-zA-Z\
    \ ])~', $s[$i])){\n      $result[] = $s[$i];\n    }\n  }\n  return $result;\n\
    }\n\n$input = 'Mary had a little lamb';\nprint_r(select_words($input, 4));\n</code>\n\
    <|/ a tags=string,php,function,count |>\n<| a dscore=0 |>\n<code>\n<?php\n$str\
    \ = \"Mary had a little lamb\";\n$n = 2;\npreg_match_all('/\\b[a-zA-Z]+\\b/',\
    \ $str, $matches);\n$result = array();\nforeach ($matches[0] as $match) {\n  \
    \  if (strlen($match) == $n) {\n        $result[] = $match;\n    }\n}\nvar_dump($result);\n\
    </code>\nOutput is (with $n=4):\n<code>\narray(1) {\n  [0]=>\n  string(5) \"little\"\
    \n}\n</code>\n<|/ a tags=string,php,function,count |>\n<| c |>\nThis is not the\
    \ best solution. Take a look at my answer - it shows how you can do this without\
    \ regular expressions.\n<|/ c |>\n<| c |>\n: I agree that this answer is better.\
    \ But since you downvoted it, I decided to post this answer, as I think it's better,\
    \ with less overhead.\n<|/ c |>\n<| c |>\nThat's a good answer, and it works,\
    \ but it's less efficient than the others. It also has additional overhead because\
    \ of the use of `preg_match_all`, but since most strings are going to be short,\
    \ this cost is negligible. Yet another reason to prefer regular expressions over\
    \ this solution.\n<|/ c |>\n<| c |>\n: Yes, regular expressions could be better\
    \ than `preg_match` in this case. But the main problem with using `preg_match`\
    \ is that it has some limitations, such as it can't handle words that are more\
    \ than 8 letters long. So it can't be used as a general purpose solution, and\
    \ I suggested an alternative. I don't think the other answer is less efficient,\
    \ but I agree, that it's less readable. I wanted to post the solution with the\
    \ least amount of code changes, and this is the simplest way to do it. I don't\
    \ know if there are more efficient solutions.\n<|/ c |>\n<| c |>\nYes, I understand.\
    \ But the main problem with this approach is that you cannot have strings like\
    \ `'Helloooooooooooooooooooooooooooooooooooo'`. So, in this case, you would end\
    \ up with unneeded words.\n<|/ ", "    // Insert your code here\n}\n</cell>\n\
    <text>\nProblem 5 - Easy String Compression\nGiven a string, you should be able\
    \ to compress it into a form that is as short as possible, while still making\
    \ \"good\" English sentences. A simple string compression is any way that you\
    \ can reduce the length of your original string while maintaining a \"good English\"\
    \ sentence for that original string in all cases.\n\nExamples:\n\"this is a great\
    \ sentence\" becomes \"this-is-great-sentence\"\n\"I like to eat bananas\" becomes\
    \ \"i-like-to-eat-ba-nanas\"\n\"the lazy fox\" becomes \"th-za-fox\"\n\n\n</text>\n\
    <cell>", "    \n}", "    return [];\n}", "  $words = explode(\" \", $s);\n  foreach\
    \ ($words as $word) {\n    if (strlen($word) == 0) continue;\n    if (strlen($word)\
    \ <= $n) $words[] = $word;\n    else break;\n  }\n  return $words;\n}\n</code>\n\
    Step 5\nNow let's do our work of refactoring the select_words function in a way\
    \ that actually does something useful.\nRemember that our select_words function\
    \ currently returns an array of words, not a string! The new function should also\
    \ return a string consisting of the words in an ordered sequence. Let's call this\
    \ new function select_words_ordered. We can define select_words_ordered in terms\
    \ of select_words:\n<code>", "\t$words = explode(\" \", $s);\n\treturn array_filter(\n\
    \t\t$words,\n\t\tfunction ($x) use ($n) { return count_consonants($x, $n) ===\
    \ $n; }\n\t);\n}", "    $words = array();\n    foreach(str_split($s) as $w){\n\
    \        $w_len = strlen($w);\n        for($i = 0; $i < $w_len; $i++){\n     \
    \       $c = substr($w, $i, 1);\n            if(!($c == 'a' || $c == 'e' || $c\
    \ == 'i' || $c == 'o' || $c == 'u')){\n                if($i >= $n || $c != 'n'\
    \ ){\n                    $words[] = $w;\n                    break;\n       \
    \         }\n            }\n        }\n    }\n    if(!$words) {\n        $words\
    \ = array();\n    }\n    return $words;\n}\n", "  // Your code here\n}", "   \
    \ // Your code here\n    if (strlen($s) == 0) {\n        return [];\n    }\n\n\
    \    $letters = [];\n    $words = [];\n    $firstChar = substr($s, 0,1);\n   \
    \ foreach (str_split($s) as $char) {\n        if (preg_match('/[b-z]/i',$char))\
    \ {\n            $letters[$firstChar][] = $char;\n            if ($n == count($letters[$firstChar]))\
    \ {\n                $words[] = $letters[$firstChar];\n            }\n       \
    \ }\n    }\n\n    return $words;\n}", "    // Your code here\n}", "    \n}\n",
  "    $words = array();\n    $s = preg_replace(\"/[^a-zA-Z ]/\", '', $s);\n    for($i=0;\
    \ $i<strlen($s); $i++){\n        $letter = $s[$i];\n        if($letter == ' '){\n\
    \            $words[] = '';\n        }else{\n            for($j=0; $j<strlen($s);\
    \ $j++){\n                \n                if($j+$i > strlen($s)){\n        \
    \            $words[] = $letter;\n                }else{\n                   \
    \ if($letter == $s[$j]){\n                        $words[] = $letter;\n      \
    \                  break;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return $words;\n}\n</code>\n<|/ q tags=php,algorithm\
    \ |>\n<| c |>\nWhat have you tried so far? And where exactly are you stuck?\n\
    <|/ c |>\n<| c |>\nI have the function done, but I am stuck with the \"correct\"\
    \ way to solve this problem. My idea was to put all the letters into a set and\
    \ then loop through the string and add each letter to the set until it is full.\
    \ But that doesn't seem to be the best way. I don't know how to deal with the\
    \ last letter in the string which is different then all the others\n<|/ c |>\n\
    <| c |>\nYes, your function does not handle cases when `n > strlen(s)` correctly.\
    \ I've tried my best to provide a working solution below.\n<|/ c |>\n<| a dscore=3\
    \ |>\nYou might want to use a different data structure for this problem. You need\
    \ an array where you store all the words you've collected. \n<code>\n$words =\
    \ array();\n</code>\nThis way you can easily append new words to the array as\
    \ you find them. This also means that you can easily check if a word exists in\
    \ the array and also iterate through it.\nAs for the last letter you need to check\
    \ if it's equal to the last letter of the last word you've found in the array.\
    \ If that is the case you can ignore it and don't add the new word into the array.\n\
    <code>\n$lastWord = \"\";\n\n$s = preg_replace(\"/[^a-zA-Z ]/\", '', $s);\nfor($i=0;\
    \ $i<strlen($s); $i++){\n    $letter = $s[$i];\n    if($letter == ' ') {\n   \
    \     $words[] = '';\n    }else{\n        // If we're at the end of the word add\
    \ it to the array and reset\n        if ($i == strlen($s)-1){\n            $words[]\
    \ = $letter;\n            $lastWord = $letter;\n        }else{\n            //\
    \ We're in the middle of the word, add it\n            if($letter == $s[$i-1]\
    \ && $letter == ", "\t\n}\n", "\t$arr = array();\n\tfor ($i = 0; $i <= strlen($s);\
    \ $i++) {\n\t\t$j = 0;\n\t\twhile (strpos($s, substr($s, 0, $i), $j) === $j &&\
    \ $j < strlen($s)) {\n\t\t\t$arr[] = substr($s, 0, $i);\n\t\t\t$j++;\n\t\t}\n\t\
    }\n\treturn $arr;\n}\n", "  if (strlen($s) == 0) {\n    return array();\n  }\n\
    \n  $consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  $vowels =\
    \ \"aeiouAEIOU\";\n  $len = strlen($s);\n\n  foreach ($consonants as $key => $value)\
    \ {\n    if (strpos($s, $value) !== false) {\n      $consonants = $consonants[$key\
    \ + 1];\n      break;\n    }\n  }\n\n  if ($n > $len) {\n    return array();\n\
    \  }\n\n  $arr = array();\n  while ($n > 0) {\n    if ($n > 0) {\n      $arr =\
    \ array_slice(str_split($s), 0, $n);\n    }\n    $word = \"\";\n    for ($i =\
    \ 0; $i < $len; $i++) {\n      $word = substr($word, $consonants, 1);\n      $word\
    \ = str_replace($vowels, \"\", $word);\n      if (strlen($word) == 0) {\n    \
    \    break;\n      }\n    }\n    $arr[] = $word;\n    $n = $len - $i;\n  }\n \
    \ return $arr;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php |>\nThis question\
    \ was asked many years ago but i just wanted to share my solution based on answer\
    \ and modified a little.\n<code>\n<?php\n", '}', "    return [];\n}\n", "    if\
    \ (empty($s)) {\n        return array();\n    }\n    \n    $words = explode(\"\
    \ \", $s);\n    $words = array_filter($words, \"is_string\");\n    \n    if (count($words)\
    \ < $n) {\n        return array();\n    }\n    \n    $count = 0;\n    foreach\
    \ ($words as $word) {\n        $count += count(preg_split(\"/[aeiouyAEIOUY]/\"\
    , $word));\n        if ($count == $n) {\n            $ret = array();\n       \
    \     foreach (explode(\" \", $word) as $word) {\n                $ret[] = trim(preg_replace(\"\
    /[^a-z]/\", \"\", $word));\n            }\n            return $ret;\n        }\n\
    \    }\n    \n    return array();\n}\n$select_words = select_words(\"Mary had\
    \ a little lamb\", 4);\necho \"Number of words in Mary had a little lamb is \"\
    \ . count($select_words) . \" \\n\";\necho \"Words selected are \" . print_r($select_words,\
    \ true) . \"\\n\";", "  return [\n    \"\" => [],\n    \"a\" => [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"],\n    \"b\" => [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"],\n    \"c\" => [\"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"A\"],\n    \"d\" => [\"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"B\"],\n    \"e\" => [\"e\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"C\"],\n    \"f\" => [\"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"D\"],\n    \"g\" => [\"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\", \"E\"],\n    \"h\" => [\"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"F\"],\n    \"j\" => [\"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"G\"],\n    \"k\" => [\"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\", \"H\"],\n    \"l\" => [\"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"I\"],\n    \"m\" => [\"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"J\"],\n    \"n\" => [\"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\", \"K\"],\n    \"p\" => [\"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"L\"],\n    \"q\" => [\"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"M\"],\n    \"r\" => [\"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\", \"N\"],\n    \"s\" => ", '}', "\t\
    return []\n}\n", "    \n}\n", "  \n  $result = array();\n  \n  for($i=0; $i<strlen($s);\
    \ $i++) {\n    \n    if ($n % 2 == 0) {\n    \n      if (preg_match('/[aeiouy\xE4\
    \xF6\xFC\xC4\xD6\xDC]/', $s[$i])) {\n        $result[] = $s[$i];\n      }\n  \
    \  }\n    \n    $n = $n / 2;\n  }\n  \n  return $result;\n}", "    foreach (str_split($s)\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $results[] = $word;\n\
    \        }\n    }\n    return $results;\n}\n</code>\n<|/ a tags=arrays,php dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$input = 'This is a test string';\n$testString\
    \ = \"test\";\n$inputArray = explode(\" \",$input);\n\n$newArray = [];\nforeach\
    \ ($inputArray as $word)\n{\n    $result = [];\n    foreach (str_split($word)\
    \ as $char)\n    {\n        if (strlen($char) == $testString){\n            $result[]\
    \ = $char;\n        }\n    }\n    $newArray[] = $result;\n}\n$newArray = array_filter($newArray);\n\
    \necho '<pre>';\nprint_r($newArray);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ would fail if the test string was longer than one character.\n<|/ c |>\n<| a\
    \ tags=arrays,php dscore=0 |>\n<code>\n$input = \"This is a test string\";\n$testString\
    \ = \"test\";\n$inputArray = explode(\" \",$input);\n\n$newArray = [];\nforeach\
    \ ($inputArray as $word)\n{\n    $result = [];\n    foreach (str_split($word)\
    \ as $char)\n    {\n        if (strlen($char) == $testString){\n            $result[]\
    \ = $char;\n        }\n    }\n    $newArray[] = $result;\n}\n$newArray = array_filter($newArray);\n\
    \necho '<pre>';\nprint_r($newArray);\n</code>\n<|/ a |>\n<| a dscore=0 tags=arrays,php\
    \ |>\nI have tried to solve it without using any loops. \n<code>\n<?php\n$input\
    \ = \"This is a test string\";\n$testString = \"test\";\n$inputArray = explode(\"\
    \ \",$input);\n\n$newArray = [];\nforeach ($inputArray as $word)\n{\n    $result\
    \ = [];\n    foreach (str_split($word) as $char)\n    {\n        if (strlen($char)\
    \ == $testString){\n            $result[] = $char;\n        }\n    }\n    $newArray[]\
    \ = $result;\n}\n$newArray = array_filter($newArray);\n\necho '<pre>';\nprint_r($newArray);\n\
    </code>\n<|/ a |>\n<| c |>\nPlease explain how this solves the problem without\
    \ using any loops.\n<|/ c |>\n<|", "    // Your code here\n}\n", "    $list =\
    \ [];\n    $i = 0;\n    foreach (explode(' ', $s) as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $list[] = $word;\n        }\n        $i += strlen($word);\n\
    \    }\n    return $list;\n}", "    $consonant_list = array(\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n    $consonant_list2 = array(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\", \"a\", \"e\", \"\
    i\", \"o\", \"u\");\n    $consonant_list3 = array(\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    );\n    $consonant_list4 = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"o\", \"u\", \"\
    i\");\n    $consonant_list5 = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"z\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"o\", \"u\"\
    , \"i\", \"l\");\n    $consonant_list6 = array(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"z\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"\
    o\", \"u\", \"i\", \"l\", \"u\");\n    $consonant_list7 = array(\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\", \"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\", \"o\", \"u\", \"i\", \"l\", \"u\", \"s\", \"s\");\n    $consonant_list8\
    \ = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\", \"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\", \"o\", \"u\", \"i\", \"l\", \"u\", \"s\"\
    , \"s\", \"h\");\n    $consonant_list9 = array(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"z\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"\
    o\", \"u\", \"i\", \"l\", \"u\", \"s\", \"s\", \"h\", \"a\");\n    $consonant_list10\
    \ = "]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
