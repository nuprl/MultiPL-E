name: HumanEval_4_mean_absolute_deviation
language: php
results:
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \  = array_sum($numbers) / count($numbers);\n    $square_sum = 0;\n    foreach\
    \ ($numbers as $number) {\n        $square_sum += pow($number - $mean, 2);\n \
    \   }\n    return sqrt($square_sum / (count($numbers)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5orsk1ix.php:24\n\
    Stack trace:\n#0 /tmp/tmp5orsk1ix.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5orsk1ix.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviation = array();\n  foreach\
    \ ($numbers as $val) {\n    $deviation[] = abs($val - $mean);\n  }\n  return array_sum($deviation)\
    \ / count($numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| a dscore=3 |>\nYou can\
    \ calculate this by hand quite easily:\n<code>\ndef mad(x):\n    mean = sum(x)\
    \ / len(x)\n    return sum(abs(x - mean)) / (len(x) - 1)\n</code>\nThe len(x)\
    \ - 1 bit is because python counts starting from 0, so you need to subtract 1\
    \ from the length to get the number of samples.\n<|/ a tags=statistics,python\
    \ |>\n<| c |>\nShouldn't it be `len(x) + 1`?\n<|/ c |>\n<| c |>\nlen(x) = length\
    \ of x -- so it's actually len(x) - 1\n<|/ c |>\n<| c |>\nAhh, I see. Thank you\
    \ for the clarification. :)\n<|/ c |>\n<| a tags=statistics,python |>\nThe below\
    \ script will calculate the mean and std deviation for the data set:\n<code>\n\
    import math\n\ndef mean_std(x):\n    sum = 0\n    count = 0\n    for i in x:\n\
    \        sum += i\n        count += 1\n\n    mean = sum / count\n    sum2 = 0\n\
    \    sum_squares = 0\n    for i in x:\n        sum2 += (i-mean)**2\n        sum_squares\
    \ += (i-mean)**4\n\n    std = math.sqrt(sum_squares / count)\n    return mean,\
    \ std\n\na = [1,2,3,4]\nmean, std = mean_std(a)\nprint(mean,std)\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis script is not correct for calculating the std deviation.\
    \ The correct formula is (1/n) * sqrt(sum((x - mean)**2)/n)\n<|/ c |>\n<| a tags=statistics,python\
    \ dscore=3 |>\nHere is the Python implementation using numpy and statsmodels:\n\
    <code>\nimport numpy as np\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\
    \ndef mean_abs_deviation(X):\n    \"\"\"\n    Return the mean absolute deviation\
    \ of a list of numbers, `X`.\n\n    Parameters\n    ----------\n    X : list of\
    \ number\n        Input data.\n\n    Returns\n    -------\n    float\n       \
    \ Mean absolute deviation.\n\n    \"\"\"\n    # calculate the mean of the data\n\
    \    mean = X.mean()\n    # calculate the deviation of the data\n    deviation\
    \ = np.std(X, ddof=1)\n    # calculate the variance inflation factor\n    V\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5vdo9k2n.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) < 2) {\n    return NULL;\n  }\n  return array_sum($numbers)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa339grqh.php:20\n\
    Stack trace:\n#0 /tmp/tmpa339grqh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpa339grqh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate the mean:\n  $mean  = array_sum($numbers) / count($numbers);\n  //\
    \ Calculate the differences between each value and the mean.\n  $diffs = array_map(function\
    \ ($number) { return $number - $mean; }, $numbers);\n  // Return the mean of the\
    \ absolute value of the differences:\n  return array_sum(array_map(function ($value)\
    \ { return abs($value); }, $diffs)) / count($diffs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5_2jvne.php:23\n\
    Stack trace:\n#0 /tmp/tmpd5_2jvne.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd5_2jvne.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviation = 0;\n  foreach ($numbers\
    \ as $n) {\n    $deviation += abs($n - $mean);\n  }\n  return $deviation / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $delta = array();\n  foreach ($numbers\
    \ as $n) {\n    $delta[] = $n - $mean;\n  }\n  return array_sum($delta) / count($delta);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxd3dqix.php:23\n\
    Stack trace:\n#0 /tmp/tmpzxd3dqix.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzxd3dqix.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_sum(array_map('abs',\
    \ $numbers)) / count($numbers)\n    - $mean;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lgkzdif.php:20\n\
    Stack trace:\n#0 /tmp/tmp2lgkzdif.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2lgkzdif.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ $numbers;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyb_wox8z.php:17\n\
    Stack trace:\n#0 /tmp/tmpyb_wox8z.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpyb_wox8z.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Return NaN if no numbers are passed\n    if (empty($numbers)) {\n        return\
    \ NaN;\n    }\n    // Count the number of elements to find the average\n    $count\
    \ = count($numbers);\n    // Sum all the values\n    $sum = 0;\n    // Take the\
    \ square root of number of elements to get average\n    $mean = sqrt($count);\n\
    \    foreach ($numbers as $number) {\n        $sum += pow($number - $mean, $2);\n\
    \    }\n    // Return average of sum / count\n    return ($sum / $count);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfz20svos.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ $n = count($numbers);\n  // $sum = 0;\n  // $mean = 0;\n  // for ($i = 0; $i\
    \ < $n; $i++) {\n  //   $sum += $numbers[$i];\n  // }\n  // $mean = $sum / $n;\n\
    \  // $mad = 0;\n  // $n = count($numbers);\n  // for ($i = 0; $i < $n; $i++)\
    \ {\n  //   $mad += abs($numbers[$i] - $mean);\n  // }\n  // return $mad / $n;\n\
    \  $avg = 0;\n  $n = count($numbers);\n  for ($i = 0; $i < $n; $i++) {\n    $avg\
    \ += ($numbers[$i] - $avg) / $n;\n  }\n  return $avg / $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9h2pgwh.php:36\n\
    Stack trace:\n#0 /tmp/tmpc9h2pgwh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpc9h2pgwh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!$numbers) return NULL;\n    $mean = array_sum($numbers) / count($numbers);\n\
    \    return abs($mean - array_sum($numbers) /\n            array_count_values($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmporxk2h1_.php on line 13\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmporxk2h1_.php on line 13\n\nFatal\
    \ error: Uncaught Error: Unsupported operand types in /tmp/tmporxk2h1_.php:13\n\
    Stack trace:\n#0 /tmp/tmporxk2h1_.php(17): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmporxk2h1_.php(21): candidate(Array)\n#2 /tmp/tmporxk2h1_.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmporxk2h1_.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float) array_reduce($numbers, function($sum, $value) {\n    return $sum + abs($value);\n\
    \  }) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpew6nha1p.php:20\n\
    Stack trace:\n#0 /tmp/tmpew6nha1p.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpew6nha1p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum(array_map(function\
    \ ($x) {\n            return pow($x, 2);\n        }, $numbers)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6c2fg2u.php:21\n\
    Stack trace:\n#0 /tmp/tmpl6c2fg2u.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpl6c2fg2u.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum(abs($numbers)) / count($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, bool given in /tmp/tmpk7xrshhm.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7xrshhm.php:17\n\
    Stack trace:\n#0 /tmp/tmpk7xrshhm.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpk7xrshhm.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_reduce(\n        $numbers,\n        function ($sum, $value) use ($numbers)\
    \ {\n            return $sum + abs($value - array_sum($numbers) / count($numbers));\n\
    \        }\n    ) / count($numbers);\n}\n\n/**\n * Calculates the median absolute\
    \ deviation of a set of numbers.\n * @link http://en.wikipedia.org/wiki/Median_absolute_deviation\n\
    \ * @link http://en.wikipedia.org/wiki/Mean_absolute_deviation\n * @param array\
    \ $numbers the set of numbers\n * @return float\n */\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array_map(\n    function($x)\
    \ { return abs($x - $mean); },\n    $numbers\n  );\n  return array_sum($diffs)\
    \ / count($diffs);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8axcbskv.php:22\n\
    Stack trace:\n#0 /tmp/tmp8axcbskv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8axcbskv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs(array_sum(array_map('abs',\
    \ $numbers)) / count($numbers)\n            - $mean);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58ggcjh7.php:19\n\
    Stack trace:\n#0 /tmp/tmp58ggcjh7.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp58ggcjh7.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum($numbers) /\n      array_reduce($numbers, function($sum, $number)\
    \ {\n        return $sum + abs($number);\n      }, 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprymvqhc5.php:21\n\
    Stack trace:\n#0 /tmp/tmprymvqhc5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprymvqhc5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $size = count($numbers);\n  $sum = 0;\n  for ($i = 0; $i < $size; ++$i) {\n\
    \    $delta = $numbers[$i] - $sum;\n    $sum += $delta;\n  }\n  return ($sum /\
    \ $size);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktls5_8m.php:25\n\
    Stack trace:\n#0 /tmp/tmpktls5_8m.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpktls5_8m.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_sum(abs($numbers)) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, bool given in /tmp/tmps4sgtix7.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4sgtix7.php:18\n\
    Stack trace:\n#0 /tmp/tmps4sgtix7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmps4sgtix7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float) array_sum(\n      array_map(function($value) { return abs($value - array_sum($numbers));\
    \ },\n              $numbers)\n  ) / count($numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,math,mysql dscore=2 |>\nThis code will calculate the mean\
    \ of all the values passed as arguments and return it as a float. \n<code>\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd4qesev8.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \     = 0;\n  $num_els = count($numbers);\n  for ($i = 0; $i < $num_els; $i++)\
    \ {\n    $sum += abs($numbers[$i] - $numbers[$i]);\n  }\n  return $sum / $num_els;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyze0iq2p.php:23\n\
    Stack trace:\n#0 /tmp/tmpyze0iq2p.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyze0iq2p.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs(array_sum(array_map('abs',\
    \ $numbers)) / count($numbers)\n    - $mean);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vsvu2c6.php:20\n\
    Stack trace:\n#0 /tmp/tmp1vsvu2c6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1vsvu2c6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ sqrt(array_sum(array_map(function($n) { return ($n - mean($numbers)); }\n  ,\
    \ $numbers)) / count($numbers));\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpwm_f2e3d.php:10\n\
    Stack trace:\n#0 [internal function]: {closure}(1)\n#1 /tmp/tmpwm_f2e3d.php(11):\
    \ array_map(Object(Closure), Array)\n#2 /tmp/tmpwm_f2e3d.php(14): mean_absolute_deviation(Array)\n\
    #3 /tmp/tmpwm_f2e3d.php(18): candidate(Array)\n#4 /tmp/tmpwm_f2e3d.php(23): test()\n\
    #5 {main}\n  thrown in /tmp/tmpwm_f2e3d.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $square_sum = 0;\n    foreach\
    \ ($numbers as $value) {\n        $square_sum += pow((($value - $mean) / $mean),\
    \ 2);\n    }\n    return sqrt($square_sum / count($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjh134zkn.php:23\n\
    Stack trace:\n#0 /tmp/tmpjh134zkn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjh134zkn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $number) {\n    $sum += pow(($number - $mean), 2);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgl_ws0k.php:23\n\
    Stack trace:\n#0 /tmp/tmpcgl_ws0k.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcgl_ws0k.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  return array_sum($numbers) /\n      count($numbers) -\n      array_sum(array_map(function($x,\
    \ $y) {\n        return ($x - $y) * ($x - $y);\n      }, $numbers, $numbers))\
    \ /\n      count($numbers);\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\nIf you want\
    \ a slick way to calculate the mean, median, mode, etc. of a given array you can\
    \ use Laravel Collections.\n<code>\n$data = [1, 2, 4, 6, 8, 10];\n$data_summary\
    \ = collect($data)->summarize(1);\n</code>\nThis will return a collection with\
    \ the data summarized with a count of how many items that group contains.\n<code>\n\
    array:2 [\u25BC\n  1 => 4\n  2 => 6\n]\n</code>\nTo get the median and mode of\
    \ a collection you can use the percentiles() method. Laravel 8.x Docs - Collections\
    \ - Methods - percentiles()\n<code>\n$data_summary->percentiles([0.5, 0.99])->toArray();\n\
    </code>\nResult:\n<code>\narray:2 [\u25BC\n  0.5 => 6\n  0.95 => 8\n]\n</code>\n\
    <|/ a tags=php,math dscore=2 |>\n<| a tags=php,math |>\nI assume you're looking\
    \ for a formula, not an algorithm.\nThe simple formula for a variance is sum((x-mean(x))^2)\
    \ / (n-1).\n<|/ a dscore=2 |>\n<| c |>\nThis isn't necessarily the mean\n<|/ c\
    \ |>\n<| a dscore=1 |>\nYou can use the following function :\n<code>\n$x = [ 1,\
    \ 2, 3, 4, 5, 6, 7 ];\n$mean = $arrMean($x);\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbqkvcvrv.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \    = array_sum($numbers) / count($numbers);\n  $deviation = 0;\n  foreach ($numbers\
    \ as $number) {\n    $deviation += abs($number - $mean);\n  }\n  return $deviation\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    if ($n < 2) {\n        return NULL;\n    }\n    $mean\
    \ = array_sum($numbers) / $n;\n    $sum = 0;\n    foreach ($numbers as $n) {\n\
    \        $sum += abs($n - $mean);\n    }\n    return $sum / $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = get_mean(array_slice($numbers, 0, count($numbers) / 2));\n  return abs(array_sum(array_map('abs',\
    \ $numbers)) - $mean);\n}\n\n/**\n * Returns the mean of an array ignoring nulls\n\
    \ */\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_mean() in\
    \ /tmp/tmp2c8ujbup.php:10\nStack trace:\n#0 /tmp/tmp2c8ujbup.php(18): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp2c8ujbup.php(22): candidate(Array)\n#2 /tmp/tmp2c8ujbup.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2c8ujbup.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum($numbers)\n         / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vetmrlx.php:19\n\
    Stack trace:\n#0 /tmp/tmp1vetmrlx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp1vetmrlx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_sum(abs($numbers -\
    \ $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpq84uqkxj.php:11\n\
    Stack trace:\n#0 /tmp/tmpq84uqkxj.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpq84uqkxj.php(19): candidate(Array)\n#2 /tmp/tmpq84uqkxj.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq84uqkxj.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tsort($numbers);\n\
    \n\tforeach ($numbers as $n => $val) {\n\t\t$dev_sum = abs($val - $numbers[$n\
    \ / 2]);\n\t\t$count = $dev_sum;\n\t\tfor ($i = $n - 1; $i >= 0; $i--) {\n\t\t\
    \t$dev_sum -= $numbers[$i];\n\t\t\t$count--;\n\t\t}\n\t\tif ($count == 0) {\n\t\
    \t\treturn $dev_sum / $n;\n\t\t}\n\t}\n}\nfunction candidate(...$args) {\n   \
    \ return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpm_uc01a3.php on line 20\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpm_uc01a3.php:29\nStack trace:\n\
    #0 /tmp/tmpm_uc01a3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm_uc01a3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum(array_map(function($num)\
    \ { return abs($num - $mean); }, $numbers)) / count($numbers));\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46ja9xpc.php:18\n\
    Stack trace:\n#0 /tmp/tmp46ja9xpc.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp46ja9xpc.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $n) {\n    $squared_diff += pow($n - $mean, 2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0jaybkw.php:24\n\
    Stack trace:\n#0 /tmp/tmpr0jaybkw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpr0jaybkw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum($numbers) /\n    array_sum(array_map(function($number) { return abs($number);\
    \ }, $numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1hm7zlw.php:19\n\
    Stack trace:\n#0 /tmp/tmpw1hm7zlw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpw1hm7zlw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) /count($numbers);\n  return abs(array_sum(array_diff($numbers,\
    \ $mean)) / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_diff(): Expected parameter 2 to be an array, float given\
    \ in /tmp/tmptirp0c0q.php on line 11\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmptirp0c0q.php on line 11\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmptirp0c0q.php:19\nStack trace:\n\
    #0 /tmp/tmptirp0c0q.php(24): test()\n#1 {main}\n  thrown in /tmp/tmptirp0c0q.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ For each number in the dataset, find the difference to it's mean.\n  $deviations\
    \ = array();\n  foreach ($numbers as $number => $deviation) {\n    $deviations[$number]\
    \ = $deviation;\n  }\n  array_walk($deviations, function($deviation) use ($numbers)\
    \ {\n    array_walk($numbers, function($number) use (&$deviation) {\n      $deviation\
    \ += $number - $numbers[$number];\n    });\n  });\n\n  // Return the mean of the\
    \ deviations.\n  return array_sum($deviations) / count($numbers);\n}\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb81cew8c.php:29\n\
    Stack trace:\n#0 /tmp/tmpb81cew8c.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb81cew8c.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if(!is_array($numbers))\n\
    \    $numbers = array($numbers);\n\n  return array_reduce($numbers, function($acc,\
    \ $n) {\n    return $acc + abs($n - $acc);\n  }, 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dv7zu6z.php:23\n\
    Stack trace:\n#0 /tmp/tmp4dv7zu6z.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4dv7zu6z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = $sum = 0; // sum of all elements\n  for ($i =\
    \ 0; $i < $n; ++$i) {\n    $sum = $sum + $numbers[$i];\n  }\n  return $sum / $n;\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa660nyl.php:22\n\
    Stack trace:\n#0 /tmp/tmpsa660nyl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpsa660nyl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) /count($numbers);\n  $squared_mean = array_sum(array_map(function($val)\
    \ { return pow($val-$mean,2); }, $numbers)) / count($numbers);\n  return sqrt($squared_mean);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjk2yt3wn.php:20\n\
    Stack trace:\n#0 /tmp/tmpjk2yt3wn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjk2yt3wn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs(array_sum($numbers)\
    \ - (array_sum($numbers) / count($numbers))) / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03alhmi2.php:19\n\
    Stack trace:\n#0 /tmp/tmp03alhmi2.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp03alhmi2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $diffs = array_map(function ($x)\
    \ {\n        return $x - $mean;\n    }, $numbers);\n    return abs(array_sum($diffs));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5h6ngyq0.php:22\n\
    Stack trace:\n#0 /tmp/tmp5h6ngyq0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5h6ngyq0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp8a43_mua.php:11\n\
    Stack trace:\n#0 /tmp/tmp8a43_mua.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp8a43_mua.php(19): candidate(Array)\n#2 /tmp/tmp8a43_mua.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8a43_mua.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers)/count($numbers);\n  $differences = array_map(function\
    \ ($number) { return $number - $mean; }, $numbers);\n  $mad = array_sum($differences)\
    \ / count($numbers);\n  return $mad;\n}\n\nfunction candidate(...$args) {\n  \
    \  return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4emo5r8o.php:21\n\
    Stack trace:\n#0 /tmp/tmp4emo5r8o.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4emo5r8o.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \   = 0;\n  $dev    = 0;\n  $count  = count($numbers);\n  for ($i = 0; $i < $count;\
    \ $i++) {\n    $mean += $numbers[$i];\n  }\n  $mean = round($mean / $count);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    $dev += ($numbers[$i] - $mean) * ($numbers[$i]\
    \ - $mean);\n  }\n  $dev = round($dev / $count);\n  return $dev;\n}\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpey8o0d70.php:28\n\
    Stack trace:\n#0 /tmp/tmpey8o0d70.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpey8o0d70.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) < 2) {\n    return 0.0;\n  }\n\n  return array_sum($numbers)\
    \ / count($numbers) - array_sum(array_map(function ($x) { return abs($x); }, $numbers))\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1o5z22c7.php:22\n\
    Stack trace:\n#0 /tmp/tmp1o5z22c7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1o5z22c7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $variance = 0.0;\n  foreach ($numbers\
    \ as $n) {\n    $variance += pow($n - $mean,2);\n  }\n  return sqrt($variance\
    \ / (count($numbers) - 1));\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nI think you\
    \ need to add a `sqrt()` before `count()` since some of your numbers will be negative...\n\
    <|/ c |>\n<| c |>\nThat would mean the numbers are not integers\n<|/ c |>\n<|\
    \ c |>\nNo, thats what I'm saying. The numbers are not integers and therefore\
    \ the mean absolute deviation is wrong. For example, try `[1.0, 2.0, 3.0, 4.0]`\
    \ instead of `[1.0, 2.0, 3.0, 4.5]`\n<|/ c |>\n<| c |>\nAh. Right. Forgot about\
    \ the negative numbers.\n<|/ c |>\n<| c |>\nI changed my answer to use `sqrt()`\
    \ to remove the negative numbers.\n<|/ c |>\n<| a |>\nHere's a generic way to\
    \ calculate it (using PHP's built-in functions):\n<code>\n<?php\n$data = [\n \
    \ 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,\n  73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,\n\
    \  157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,\n  239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,\n\
    \  331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,\n  421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,\n\
    \  509,521,523,541,547,553,559,563,569,571,577,587,593,599,613,\n  617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,\n\
    \  719,727,733,739,743,751,757,761,769,773,787\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm23rr5uc.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $diff = $numbers - $mean;\n  \
    \  $mad = array_sum($diff * $diff) / count($diff);\n    return $mad;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmphl1ydstr.php:11\n\
    Stack trace:\n#0 /tmp/tmphl1ydstr.php(17): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmphl1ydstr.php(21): candidate(Array)\n#2 /tmp/tmphl1ydstr.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmphl1ydstr.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_sum($numbers) / count($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5s4hlpyq.php:18\n\
    Stack trace:\n#0 /tmp/tmp5s4hlpyq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5s4hlpyq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_map(function ($number)\
    \ use ($mean) {\n        return abs($number - $mean);\n    }, $numbers);\n}\n\n\
    $num_array = [1, 2, 3, 4, 5];\n$mad = mean_absolute_deviation($num_array);\n\n\
    var_dump($mad);\n</code>\n<|/ a |>\n<| c |>\nIn what language is `return array_map(function\
    \ ($number) use ($mean) {` ?\n<|/ c |>\n<| a tags=math,statistics |>\nThe formula\
    \ is:\n<code>\nmean(X) = sum (x - x_mean)^2\n</code>\nor\n<code>\nmean(X) = sum\
    \ (x_i - x_mean)^2\n</code>\nwhere x_i is the i-th element of X and x_mean is\
    \ the mean of X.\nSo you need to find the x_mean, for which you should use the\
    \ formulas you found for standard deviation. \nNote that this is a very easy formula\
    \ if you have a list of numbers. If you have only one number, there is no need\
    \ to calculate the mean at all, since the standard deviation is the same as the\
    \ mean.\n<|/ a dscore=5 |>\n<| c |>\nI see this formula is different than the\
    \ one presented by [here](https://stackoverflow.com/questions/1303872/standard-deviation-in-java)\
    \ and [here](https://stackoverflow.com/questions/274953/how-do-i-calculate-standard-deviation)\n\
    <|/ c |>\n<| c |>\nThis formula is correct for computing standard deviation from\
    \ a list. In my case I wanted to calculate an empirical coefficient of variation\
    \ from a normal distribution I estimated with Monte Carlo simulations from the\
    \ same population. [This link](https://www.khanacademy.org/math/statistics-probability/monte-carlo-estimation/)\
    \ explains how to compute these estimates from a population using Monte-Carlo\
    \ methods. As you can see, the formula from Khana is very similar to the one presented\
    \ here.\n<|/ c |>\n<| c |>\nThe formula presented here should be correct for computing\
    \ standard deviation from a population. As stated in the comments above, the formula\
    \ from Khana is incorrect for computing standard deviation from a list of numbers,\
    \ where this method should be used.\n<|/ c |>\n<| c |>\nThe formula presented\
    \ here is correct for computing standard deviation from a population. As stated\
    \ in the comments above, the formula from Khana is incorrect for computing standard\
    \ deviation from a list of numbers, where this method should be used.\n<|/ c |>\n\
    <| c |>\nThe formula presented here is correct for computing standard deviation\
    \ from a population. As stated in the comment\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi57xuprx.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $variance = 0;\n  foreach ($numbers\
    \ as $n) {\n    $variance += pow($n - $mean,2);\n  }\n  return sqrt($variance);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvd3ue32s.php:23\n\
    Stack trace:\n#0 /tmp/tmpvd3ue32s.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvd3ue32s.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = $numbers[0];\n    $sum = 0;\n    $n = 0;\n    foreach ($numbers as $number)\
    \ {\n        $sum += pow((($number - $mean)), 2);\n        $n++;\n    }\n    return\
    \ $sum / $n;\n}\n$mad = mean_absolute_deviation($numbers);\necho \"MAD of $numbers\
    \ is $mad \\n\";\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpbpud5bsv.php\
    \ on line 13\n\nWarning: Division by zero in /tmp/tmpbpud5bsv.php on line 17\n\
    MAD of  is NAN \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpud5bsv.php:27\n\
    Stack trace:\n#0 /tmp/tmpbpud5bsv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbpud5bsv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers)) {\n    $numbers = array($numbers);\n  }\n  $count = count($numbers);\n\
    \  if ($count === 0) {\n    throw new InvalidArgumentException(\"Please provide\
    \ at least one number\");\n  }\n  if ($count === 1) {\n    return abs($numbers[0]\
    \ - array_sum($numbers) / $count);\n  }\n\n  $mean = $numbers[0];\n  $sum = 0;\n\
    \  for ($i = 1; $i < $count; $i++) {\n    $sum += abs($numbers[$i] - $mean);\n\
    \    $mean += $numbers[$i];\n  }\n  return $sum / $count;\n}\n</code>\n<|/ a |>\n\
    <| a |>\nI like and use both approaches. I think the best way is to do it from\
    \ scratch:\n<code>\n/**\n * Mean Absolute Deviation - Report on mean absolute\
    \ deviation around the mean.\n * \n * array   $numbers the list of input numbers.\n\
    \ * string $decimals the number of decimals.\n * string $separator the separator\
    \ to use when separating the values.\n * int|float the return value.\n * \n *\
    \ http://en.wikipedia.org/wiki/Mean_absolute_error#Mean_absolute_difference_of_error\n\
    \ */\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyqc0actz.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $diff = 0;\n  $n    = count($numbers);\n  foreach ($numbers as $number) {\n\
    \    $diff += abs($number - $numbers[$n-1]);\n    $n--;\n  }\n  return $diff /\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp9ohhm885.php on line 17\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp9ohhm885.php:25\nStack trace:\n\
    #0 /tmp/tmp9ohhm885.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9ohhm885.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float) array_reduce($numbers, function($sum, $number) { return $sum + abs($number);\
    \ }, 0) / count($numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n\
    The function you are looking for is called stdev().  It computes the standard\
    \ deviation from the list of values.  It takes a second parameter that is the\
    \ value to calculate the standard deviation from.\n<|/ a tags=math,php,function,standard-deviation,standard-deviation\
    \ |>\n<| c |>\nstdev is usually the root of (x-mean)^2 http://en.wikipedia.org/wiki/Standard_deviation\n\
    <|/ c |>\n<| a dscore=5 |>\nThis code will calculate the standard deviation of\
    \ a list of numbers in PHP without the need for a for loop.\n<code>\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv9zllgip.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = 0;\n  $num_elements = count($numbers);\n  foreach ($numbers as $number)\n\
    \    $mean += $number;\n  return ($num_elements > 0) ? $mean / $num_elements :\
    \ 0;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfw7bptei.php:22\n\
    Stack trace:\n#0 /tmp/tmpfw7bptei.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfw7bptei.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp9i9hywpu.php:11\n\
    Stack trace:\n#0 /tmp/tmp9i9hywpu.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp9i9hywpu.php(19): candidate(Array)\n#2 /tmp/tmp9i9hywpu.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9i9hywpu.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ (float) array_reduce($numbers, function($sum, $number) {\n        return $sum\
    \ + abs($number);\n    }, 0) / count($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qtdz9ax.php:19\n\
    Stack trace:\n#0 /tmp/tmp3qtdz9ax.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3qtdz9ax.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $center = array_pop($numbers);\n  return abs(array_reduce($numbers, function\
    \ ($sum, $x) {\n    return $sum + ($x - $center) * ($x - $center);\n  }, 0)) /\
    \ count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33p07mhb.php:22\n\
    Stack trace:\n#0 /tmp/tmp33p07mhb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp33p07mhb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \   = mean($numbers);\n  $deviations = $numbers - $mean;\n  return std($deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpeih4idt8.php:10\n\
    Stack trace:\n#0 /tmp/tmpeih4idt8.php(16): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpeih4idt8.php(20): candidate(Array)\n#2 /tmp/tmpeih4idt8.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeih4idt8.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $dev = 0;\n    foreach ($numbers\
    \ as $number)\n        $dev += pow($number - $mean, $2);\n    return $dev / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvpzxjb1s.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_map(function ($x) {\
    \ return abs($x - $mean); }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1b6m24n.php:19\n\
    Stack trace:\n#0 /tmp/tmpf1b6m24n.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpf1b6m24n.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = $numbers - $mean;\n  $mads\
    \ = array();\n  foreach ($diffs as $diff) {\n    $mads[] = $diff*$diff;\n  }\n\
    \  return array_sum($mads) / count($mads);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp60933i4f.php:11\n\
    Stack trace:\n#0 /tmp/tmp60933i4f.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp60933i4f.php(24): candidate(Array)\n#2 /tmp/tmp60933i4f.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp60933i4f.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $average\
    \ = array_sum($numbers) / count($numbers);\n    $variance = 0;\n    $square =\
    \ 0;\n    foreach ($numbers as $n) {\n        $variance += pow($n - $average,\
    \ 2);\n        $square += $n - $average;\n    }\n    return ($variance / $square);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmptulrjq6z.php on line 17\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmptulrjq6z.php:25\nStack trace:\n\
    #0 /tmp/tmptulrjq6z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptulrjq6z.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_deviations = array_map(function($x)\
    \ {\n    return $x - $mean;\n  }, $numbers);\n  return array_sum($squared_deviations)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfju07u3w.php:21\n\
    Stack trace:\n#0 /tmp/tmpfju07u3w.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfju07u3w.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs(array_sum($numbers_minus($numbers,\
    \ $mean)) / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpqoji1iht.php:11\n\
    Stack trace:\n#0 /tmp/tmpqoji1iht.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpqoji1iht.php(19): candidate(Array)\n#2 /tmp/tmpqoji1iht.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqoji1iht.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ math_mean(array_map(\n    function ($x) {\n      return pow($x - array_sum($numbers),\
    \ 2);\n    },\n    $numbers));\n}\n</code>\nThe function above is designed to\
    \ operate on a list of numbers, which is then passed to an array_map function\
    \ which applies a function that calculates the MAD based on the formula in the\
    \ documentation. In the case of your example, the numbers are the output from\
    \ your code. The formula calculates the deviation between the current element\
    \ and the sum of the numbers. That gives an MAD value of 1, for the first element,\
    \ that makes sense given the formula is correct. Hence the mean of the result\
    \ should be approximately 1.0.\nTo better understand how the function works, take\
    \ a look at the following example:\n<code>\n$numbers = array(\n  array(\n    'a'\
    \ => 1,\n    'b' => 2,\n    'c' => 3\n  ),\n  array(\n    'a' => 2,\n    'b' =>\
    \ 4,\n    'c' => 6\n  ),\n  array(\n    'a' => 3,\n    'b' => 5,\n    'c' => 7\n\
    \  )\n);\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6ymo9jcb.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviation = 0;\n  foreach ($numbers\
    \ as $number) {\n    $deviation += abs($number - $mean);\n  }\n  return $deviation\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mad\
    \ = 0.0;\n  $count = count($numbers);\n  if ($count) {\n    foreach ($numbers\
    \ as $number) {\n      $mad = $mado + abs($number - $mean);\n    }\n    return\
    \ $mado/$count;\n  }\n  return 0.0;\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9nodheim.php:25\n\
    Stack trace:\n#0 /tmp/tmp9nodheim.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9nodheim.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $number) {\n        $sum += pow($number - $mean,2);\n    }\n    return sqrt($sum\
    \ / count($numbers));\n}\n</code>\n<|/ a dscore=5 tags=php,statistics,math |>\n\
    <| c |>\nYour mean absolute deviation function has an error. `array_sum($numbers)`\
    \ should be `array_sum($numbers, 0.0)`.\n<|/ c |>\n<| c |>\nThe absolute value\
    \ should be calculated like this (absolute deviation): `abs($number - $mean)`\
    \ and not like this (absolute deviation squared): `pow($number - $mean, 2)`\n\
    <|/ c |>\n<| c |>\nIn PHP 7, the second argument has been replaced with an optional\
    \ third argument which can be an integer or float. [docs](https://www.php.net/manual/en/function.array-sum.php)\
    \ \n\n`$sum = array_sum($numbers, 0.0);`\n<|/ c |>\n<| a |>\nThis is a nice short\
    \ solution to get the MAD but is limited to the set of numbers:\n<code>\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplrb54amh.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \     = mean(array_filter($numbers, function($number) {return $number != 0;}));\n\
    \  $median   = median(array_filter($numbers, function($number) {return $number\
    \ != 0;}));\n  $mad      = 0;\n  foreach ($numbers as $number) {\n    $mad +=\
    \ abs($number - $mean);\n  }\n  return $mad / count($numbers);\n}\n</code>\nThe\
    \ median function I borrowed from someone's blog:\n<code>\n/**\n* Returns the\
    \ median of the given list\n*\n* array $numbers the list to find the median of\n\
    *\n* mixed the median of the given list or null if $numbers is empty\n*/\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp68a5jiq4.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  if ($n === 0) {\n    return 0.0;\n  }\n  $mean = array_sum($numbers)\
    \ / $n;\n  $variance = 0;\n  foreach ($numbers as $n) {\n    $variance += pow($n\
    \ - $mean, $2);\n  }\n  return sqrt($variance);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1yonlsd1.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviation = 0;\n  foreach ($numbers\
    \ as $number) {\n    $deviation += abs($number - $mean);\n  }\n  return $deviation\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $dev = 0;\n  foreach ($numbers as\
    \ $n) {\n    $dev += abs($n - $mean);\n  }\n  return $dev/count($numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ $numbers->mean() + $numbers->reduce(\n    function($sum, $element) {\n     \
    \ return $sum + abs($element - $numbers->mean());\n    }, 0) / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function mean() on array\
    \ in /tmp/tmpnm_bjgkk.php:10\nStack trace:\n#0 /tmp/tmpnm_bjgkk.php(16): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpnm_bjgkk.php(20): candidate(Array)\n#2 /tmp/tmpnm_bjgkk.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnm_bjgkk.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    foreach\
    \ ($numbers as $number) {\n        $sum = 0;\n        $count = count($numbers);\n\
    \        for ($i = 0; $i < $count; $i++) {\n            $sum += abs($number -\
    \ $numbers[$i]);\n        }\n        \n        return $sum / $count;\n    }\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI assume you are looking to do something\
    \ similar to the rolling average function found in Excel?\nIf so, you could use\
    \ something along the lines of this PHP function:\n<code>\n/**\n * Calculate the\
    \ rolling average\n *\n * array $numbers the array of numbers to calculate the\
    \ rolling average for\n * int $window the rolling window size \n * float $average\
    \ the average to start with, defaults to 0.\n * \n * float\n */\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt0nuzeyh.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return $this->_sumabs($numbers,\
    \ $mean);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmpwn_j1r4v.php:11\nStack trace:\n#0 /tmp/tmpwn_j1r4v.php(14): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpwn_j1r4v.php(18): candidate(Array)\n#2 /tmp/tmpwn_j1r4v.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwn_j1r4v.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Sort the numbers descending\n  natsort($numbers);\n  reset($numbers);\n  list($first,\
    \ $last) = array_slice($numbers, 0, 2);\n  return abs($first - $last) / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfgi12in.php:23\n\
    Stack trace:\n#0 /tmp/tmpqfgi12in.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqfgi12in.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = get_mean($numbers);\n  return array('mean absolute deviation' => array_sum($numbers)\
    \ / count($numbers), 'mean' => $mean);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_mean() in\
    \ /tmp/tmps2slbfeh.php:10\nStack trace:\n#0 /tmp/tmps2slbfeh.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmps2slbfeh.php(19): candidate(Array)\n#2 /tmp/tmps2slbfeh.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmps2slbfeh.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function($x)\
    \ { return abs($x - $mean); }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9mwfezs.php:20\n\
    Stack trace:\n#0 /tmp/tmpx9mwfezs.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpx9mwfezs.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ get mean\n  $mean = get_mean($numbers);\n  // get deviations from the mean\n\
    \  $deviations = array_diff($numbers, $mean);\n  // calculate MAD\n  return mean($deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_mean() in\
    \ /tmp/tmpnxam92z1.php:11\nStack trace:\n#0 /tmp/tmpnxam92z1.php(19): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpnxam92z1.php(23): candidate(Array)\n#2 /tmp/tmpnxam92z1.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnxam92z1.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \      = array_sum($numbers) / count($numbers);\n    $dev       = array();\n \
    \   foreach ($numbers as $n) {\n        $dev[] = abs($n - $mean);\n    }\n   \
    \ return array_sum($dev) / count($dev);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \  = array_sum($numbers) / count($numbers);\n    $result = 0;\n    foreach ($numbers\
    \ as $value) {\n        $result +=  $value - $mean;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2btohh6.php:23\n\
    Stack trace:\n#0 /tmp/tmpb2btohh6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb2btohh6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum(\n      array_map(\n          function ($num) {\n            return\
    \ pow($num - array_sum($numbers) / count($numbers), 2);\n          },\n      \
    \    $numbers)) / count($numbers);\n}\n\n$input_numbers = [\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n  3.5,\n\
    \  3.5,\n  3.5,\n  3.5,\n  3.5,\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprni8y8to.php on line 135\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_sum($numbers) - array_sum($numbers) / count($numbers);\n}\n</code>\nAnd\
    \ for the last part you should be able to do what you are looking for.\n<code>\n\
    $x = array();\n$y = array();\n$data = array();\n$rows = mysqli_num_rows($results);\n\
    while ($row = mysqli_fetch_array($results)) {\n    $x[] = $row['date'];\n    $y[]\
    \ = $row['price'];\n}\n\n$x = array_unique($x);\n$y = array_unique($y);\n$data\
    \ = array(\n    'date' => $x,\n    'price' => $y\n);\n\n$mad_dev = mean_absolute_deviation($y);\n\
    \n$mad = $mad_dev > 0 ? round($mad_dev, 3) : -1;\n</code>\n<|/ a |>\n<| a tags=arrays,php,mysql\
    \ |>\nYou can do like this, by creating two arrays one for x value and another\
    \ for y values, then after comparing the values in both arrays you can find out\
    \ what is the largest difference and print out the corresponding index value.\n\
    <code>\n<?php\n$x = array();\n$y = array();\n$data = array();\n$rows = mysqli_num_rows($results);\n\
    while ($row = mysqli_fetch_array($results)) {\n    $x[] = $row['date'];\n    $y[]\
    \ = $row['price'];\n}\n$mad_dev = mean_absolute_deviation($y);\n\n$mad = $mad_dev\
    \ > 0 ? round($mad_dev, 3) : -1;\n\n$mad_diff = array_diff($x, $y);\n$max_diff\
    \ = max($mad_diff);\nif($mad == $max_diff){\n    echo \"Max Difference: \".$max_diff.\"\
    <br>\";\n    echo $x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou don't need\
    \ two arrays, just keep track of the max deviation.\n<|/ c |>\n<| c |>\nYes, that\
    \ also works and this is better solution, thank you for the suggestion\n<|/ c\
    \ |>\n<| c |>\n`array_diff()` returns an array containing all the elements of\
    \ the first array **except** the elements from the second array. So this line\
    \ `array_diff($x, $y)` returns all elements that are in `$x`, but not in `$y`.\
    \ So `$mad_diff` will contain all elements that are in `$x` but not in `$y`.\n\
    <|/ c |>\n<| a |>\nI assume that the dates don't repeat, otherwise you need to\
    \ keep track of the lowest deviation for each date.\n<code>\n$x = array();\n$y\
    \ = array();\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg_1g5r_m.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean_of_numbers\
    \ = array_sum($numbers) / count($numbers);\n  $square_of_numbers = array_map(function($number)\
    \ {\n    return pow($number, 2);\n  }, $numbers);\n  $mean_of_square_of_numbers\
    \ = array_sum($square_of_numbers) / count($numbers);\n  $deviation_of_numbers\
    \ = array_map(function($number, $square_of_numbers) {\n    return $number - $square_of_numbers\
    \ * $mean_of_numbers;\n  }, $numbers, $square_of_numbers);\n  return sqrt(array_sum($deviation_of_numbers)\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposaqtm0w.php:26\n\
    Stack trace:\n#0 /tmp/tmposaqtm0w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmposaqtm0w.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function ($x)\
    \ { return abs($x - $mean); }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ye01v21.php:20\n\
    Stack trace:\n#0 /tmp/tmp0ye01v21.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0ye01v21.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean = array_sum($numbers) / count($numbers);\n  $squared_sum = 0;\n  for\
    \ ($i = 0; $i < count($numbers); $i++) {\n    $squared_sum += pow($numbers[$i]\
    \ - $mean, $2);\n  }\n  return sqrt($squared_sum / (count($numbers) - 1));\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp99obiq4o.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Sort the given data so the numbers become comparable\n  sort($numbers);\n\n\
    \  // Calculate the average of all the numbers and subtract it from the original\n\
    \  // mean.\n  $mean = array_sum($numbers) / count($numbers);\n  $sum = 0;\n \
    \ foreach ($numbers as $n) {\n    $sum += pow($n - $mean,2);\n  }\n\n  return\
    \ sqrt($sum / count($numbers));\n}\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n\
    <| c |>\nThis answer will give you an error as `array_sum` expects first parameter\
    \ to be an array.\n<|/ c |>\n<| c |>\nFixed it for you ;)\n<|/ c |>\n<| c |>\n\
    I added a second version with less code than the first\n<|/ c |>\n<| c |>\nI added\
    \ some comments to my answer\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgk6lynsr.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $means = array_map(function ($number) { return $number->mean();\
    \ }, $numbers);\n  if (count($means) != $n) return 'NaN';\n  sort($means);\n \
    \ $mean = array_pop($means);\n  return array_reduce($means, function ($sum, $mean)\
    \ {\n    return $sum + abs($mean - $mean);\n  }) / $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function mean() on float\
    \ in /tmp/tmp9vbeoa3r.php:11\nStack trace:\n#0 [internal function]: {closure}(1)\n\
    #1 /tmp/tmp9vbeoa3r.php(11): array_map(Object(Closure), Array)\n#2 /tmp/tmp9vbeoa3r.php(21):\
    \ mean_absolute_deviation(Array)\n#3 /tmp/tmp9vbeoa3r.php(25): candidate(Array)\n\
    #4 /tmp/tmp9vbeoa3r.php(30): test()\n#5 {main}\n  thrown in /tmp/tmp9vbeoa3r.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpjmm51dng.php:11\n\
    Stack trace:\n#0 /tmp/tmpjmm51dng.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpjmm51dng.php(19): candidate(Array)\n#2 /tmp/tmpjmm51dng.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjmm51dng.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \     = array_sum($numbers) / count($numbers);\n  $deviation = 0;\n\n  foreach\
    \ ($numbers as $number) {\n    $deviation += abs($number - $mean);\n  }\n\n  return\
    \ $deviation / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \    = array_sum($numbers) / count($numbers);\n    $deltas  = $numbers - $mean;\n\
    \    $deltas2 = array_sum($deltas^2) / count($deltas);\n    return $deltas2 /\
    \ (count($numbers)-1);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpz4gzx9ru.php:11\n\
    Stack trace:\n#0 /tmp/tmpz4gzx9ru.php(17): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpz4gzx9ru.php(21): candidate(Array)\n#2 /tmp/tmpz4gzx9ru.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz4gzx9ru.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($sum, $value) use ($numbers) {\n    $sum +=\
    \ abs($value);\n    return $sum;\n  }, 0) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0xcgm8a.php:21\n\
    Stack trace:\n#0 /tmp/tmph0xcgm8a.php(26): test()\n#1 {main}\n  thrown in /tmp/tmph0xcgm8a.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($sum, $value){\n    return $sum + abs($value\
    \ - $value);\n  }) / count($numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9lsr2m0.php:20\n\
    Stack trace:\n#0 /tmp/tmpp9lsr2m0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp9lsr2m0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $mad = 0;\n  foreach ($numbers as\
    \ $number) {\n    $mad = ($mad_sum + abs($number - $mean)) / ($mad_count + 1);\n\
    \    $mad_sum = $mad_sum + abs($number - $mean);\n    $mad_count = $mad_count\
    \ + 1;\n  }\n  return $mad;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \     = $numbers[0];\n  $diffs    = array();\n  foreach ($numbers as $number)\
    \ {\n    $diffs[] = abs($number - $mean);\n  }\n  return array_sum($diffs) / count($diffs);\n\
    }\n</code>\n<|/ a dscore=4 tags=php,math |>\n<| a |>\nI wrote a small package\
    \ that can compute mean absolute deviation:\n<code>\ncomposer require mickaelj/mad\
    \ for Symfony\n</code>\n<code>\nuse MickaelJ\\Mad\\Calculate;\n...\n\n$mad = Calculate::calculate([5,\
    \ 6, 7], [4, 6, 8]);\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc8fwno4a.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = get_avg($numbers);\n  return $numbers[0] - $mean;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_avg() in\
    \ /tmp/tmp1tz373fe.php:10\nStack trace:\n#0 /tmp/tmp1tz373fe.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp1tz373fe.php(19): candidate(Array)\n#2 /tmp/tmp1tz373fe.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1tz373fe.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers)) {\n    return null;\n  }\n  foreach ($numbers as $number)\
    \ {\n    if (!is_numeric($number)) {\n      return null;\n    }\n  }\n  // sort\
    \ the numbers in descending order\n  rsort($numbers);\n  $mean = array_sum($numbers)\
    \ / count($numbers);\n  // calculate the deviation from mean\n  $variance = array_sum($numbers)\
    \ / count($numbers) - $mean;\n  return abs($variance);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77yrnlfd.php:31\n\
    Stack trace:\n#0 /tmp/tmp77yrnlfd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp77yrnlfd.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs(array_sum(array_map('abs',\
    \ $numbers)) - $mean);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozehkohw.php:19\n\
    Stack trace:\n#0 /tmp/tmpozehkohw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpozehkohw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $squares = array_map(function\
    \ ($x) {\n        return pow($x, 2);\n    }, $numbers);\n\n    return sqrt(array_sum($squares)\
    \ / count($numbers)\n        - $mean * $mean);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp987lmxqu.php:25\n\
    Stack trace:\n#0 /tmp/tmp987lmxqu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp987lmxqu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) /  count($numbers);\n  return array_reduce($numbers, function($sum,\
    \ $val) use ($mean) {\n    return $sum + ($val - $mean);\n  }, 0);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6c4tzl3i.php:21\n\
    Stack trace:\n#0 /tmp/tmp6c4tzl3i.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6c4tzl3i.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate mean and standard deviation:\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  $mean = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach\
    \ ($numbers as $number) {\n    $square_sum += pow($number - $mean, $2);\n  }\n\
    \  $variance = $square_sum / count($numbers);\n  // Return mean deviation:\n \
    \ return sqrt($variance);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt9hz4_rp.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = __internal_mean($numbers);\n  return $mean ? abs(array_sum($numbers) - $mean)\
    \ / count($numbers) : 0;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function __internal_mean()\
    \ in /tmp/tmp3lfgt1p8.php:10\nStack trace:\n#0 /tmp/tmp3lfgt1p8.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp3lfgt1p8.php(19): candidate(Array)\n#2 /tmp/tmp3lfgt1p8.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3lfgt1p8.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $means\
    \ = array_sum($numbers) / count($numbers);\n  return abs($numbers[0] - $means);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwzntlpwn.php:20\n\
    Stack trace:\n#0 /tmp/tmpwzntlpwn.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwzntlpwn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum_of_squares = 0;\n  for ($i\
    \ = 0; $i < count($numbers); ++$i) {\n    $sum_of_squares += ($numbers[$i] - $mean)\
    \ * ($numbers[$i] - $mean);\n  }\n  return sqrt($sum_of_squares / count($numbers));\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwuq86p5n.php:23\n\
    Stack trace:\n#0 /tmp/tmpwuq86p5n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpwuq86p5n.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $val) {\n    $sum += pow(($val - $mean), 2);\n  }\n  return sqrt($sum / count($numbers));\n\
    }\n$mean_abs_dev = mean_absolute_deviation([1, 2, 3, 4, 5]);\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqcfbgxhr.php:24\n\
    Stack trace:\n#0 /tmp/tmpqcfbgxhr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqcfbgxhr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Sort input numbers so the lowest is first (lowest is 0th)\n  sort($numbers);\n\
    \  $mean = $numbers[0];\n  $sum_dev = 0;\n  foreach ($numbers as $n) {\n    $sum_dev\
    \ += (abs($n - $mean));\n  }\n  return $sum_dev / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30f6rewu.php:26\n\
    Stack trace:\n#0 /tmp/tmp30f6rewu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp30f6rewu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpyx3qdxcp.php:11\n\
    Stack trace:\n#0 /tmp/tmpyx3qdxcp.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpyx3qdxcp.php(19): candidate(Array)\n#2 /tmp/tmpyx3qdxcp.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyx3qdxcp.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function($x)\
    \ { return $x - $mean; }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmq56q0s.php:20\n\
    Stack trace:\n#0 /tmp/tmptmq56q0s.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptmq56q0s.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!$numbers) return 0.0;\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  if (!$mean) return 0.0;\n  $mad = 0.0;\n  foreach ($numbers as $n) {\n    $md\
    \ += abs($n - $mean);\n  }\n  return $md / count($numbers);\n}\n</code>\nI used\
    \ the above to generate a graph that looks like this:\n\nTo get the same graph\
    \ in Python, use the following code:\n<code>\nimport pandas as pd\nimport matplotlib.pyplot\
    \ as plt\n\ndf = pd.DataFrame(data={'A': [1,2,3,4,5],'B': [1,2,3,4,5]})\ndf.plot(x='A',\
    \ y='B', style='o')\nxs = range(len(df.index))\nmean_value = df.mean(axis=0)\n\
    plt.plot(xs,mean_value)\nplt.show()\n</code>\n<|/ a tags=python,matplotlib,plot\
    \ dscore=5 |>\n<| c |>\n+1 for python, I'm going to try it out. Thanks!\n<|/ c\
    \ |>\n<| c |>\nThis is not correct.  The MAD calculation should be done between\
    \ a sample and a mean of the dataset.  It is NOT the mean of the dataset.\n<|/\
    \ c |>\n<| c |>\nThanks for catching my error! I've fixed it.\n<|/ c |>\n<| c\
    \ |>\nThis solution works very well. Thanks!\n<|/ c |>\n<| c |>\nIt took me a\
    \ while to figure out that in Python you need to use `len()` instead of `count()`,\
    \ which makes the code work, too. Thank you for this great solution!\n<|/ c |>\n\
    <| a dscore=5 |>\nThe solution provided by Jordan works and it is an elegant solution.\
    \ However it doesn't address your concern about not understanding why you were\
    \ getting an incorrect graph. \nYour graph is too small, for it to be of any use\
    \ in any real sense. Your dataset has only 5 data points, and even if you were\
    \ to include more points there would be no significant difference in the graph.\
    \ \nWhat is important is that the standard deviation isn't constant. The standard\
    \ deviation is proportional to the square root of the variance. \nTherefore, if\
    \ you plot a dataset with only 5 points (5 is just an example), you should see\
    \ a graph with the largest standard deviation on the y-axis and an x-axis that\
    \ goes from 0 to 4. If you plot a dataset with 100 points, the largest standard\
    \ deviation would occur at about 10 and the x-axis would go from 0 to 100.\nIf\
    \ you look at your dataset in a spreadsheet program, you will see a much larger\
    \ standard deviation with only 5 points. \nThe code below shows how this can be\
    \ done with Python. \n<code>\nimport pandas as pd\nfrom matplotlib import pyplot\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvld8chg4.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \    = array_sum($numbers) / count($numbers);\n    $deviation = 0;\n\n    foreach\
    \ ($numbers as $number) {\n        $deviation += abs($number - $mean);\n    }\n\
    \n    return $deviation / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers)/count($numbers);\n  $diffs = array_map(function ($diff)\
    \ {\n    return $diff - $mean;\n  }, $numbers);\n  return array_sum($diffs)/count($diffs);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4aouujxp.php:21\n\
    Stack trace:\n#0 /tmp/tmp4aouujxp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4aouujxp.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) /count($numbers);\n  return array_map(function ($num)\
    \ use($mean) {\n    return abs($num - $mean);\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpul5kl4vf.php:21\n\
    Stack trace:\n#0 /tmp/tmpul5kl4vf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpul5kl4vf.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \     = array_sum($numbers) / count($numbers);\n  $deviations = array_map(function($number)\
    \ {\n    return $number - $mean;\n  }, $numbers);\n  return array_sum($deviations)\
    \ / count($deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9r2izk3.php:22\n\
    Stack trace:\n#0 /tmp/tmpp9r2izk3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp9r2izk3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ We are assuming that the numbers passed as input are mean-centred.\n  sort($numbers);\n\
    \n  if ($numbers[0] == 0.0) {\n    return 0.0;\n  }\n\n  $size = count($numbers);\n\
    \  if ($size == 1) {\n    return $numbers[0];\n  }\n\n  $mean = array_sum($numbers)\
    \ / $size;\n\n  $squared_diff = 0.0;\n  for ($i = 1; $i < $size; $i++) {\n   \
    \ $squared_diff += pow($numbers[$i] - $mean, $2);\n  }\n\n  return sqrt($squared_diff\
    \ / $size);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8n2a4uz_.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum($numbers)\n    / count($numbers)\n    - array_sum($numbers * $numbers)\n\
    \    / count($numbers);\n}\n</code>\nNow we need to define the variance (standard\
    \ deviation) function which gives us an estimate of the variance in a dataset:\n\
    <code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5os7hkoo.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_sum($numbers) /\n        array_sum(array_map(function($n) { return pow($n,\
    \ 2); }, $numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnsp88eu.php:19\n\
    Stack trace:\n#0 /tmp/tmpdnsp88eu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdnsp88eu.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($sum, $value) use ($numbers) {\n    return $sum\
    \ + ($value - $numbers[$sum / count($numbers)]);\n  }, 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfg5z7cy_.php:20\n\
    Stack trace:\n#0 /tmp/tmpfg5z7cy_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfg5z7cy_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviation = array();\n  foreach\
    \ ($numbers as $n) {\n    $deviation[] = abs($n - $mean);\n  }\n  return array_sum($deviation)\
    \ / count($deviation);\n}\n</code>\n<|/ a dscore=5 tags=php |>\n<| c |>\nJust\
    \ in case anyone is wondering, this formula is called \"Mean Absolute Deviation\"\
    .\n<|/ c |>\n<| c |>\nPlease do not use code formatting for text that isn't code.\n\
    <|/ c |>\n<| c |>\n, thanks for the heads-up, I've fixed it now.\n<|/ c |>\n<|\
    \ a |>\n<code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmu8j0be7.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_sum(array_map('abs', $numbers)) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp304ynxpq.php:18\n\
    Stack trace:\n#0 /tmp/tmp304ynxpq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp304ynxpq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ $numbers is expected to be an array of numbers.\n  // If the array has only\
    \ one element or a string that is not\n  // convertible to float, it will be converted\
    \ to a single-element array.\n  $numbers = is_array($numbers) ? $numbers : [$numbers];\n\
    \  $mean    = array_sum($numbers) / count($numbers);\n  return array_reduce($numbers,\
    \ function($sum, $number) {\n    // Return the sum of squared differences\n  \
    \  // between the number and the mean.\n    return $sum + abs($number - $mean);\n\
    \  }, 0);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08g21oge.php:27\n\
    Stack trace:\n#0 /tmp/tmp08g21oge.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp08g21oge.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!is_array($numbers)) {\n        throw new InvalidArgumentException(sprintf(\n\
    \            'The argument of mean_absolute_deviation must be an array, but got\
    \ %s.',\n            gettype($numbers)\n        ));\n    }\n\n    return array_reduce($numbers,\
    \ function ($sum, $number) {\n        return $sum + ($number - array_sum($numbers))\
    \ *\n            ($number - array_sum($numbers)) /\n            count($numbers);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmph32kg_ah.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmph32kg_ah.php on line 19\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmph32kg_ah.php on line\
    \ 20\n\nWarning: Division by zero in /tmp/tmph32kg_ah.php on line 20\n\nWarning:\
    \ array_sum() expects parameter 1 to be array, null given in /tmp/tmph32kg_ah.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmph32kg_ah.php on line 19\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmph32kg_ah.php on line\
    \ 20\n\nWarning: Division by zero in /tmp/tmph32kg_ah.php on line 20\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmph32kg_ah.php:29\nStack trace:\n\
    #0 /tmp/tmph32kg_ah.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph32kg_ah.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (empty($numbers)) {\n    return 0;\n  }\n  $mean = 0;\n  $squared_deviation\
    \ = 0;\n  foreach ($numbers as $number) {\n    $mean += $number;\n    $squared_deviation\
    \ += $number * $number;\n  }\n  return $mean / (count($numbers) * $squared_deviation);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0990hujf.php:27\n\
    Stack trace:\n#0 /tmp/tmp0990hujf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0990hujf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum_of_squares\
    \ = 0;\n  $sum = 0;\n  foreach ($numbers as $x) {\n    $sum_of_squares += pow($x,\
    \ 2);\n    $sum += $x;\n  }\n  return $sum / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0n3tgtot.php:24\n\
    Stack trace:\n#0 /tmp/tmp0n3tgtot.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0n3tgtot.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float) array_sum($numbers) / count($numbers);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nFor this problem I actually went with another method. Your solution was\
    \ a nice one, but as I said above, my solution was less accurate because I was\
    \ using the array_diff() function to get the differences and then finding the\
    \ average. The other method was very simple. I ended up using array_sum() and\
    \ divide by count($numbers) to find the average. Thanks for the solution though.\
    \ I will use this in other problems I have in my mind.\n<|/ c |>\n<| c |>\nOk,\
    \ fair enough. Good luck!\n<|/ c |>\n<| c |>\nI should add, I also thought about\
    \ doing it another way: looping through each array and adding the value to a variable\
    \ and then adding the variable to the total. After that I divide by the count()\
    \ function. But the second method was way more elegant.\n<|/ c |>\n<| c |>\nNo\
    \ worries, I actually like this one too. Thanks for sharing.\n<|/ c |>\n<| a |>\n\
    Here's a solution using array_sum and array_diff functions:\n<code>\n<?php\n\n\
    $a = [1, 2, 3, 4, 5];\n\n$ma = (float) array_sum($a) / count($a);\n\n$mad = (array_sum(array_diff($a,\
    \ [$ma]))) / count($a);\n\nprint_r($ma);\nprint_r($mad);\n</code>\n<|/ a dscore=2\
    \ tags=php,arrays,average,math |>\n<| c |>\nWorks like a charm. Thanks so much.\
    \ I had a similar function but was using array_diff() instead, which didn't work.\
    \ Thanks again man. Great solution.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo3l6jkok.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!count($numbers)) {\n        return 0;\n    }\n\n    $n = count($numbers);\n\
    \n    $mean = array_sum($numbers) / $n;\n\n    return array_sum(abs($numbers -\
    \ $mean)) / $n;\n}\n</code>\n<|/ a tags=php,calculation,function,mean |>\n<| c\
    \ |>\nIt will return a floating point number, so you'll need to round it.\n<|/\
    \ c |>\n<| c |>\nWhat about for negative numbers? It should still be calculated.\n\
    <|/ c |>\n<| c |>\nJust subtract the mean from the numbers?\n<|/ c |>\n<| a dscore=3\
    \ tags=php,calculation,function,mean |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx67be9p4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_reduce($numbers, function($sum,\
    \ $number) {\n    return $sum + abs($number - $mean);\n  }, 0);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9p4yncb2.php:21\n\
    Stack trace:\n#0 /tmp/tmp9p4yncb2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9p4yncb2.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce(\n    $numbers,\n    function ($sum, $number) { return $sum + abs($number);\
    \ },\n    0.0\n  ) / count($numbers);\n}\nfunction candidate(...$args) {\n   \
    \ return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptx9oxr48.php:21\n\
    Stack trace:\n#0 /tmp/tmptx9oxr48.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptx9oxr48.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squareDiffs = array_map(function\
    \ ($x) { return pow($x - $mean,2); }, $numbers);\n  return array_sum($squareDiffs)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptavocagn.php:20\n\
    Stack trace:\n#0 /tmp/tmptavocagn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptavocagn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers)/count($numbers);\n    return array_sum(array_map('abs',\
    \ $numbers)) - $mean;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc16rfuxj.php:19\n\
    Stack trace:\n#0 /tmp/tmpc16rfuxj.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpc16rfuxj.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_differences = array_map(\n\
    \    function($number) { return abs($number - $mean); },\n    $numbers\n  );\n\
    \  return array_sum($squared_differences) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zn_9db0.php:23\n\
    Stack trace:\n#0 /tmp/tmp7zn_9db0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7zn_9db0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = 0;\n    $sum = 0;\n    foreach ($numbers as $n) {\n        $sum += abs($n);\n\
    \        $mean += $n;\n    }\n    $mean = round($sum / count($numbers), 4);\n\
    \    return abs($mean - round($mean, 4));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1y2rige.php:25\n\
    Stack trace:\n#0 /tmp/tmpi1y2rige.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpi1y2rige.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = $numbers - $mean;\n  $mad\
    \ = 0;\n  foreach ($diffs as $diff) {\n    $mad += abs($diff);\n  }\n  return\
    \ $mad / count($diffs);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpcgxuifmv.php:11\n\
    Stack trace:\n#0 /tmp/tmpcgxuifmv.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpcgxuifmv.php(24): candidate(Array)\n#2 /tmp/tmpcgxuifmv.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcgxuifmv.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ (float)array_reduce($numbers, 'mean_absolute_deviation');\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reduce() expects parameter 1 to be array, null given in\
    \ /tmp/tmpy7snxw2t.php on line 10\n\nWarning: array_reduce() expects parameter\
    \ 1 to be array, float given in /tmp/tmpy7snxw2t.php on line 10\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpy7snxw2t.php:18\nStack trace:\n\
    #0 /tmp/tmpy7snxw2t.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpy7snxw2t.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function ($sum, $value) use ($numbers) {\n    return\
    \ $sum + ($value - (array_sum($numbers) / count($numbers)));\n  }, 0);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's a Python implementation, which gives\
    \ me a good performance improvement over David's answer:\n<code>\ndef median_absolute_deviation(array):\n\
    \    if len(array) < 2:\n        raise ValueError('The array must contain at least\
    \ 2 elements')\n    mid = len(array)//2\n    sorted_array = [x for x in sorted(array)]\n\
    \    sorted_mad_sum = 0\n    sorted_array.append(sorted_array.pop(0))\n    for\
    \ x in sorted_array:\n        sorted_mad_sum += (x - sorted_array[mid]) * (x -\
    \ sorted_array[mid])\n    return sorted_mad_sum / (len(array) - mid)\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpti0h1ufe.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diff = array_map(function($x) {\
    \ return $x - $mean; }, $numbers);\n  return array_sum($diff) / count($diff);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrjcfylm.php:19\n\
    Stack trace:\n#0 /tmp/tmpdrjcfylm.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdrjcfylm.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / (count($numbers));\n  return array_reduce($numbers,\
    \ function($sum, $value) {\n    return $sum + abs($value - $mean);\n  });\n}\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8iv8er8p.php:20\n\
    Stack trace:\n#0 /tmp/tmp8iv8er8p.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8iv8er8p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ return the mean of the absolute differences between the numbers and the mean\n\
    \  return array_sum($numbers) / count($numbers);\n}\n\n/**\n * Returns whether\
    \ or not a number is a perfect square.\n *\n * @param int $number The number to\
    \ test.\n * @return bool\n */\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0biwpmi.php:25\n\
    Stack trace:\n#0 /tmp/tmpb0biwpmi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb0biwpmi.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_sum(abs($numbers -\
    \ $mean)) / count($numbers);\n}\n$meanAbsoluteDeviation = mean_absolute_deviation([\n\
    \  1, 2, 3, 4, 5\n]);\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpxrhcuhno.php:11\n\
    Stack trace:\n#0 /tmp/tmpxrhcuhno.php(14): mean_absolute_deviation(Array)\n#1\
    \ {main}\n  thrown in /tmp/tmpxrhcuhno.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = (float) array_sum($numbers) / (float) count($numbers);\n    $deviation = 0;\n\
    \    foreach ($numbers as $number) {\n        $deviation += abs($number - $mean);\n\
    \    }\n    return $deviation / count($numbers);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$data = $_POST['data']; // this is what i got\
    \ from your question\n$data = array_filter(array_map('trim', explode(',', $data)));\n\
    $data = array_filter($data);\n$data = array_filter($data);\n$data = array_filter($data);\n\
    $data = array_map(\"floatval\", $data);\n$data = array_filter($data);\n\n$mean\
    \ = array_sum($data)/count($data);\n$sum = array_sum($data);\n$count = count($data);\n\
    \n$dev = $sum-$mean;\n\n$mad = $dev/$count;\nprint_r($mad.' mad.');\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqpbff0gc.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \      = array_sum($numbers) / count($numbers);\n  $diff      = array();\n  $diffCount\
    \ = array();\n  $n         = 0;\n  foreach ($numbers as $number) {\n    if ($number\
    \ != $mean) {\n      $diff[$n] = $mean - $number;\n      $diffCount[$n]++;\n \
    \   }\n    $n++;\n  }\n  $mad = 0;\n  foreach ($diff as $value) {\n    $mad +=\
    \ abs($value);\n  }\n  return $mad / array_sum($diffCount);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yx6gkgl.php:35\n\
    Stack trace:\n#0 /tmp/tmp7yx6gkgl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7yx6gkgl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \   = array_sum($numbers) / count($numbers);\n  $dev    = array_map(function ($number)\
    \ {\n    return ($number - $mean) * ($number - $mean);\n  }, $numbers);\n  return\
    \ array_sum($dev) / count($dev);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o08p_vg.php:22\n\
    Stack trace:\n#0 /tmp/tmp0o08p_vg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp0o08p_vg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_map(function ($number)\
    \ use ($mean) {\n        return abs($number - $mean);\n    }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmvok7lo.php:21\n\
    Stack trace:\n#0 /tmp/tmpfmvok7lo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfmvok7lo.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tsort($numbers);\n\
    \t$n = count($numbers);\n\t$mean = $numbers[0];\n\treturn abs($mean - (array_sum($numbers)\
    \ / $n));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp973_5p82.php:22\n\
    Stack trace:\n#0 /tmp/tmp973_5p82.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp973_5p82.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    sort($numbers);\n\
    \    $n = count($numbers);\n    $mean = $sum = 0.0; // The sum of the numbers\
    \ divided by the number of elements\n    $mean = isset($numbers[0]) ? $numbers[0]\
    \ : 0.0;\n    foreach ($numbers as $n) {\n        $sum += $n;\n        $mean +=\
    \ $n;\n    }\n    return $sum / $n;\n}\n\nfunction candidate(...$args) {\n   \
    \ return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1b333zt6.php:26\n\
    Stack trace:\n#0 /tmp/tmp1b333zt6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1b333zt6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  \n\
    \  // Return NaN if the array is empty.\n  \n  if (empty($numbers)) {\n    return\
    \ NULL;\n  }\n  \n  $n = count($numbers);\n  \n  // Mean Absolute Deviation is\
    \ the average absolute difference between each\n  // element and a centerpoint\
    \ (mean in this case):\n  // MAD = average | x - x_mean |\n  // >>> mean_mad([1.0,\
    \ 2.0, 3.0, 4.0])\n  // 1.0\n  \n  return sqrt(array_sum(array_map(function($x)\
    \ {\n    return pow(($x - array_sum($numbers) / $n), 2);\n  }, $numbers)) / $n);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpkuykl8x4.php\
    \ on line 26\n\nWarning: Division by zero in /tmp/tmpkuykl8x4.php on line 26\n\
    \nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpkuykl8x4.php\
    \ on line 26\n\nWarning: Division by zero in /tmp/tmpkuykl8x4.php on line 26\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuykl8x4.php:35\nStack\
    \ trace:\n#0 /tmp/tmpkuykl8x4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkuykl8x4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = (float)$numbers[0];\n    $squared_deltas = array();\n    foreach ($numbers\
    \ as $number) {\n        $squared_deltas[] = ($number - $mean) * ($number - $mean);\n\
    \    }\n    return sqrt(array_sum($squared_deltas) / count($numbers));\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppes4dcgz.php:23\n\
    Stack trace:\n#0 /tmp/tmppes4dcgz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppes4dcgz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_map(function ($x)\
    \ { return abs($x - $mean); }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazk4oz08.php:19\n\
    Stack trace:\n#0 /tmp/tmpazk4oz08.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpazk4oz08.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_reduce($numbers, function($sum, $value) {\n        return $sum + abs($value)\
    \ - $value;\n    }, 0);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hknm75k.php:20\n\
    Stack trace:\n#0 /tmp/tmp3hknm75k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp3hknm75k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs(array_sum(array_map(function\
    \ ($num) use ($mean) { return abs($num - $mean); }, $numbers)) / count($numbers));\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays dscore=1 |>\nI created\
    \ a function to calculate the mean of the given values in a given array:\n<code>\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpywntiv0s.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \      = 0;\n  $num_values = 0;\n  foreach ($numbers as $value) {\n    $mean +=\
    \ $value;\n    $num_values += 1;\n  }\n  return (float)$num_values === 0 ? 0 :\
    \ ($num_values % 2 == 0 ?\n    (float)$mean / ($num_values / 2) :\n    (float)$mean\
    \ / ($num_values / 2) / abs($num_values / 2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fme4kgt.php:26\n\
    Stack trace:\n#0 /tmp/tmp5fme4kgt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5fme4kgt.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate the mean\n  $mean = isset($numbers[0]) ? array_sum($numbers) /\n \
    \     count($numbers) : 0;\n  // Return the mean absolute deviation (mad)\n  return\
    \ abs($mean - array_sum($numbers)/\n      count($numbers));\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpofdfsqdw.php:22\n\
    Stack trace:\n#0 /tmp/tmpofdfsqdw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpofdfsqdw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $avg\
    \ = mean(array_filter($numbers, 'is_int'));\n    return abs($avg - mean(array_map('floatval',\
    \ $numbers)));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp_6tjep1s.php:10\n\
    Stack trace:\n#0 /tmp/tmp_6tjep1s.php(14): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp_6tjep1s.php(18): candidate(Array)\n#2 /tmp/tmp_6tjep1s.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_6tjep1s.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float)array_reduce($numbers, function($sum, $number) {\n    $sum += abs($number);\n\
    \    return $sum;\n  });\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpie8sqkip.php:21\n\
    Stack trace:\n#0 /tmp/tmpie8sqkip.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpie8sqkip.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    if ($n < 2) {\n        return NULL;\n    }\n    $mean\
    \ = array_sum($numbers) / $n;\n    return fabs($mean - array_sum(array_map(function\
    \ ($x) {\n        return abs($x);\n    }, $numbers)));\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fabs() in /tmp/tmp62npn2ix.php:15\n\
    Stack trace:\n#0 /tmp/tmp62npn2ix.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp62npn2ix.php(24): candidate(Array)\n#2 /tmp/tmp62npn2ix.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp62npn2ix.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!isset($numbers[0])) {\n    array_shift($numbers);\n  }\n  if (!isset($numbers[count($numbers)\
    \ - 1])) {\n    array_pop($numbers);\n  }\n  return array_sum($numbers) / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40_h2w6z.php:23\n\
    Stack trace:\n#0 /tmp/tmp40_h2w6z.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp40_h2w6z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpe4wffbci.php:11\n\
    Stack trace:\n#0 /tmp/tmpe4wffbci.php(14): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpe4wffbci.php(18): candidate(Array)\n#2 /tmp/tmpe4wffbci.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe4wffbci.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squareDiffs = array_map(function($num)\
    \ use ($mean) { return $num - $mean; }, $numbers);\n  return round(array_sum($squareDiffs)\
    \ / count($squareDiffs), 2);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobbb0t_k.php:20\n\
    Stack trace:\n#0 /tmp/tmpobbb0t_k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpobbb0t_k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $meanAbsoluteDeviation = 0;\n  for\
    \ ($i = 0; $i < count($numbers); $i++) {\n    $meanAbsoluteDeviation += ($numbers[$i]\
    \ - $mean);\n  }\n  return $meanAbsoluteDeviation / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbwao8dc.php:23\n\
    Stack trace:\n#0 /tmp/tmpvbwao8dc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvbwao8dc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = get_mean($numbers);\n    $dev = 0;\n    foreach ($numbers as $n) {\n     \
    \   $dev += ($n - $mean);\n    }\n    return (float) ($dev / count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_mean() in\
    \ /tmp/tmpqy5j6_s0.php:10\nStack trace:\n#0 /tmp/tmpqy5j6_s0.php(19): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpqy5j6_s0.php(23): candidate(Array)\n#2 /tmp/tmpqy5j6_s0.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqy5j6_s0.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum(array_map(function\
    \ ($number) {\n        return $number * $number;\n    }, $numbers)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwg9vrkl.php:21\n\
    Stack trace:\n#0 /tmp/tmpnwg9vrkl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnwg9vrkl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $diffs = array_map(function ($x)\
    \ { return abs($x - $mean); }, $numbers);\n    return array_sum($diffs) / count($diffs);\n\
    }\n</code>\n<|/ a tags=php,php-carbon dscore=0 |>\n<| a tags=php,php-carbon |>\n\
    I wrote this class to use on my own project and wanted to add some features to\
    \ it so I created this class.\n<code>\n<?php\n\n/**\n * PHP class for calculating\
    \ time elapsed since some point in the past or future\n * https://www.php.net/manual/en/class.dateperiod.php\n\
    \ */\nclass TimeElapsed extends DatePeriod\n{\n    const PERIOD_WEEK = 'week';\n\
    \    const PERIOD_MONTH = 'month';\n    const PERIOD_YEAR = 'year';\n    const\
    \ PERIOD_DAY = 'day';\n    const PERIOD_HOUR = 'hour';\n\n    private $target;\n\
    \    private $startDate;\n\n    /**\n     * DateTime|null $target\n     * DateTime|null\
    \ $startDate\n     */\n    public function __construct(DateTime|null $target =\
    \ null, DateTime|null $startDate = null)\n    {\n        $this->target = $target;\n\
    \        $this->startDate = $startDate;\n    }\n\n    public function toArray()\n\
    \    {\n        $start = clone $this->startDate;\n        $target = $this->target\
    \ ?: $start;\n        $current = clone $start;\n        $period = $this;\n   \
    \     $end = $current->add($period->getPeriod());\n        $periods[] = [\n  \
    \          'start' => $start->format('Y-m-d H:i:s'),\n            'end' => $end->format('Y-m-d\
    \ H:i:s'),\n            'period' => $period->getPeriod(),\n            'value'\
    \ => $current->diff($target)->format('%a'),\n            'label' => $this->getPeriodLabel($period),\n\
    \            'unit' => $this->getPeriodUnit($period),\n            'isStart' =>\
    \ $this->isStart($period),\n            'isEnd' => $this->isEnd($period),\n  \
    \          'isStartEnd' => $this->isStartEnd($period),\n        ];\n\n       \
    \ return $periods;\n    }\n\n    public function getStart()\n    {\n        return\
    \ $this->startDate;\n    }\n\n    public function getEnd()\n    {\n        return\
    \ $this->target ?: $this->startDate;\n    }\n\n    public function getPeriod()\n\
    \    {\n        return $this->target;\n    }\n\n    public function getTarget()\n\
    \    {\n        return $this->target;\n    }\n\n    public function setTarget($target)\n\
    \    {\n        $this->target = $target;\n        return $this;\n    }\n\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpipmp6sdb.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float) array_reduce($numbers, function($sum, $value) {\n    return $sum + ($value\
    \ - $sum) / count($numbers);\n  });\n}\n\nfunction candidate(...$args) {\n   \
    \ return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpjdycay51.php on line 11\n\nWarning: Division by zero in\
    \ /tmp/tmpjdycay51.php on line 11\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpjdycay51.php on line 11\n\n\
    Warning: Division by zero in /tmp/tmpjdycay51.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjdycay51.php:20\nStack trace:\n#0 /tmp/tmpjdycay51.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjdycay51.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs($mean - array_sum($numbers)\
    \ /count($numbers));\n}\n\n$array=array(1,5,2,3,8,7,6,4,6);\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqsh347i6.php:21\n\
    Stack trace:\n#0 /tmp/tmpqsh347i6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqsh347i6.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ abs(array_reduce($numbers, function($sum, $number) {\n        return $sum +=\
    \ abs($number);\n    }) / count($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmn8pnud.php:20\n\
    Stack trace:\n#0 /tmp/tmppmn8pnud.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppmn8pnud.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $dev = 0;\n  foreach ($numbers as\
    \ $number) {\n    $dev += abs($number - $mean);\n  }\n  return $dev / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_sum(\n        array_map(\n            'absint',\n            array_map(\n\
    \                'intval',\n                array_map('doubleval', $numbers)\n\
    \            )\n        )\n    ) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map() expects parameter 1 to be a valid callback, function\
    \ 'absint' not found or invalid function name in /tmp/tmp_dxi7hny.php on line\
    \ 15\n\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp_dxi7hny.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dxi7hny.php:26\n\
    Stack trace:\n#0 /tmp/tmp_dxi7hny.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_dxi7hny.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \   = 0;\n    $mean_squared = 0;\n    $count = count($numbers);\n    for($i=0;\
    \ $i < $count; $i++) {\n        $mean += ($numbers[$i] - $mean)/$count;\n    \
    \    $mean_squared += ($numbers[$i] ** 2);\n    }\n    return abs($mean_squared\
    \ - $mean ** 2) / ($count ** 0.5);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm43tlkb0.php:25\n\
    Stack trace:\n#0 /tmp/tmpm43tlkb0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm43tlkb0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $differences = array_map(function\
    \ ($number) {\n        return $number - $mean;\n    }, $numbers);\n    $mad =\
    \ array_reduce($differences, function ($sum, $value) {\n        return $sum +\
    \ $value * $value;\n    });\n    return $mad;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptpg6yp9i.php:25\n\
    Stack trace:\n#0 /tmp/tmptpg6yp9i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptpg6yp9i.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$nn\
    \ = count($numbers);\n\tif ($nn == 0) {\n\t\treturn 0.0;\n\t} elseif ($nn == 1)\
    \ {\n\t\treturn $numbers[0];\n\t}\n\t$mean = $sum = $squaredsum = 0.0;\n\tforeach\
    \ ($numbers as $n) {\n\t\t$sum += $n;\n\t\t$squaredsum += pow($n, 2);\n\t}\n\t\
    return $sum / $nn;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyl2o00j.php:28\n\
    Stack trace:\n#0 /tmp/tmpmyl2o00j.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmyl2o00j.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = $numbers[0];\n  foreach ($numbers as $number)\
    \ {\n    $mean += $number;\n  }\n  return $n ? $mean / $n : 0.0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3awqy5l3.php:23\n\
    Stack trace:\n#0 /tmp/tmp3awqy5l3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3awqy5l3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $mean = 0;\n    $sum = 0;\n    foreach ($numbers as\
    \ $n) {\n        $sum += $n;\n    }\n    return $sum / $n;\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vy17j1h.php:23\n\
    Stack trace:\n#0 /tmp/tmp9vy17j1h.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9vy17j1h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ If the input is empty return null\n  if (empty($numbers)) {\n    return null;\n\
    \  }\n\n  // Convert the numbers to arrays for easier manipulation\n  $numbers_as_arrays\
    \ = array_map(function($x) {\n    return $x;\n  }, $numbers);\n\n  // Mean of\
    \ the numbers array will be the mean\n  $mean = array_sum($numbers_as_arrays)\
    \ / count($numbers_as_arrays);\n\n  // Center of the numbers will be the mean\n\
    \  $center_numbers = $mean;\n\n  // Calculate MAD\n  $mad_number = 0.0;\n  foreach\
    \ ($numbers_as_arrays as $number) {\n    $mad_number += abs($number - $mean);\n\
    \  }\n\n  return $mad_number / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = $numbers[0];\n    return array_reduce($numbers, function ($sum, $number) {\n\
    \        return $sum + abs($number - $mean);\n    }, 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiexwts9u.php:21\n\
    Stack trace:\n#0 /tmp/tmpiexwts9u.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpiexwts9u.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $diff  = array_diff($numbers, [$mean]);\n\
    \  return round(abs($diff[0] / $mean), 5);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0t9y4j5.php:20\n\
    Stack trace:\n#0 /tmp/tmpn0t9y4j5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpn0t9y4j5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / (count($numbers) ?: 1);\n    return fabs(array_sum($numbers)\
    \ /\n        array_sum(array_diff($numbers, $mean)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fabs() in /tmp/tmpa1wb9xz1.php:11\n\
    Stack trace:\n#0 /tmp/tmpa1wb9xz1.php(16): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpa1wb9xz1.php(20): candidate(Array)\n#2 /tmp/tmpa1wb9xz1.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa1wb9xz1.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = __fcall('array_mean', $numbers);\n  $mad = array();\n  foreach ($numbers as\
    \ $n) {\n    $mad[] = abs($n - $mean);\n  }\n  return array_sum($mad) / count($mad);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function __fcall() in\
    \ /tmp/tmpb5c_pa04.php:10\nStack trace:\n#0 /tmp/tmpb5c_pa04.php(18): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpb5c_pa04.php(22): candidate(Array)\n#2 /tmp/tmpb5c_pa04.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb5c_pa04.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $center\
    \ = array_sum($numbers) /\n      count($numbers);\n\n  $deviation = array_map(function\
    \ ($elem) {\n    return abs($elem - $center);\n  }, $numbers);\n\n  return array_sum($deviation)\
    \ / count($deviation);\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,math,statistics\
    \ |>\nThis may be a little bit off-topic but I have found this post on how to\
    \ calculate the mean absolute deviation of a list of numbers in PHP.  It is a\
    \ little lengthy but really helpful.  I hope this is helpful to someone.\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpee99h71g.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float) array_sum(\n    array_map(\n      'absdiff',\n      array_chunk($numbers,\
    \ ceil(count($numbers) / 2))\n    )\n  ) / count($numbers);\n}\n</code>\nAs you\
    \ can see, you just have to pass a series of numbers in to mean_absolute_deviation()\
    \ as $numbers. This will give you a float of mean absolute deviation. \nHope this\
    \ helps.\n<|/ a tags=php,arrays dscore=2 |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiz87o9r8.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ ($numbers === 0) {\n    return 0;\n  }\n  return array_sum($numbers) / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprdhn1umn.php:20\n\
    Stack trace:\n#0 /tmp/tmprdhn1umn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprdhn1umn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float) array_sum($numbers) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxk7jkz2.php:18\n\
    Stack trace:\n#0 /tmp/tmptxk7jkz2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptxk7jkz2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Sort the numbers in descending order:\n  rsort($numbers);\n\n  // Set up MAD\
    \ counter (first two elements are set to 0 on initialization):\n  $mad = 0;\n\
    \  $mean = 0;\n  $i = 0;\n\n  // For each number, calculate the absolute difference:\n\
    \  foreach ($numbers as $num) {\n    $absolute =  abs($num - $mean);\n    $mad\
    \ = round($absolute / $i, 3);\n    $i++;\n    $mean += $num;\n  }\n\n  return\
    \ $mad;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp8hfhvcbl.php on line 21\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp8hfhvcbl.php:33\nStack trace:\n\
    #0 /tmp/tmp8hfhvcbl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8hfhvcbl.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function($x)\
    \ { return $x - $mean; }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvq7msl7.php:20\n\
    Stack trace:\n#0 /tmp/tmpcvq7msl7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcvq7msl7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ sort the inputs from lowest to highest so we get the same average\n  // as the\
    \ Python function with the same name\n  sort($numbers);\n  return array_sum($numbers)\
    \ - array_sum($numbers) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgu_uxj73.php:21\n\
    Stack trace:\n#0 /tmp/tmpgu_uxj73.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgu_uxj73.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tsort($numbers);\n\
    \t$diffs = array_map('abs', $numbers);\n\treturn array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr07pwxgz.php:20\n\
    Stack trace:\n#0 /tmp/tmpr07pwxgz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpr07pwxgz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($acc, $item) {\n    return $acc + abs($item\
    \ - $acc) / count($numbers);\n  });\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp57cbds6c.php on line 11\n\nWarning: Division by zero in\
    \ /tmp/tmp57cbds6c.php on line 11\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmp57cbds6c.php on line 11\n\n\
    Warning: Division by zero in /tmp/tmp57cbds6c.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp57cbds6c.php:19\nStack trace:\n#0 /tmp/tmp57cbds6c.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp57cbds6c.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs(array_sum(array_diff($numbers,\
    \ [$mean])) / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vggt6xb.php:19\n\
    Stack trace:\n#0 /tmp/tmp3vggt6xb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3vggt6xb.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    if ($n == 0) {\n        return PHP_INT_MIN;\n    }\n\
    \    $mean = $numbers[0];\n    $sum = 0;\n    foreach ($numbers as $number) {\n\
    \        $sum += pow($number - $mean,2);\n    }\n    return $sum/($n-1);\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2r9afbm0.php:27\n\
    Stack trace:\n#0 /tmp/tmp2r9afbm0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2r9afbm0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function ($x)\
    \ { return abs($x - $mean); }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qgtceqm.php:19\n\
    Stack trace:\n#0 /tmp/tmp4qgtceqm.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4qgtceqm.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $diffs = array_map(\n        function($number)\
    \ use ($mean) { return $number - $mean; },\n        $numbers\n    );\n    $mad\
    \ = round(abs(array_sum($diffs) / count($diffs)), 10);\n    return $mad;\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp596x6db8.php:24\n\
    Stack trace:\n#0 /tmp/tmp596x6db8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp596x6db8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($sum, $number) {\n    return $sum += abs($number);\n\
    \  }, 0) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd58kjg90.php:20\n\
    Stack trace:\n#0 /tmp/tmpd58kjg90.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpd58kjg90.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs(array_sum(array_map(function\
    \ ($num) use ($mean) { return ($num - $mean); }, $numbers)) / count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_eyrs49.php:19\n\
    Stack trace:\n#0 /tmp/tmp4_eyrs49.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4_eyrs49.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (empty($numbers)) {\n    return NULL;\n  }\n  $mean    = array_sum($numbers)\
    \ / count($numbers);\n  $mad = 0;\n  foreach ($numbers as $n) {\n    $mad += abs($n\
    \ - $mean);\n  }\n  return $mad / count($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $mad = 0;\n  foreach ($numbers as\
    \ $n) {\n    $mad_new = abs($n - $mean);\n    $mad += $mad_new;\n  }\n  return\
    \ $mad / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $diffs = array_map(function ($number)\
    \ { return $number - $mean; }, $numbers);\n    return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5ippidd.php:20\n\
    Stack trace:\n#0 /tmp/tmpr5ippidd.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpr5ippidd.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
