name: HumanEval_69_search
language: php
prompt: "<?php\n// You are given a non-empty list of positive integers. Return the\
  \ greatest integer that is greater than \n// zero, and has a frequency greater than\
  \ or equal to the value of the integer itself. \n// The frequency of an integer\
  \ is the number of times it appears in the list.\n// If no such a value exist, return\
  \ -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8,\
  \ 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8,\
  \ 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3,\
  \ 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))\
  \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4,\
  \ 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2,\
  \ 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7,\
  \ 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1,\
  \ 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\t$freq = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($freq[$lst[$i]]\
    \ === undefined) {\n\t\t\t$freq[$lst[$i]] = 0;\n\t\t}\n\t\t$freq[$lst[$i]] +=\
    \ 1;\n\t}\n\t\n\tforeach($freq as $k => $v)\n\t\tif ($v > 0) {\n\t\t\treturn $k;\n\
    \t\t}\n\treturn -1;\n}\n\t", "    $arr = array_count_values($lst);\n    if(count($arr)\
    \ == 0){\n        return -1;\n    }\n    foreach($arr as $key => $value){\n  \
    \      if($arr[$key] >= $lst[$key]){\n            return $key;\n        }\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nTry this\n\
    \n<code>", "\t$l=count($lst);\n\t$max=0;\n\tfor ($i=0;$i<$l;$i++){\n\t\tfor ($j=$i+1;$j<$l;$j++){\n\
    \t\t\tif ($lst[$j]>$lst[$i]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ($lst[$j-1]>$lst[$j]){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ($lst[$j]==$lst[$j-1]){\n\t\t\t\tif ($lst[$j]>$max){\n\
    \t\t\t\t\t$max=$lst[$j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $max;\n}",
  "    $freq = [];\n    foreach ($lst as $key => $val) {\n        $freq[$val]++;\n\
    \    }\n    $max = -1;\n    foreach ($freq as $key => $val) {\n        if ($val\
    \ > 0 && $freq[$key] >= $freq[$max]) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a |>\n<| c |>\nYour code doesn't work.\
    \ Try `search([1,3,1,2,2,3,1,1,1,1]);`\n<|/ c |>\n<| c |>\nIt does work on that\
    \ example, but there are only two 3's in the list.\n<|/ c |>\n<| c |>\nIt works,\
    \ I ran it in a test case on my computer. Perhaps you could give me an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nAh! I see it now thank you so much\
    \ for the help, sorry I didn't include my own test case! :)\n<|/ c |>\n<| c |>\n\
    No worries, glad I could help.\n<|/ c |>\n<| a tags=php,arrays dscore=1 |>\nTry\
    \ this:\n<code>", "    $frequency = array_count_values($lst);\n    arsort($frequency);\n\
    \    foreach ($frequency as $key => $value) {\n        if ($value > $frequency[$key])\
    \ {\n            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a dscore=2 tags=php |>\n<| c |>\nthis doesn't seem to be correct. Your code\
    \ returns 4 when the array is `{4, 1, 2, 2, 3, 1}`\n<|/ c |>\n<| a tags=php dscore=2\
    \ |>\nAs per my comment on OP's answer i wrote this solution, not sure if it works\
    \ correctly or not, but i thought it's worth sharing.\n<code>\n<?php\n", "   \
    \ $result = array_count_values($lst);\n    foreach ($result as $key => $value)\
    \ {\n        if ($value > 1) {\n            return $key;\n        }\n    }\n \
    \   return -1;\n}", "    // Write your code here\n    for($i=0;$i<count($lst);$i++){\n\
    \        for($j=0;$j<count($lst);$j++){\n            if($lst[$i]<$lst[$j]){\n\
    \                $tmp=$lst[$i];\n                $lst[$i]=$lst[$j];\n        \
    \        $lst[$j]=$tmp;\n            }\n        }\n    }\n    for($i=0;$i<count($lst);$i++){\n\
    \        if($lst[$i]==$lst[count($lst)-1])\n            return $i;\n    }\n  \
    \  return -1;\n}", "    // code here\n}\n", "    $freq = [];\n    foreach($lst\
    \ as $k => $v)\n        $freq[$v] = isset($freq[$v]) ? $freq[$v] + 1 : 0;\n  \
    \  \n    foreach($freq as $v){\n        if($v > 0 && $v >= $lst[$k])\n       \
    \     return $v;\n    }\n    return -1;\n}\n", "  if($lst) {\n    $max = $lst[0];\n\
    \    foreach ($lst as $value) {\n      if ($value > $max) {\n        $max = $value;\n\
    \      }\n    }\n    return $max;\n  } else {\n    return -1;\n  }\n}\n", "  \
    \  $freq=[];\n    foreach ($lst as $k=>$v) {\n        if (!isset($freq[$v])) {\n\
    \            $freq[$v] = 0;\n        }\n        $freq[$v] += 1;\n    }\n    $highest\
    \ = -1;\n    $max = -1;\n    foreach ($freq as $k => $v) {\n        if ($v > 0\
    \ && $freq[$k] > $max) {\n            $max = $freq[$k];\n            $highest\
    \ = $k;\n        }\n    }\n    return $highest == -1 ? -1 : highest;\n}", "  $max_freq\
    \ = array_count_values($lst);\n  return $max_freq[current($max_freq)];\n}\n",
  "    $lst = array_filter(array_count_values($lst));\n    return array_search(0,\
    \ $lst);\n}\n\n$input = file_get_contents('php://stdin');\n$inputLines = explode(\"\
    \\n\", $input);\n\n$inputLines = array_map(function($line){ return trim($line);},\
    \ $inputLines);\n$inputLines = array_map('intval', $inputLines);\n$input = count($inputLines);\n\
    \n$max = 0;\n$frequency = array();\nforeach ($inputLines as $line) {\n    $frequency[$line]\
    \ = 1;\n    $max = ($line > $max) ? $line : $max;\n}\n\n$result = search($frequency);\n\
    var_dump($result);\n</code>\n<|/ a tags=php |>\n<| c |>\nSorry for the unclear\
    \ question, I have edited it now.\n<|/ c |>\n<| a dscore=0 tags=php |>\n<code>\n\
    $freq=array(1,2,3,4,5);", "    $lst_count = count($lst);\n    foreach ($lst as\
    \ $key => $value) {\n        if ($value <= 0) {\n            continue;\n     \
    \   }\n        if (array_key_exists($value, $arr)) {\n            $count[$value]\
    \ += $lst_count - 1;\n            if ($count[$value] >= $value) {\n          \
    \      return $value;\n            }\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nclass Search\n{\n    function getFrequencyCount($arr)\
    \ {\n        $count = array();\n        foreach($arr as $arr2) {\n           \
    \ if(!isset($count[$arr2])) {\n                $count[$arr2] = 0;\n          \
    \  }\n            $count[$arr2]++;\n        }\n        $maxKey = max($count);\n\
    \        if($maxKey == 0) {\n            return array();\n        }\n        foreach($count\
    \ as $key => $value) {\n            if($value >= $maxKey) {\n                return\
    \ array($key => $value);\n            }\n        }\n        return array();\n\
    \    }\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n$a = [1,2,3,4,4,4,5,5,6,7,8,8,8,8,8,9];\n\
    \n$frequencyCount = array_count_values($a); // array of all frequencies\n\n$maxValue\
    \ = max($frequencyCount); // get max frequency\n\n$maxFreq = array_search($maxValue,\
    \ $frequencyCount); // get index of the max frequency\n\n$searchMax = array_slice($a,\
    \ $maxFreq, 2); // remove max frequency & all its predecessor\n\nprint_r($searchMax);\n\
    </code>\n<|/ a tags=php |>\n<| a tags=php |>\n<code>\n    <?php\n\n    $array\
    \ = [1, 2, 3, 3, 3, 3, 4, 4, 4];\n\n    $arrayCount = array_count_values($array);\n\
    \n    $max = max($arrayCount);\n\n    $frequency = array_search($max, $arrayCount);\n\
    \n    $finalArray = array_slice($array, $frequency + 1);\n    var_dump($finalArray);\n\
    \n    ?>\n</code>\n<|/ a dscore=0 |>\n<| a tags=php dscore=0 |>\n<code>\n<?php\n\
    $array = [1,2,3,4,4,4,5,5,6,7,8,8,8,8,8,8,9];\n$result = array();\n\nforeach($array\
    \ as $key => $value)\n{\n    array_push($result, $value);\n}\n\n$freq = array_count_values($result);\n\
    $max = max($freq);\n$max = array_search($max, $freq", "    // write your code\
    \ in PHP7.0\n    $result = [];\n    foreach ($lst as $value) {\n        if (isset($result[$value]))\
    \ {\n            $result[$value] += 1;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n        if\
    \ ($value > 0 && $value >= $value) {\n            return $key;\n        }\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a |>\n<| c |>\nAwesome! Thank you!\n<|/\
    \ c |>\n<| c |>\nThis does not return the greatest integer that is greater or\
    \ equal to the value of the integer itself. It returns the greatest integer that\
    \ is greater than 0.\n<|/ c |>\n<| c |>\nIt only returns -1 if there are no more\
    \ numbers to test in the list.\n<|/ c |>\n<| c |>\nActually, your solution works\
    \ great! Thanks again\n<|/ c |>\n<| c |>\nApologies for the confusing question.\
    \ I added a more meaningful example. Thanks for your help\n<|/ c |>\n<| a |>\n\
    I think it's too much code-golfing to post as an answer, but since it's already\
    \ a few people who already wrote the solution, I thought it'd be good to post\
    \ mine.\nThe idea is to build two parallel arrays: One that keeps track of the\
    \ maximum value seen so far and another that keeps track of the number of times\
    \ the current value was seen.  Then, when the next value is added, we check whether\
    \ we already have a maximum value that's higher than the current value (which\
    \ means that the current value is already seen more than once) and if so, increment\
    \ the count for that value.  If not, add the new value, the count of 1, and add\
    \ the maximum value seen so far.\nThe final check is to make sure that every value\
    \ in our input list has been seen at least once.\n<code>\n<?php\n", "    $arr\
    \ = array_count_values($lst);\n    foreach ($arr as $key => $val) {\n        if\
    \ ($val >= count($lst)) {\n            return -1;\n        }\n    }\n    $result\
    \ = array_search(max($arr), $arr);\n    return isset($arr[$result]) ? $result\
    \ : -1;\n}\n\n$myArray = [1, 2, 4, 2, 5, 6, 9, 7, 9, 8];\n$searchFor = 2;\necho\
    \ search($myArray);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI do not understand\
    \ what your answer should do. Why do you need to count the frequencies of the\
    \ elements if you only want to find the highest frequency which is larger than\
    \ the search term?\n<|/ c |>\n<| c |>\nI thought the OP wanted the greatest number\
    \ greater than zero, which would return 4 with your example. I could have misinterpreted\
    \ the question, but I thought the array was supposed to contain only positive\
    \ integers.\n<|/ c |>\n<| c |>\nYes, you are correct. I interpreted it as \"I\
    \ only want to find the highest frequency which is larger than the search term\"\
    , which would return `4`.\n<|/ c |>\n<| a |>\n<code>", "\t$freq = array_count_values($lst);\n\
    \t$keys = array_keys($freq);\n\tforeach ($keys as $k => $v) {\n\t\tif ($freq[$k]\
    \ > $freq[$keys[$k]]) return $k;\n\t}\n\treturn -1;\n}", "    foreach ($lst as\
    \ $key => $val) {\n        $freq[$val]++;\n    }\n    foreach ($freq as $key =>\
    \ $val) {\n        if ($val > 0) {\n            return $key;\n        }\n    }\n\
    \    return -1;\n}\n", "    $freq = array_count_values($lst);\n    arsort($freq);\n\
    \    $key = array_keys($freq);\n    return $key == $freq ? -1 : reset($key);\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThis does not produce the output OP requested.\n\
    <|/ c |>\n<| c |>\nI added the array example and the comment, thank you for pointing\
    \ out!\n<|/ c |>\n<| a tags=php dscore=1 |>\n<code>", "    sort($lst);\n    $len\
    \ = count($lst);\n    $max = $lst[0];\n    $freq = $lst[0];\n\n    for ($i = 1;\
    \ $i < $len; $i++) {\n        if ($lst[$i] == $max) {\n            $freq += $lst[$i];\n\
    \            if ($freq >= $max) {\n                return $max;\n            }\n\
    \        }\n        $max = $lst[$i];\n        $freq = $lst[$i];\n    }\n\n   \
    \ return -1;\n}\n", "    $sort = array_count_values($lst);\n    foreach ($sort\
    \ as $key => $value) {\n        if ($value > 1) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n", "  $freq = array();\n  $max = -1;\n \
    \ foreach($lst as $v){\n    $freq[$v]++;\n    if($freq[$v] > $max){\n      $max\
    \ = $freq[$v];\n    }\n  }\n  if($freq[0] > 0 && $max > 0){\n    foreach($freq\
    \ as $k=>$v){\n      if($v > $max){\n        $max = $v;\n      }\n    }\n  }\n\
    \  return $max;\n}\n", "    $sorted = sort($lst);\n    $res = false;\n    for\
    \ ($i=0; $i<sizeof($sorted); $i++) {\n        if ($sorted[$i] == 0) {\n      \
    \      continue;\n        }\n        $res = $sorted[$i];\n        break;\n   \
    \ }\n    return $res;\n}\n", "    for($i = 0; $i < count($lst); $i++) {\n    \
    \    // if current index is larger than the length of the array\n        if ($i\
    \ > count($lst) - 1) {\n            return -1;\n        }\n        // if the current\
    \ index matches or is smaller than the length of the array\n        // then return\
    \ the first value in the array that is greater than the index value\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return $lst[$i + 1];\n        }\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=arrays,php,algorithm\
    \ |>\n<code>", "\t$result = -1;\n\tfor($i = 0; $i < sizeof($lst); $i++){\n\t\t\
    $freq[$lst[$i]] = $i;\n\t}\n\tsort($freq);\n\tforeach($freq as $key=>$val){\n\t\
    \tif($freq[$key] >= $result){\n\t\t\t$result = $key;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "    $max = $lst[0];\n    for($i = 1; $i < count($lst); $i++) {\n      \
    \  if($lst[$i] >= $max) {\n            $max = $lst[$i];\n        }\n    }\n  \
    \  return $max;\n}", "\t$frequencies = array_count_values($lst);\n\tarsort($frequencies);\n\
    \t$frequencies = array_slice($frequencies, 1, count($lst));\n\tforeach ($frequencies\
    \ as $k => $v){\n\t\tif ($v >= $lst[0]) break;\n\t}\n\treturn $k !== false ? $k\
    \ : -1;\n}", "    $lst = array_reverse($lst);\n    foreach($lst as $key => $value)\
    \ {\n        if(!isset($temp[$value])) {\n            $temp[$value] = 0;\n   \
    \     }\n        $temp[$value]++;\n        if($temp[$value] > $value) {\n    \
    \        return $value;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\nThe simple solution:\n<code>", "    $max_freq = 0;\n    $res =\
    \ -1;\n    foreach ($lst as $val) {\n        $freq = array_search($val, $lst);\n\
    \        if ($freq > $max_freq) {\n            $max_freq = $freq;\n          \
    \  $res = $val;\n        } elseif ($freq == $max_freq) {\n            if ($val\
    \ > $res) {\n                $res = $val;\n            }\n        }\n    }\n \
    \   return $res;\n}\n</code>\nOutput:\n<code>\narray(1) {\n  [0] =>\n  string(7)\
    \ \"7\"\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nNice, but `array_search` doesn't\
    \ actually return the index. `array_search` returns `false` if the value is not\
    \ found. `array_filter` would do that and then `array_search` would work, or else\
    \ `array_filter` alone with `array_search`.\n<|/ c |>\n<| c |>\nThis solution\
    \ is actually very similar to the other solution posted by.\n<|/ c |>\n<| c |>\n\
    You are right, they posted similar solutions, I've already upvoted yours. :)\n\
    <|/ c |>\n<| c |>\nI didn't post my answer because you had already done that in\
    \ the comments. I was merely pointing out that your solution is similar to the\
    \ other answer. Yours uses `array_filter` and `array_search` while my solution\
    \ uses `array_count_values` and a foreach.\n<|/ c |>\n<| c |>\nI see that. My\
    \ point was that your answer could be improved. It's hard to tell the difference\
    \ between your answer and the other solutions when it comes to readability, performance,\
    \ etc. Your code has two nested loops instead of one, which means it's less readable\
    \ and more difficult to understand. Besides, it's much more difficult to understand\
    \ what the code is doing, which means it's harder to maintain. Your answer has\
    \ only one loop, which is easier to understand and maintain. My answer has several\
    \ loops. This is also harder to read and maintain.\n<|/ c |>\n<| a dscore=1 |>\n\
    You can do it with simple loop without array_search\n<code>\n$data = [4, 1, 2,\
    \ 2, 3, 1];\n$result = -1;\nforeach ($data as $num) {\n    $freq = array_count_values($data);\n\
    \    if ($freq[$num] > $freq[$result]) {\n        $result = $num;\n    }\n}\n\
    print_r($result);\n</code>\nOutput:\n<code>\n2\n</code>\n<|/ a tags=php |>\n<|\
    \ a tags=php |>\nThis is a simple approach, with array_count_values:\n<code>",
  "\t\n\tforeach ($lst as $key => $value) {\n\t\t$freq[$value]++;\n\t}\n\t\n\t$highestFreq\
    \ = 0;\n\t$maxItem = $lst[0];\n\tforeach ($freq as $key => $value) {\n\t\tif ($value\
    \ > $highestFreq) {\n\t\t\t$highestFreq = $value;\n\t\t\t$maxItem = $key;\n\t\t\
    }\n\t}\n\n\tforeach ($freq as $key => $value) {\n\t\tif ($value > $highestFreq)\
    \ {\n\t\t\t$highestFreq = $value;\n\t\t}\n\t}\n\n\tif ($highestFreq == 0) return\
    \ -1;\n\treturn $maxItem;\n}\n", "    sort($lst);\n    $max = $lst[0];\n    $freq\
    \ = 1;\n    for($i = 0; $i < count($lst); $i++) {\n        if($lst[$i] == $max)\
    \ {\n            $freq++;\n        }\n        else {\n            if($freq > $lst[$i])\
    \ {\n                $freq = $lst[$i];\n            }\n        }\n    }\n    if($freq\
    \ > $lst[$i]) {\n        return -1;\n    }\n    else {\n        return $max;\n\
    \    }\n}\n</code>\n<|/ a dscore=1 tags=search,arrays,php |>\n<| a |>\nI suppose\
    \ you can use array_search() and get the last key of the search array, and use\
    \ array_slice() to take the value at that key.\n<|/ a tags=search,arrays,php dscore=1\
    \ |>\n<| a tags=search,arrays,php dscore=1 |>\nTry this:\n<code>\n$input = array(\"\
    0\" => 0, \"1\" => 1, \"2\" => 2);\n$search = array(1, 2);\n$idx = array_search($search,\
    \ $input, true);\n$output = $input[$idx];\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    <?php\n$array=array(\"a\",\"b\",\"c\",\"d\",\"e\");\n$search=array(\"a\",\"b\"\
    ,\"d\");\n$result = false;\nforeach($search as $value){\n    if(in_array($value,\
    \ $array)){\n        $result = true;\n        break;\n    }\n}\nif($result){\n\
    \    echo \"found\";\n}else{\n    echo \"not found\";\n}", "    $max_val = -10000000;\n\
    \    foreach ($lst as $key => $val) {\n        if ($val > $max_val) {\n      \
    \      $max_val = $val;\n        }\n        if ($val >= $max_val) {\n        \
    \    return $max_val;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 tags=php,algorithm |>\n<code>", "    foreach ($lst as $val)\
    \ {\n        if ($val >= 0) {\n            $freq[$val] =  $freq[$val] + 1;\n \
    \       } else {\n            $freq[$val] = -1;\n        }\n    }\n\n    foreach\
    \ ($freq as $key => $val) {\n        if ($val >= 0 && $freq[$key] > $val) {\n\
    \            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a\
    \ dscore=0 tags=php,arrays,loops |>\n<| c |>\nThis is what I was looking for.\
    \ Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$a = array(1,2,2,2,5,5);\n\
    $highest_val = 0;\nforeach ($a as $value){\n    if($value > $highest_val){\n \
    \       $highest_val = $value;\n    }\n}\n\necho 'highest value is '.$highest_val;\n\
    </code>", "    if (empty($lst))\n        return -1;\n\n    $freq = array_count_values($lst);\n\
    \    $max = $freq[max($freq)];\n    foreach ($freq as $key => $value) {\n    \
    \    if ($value > $max)\n            $max = $value;\n    }\n\n    return $max;\n\
    }\n</code>\n<|/ a tags=php |>\n<| a tags=php dscore=0 |>\n<code>\n$nums = [1,2,3,4,5,6,7,8,9,0];\n\
    $freq = array_count_values($nums);\n$highest = max($freq);\nforeach($freq as $key\
    \ => $value){\n    if($freq[$key]===$highest){\n        $max = $key;\n    }\n\
    }\n\necho $max;\n</code>\n<|/ a |>\n<| a tags=php |>\n<code>", "    sort($lst);\n\
    \    $index = 0;\n    foreach ($lst as $item) {\n        $index += $item;\n  \
    \      if ($index >= 0) {\n            return $item;\n        }\n    }\n    return\
    \ -1;\n}\n", "    if (count($lst) === 0) {\n        return -1;\n    }\n\n    $max\
    \ = reset($lst);\n\n    foreach ($lst as $el) {\n        if ($el == $max) {\n\
    \            $count = 1;\n            while (next($lst) == $max) {\n         \
    \       $count++;\n            }\n            if ($count >= $el) {\n         \
    \       return $max;\n            }\n        }\n    }\n\n    return -1;\n}\n",
  "    foreach ($lst as $number) {\n        if (isset($frequency[$number])) {\n  \
    \          if ($frequency[$number] == $number) {\n                return $number;\n\
    \            }\n        }\n    }\n    return -1;\n}\n", "    $counter = 0;\n \
    \   foreach ($lst as $item) {\n        $counter++;\n        if ($item == 0) {\n\
    \            return -1;\n        }\n    }\n    return $counter;\n}", "    sort($lst);\n\
    \    $max = $lst[0];\n    foreach ($lst as $key => $value) {\n        if ($max\
    \ < $value) {\n            $max = $value;\n        }\n        if ($max > $value)\
    \ {\n            $max = $value;\n            break;\n        }\n    }\n    if\
    \ ($max == $lst[0]) {\n        return -1;\n    }\n    return $max;\n}\n</code>\n\
    The only thing I am not so sure about is how $max is assigned a value if $max\
    \ is less than $value in the next line after the break statement.\nI would be\
    \ interested to know if there is a more efficient way to do this (by utilizing\
    \ some of the built-in PHP functions). Thanks.\n<|/ q tags=sorting,arrays,algorithm,php\
    \ |>\n<| c |>\nJust a small note: I recommend that you start using camelCase and\
    \ snake_case for your variables and functions. So `$max` should be `$max`, not\
    \ `$Max`.\n<|/ c |>\n<| c |>\n, thanks for your suggestion.\n<|/ c |>\n<| a |>\n\
    You don't need to sort the list first. All you need to do is find the highest\
    \ number in the list, and if it is not equal to 0, find the index of the first\
    \ element greater than it. In your case:\n<code>", "    $n = count($lst);\n  \
    \  $max = -1;\n    $maxCount = 0;\n    foreach ($lst as $v) {\n        $c = array_count_values($lst);\n\
    \        if ($max < 0 || $max > $v) {\n            $max = $v;\n        }\n   \
    \     if (isset($c[$v])) {\n            if ($c[$v] > $maxCount) {\n          \
    \      $maxCount = $c[$v];\n            }\n        }\n    }\n    return $max;\n\
    }\n</code>\n<|/ a dscore=2 tags=arrays,php |>\n<| c |>\nPlease explain what you\
    \ did\n<|/ c |>\n<| c |>\nAdded comments to code, hope it helps.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>", "\t$result = -1;\n\tforeach ($lst as $num) {\n\t\t$freq\
    \ = array_count_values($lst);\n\t\tif ($freq[$num] > $freq[$result]) {\n\t\t\t\
    $result = $num;\n\t\t}\n\t}\n\treturn $result;\n}\n", "    $result = -1;\n\n \
    \   foreach($lst as $num){\n        $freq = array_count_values($lst);\n\n    \
    \    if(!isset($freq[$num])) return $result;\n\n        if($freq[$num] >= $num)\
    \ {\n            $result = $num;\n        }\n    }\n\n    return $result;\n}",
  "    \n    foreach($lst as $key => $value)\n    {\n        if($value >= $key)\n\
    \        {\n            return $key;\n        }\n    }\n\n    return -1;\n}\n",
  "    \n    $max = -1 ;\n    foreach ($lst as $key => $value) {\n        if ($value\
    \ > $max) {\n            $max = $value;\n        }\n    }\n    if ($max == 0)\
    \ {\n        return -1;\n    }\n    foreach ($lst as $key => $value) {\n     \
    \   if ($value > $max) {\n            return $value;\n        }\n    }\n    return\
    \ $max;\n}\necho search([4, 1, 2, 2, 3, 1]) . \"\\n\";\necho search([1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4]) . \"\\n\";\necho search([5, 5, 4, 4, 4]) . \"\\n\";", " \
    \   $max = $lst[0];\n    for($i = 1; $i < count($lst); $i++) {\n        if($lst[$i]\
    \ > $max) {\n            $max = $lst[$i];\n        }\n    }\n\n    for($i = 1;\
    \ $i < count($lst); $i++) {\n        if($lst[$i] == $max) {\n            if($max\
    \ >= count($lst) - 1) {\n                return -1;\n            } else {\n  \
    \              return $max;\n            }\n        }\n    }\n    return -1;\n\
    }\n", "    $max = 0;\n    foreach ($lst as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n\n    foreach ($lst as $e) {\n     \
    \   if ($e >= $max) {\n            return $e;\n        }\n    }\n\n    return\
    \ -1;\n}\n", "    return array_reduce($lst, 'array_max', array(0)) - $lst[0];\n\
    }\n", "    return search($lst, 1);\n}\n", "    sort($lst);\n    $max = $lst[0];\n\
    \    foreach($lst as $val) {\n        if ($val > $max) {\n            $max = $val;\n\
    \        }\n    }\n    return $max;\n}\n\n$n = [1, 8, 0, 8, 5, 7, 0, 10, 9, 0];\n\
    var_dump(search($n));", "    if(count($lst) == 0)\n        return -1;\n\n    $first\
    \  = $lst[0];\n    $last  = $lst[count($lst) - 1];\n    \n    for($i = 1; $i <\
    \ count($lst); $i++)\n    {\n        if($lst[$i] == $first && $lst[$i - 1] !=\
    \ $last)\n        {\n            for($j = $i; $j < count($lst); $j++)\n      \
    \      {\n                if($lst[$j] == $last)\n                    return $j;\n\
    \            }\n        }\n    }\n\n    return -1;\n}\n\n$array = array(1, 2,\
    \ 3, 1, 2, 3, 3);\n\necho search($array); \n</code>\n<|/ a |>\n<| c |>\nThis does\
    \ not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26504250)\n<|/ c |>\n<| c |>\n, you\
    \ are right. I missed that, but when I tried to edit and add my comment, it said\
    \ I needed to wait 8 hours before I could edit. I just edited it straight away.\
    \ Sorry for the misunderstanding.\n<|/ c |>\n<| c |>\nNo worries. I see what you\
    \ mean. Thanks for editing the answer.\n<|/ c |>\n<| a tags=arrays,php,algorithm\
    \ |>\nA solution that works only with array_count_values is given below. I have\
    \ added some comments in the code for the better understanding.\n<code>", "  \
    \  // write your code here\n    $arr = [];\n    $i = 0;\n    foreach($lst as $v){\n\
    \        if($arr[$v]==null){\n            $arr[$v] = 1;\n        }else{\n    \
    \        $arr[$v]+=1;\n        }\n        if($arr[$v]>count($lst)){\n        \
    \    $i=-1;\n        }\n    }\n    return $i;\n}\n\n$myList = [4, 1, 2, 2, 3,\
    \ 1];\n$result = search($myList);\necho $result;", "    $count = array_count_values($lst);\n\
    \n    // find the biggest number that is bigger than zero\n    foreach ($count\
    \ as $num => $freq) {\n        if ($freq > 0) {\n            return $num;\n  \
    \      }\n    }\n\n    // no such number is in the list, return -1\n    return\
    \ -1;\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nThis is more of a math\
    \ problem than a programming problem (or a language problem). You need to find\
    \ the maximum value of a function of the frequencies of the input numbers. \n\
    In this case we need to find the maximum number of terms of the following type:\n\
    \nf(n) = max(f(n-1), f(n-2), ..., f(1)) - 1, for n > 1\n\nWhich is equivalent\
    \ to the following expression:\n\nf(n) = max(f(n-1), f(n-2), ..., f(1)) - 1, for\
    \ n > 1\n\nThe first part can be written as\n\nf(n) = max(f(n-1), f(n-2), ...,\
    \ f(1)) - 1, for n > 0\n\nWhich can be expanded as\n\nf(n) = max(f(n-1), f(n-2),\
    \ ..., f(1)) - 1, for n > 1\n\nWhich can be written in terms of factorial which\
    \ can be defined as\n\nf(n) = n!\n\nNow we are interested in the maxima of this\
    \ function and we want to find its maximum. \nIf we consider two consecutive terms,\
    \ we can calculate the maximum of this function by calculating the maximum value\
    \ of f(n-1) and f(n-2) and comparing the two maximums obtained so far. \nBut if\
    \ we consider two consecutive terms, this can be calculated using a recursive\
    \ approach, since f(n-1) and f(n-2) are calculated using the same input values.\
    \ \nThus, we need a recursive function that calculates the maximum of f(n-1) and\
    \ f(n-2) and recursively calls itself. \nI believe that this is as simple as the\
    \ following function implementation:\n<code>", "    $sorted = array_filter($lst,\
    \ 'is_int');\n    if(empty($sorted)) {\n        return -1;\n    }\n\n    $count\
    \ = array_count_values($sorted);\n    asort($count);\n\n    return max($count,\
    \ function($key, $value) {\n        return $value;\n    });\n}\n", "    // Your\
    \ code here\n    \n    $temp = array();\n    $freq = array();\n    \n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        array_push($temp, $lst[$i]);\n     \
    \   array_push($freq, $lst[$i]);\n    }\n    \n    $max = $lst[0];\n    for ($i\
    \ = 0; $i < count($temp); $i++) {\n        if ($temp[$i] > $max) {\n         \
    \   $max = $temp[$i];\n        }\n    }\n    for ($i = 0; $i < count($temp); $i++)\
    \ {\n        if ($freq[$i] >= $max) {\n            return $temp[$i];\n       \
    \ }\n    }\n    return -1;\n}\n", "    $freq = [];\n    foreach ($lst as $num)\
    \ {\n        if (isset($freq[$num]))\n            $freq[$num] = $freq[$num] +\
    \ 1;\n        else\n            $freq[$num] = 1;\n    }\n\n    return -1; // if\
    \ $freq contains no value greater than 0\n}\n", "    $res = -1; // return -1 if\
    \ no such value exist\n    foreach ($lst as $value) {\n        $count = $lstCount($value,\
    \ $lst);\n        if ($count >= $res) {\n            $res = $value;\n        }\n\
    \    }\n    return $res;\n}\n", "    $freq = array_count_values($lst);\n    $maxKey\
    \ = array_search(0, $freq);\n    if ($maxKey === false) {\n        return -1;\n\
    \    }\n    return $maxKey;\n}\n", "    $count = [count($lst) => 0];\n    foreach\
    \ ($lst as $key => $val) {\n        if (!isset($count[$val])) {\n            return\
    \ -1;\n        }\n        if ($count[$val] > $count[$key]) {\n            $count\
    \ = $count[$val];\n        }\n    }\n    return $count[max($count)];\n}\n", " \
    \   sort($lst);\n    $freq = array_count_values($lst);\n    foreach ($freq as\
    \ $k => $v) {\n        if ($v >= $freq[$k]) {\n            return $k;\n      \
    \  }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,php,arrays |>\n\
    <| c |>\nI like your answer. I think it could be improved by making the function\
    \ return -1 when no such value exists.\n<|/ c |>\n<| c |>\nI like your answer,\
    \ and like [this](https://stackoverflow.com/a/43477274/4233593) answer, because\
    \ it is more performant than the one you proposed.\n<|/ c |>\n<| a dscore=5 tags=algorithm,php,arrays\
    \ |>\n<code>", "  $largest = array_sum($lst);\n  $found = false;\n  for ($i =\
    \ 0; $i < count($lst); $i++) {\n    if ($lst[$i] === 0) {\n      return -1;\n\
    \    }\n    if ($lst[$i] <= $largest && ($largest == 0 || $lst[$i] >= $lst[$largest]))\
    \ {\n      $largest = $lst[$i];\n      $found = true;\n    }\n  }\n  if (!$found)\
    \ {\n    return -1;\n  }\n  return $largest;\n}\n</code>\n<|/ a |>\n<| a tags=php,algorithm\
    \ dscore=0 |>\nI believe the most straightforward solution would be a brute force\
    \ search that just loops through all the numbers in the list.  You can find this\
    \ solution in any textbook on algorithms.  You can't really expect to be able\
    \ to solve this problem in a reasonable amount of time without getting a cheap\
    \ computer with a lot of memory\n<|/ a |>\n<| c |>\nAnd what do you propose to\
    \ do with a solution that is O(n^2)?\n<|/ c |>\n<| c |>\nYou don't have to sort\
    \ it first.\n<|/ c |>\n<| c |>\nYou don't have to sort it first?\n<|/ c |>\n<|\
    \ c |>\nI agree that sorting it first is not necessary for solving this problem,\
    \ but I'm assuming that the point of the question was to find the largest number\
    \ that satisfies a certain condition.  A linear search is O(n), but finding the\
    \ largest number in the array requires that you look through every element in\
    \ the array and find out which one is the largest.  If you only need to find the\
    \ largest, without finding out which one it is, a linear search will work, but\
    \ you will have to store it somewhere.  I don't believe this is what they were\
    \ looking for\n<|/ c |>\n<| c |>\nI misunderstood the question. I thought he wanted\
    \ the largest *frequency*. Looks like the other answers are better then.\n<|/\
    \ c |>\n<| a dscore=0 tags=php,algorithm |>\n<code>\n<?php", "    $val = (array_count_values($lst));\n\
    \    arsort($val);\n    arsort($val);\n    foreach ($val as $k => $v) {\n    \
    \    if ($k > $v){\n            return $k;\n        }\n    }\n    return -1;\n\
    }", "    $freqs = array_count_values($lst);\n    $max = $maxFreq = -1;\n    foreach\
    \ ($freqs as $val => $freq) {\n        if ($freq >= $max) {\n            $max\
    \ = $freq;\n            $maxFreq = $val;\n        }\n    }\n    return ($max ==\
    \ -1) ? -1 : $maxFreq;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this\
    \ fails for a test case where there are multiple instances of the number you're\
    \ looking for. e.g. `search([1, 2, 2, 3, 3, 3, 4, 4, 4])` would return 3 instead\
    \ of 4.\n<|/ c |>\n<| c |>\nOh I see your point, I missed that. I think I would\
    \ do `array_count_values()` and then iterate through the result set, checking\
    \ if the value is greater than or equal to the input array itself.\n<|/ c |>\n\
    <| c |>\nOh and one more thing, don't forget to wrap this in one function :)\n\
    <|/ c |>\n<| c |>\nI added a PHP implementation of the function\n<|/ c |>\n<|\
    \ a |>\nA simple solution using array_count_values and array_slice:\n<code>",
  "    foreach($lst as $i => $v) {\n        if ($v > 0) {\n            foreach($lst\
    \ as $k2 => $v2) {\n                if ($v != $v2 && !in_array($k2, $lst, true)\
    \ && $v2 <= $v) {\n                    $ret = $v;\n                    return\
    \ $ret;\n                }\n            }\n        }\n    }\n\n    return -1;\n\
    }\n", "  // Your code here\n}\n</cell>\n<cell>", "    $min = min(array_keys($lst));\n\
    \    foreach($lst as $k=>$v) {\n        if($k==$min) {\n            break;\n \
    \       }\n        if($v>0) {\n            $min = $k;\n        }\n    }\n    if(isset($lst[$min]))\
    \ {\n        return $min;\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a dscore=2 |>\nFor those who are using php7\n<code>", "   $highest = 0;\n \
    \  $num = \"\";\n\n   foreach($lst as $value) {\n      if($value > $highest &&\
    \ $value >= $num) {\n         $highest = $value;\n      }\n   }\n\n   if($highest\
    \ > 0) {\n      return $highest;\n   } else {\n      return -1;\n   }\n}\n", " \
    \   \n    foreach($lst as $value){\n        $frequency = array_count_values($lst);\n\
    \        if($frequency >= $value)\n        {\n            if($frequency >= $value){\n\
    \                $return = $value;\n            }\n            return $return;\n\
    \        }\n        else{\n            return -1;\n        }\n    }\n    \n}\n",
  "    $lst_length = count($lst);\n    $max = $lst[0];\n    $max_count = 1;\n    foreach\
    \ ($lst as $val) {\n        if ($val >= $max) {\n            $max = $val;\n  \
    \          $max_count = 1;\n        } elseif ($val == $max) {\n            $max_count\
    \ += 1;\n        }\n    }\n    if ($max_count <= $lst_length) {\n        return\
    \ -1;\n    } else {\n        return $max;\n    }\n}", "    $i = 0;\n    foreach\
    \ ($lst as $num) {\n        if ($num > 0) {\n            while (isset($lst[$i\
    \ + 1])) {\n                if ($num == $lst[$i + 1]) {\n                    $i++;\n\
    \                    break;\n                } else {\n                    $i++;\n\
    \                }\n            }\n            return $i;\n        }\n       \
    \ return -1;\n    }\n}\n", "    $first = array_shift($lst);\n    if (!is_int($first))\
    \ {\n        return -1;\n    }\n    $res = $first;\n    foreach ($lst as $e) {\n\
    \        if (!is_int($e)) {\n            return -1;\n        }\n        if ($e\
    \ > $res) {\n            $res = $e;\n        }\n    }\n    return $res;\n}\n",
  "    $i = count($lst) - 1;\n    $freq = 0;\n    while ($i >= 0 && $freq >= 0) {\n\
    \        if ($lst[$i] > 0) {\n            $freq++;\n        }\n        $i--;\n\
    \    }\n    return $freq >= 0 ? $freq : -1;\n}\n", "    $max = -1;\n    foreach\
    \ ($lst as $num) {\n        if ($max < 0 || $max >= $num) $max = $num;\n    }\n\
    \    return $max;\n}", "    sort($lst);\n    $cnt = count($lst);\n    for($i=0;\
    \ $i < $cnt; $i++)\n        if($lst[$i] > 0) break;\n    for($i = 0; $i < $cnt;\
    \ $i++) {\n        if($lst[$i] == $i) {\n            return $lst[$i];\n      \
    \  }\n    }\n    return -1;\n}\n", "    if (count($lst) === 0)\n        return\
    \ -1;\n    $first = min($lst);\n    foreach ($lst as $val) {\n        if ($val\
    \ == $first)\n            return $val;\n    }\n    return -1;\n}\n", "    if (count($lst)\
    \ == 0)\n        return -1;\n\n    $max = -1;\n    $count = [];\n\n    foreach($lst\
    \ as $value) {\n        if (isset($count[$value])) \n            $count[$value]++;\n\
    \        else\n            $count[$value] = 1;\n    }\n\n    foreach($count as\
    \ $key => $value) {\n        if ($value > $max)\n            $max = $key;\n  \
    \  }\n\n    return $max;\n}\n", "    // write your code in PHP7\n    if(!$lst)\
    \ return -1;\n    $freq = array_count_values($lst);\n    foreach($freq as $k=>$v){\n\
    \        if($v >= $freq[$k]){\n            $result = $k;\n            break;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2\
    \ |>\nThis is my solution. Just wanted to share it.\n<code>", "    sort($lst);\n\
    \    \n    foreach($lst as $k=>$v){\n        if ($v>0 && array_key_exists($v,\
    \ $freqs))\n            return $v;\n    }\n    return -1;\n}", "    foreach ($lst\
    \ as $i => $val) {\n        if ($val >= 0) {\n            $freq[$i] += $val;\n\
    \            if ($freq[$i] > $val) {\n                return $val;\n         \
    \   }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| c |>\nIt works\
    \ perfectly fine. No need to use recursion\n<|/ c |>\n<| c |>\nIt would work if\
    \ you use recursion. I just wrote a non recursive version.\n<|/ c |>\n<| a dscore=2\
    \ tags=php,sorting |>\nI guess you need to sort your array in descending order.\
    \ Then iterate through the sorted array and check when the item equals the next\
    \ element and return its index in the array.\n<code>", "\t$l = count($lst);\n\t\
    $m = array_count_values($lst);\n\tforeach ($m as $k => $v) {\n\t\tif ($v >= $l)\
    \ {\n\t\t\treturn $k;\n\t\t}\n\t}\n\treturn -1;\n}\n", "    foreach($lst as $v)\
    \ {\n        if (isset($v)) {\n            if (array_key_exists($v, $freq)) {\n\
    \                if ($freq[$v] > 1) {\n                    return $v;\n      \
    \          }\n            } else {\n                $freq[$v] = 1;\n         \
    \   }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,search,arrays,php\
    \ |>\n<| c |>\nWhy do you need to use `array_count_values`? Why not just search\
    \ `$freq`?\n<|/ c |>\n<| c |>\nBecause `array_count_values()` returns an array\
    \ with key => value like '4' => 2. You have to search $freq directly\n<|/ c |>\n\
    <| c |>\nYou don't need `array_count_values` at all. Just do `foreach ($lst as\
    \ $v) { $freq[$v]++; }` and then `$freq[$v] > 1` is enough to determine if your\
    \ value is in the array.\n<|/ c |>\n<| c |>\nI don't think that's right.  `array_count_values`\
    \ counts the frequency of each item, so if you have `[1, 4, 3, 3]` the output\
    \ would be `[2, 3]`.  Then you're only searching `[1, 3, 3]` which is not the\
    \ desired output.\n<|/ c |>\n<| c |>\nThat is correct. I misunderstood the question.\
    \ My bad.\n<|/ c |>\n<| a dscore=1 |>\nHere is an iterative approach:\n<code>\n\
    <?php\n$freqs = array_count_values($myArray);\n$max = -1;\nforeach ($freqs as\
    \ $key => $val) {\n  if ($val > 1) {\n    $max = $key;\n    break;\n  }\n}\necho\
    \ $max;", "    foreach($lst as $key => $val){\n        if($val >= $key){\n   \
    \         return $val;\n        }\n    }\n    return -1;\n}\n\n$arr = array (4,1,2,2,3,3,3,4,4,4,5,5,5,5,5,5,5,5,5,5,5);\n\
    print_r(search($arr));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question asks\
    \ for the **greatest** integer, not necessarily the **first** one.\n<|/ c |>\n\
    <| c |>\n- No, that's not the question. `search([1, 1, 2, 3, 4, 1]) == 2`, not\
    \ `1`.\n<|/ c |>\n<| c |>\nIt isn't specified if the first occurrence is also\
    \ counted as 1. The question wasn't entirely clear. I've updated my answer to\
    \ include the occurrence of the first integer as `1`.\n<|/ c |>\n<| a tags=php,arrays\
    \ dscore=0 |>\nThis could be a solution\n<code>", "    $i = 0;\n    foreach ($lst\
    \ as $val) {\n        $i += $val;\n        if ($i >= $val) {\n            $return\
    \ = $val;\n            break;\n        }\n    }\n    return $return;\n}\n</code>\n\
    <|/ a tags=arrays,php,arrays |>\n<| a dscore=0 |>\nMy approach is like this:\n\
    <code>", "    return max(array_flip($lst), function($val) {\n        return max(array_keys($val,\
    \ $lst));\n    });\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nVery elegant. Nice.\n\
    <|/ c |>\n<| c |>\nThe second argument to max() is not necessary\n<|/ c |>\n<|\
    \ c |>\n`return max(array_flip($lst), function($val) { return max(array_keys($val,\
    \ $lst)); });` gives me an \"Invalid argument supplied for foreach()\" error.\
    \ Also, the `$lst` argument isn't being used. What am I missing?\n<|/ c |>\n<|\
    \ a |>\nYou can count the occurrence of each number and get their maximum:\n<code>\n\
    <?php\n\n$arr = [4,2,3,3,1,2,4,4,5];\n$counter = array_count_values($arr);\n$max_num\
    \ = max($counter);\n</code>\n<|/ a dscore=3 tags=php |>\n<| c |>\nThis doesn't\
    \ return the greatest number.\n<|/ c |>\n<| a dscore=2 |>\nUse array_reduce():\n\
    <code>\n$data = [ 4,2,3,3,1,2,4,4,5 ];\n$result = array_reduce($data, function($max,\
    \ $value) { \n    return $max > $value ? $max : $value; \n}, 0);\n</code>\nDemo\n\
    <|/ a tags=php |>\n<| a |>\nThis may help you\n<code>\n$array = [4,2,3,3,1,2,4,4,5];\n\
    $values = [];\narray_walk($array, function($value) use (&$values) {\n    $values[$value]\
    \ = isset($values[$value]) ? ++$values[$value] : $values;\n});\n\necho max($values);\n\
    </code>\n<|/ a dscore=2 tags=php |>\n<| a |>\nTry this out:\n<code>\n$arr = [4,2,3,3,1,2,4,4,5];\n\
    $count = array_count_values($arr);\n$max = 0;\nforeach ($count as $key => $value)\n\
    {\n    if ($value > $max)\n    {\n        $max = $value;\n    }\n}\n</code>\n\
    <|/ a tags=php dscore=2 |>\n<| c |>\nWhat happens when `$arr = [1,2,2,2,3,1];`\
    \ ?\n<|/ c |>\n<| c |>\n`[1,2,2,2,3,1]` returns `4` which is not the greatest\
    \ number.\n<|/ c |>\n<| a tags=php dscore=2 |>\nYou can use array_count_value",
  "    $max = -1;\n    $cnt = count($lst);\n    for($i=0;$i<$cnt;$i++) {\n       \
    \ $cur = $lst[$i];\n        if($cur > 0) {\n            $max = max($max, $cur);\n\
    \        }\n    }\n    return $max;\n}\n", "    $freq = [];\n    $max = $min =\
    \ INF;\n    foreach ($lst as $k => $v) {\n        if (isset($freq[$v])) {\n  \
    \          $freq[$v]++;\n        } else {\n            $freq[$v] = 1;\n      \
    \  }\n        if ($v > $max) {\n            $max = $v;\n        } elseif ($v <\
    \ $min) {\n            $min = $v;\n        }\n    }\n    foreach ($freq as $k\
    \ => $v) {\n        if ($v >= $min) {\n            if ($v > $max) {\n        \
    \        return -1;\n            }\n            $max = $v;\n        } else {\n\
    \            if ($v < $min) {\n                return -1;\n            }\n   \
    \         $min = $v;\n        }\n    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $greatest = max($lst);\n    if (array_key_exists($greatest, $freq)) {\n \
    \       $greatest_freq = $freq[$greatest];\n    } else {\n        $greatest_freq\
    \ = -1;\n    }\n    return $greatest - $greatest_freq;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nthanks for the solution, but I think it only works on arrays with strings\
    \ and integers right? I'm getting an error when I try to use it on array that\
    \ have a mix of strings and integers: Warning: array_count_values(): Can only\
    \ count STRING and INTEGER values\n<|/ c |>\n<| c |>\nYes it works on strings\
    \ and integers only, however it should work on arrays of mixed types. Check my\
    \ edit.\n<|/ c |>\n<| c |>\nThanks, however this solution is giving wrong results\
    \ when I test it with [1,2,2,3,1,3].\n<|/ c |>\n<| a dscore=3 |>\nHere's another\
    \ method using array_reduce():\n<code>", "    // write your code here\n}\n</cell>\n\
    <text>\nQ: Write a program that returns the element with largest value in a given\
    \ list.\n\n\n</text>\n<cell>", "    $hash = new SplObjectStorage();\n    $len\
    \ = count($lst);\n    for($i = 0; $i < $len; $i++) {\n        $current = $lst[$i];\n\
    \        if(!isset($hash[$current])) {\n            $hash[$current] = 1;\n   \
    \     } else {\n            $hash[$current]++;\n        }\n    }\n    $found =\
    \ 0;\n    $max = $len; \n    foreach($hash as $key => $count) {\n        if($count\
    \ > $max && $count >= $key) {\n            $found = $key;\n            $max =\
    \ $count;\n        }\n    }\n    return $found;\n}", "    $count = $res = 0;\n\
    \    foreach ($lst as $elm) {\n        $count[$elm]++;\n    }\n    foreach ($count\
    \ as $elm => $freq) {\n        if ($freq >= $elm) {\n            $res = $elm;\n\
    \            break;\n        }\n    }\n    return $res === false ? -1 : -1; //\
    \ -1 is unexpected\n}", "    // write your code here\n    foreach ($lst as $val){\n\
    \        $temp=$val-1;\n        if($val>1){\n            $temp++;\n        }\n\
    \        if(isset($frequency[$temp])){\n            if(!isset($frequency[$val])\
    \ || $frequency[$val]<$frequency[$temp]){\n                $frequency[$temp]=$frequency[$val];\n\
    \            }\n        }else{\n            $frequency[$temp]=$val+1;\n      \
    \  }\n    }\n    foreach ($frequency as $val=>$count){\n        if($count==count($lst)){\n\
    \            return $val-1;\n        }\n    }\n    return -1;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=arrays,search,arraylist,php |>\n<code>\n<?php\n\n$myArray =\
    \ array(0 => 4, 1 => 1, 2 => 2, 3 => 2, 4 => 3, 5 => 2, 6 => 4, 7 => 3, 8 => 4,\
    \ 9 => 5);\n", "    $vals = array_count_values($lst);\n    $max = max($vals);\n\
    \    $key = array_search($max, $vals);\n    return $key;\n}", "    if (!$lst)\
    \ {\n        return -1;\n    }\n\n    $max = -1;\n    $maxFreq = -1;\n\n    for\
    \ ($i = 0; $i < count($lst); ++$i) {\n        $freq = count(array_filter(\n  \
    \          $lst,\n            function($n) use ($i) {\n                return\
    \ $n >= $lst[$i];\n            }\n        ));\n\n        if ($freq >= $maxFreq\
    \ && $freq > 0) {\n            $max = $lst[$i];\n            $maxFreq = $freq;\n\
    \        }\n    }\n\n    return $max;\n}\n", "    return -1; // or -1, if the\
    \ list has zero or one elements.\n}\n", "  sort($lst);\n  $max = $lst[0];\n  for($i\
    \ = 1; $i < count($lst); $i++) {\n    if($max < $lst[$i] && $lst[$i] > 0) $max\
    \ = $lst[$i];\n  }\n  if($max <= 0) return -1;\n  for($i = 1; $i < count($lst);\
    \ $i++) {\n    if($lst[$i] == $max) $count++;\n  }\n  return $count;\n}\n", " \
    \   // Write your code here\n    if (empty($lst)) return -1;\n    $max = $lst[0];\n\
    \    $found = false;\n    $freq = 0;\n    foreach ($lst as $val) {\n        if\
    \ ($val == $max) {\n            if ($freq == 0) return $max;\n            $found\
    \ = true;\n            $freq--;\n        } else {\n            if ($freq > 0)\
    \ return -1;\n            $freq++;\n            $max = $val;\n        }\n    }\n\
    \    if ($found) return $max;\n    else return -1;\n}\n", "    if (count($lst)\
    \ == 0) {\n        return -1;\n    }\n    foreach ($lst as $key => $value) {\n\
    \        if ($value > 0 && $lst_frequency >= $value) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n", "    $result = -1;\n    $arr  = array_count_values($lst);\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $result) {\n   \
    \         $result = $key;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nHi, This solution would probably work, but it does\
    \ require to sort first. Sorting would cost a lot of CPU time, considering a relatively\
    \ small dataset.\n<|/ c |>\n<| c |>\nI agree with you. Sure it will cost some\
    \ time, but this is the only solution I know\n<|/ c |>\n<| c |>\nI think this\
    \ is a great solution, and I think it might be the most efficient in terms of\
    \ efficiency. But I like my solution better.\n<|/ c |>\n<| c |>\nYeah, I like\
    \ the simplicity of it. It still doesn't quite do the job, though, because this\
    \ would not work if the number was repeated more than one time. Like [3, 3, 3,\
    \ 3]. In the last case, it would return 3, but I want it to return 4.\n<|/ c |>\n\
    <| c |>\nYou can do that with count of items and array sum.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $highest = 0;\n    $frequency = 0;\n    foreach ($lst\
    \ as $n) {\n        if ($n > $highest) {\n            $highest = $n;\n       \
    \ }\n        if ($frequency) {\n            $frequency--;\n        }\n    }\n\
    \    return $highest >= 0 ? $highest : -1;\n}\n</code>\n<|/ a tags=php dscore=1\
    \ |>\n<| a tags=php dscore=1 |>\n<code>\n<?php\n$numbers = [1,2,2,3,3,3,4,4,5,5];\n\
    $find = 0;\n\nfor($i=0; $i<count($numbers)-1; $i++) {\n    if($numbers[$i] > $numbers[$i+1]\
    \ && $numbers[$i] != $numbers[$i+1]) {\n        $find = $numbers[$i];\n    }\n\
    }\n\necho \"Found $find number in array\";", "\t$i = 0;\n\t$max_freq = array_reduce($lst,\
    \ function($acc, $i) {\n\t\t$acc[$i] += $i;\n\t\treturn $acc;\n\t}, array());\n\
    \t\n\tforeach($max_freq as $k => $v) {\n\t\t$i = $k;\n\t\t$ret = null;\n\t\t\n\
    \t\tforeach($lst as $j) {\n\t\t\tif($j == $i) {\n\t\t\t\t$ret = $j;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif($ret) {\n\t\t\treturn $ret;\n\t\t}\n\t}\n\
    \treturn -1;\n}\n", "    $max  = 0;\n    $val  = 0;\n    $cnt  = 0;\n    foreach\
    \ ($lst as $e) {\n        if ($e == 0) continue;\n        $cnt++;\n        if\
    \ ($cnt > $max) {\n            $max = $cnt;\n            $val = $e;\n        }\n\
    \    }\n    return $max;\n}\n", "    $maxVal = 0;\n    $maxPos = 0;\n    foreach\
    \ ($lst as $key => $val) {\n        if ($val > 0 && $val >= $maxVal) {\n     \
    \       $maxVal = $val;\n            $maxPos = $key;\n        }\n    }\n    if\
    \ ($maxPos > 0) {\n        return $maxVal;\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nAh, yes. Yes, that does solve my problem - and\
    \ I see now that my example was too simple. I'll try it on my own code when I\
    \ get back from lunch and let you know how it goes. Thanks.\n<|/ c |>\n<| c |>\n\
    I realized that the example I gave wasn't really sufficient to show the entire\
    \ problem. I've updated the original question to include my actual problem, which\
    \ has me having trouble generating the right formula to solve it.\n<|/ c |>\n\
    <| c |>\n: I have updated my answer to account for the new specification.\n<|/\
    \ c |>\n<| c |>\nAh yes, that makes sense. I'll give it a shot when I get back\
    \ from lunch and let you know. Thanks.\n<|/ c |>\n<| c |>\n, thank you for your\
    \ help, it's really appreciated. The new code works, but I'm having trouble generating\
    \ the formula. I've updated my original question to show what I'm looking for.\n\
    <|/ c |>\n<| a dscore=0 |>\nA slightly simpler solution that I think works (I\
    \ have no idea whether it's correct):\n<code>", "    $res = max($lst);\n    foreach\
    \ ($lst as $key => $val) {\n        if ($val > $res) {\n            $res = $val;\n\
    \        }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=php,algorithm |>\n\
    <| a dscore=0 |>\nOne can use array_count_values() to find the frequency of each\
    \ element in the array and then use array_search() to get the greatest one that\
    \ is greater than zero :\n<code>\n$arr = [4,1,2,2,3,1];\n$freq = array_count_values($arr);\n\
    $res = array_search($freq, array_filter($freq, function($k){return $k>0;}));\n\
    </code>\n<|/ a tags=php,algorithm |>\n<| a tags=php,algorithm dscore=0 |>\nYou\
    \ could use array_count_values and find the key with biggest value, then get the\
    \ value from array:\n<code>\n$arr = array(4,1,2,2,3,1);\n$counts = array_count_values($arr);\n\
    $maxKey = max(array_keys($counts));\n$maxVal = $counts[$maxKey];\n\nif($maxVal\
    \ > 0){\n    var_dump($maxKey);\n}else{\n    echo \"There is no such a value!\"\
    ;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nA short and simple solution based on\
    \ array_count_values.\n<code>\n<?php\n$arr = array(4,1,2,2,3,1);\n$freq = array_count_values($arr);\n\
    $maxKey = array_search(max($freq), $freq);\nif($maxKey !== false)\n{\n    echo\
    \ 'The greatest value is: ' . $maxKey;\n}\nelse\n{\n    echo 'There is no such\
    \ value!';\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| a tags=php,algorithm dscore=0\
    \ |>\nThis code should solve the problem:\n<code>\n$nums = [\n    4,\n    1,2,2,3,1\n\
    ];\n$max = 0;\n$maxVal = 0;\n\nforeach($nums as $num){\n    if($num > $max){\n\
    \        $max = $num;\n        $maxVal = $num;\n    }else{\n        if($num <\
    \ $maxVal){\n            $maxVal = $num;\n        }\n    }\n}\n\nif($maxVal >\
    \ 0){\n    echo 'The greatest value is: ' . $maxVal;\n}else{\n    echo 'There\
    \ is no such a value!';\n}\n</code>\n<|/ a |>\n<| a tags=php,algorithm dscore=0\
    \ |>\nI came ", "  \n  $freq = array_count_values($lst);\n  \n  foreach($freq\
    \ as $num => $freq) {\n    if ($freq > $freq[$num]) {\n      return $num;\n  \
    \  }\n  }\n  \n  return -1;\n}\n", "    sort($lst);\n    foreach ($lst as $k)\
    \ {\n        $n = 1;\n        foreach ($lst as $i => $v) {\n            if ($v\
    \ > $k && $v == $k) {\n                $n++;\n                if ($i > $k) {\n\
    \                    return $i;\n                }\n            }\n        }\n\
    \        if ($n == count($lst)) {\n            return $k;\n        }\n    }\n\
    \    return -1;\n}\n", "    \n    $arr = array_count_values($lst);\n    \n   \
    \ foreach($arr as $key => $val){\n        if($val>0 && $val>$lst[$key]){\n   \
    \         $res = $key;\n        }\n    }\n    \n    return $res;\n}", "    $freq\
    \ = array_count_values($lst);\n    $res = max(array_filter($freq, function($v)\
    \ use($lst) { return $v >= $lst; }));\n    return $res == $lst ? -1 : $res;\n}",
  "\t\n\t\n\t\n\tif (count($lst) == 0) {\n\t\treturn -1;\n\t}\n\t$freq = array_count_values($lst);\n\
    \tksort($freq);\n\t\n\tforeach ($freq as $key => $value) {\n\t\tif ($value >=\
    \ $lst[0]) {\n\t\t\treturn $key;\n\t\t}\n\t}\n\treturn -1;\n}\n\necho search([4,\
    \ 1, 2, 2, 3, 1]);\n</code>\n<|/ a |>\n<| c |>\nGood answer. But please explain\
    \ why the OP code does not work so OP can understand.\n<|/ c |>\n<| c |>\nYou\
    \ forgot to check if `count($lst) == 0`\n<|/ c |>\n<| c |>\nThe main idea is to\
    \ sort the array first and check if array is empty then return -1, if array has\
    \ values then check frequency of each value and if frequency is greater than 0\
    \ then return that value. Else return -1. That's it.\n<|/ c |>\n<| c |>\nYes I\
    \ know. But I think people should try to understand what your code does, not just\
    \ copy-paste.\n<|/ c |>\n<| c |>\nThe code does exactly what it is supposed to.\
    \ Do you have any questions regarding the code?\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\n", "    sort($lst);\n    $frequency = array_count_values($lst);\n\
    \    $frequency[$lst[0]] = 0;\n\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        if ($frequency[$lst[$i]] >= $frequency[$lst[0]]) {\n            return\
    \ $lst[$i];\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,search\
    \ |>\n<| a tags=php,search |>\nFor a large list, array_count_values is extremely\
    \ slow (for me) on PHP7.1.\nSo here is a more efficient version using binary search:\n\
    <code>", "    $arr = [];\n    $freq = [];\n    foreach ($lst as $val) {\n    \
    \    $arr[$val] = isset($arr[$val]) ? $arr[$val] + 1 : 1;\n        $freq[$val]\
    \ = isset($freq[$val]) ? $freq[$val] + 1 : 1;\n    }\n    $keys = array_keys($arr,\
    \ $arr[$freq[0]]);\n    $res = -1;\n    foreach ($keys as $key) {\n        $curr\
    \ = $freq[$key];\n        if ($freq[$key] == $arr[$key]) {\n            $res =\
    \ $key;\n            break;\n        } else if ($arr[$key] > $arr[$curr]) {\n\
    \            $res = $key;\n            break;\n        }\n    }\n    return $res;\n\
    }\n</code>\n<|/ a tags=php,algorithm,sorting,arrays |>\n<| c |>\nThis does not\
    \ seem to work if you test it with an array like `[4, 5, 5, 4, 4]` because `4`\
    \ appears twice in the array. It seems to always return `4` instead of `2`.\n\
    <|/ c |>\n<| a tags=php,algorithm,sorting,arrays |>\n<code>\n<?php\n", "    $frequency\
    \ = array_count_values($lst);\n    return array_search(max($frequency), $frequency);\n\
    }\n", "    foreach ($lst as $key => $value) {\n        if ($value > 0 || $value\
    \ == $key) {\n            $lst[$key] = $value;\n            $freq[$value] += 1;\n\
    \        }\n    }\n\n    $max_key = 0;\n    $max_freq = -1;\n    foreach ($freq\
    \ as $key => $freq) {\n        if ($freq > $max_freq) {\n            $max_freq\
    \ = $freq;\n            $max_key = $key;\n        }\n    }\n\n    return $max_key;\n\
    }\n", "    $i = 0;\n    $count = array();\n    foreach ($lst as $value) {\n  \
    \      if ($count[$value] == 0)\n            $count[$value] = 1;\n        else\n\
    \            $count[$value]++;\n    }\n    foreach ($count as $value => $num)\n\
    \        if ($num > 0 && $num <= count($lst))\n            $i = max($i, $value);\n\
    \    return $i;\n}\n", "    $frequency = array_count_values($lst);\n    arsort($frequency);\n\
    \    if (count($frequency) == 0) {\n        return -1;\n    }\n\n    foreach ($frequency\
    \ as $key => $value) {\n        if ((int)$key >= $frequency[0]) {\n          \
    \  return (int)$key;\n        }\n    }\n\n    return -1;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nWhy do you need `arsort()`?\n<|/ c |>\n<| c |>\nBecause `array_count_values()`\
    \ returns the values in their original order. If you sort them the keys will no\
    \ longer match and the search will fail.\n<|/ c |>\n<| c |>\nI see, I forgot that.\
    \ Thanks.\n<|/ c |>\n<| c |>\nThe OP specifically requested it for PHP and I thought\
    \ that was a good answer for him/her.\n<|/ c |>\n<| a dscore=0 tags=php,algorithm\
    \ |>\n<code>\n<?php", "    return searchHelper($lst, new Array());\n}\n", "  \
    \  $max = $lst[0];\n    foreach ($lst as $num) {\n        if ($num > $max) {\n\
    \            $max = $num;\n        }\n    }\n    return $max;\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting dscore=0 |>\n<code>",
  "  $n = count($lst);\n  if ($n == 0) return -1;\n  $max = $lst[0];\n  $max = max($max,\
    \ $lst[1]);\n  for ($i = 2; $i < $n; ++$i) {\n    $max = $max > $lst[$i] ? $max\
    \ : $lst[$i];\n  }\n  return $max;\n}\n", "    $result = -1;\n    foreach ($lst\
    \ as $key => $val) {\n        if ($val >= 0) {\n            if (isset($result[$val]))\
    \ {\n                $result[$val]++;\n            } else {\n                $result[$val]\
    \ = 1;\n            }\n        }\n    }\n    foreach ($result as $key => $val)\
    \ {\n        if ($val > 0) {\n            $result = $key;\n        }\n    }\n\
    \    return $result;\n}\n$arr = [4, 1, 2, 2, 3, 1];\nprint_r(search($arr));\n\
    </code>\n<|/ a |>\n<| a tags=php,arrays,algorithm |>\n<code>", "  foreach($lst\
    \ as $k => $v){\n    if($v == 0) continue;\n    if($v > 0){\n      if($v == $lst[$k]){\n\
    \        unset($lst[$k]);\n        return $lst;\n      }\n      else{\n      \
    \  $v = $lst[$k];\n      }\n    }\n  }\n  return -1;\n}\n", "    return max(array_flip($lst),\
    \ function($value, $key) {\n        return $value >= $key;\n    });\n}\n</code>\n\
    This uses the max function, which returns a scalar value (the largest value in\
    \ the array). We use the array_flip function to create the array keys and values\
    \ swapped. Since we flip the array keys, it makes it easy to get the largest value\
    \ greater than 0. That function returns a function, which accepts the current\
    \ key and value, and returns true if the current value is greater than or equal\
    \ to the current key.\n<|/ a tags=arrays,php |>\n<| c |>\nThank you so much! I\
    \ actually used a similar method but it was really hard for me to understand how\
    \ you did it :) So i thought i would see if the expert can explain it better!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n<?php", "    foreach ($lst as $key => $value)\
    \ {\n        if ($value > 0)\n            return $value;\n    }\n    return -1;\n\
    }\n", "    $arr = array_count_values($lst);\n\n    reset($arr);\n\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value > 1) {\n            return $key;\n\
    \        }\n    }\n\n    return -1;\n}\n</code>\n<|/ a tags=php,algorithm,array-algorithms,arrays,search\
    \ |>\n<| a |>\nFor those that don't like O(n^2) it can be done in O(n):\n<code>",
  "    sort($lst);\n    return $lst[count($lst) - 1] >= 0 ? $lst[count($lst) - 1]\
    \ : -1;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a dscore=0 |>\nThis problem\
    \ can be solved in linear time, O(n) time, by first sorting the list by decreasing\
    \ frequency. Then to find the greatest number that appears at least a certain\
    \ number of times, first find the number that appears the least number of times\
    \ in the sorted array. For the purpose of this problem, we only have to keep track\
    \ of two variables - the lowest number seen and the number of times it appears.\
    \ After sorting the array, we know that the least number that appears at least\
    \ n times is the number with the least frequency in the array.\n<code>", "   \
    \ $max = 0;\n    foreach ($lst as $num) {\n        if ($num > 0) {\n         \
    \   $freq = array_count_values($lst);\n            if (isset($freq[$num])) {\n\
    \                if ($freq[$num] >= $freq[$max]) {\n                    $max =\
    \ $num;\n                }\n            }\n        }\n    }\n    return $max;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,php,arraylist,algorithm |>\n<| c |>\nYou\
    \ might get false positives here if the list contains negative integers, since\
    \ it will return 0 for the negative numbers. Also, how does this compare to the\
    \ existing `array_count_values` solution?\n<|/ c |>\n<| c |>\nAs far as I understand\
    \ the question this is exactly what it does. The difference is that it returns\
    \ -1 if no such value exist, whereas the array_count_values returns 0.\n<|/ c\
    \ |>\n<| c |>\nYou're right, it does return `-1` instead of `0`. But it returns\
    \ `-1` instead of `0`, which is what I meant. I tested your function and it returns\
    \ the wrong result, which happens to be `-1`. I think this should be fixed by\
    \ changing `$max = $num;` to `$max = $num === 0 ? -1 : max($max, $num);`. Also,\
    \ your second `array_filter` doesn't work properly. I think it should be: `$result\
    \ = array_filter(array_count_values($lst), function($num) {\n            return\
    \ ($num !== 0);\n        });` - this way it will return the empty array when there\
    \ are no elements at all.\n<|/ c |>\n<| c |>\nYou are correct, it should be `max($max,\
    \ $num === 0 ? -1 : max($max, $num))`. Yes, this can be easily fixed by doing\
    \ so. Also I see that `array_filter` does not work properly. I edited the answer\
    \ and I think it should work properly now.\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ work. Test case: `search([7, 0, -1, -1, 1, 7])` returns `-1`.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nHere is a simple and elegant solution. \n<code>\n<?php", "  \
    \  $result = -1;\n    foreach($lst as $num) {\n        if($num > 0 && $num <=\
    \ $result) {\n            $result = $num;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 tags=arrays,php |>\n<| c |>\nThis does not handle negative\
    \ integers as you mentioned. It also does not handle the case where all elements\
    \ are the same. e.g. search([1,2,3,4,5]) would return 5.\n<|/ c |>\n<| a dscore=0\
    \ tags=arrays,php |>\nYou could simply loop through the array and keep track of\
    \ the current max. For example:\n<code>\n$numbers = array(4,1,2,2,3,1);\n$max\
    \ = null;\nforeach($numbers as $number)\n{\n    if($number == $max) continue;\n\
    \    if($max != null)\n    {\n        if($number >= $max) $max = $number;\n  \
    \  }\n    else\n    {\n        $max = $number;\n    }\n}\necho $max;\n</code>\n\
    <|/ a |>\n<| a tags=arrays,php |>\nHere's a solution that uses array_filter to\
    \ filter the input array for values greater than or equal to the current maximum\
    \ (which is set to null initially).\n<code>\n$numbers = array(4,1,2,2,3,1);\n\
    $max = null;\n$filteredNumbers = array_filter($numbers, function($n) use ($max)\
    \ {\n    if($max !== null) \n        return $n > $max;\n    $max = $n;\n    return\
    \ $n >= $max;\n});\nif ($filteredNumbers) {\n    echo \"Maximum is \".$filteredNumbers[0];\n\
    } else {\n    echo \"No max is found\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    I came up with this:\n<code>", "  $max = -1;\n  $frequency = array_count_values($lst);\n\
    \  foreach ($frequency as $key => $val) {\n    if ($val >= 1) {\n      $max =\
    \ $key;\n    }\n  }\n  return $max;\n}\n", "    $max = array_pop($lst);\n    foreach\
    \ ($lst as $num) {\n        if ($num > $max) {\n            $max = $num;\n   \
    \     }\n    }\n    if ($max == $max) {\n        return $max;\n    }\n    return\
    \ -1;\n}", "    if (count($lst) == 0) {\n        return -1;\n    }\n\n    $max_freq\
    \ = 0;\n    $res = -1;\n\n    foreach($lst as $v) {\n        if ($v == $max_freq)\
    \ {\n            continue;\n        }\n\n        if ($v > 0) {\n            $freq\
    \ = count(array_filter(array($v), function($v) use ($lst) {\n                return\
    \ ($v == $lst);\n            }));\n\n            if ($freq > $max_freq) {\n  \
    \              $res = $v;\n                $max_freq = $freq;\n            }\n\
    \        }\n    }\n\n    return $res;\n}\n", "    $arr = [];\n    foreach($lst\
    \ as $v) {\n        if(!isset($arr[$v])) $arr[$v] = 0;\n        $arr[$v] += 1;\n\
    \    }\n\n    $val = max($arr);\n    foreach($arr as $k => $v) {\n        if($v\
    \ > $val) return -1;\n    }\n    return $val;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=arrays,php dscore=0 |>\nI think this is what you are looking for.\n\
    <code>\n$array = array(4, 1, 2, 2, 3, 1);\n$maxValue = 0;\nforeach($array as $val){\n\
    \    if ($val > $maxValue) {\n        $maxValue = $val;\n    }\n}\nvar_dump($maxValue);\n\
    </code>\n<|/ a |>\n<| c |>\nThis only works when there are more than one max value.\n\
    <|/ c |>\n<| c |>\n, I've updated my answer. Thanks for the correction.\n<|/ c\
    \ |>\n<| a |>\n<code>\n$array = array(4, 1, 2, 2, 3, 1);\n$max = max ($array);\n\
    $countOfMax = count($array) - count(array_diff($array, array($max)));\n</code>\n\
    <|/ a dscore=0 tags=arrays,php |>\n<| c |>\nThis only works when there are more\
    \ than one max value.\n<|/ c |>\n<| a |>\nHere's a solution using array_filter\
    \ to filter out all of the values that are equal to their index number plus one,\
    \ then use array_count_values to count how many of each value there are.\n<code>\n\
    $array = array(4, 1, 2, 2, 3, 1);\n$count = array_count_values(array_filter(\n\
    \    array_map(function($v){return $v+1;}, $array)\n));\n$max = max(array_keys($count));\n\
    $maxCount = 0;\nif(isset($count[$max])){\n    $maxCount = $count[$max];\n}\nvar_dump($maxCount,\
    \ $array[$max]);\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| c |>\nI didn't\
    \ test this, but I think I understand what you're saying. I think this would be\
    \ more efficient than the answer I gave, because I only have to check every value\
    \ once.\n<|/ c |>\n<| c |>\nYes, I believe this to be the most efficient solution.\
    \ I'm not sure if there are any faster ways, but I did test it. :)\n<|/ c |>\n\
    <| c |>\nThis would be more efficient but I don't think it works with OP's data.\
    \  The max value is `1` not `4`.  Try changing the array in the ", "    foreach\
    \ ($lst as $value) {\n        if ($value > 0 && ($value >= $lst)) {\n        \
    \    $result = 0;\n            foreach ($lst as $key => $value) {\n          \
    \      if ($value == $value) {\n                    $result = $value;\n      \
    \          }\n            }\n            return $result;\n        }\n    }\n}",
  "    $freq = [];\n    foreach ($lst as $num) {\n        if (isset($freq[$num]))\
    \ {\n            $freq[$num] += 1;\n        } else {\n            $freq[$num]\
    \ = 1;\n        }\n    }\n    $max_num = array_search(max($freq), $freq);\n  \
    \  return ($max_num > -1) ? $max_num : -1;\n}", "    $freq = array_count_values($lst);\n\
    \    foreach($freq as $num => $val) {\n        if ($val > 0) {\n            return\
    \ $num;\n        }\n    }\n    return -1;\n}\n\n/**\n * A recursive function that\
    \ returns sum of first n integers in array.\n *\n * @param int $n\n *\n * @return\
    \ int\n */", "    $lst_length = count($lst);\n    if ($lst_length == 0) {\n  \
    \      return -1;\n    }\n    $max = -1;\n    $max_freq = 1;\n    for ($i = 0;\
    \ $i < $lst_length; $i++) {\n        if ($lst[$i] == $max) {\n            $max_freq\
    \ += 1;\n        } else {\n            if ($max_freq >= $lst[$i]) {\n        \
    \        $max = $lst[$i];\n                $max_freq = 1;\n            }\n   \
    \     }\n    }\n    return $max;\n}\n", "    return max($lst);\n}\n</code>\nThe\
    \ above works by calculating the max of the entire list, then calling max again\
    \ on the subset that passes the criteria. \nThis solution works because we're\
    \ only operating on the subset that passes the criteria. \nThe code could be made\
    \ more elegant by adding a helper function and combining it with the above code,\
    \ but that would make it more confusing for those new to programming. I hope this\
    \ helps!\n<|/ a dscore=2 |>\n<| c |>\nVery nice!  I liked how simple the question\
    \ was - I'm a beginner to this and want to learn too!\n<|/ c |>\n<| c |>\nThank\
    \ you! This was a great learning experience for me because I've been struggling\
    \ with the concept of recursion for quite some time.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI took another approach with recursion function\n<code>", "    if (empty($lst))\
    \ {\n        return -1;\n    }\n    $greatest = 0;\n    $count = 0;\n    foreach\
    \ ($lst as $value) {\n        $count++;\n        if ($value >= $greatest) {\n\
    \            $greatest = $value;\n        }\n        if ($count > $value) {\n\
    \            $count = $value;\n        }\n    }\n    return $greatest;\n}\n",
  "    sort($lst);\n    $val = $lst[0];\n    $freq = 1;\n\n    foreach($lst as $i\
    \ => $el) {\n        if($el > $val) {\n            $val = $el;\n        }\n  \
    \      if($freq >= $val) {\n            break;\n        }\n        $freq++;\n\
    \    }\n    return $freq ? $val : -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    If my array is like this \n$lst = array(\n     1 => 4,\n     2 => 1,\n     3 =>\
    \ 5,\n     4 => 3,\n     5 => 1,\n     6 => 2,\n     7 => 2,\n     8 => 3,\n \
    \    9 => 4,\n    10 => 1,\n    11 => 2,\n    12 => 2,\n    13 => 3,\n    14 =>\
    \ 3,\n    15 => 4,\n    16 => 4,\n    17 => 4,\n    18 => 4,\n    19 => 4,\n);\n\
    \nHow to solve it then?\n<|/ c |>\n<| c |>\n- I edited my answer. Do you mean?\n\
    <|/ c |>\n<| a |>\nThe first thing you should do is rethink your approach to your\
    \ problem. I believe your professor wants you to write your own version of merge\
    \ sort, and so the first thing you should do is to write a sorting algorithm that\
    \ sorts a single sorted list - a classic example: merge sort will sort a list\
    \ of size 1 by splitting it in two, and sorting each half, then merging them together\
    \ again, and repeating this until you get a list of size 1. \nIf you did this\
    \ correctly and used the algorithm described above recursively, you would have\
    \ a solution that is a single merge sort with O(n log n) complexity. \nThe second\
    \ thing you should do is to figure out how to sort a list of n items by merging\
    \ it with itself n times. A classic example of this would be quicksort, where\
    \ you split the list into 2 parts (the left half, and the right half), and then\
    \ recursively sort each half, merging the resulting lists. At each step you sort\
    \ smaller lists of items until the original list is exhausted. \nIf all of this\
    \ sounds confusing or difficult to do, don't worry, you will be doing it quite\
    \ a bit later. \nThe third thing you should do is try to write some code that\
    \ can sort a list of n items (the base case). \nThis should hopefully get you\
    \ started.\n<|/ a dscore=0 tags=php,merge,sorting |>\n<| a tags=php,merge,sorting\
    \ |>\nMerge Sort is the fastest sort algorithm. You can read ", "    $freq = array_count_values($lst);\n\
    \    if (empty($freq)) return -1;\n\n    $val = max($freq);\n    foreach ($freq\
    \ as $k => $v) {\n        if ($v >= $val) {\n            return $k;\n        }\n\
    \    }\n    return -1;\n}\n\n$a = array(2, 4, 2, 3);\nprint_r(search($a));\n",
  "    if (empty($lst) || count($lst) === 0) {\n        return -1;\n    }\n\n    sort($lst);\n\
    \    $result = $lst[0];\n    $freq = count($lst);\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] > $result) {\n            $result = $lst[$i];\n\
    \            $freq = $i;\n        }\n    }\n    return $result;\n}\n", "    //\
    \ Write your code here\n    $a = array_count_values($lst);\n    return max(array_filter($a,\
    \ function($x) { return $x > 0;}));\n}\n", "    // Write your code here\n    $a\
    \ = array_count_values($lst);\n    \n    foreach($a as $key => $value) {\n   \
    \     if($value > 1) {\n            $return = $key;\n            break;\n    \
    \    }\n    }\n    return $return;\n}\n\n$arr = [1,1,1,1];\n\n$a = search($arr);\n\
    var_dump($a); // 1\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nYou can use\
    \ array_count_values() method to count each value in the array. Iterate over the\
    \ array and check with condition that if the value is greater than 1 then break\
    \ the loop and return key value. \n<code>\n$arr = [1, 1, 1, 2, 2, 3];\n$count\
    \ = array_count_values($arr);\n$i = 0;\nforeach($count as $key => $value){\n \
    \   if($value >= 1) break;\n    $i++;\n}\nreturn $i;\n</code>\n<|/ a tags=php,arrays,frequency\
    \ |>\n<| c |>\nPlease add some explanation to your answer by editing it, such\
    \ that others can learn from it\n<|/ c |>\n<| c |>\nI have added some explanation.\n\
    <|/ c |>\n<| a |>\n<code>", "    sort($lst);\n    $i = 0;\n    foreach ($lst as\
    \ $num) {\n        if ($num > 0) {\n            if ($num == $lst[$i]) {\n    \
    \            $i++;\n            }\n            else {\n                $i = array_search($num,\
    \ $lst);\n            }\n        }\n        else {\n            return -1;\n \
    \       }\n    }\n    return $i;\n}\n$result = search([4, 1, 2, 2, 3, 1]);\necho\
    \ $result;", "  // Write your code here\n  \n  $res = -1;\n  $i = 0;\n  $cnt =\
    \ 0;\n  foreach ($lst as $val) {\n    if ($cnt >= $val) {\n      $res = $val;\n\
    \      $cnt = $i;\n    }\n    $i++;\n  }\n  return $res;\n}\n$res = search([4,\
    \ 1, 2, 2, 3, 1]);\necho $res; // 2\n$res = search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\n\
    echo $res; // 3\n$res = search([5, 5, 4, 4, 4]);\necho $res; // -1", "\tforeach\
    \ ($lst as $num) {\n\t\t$freq[$num]++;\n\t}\n\n\tasort($freq);\n\n\tforeach ($freq\
    \ as $key => $value) {\n\t\tif ($value > 0) {\n\t\t\treturn $key;\n\t\t}\n\t}\n\
    \treturn -1;\n}\n", "    return $lst[array_search($lst[0],$lst)];\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI am not sure, I understand your solution, but in\
    \ PHP you cannot assign a value to array index. So, there is no point in returning\
    \ the array index.\n<|/ c |>\n<| a |>\nThis code checks the frequency of each\
    \ element, returns -1 if there is no such a value. Otherwise it returns the value\
    \ of frequency as it is stored in the array.\n<code>\n<?php", "    sort($lst);\n\
    \    $len = count($lst) - 1;\n    for($i = 0; $i < $len; $i++) {\n        $freq\
    \ = 0;\n        for($j = $i; $j < $len; $j++) {\n            if($lst[$i] == $lst[$j])\
    \ {\n                $freq++;\n            }\n        }\n        if($freq > 0)\
    \ {\n            if($lst[$i] > $i) {\n                return $lst[$i];\n     \
    \       }\n        } else {\n            return -1;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI appreciate you taking the time\
    \ to share your solution, but it's not really an answer to the question that was\
    \ asked.  It is a solution to the question that was asked.\n<|/ c |>\n<| c |>\n\
    It is a solution to the question that was asked.\n<|/ c |>\n<| c |>\nThis answer\
    \ is wrong as it fails for inputs like [1,2,2,3,3]. Outputs should be 2 and 3.\
    \ Also it makes O(n^2) time complexity when it should be O(n) time complexity\
    \ which can be solved in O(n) using hashing.\n<|/ c |>\n<| a dscore=1 |>\nThis\
    \ is my solution\n<code>\n<?php", "    foreach ($lst as $item) {\n        if ($item\
    \ == 0) {\n            return 0;\n        } else if ($item == 1) {\n         \
    \   return 1;\n        }\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nOkay, I just edited\
    \ the question. I forgot about it. Do you think it still counts as a duplicate?\n\
    <|/ c |>\n<| c |>\nNo, your new question has nothing to do with this.\n<|/ c |>\n\
    <| a tags=php |>\nJust for fun, this is not optimized.\n<code>\n<?php\n\n$l =\
    \ [1, 5, 2, 3, 4, 2, 4, 5, 6];\n\n$max = 0;\n\nforeach($l as $e) {\n    if($e\
    \ > $max) {\n        $max = $e;\n    }\n}\n\necho($max);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nIt's funny that no one answered my question but you did so fast.\
    \ I guess it's too late, though.\n<|/ c |>\n<| c |>\nOkay, I just edited the question.\
    \ I forgot about it. Do you think it still counts as a duplicate?\n<|/ c |>\n\
    <| a |>\nUse array_filter() to filter out zero elements and then use max() to\
    \ find out the max of the remaining array\n<code>\n$a = [4, 1, 2, 2, 3, 1];\n\
    echo max(array_filter($a));\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nOkay,\
    \ I just edited the question. I forgot about it. Do you think it still counts\
    \ as a duplicate?\n<|/ c |>\n<| a |>\n<code>", "    $frequency = array_count_values($lst);\n\
    \    asort($frequency);\n    $result = array();\n    foreach ($frequency as $value\
    \ => $occurrence) {\n        if ($occurrence > 0 && $occurrence >= $frequency[$value])\
    \ {\n            $result[$value] = $value;\n        }\n    }\n    if (count($result)\
    \ == 0) {\n        return -1;\n    } else {\n        return array_pop($result);\n\
    \    }\n}", "    $result = -1;\n    $freq = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        if (isset($freq[$value]) && $freq[$value] >= $freq[$key])\
    \ {\n            $result = $key;\n        }\n        $freq[$key] = $value;\n \
    \   }\n    return $result;\n}\n", "    $freq = array_count_values($lst);\n   \
    \ $result = max($freq);\n    if(isset($freq[$result])) {\n        if($freq[$result]\
    \ >= $lst[array_search($result, $lst)]) {\n            return $result;\n     \
    \   }\n    }\n    return -1;\n}\n", "    $max = $lst[0];\n    foreach ($lst as\
    \ $val) {\n        if ($val > $max) {\n            $max = $val;\n        }\n \
    \       if ($val == $max) {\n            $max += 1;\n        }\n    }\n    return\
    \ $max;\n}\n\n$arr = [0, 1, 2, 0, 1, 2, 1, 2, 0, 2, 1, 2, 2, 0, 1, 2, 2, 0, 1,\
    \ 2, 2, 0];\necho search($arr);\n</code>\nThis code produces your desired result:\n\
    <code>\n5\n</code>\n<|/ a |>\n<| a dscore=1 tags=arrays,php |>\nYou can try array_count_values()\
    \ with max().\n<code>\n$array = [3, 1, 2, 2, 1, 3, 4, 3, 2, 3, 2, 3, 0, 3, 2,\
    \ 0, 3];\n$count = array_count_values($array);\necho max($count);\n</code>\nOutput:\n\
    <code>\n4\n</code>\nDemo.\n<|/ a |>\n<| a tags=arrays,php |>\nYou can use the\
    \ max function, and order the array according to its value :\n<code>\n$array =\
    \ [3, 1, 2, 2, 1, 3, 4, 3, 2, 3, 2, 3, 0, 3, 2, 0, 3];\n$array = array_flip($array);\n\
    \nvar_dump($array);\necho max($array);\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = [3, 1, 2, 2, 1, 3, 4, 3, 2, 3, 2, 3, 0, 3, 2, 0, 3];\n\
    $result = array_count_values($array);\necho max($result);\n</code>\nOutput\n<code>\n\
    4\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| c |>\nThe only difference\
    \ between this and [Rajdeep's answer](https://stackoverflow.com/a/56654342/1709587)\
    \ is that you use `array_count_values` instead of `array_count_keys`.\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n<?php\n$array = [3, 1, 2, 2, 1, 3, 4, 3, 2, 3,\
    \ 2, 3, 0, 3, 2, 0, 3];\n$array = array_flip($array);\n\n$array1 = [];\nforeach\
    \ ($array as $key => $value) {\n    $array1[$value] = $key;\n}\n$array2 = array_count_values($array);\n\
    \necho max($array2);\nvar_dump($array1);\n</code>\nOutput\n<code>\n4\narray(3)\
    \ {\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [0]=>\n  int(0)\n}\n</code>\n<|/\
    \ a ", "    // Write your code here.\n}\n</cell>\n<text>\nTo improve the search\
    \ function, you can take advantage of the fact that in mathematics, the greatest\
    \ integer is defined as the largest number that is smaller than the given number.\n\
    \n\n</text>\n<cell>", "    $freqs = array_count_values($lst);\n    $maxVal = max($freqs);\n\
    \    foreach ($freqs as $val => $cnt) {\n        if ($cnt >= $maxVal) {\n    \
    \        return $val;\n        }\n    }\n    return -1;\n}\n", "    $max = array_pop($lst);\n\
    \    foreach ($lst as $value) {\n        if ($value > $max) {\n            $max\
    \ = $value;\n        }\n    }\n    return $max;\n}", "    if (empty($lst)) {\n\
    \        return -1;\n    }\n    $max = max($lst);\n    $frequency = array_count_values($lst);\n\
    \    return isset($frequency[$max]) ? $max : -1;\n}\n", "    $result = -1;\n \
    \   $max = 0;\n    foreach($lst as $i) {\n        if($i > 0 && isset($lst[$i])\
    \ && $lst[$i] >= $i) {\n            $result += $i;\n            $max = max($max,\
    \ $i);\n        }\n    }\n    return $result > $max ? $result : $max;\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nThis solution is very good, but it's not O(N),\
    \ it uses O(n) space. But the difference is negligible in practice.\n<|/ c |>\n\
    <| c |>\nWhat are you talking about? How does it use O(n) space? It's just one\
    \ for loop.\n<|/ c |>\n<| c |>\nIt's a nested loop, O(n^2). O(n) is only constant\
    \ time and O(n) space means that you're using memory proportional to the number\
    \ of elements you want to search. O(n^2) is O(n^2) memory usage per element, O(n^3)\
    \ means O(n^3) space usage, O(n^4) means O(n^4) space, etc.\n<|/ c |>\n<| c |>\n\
    It's just one for loop and one increment of a variable and one conditional check,\
    \ no other function calls. O(n) is only constant time and O(n) space means that\
    \ you're using memory proportional to the number of elements you want to search.\
    \ O(n^2) is O(n^2) memory usage per element, O(n^3) means O(n^3) space usage,\
    \ O(n^4) means O(n^4) space, etc.\n<|/ c |>\n<| c |>\nYeah, but it's still O(n^2),\
    \ because you're creating two arrays for each search. It's O(n^2) because you're\
    \ doing the search N times. You're creating O(n^2) arrays, then checking each\
    \ of them N times through O(n^2) comparisons. So it's O(n^2+n^2) time complexity,\
    \ O(n^2) space.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $largest = array();\n\
    \    foreach ($lst as $key => $val) {\n        if ($val > 0) {\n            $count\
    \ = array_count_values($lst);\n            $val += $count[$val];\n           \
    \ $largest[$val] = $key;\n        }\n    }\n    foreach ($largest as $key => $val)\
    \ {\n        if ($val >= count($lst)) {\n            return -1;\n        }\n \
    \   }\n    return $key;\n}\n", "    $result=-1;\n    $frequency=array();\n   \
    \ foreach($lst as $item){\n        if(array_key_exists($item, $frequency)){\n\
    \            $frequency[$item]++;\n        }else{\n            $frequency[$item]=1;\n\
    \        }\n    }\n    asort($frequency);\n    foreach($frequency as $item =>\
    \ $frequency){\n        if($frequency>0){\n            $result=$item;\n      \
    \      break;\n        }\n    }\n    return $result;\n}", "    $result = 0;\n\
    \    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] > 0 && $lst[$i]\
    \ == $lst[$result]) {\n            $result++;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $result;\n}", "    $freq = $freqs = [];\n    for\
    \ ($i = 0; $i < count($lst); ++$i) {\n        if (!isset($freqs[$lst[$i]])) {\n\
    \            $freqs[$lst[$i]] = 1;\n        } else {\n            $freqs[$lst[$i]]\
    \ += 1;\n        }\n    }\n    $max = $max = -1;\n    foreach ($freqs as $key\
    \ => $value) {\n        if ($value > $max) {\n            $max = $value;\n   \
    \         $maxKey = $key;\n        }\n    }\n    return $maxKey > -1 ? $maxKey\
    \ : -1;\n}\n", "  $freq = array_count_values($lst);\n  $max_key = max($freq);\n\
    \  foreach ($freq as $key => $val) {\n    if($val == $max_key){\n      return\
    \ $key;\n    }\n  }\n  return -1;\n}\n</code>\n<|/ a tags=arrays,php,search,count\
    \ dscore=1 |>\n<| c |>\nThis fails for OP's question - `search([4, 1, 2, 2, 3,\
    \ 1]) == 2` but it should be `2`\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $arr\
    \ = [];\n    foreach($lst as $item)\n        if(!isset($arr[$item])) $arr[$item]\
    \ = 0;\n        $arr[$item]++;\n    $max = -1;\n    foreach($arr as $key => $value)\n\
    \        if($max < $value) $max = $key;\n    return $max;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI like the elegance of your answer. I upvoted it, but I chose the\
    \ other one because I understood the question as posed (although I should have\
    \ been more explicit about that). Your answer is also very helpful for the OP.\n\
    <|/ c |>\n<| c |>\nI appreciate that, but I wasn't looking for the best algorithm,\
    \ just for the most straight forward way to solve it. :)\n<|/ c |>\n<| c |>\n\
    The question does not explicitly state that duplicate values are allowed. In that\
    \ case, your solution does not work: search([2, 3, 2, 3]) returns 2, while the\
    \ correct answer is 3.\n<|/ c |>\n<| c |>\nI thought about that too but I didn't\
    \ know what to do with duplicate values. My answer does assume there are no duplicates\
    \ in `$lst`. I'll edit my answer so that it doesn't assume that and also fix the\
    \ bug in that case.\n<|/ c |>\n<| a dscore=1 tags=php |>\nIf you cannot use array_count_values(),\
    \ then you can also use array_filter(). \nThe difference between the two is that\
    \ array_count_values() counts all unique values, while array_filter() only returns\
    \ unique values. The second function can easily be rewritten as a foreach() loop.\n\
    <code>", "    $freq = [];\n    foreach ($lst as $k => $v) {\n        if (!isset($freq[$v]))\
    \ {\n            $freq[$v] = 1;\n        } else {\n            $freq[$v]++;\n\
    \        }\n    }\n    arsort($freq);\n    foreach ($freq as $k => $v) {\n   \
    \     if ($v > 0) {\n            return $k;\n        }\n    }\n    return -1;\n\
    }\n", "  $max = $min = array_shift($lst);\n  foreach ($lst as $num) {\n    if\
    \ ($num > $max) {\n      $max = $num;\n    } else if ($num < $min) {\n      $min\
    \ = $num;\n    }\n  }\n  return $max > $min ? $max : -1;\n}\n", "    $largest\
    \ = -1;\n    foreach ($lst as $key => $value) {\n        if ($value > 0 && $value\
    \ >= $largest) {\n            $largest = $value;\n        }\n    }\n    return\
    \ $largest;\n}\n", "  foreach ($lst as $key => $value) {\n    if ($key > 0) {\n\
    \      if ($value > $lst[$key - 1]) {\n        return $key;\n      }\n    }\n\
    \  }\n  return -1;\n}\n</code>\n<|/ a dscore=2 tags=php |>\n<| c |>\nThank you\
    \ for your answer.\n<|/ c |>\n<| a dscore=2 |>\nHere is an example using array_reduce.\
    \ Since we know that our array is sorted, we can use array_splice and array_slice\
    \ to remove all negative values and all values that have values greater than the\
    \ previous value:\n<code>\n<?php", "    $n = count($lst);\n    for ($i = 0; $i\
    \ < $n; ++$i) {\n        if ($i > 0 && $lst[$i] == $lst[$i - 1]) continue;\n \
    \       if ($lst[$i] > 0) return $lst[$i];\n    }\n    return -1;\n}", "    $val\
    \ = $lst[0];\n    foreach ($lst as $key => $val) {\n        if ($val > 0) {\n\
    \            $val = $val;\n        } else {\n            $val = -1;\n        }\n\
    \        if ($val >= $lst[$key]) {\n            return $key;\n        }\n    }\n\
    \    return $val;\n}\n", "    $freqArr = array_count_values($lst);\n    $maxVal\
    \ = max($freqArr);\n    foreach($freqArr as $key => $value) {\n        if($value\
    \ >= $maxVal) {\n            return $key;\n        }\n    }\n    return -1;\n}",
  "    foreach($lst as $value) {\n        if ($value>0) {\n            $res = -1;\n\
    \            break;\n        }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=2 |>\nOne more way. Hope its helpfull to someone.\n<code>\n\
    <?php\n\n$arr = [\n    2 => 4,\n    1 => 3,\n    3 => 2,\n    4 => 2,\n];\n\n\
    $arr2 = array_count_values($arr);\n$maxKey = max($arr2);\n$res = array_search($maxKey,\
    \ $arr2);\necho isset($res) ? $res : -1;\n</code>\nOutput:\n<code>\n3\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nWhile this may answer the question,\
    \ it is better to add some description on how this answer may help to solve the\
    \ issue. Please read [How do I write a good answer](https://stackoverflow.com/help/how-to-answer)\
    \ to know more.\n<|/ c |>\n<| a |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    arsort($freq);\n    foreach ($freq as $k => $v) {\n        if ($k > 0) {\n\
    \            return $k;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays,search,sorting\
    \ dscore=0 |>\n<| c |>\nI appreciate it, but this solution assumes that we only\
    \ want to find the largest occurrences of the numbers that occur more than once.\
    \  That's not what the original question was asking for.\n<|/ c |>\n<| c |>\n\
    Oops, my bad. Thank you!\n<|/ c |>\n<| a dscore=0 tags=php,arrays,search,sorting\
    \ |>\nThis one liner will help you get the greatest frequency value that occurs\
    \ more than once.\n<code>\n$largestValueThatOccursMoreThanOnce($arr);\n", "  \
    \  sort($lst);\n    $freq = array();\n    $ret = -1;\n    foreach ($lst as $val)\
    \ {\n        if (!isset($freq[$val])) {\n            $freq[$val] = 1;\n      \
    \  } else {\n            $freq[$val]++;\n        }\n        if ($freq[$val] ==\
    \ $val) {\n            $ret = $val;\n        }\n    }\n    return $ret;\n}\n",
  "    $freq = array_count_values($lst);\n    $keys = array_keys($freq);\n    $max\
    \ = max($keys);\n    foreach($keys as $key) {\n        if($freq[$key] > $freq[$max])\
    \ {\n            $max = $key;\n        }\n    }\n    return ($max == count($lst))\
    \ ? -1 : maxValue($freq, $max);\n}\n", "    $freq = array();\n    foreach ($lst\
    \ as $value) {\n        if (isset($freq[$value])) {\n            $freq[$value]++;\n\
    \        } else {\n            $freq[$value] = 1;\n        }\n    }\n    arsort($freq);\n\
    \    $index = -1;\n    foreach ($freq as $value) {\n        if ($value > $index)\
    \ {\n            $index = $value;\n        }\n    }\n    return $index;\n}\n</code>\n\
    <|/ a tags=php,arrays dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n",
  "    sort($lst);\n    $min = $minValue = 0;\n    $curr = $lst[0];\n    foreach ($lst\
    \ as $v) {\n        $curr -= $v;\n        if ($curr < $min) {\n            $min\
    \ = $curr;\n            $minValue = $v;\n        }\n    }\n    return $minValue;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWhat if I use \"while\" to go through the array\
    \ until the array is empty and then I return the greatest value ?\n<|/ c |>\n\
    <| c |>\nNo, the question states that I should use \"for\" loop, not while, I'm\
    \ still trying to figure it out. thanks for your help\n<|/ c |>\n<| c |>\n- It\
    \ doesn't matter how you iterate; `for` loops and `while` loops are both fine\
    \ for this question. I did it all in a single loop, though, to make it easier\
    \ to understand.\n<|/ c |>\n<| c |>\n- I added an implementation using only `for`\
    \ loops.\n<|/ c |>\n<| c |>\nIt works! But i need to use while loop to traverse\
    \ the array and return the greatest value\n<|/ c |>\n<| a |>\n<code>", "    return\
    \ -1\n}\n</cell>\n<cell>", "    foreach($lst as $val)\n        $max = $val > $max\
    \ ? $val : $max;\n    return $max;\n}\n\n$lst = [4, 1, 2, 2, 3, 1];\n$max = search($lst);\n\
    print \"$max\\n\";\n</code>\nOutput:\n<code>\n2\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nMy variant - in php7+:\n<code>", "    $min = $max = array_shift($lst);\n\
    \    $freq = 0;\n    foreach ($lst as $num) {\n        $freq += $num;\n      \
    \  if ($freq >= $num) {\n            $freq -= $num;\n            $max = $num;\n\
    \        }\n    }\n    if ($min > $max || $freq == 0) {\n        return -1;\n\
    \    }\n    return $min;\n}\n\n$lst = array(4, 1, 2, 2, 3, 1);\n$result = search($lst);\n\
    var_dump($result); // int(2)\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding *why*\
    \ and/or *how* this code answers the question improves its long-term value.  Code-only\
    \ answers are discouraged.\n<|/ c |>\n<| c |>\nPlease add an explanation to your\
    \ code - what does it do?\n<|/ c |>\n<| a |>\nI have made it simple:\n<code>\n\
    <?php\n", "    $count = array_count_values($lst);\n    $index = array_search(max($count),\
    \ $count);\n    return $index === false ? -1 : max($lst);\n}\n</code>\n<|/ a dscore=0\
    \ tags=arrays,php |>\n<| a dscore=0 tags=arrays,php |>\nI wanted to solve this\
    \ problem with a single function call and I came up with the following solution\
    \ that I think might be better than the accepted answer.\nI made a PHP function\
    \ to get the frequency of a given integer in an array. I also made a second function\
    \ that will return -1 if the given integer is not in the array and 1 if the given\
    \ integer is in the array. \nThis solution is based on a concept of returning\
    \ a default value when the function returns false instead of using an if-else\
    \ statement to test the return value of array_search(). \nI hope this helps. \n\
    <code>", "    $len = count($lst);\n    if ($len < 2) {\n        return -1;\n \
    \   }\n    foreach ($lst as $item) {\n        if ($item == 0) {\n            $result\
    \ = 0;\n        }\n        $result = max($result, $item);\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 tags=php |>\n<| c |>\nPlease don't post code-only answers.\
    \ Please explain your answer. Code-only answers usually get deleted, because they\
    \ don't explain anything.\n<|/ c |>\n<| c |>\nWelcome to SO, please review the\
    \ [How do I write a good answer](https://stackoverflow.com/help/how-to-answer)\
    \ page for future endeavor at Stack Overflow.\n<|/ c |>\n<| a |>\nYou can use\
    \ array_filter to find the max value that matches your condition and get the key\
    \ of that item (since that's all you need to know)\n<code>\n$max = array_filter($array,\
    \ function($x) { return $x > 0; });\nreturn $max[array_keys($max)];\n</code>\n\
    <|/ a tags=php dscore=0 |>\n<| a dscore=0 tags=php |>\nThis code works and I hope\
    \ it can help others. I used a recursive function with array_map to find what\
    \ I was looking for:\n<code>\n$list = array(1,1,1,2,3,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,7,7);\n\
    \n$max = array_map(function($elem){\n    if($elem>0){\n        if($elem == max($elem)){\n\
    \            return $elem;\n        }\n    }\n    return -1;\n}, $list);\n\n$index\
    \ = array_search($max, max($max));\n\nif($index!==false){\n    echo 'Max value\
    \ = ' . $max . ', at index ' . $index . '<br/>';\n}else{\n    echo 'No value found\
    \ :( <br/>';\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n$list = array(1,1,1,2,3,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,7,7);\n\
    \n$max = array_map('max', $list);\n$index = array_search($max, max($max));\n\n\
    if($index!==false){\n    echo 'Max value = ' . $max . ', at index ' . $index .\
    \ '<br/>';\n}else{\n    echo 'No value found :( <br/>';\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a dscore=0 |>\n<code>\n$max = array_filter($array, function($x) {return\
    \ $", "    \n    // Your code here\n    if ($lst==[]) return -1;\n    \n    $freq\
    \ = [];\n    foreach ($lst as $v){\n        if (!array_key_exists($v,$freq)) $freq[$v]\
    \ = 0;\n        $freq[$v]++;\n    }\n    \n    arsort($freq);\n    \n    return\
    \ array_search([array_sum($freq)],$freq);\n}\n</code>\n<|/ a tags=php,algorithm,sorting,frequency,array-key\
    \ |>\n<| a |>\nThe above solutions didn't work for me so I went ahead and wrote\
    \ my own solution with O(n) time complexity, maybe someone will find it useful\
    \ in the future:\n<code>\n<?php\n$nums = [1, 2, 1, 4, 1, 1, 1];\n$search = 4;\n\
    $output = 0;\n", "    // Your code here\n    $array = array_count_values($lst);\n\
    \    foreach ($array as $key => $val) {\n        if($val >= $array[$key]){\n \
    \           return $key;\n        }\n    }\n    return -1;\n}\n", "    $count\
    \ = array_count_values($lst);\n    $frequency = array_filter($count);\n    foreach\
    \ ($count as $k => $v) {\n        if ($v >= $frequency[0]) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n", "    $max = 0;\n    foreach ($lst\
    \ as $val) {\n        if ($val >= $max) {\n            $max = $val;\n        }\n\
    \    }\n    return ($max >= $lst[0]) ? $max : -1;\n}\n\n$arr = [1, 2, 2, 2, 2,\
    \ 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9];\necho \"\
    Search:\\n\";\nprint_r($arr);\necho \"\\n\";\necho \"Result:\\n\";\necho \"Search:\\\
    n\";\nprint_r(search($arr));\necho \"\\n\";", "    sort($lst);\n    $firstTime\
    \ = true;\n    $min = $lst[0];\n    $max = $lst[0];\n    $freq = 1;\n    for($i\
    \ = 0; $i < count($lst); $i++) {\n        if($lst[$i] == $max) {\n           \
    \ $freq++;\n            if($freq > $min) {\n                $min = $freq;\n  \
    \              $max = $lst[$i];\n            }\n        } else {\n           \
    \ $freq = 1;\n        }\n    }\n    return ($firstTime && $min == $max) ? -1 :\
    \ $max;\n}\n", "   $max = -1;\n   $freq = -1;\n   foreach ($lst as $k) {\n   \
    \   if ($k > $freq) {\n         $freq = $k;\n         $max = $k;\n      }\n  \
    \ }\n   return $max;\n}\n", "  // Write your code here.\n  return -1;\n}\n</cell>\n\
    <cell>", "    if (empty($lst)) {\n        return -1;\n    }\n    $first = array_shift($lst);\n\
    \    if ($first === 0) {\n        return -1;\n    }\n    $freq = 0;\n    foreach\
    \ ($lst as $value) {\n        if ($value > $first) {\n            break;\n   \
    \     }\n        $freq += $value;\n    }\n    return $first > 0 ? $first - 1 :\
    \ -1;\n}\n\n/**\n * Question #11\n */\n$arr = array(1, 5, 6, 1, 2, 3, 5);\necho\
    \ max($arr), \"\\n\";\n\n/**\n * Question #12\n */\n$arr = [1, 2, 2, 2, 3, 3,\
    \ 4, 4, 5];\n$count = array_count_values($arr);\n$count = (array) $count;\nprint_r($count);\n\
    \n/**\n * Question #13\n */\n$arr = [1, 5, 2, 2, 1, 3];\n$key = array_search(1,\
    \ $arr);\n$key = ($key !== false ? $key : -1);\nprint_r($key);\n\n/**\n * Question\
    \ #14\n */\n$arr = [1, 5, 2, 2, 1, 3];\n$key = array_search(2, $arr);\n$key =\
    \ ($key !== false ? $key : -1);\nprint_r($key);\n\n/**\n * Question #15\n */\n\
    $arr = [1, 5, 2, 2, 1, 3];\n$key = array_search(3, $arr);\n$key = ($key !== false\
    \ ? $key : -1);\nprint_r($key);\n\n/**\n * Question #16\n */\n$arr = ['a' => 1,\
    \ 'b' => 2, 'c' => 2];\necho reset($arr), '<br>';\n\n/**\n * Question #17\n */\n\
    $arr = [1, 2, 2, 2, 3, 3, 4, 4, 5];\n$key = array_search(2, $arr);\nprint_r($key);\n\
    \n/**\n * Question #18\n */\n$arr = [1, 2, 2, 2, 3, 3, 4, 4, 5];\n$key = array_search(2,\
    \ $arr);\nprint_r($key);\n\n/**\n * Question #19\n */\n$arr = [1, 2, 2, 2, 3,\
    \ 3, 4, 4, 5];\n$key = array_search(2, $arr);\nprint_r($key);\n\n/**\n * Question\
    \ #20\n */\n$arr = [1, 2, 2, 2, 3, 3, 4, 4, 5];\n$key = array_search(2, $arr);\n\
    print_r($key);\n\n/**\n * Question #21\n */\n$arr = [1, 2, 2, 2, 3, 3, 4, 4, 5];\n\
    $key = array_search(2, $arr);\nprint_r($key);\n\n/**\n * Question #22\n */\n$arr\
    \ = [1, 2, 2, 2, 3, 3, 4, 4, 5];\n$key = array_search(2, $arr);\nprint_r($", " \
    \   $result = -1;\n    foreach($lst as $key => $val) {\n        if ($result <\
    \ 0 || $val > $result) {\n            $result = $val;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe question is about finding which\
    \ number appears the most times in the array and not the greatest number. Your\
    \ solution is only looking for the greatest number in array.\n<|/ c |>\n<| c |>\n\
    Thank you for pointing out. Changed my answer.\n<|/ c |>\n<| c |>\nYes, this does\
    \ not answer the question. You're just doing the same thing as the OP.\n<|/ c\
    \ |>\n<| c |>\nI added my answer\n<|/ c |>\n<| c |>\nBut still, your answer is\
    \ wrong. Try with your sample input.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n",
  "    if(count($lst)===0){\n        return -1;\n    }\n\n    sort($lst);\n    $num=count($lst);\n\
    \    $found=0;\n    $mid=floor(count($lst)/2);\n    $left=0;\n    $right=$num-1;\n\
    \n    while($left<$right){\n        $left++;\n        if($lst[$left]-$lst[$mid]>0){\n\
    \            $found++;\n            $mid++;\n            if($lst[$mid]-$lst[$right]>0){\n\
    \                $mid++;\n                $right--;\n            }\n        }\n\
    \        else if($lst[$mid]-$lst[$right]>0){\n            $found++;\n        \
    \    $right--;\n        }\n    }\n    return $found>0?$mid:-1;\n}", "    // Write\
    \ your code here\n    if(sizeof($lst) == 0)\n        return -1;\n    $n = $lst[0];\n\
    \    $cnt = 0;\n    foreach($lst as $l){\n        if($l == $n || $l > $n){\n \
    \           $n2 = $n;\n        }else{\n            $n2 = $l;\n        }\n    \
    \    if($cnt == 0){\n            $n = $n2;\n            $cnt = 1;\n        }else{\n\
    \            if($cnt == $n){\n                $cnt++;\n            }else{\n  \
    \              $cnt = 0;\n            }\n        }\n    }\n    return $n;\n}\n\
    </code>\n<|/ a tags=arrays,algorithm,php dscore=0 |>\n<| a |>\nThe previous answer\
    \ is very simple and effective. Just one more thing is left to do. \nIf you don't\
    \ want negative numbers. \n<code>\n<?php", "    $res = 0;\n    foreach ($lst as\
    \ $elm) {\n        if ($elm == $res) {\n            return $res;\n        }\n\
    \        $res += $elm;\n    }\n    return -1;\n}\n\n$tests = [\n    [\n      \
    \  [4, 1, 2, 2, 3, 1],\n        2\n    ],\n    [\n        [1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4],\n        3\n    ],\n    [\n        [5, 5, 4, 4, 4],\n        -1\n   \
    \ ]\n];\n\nforeach ($tests as $test) {\n    var_dump(search($test[0])) . \"\\\
    n\";\n}\n</code>\n<|/ a |>\n<| c |>\nYour method returns -1 even when the frequency\
    \ of the max value is greater than the sum.\n<|/ c |>\n<| c |>\n- Oh, right, thanks!\
    \ I was thinking that it should return `0` when the max value is not in the list,\
    \ rather than `-1`.\n<|/ c |>\n<| a dscore=1 tags=frequency,php,max,arrays |>\n\
    This solution is more efficient.\n<code>\n$frequency = array_count_values($input);\n\
    $frequency = array_filter($frequency);\n$frequency = array_intersect_key($frequency,\
    \ array_flip($frequency));\n$frequency = array_flip($frequency);\n$frequency =\
    \ array_map(function ($val) {\n    return $val === count($input) ? count($input)\
    \ : $val;\n}, $frequency);\n$max = max($frequency);\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\n<code>\n$input = [4,1,2,2,3,1];\n$max_val  = max($input);\n$freq = array_count_values($input);\n\
    $freq[$max_val] += 1;\n\n$highest_freq = $freq[$max_val]; // => 2\n</code>\n<|/\
    \ a tags=frequency,php,max,arrays |>\n<| a tags=frequency,php,max,arrays |>\n\
    <code>", "    foreach ($lst as $key => $val) {\n        if ($val >= 0) {\n   \
    \         $num = $val;\n            $num++;\n            return $num;\n      \
    \  } else {\n            return -1;\n        }\n    }\n}\n</code>\n<|/ a |>\n\
    <| c |>\nPlease explain why you think this would work.\n<|/ c |>\n<| c |>\nI do\
    \ understand how to solve this problem with for loop, but I was wondering whether\
    \ there is a solution using only one for loop. Thanks anyway.\n<|/ c |>\n<| c\
    \ |>\nWell, there's two loops, and the inner loop is iterating over the array\
    \ and checking to see if a value exists by incrementing it. So it has to be at\
    \ least two loops.\n<|/ c |>\n<| c |>\nThe problem is I do not understand how\
    \ it works, so I thought it might be easier to do it with for loop. And I do understand\
    \ two for loops are needed.\n<|/ c |>\n<| c |>\nAnd what you have is a nested\
    \ loop, so the outer loop is checking the values in the array, and the inner loop\
    \ is incrementing them, and checking to see if they exist.\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>\n<?php", "    foreach($lst as $x) {\n        if ($x < 1) return -1;\n\
    \    }\n    $highest = null;\n    foreach ($lst as $x) {\n        if ($x > $highest)\
    \ $highest = $x;\n        $count[$x]++;\n    }\n    $greatest = null;\n    foreach\
    \ ($count as $key => $val) {\n        if ($val >= $highest) $greatest = $key;\n\
    \    }\n    return $greatest;\n}", "    $freq = [];\n    foreach ($lst as $value)\
    \ {\n        $freq[$value]++;\n    }\n    ksort($freq);\n    foreach ($freq as\
    \ $key => $value) {\n        if ($value >= 1) {\n            return $key;\n  \
    \      }\n    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| a |>\nMy answer uses\
    \ only built-in PHP functions. Apart from sorting, all the other functions are\
    \ built in.\n<code>", "\t$cnt = 0;\n\tforeach ($lst as $v) {\n\t\tif ($v != 0)\
    \ {\n\t\t\t$v -= 1;\n\t\t\tif ($v > $cnt) {\n\t\t\t\t$cnt = $v;\n\t\t\t}\n\t\t\
    }\n\t}\n\tif ($cnt > 0) {\n\t\treturn $cnt;\n\t} else {\n\t\treturn -1;\n\t}\n\
    }\n", "    $first = current($lst);\n    foreach($lst as $v) {\n        if($v ==\
    \ $first) {\n            next($lst);\n        } else {\n            return -1;\n\
    \        }\n    }\n    return current($lst);\n}\n", "    sort($lst);\n    foreach($lst\
    \ as $number) {\n        if($number > 0 && $number == array_count_values($lst)[$number])\n\
    \            return $number;\n    }\n    return -1;\n}\n\n$result = search([4,\
    \ 1, 2, 2, 3, 1]);\nif($result == 2)\n    echo 'ok';\nelse\n    echo 'wrong';\n\
    $result = search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\nif($result == 3)\n    echo 'ok';\n\
    else\n    echo 'wrong';\n$result = search([5, 5, 4, 4, 4]);\nif($result == -1)\n\
    \    echo 'ok';\nelse\n    echo 'wrong';", "    $freq = array_count_values($lst);\n\
    \    if (empty($freq)) return -1;\n    arsort($freq);\n    $freq = array_slice($freq,\
    \ 1, null, true);\n    return array_search(0, $freq) ?: -1;\n}\n", "    $val =\
    \ array_shift($lst);\n    if ($val == 0) {\n        return -1;\n    }\n    foreach\
    \ ($lst as $e) {\n        if ($e == $val) $count++;\n        else if ($count >\
    \ 0) {\n            return $val;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=arrays,php,sorting,algorithm dscore=2 |>\n<| c |>\nI don't think you\
    \ understand the question. This is the wrong answer.\n<|/ c |>\n<| c |>\nI guess\
    \ I missed the part where you were trying to solve the problem in PHP. I guess\
    \ OP was asking for a PHP based solution. Sorry I missed that.\n<|/ c |>\n<| a\
    \ tags=arrays,php,sorting,algorithm dscore=2 |>\nThis works for me:\n<code>",
  "  // Your code here\n}\n</cell>\n<cell>", "    // your code goes here\n    $result=-1;\n\
    \    foreach ($lst as $value) {\n       $found=1;\n       for($i=0;$i<$value;$i++){\n\
    \           if(isset($lst[$i+1])){\n               $found=0;\n               break;\n\
    \           }\n       }\n       if($found)\n          $result=$value;\n      \
    \ break;\n    }\n    return $result;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
