name: HumanEval_137_compare_one
language: php
prompt: "<?php\n// Create a function that takes integers, floats, or strings representing\n\
  // real numbers, and returns the larger variable in its given variable type.\n//\
  \ Return None if the values are equal.\n// Note: If a real number is represented\
  \ as a string, the floating point might be . or ,\n// compare_one(1, 2.5) \u279E\
  \ 2.5\n// compare_one(1, \"2,3\") \u279E \"2,3\"\n// compare_one(\"5,1\", \"6\"\
  ) \u279E \"6\"\n// compare_one(\"1\", 1) \u279E None\nfunction compare_one($a, $b)\
  \ {\n"
tests: "function candidate(...$args) {\n    return compare_one(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1, 2) !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1, 2.5) !== 2.5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2, 3) !== 3) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(5, 6) !== 6) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(1, \"2,3\") !== \"2,3\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"5,1\", \"6\") !== \"6\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"1\", \"2\") !== \"2\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"1\", 1) !== null) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $ab = explode(',', $a);\n    $bb = explode(',', $b); // explode\
    \ the $b and $b into an array\n    $c = array_merge($ab, $bb); // merged the array\
    \ into a single array without duplicates\n    sort($c);\n    $d = array_unique($c);\n\
    \    $e = $d[0];\n    return $e;\n}", "    // Use is_numeric if $a is a float,\
    \ or is_float if $b is a float.\n    if (is_float($a) || is_float($b)) {\n   \
    \     // If either $a or $b is a float, use abs when comparing them.\n       \
    \ // Otherwise, use == to compare them.\n        return $a == $b ? $a : abs($a)\
    \ == abs($b);\n    } else {\n        // Otherwise, use == to compare them.\n \
    \       return $a == $b ? $a : null;\n    }\n}\n", "    if (is_numeric($a) &&\
    \ is_numeric($b)) {\n        if (abs($a) > abs($b)) {\n            return $a;\n\
    \        } else {\n            return $b;\n        }\n    } else {\n        return\
    \ $a;\n    }\n}\n", "    if ($a === $b) {\n        return;\n    }\n    $a = explode(\"\
    ,\", $a);\n    $b = explode(\",\", $b);\n    sort($a);\n    sort($b);\n    if\
    \ ($a == $b) {\n        return;\n    }\n    if ($a[0] < $b[0]) {\n        return\
    \ $a[0];\n    }\n    return $b[0];\n}\n</code>\n<|/ a tags=php,algorithm dscore=2\
    \ |>\n<| c |>\nThis is an awesome and very simple solution!\n<|/ c |>\n<| a dscore=0\
    \ tags=php,algorithm |>\nIt could be solved in O(log(N)) by making use of the\
    \ fact that there are two numbers with different number of digits:\n<code>\n<?php\n",
  "  if (is_int($a) && is_int($b)) {\n    if ($a > $b) {\n      return $a;\n    }\
    \ else if ($a < $b) {\n      return $b;\n    }\n  }\n\n  if (is_string($a) &&\
    \ is_string($b)) {\n    if ($a > $b) {\n      return $a;\n    } else if ($a <\
    \ $b) {\n      return $b;\n    }\n  }\n\n  return None;\n}\n", "  if(is_numeric($a)\
    \ && is_numeric($b)) {\n    return ($a > $b) ? $a : $b;\n  } else if(is_numeric($a)\
    \ && is_string($b)) {\n    return ($a > $b) ? $a : $b;\n  } else if(is_string($a)\
    \ && is_numeric($b)) {\n    return ($a < $b) ? $a : $b;\n  } else {\n    // both\
    \ strings and integers/floats\n    return ($a < $b) ? $a : $b;\n  }\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| a tags=php,string dscore=4 |>\n<code>\n<?php\n$str\
    \ = 'foo';\nif (preg_match('/\\s/', $str)) {\n    // $str is a space\n}\n</code>\n\
    <|/ a |>\n<| c |>\n+1 for being the only one to show how `preg_match` works.\n\
    <|/ c |>\n<| c |>\nThis should be the top answer. Because it works with spaces\
    \ within strings as well as at their boundaries.\n<|/ c |>\n<| c |>\nThis is the\
    \ right answer. The others might consider a space a word. Spaces within words\
    \ are also a word (it won't match with a space at the start or at the end of a\
    \ string).\n<|/ c |>\n<| a |>\nIn PHP you can check if a string contains a character\
    \ by using\n<code>\nif (strpos(' string', ' ') !== false) { ... }\n</code>\n<|/\
    \ a dscore=4 tags=php,string |>\n<| c |>\nthis does not match a space\n<|/ c |>\n\
    <| c |>\nstrpos() searches a string for a substring, not a character\n<|/ c |>\n\
    <| c |>\nIf a string contains a space then the above code evaluates to false.\
    \  A space is one of the characters in an \"if\" condition.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\nif (strpos(' string', ' ') !== false)\n</code>\nThis only checks\
    \ if the string contains a space character within the string. Spaces within a\
    \ string are not considered part of the string. Spaces at the start and end of\
    \ strings are also not considered part of the string.\n<|/ a dscore=4 |>\n<| a\
    \ dscore=3 tags=php,string |>\n<code>\n<?php\n\n$string = 'Hello World!';\n$string2\
    \ = 'Hello World!';\n\nif(strpos($string2, $string) !== false)\n{\n    echo \"\
    strpos found it!\";\n}\n", "    $a_is_string = (gettype($a) == \"string\");\n\
    \    $b_is_string = (gettype($b) == \"string\");\n    $a_is_int = (gettype($a)\
    \ == \"integer\");\n    $b_is_int = (gettype($b) == \"integer\");\n\n    $a =\
    \ (int) $a;\n    $b = (int) $b;\n\n    // Compare ints.\n    if ($a_is_int &&\
    \ $b_is_int) {\n        return $a > $b ? $a : $b;\n    }\n\n    // Compare strings.\n\
    \    if ($a_is_string && $b_is_string) {\n        if ($a === $b) {\n         \
    \   // Strings are equal\n            return;\n        }\n\n        $a_parts =\
    \ explode(\",\", $a);\n        $b_parts = explode(\",\", $b);\n\n        // Compare\
    \ first part of strings.\n        if ($a_parts[0] === $b_parts[0]) {\n       \
    \     // Strings are the same.\n            if (count($a_parts) == count($b_parts))\
    \ {\n                // Compare second part of strings.\n                return\
    \ strcmp($a_parts[1], $b_parts[1]);\n            } else {\n                //\
    \ First part is different but second part is the same.\n                return\
    \ 1;\n            }\n        } else {\n            // First part is different.\n\
    \            return 1;\n        }\n    }\n\n    // Compare floats.\n    if ($a_is_float\
    \ && $b_is_float) {\n        return $a > $b ? $a : $b;\n    }\n\n    // None of\
    \ the above matched.\n    return $a === $b ? 1 : 0;\n}\n</code>\nAnd if you need\
    \ it for more than just numbers, I believe you could create a function that uses\
    \ the same principles, but instead of using the type conversion functions (which\
    \ would have to be updated each time a new type is added), you could just have\
    \ a dictionary of variables to their types, and compare their values directly.\n\
    <|/ a dscore=0 tags=php,comparison,string,floating-point,integer |>\n<| a |>\n\
    As far as I know, there's no standard method for comparing floats or integers\
    \ that doesn't involve a lot of string parsing, so this seems like the most pragmatic\
    \ approach to me:\n<code>", "    if (is_numeric($a) && is_numeric($b)) {\n   \
    \     $a = floatval($a);\n        $b = floatval($b);\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a > $b ? $a : $b;\n  \
    \      } else {\n            return $a;\n        }\n    } else {\n        if (is_numeric($b))\
    \ {\n            return $b;\n        } else {\n            return $a;\n      \
    \  }\n    }\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ === $b) {\n            return $a;\n        }\n\n        if (abs($a - $b) > 0.00001)\
    \ {\n            return $b;\n        }\n\n        return $a;\n    }\n\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            if (abs($a -\
    \ $b) > 0.00001) {\n                return $b;\n            }\n\n            return\
    \ $a;\n        }\n\n        return $b;\n    }\n\n    if (is_string($a)) {\n  \
    \      if (is_string($b)) {\n            if (strcmp($a, $b) > 0) {\n         \
    \       return $b;\n            }\n\n            return $a;\n        }\n\n   \
    \     return $b;\n    }\n\n    return $a;\n}\n</code>\n<|/ a tags=php,string-comparison\
    \ |>\n<| c |>\nI guess you did not get my question. I am looking to compare \"\
    4,5\" with \"4\" and get \"4\", same way \"4,5\" with \"4.5\" gets me \"4.5\"\
    . That's why I have mentioned `\".\" == \",\" == \"-\" == \"+\"` . Because all\
    \ these are real numbers and those are in string format.\n<|/ c |>\n<| c |>\n\
    You are right. I will modify my answer and give my solution.\n<|/ c |>\n<| c |>\n\
    I edited my answer. Hopefully now it will help you.\n<|/ c |>\n<| c |>\nIt will\
    \ help a lot. Now it will work with negative numbers. Thank you so much :)\n<|/\
    \ c |>\n<| a dscore=3 |>\n<code>", "    var_dump($a); //float\n    var_dump($b);\
    \ //float\n    if ($a === $b) {\n        return $a;\n    }\n    return ($a > $b)\
    \ ? $a : $b;\n}\n", "  switch(gettype($a)) {\n    case \"integer\": return $a\
    \ > $b ? $a : $b;\n    case \"float\": return $a > $b ? $a : $b;\n    case \"\
    string\": return strval($a) > strval($b) ? $a : $b;\n    case \"boolean\": return\
    \ $a > $b ? $a : $b;\n    case \"object\": return $a->__cmp($b) > 0 ? $a : $b;\n\
    \    case \"NULL\": return $a > $b ? $a : $b;\n  }\n}\n", "  // Sort all strings\
    \ to ensure consistent comparison\n  $a_parts = explode(\",\", $a);\n  sort($a_parts);\n\
    \  $b_parts = explode(\",\", $b);\n  sort($b_parts);\n\n  // If one is empty and\
    \ the other has non-empty, both are equal\n  if (count($a_parts) == 1 && count($b_parts)\
    \ > 1) {\n    return $b;\n  }\n  elseif (count($b_parts) == 1 && count($a_parts)\
    \ > 1) {\n    return $a;\n  }\n\n  // If they have different sizes, they are not\
    \ equal\n  if (count($a_parts) != count($b_parts)) {\n    return None;\n  }\n\n\
    \  // If no parts are the same, they are equal\n  $a_count = 0;\n  foreach ($a_parts\
    \ as $part) {\n    if ($part == $b_parts[$a_count]) {\n      $a_count++;\n   \
    \ }\n    else {\n      return None;\n    }\n  }\n\n  // If the loop exits before\
    \ reaching the end of either string, they are equal\n  return $a_count == count($a_parts)\
    \ ? $a : $b;\n}\n", "  if (!is_numeric($a) || !is_numeric($b)) {\n    return $a\
    \ == $b ? None : 1;\n  }\n\n  $aNum = (int) $a;\n  $bNum = (int) $b;\n  if ($aNum\
    \ === $bNum) {\n    return $aNum;\n  }\n\n  $aFloat = (float) $a;\n  $bFloat =\
    \ (float) $b;\n  if ($aFloat == $bFloat) {\n    return $aFloat;\n  }\n\n  $aStr\
    \ = (string) $a;\n  $bStr = (string) $b;\n  if ($aStr == $bStr) {\n    return\
    \ $aStr;\n  }\n\n  if ($aNum == 0 && $bNum == 0) {\n    return $aNum == $bNum\
    \ ? None : 0;\n  }\n\n  $aInt = abs($aNum);\n  $bInt = abs($bNum);\n  if ($aInt\
    \ == $bInt) {\n    return $aInt;\n  }\n\n  return ($aInt < $bInt) ? $aNum : $bNum;\n\
    }\n", "    if (is_numeric($a) && is_numeric($b)) {\n        return ($a > $b) ?\
    \ $a : $b;\n    }\n    $a = preg_replace('/[^\\d.-]/', '', $a);\n    $b = preg_replace('/[^\\\
    d.-]/', '', $b);\n    if ($a === $b) {\n        return 0;\n    }\n    return ($a\
    \ < $b) ? $a : $b;\n}\n", "    $a = str_replace(\",\", \".\", $a);\n    $b = str_replace(\"\
    ,\", \".\", $b);\n    if ($a === $b) {\n        return $a;\n    } else {\n   \
    \     if (is_numeric($a) && is_numeric($b)) {\n            if ($a < $b) {\n  \
    \              return \"smaller\";\n            } else {\n                return\
    \ \"larger\";\n            }\n        } else {\n            return strcmp($a,\
    \ $b);\n        }\n    }\n}\n", "  // Compare numbers without regard to their\
    \ type\n  if (!is_numeric($a) || !is_numeric($b)) return false;\n  // If both\
    \ are integers, return integer\n  if (is_int($a) && is_int($b)) return $a > $b\
    \ ? 1 : $a < $b ? -1 : 0;\n  // If one is a float, return the greater of the two\n\
    \  else if (is_float($a) && is_float($b)) {\n    if ($a > $b) return 1;\n    else\
    \ if ($a < $b) return -1;\n    return 0;\n  }\n  // If neither are integers, return\
    \ string\n  else return strcmp($a, $b) > 0 ? 1 : strcmp($a, $b) < 0 ? -1 : 0;\n\
    }\n", "  if (is_string($a)) {\n    return $a > $b ? $a : $b;\n  }\n  if (is_string($b))\
    \ {\n    return $a < $b ? $a : $b;\n  }\n  if (is_float($a)) {\n    return $a\
    \ > $b ? $a : $b;\n  }\n  if (is_float($b)) {\n    return $a < $b ? $a : $b;\n\
    \  }\n  if (is_int($a) || is_int($b)) {\n    return $a > $b ? $a : $b;\n  }\n\
    \  return $a < $b ? $a : $b;\n}\n", "  $type = function_exists('is_numeric')\n\
    \    ? 'is_numeric'\n    : 'gettype';\n\n  switch($type($a)) {\n    case 'string':\n\
    \      if ($type($b) !== 'string') {\n        return $a > $b;\n      }\n     \
    \ break;\n    case 'integer':\n      if ($type($b) !== 'integer') {\n        return\
    \ $a > $b;\n      }\n      break;\n    case 'double':\n      if ($type($b) !==\
    \ 'double') {\n        return $a > $b;\n      }\n      break;\n    default:\n\
    \      if ($type($b) !== 'float') {\n        return $a > $b;\n      }\n  }\n \
    \ return $a > $b;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays\
    \ |>\nA short solution with only one call to the function and two foreach loops:\n\
    <code>\n$sorted_array = array();\nforeach($array as $key => $value) {\n    $sorted_array[]\
    \ = array($value, $key);\n}\nsort($sorted_array);\n\n$unsorted_array = array();\n\
    foreach($array as $key => $value) {\n    $unsorted_array[$key] = $value;\n}\n\
    foreach($sorted_array as $key => $value) {\n    $unsorted_array[$key] = $value[0];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\nusort($array,\
    \ function($a, $b) {\n  $a_value = $a['value'];\n  $b_value = $b['value'];\n\n\
    \  if ($a_value === $b_value) {\n    return 0;\n  }\n\n  return $a_value < $b_value\
    \ ? -1 : 1;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI think this is\
    \ the shortest way:\n<code>\nusort($arr, function ($a, $b) {\n    return $a['val']\
    \ < $b['val'];\n});\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ dscore=0 |>\nThis may work, with some modification.\n<code>\n$arr=array(\n\"\
    2\"=>\"2\",\n\"3\"=>\"3\",\n\"4\"=>\"4\",\n\"5\"=>\"5\",\n\"6\"=>\"6\",\n\"7\"\
    =>\"7\",\n\"8\"=>\"8\",\n\"9\"=>\"9\",\n\"10\"=>\"10\",\n\"11\"=>\"11\",\n\"12\"\
    =>\"12\",\n\"13\"=>\"13\",\n\"14\"=>\"14", "  if (is_numeric($a) && is_numeric($b))\
    \ {\n    $a = floatval($a);\n    $b = floatval($b);\n    if ($a == $b) {\n   \
    \   return $a;\n    }\n  }\n  if (is_string($a) && is_string($b)) {\n    $a =\
    \ str_replace(',', '.', $a);\n    $b = str_replace(',', '.', $b);\n    if ($a\
    \ === $b) {\n      return $a;\n    }\n  }\n  return $a === $b ? $a : null;\n}",
  "  $a_is_float = false;\n  $b_is_float = false;\n  if (is_numeric($a)) {\n    $a_is_float\
    \ = is_float($a);\n    if ($a_is_float) {\n      $a = floatval($a);\n    }\n \
    \ }\n  if (is_numeric($b)) {\n    $b_is_float = is_float($b);\n    if ($b_is_float)\
    \ {\n      $b = floatval($b);\n    }\n  }\n  if ($a == $b) {\n    return $a;\n\
    \  } elseif ($a_is_float && $b_is_float) {\n    return max($a, $b);\n  } else\
    \ {\n    return $a == $b ? \"None\" : null;\n  }\n}", "  if($a === $b) {\n   \
    \ return None;\n  } else if(is_float($a)) {\n    $a = (int)($a / 10);\n    $b\
    \ = (int)($b / 10);\n    if($a === $b) {\n      return None;\n    }\n  }\n  return\
    \ $a > $b ? $a : $b;\n}\n", "  if (is_numeric($a) && is_numeric($b)) {\n    $a\
    \ = (float) $a;\n    $b = (float) $b;\n  }\n  $aIsInt = is_int($a);\n  $aIsNum\
    \ = is_numeric($a);\n  $bIsInt = is_int($b);\n  $bIsNum = is_numeric($b);\n  $isComparable\
    \ = $aIsInt && $bIsInt;\n  if ($aIsInt && $bIsInt) {\n    if ($a > $b) return\
    \ 1;\n    if ($a < $b) return -1;\n    return 0;\n  }\n  $isComparable = $isComparable\
    \ || $aIsNum && $bIsNum;\n  if (!$isComparable) return null;\n  if ($a > $b) return\
    \ 1;\n  if ($a < $b) return -1;\n  return 0;\n}", "    if(is_int($a) && is_int($b))\
    \ {\n        return $a > $b ? $a : $b;\n    } elseif(is_int($a)) {\n        return\
    \ $a < $b ? $a : $b;\n    } elseif(is_float($a)) {\n        if(is_float($b)) {\n\
    \            return $a > $b ? $a : $b;\n        } else {\n            return $a\
    \ < $b ? $a : $b;\n        }\n    } elseif(is_string($a) && is_string($b)) {\n\
    \        if($a == $b) {\n            return None;\n        } else {\n        \
    \    return strcmp($a, $b) > 0 ? $a : $b;\n        }\n    } else {\n        return\
    \ None;\n    }\n}\n</code>\n<|/ a tags=sorting,php |>\n<| c |>\nNot sure if this\
    \ will work as you expect, since it will sort numbers before letters (\"1\" <\
    \ \"2\"). You would have to handle this case separately, as `strcmp` doesn't handle\
    \ it.\n<|/ c |>\n<| c |>\nYeah, this doesn't work for me...  I put a var_dump\
    \ in there and saw that it's sorting by string length, so the '2' comes before\
    \ '12'.  I tried switching '2' and '12' around, but no go.  Any ideas?\n<|/ c\
    \ |>\n<| c |>\nIt seems to me that this implementation works, although the comments\
    \ say that \"it works for integers\". Try `var_dump(compare_one('1', '12'));`\
    \ - it returns `int(1)`, which means that your implementation works when comparing\
    \ strings, but not when comparing integers. I cannot see any flaw in your implementation\
    \ that would result in `12` < `2`, but that's not what my test case says. Can\
    \ you elaborate on the test case that is failing for you?\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n\n$data1 = array(\n    \"name\" => \"abc\",\n    \"name1\"\
    \ => \"123\",\n    \"name3\" => \"23\",\n);\n\n$data2 = array(\n    \"name\" =>\
    \ \"abc\",\n    \"name1\" => \"123\",\n    \"name3\" => \"23\",\n);\n", "  if\
    \ (is_float($a) && is_float($b)) {\n    $a = str_replace(',', '.', $a);\n    $b\
    \ = str_replace(',', '.', $b);\n    $a = floatval($a);\n    $b = floatval($b);\n\
    \    if ($a === $b) {\n      return $a;\n    }\n  }\n  return $a === $b ? $a :\
    \ null;\n}", "  // Compare numeric strings first, then non-numeric strings.\n\
    \  // This makes it easier to tell the difference between 1,2\n  // and \"1,2\"\
    , and makes it easier to use the larger value.\n  if (strcmp($a, \"1\") == 0 &&\
    \ strcmp($b, \"1\") == 0) {\n    return $a;\n  }\n  if (strcmp($a, \"1\") == 0\
    \ && strcmp($b, \"2\") == 0) {\n    return $b;\n  }\n  if (strcmp($a, \"1\") ==\
    \ 0 && strcmp($b, \"3\") == 0) {\n    return $a;\n  }\n  if (strcmp($a, \"1\"\
    ) == 0 && strcmp($b, \"4\") == 0) {\n    return $b;\n  }\n  if (strcmp($a, \"\
    1\") == 0 && strcmp($b, \"5\") == 0) {\n    return $a;\n  }\n  if (strcmp($a,\
    \ \"1\") == 0 && strcmp($b, \"6\") == 0) {\n    return $b;\n  }\n  if (strcmp($a,\
    \ \"2\") == 0 && strcmp($b, \"2\") == 0) {\n    return $a;\n  }\n  if (strcmp($a,\
    \ \"2\") == 0 && strcmp($b, \"3\") == 0) {\n    return $b;\n  }\n  if (strcmp($a,\
    \ \"2\") == 0 && strcmp($b, \"4\") == 0) {\n    return $a;\n  }\n  if (strcmp($a,\
    \ \"2\") == 0 && strcmp($b, \"5\") == 0) {\n    return $b;\n  }\n  if (strcmp($a,\
    \ \"2\") == 0 && strcmp($b, \"6\") == 0) {\n    return $b;\n  }\n  if (strcmp($a,\
    \ \"3\") == 0 && strcmp($b, \"3\") == 0) {\n    return $a;\n  }\n  if (strcmp($a,\
    \ \"3\") == 0 && strcmp($b, \"4\") == 0) {\n    return $b;\n  }\n  if (strcmp($a,\
    \ \"3\") == 0 && strcmp($b, \"5\") == 0) {\n    return $a;\n  }\n  if (strcmp($a,\
    \ \"3\") == 0 && strcmp($b, \"6\") == 0) {\n    return $b;\n  }\n  if (strcmp($a,\
    \ \"4\") == 0 && strcmp($b, \"4\") == 0) {\n    return $a;\n  }\n  if (strcmp($a,\
    \ \"4\") == 0 && strcmp($b, \"5\") == 0) {\n    return $b;\n  }\n  if (strcmp($a,\
    \ \"4\") == 0 && strcmp($b, \"6\") == 0) {\n    return $b;\n  }\n  if (strcmp($a,\
    \ \"5\") == 0 && strcmp($b, \"5\") == 0) {\n    return $a;\n  }\n  if (strcmp($a,\
    \ \"5\") == 0 && strcmp($b, \"6\") == 0) {\n    return $", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if (abs($a) == abs($b)) {\n            if ($a\
    \ < $b) {\n                return $a;\n            }\n            return $b;\n\
    \        }\n        if ($a < $b) {\n            return $b;\n        }\n      \
    \  return $a;\n    }\n    if (is_string($a) && is_string($b)) {\n        $a =\
    \ str_replace('.', '', $a);\n        $b = str_replace('.', '', $b);\n        if\
    \ ($a == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n  \
    \          return $a;\n        }\n        return $b;\n    }\n    if ($a === $b)\
    \ {\n        return $a;\n    }\n}\n</code>\nThe above code should give you an\
    \ idea of how a typical implementation might look, but doesn't have to be exactly\
    \ what you're looking for. Hope it helps!\n<|/ a dscore=1 tags=php,arrays,string\
    \ |>\n<| a dscore=0 |>\nHere's a function that takes a string and parses it into\
    \ an array of values, each of which is a string. Note that the order of values\
    \ is preserved:\n<code>\n<?php\n", "    if ($a !== $b) {\n        if (is_numeric($a)\
    \ && is_numeric($b)) {\n            return $a > $b ? $a : $b;\n        }\n   \
    \     if (is_numeric($a) || is_numeric($b)) {\n            return $a === $b ?\
    \ $a : $b . \"\";\n        }\n        if (is_string($a)) {\n            if (is_string($b))\
    \ {\n                return strcmp($a, $b) > 0 ? $a : $b;\n            }\n   \
    \     }\n    }\n}\n</code>\nYou can define your own comparator function by just\
    \ passing another compare function in as an argument in the second argument of\
    \ the usort function.\n<|/ a tags=sorting,arrays,php dscore=0 |>\n<| c |>\nThe\
    \ comparison function should return -1, 0 or 1, not \"true\" or \"false\".\n<|/\
    \ c |>\n<| c |>\nSorry, I wasn't aware of this, I've edited the answer accordingly\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried using your function but didn't\
    \ get what I was looking for.\n<|/ c |>\n<| c |>\nI should have been more specific,\
    \ the comparison should only compare numeric values, not strings such as \"3\"\
    \ and \"3\". It should only compare one variable to the other variable, not two\
    \ variables.\n<|/ c |>\n<| c |>\nThe comparison function should be passed as an\
    \ argument in the second argument of usort. I've edited the answer to show you\
    \ how to do it.\n<|/ c |>\n<| a tags=sorting,arrays,php |>\nYou can make use of\
    \ closures in PHP 5.3+ to make a function that does what you want. Here's an example\
    \ that will compare numbers and strings as you want.\n<code>\n$arr = [1, 2.5,\
    \ \"2,3\"];\nusort($arr, function($a, $b){\n    // check if both are integers\n\
    \    if (is_int($a) && is_int($b)){\n        // if so, then return comparison\
    \ of them\n        return $a - $b;\n    }\n    // if not, return string\n    if\
    \ (is_string($a) && is_string($b)){\n        // if first character is numeric\
    \ or second character is numeric\n        return strcmp(strtolower($a), strtolower($b));\n\
    \        // if both are numeric, then return comparison\n    }\n    // if neither\
    \ are integers, return comparison\n    return strcmp($a, $b);\n});\n\nvar_dump($arr);\n\
    </code>\nOutput:\n<code>\narray (size=3)\n  0 => int 1\n  1 => float 2.5\n  2\
    \ => string '2,3' (length=4)\n</code>\nThis code compares the value", "    return\
    \ $a > $b ? $a : $b;\n}\n", "  return None;\n}\n</cell>\n<cell>", "  if ($a ==\
    \ $b) {\n    return $a;\n  } else if (is_int($b)) {\n    return $a;\n  } else\
    \ if (is_int($a)) {\n    return $b;\n  } else if (is_float($a)) {\n    return\
    \ $a;\n  } else if (is_float($b)) {\n    return $b;\n  } else if (is_string($a))\
    \ {\n    return $a;\n  } else if (is_string($b)) {\n    return $b;\n  }\n}\n",
  "    foreach (array('int', 'float', 'string') as $var) {\n        if (is_numeric($a)\
    \ && is_numeric($b)) {\n            if ($var == 'int') {\n                return\
    \ (int) $a > $b ? $a : $b;\n            }\n            if ($var == 'float') {\n\
    \                return (float) $a > $b ? $a : $b;\n            }\n        }\n\
    \    }\n    if ($a === $b) return $a;\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a > $b) return $a;\n            return $b;\n        }\n\
    \        if ($b > $a) return $b;\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        if ($a < $b) return $a;\n        return $b;\n    }\n    if ($a ===\
    \ $b) return $a;\n    if (strcasecmp($a, $b) > 0) return $b;\n    return $a;\n\
    }\n", "  if (is_numeric($a) && is_numeric($b)) {\n    if ($a == $b) {\n      return\
    \ $a;\n    }\n  }\n  else if ($a === $b) {\n    return $a;\n  }\n  else if ($a\
    \ < $b) {\n    return $a;\n  }\n  else {\n    return $b;\n  }\n}\n", "    if ($a\
    \ == $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_string($a) &&\
    \ is_string($b)) {\n        if (strcmp($a, $b) > 0) {\n            return $a;\n\
    \        }\n        if (strcmp($a, $b) < 0) {\n            return $b;\n      \
    \  }\n    }\n    if (is_float($a) && is_float($b)) {\n        return max($a, $b);\n\
    \    }\n    return null;\n}\n\n$tests = [\n    [1, \"1,00\", 1],\n    [2, \"1,00\"\
    , 2],\n    [2.25, \"2.25,00\", 2.25],\n    [\"1,00\", \"1,00\", 1],\n    [1.20,\
    \ \"1.20,00\", 1.2],\n    [2.70, \"2.70,00\", 2.8],\n    [2.65, \"2.65,00\", 2.7],\n\
    \    [2, \"2,00\", 2],\n    [1, \"1,00\", 1],\n    [2.5, \"2.5,00\", 2.5],\n \
    \   [\"1,00\", \"1,00\", 1],\n    [2, \"2,00\", 2],\n    [2.7, \"2.7,00\", 2.7],\n\
    \    [3, \"3,00\", 3],\n    [2.7, \"2.7,00\", 2.7],\n    [2.75, \"2.75,00\", 2.8],\n\
    \    [2.8, \"2.8,00\", 2.8],\n    [1.2, \"1.2,00\", 1.2],\n    [2.2, \"2.2,00\"\
    , 2.2],\n    [2.25, \"2.25,00\", 2.25],\n    [2.25, \"2.25,00\", 2.25],\n    [1,\
    \ \"1,00\", 1],\n    [2, \"2,00\", 2],\n    [2.25, \"2.25,00\", 2.25],\n    [\"\
    1,00\", \"1,00\", 1],\n    [1.20, \"1.20,00\", 1.2],\n    [2.70, \"2.70,00\",\
    \ 2.8],\n    [2.65, \"2.65,00\", 2.7],\n    [2, \"2,00\", 2],\n    [1, \"1,00\"\
    , 1],\n    [2.5, \"2.5,00\", 2.5],\n    [\"1,00\", \"1,00\", 1],\n    [2, \"2,00\"\
    , 2],\n    [2.7, \"2.7,00\", 2.7],\n    [3, \"3,00\", 3],\n    [2.7, \"2.7,00\"\
    , 2.7],\n    [2.75, \"2.75,00\", 2.8],\n    [2.8, \"2.8,00\", 2.8],\n    [1.2,\
    \ \"1.2,00\", 1.2],\n    [2.2, \"2.2,00\", 2.2],\n    [", "  if (is_numeric($a)\
    \ && is_numeric($b)) {\n    if (is_float($a) && is_float($b)) {\n      $a = number_format($a,\
    \ 2);\n      $b = number_format($b, 2);\n      $a = str_replace(\",\", \".\",\
    \ $a);\n      $b = str_replace(\",\", \".\", $b);\n      if ($a == $b) {\n   \
    \     return $a;\n      }\n    }\n    if ($a == $b) {\n      return 0;\n    }\n\
    \    return $a < $b ? -1 : 1;\n  } else {\n    if (is_string($a)) {\n      $a\
    \ = str_replace(\",\", \".\", $a);\n    }\n    if (is_string($b)) {\n      $b\
    \ = str_replace(\",\", \".\", $b);\n    }\n    if ($a == $b) {\n      return 0;\n\
    \    }\n    return $a < $b ? -1 : 1;\n  }\n}", "  if (is_int($a) && is_int($b))\
    \ {\n    if ($a > $b) {\n      return $a;\n    } else {\n      return $b;\n  \
    \  }\n  }\n  if (is_int($a) && is_float($b)) {\n    if ($a == $b) {\n      return\
    \ 0;\n    } else {\n      return $a;\n    }\n  }\n  if (is_string($a) && is_string($b))\
    \ {\n    $a = str_replace(\",\", \".\", $a);\n    $b = str_replace(\",\", \".\"\
    , $b);\n    $x = explode(\".\", $a); // $x = [1.5, 2]\n    $y = explode(\".\"\
    , $b); // $y = [1.5, 2]\n    $y[0] = round(array_sum($y) / count($y));\n    $x[0]\
    \ = round(array_sum($x) / count($x));\n    if ($y[0] == $x[0]) {\n      return\
    \ 0;\n    }\n    if ($y[0] > $x[0]) {\n      return $a;\n    } else {\n      return\
    \ $b;\n    }\n  }\n  if (is_float($a) && is_float($b)) {\n    if (abs($a - $b)\
    \ < 0.000001) {\n      return 0;\n    }\n    return $a > $b ? $a : $b;\n  }\n\
    \  return $a > $b ? $a : $b;\n}\n</code>\n<|/ a tags=php,string,compare |>\n<|\
    \ c |>\nThank you for your input. I like that approach because I can easily add\
    \ more compare functions to compare multiple variables in one function. But when\
    \ I use this function with the example string \"1,5\" and \"5,1\" I get \"5,1\"\
    \ back. When I would expect \"1\". Do you have an idea why this is happening?\n\
    <|/ c |>\n<| c |>\nI added the output of my test script.\n<|/ c |>\n<| c |>\n\
    Thanks for the detailed output! Now I see where the error in my input was.\n<|/\
    \ c |>\n<| a |>\nIf you're dealing with decimals, I would recommend you use bccomp\
    \ instead:\n<code>\n$a = \"1.23\";\n$b = \"1.20\";\n\nvar_dump( bccomp($a, $b)\
    \ );\nvar_dump( bccomp($b, $a) );\n</code>\nOutput:\n<code>\nint(1)\nint(-1)\n\
    </code>\n<|/ a tags=php,string,compare dscore=2 |>\n<| c |>\nThe question is tagged\
    \ PHP, not Python. `bccomp` only works for strings.\n<|/ c |>\n<| c |>\nThanks\
    \ for your suggestion.\n<|/ c |>\n<| a dscore=2 tags=php,string,compare |>\nThe\
    \ best way to handle this is by split", "  if (!isset($a)) {\n    return $b;\n\
    \  }\n  if (!isset($b)) {\n    return $a;\n  }\n  if (is_numeric($a) && is_numeric($b))\
    \ {\n    $a = floatval($a);\n    $b = floatval($b);\n    if ($a == $b) {\n   \
    \   return $a;\n    }\n  }\n  if (is_numeric($a)) {\n    return $b;\n  }\n  if\
    \ (is_numeric($b)) {\n    return $a;\n  }\n  return strcmp($a, $b) <=> strcmp($b,\
    \ $a);\n}\n</code>\n<|/ a tags=arrays,array-merge,array-unique,php |>\n<| c |>\n\
    Yes, I read it, but the code doesn't work. It just outputs something like this:\
    \ ArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray",
  "  $a = (string)$a;\n  $b = (string)$b;\n  $c = max($a, $b);\n  $d = max($a, $b);\n\
    \n  if ($c == $d)\n    return $c;\n  elseif ($c == \"NaN\" || $d == \"NaN\")\n\
    \    return \"NaN\";\n  else\n    return $d;\n}\n", "  if ($a === $b) {\n    return\
    \ None;\n  }\n  if (is_integer($a) && is_integer($b)) {\n    return $a > $b ?\
    \ $a : $b;\n  }\n  if (is_float($a) && is_float($b)) {\n    return $a > $b ? $a\
    \ : $b;\n  }\n  if (is_string($a) && is_string($b)) {\n    // Parse as a float,\
    \ then cast to integer for comparison.\n    if (is_float($a) && is_float($b))\
    \ {\n      return floatval($a) > floatval($b) ? floatval($a) : floatval($b);\n\
    \    }\n  }\n  return None;\n}\n", "  // Ensure values are numeric and sort them.\n\
    \  $a = floatval($a);\n  $b = floatval($b);\n  if ($a > $b) {\n    $a = $b;\n\
    \  }\n  elseif ($a < $b) {\n    $b = $a;\n  }\n  return $a;\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        $a = intval($a);\n        $b = intval($b);\n \
    \   }\n    if (is_numeric($a) && is_float($b)) {\n        $a = floatval($a);\n\
    \        $b = floatval($b);\n    }\n    if (is_numeric($a) && is_string($b)) {\n\
    \        $a = floatval($a);\n        $b = floatval($b);\n    }\n    if (is_numeric($b)\
    \ && is_float($a)) {\n        $b = floatval($b);\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n     \
    \   }\n        return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n\
    \        if (strcmp($a, $b) < 0) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_float($a) && is_float($b)) {\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_int($a) && is_int($b)) {\n        if ($a > $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    return $a;\n}\n", "    global $num;\n\
    \n    $a = str_replace(',', '.', $a); // convert commas\n\n    $b = str_replace(',',\
    \ '.', $b); // convert commas\n\n    $a = number_format($a, $num);\n    $b = number_format($b,\
    \ $num);\n\n    $result = $a > $b ? $a : $b;\n    $result = $result == '-' ? $a\
    \ : $b;\n\n    return $result;\n}", "    $a_is_str = (is_string($a) && $a !==\
    \ \"\");\n    $b_is_str = (is_string($b) && $b !== \"\");\n    if ($a_is_str &&\
    \ !$b_is_str) {\n        return $a;\n    } elseif ($b_is_str && !$a_is_str) {\n\
    \        return $b;\n    }\n    $is_str = (is_string($a) && $a !== \"\" && is_string($b)\
    \ && $b !== \"\");\n    if ($is_str) {\n        $a = preg_replace(\"/[^0-9\\-\\\
    .]/\", '', $a);\n        $b = preg_replace(\"/[^0-9\\-\\.]/\", '', $b); \n   \
    \ }\n    $is_int = is_int($a);\n    $is_int = is_int($b);\n    if ($is_int) {\n\
    \        return $a > $b ? $a : $b;\n    } else {\n        if ($is_str) {\n   \
    \         preg_match(\"/[0-9\\-\\.]/\", $a, $a_num);\n            preg_match(\"\
    /[0-9\\-\\.]/\", $b, $b_num);\n            return $a_num[0] > $b_num[0] ? $a_num[0]\
    \ : $b_num[0];\n        } else {\n            $a = floatval($a);\n           \
    \ $b = floatval($b);\n            return $a > $b ? $a : $b;\n        }\n    }\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,arrays,php |>\nTry this :\n<code>\n\
    $array = array\n(\n    1 => 110,\n    2 => 51,\n    3 => 12,\n    4 => 6,\n  \
    \  5 => 15,\n    6 => 4,\n    7 => 11,\n    8 => 20,\n    9 => 4,\n    10 => 12,\n\
    \    11 => 1,\n    12 => 100,\n    13 => 121,\n    14 => 6,\n    15 => 51,\n \
    \   16 => 1,\n    17 => 3,\n    18 => 100,\n    19 => 11,\n    20 => 1,\n    21\
    \ => 100,\n    22 => 100,\n    23 => 1,\n    24 => 1,\n    25 => 100,\n    26\
    \ => 100,\n    27 => 100,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 =>\
    \ 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n \
    \   37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 =>\
    \ 1,\n    43 ", "  if (is_int($a)) {\n    if (is_int($b)) return $a > $b ? 1 :\
    \ 0;\n    if ($b == \".\") return $a > 0 ? 1 : null;\n    if ($b == \",\") return\
    \ $a > 0 ? null : 1;\n    return null;\n  }\n  if (is_int($b)) {\n    if (is_int($a))\
    \ return $b > $a ? 1 : 0;\n    if ($a == \".\") return $b > 0 ? 1 : null;\n  \
    \  if ($b == \",\") return $b > 0 ? null : 1;\n    return null;\n  }\n  if (is_string($a))\
    \ {\n    if (is_string($b)) return strcmp($a, $b) > 0 ? 1 : 0;\n    if ($b ==\
    \ \".\") return strcmp($a, $a) > 0 ? 1 : null;\n    if ($b == \",\") return strcmp($a,\
    \ $a) > 0 ? null : 1;\n    return null;\n  }\n  if (is_string($b)) {\n    if (is_string($a))\
    \ return strcmp($b, $a) > 0 ? 1 : 0;\n    if ($a == \".\") return strcmp($b, $b)\
    \ > 0 ? 1 : null;\n    if ($b == \",\") return strcmp($b, $b) > 0 ? null : 1;\n\
    \    return null;\n  }\n  return null;\n}\n", "  $a_is_float = is_float($a);\n\
    \  $b_is_float = is_float($b);\n  if (!$a_is_float && !$b_is_float) {\n    if\
    \ ($a === $b) {\n      return $a;\n    }\n  }\n  $a_is_string = is_string($a);\n\
    \  $b_is_string = is_string($b);\n  if (!$a_is_float && !$b_is_float && !$a_is_string\
    \ && !$b_is_string) {\n    if ($a === $b) {\n      return $a;\n    }\n  }\n\n\
    \  if (!$a_is_float && !$b_is_float && !$a_is_string && $b_is_string) {\n    if\
    \ (strlen($a) > strlen($b)) {\n      return $a;\n    }\n    return $b;\n  }\n\n\
    \  if (!$a_is_float && $b_is_float && !$a_is_string && !$b_is_string) {\n    if\
    \ (strlen($a) < strlen($b)) {\n      return $a;\n    }\n    return $b;\n  }\n\n\
    \  if ($a_is_float && !$b_is_float && $a_is_string && !$b_is_string) {\n    if\
    \ (strlen($a) > strlen($b)) {\n      return $a;\n    }\n    return $b;\n  }\n\n\
    \  if ($a_is_float && !$b_is_float && !$a_is_string && $b_is_string) {\n    if\
    \ (strlen($a) < strlen($b)) {\n      return $a;\n    }\n    return $b;\n  }\n\n\
    \  if ($a_is_float && !$b_is_float && !$a_is_string && $b_is_string) {\n    if\
    \ (strlen($a) > strlen($b)) {\n      return $a;\n    }\n    return $b;\n  }\n\n\
    \  if (!$a_is_float && !$b_is_float && !$a_is_string && !$b_is_string) {\n   \
    \ return $a === $b ? $a : null;\n  }\n\n  // if ($a_is_string && !$b_is_string)\
    \ {\n  //   return $a;\n  // }\n  // if ($b_is_string && !$a_is_string) {\n  //\
    \   return $b;\n  // }\n  // if ($a_is_string && $b_is_string) {\n  //   if (strlen($a)\
    \ > strlen($b)) {\n  //     return $a;\n  //   }\n  //   return $b;\n  // }\n\
    \  // if ($a_is_string && $b_is_string) {\n  //   if (strlen($a) < strlen($b))\
    \ {\n  //     return $a;\n  //   }\n  //   return $b;\n  // }\n  // if ($a_is_string)\
    \ {\n  //   if (strlen($a) > strlen($b)) {\n  //     return $a;", "  // $a and\
    \ $b are assumed to be integers\n  if ($a < $b) {\n    return $a;\n  }\n  return\
    \ $b;\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b)\
    \ return 0;\n        $a = str_replace(',', '.', $a);\n        $b = str_replace(',',\
    \ '.', $b);\n        $a = (float) $a;\n        $b = (float) $b;\n        if ($a\
    \ < $b) return -1;\n        if ($a > $b) return 1;\n        return 0;\n    }\n\
    \    if (is_numeric($a) && $b === '-') {\n        $b = '0';\n    }\n    if (is_numeric($b)\
    \ && $a === '-') {\n        $a = '0';\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) return 0;\n        $a = str_replace(',', '.', $a);\n\
    \        $b = str_replace(',', '.', $b);\n        $a = (float) $a;\n        $b\
    \ = (float) $b;\n        if ($a < $b) return -1;\n        if ($a > $b) return\
    \ 1;\n        return 0;\n    }\n    if ($a === '-') {\n        return -1;\n  \
    \  }\n    if ($b === '-') {\n        return 1;\n    }\n    if ($a === $b) return\
    \ 0;\n    if ($a === '+') {\n        return 1;\n    }\n    if ($b === '+') {\n\
    \        return -1;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n    \
    \    $a = str_replace(',', '.', $a);\n        $b = str_replace(',', '.', $b);\n\
    \        $a = (float) $a;\n        $b = (float) $b;\n        if ($a < $b) return\
    \ -1;\n        if ($a > $b) return 1;\n        return 0;\n    }\n    if ($a ===\
    \ '0') {\n        if ($b === '0') return 0;\n        return ($a > $b) ? 1 : -1;\n\
    \    }\n    if ($b === '0') {\n        return 1;\n    }\n    if ($a > $b) {\n\
    \        return 1;\n    }\n    if ($a < $b) {\n        return -1;\n    }\n}\n\
    </code>\n<|/ a tags=floating-point,floating-accuracy,php,floating-point-precision,string\
    \ |>\n<| c |>\nThis doesn't work. `compare_one('1,0', \"1,\")` will return 0.\n\
    <|/ c |>\n<| c |>\nHm. Interesting. Could you try the following, with `$a = \"\
    1,0\"` and `$b = \"1,)\"`? `var_dump(compare_one($a, $b));`\n<|/ c |>\n<| c |>\n\
    The `1,)` is actually a typo. Corrected. `var_dump(compare_one('1,0', '1,)'));`\
    \ returns 0.\n<|/ c |>\n<| c ", "\tif (is_string($a) && is_string($b)) {\n\t\t\
    // If they both are strings, do a simple string comparison\n\t\treturn strcmp($a,\
    \ $b); // Sort strings alphabetically if they are the same length\n\t} else if\
    \ (is_numeric($a) && is_numeric($b)) {\n\t\t// If both are numeric types, use\
    \ $a > $b\n\t\treturn $a > $b; // True is positive, False is negative\n\t} else\
    \ if (is_numeric($a)) {\n\t\t// If one is a string, convert it to numeric\n\t\t\
    return compare_one($a, $b); // If both are strings, but of different types, return\
    \ None\n\t} else if (is_numeric($b)) {\n\t\t// If one is a numeric type, convert\
    \ to a string\n\t\treturn compare_one($a, $b); // If both are numeric, return\
    \ None\n\t} else {\n\t\t// If both are None, just return None\n\t\treturn None;\n\
    \t}\n}", "    if (is_string($a) && is_string($b)) {\n        // Assume float or\
    \ int are strings\n        $a = str_replace('.', '', $a);\n        $b = str_replace('.',\
    \ '', $b);\n        $a = explode(',', $a);\n        $b = explode(',', $b);\n \
    \       $a_length = count($a);\n        $b_length = count($b);\n\n        if ($a_length\
    \ < $b_length) $a_length = $b_length;\n        if ($a_length > $b_length) $b_length\
    \ = $a_length;\n\n        for($i = 0; $i < $a_length; $i++) {\n            if\
    \ ($a[$i] != $b[$i]) break;\n        }\n\n        if ($i < $b_length) {\n    \
    \        return $b[$i];\n        } else {\n            return $a[$i];\n      \
    \  }\n    } else {\n        // Assume all values are numeric\n        $a = $a\
    \ > $b ? $a : $b;\n        $b = $a > $b ? $b :$a;\n\n        return $a === $b\
    \ ? None : $a;\n    }\n}\n", "  if (is_numeric($a)) {\n    if (is_numeric($b))\
    \ {\n      if ($a == $b) return $a;\n    }\n  }\n  if (is_numeric($b)) {\n   \
    \ return compare_one($a, $b);\n  }\n  return $a > $b ? $a : $b;\n}\n", "  $a_type\
    \ = var_export($a::getType(), true);\n  $b_type = var_export($b::getType(), true);\n\
    \  global $compare_one_types;\n  if (!isset($compare_one_types[$a_type][$b_type]))\
    \ {\n    if ($a_type === $b_type || !empty($a) && !empty($b)) {\n      if ($a_type\
    \ == 'array' || $b_type == 'array') {\n        $compare_one_types[$a_type][$b_type]\
    \ = 0;\n        foreach ($a as $a_v) {\n          foreach ($b as $b_v) {\n   \
    \         $compare_one_types[$a_type][$b_type] += compare_one($a_v, $b_v);\n \
    \         }\n        }\n      } else if ($a_type == 'string' || $b_type == 'string')\
    \ {\n        $compare_one_types[$a_type][$b_type] = 0;\n        $compare_one_types[$a_type][$b_type]\
    \ = strcmp($a, $b);\n      } else {\n        $compare_one_types[$a_type][$b_type]\
    \ = ($a > $b) ? 1 : 0;\n      }\n    }\n  }\n  return $compare_one_types[$a_type][$b_type];\n\
    }", "  if (is_string($a) && is_string($b)) {\n    $a = preg_replace(\"/[^0-9\\\
    .,]/\", \"\", $a);\n    $b = preg_replace(\"/[^0-9\\.,]/\", \"\", $b);\n    $a\
    \ = preg_replace(\"/(\\.[0-9]*)(\\.)/\", \"$1\", $a);\n    $b = preg_replace(\"\
    /(\\.[0-9]*)(\\.)/\", \"$1\", $b);\n    if ($a === $b) {\n      return $a;\n \
    \   }\n  }\n  return $b > $a ? $a : $b;\n}\n", "  // Handle the string case.\n\
    \  if (!is_numeric($a) && !is_numeric($b)) {\n    if (!is_numeric($a)) {\n   \
    \   return $a;\n    }\n    if (!is_numeric($b)) {\n      return $b;\n    }\n \
    \ }\n\n  if (is_numeric($a)) {\n    if (is_numeric($b)) {\n      if ($a > $b)\
    \ {\n        return $b;\n      }\n      if ($a < $b) {\n        return $a;\n \
    \     }\n      return $a;\n    }\n    return $b;\n  }\n  return $a;\n}\n", " \
    \   if ($a == $b) {\n        return $a;\n    }\n    // Ensure that strings are\
    \ compared appropriately\n    if (is_int($a) && is_int($b)) {\n        $a = str_pad($a,\
    \ 10, '0', STR_PAD_LEFT);\n        $b = str_pad($b, 10, '0', STR_PAD_LEFT);\n\
    \    }\n    if (is_float($a) && is_float($b)) {\n        $a = str_pad(round($a,\
    \ 1), 10, '0', STR_PAD_LEFT);\n        $b = str_pad(round($b, 1), 10, '0', STR_PAD_LEFT);\n\
    \    }\n    if (is_string($a) && is_string($b)) {\n        $a = str_pad(str_replace(',',\
    \ '', $a), 10, '0', STR_PAD_LEFT);\n        $b = str_pad(str_replace(',', '',\
    \ $b), 10, '0', STR_PAD_LEFT);\n    }\n    if (is_string($a) && is_int($b)) {\n\
    \        $a = str_pad(str_replace(',', '', $a), 10, '0', STR_PAD_LEFT);\n    \
    \    $b = str_pad($b, 10, '0', STR_PAD_LEFT);\n    }\n    if (is_string($b) &&\
    \ is_int($a)) {\n        $b = str_pad($b, 10, '0', STR_PAD_LEFT);\n        $a\
    \ = str_pad(str_replace(',', '', $a), 10, '0', STR_PAD_LEFT);\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        $a = str_pad(str_replace(',', '', $a), 10, '0',\
    \ STR_PAD_LEFT);\n        $b = str_pad(str_replace(',', '', $b), 10, '0', STR_PAD_LEFT);\n\
    \    }\n    if (is_string($a) && is_float($b)) {\n        $a = str_pad(str_replace(',',\
    \ '', $a), 10, '0', STR_PAD_LEFT);\n        $b = str_pad(round($b, 1), 10, '0',\
    \ STR_PAD_LEFT);\n    }\n    if (is_string($b) && is_float($a)) {\n        $b\
    \ = str_pad(round($b, 1), 10, '0', STR_PAD_LEFT);\n        $a = str_pad(str_replace(',',\
    \ '', $a), 10, '0', STR_PAD_LEFT);\n    }\n\n    if (is_float($a) && is_float($b))\
    \ {\n        // Floats are compared by their precision, so if we're doing a strict\
    \ comparison,\n        // the result may be slightly different (less accurate)\n\
    \        if ($a < $b || $a == $b) {\n            return $a > $b ? $a : $b;\n \
    \       } else {\n            return $a > $b ? $b : $a;\n        }\n    }\n  \
    \  if (is_int(", "    global $compare;\n    if ($a == $b) {\n        $compare\
    \ = NULL;\n        return true;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        $a = str_replace(',', '.', $a);\n        $b = str_replace(',', '.',\
    \ $b);\n        if ($a === $b) {\n            $compare = NULL;\n            return\
    \ true;\n        }\n        $a = trim($a);\n        $b = trim($b);\n        $compare_func\
    \ = \"compare_{$a}\";\n        if (function_exists($compare_func)) {\n       \
    \     $compare = $compare_func($a, $b);\n        }\n        if ($compare === NULL)\
    \ {\n            $compare = strcmp($a, $b);\n        }\n        return $compare;\n\
    \    }\n    if (is_string($a) && is_string($b)) {\n        $a = str_replace(',',\
    \ '.', $a);\n        $b = str_replace(',', '.', $b);\n        if ($a === $b) {\n\
    \            $compare = NULL;\n            return true;\n        }\n        $a\
    \ = trim($a);\n        $b = trim($b);\n        $compare_func = \"compare_{$a}\"\
    ;\n        if (function_exists($compare_func)) {\n            $compare = $compare_func($a,\
    \ $b);\n        }\n        if ($compare === NULL) {\n            $compare = strcmp($a,\
    \ $b);\n        }\n        return $compare;\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        $a = array_map('compare_one', $a);\n        $b = array_map('compare_one',\
    \ $b); \n        if (call_user_func_array($compare_func, $a) === array_slice(call_user_func_array($compare_func,\
    \ $b), 0, 1) && call_user_func_array($compare_func, $b) === array_slice(call_user_func_array($compare_func,\
    \ $a), 0, 1)) {\n            $compare = NULL;\n            return true;\n    \
    \    }\n        if (call_user_func_array($compare_func, $a) === array_slice(call_user_func_array($compare_func,\
    \ $b), -1, 1)) {\n            $compare = -1;\n            return true;\n     \
    \   }\n        if (call_user_func_array($compare_func, $b) === array_slice(call_user_func_array($compare_func,\
    \ $a), -1, 1)) {\n            $compare = 1;\n            return true;\n      \
    \  }\n        $compare = 0;\n        return false;\n    }\n    return false;\n\
    }\n", "  // Convert to floats\n  $a = floatval($a);\n  $b = floatval($b);\n\n\
    \  if ($a == $b) {\n    return None;\n  }\n\n  // Compare strings\n  if ($a >\
    \ $b) {\n    return $a;\n  }\n\n  return $b;\n}\n", "    if ($a == $b) {\n   \
    \     return $a;\n    }\n    $a_parts = explode('.', $a);\n    $b_parts = explode('.',\
    \ $b); // Be sure to use full explode here, not just split on commas.\n    if\
    \ (count($a_parts) == count($b_parts) && count($a_parts) > 1 && count($b_parts)\
    \ > 1) {\n        $a_number = (float)$a_parts[0];\n        $b_number = (float)$b_parts[0];\n\
    \        for ($i = 1; $i <= count($a_parts); $i++) {\n            if ($a_parts[$i]\
    \ != $b_parts[$i]) {\n                $a_number = $a_number + (float)$a_parts[$i];\n\
    \                $b_number = $b_number + (float)$b_parts[$i];\n            } else\
    \ {\n                $a_number = $a_number + (float)$a_parts[$i];\n          \
    \      $b_number = $b_number + (float)$b_parts[$i];\n            }\n        }\n\
    \        if ($a_number > $b_number) {\n            return $b;\n        }\n   \
    \     return $a;\n    } else {\n        if ($a > $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n}", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        } else {\n      \
    \      return $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        } else {\n            return $b;\n\
    \        }\n    }\n    if (is_numeric($b)) {\n        if ($b == $a) {\n      \
    \      return $a;\n        } else {\n            return $b;\n        }\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if ($a > $b) {\n         \
    \   return $a;\n        } else {\n            return $b;\n        }\n    }\n \
    \   if (is_string($a)) {\n        if ($a == $b) {\n            return $a;\n  \
    \      } else {\n            return $b;\n        }\n    }\n    if (is_string($b))\
    \ {\n        if ($b == $a) {\n            return $a;\n        } else {\n     \
    \       return $b;\n        }\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nThis is an\
    \ excelent solution, however, how would you do it to get it into a function?\n\
    <|/ c |>\n<| c |>\nIt is not that hard - I just added the function to my answer.\n\
    <|/ c |>\n<| c |>\nGreat answer! I have tried this but it is not working with\
    \ string values. Please help!!\n<|/ c |>\n<| c |>\nI updated the code so that\
    \ it works for strings as well.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n<?php\n\n\
    $a = \"20\";\n$b = \"10\";\n\n$c = max($a, $b);", "    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return $a > $b ? $a : $b;\n      \
    \  } else {\n            return $a;\n        }\n    } else {\n        if (is_numeric($b))\
    \ {\n            return $b;\n        } else {\n            return $a;\n      \
    \  }\n    }\n}\n", "    if ($a === $b) {\n        return None;\n    }\n    if\
    \ (is_string($a)) {\n        if (preg_match('/,/', $a)) {\n            $a = str_replace(',',\
    \ '.', $a);\n        }\n        if (preg_match('/\\./', $a)) {\n            $a\
    \ = str_replace('.', '', $a);\n        }\n        $a = floatval($a);\n    }\n\
    \    if (is_string($b)) {\n        if (preg_match('/,/', $b)) {\n            $b\
    \ = str_replace(',', '.', $b); // commas don't work\n        }\n        if (preg_match('/\\\
    ./', $b)) {\n            $b = str_replace('.', '', $b);\n        }\n        $b\
    \ = floatval($b);\n    }\n    if (is_float($a) && is_float($b)) {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    if (is_int($a) && is_int($b)) {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    if (is_double($a) && is_double($b)) {\n     \
    \   return $a > $b ? $a : $b;\n    }\n    if (is_array($a) && is_array($b)) {\n\
    \        if (count($a) != count($b)) {\n            return None;\n        }\n\
    \        for ($i = 0; $i < count($a); $i++) {\n            $key = $a[$i];\n  \
    \          if ($a[$i] === $b) {\n                return $key;\n            }\n\
    \        }\n        return None;\n    }\n    return None;\n}\n", "    if ($a ===\
    \ $b) {\n        return $a;\n    }\n\n    $a = str_replace(',', '.', $a); // \"\
    10,3\" --> \"10.3\"\n    $b = str_replace(',', '.', $b); // \"10,3\" --> \"10.3\"\
    \n\n    // Compare as floating point numbers, not as strings.\n    $a = number_format($a,\
    \ 2);\n    $b = number_format($b, 2);\n\n    // \"10\" > \"2\" \u279E \"10\"\n\
    \    if ($a > $b) {\n        return $a;\n    }\n\n    // \"10\" < \"2\" \u279E\
    \ \"2\"\n    if ($a < $b) {\n        return $b;\n    }\n\n    // \"10\" < \"10\"\
    \ \u279E \"10\"\n    if ($a == $b) {\n        return $a;\n    }\n\n    // \"1,1\"\
    \ > \"10,1\" \u279E \"10,1\"\n    if ($a > $b) {\n        return $b;\n    }\n\n\
    \    // \"1,1\" < \"10,1\" \u279E \"1,1\"\n    if ($a < $b) {\n        return\
    \ $a;\n    }\n\n    // \"1,1\" < \"1,1\" \u279E \"1,1\"\n    if ($a == $b) {\n\
    \        return $a;\n    }\n\n    // \"1,1\" > \"1,1\" \u279E \"1\"\n    return\
    \ $a;\n}\n", "  $a = is_numeric($a) ? $a : trim($a);\n  $b = is_numeric($b) ?\
    \ $b : trim($b);\n  if ($a === $b) {\n    return $a;\n  }\n\n  // Real numbers\
    \ with commas are treated as strings.\n  // Commas here can be confused with decimals\
    \ when the decimals are at the end\n  // of the string. Since commas can be represented\
    \ both as a dot and as a\n  // decimal point, the decimal point is handled as\
    \ well.\n  // For example, compare_one(1, \"2,3\") \u279E 2, since 2.3 is the\
    \ bigger number.\n  $a = preg_replace('/(?<=\\d)(?=[^\\.,])/', '', $a);\n  $b\
    \ = preg_replace('/(?<=\\d)(?=[^\\.,])/', '', $b);\n  $a = preg_replace('/,(?=[^\\\
    .])/', '.', $a);\n  $b = preg_replace('/,(?=[^\\.])/', '.', $b);\n\n  // We need\
    \ to make sure they're not strings, so turn the numbers into numbers.\n  $a =\
    \ ltrim($a, '0');\n  $b = ltrim($b, '0');\n\n  // Make sure they're not equal\
    \ to themselves.\n  if ($a === $a) {\n    return None;\n  }\n\n  // If the numbers\
    \ are equal, compare them.\n  return ($a > $b) ? $a : $b;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI needed this functionality too. I used the algorithm\
    \ of comparing numbers instead of strings to achieve this. Here is the code I\
    \ wrote. Hope it helps someone\n<code>\n<?php\n/**\n* Comparing numbers using\
    \ \"=\" operator\n* \n* mixed $first first number\n* mixed $second second number\n\
    * bool $strict to return false if both are equal\n* int|null if $strict = false,\
    \ $first will be returned\n*/", "  $a = ltrim($a, '0');\n  $b = ltrim($b, '0');\n\
    \n  if ($a == $b) {\n    return $a;\n  }\n\n  if ($a === '-' || $b === '-') {\n\
    \    return $a > $b ? 1 : -1;\n  }\n\n  $a = explode('.', $a);\n  $b = explode('.',\
    \ $b);\n\n  for ($i = 0, $c = count($a); $i < $c; $i++) {\n    if ($a[$i] > $b[$i])\
    \ {\n      return $a[$i] - $b[$i];\n    }\n\n    if ($a[$i] < $b[$i]) {\n    \
    \  return $b[$i] - $a[$i];\n    }\n  }\n\n  return 0;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\npublic function compare($a, $b) {\n    return $a > $b ?\
    \ 1 : -1;\n}\n</code>\n<|/ a dscore=2 tags=php,compare,arrays |>\n<| a tags=php,compare,arrays\
    \ |>\nThis should work:\n<code>\n$arr1 = array(\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\");\n$arr2 = array(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\n$arr3\
    \ = array(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n\n\
    $result = compare_one($arr1, $arr2);\nif ($result == 0)\n    echo 'same';\nelse\n\
    \    echo $result;\n\n$result = compare_one($arr1, $arr3);\nif ($result == 0)\n\
    \    echo 'same';\nelse\n    echo $result;\n", "    $a = floatval($a); // make\
    \ sure we have a float since we might be using commas for decimals.\n    $b =\
    \ floatval($b);\n\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        // if either a or b is numeric then we know they\
    \ are equal\n        return $a;\n    }\n    if (is_numeric($a)) {\n        //\
    \ if a is numeric we know a is greater\n        return $b;\n    }\n    if (is_numeric($b))\
    \ {\n        // if b is numeric we know b is greater\n        return $a;\n   \
    \ }\n    if (is_string($a) && is_string($b)) {\n        // if a or b is string\
    \ then we know the string is greater\n        return $a;\n    }\n    if (is_string($a))\
    \ {\n        // if a is string we know a is greater\n        return $b;\n    }\n\
    \    if (is_string($b)) {\n        // if b is string we know b is greater\n  \
    \      return $a;\n    }\n    // If we get to here, neither a or b are numeric.\
    \ Do another check.\n    return null;\n}\n", "  if (is_string($a) && is_string($b))\
    \ {\n    return strcmp($a, $b) > 0 ? $a : $b;\n  }\n  if (!is_numeric($a) || !is_numeric($b))\
    \ {\n    // if either argument is a string, return None to indicate that they\
    \ are different\n    // if either argument is not a string, they're just compared\
    \ as normal numbers\n    return null;\n  }\n  return max($a, $b);\n}\n", "   \
    \ if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n          \
    \  return $a;\n        } else if ($a < $b) {\n            return $b;\n       \
    \ } else {\n            return $a;\n        }\n    } else if (is_string($a) &&\
    \ is_string($b)) {\n        if ($a > $b) {\n            return $a;\n        }\
    \ else if ($a < $b) {\n            return $b;\n        } else {\n            return\
    \ $a;\n        }\n    } else {\n        return $a;\n    }\n}\n", "  if (is_string($a)\
    \ && is_string($b)) {\n    // If the first is string, the second is string,\n\
    \    // we do a simple string compare.\n    return strcmp($a, $b) > 0 ? $a : $b;\n\
    \  }\n  elseif (is_string($a)) {\n    // If the first is string, the second is\
    \ not string,\n    // we do a string comparison to see if the first is bigger\
    \ than the second.\n    return strcmp($a, $b) > 0 ? $a : null;\n  }\n  elseif\
    \ (is_numeric($a)) {\n    // If the first is not string, and second is number,\
    \ we do a numeric comparison.\n    return $a > $b ? $a : null;\n  }\n  elseif\
    \ (is_numeric($b)) {\n    // If the second is string, the first is not string,\n\
    \    // and first is number, we do a numeric comparison.\n    return $a < $b ?\
    \ $a : null;\n  }\n  elseif (is_numeric($a) && is_numeric($b)) {\n    // If the\
    \ first and second are both numbers, compare them.\n    return $a > $b ? $a :\
    \ $b;\n  }\n  elseif ($a === null) {\n    // If the first is null, we return the\
    \ second value.\n    return $b;\n  }\n  elseif ($b === null) {\n    // If the\
    \ second is null, we return the first value.\n    return $a;\n  }\n  elseif (is_bool($a)\
    \ && is_bool($b)) {\n    // If both are booleans, return boolean comparison.\n\
    \    return $a ? $a : $b;\n  }\n  elseif (is_bool($a)) {\n    // If the first\
    \ is boolean, the second is boolean,\n    // we do a boolean comparison.\n   \
    \ return $a ? $a : null;\n  }\n  elseif (is_bool($b)) {\n    // If the second\
    \ is boolean, the first is boolean,\n    // we do a boolean comparison.\n    return\
    \ $a ? $b : null;\n  }\n  elseif (is_array($a)) {\n    // If the first is an array,\
    \ we check if the array is a subset of the\n    // second array.\n    if (is_array($b))\
    \ {\n      // If both arrays are associative arrays, return whether every key\
    \ in $a\n      // is also a key in $b.\n      if (array_keys($a) !== array_keys($b))\
    \ {\n        return null;\n      }\n      else {\n        // If both arrays have\
    \ the same keys, we can compare the arrays using a\n        // for loop.\n   \
    \     for ($i = 0; $i < count($a); $i++) {\n          if ($a[$i] === null) {\n\
    \            // If the array value for that key in the first array is null,\n\
    \            // we can skip that key.\n            continue;\n          }\n  \
    \        else {\n            // If we find a key ", "    $a = is_string($a) ?\
    \ explode(\",\", $a) : $a;\n    $b = is_string($b) ? explode(\",\", $b) : $b;\n\
    \n    // If it's neither a string nor an array, return None\n    if (empty($a)\
    \ || empty($b)) {\n        return 0;\n    }\n\n    // If it's an array, use recursion\
    \ on the values array\n    if (is_array($a)) {\n        $return = compare_one($a[0],\
    \ $b[0]);\n        if ($return > 0) {\n            return $return;\n        }\n\
    \        if ($return < 0) {\n            return $return * -1;\n        }\n   \
    \     $a_length = count($a);\n        $b_length = count($b);\n\n        // Compare\
    \ each value in both arrays\n        for ($i = 1; $i <= $a_length; $i++) {\n \
    \           $a_value = $a[$i - 1];\n            $b_value = $b[$i - 1];\n\n   \
    \         // If the arrays are different, return as soon as one does not match\n\
    \            if ($a_value != $b_value) {\n                return $a_value;\n \
    \           }\n        }\n\n        // At this point, we know both arrays are\
    \ the same\n        return 0;\n    }\n\n    // If it's a string and has a . or\
    \ , on it, convert it to a float and compare\n    if (preg_match(\"/^([+-]?[0-9]+|[0-9]+)(\\\
    .[0-9]*)?$/\", $a) && preg_match(\"/^([+-]?[0-9]+|[0-9]+)(\\.[0-9]*)?$/\", $b))\
    \ {\n        return $a['0'] > $b['0'] ? 1 : -1;\n    }\n    // If it's a string,\
    \ convert it to a float and compare\n    if (preg_match(\"/^([+-]?[0-9]+|[0-9]+)(\\\
    .[0-9]*)?$/\", $a)) {\n        return $a['0'] > $b['0'] ? 1 : -1;\n    }\n   \
    \ if (preg_match(\"/^([+-]?[0-9]+|[0-9]+)(\\.[0-9]*)?$/\", $b)) {\n        return\
    \ $a['0'] > $b['0'] ? 1 : -1;\n    }\n\n    // If the values are equal, return\
    \ None\n    return 0;\n}", "  if (is_float($a) && is_float($b)) {\n    if ($a\
    \ == $b) {\n      return $a;\n    }\n    $diff = $a - $b;\n    if ($diff <= 0)\
    \ {\n      return $a;\n    }\n    if ($diff > 0) {\n      return $b;\n    }\n\
    \  }\n  else if (is_int($a) && is_int($b)) {\n    if ($a == $b) {\n      return\
    \ $a;\n    }\n    if ($a > $b) {\n      return $a;\n    }\n    return $b;\n  }\n\
    \  else if (is_string($a) && is_string($b)) {\n    $a_array = explode(',', $a);\n\
    \    $b_array = explode(',', $b);\n    foreach ($a_array as $a_k => $a_v) {\n\
    \      if ($a_v == $b_array[$a_k]) {\n        continue;\n      }\n      if ($a_v\
    \ > $b_array[$a_k]) {\n        return $b_array[$a_k];\n      }\n      return $a_array[$a_k];\n\
    \    }\n  }\n  else {\n    return $a > $b ? $a : $b;\n  }\n}\n", "    $a = floatval($a);\n\
    \    $b = floatval($b);\n    if ($a === $b) {\n        return $a;\n    }\n   \
    \ if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n          \
    \  return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a) ||\
    \ is_numeric($b)) {\n        return $a < $b ? $a : $b;\n    }\n    if ($a ===\
    \ $b) {\n        return $a;\n    }\n    return false;\n}\n</code>\nThis implementation\
    \ is simple and straightforward and will work for every single case, even with\
    \ decimal and scientific notation.\n<|/ a dscore=5 |>\n<| c |>\nNote that this\
    \ doesn't work in PHP 5.5 or below, as `return (is_float($a) && is_float($b))\
    \ ? max($a, $b) : max($a, $b);` does not evaluate both operands to floats.\n<|/\
    \ c |>\n<| c |>\nAlso note that this doesn't handle the case where both values\
    \ are strings.\n<|/ c |>\n<| c |>\nWhy are you using floatval() on both values\
    \ if the values are guaranteed to be floats?\n<|/ c |>\n<| c |>\nbecause `max()`\
    \ requires two parameters.\n<|/ c |>\n<| a tags=php,comparison |>\nYou can use\
    \ is_numeric like this:\n<code>\nif(is_numeric($myvar) && is_numeric($myvar2)){\n\
    \    //do something\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe question doesn't\
    \ specify exactly what \"comparing\" means, and `is_numeric(\"0\")` is certainly\
    \ not what was wanted.\n<|/ c |>\n<| c |>\nIt says \"comparing variables\", so\
    \ that's what I was using it for.\n<|/ c |>\n<| c |>\nIt would be a better answer\
    \ if you explained how exactly this would help.\n<|/ c |>\n<| a dscore=5 |>\n\
    There are so many answers here and none of them really mentioning the benefit\
    \ of PHP 5 type juggling. \n<code>\n<?php\n$x = 10; // int\n$y = 10.00; // float\n\
    $z = \"10.00\"; // string\n\n$result = max($x, $y);\n$result = max($x, $z); //\
    \ PHP 5 type juggling - will return 10.00\n</code>\nPHP type juggling is the process\
    \ of converting a variable's value to its intended type as defined by PHP's manual:\
    \ http://www.php.net/manual/en/language.types.type-juggling.php", "  if (is_null($a))\
    \ {\n    return $b;\n  } else if (is_null($b)) {\n    return $a;\n  } else if\
    \ (is_numeric($a) && is_numeric($b)) {\n    $a = floatval($a);\n    $b = floatval($b);\n\
    \    if ($a == $b) {\n      return $a;\n    } else if ($a > $b) {\n      return\
    \ $a;\n    } else {\n      return $b;\n    }\n  } else if (is_string($a)) {\n\
    \    $a = preg_replace(\"/[,.]/\", \"\", $a);\n    $b = preg_replace(\"/[,.]/\"\
    , \"\", $b);\n    $a = strval($a);\n    $b = strval($b);\n    if ($a == $b) {\n\
    \      return $a;\n    } else if ($a > $b) {\n      return $a;\n    } else {\n\
    \      return $b;\n    }\n  }\n}\n", "  // Return None if the values are equal.\n\
    \  if ($a === $b) {\n    return null;\n  }\n  else if (is_numeric($a)) {\n   \
    \ if (is_numeric($b)) {\n      if ($a > $b) {\n        return $b;\n      }\n \
    \     else if ($a < $b) {\n        return $a;\n      }\n      else {\n       \
    \ return $a;\n      }\n    }\n    else {\n      return $a;\n    }\n  }\n  else\
    \ {\n    return $a;\n  }\n}\n", "  if (is_numeric($a) && is_numeric($b)) {\n \
    \   if ($a === $b) {\n      return $a;\n    }\n    if ($a > $b) {\n      return\
    \ $a;\n    }\n    if ($b > $a) {\n      return $b;\n    }\n  }\n  $a = (string)$a;\n\
    \  $b = (string)$b;\n  $a_num = filter_var(filter_var($a, FILTER_SANITIZE_NUMBER_INT),\
    \ FILTER_VALIDATE_FLOAT);\n  $b_num = filter_var(filter_var($b, FILTER_SANITIZE_NUMBER_INT),\
    \ FILTER_VALIDATE_FLOAT);\n  if ($a_num !== $b_num) {\n    return $a;\n  }\n}",
  "  if (!is_numeric($a) || !is_numeric($b) || $a === $b)\n    return $a == $b ? $a\
    \ : NULL;\n\n  $a = floatval($a);\n  $b = floatval($b);\n  if ($a == $b) {\n \
    \   return $a;\n  }\n\n  return $a > $b ? $a : $b;\n}\n", "    $a = floatval($a);\n\
    \    $b = floatval($b);\n    if ($a === $b) {\n        // If the numbers are the\
    \ same, return the other value\n        return $a;\n    }\n    // If not a number,\
    \ convert the values into their numeric equivalent\n    // to allow for comparison\n\
    \    if (! ctype_digit($a) || ! ctype_digit($b)) {\n        $a = (float) $a;\n\
    \        $b = (float) $b;\n    }\n    // If either is NaN, return the other value\n\
    \    if ($a === $b) {\n        return $a;\n    }\n    // If both numbers are zero,\
    \ return None\n    if ($a === 0 && $b === 0) {\n        return None;\n    }\n\
    \    // If one number is positive and the other is negative, return negative one\n\
    \    if ($a > 0 && $b < 0) {\n        return -1 * $b;\n    }\n    // If one number\
    \ is negative and the other is positive, return positive one\n    if ($a < 0 &&\
    \ $b > 0) {\n        return -1 * $a;\n    }\n    // If both are zero, return None\n\
    \    if ($a === 0 && $b === 0) {\n        return None;\n    }\n    // If the numbers\
    \ differ in sign, return negative one\n    if ($a < 0 && $b < 0) {\n        return\
    \ -1 * $a;\n    }\n    // If the numbers differ in sign, return positive one\n\
    \    if ($a > 0 && $b > 0) {\n        return -1 * $b;\n    }\n    // If both are\
    \ positive, return the larger number\n    if ($a > 0 && $b > 0) {\n        return\
    \ $b > $a ? $b : $a;\n    }\n    // If only one number is positive, return the\
    \ smaller number\n    if ($a > 0 && $b < 0) {\n        return $b < $a ? $a : $b;\n\
    \    }\n    // If both are negative, return the smaller one\n    if ($a < 0 &&\
    \ $b < 0) {\n        return $a < $b ? $a : $b;\n    }\n    // Otherwise return\
    \ None\n    return None;\n}\n$result = compare_one(1, \"2,3\");\nvar_dump($result);\n\
    </code>\n<|/ a |>\n<| c |>\n`return $a > $b ? $a : $b` will make $b become the\
    \ return value even if $a is false, so you should reverse your conditions (`return\
    \ $a < $b ? $a : $b`).\n<|/ c |>\n<| c |>\nThis is so close to perfect that I\
    \ would not accept it as the answer but you did help me understand how to get\
    \ the result that I wanted.\n<|/ c |>\n<| a |>\nJust a quick note, for those who\
    \ want to avoid an if-else chain and are ", "  $a = str_replace(\",\", \"\", $a);\n\
    \  $b = str_replace(\",\", \"\", $b);\n\n  // floats can just be compared with\
    \ normal floats\n  if (is_float($a) && is_float($b)) {\n    return $a > $b ? 1\
    \ : 0;\n  }\n\n  // strings are converted to real numbers and compared to each\
    \ other\n  // floats are converted to doubles and compared to doubles\n  if (is_float($a))\
    \ {\n    $a = floatval($a);\n  }\n  if (is_float($b)) {\n    $b = floatval($b);\n\
    \  }\n\n  // If strings have a higher precedence, then they are considered more\
    \ likely to be equal\n  if ($a === $b) {\n    return 0;\n  }\n\n  // If either\
    \ string has a . in them we consider them more likely to be equal\n  // floats\
    \ will have . and , be treated as equal if either has a decimal part\n  if (strpos($a,\
    \ \".\") !== false || strpos($b, \".\") !== false) {\n    $a_dec = strpos($a,\
    \ \".\") > strpos($b, \".\") ? 1 : 0;\n    $b_dec = strpos($a, \".\") > strpos($b,\
    \ \".\") ? 1 : 0;\n    if ($a_dec === $b_dec) {\n      return 0;\n    }\n    return\
    \ $a_dec > $b_dec ? 1 : 0;\n  }\n\n  // If we get here, neither string has a .\
    \ in them so we compare them as strings\n  return strcmp($a, $b) > 0 ? 1 : 0;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,floating-point,math |>\nThis doesn't solve\
    \ the problem of how to determine when one number is bigger than another. But\
    \ it solves the problem of how to determine when two numbers are equal. The same\
    \ is true for comparing floats -- they can be considered equal, just not equal.\n\
    The following function should work correctly for both float and integer comparisons.\n\
    <code>", "  if (is_numeric($a) && is_numeric($b)) {\n    if ($a == $b) {\n   \
    \   return $a;\n    }\n    if ($a > $b) {\n      return $a;\n    }\n    return\
    \ $b;\n  }\n  if (is_numeric($a)) {\n    if ($a == $b) {\n      return $a;\n \
    \   }\n    if ($a > $b) {\n      return $a;\n    }\n    return $b;\n  }\n  if\
    \ (is_numeric($b)) {\n    if ($a == $b) {\n      return $a;\n    }\n    if ($a\
    \ > $b) {\n      return $b;\n    }\n    return $b;\n  }\n  if (is_string($a))\
    \ {\n    $a = trim($a);\n    $b = trim($b);\n    if ($a == $b) {\n      return\
    \ $a;\n    }\n    if ($a > $b) {\n      return $a;\n    }\n    return $b;\n  }\n\
    \  if (is_string($b)) {\n    $a = trim($a);\n    $b = trim($b);\n    if ($a ==\
    \ $b) {\n      return $a;\n    }\n    if ($a > $b) {\n      return $b;\n    }\n\
    \    return $b;\n  }\n  return None;\n}\n", "  global $phpunit;\n\n  if (is_numeric($a)\
    \ && is_numeric($b)) {\n    if (is_numeric($a)) {\n      $a = floatval($a);\n\
    \    }\n    if (is_numeric($b)) {\n      $b = floatval($b);\n    }\n    if ($a\
    \ > $b) {\n      return $phpunit->prophecy->reveal((string) $b);\n    }\n    if\
    \ ($a < $b) {\n      return $phpunit->prophecy->reveal((string) $a);\n    }\n\
    \    if ($a == $b) {\n      return null;\n    }\n  }\n  return $phpunit->prophecy->reveal((string)\
    \ $a);\n}\n", "    // convert numbers to floats\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        $a = floatval($a);\n        $b = floatval($b);\n    }\n    // convert\
    \ strings to floats\n    if (is_string($a) && is_string($b)) {\n        $a = floatval($a);\n\
    \        $b = floatval($b);\n    }\n    // if either value is not a number or\
    \ it is a number but not a number string...\n    if (! is_numeric($a) || ! is_numeric($b))\
    \ {\n        // if they are equal, return None\n        if ($a == $b) {\n    \
    \        return null;\n        }\n        // else if one is null return non-null\n\
    \        else if (is_null($a)) {\n            return $b;\n        }\n        //\
    \ else if one is non-null return null\n        else if (is_null($b)) {\n     \
    \       return $a;\n        }\n        // else if both are numbers, check if they\
    \ are equal\n        // note: you can also compare strings and convert them to\
    \ numbers via floatval\n        else if (is_numeric($a) && is_numeric($b)) {\n\
    \            $a = floatval($a);\n            $b = floatval($b);\n            return\
    \ $a === $b ? null : $a > $b ? $a : $b;\n        }\n        // else if they are\
    \ both null or both non-null, return null\n        else if (is_null($a) && is_null($b))\
    \ {\n            return null;\n        }\n        // else if one is null return\
    \ non-null\n        else if (is_null($a)) {\n            return $b;\n        }\n\
    \        // else if one is non-null return null\n        else if (is_null($b))\
    \ {\n            return $a;\n        }\n        // else if both are strings, compare\
    \ them and convert them if necessary\n        else if (is_string($a) && is_string($b))\
    \ {\n            $a = floatval($a);\n            $b = floatval($b);\n        \
    \    if ($a === $b) {\n                return null;\n            }\n         \
    \   return $a > $b ? $a : $b;\n        }\n    }\n    // if the values are equal,\
    \ return None\n    if ($a == $b) {\n        return null;\n    }\n    // if the\
    \ values are non-null, return non-null\n    else if (is_null($a)) {\n        return\
    \ $b;\n    }\n    // if the values are non-null, return null\n    else if (is_null($b))\
    \ {\n        return $a;\n    }\n    // otherwise, return the larger value\n  \
    \  return $a > $b ? $a : $b;\n}\n", "  global $decimal_digits;\n  $a = explode(',',\
    \ $a, $decimal_digits);\n  $b = explode(',', $b, $decimal_digits);\n  $a = array_map('floatval',\
    \ $a);\n  $b = array_map('floatval', $b); // Needed to ensure float comparison\
    \ works for decimals\n  return ($a > $b ? $a : $b);\n}", "    // Convert to a\
    \ number type\n    $a = floatval($a);\n    $b = floatval($b);\n\n    // If the\
    \ values are equal, return None\n    if ($a == $b) {\n        return null;\n \
    \   }\n\n    // Otherwise, return the larger one\n    return $a > $b ? $a : $b;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI appreciate the answer, but I am looking\
    \ for a generic solution for any given type.\n<|/ c |>\n<| c |>\nSorry for not\
    \ being able to provide a generic solution, I'm sure it's possible, but my PHP\
    \ knowledge is limited to \"the big thing\", so I can't offer any help.\n<|/ c\
    \ |>\n<| a tags=php,number-formatting,types dscore=3 |>\nYou can convert both\
    \ operands to an integer and compare them:\n<code>", "  if ($a === $b) {\n   \
    \ return None;\n  }\n  if (is_numeric($a) && is_numeric($b)) {\n    if (abs($a\
    \ - $b) < 0.00001) {\n      return $a;\n    }\n    return $b;\n  }\n  return $a;\n\
    }\n", "  // If both are numbers, compare them.\n  if (is_numeric($a) && is_numeric($b))\
    \ {\n    if ($a == $b) {\n      return $a;\n    }\n    // If both are integers,\
    \ compare them numerically.\n    elseif ($a === $b) {\n      return intval($a);\n\
    \    }\n    // If one is numeric, convert it to the other's type.\n    elseif\
    \ (is_numeric($a)) {\n      return intval($b);\n    }\n    // If the other is\
    \ numeric, convert it to the other's type.\n    else {\n      return intval($a);\n\
    \    }\n  }\n  // If a is a string, convert it to the other's type.\n  elseif\
    \ (is_string($a)) {\n    return intval($b);\n  }\n  // If the other is a string,\
    \ convert it to the other's type.\n  elseif (is_string($b)) {\n    return intval($a);\n\
    \  }\n  // If both are strings, compare them.\n  elseif ($a === $b) {\n    return\
    \ $a;\n  }\n  // If one of them is a string, compare them alphabetically.\n  elseif\
    \ (is_string($a) && is_string($b)) {\n    return strcasecmp($a, $b);\n  }\n  //\
    \ If one of them is a string, compare them alphabetically.\n  elseif (is_string($a))\
    \ {\n    return strcasecmp($a, $b);\n  }\n  // If one is a string, compare them\
    \ alphabetically.\n  elseif (is_string($b)) {\n    return strcasecmp($a, $b);\n\
    \  }\n  // If neither are strings, just compare.\n  else {\n    return $a ===\
    \ $b ? $a : null;\n  }\n}", "  if (is_float($a)) {\n    if (is_float($b)) {\n\
    \      return ($a > $b) ? $a : $b;\n    }\n    return $a;\n  }\n  if (is_float($b))\
    \ {\n    return $b;\n  }\n  if (is_int($a)) {\n    return $a;\n  }\n  if (is_int($b))\
    \ {\n    return $b;\n  }\n  if ($a === $b) {\n    return None;\n  }\n  return\
    \ $a < $b ? $a : $b;\n}\n", "    if (is_string($a) && is_string($b)) {\n     \
    \   $a = str_replace(\",\", \".\", $a);\n        $b = str_replace(\",\", \".\"\
    , $b);\n        $a = str_replace(\".\", \"\", $a);\n        $b = str_replace(\"\
    .\", \"\", $b);\n        $a = floatval($a);\n        $b = floatval($b);\n    }\n\
    \    if ($a > $b) {\n        return $b;\n    }\n    if ($a < $b) {\n        return\
    \ $a;\n    }\n}\n", "  if (is_numeric($a) && is_numeric($b)) {\n    if ($a > $b)\
    \ {\n      return $a;\n    }\n    if ($a < $b) {\n      return $b;\n    }\n  }\n\
    \  if (is_numeric($a)) {\n    return $a;\n  }\n  if (is_numeric($b)) {\n    return\
    \ $b;\n  }\n  if (is_string($a)) {\n    if ($a === '' || $b === '') {\n      return\
    \ false;\n    }\n    if (strval($a) === strval($b)) {\n      return 0;\n    }\n\
    \    return (strval($a) < strval($b)) ? $a : $b;\n  }\n  return ($a < $b) ? $a\
    \ : $b;\n}\n", "  if (is_string($a) && is_string($b)) {\n    if (strpos($a, \"\
    .\") == strpos($b, \".\")) {\n      return str_replace(\".\", \"\", $b);\n   \
    \ }\n    return $b;\n  }\n  elseif (is_string($a)) {\n    return $a;\n  }\n  elseif\
    \ (is_string($b)) {\n    return $b;\n  }\n  elseif (is_numeric($a)) {\n    if\
    \ (is_numeric($b)) {\n      if ($a == $b) {\n        return $a;\n      }\n   \
    \   elseif (is_float($a)) {\n        if ($a == floor($a)) {\n          return\
    \ $a;\n        }\n        else {\n          return $b;\n        }\n      }\n \
    \     elseif (is_int($b)) {\n        if ($b == floor($b)) {\n          return\
    \ $b;\n        }\n        else {\n          return $a;\n        }\n      }\n \
    \   }\n  }\n  elseif (is_numeric($b)) {\n    return $b;\n  }\n  elseif (is_float($a))\
    \ {\n    if (is_float($b)) {\n      if ($a == $b) {\n        return $a;\n    \
    \  }\n      elseif (is_int($a)) {\n        if ($a == floor($a)) {\n          return\
    \ $a;\n        }\n        else {\n          return $b;\n        }\n      }\n \
    \     elseif (is_int($b)) {\n        if ($b == floor($b)) {\n          return\
    \ $b;\n        }\n        else {\n          return $a;\n        }\n      }\n \
    \   }\n  }\n}", "    $a = floatval($a);\n    $b = floatval($b);\n\n    // We only\
    \ return None when the values are equal or the values are\n    // both strings\
    \ representing the same number.\n    if ($a === $b) {\n        return $a;\n  \
    \  } elseif (is_numeric($a) && is_numeric($b)) {\n        return $a > $b ? $a\
    \ : $b;\n    }\n}\n", "    if ($a === $b) {\n        return $a;\n    }\n    //\
    \ If $a is a float, and $b is a string, convert to a float\n    if ((float)(int)$a\
    \ === (int)(float)$b) {\n        return (float)$a;\n    }\n    // If $a is a string,\
    \ and $b is a float, convert to a string\n    if ((string)$a === (string)(float)$b)\
    \ {\n        return $a;\n    }\n    // If $a is an integer, and $b is a string,\
    \ convert to an integer\n    if ($a === (string)(int)$b) {\n        return (int)$a;\n\
    \    }\n    // If $a is a string, and $b is an integer convert to a string\n \
    \   if ($a === (string)(int)$b) {\n        return $a;\n    }\n    // If $a is\
    \ a float, and $b is a float, convert to a float\n    if ((float)$a === (float)(float)$b)\
    \ {\n        return (float)$a;\n    }\n    // If $a is an integer, and $b is a\
    \ float, convert to a string\n    if ($a === (float)(int)$b) {\n        return\
    \ $a;\n    }\n    // If $a is a string, and $b is an integer, convert to a string\n\
    \    if ($a === (string)(int)$b) {\n        return $a;\n    }\n    // If $a is\
    \ None, and $b is None, return None\n    if ($a === None) {\n        return $b;\n\
    \    }\n    // If $b is None, and $a is None, return None\n    if ($b === None)\
    \ {\n        return $a;\n    }\n    // If $a is a string, and $b is a string,\
    \ return $a\n    if ($a === (string)$b) {\n        return $a;\n    }\n    // If\
    \ $b is a string, and $a is a string, return $b\n    if ($b === (string)$a) {\n\
    \        return $b;\n    }\n    // If $a is a string, and $b is an integer, return\
    \ a string\n    if ($a === (string)$b) {\n        return $a;\n    }\n    // If\
    \ $b is a string, and $a is an integer, return a string\n    if ($b === (string)$a)\
    \ {\n        return $b;\n    }\n    // If $a and $b are both strings, return $a\n\
    \    if ((string)$a === (string)$b) {\n        return $a;\n    }\n    // If $a\
    \ and $b are both integers, return a string\n    if ((int)$a === (int)$b) {\n\
    \        return $a;\n    }\n    // If $a and $b are both floats, return a string\n\
    \    if ((float)$a === (float)$b) {\n        return $a;\n    }\n    // If $a and\
    \ $b are both None, return None\n    if ($a === None) {\n        return $b;\n\
    \    }\n    // If $b and $a are both None, ", "  if (is_float($a) && is_float($b))\
    \ {\n    if ($a > $b) {\n      return $a;\n    }\n    else {\n      return $b;\n\
    \    }\n  }\n  else if (is_int($a) && is_int($b)) {\n    return $a > $b ? $a :\
    \ $b;\n  }\n  else {\n    if ($a < $b) {\n      return $a;\n    }\n    else {\n\
    \      return $b;\n    }\n  }\n}\n", "    if (is_int($a) && is_int($b)) {\n  \
    \      $a = intval($a);\n        $b = intval($b);\n    }\n    elseif (is_float($a)\
    \ && is_float($b)) {\n        $a = floatval($a);\n        $b = floatval($b);\n\
    \    }\n    elseif (is_numeric($a) && is_numeric($b)) {\n        $a = floatval($a);\n\
    \        $b = floatval($b);\n    }\n    else {\n        $a = strval($a);\n   \
    \     $b = strval($b);\n    }\n\n    // Strings are greater if they have less\
    \ characters or have more\n    // than one dot or comma after them.\n    // Note\
    \ that this is not a perfect comparison because \"0\" < \"0.0\"\n    // but \"\
    0.0\" < \"0.\" are both true. Though it would be possible\n    // to do this with\
    \ regular expressions, it would result in more\n    // complex code than is necessary.\n\
    \    $diff = $a > $b;\n    if (strpos($a, ',') !== false || strpos($a, '.') !==\
    \ false) {\n        $a_array = explode(',', $a);\n        $b_array = explode(',',\
    \ $b);\n    }\n    else {\n        $a_array = array();\n        $b_array = array();\n\
    \    }\n    $a_max = max($a_array);\n    $b_max = max($b_array);\n    $a_min =\
    \ min($a_array);\n    $b_min = min($b_array);\n    $diff = $a_max > $b_max;\n\
    \    if ($a_max !== $b_max || $a_min !== $b_min || strpos($a, '.') !== false ||\
    \ strpos($b, '.') !== false) {\n        $diff = true;\n    }\n    return $diff;\n\
    }\n</code>\n<|/ a dscore=1 tags=php |>\n<| a dscore=1 |>\n<code>", "  // TODO:\
    \ Write a unit test to show that this works.\n  if (is_float($a) && is_float($b))\
    \ {\n    if ($a === $b) {\n      return $a;\n    }\n    return $a > $b ? $a :\
    \ $b;\n  }\n\n  if (is_string($a) && is_string($b)) {\n    if ($a === $b) {\n\
    \      return $a;\n    }\n    // Handle commas between numbers and dots instead\
    \ of spaces. These could come from\n    // user input, so we shouldn't change\
    \ them by default.\n    $a = (preg_match('/^[\\d.]+/', $a) ? $a . ',' : $a);\n\
    \    $b = (preg_match('/^[\\d.]+/', $b) ? $b . ',' : $b);\n    if ($a === $b)\
    \ {\n      return $a;\n    }\n    return $a > $b ? $a : $b;\n  }\n\n  if (is_int($a)\
    \ && is_int($b)) {\n    if ($a === $b) {\n      return $a;\n    }\n    return\
    \ $a > $b ? $a : $b;\n  }\n\n  if ($a === $b) {\n    return $a;\n  }\n  return\
    \ $a > $b ? $a : $b;\n}\n", "    if (is_float($a)) {\n        if (is_float($b))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           else {\n                return $b;\n            }\n        }\n   \
    \     else if (is_integer($b)) {\n            return $b;\n        }\n        else\
    \ {\n            return $a;\n        }\n    }\n    elseif (is_integer($a)) {\n\
    \        if (is_float($b)) {\n            return $b;\n        }\n        else\
    \ if (is_integer($b)) {\n            if ($a < $b) {\n                return $a;\n\
    \            }\n            else {\n                return $b;\n            }\n\
    \        }\n        else if ($a == $b) {\n            return $a;\n        }\n\
    \        else {\n            return $a;\n        }\n    }\n    elseif ($a ===\
    \ $b) {\n        return $a;\n    }\n    else {\n        return $a;\n    }\n}\n\
    </code>\n<|/ a dscore=5 tags=string,compare,php,casting |>\n<| c |>\nThat's just\
    \ amazing. How would you solve this in Javascript or any similar language? I hate\
    \ having to write it myself...\n<|/ c |>\n<| c |>\n`return $b > $a ? $b : $a;`\
    \ would work in the case of `$a='12'; $b='12.00'`\n<|/ c |>\n<| c |>\nNot sure,\
    \ but you may also want to add `elseif (is_string($b)) { return $a; }` after the\
    \ first `elseif` to make it easier to sort numbers with leading zeroes.\n<|/ c\
    \ |>\n<| c |>\nThis is great, but it doesn't sort strings alphabetically. Can\
    \ anyone fix that? I added an answer, but it's pretty messy so I won't post it\
    \ as an answer, but I'll post a link to it here. https://stackoverflow.com/a/64878397/3284355\n\
    <|/ c |>\n<| c |>\nI updated my answer to sort strings.\n<|/ c |>\n<| a |>\nHere's\
    \ a PHP 7 answer, with added functionality to allow sorting strings in addition\
    \ to integers.\n<code>\n$sorting_function = function ($a, $b) {\n    if (is_float($a))\
    \ {\n        if (is_float($b)) {\n            return $a > $b ? 1 : -1;\n     \
    \   }\n        else if (is_integer($b)) {\n            return $a > $b ? -1 : 1;\n\
    \        }\n        else if ($a == $b) {\n            return 0;\n        }\n \
    \       else {\n            return $a > $b ? 1 : -1;\n        }\n    }\n    elseif\
    \ (is_integer($a)) {\n        if (is_float($b)) {\n            return 1;\n   \
    \     }\n        else if (is_integer($b", "  // Check types of each value\n  if\
    \ (!isset($a)) {\n    $a = 0;\n  }\n  if (!isset($b)) {\n    $b = 0;\n  }\n  if\
    \ (!is_numeric($a) || !is_numeric($b)) {\n    return null;\n  }\n\n  // Check\
    \ the types and convert them to integers so we're comparing numbers\n  $a = intval($a);\n\
    \  $b = intval($b);\n\n  // If a is bigger, return it\n  if ($a > $b) {\n    return\
    \ $a;\n  }\n  return $b;\n}\n</code>\n<|/ a dscore=5 |>\n<| a |>\nIf you're using\
    \ CodeIgniter, you can use the comparison operators as in:\n<code>\n$this->db->where('field1\
    \ > value1', NULL, FALSE);\n</code>\nThe second parameter is for case-insensitive\
    \ search. By default it is set to TRUE.\n<|/ a tags=mysql,php,comparison,sql,where\
    \ dscore=4 |>\n<| c |>\nIt's also useful to know about `FALSE` and `TRUE`.  These\
    \ are constants, and can be used within `$this->db->where()` like so: `$this->db->where('field1\
    \ > value1', TRUE, FALSE);`\n<|/ c |>\n<| a tags=mysql,php,comparison,sql,where\
    \ |>\n<code>\n$this->db->where('price > 50');\n</code>\nor\n<code>\n$this->db->where('price\
    \ > ?', 50);\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 tags=mysql,php,comparison,sql,where\
    \ |>\nWhen doing a comparison against a text field, use LIKE instead of =. The\
    \ LIKE operator will use a full text search instead of just matching the exact\
    \ value.\n<code>\n$this->db->where('name LIKE ?', '%' . $keyword . '%');\n</code>\n\
    <|/ a |>\n<| c |>\nThis is actually a dangerous idea because it will return different\
    \ results depending on how the variable is set, i.e. `'some value'` and `'some-value'`.\n\
    <|/ c |>\n<| c |>\nYeah good point, you should definitely use mysql_real_escape_string()\
    \ on the variable first.\n<|/ c |>\n<| a tags=mysql,php,comparison,sql,where dscore=4\
    \ |>\nIf you really need a numeric comparison, you can use something like this:\n\
    <code>\n$this->db->where(\"price < ?\", $price);\n</code>\n<|/ a |>\n<| c |>\n\
    I like this method because it will escape the data\n<|/ c |>\n<| a tags=mysql,php,",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n         \
    \   return $b;\n        } else if ($a < $b) {\n            return $a;\n      \
    \  } else {\n            return null;\n        }\n    } else {\n        if ($a\
    \ > $b) {\n            return $a;\n        } else if ($a < $b) {\n           \
    \ return $b;\n        } else {\n            return null;\n        }\n    }\n}\n\
    $a = 1;\n$b = 2.5;\n$c = \"1,5\";\n", "  if (is_numeric($a) && is_numeric($b))\
    \ {\n    return $a > $b ? $a : $b;\n  } else if (is_numeric($a)) {\n    $a = str_replace(',',\
    \ '.', $a);\n    return $a > $b ? $a : $b;\n  } else if (is_numeric($b)) {\n \
    \   $b = str_replace(',', '.', $b);\n    return $a > $b ? $a : $b;\n  }\n  return\
    \ is_string($a) && is_string($b) ? strcmp($a, $b) : $a === $b ? 0 : (is_string($a)\
    \ ? -1 : 1);\n}", "    $a = strtolower($a);\n    $b = strtolower($b);\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $b;\n        }\n    } else {\n        if ($a < $b)\
    \ {\n            return $b;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n    }\n    return null;\n}\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\n`1` should be `\"1\"`\n<|/ c |>\n<| c |>\nThank you, I have fixed that.\n\
    <|/ c |>\n<| a tags=php,sorting dscore=2 |>\nHere's a function that will sort\
    \ an array of items by a specified property in ascending order.\n<code>\n<?php\n",
  "    if (!is_numeric($a) || !is_numeric($b)) {\n        if (is_numeric($a) && is_numeric($b))\
    \ {\n            if ($a == $b) {\n                return $a;\n            } else\
    \ {\n                return $a > $b ? $a : $b;\n            }\n        }\n   \
    \ }\n    return $a > $b ? $a : $b;\n}\n", "  if (!is_numeric($a)) {\n    $a =\
    \ str_replace(',', '.', $a); // make sure commas are decimal, not point\n  }\n\
    \  if (!is_numeric($b)) {\n    $b = str_replace(',', '.', $b); // make sure commas\
    \ are decimal, not point\n  }\n\n  if ($a == $b) return null;\n  return ($a >\
    \ $b) ? $a : $b;\n}", "  if (is_float($a)) {\n    $a = str_replace(',', '.', $a);\n\
    \  }\n  if (is_float($b)) {\n    $b = str_replace(',', '.', $b);\n  }\n  if (is_string($a))\
    \ {\n    $a = str_replace(',', '.', $a);\n  }\n  if (is_string($b)) {\n    $b\
    \ = str_replace(',', '.', $b);\n  }\n  if ($a == $b) {\n    return None;\n  }\n\
    \  return $a > $b ? $a : $b;\n}\n", "    if ($a == $b) {\n        return;\n  \
    \  }\n    $a = strval($a);\n    $b = strval($b);\n    if (strlen($a) > strlen($b))\
    \ {\n        return $b;\n    }\n    return $a;\n}\n\n$data = json_decode(file_get_contents(\"\
    php://input\"), true);\n\n$keys = $data[\"keys\"];\n$values = $data[\"values\"\
    ];\n\n$result = array_map(\n    function ($a, $b) use ($keys, $values) {\n   \
    \     $a = $keys[$a];\n        $b = $values[$b];\n        $result = compare_one($a,\
    \ $b);\n        if ($result == null) {\n            $result = $a;\n        }\n\
    \        return $result;\n    },\n    array_keys($values),\n    array_values($values)\n\
    );\n\necho json_encode($result);\n</code>\nhttps://3v4l.org/fV6rH\n<|/ a |>\n\
    <| c |>\nHi Nick, thanks for your answer, I tested it out, but it's not working\
    \ for me, i changed my php code and it work, thank you\n<|/ c |>\n<| c |>\nI added\
    \ a sample PHP code which you could try running directly in a PHP environment.\
    \ Let me know how it goes!\n<|/ c |>\n<| c |>\nyes it's work, i just modified\
    \ your code to make it work, thank you\n<|/ c |>\n<| c |>\nHi Nick, I have a question,\
    \ how did you make the function compare two array without using 'use'? Thank you\n\
    <|/ c |>\n<| c |>\n`use` was introduced in PHP 5.4. If you are using an earlier\
    \ version of PHP, you need to assign the function to a variable and pass that\
    \ variable into the `array_map` call. I've updated my example above to demonstrate\
    \ what I mean. Hope that helps!\n<|/ c |>\n<| a tags=php,json,arrays |>\nHere's\
    \ another way of doing the same thing:\n<code>\n<?php\n\n$input = '{\n    \"keys\"\
    \ : [\"id\", \"name\", \"price\", \"color\"],\n    \"values\" : [\n        { \"\
    id\" : 1, \"name\" : \"John\", \"price\" : 5000, \"color\" : \"red\"},\n     \
    \   { \"id\" : 2, \"name\" : \"Peter\", \"price\" : 50000, \"color\" : \"blue\"\
    },\n        { \"id\" : 3, \"name\" : \"Mary\", \"price\" : 10000, \"color\" :\
    \ \"green\"},\n        { \"id\" : 4, \"name\" : \"John\", \"price\" : 55000, \"\
    color\" : \"red\"},\n        { \"id\" : 5, \"name\" : \"Mary\", \"price\" : 60000",
  "  if ($a == $b) {\n    return None;\n  }\n  if (is_string($a)) {\n    $a = str_replace(',',\
    \ '.', $a);\n  }\n  if (is_string($b)) {\n    $b = str_replace(',', '.', $b);\n\
    \  }\n  if (is_float($a)) {\n    $a = number_format($a, 2);\n  }\n  if (is_float($b))\
    \ {\n    $b = number_format($b, 2);\n  }\n  if ($a == $b) {\n    return None;\n\
    \  }\n  return $a > $b ? $a : $b;\n}\n\n$output = array();\n$output = array_merge($output,\
    \ array('name' => 'Bill', 'email' => 'removed@example.com'));\n$output = array_merge($output,\
    \ array('name' => 'Jim', 'email' => 'removed@example.com'));\n\n$result = array();\n\
    $result[$output['name']]['email'] = $output['email'];\n\n$result = array();\n\
    $result = array_merge($result, array('name' => 'Bill', 'email' => 'removed@example.com'));\n\
    $result = array_merge($result, array('name' => 'Jim', 'email' => 'removed@example.com'));\n\
    $result = array_merge($result, array('name' => 'Bob', 'email' => 'removed@example.com'));\n\
    \n$result = array();\n$result = array_merge($result, array('name' => 'Bill', 'email'\
    \ => 'removed@example.com'));\n$result = array_merge($result, array('name' =>\
    \ 'Jim', 'email' => 'removed@example.com'));\n$result = array_merge($result, array('name'\
    \ => 'Bob', 'email' => 'removed@example.com'));\n$result = array_merge($result,\
    \ array('name' => 'Mike', 'email' => 'removed@example.com'));\n\n$result = array();\n\
    $result = array_merge($result, array('name' => 'Bill', 'email' => 'removed@example.com'));\n\
    $result = array_merge($result, array('name' => 'Jim', 'email' => 'removed@example.com'));\n\
    $result = array_merge($result, array('name' => 'Bob', 'email' => 'removed@example.com'));\n\
    $result = array_merge($result, array('name' => 'Mike', 'email' => 'removed@example.com'));\n\
    $result = array_merge($result, array('name' => 'Steve', 'email' => 'removed@example.com'));\n\
    $result = array_merge($result, array('name' => 'Mike', 'email' => 'removed@example.com'));\n\
    \n$result = array();\n$result = array_merge($result, array('name' => 'Bill', 'email'\
    \ => 'removed@example.com'));\n$result = array_merge($result, array('name' =>\
    \ 'Jim', 'email' => 'removed@example.com'));\n$result = array_merge($result, array('name'\
    \ => 'Bob', 'email' => 'removed@example.com'));\n$result = array_merge($result,\
    \ array('name' => 'Mike', 'email' => 'removed@example.com'));\n$result = array_merge($result,\
    \ array('name' => 'Steve', 'email' => 'removed@example.com'));\n$result = array_merge",
  "    if (is_string($b)) {\n        $b = trim($b);\n    }\n    $a = floatval($a);\n\
    \    $b = floatval($b);\n    if ($a > $b) {\n        return $a;\n    }\n    return\
    \ $b;\n}", "    if ($a === $b) return $a;\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if (is_float($a)) {\n            if (is_float($b)) {\n          \
    \      return max($a, $b);\n            }\n        } else {\n            if (is_string($b))\
    \ {\n                return $a;\n            }\n        }\n    }\n}\n</code>\n\
    <|/ a dscore=0 tags=php,math |>\n<| c |>\nThis doesn't answer OP's question, which\
    \ is that \"*I want to be able to compare variables of different types and return\
    \ the smaller one*\", and that the `max()` function doesn't do this.\n<|/ c |>\n\
    <| c |>\nOh I see, you're the one who downvoted me and now revived me in the wrong\
    \ place, thanks for bringing that up, I appreciate it.\n<|/ c |>\n<| a dscore=0\
    \ tags=php,math |>\nJust to offer a more \"proper\" solution, I've added some\
    \ unit tests to validate my own code. The code is not optimized but I think it\
    \ gets what you want it to do. \n<code>\n<?php\n\nnamespace App\\Models;\n\nclass\
    \ Math {\n\n    private $maxVal;\n\n    public function __construct() {\n    \
    \    $this->maxVal = null;\n    }\n\n    public function max() {\n        $this->maxVal\
    \ = null;\n\n        foreach (func_get_args() as $arg) {\n            if (is_numeric($arg))\
    \ {\n                if ($this->maxVal === null) $this->maxVal = $arg;\n     \
    \           elseif ($this->maxVal > $arg) {\n                    $this->maxVal\
    \ = $arg;\n                }\n            } elseif (is_null($arg)) {\n       \
    \         $this->maxVal = null;\n            } else {\n                $this->maxVal\
    \ = null;\n            }\n        }\n\n        return $this->maxVal;\n    }\n\n\
    \    public function compare(...$args) {\n        $max = $this->max();\n\n   \
    \     foreach ($args as $key => $arg) {\n            if (is_null($arg)) continue;\n\
    \n            if (is_numeric($arg) && is_numeric($max)) {\n                if\
    \ (is_float($arg)) {\n                    $max = $arg > $max ? $arg : $max;\n\
    \                } else {\n                    $max = $arg > $max ? $arg : $max;\n\
    \                }\n            } elseif (is_float($arg)) {\n                $max\
    \ = $arg > $max ? $arg : $max;\n            } elseif (is_null($arg)) {\n     \
    \           $max = null;\n            }\n        }\n\n        return $max;\n \
    \   }\n\n    public function compareOne(...$args) {\n        $max = $this->max();\n\
    \n        foreach ($args as $key => ", "    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_float($a) && is_float($b)) {\n        $a = (float) $a;\n  \
    \      $b = (float) $b;\n    }\n    if (is_int($a) && is_int($b)) {\n        $a\
    \ = (int) $a;\n        $b = (int) $b;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        $a = str_replace(',', '.', $a);\n        $b = str_replace(',', '.',\
    \ $b);\n    }\n    if ($a === $b) {\n        return $a;\n    }\n}", "    if (!is_numeric($a)\
    \ && !is_numeric($b)) {\n        return null;\n    }\n    return max($a, $b);\
    \ // max(string, int) returns int\n}\n", "  $a_num = trim(preg_replace('/[^\\\
    d\\.\\-\\,\\s]/', '', $a));\n  $b_num = trim(preg_replace('/[^\\d\\.\\-\\,\\s]/',\
    \ '', $b));\n  if ($a_num == $b_num) return $a_num;\n  $a_num = floatval($a_num);\n\
    \  $b_num = floatval($b_num);\n  if (!$a_num) $a_num = 0;\n  if (!$b_num) $b_num\
    \ = 0;\n  if ($a_num > $b_num) return $a;\n  if ($a_num < $b_num) return $b;\n\
    }", "    list($realA, $realB) = explode(\",\", $a);\n    list($intA, $intB) =\
    \ explode(\",\", $b);\n    if ($realA === $realB) {\n        if ($intA === $intB)\
    \ {\n            return $realA;\n        }\n        if ($intA > $intB) {\n   \
    \         return $intB;\n        }\n        return $intA;\n    }\n    if ($intA\
    \ > $intB) {\n        return $intB;\n    }\n    return $intA;\n}\n", "    if ($a\
    \ === $b) {\n        return null;\n    }\n\n    // Represent numbers as strings,\
    \ so we get proper ordering.\n    $a = (string)$a;\n    $b = (string)$b;\n\n \
    \   // Convert numerical strings into numbers if needed.\n    // Convert integers\
    \ to floats if needed.\n    // This allows us to compare ints as numbers as well\
    \ as ints as strings.\n    if (is_int($a)) {\n        if (is_int($b)) {\n    \
    \        return $a > $b ? 1 : -1;\n        }\n        return 0;\n    }\n    if\
    \ (is_int($b)) {\n        return 1;\n    }\n\n    if (is_numeric($a)) {\n    \
    \    if (is_numeric($b)) {\n            return $a > $b ? 1 : -1;\n        }\n\
    \        return 0;\n    }\n\n    if ($a === (string)$b) {\n        return 0;\n\
    \    }\n\n    // Use floats if numbers are represented as strings.\n    if (is_numeric($a))\
    \ {\n        return 1;\n    }\n    if (is_numeric($b)) {\n        return -1;\n\
    \    }\n\n    // Strings are compared alphabetically.\n    return strcmp($a, $b)\
    \ > 0 ? -1 : 1;\n}", "    $a1 = is_float($a) ? $a : explode(',', $a)[0];\n   \
    \ $b1 = is_float($b) ? $b : explode(',', $b)[0];\n    if ($a1 == $b1) {\n    \
    \    return None;\n    }\n    return $a1 > $b1 ? $a : $b;\n}\n</code>\n<|/ a |>\n\
    <| a tags=sorting,php,arrays dscore=1 |>\n<code>\n<?php\n/**\n * Sort the array\
    \ in ascending order\n */\n", "  global $compare_functions;\n  $function = $compare_functions[max(abs($a),\
    \ abs($b))];\n  if ($function) {\n    return $function($a, $b);\n  }\n  return\
    \ $a == $b ? $a : NULL;\n}\n", "    // Turn the strings into real numbers\n  \
    \  // Turn them into real numbers, then compare them\n    $a = explode(\",\",\
    \ strval($a));\n    $b = explode(\",\", strval($b));\n\n    foreach($a as $val)\
    \ {\n        $a[$val] = floatval($val);\n    }\n    foreach($b as $val) {\n  \
    \      $b[$val] = floatval($val);\n    }\n\n    // If they are equal, return None\n\
    \    if (array_diff($a, $b) == count($a) && array_diff($b, $a) == count($b)) {\n\
    \        return;\n    }\n\n    // Otherwise they must be different\n    if (count($a)\
    \ > count($b)) {\n        return $a;\n    } else {\n        return $b;\n    }\n\
    }\n", "  if (!is_numeric($a)) {\n    throw new Exception(\n      sprintf(\"First\
    \ argument to 'compare_one' must be numerical. Got '%s'.\", gettype($a))\n   \
    \ );\n  }\n  if (!is_numeric($b)) {\n    throw new Exception(\n      sprintf(\"\
    Second argument to 'compare_one' must be numerical. Got '%s'.\", gettype($b))\n\
    \    );\n  }\n  // We want to compare the numbers so we have to convert them to\
    \ numbers\n  $a = number_format($a, 0, \".\", \"\");\n  $b = number_format($b,\
    \ 0, \".\", \"\");\n  // If the values are the same, return None (this will be\
    \ false if we have a float)\n  if ($a == $b) {\n    return null;\n  }\n  // If\
    \ one value is larger than the other, return it\n  if ($a > $b) {\n    return\
    \ $a;\n  }\n  return $b;\n}\n", "  if (!is_numeric($a)) {\n    $a = str_replace(',',\
    \ '', $a);\n  }\n  if (!is_numeric($b)) {\n    $b = str_replace(',', '', $b);\n\
    \  }\n  if ($a === $b) {\n    return $a;\n  }\n  if ($a > $b) {\n    return $a;\n\
    \  }\n  return $b;\n}\n\n$first = 1;\n$last = \"1,3\";\n$compare_results = compare_one($first,\
    \ $last);", "  if (!is_numeric($a) || !is_numeric($b)) {\n    return $a < $b\n\
    \      ? $a\n      : $b;\n  }\n\n  $a_float = floatval($a);\n  $b_float = floatval($b);\n\
    \n  if ($a_float == $b_float) {\n    return $a_float;\n  }\n\n  $a_str = strval($a);\n\
    \  $b_str = strval($b);\n\n  if ($a_str == $b_str) {\n    return $a_str;\n  }\n\
    \n  return $a_float < $b_float\n    ? $a_str\n    : $b_str;\n}\n", "  if (is_numeric($a)\
    \ && is_numeric($b)) {\n    if ($a == $b) {\n      return $a;\n    }\n    return\
    \ $a > $b ? $a : $b;\n  }\n  if (is_string($a) && is_string($b)) {\n    // Handle\
    \ comparing strings if they are in scientific notation\n    $a = str_replace(',',\
    \ '.', $a);\n    $b = str_replace(',', '.', $b); // Ensure that commas are replaced\
    \ with periods\n    $a = str_replace('.', '', $a); // Remove decimal parts\n \
    \   $b = str_replace('.', '', $b); // Remove decimal parts\n    $a = str_replace(',',\
    \ '', $a); // Remove decimal parts\n    $b = str_replace(',', '', $b); // Remove\
    \ decimal parts\n    $a = preg_replace('/[^\\-\\.0-9]/', '', $a); // Remove non-numeric\
    \ characters\n    $b = preg_replace('/[^\\-\\.0-9]/', '', $b); // Remove non-numeric\
    \ characters\n    if ($a == $b) {\n      return $a;\n    }\n    return $a > $b\
    \ ? $a : $b;\n  }\n  if (is_double($a) && is_double($b)) {\n    $a = round($a,\
    \ 15); // Round $a to 15 decimal places\n    $b = round($b, 15); // Round $b to\
    \ 15 decimal places\n    if ($a == $b) {\n      return $a;\n    }\n    return\
    \ $a > $b ? $a : $b;\n  }\n  if (is_object($a) && is_object($b)) {\n    $cmp =\
    \ method_exists($a, 'compareTo') ? $a->compareTo($b) : null;\n    if ($cmp ==\
    \ 0) {\n      // Objects implement the Comparable interface, so we can use that\n\
    \      $cmp = strcmp(get_class($a), get_class($b));\n    }\n    return $cmp ?\
    \ $cmp : null;\n  }\n  return null;\n}", "    if (is_numeric($a)) {\n        if\
    \ (is_numeric($b)) {\n            if ($a == $b) {\n                return $a;\n\
    \            } else {\n                return $b;\n            }\n        } else\
    \ {\n            return $a;\n        }\n    }\n}\n", "    $a = floatval($a);\n\
    \    $b = floatval($b);\n    if ($a === $b) {\n        return $a;\n    }\n   \
    \ elseif ($a < $b) {\n        return $a;\n    }\n    else {\n        return $b;\n\
    \    }\n}\n$max = compare_one($max, $max);", "  if ($a === $b) return $a;\n  else\
    \ if ($a === '' or $b === '')\n    return $a === $b; // True only if both are\
    \ empty\n  else if (strpos($a, '.') !== false && strpos($b, '.') !== false)\n\
    \    return sprintf('%s', $b); // If both are floats, sort them alphabetically\n\
    \  else if ($a === '' and $b === '') return 0;\n  else if ($a === '' and $b ===\
    \ '') return -1;\n  else if ($a === '') return 1;\n  else if ($b === '') return\
    \ -1;\n  else if (is_numeric($a) == is_numeric($b)) {\n    return ($a > $b) ?\
    \ 1 : -1;\n  }\n  else if (($aNum = strrchr($a, '.')) === '') return 1; // Odd\
    \ case - both numbers had no fractions\n  else if (($bNum = strrchr($b, '.'))\
    \ === '') return -1; // Odd case - both numbers had no fractions\n  else return\
    \ strcasecmp($aNum, $bNum); // Even cases - compare the numbers based on their\
    \ fractions\n}", "    $a = trim($a);\n    $b = trim($b);\n    if ($a === $b) {\n\
    \        return $a;\n    }\n    if ($a === '') {\n        return $b;\n    }\n\
    \    if ($b === '') {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        $a = intval($a);\n        $b = intval($b);\n        if ($a < $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n\
    \    }\n    return $a;\n}\n", "  // If either value is NaN, return None\n  if\
    \ (!(is_numeric($a) && is_numeric($b)) || $a == $b) {\n    return None;\n  }\n\
    \  // Check if either value is inf\n  if (is_inf($a) || is_inf($b)) {\n    if\
    \ (self::IS_INFINITY($a)) {\n      return self::IS_INFINITY($b);\n    }\n    if\
    \ (self::IS_INFINITY($b)) {\n      return self::IS_INFINITY($a);\n    }\n    //\
    \ Both are inf or both are nan\n    return $a < $b ? $a : $b;\n  }\n  // Check\
    \ if either value is negative\n  if (is_negative($a) || is_negative($b)) {\n \
    \   if (self::IS_NEGATIVE($a)) {\n      return self::IS_NEGATIVE($b);\n    }\n\
    \    if (self::IS_NEGATIVE($b)) {\n      return self::IS_NEGATIVE($a);\n    }\n\
    \    // Both are negative or both are positive\n    return $a < $b ? $a : $b;\n\
    \  }\n  // Check if either value is zero\n  if (is_zero($a) || is_zero($b)) {\n\
    \    if (self::IS_ZERO($a)) {\n      return self::IS_ZERO($b);\n    }\n    if\
    \ (self::IS_ZERO($b)) {\n      return self::IS_ZERO($a);\n    }\n    // Both are\
    \ zero or both are negative\n    return $a < $b ? $a : $b;\n  }\n  // Check if\
    \ either value is infinite\n  if (is_finite($a) || is_finite($b)) {\n    if (self::IS_FINITE($a))\
    \ {\n      return self::IS_FINITE($b);\n    }\n    if (self::IS_FINITE($b)) {\n\
    \      return self::IS_FINITE($a);\n    }\n    // Both are finite or both are\
    \ infinite\n    return $a < $b ? $a : $b;\n  }\n  // Both are non-finite\n  return\
    \ None;\n}\n", "    $a = trim($a, '\".'); // Remove any .'s from the ends of the\
    \ string for easier comparison\n    $b = trim($b, '\".');\n    if (strpos($a,\
    \ '.') !== false) // Compare floating point numbers\n    {\n        $a = explode('.',\
    \ $a);\n        $b = explode('.', $b); // Get rid of any .'s from the ends of\
    \ the number strings for easier comparison\n        $a = $a[1];\n        $b =\
    \ $b[1];\n    }\n\n    switch (true) {\n        case ($a == $b):\n           \
    \ return $a;\n        case ($a === $b === false):\n            return null;\n\
    \        case (is_numeric($a) && is_numeric($b)):\n            return $a > $b\
    \ ? $a : $b;\n        case (is_numeric($a)):\n            return $a;\n       \
    \ case (is_numeric($b)):\n            return $b;\n    }\n}\n", "    if (is_int($a)\
    \ && is_int($b)) {\n        return $a > $b ? $a : $b;\n    } elseif (is_int($a)\
    \ && $b === false) {\n        return $a;\n    } elseif (is_int($b) && $a === false)\
    \ {\n        return $b;\n    } elseif (is_float($a) && is_float($b)) {\n     \
    \   return $a > $b ? $a : $b;\n    } elseif (is_float($a) && $b === false) {\n\
    \        return $a;\n    } elseif (is_float($b) && $a === false) {\n        return\
    \ $b;\n    } elseif (is_string($a) && is_string($b)) {\n        $a = preg_replace('/[^0-9,.]/',\
    \ '', $a);\n        $b = preg_replace('/[^0-9,.]/', '', $b);\n        $a = preg_replace('/[^0-9,.]/',\
    \ '', $b);\n        $b = preg_replace('/[^0-9,.]/', '', $a);\n        $a = str_replace('.',\
    \ '', $a);\n        $b = str_replace('.', '', $b);\n        $a = (float)$a;\n\
    \        $b = (float)$b;\n        return $a > $b ? $a : $b;\n    } else {\n  \
    \      return false;\n    }\n}\n", "  if ($a == $b) {\n    return;\n  }\n\n  //\
    \ $a can be float or string\n  $a = (float) $a;\n  $b = (float) $b;\n\n  // convert\
    \ any string to numeric and compare it\n  if ($a === $b) {\n    return;\n  }\n\
    \n  // $a can be string or float\n  $a = (string) $a;\n  $b = (string) $b;\n\n\
    \  // if strings are different lengths, they are different\n  if (strlen($a) !=\
    \ strlen($b)) {\n    return;\n  }\n\n  // if strings are different lengths, they\
    \ are different\n  if ($a < $b) {\n    return $a;\n  }\n\n  // $a is bigger, return\
    \ $b\n  return $b;\n}\n", "  if (is_numeric($a) && is_numeric($b)) {\n    return\
    \ $a > $b ? $a : $b;\n  }\n  if (is_string($a) && is_string($b)) {\n    $a = preg_replace('/[,.]$/',\
    \ '', $a);\n    $b = preg_replace('/[,.]$/', '', $b);\n    return $a > $b ? $a\
    \ : $b;\n  }\n  if (is_float($a) && is_float($b)) {\n    return $a > $b ? $a :\
    \ $b;\n  }\n  return $a == $b ? $a : $b;\n}", "  $a = is_numeric($a) ? floatval($a)\
    \ : preg_replace(\"/[^0-9\\.,]/\", '', $a);\n  $b = is_numeric($b) ? floatval($b)\
    \ : preg_replace(\"/[^0-9\\.,]/\", '', $b);\n  return $a > $b ? $a : $b;\n}\n",
  "  // Compare if both are numbers, if so, return bigger number\n  if (is_numeric($a)\
    \ && is_numeric($b)) {\n    return max($a, $b);\n  }\n\n  // Compare if both are\
    \ strings, if so, split on , and compare\n  // TODO: Add more options if needed\n\
    \  if (is_string($a) && is_string($b)) {\n    return compare_one(str_replace(',',\
    \ '', $a), str_replace(',', '', $b));\n  }\n\n  // If neither is string, return\
    \ None\n  return None;\n}\n```\n*/\n\n/*", "    if (is_int($a) && is_int($b))\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    else if (is_numeric($a) &&\
    \ is_numeric($b)) {\n        return $a > $b ? $a : $b;\n    }\n    else if (is_string($a)\
    \ && is_string($b)) {\n        $a_array = explode(',', $a);\n        $b_array\
    \ = explode(',', $b);\n        $max_len = max(count($a_array), count($b_array));\n\
    \        for ($i = 0; $i < $max_len; $i++) {\n            if ($a_array[$i] ==\
    \ $b_array[$i]) {\n                continue;\n            }\n            elseif\
    \ ($a_array[$i] > $b_array[$i]) {\n                return $a;\n            }\n\
    \            elseif ($a_array[$i] < $b_array[$i]) {\n                return $b;\n\
    \            }\n        }\n        return 0;\n    }\n    return $a > $b ? $a :\
    \ $b;\n}\n</code>\n<|/ a tags=csv,php,compare dscore=3 |>\n<| c |>\nWorks great\
    \ for me.  In other words, it isn't a problem of types.  It's the issue of trying\
    \ to compare two floats and getting \"0.\" instead of a \"null\".  Thanks!\n<|/\
    \ c |>\n<| c |>\nI added \"else return 0\" to avoid situations (and possible bugs)\
    \ where you get \"null\" instead of 0 when you have both floats and strings in\
    \ the csv.\n<|/ c |>\n<| a |>\nI wrote this little function to compare csv files.\
    \ You might give it a try.\n<code>", "    if ($a == $b) {\n        return $a;\n\
    \    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n           \
    \ if ($a > $b) {\n                return $a;\n            }\n        }\n    }\
    \ elseif (is_string($a)) {\n        if (is_string($b)) {\n            $a = preg_replace('~^[\\\
    d,]+~', '', $a);\n            $b = preg_replace('~^[\\d,]+~', '', $b);\n     \
    \       if ($a == $b) {\n                return $a;\n            }\n        }\n\
    \    } else {\n        $a = gettype($a);\n        $b = gettype($b);\n        throw\
    \ new Exception($a. ' is not numerical. Ignoring invalid type.');\n    }\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThanks, I did not know it could handle string comparison.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question asked.\n<|/ c |>\n<| c |>\n\
    It does, and if you read the comment to the other answer, you'll see that it does\
    \ handle string comparison. `compare_one(\"1,2\", \"1,2\")` is `1`; `compare_one(\"\
    1,2\", \"1,3\")` is `2`;\n`compare_one(\"1,2\", \"1,2\")` is `1`.\n<|/ c |>\n\
    <| c |>\n`compare_one(\"1,2\", \"1,2\")` is `1`; `compare_one(\"1,2\", \"1,3\"\
    )` is `2`; `compare_one(\"1,2\", \"1,2\")` is `1`; `compare_one(\"1\", 1) \u279E\
    \ None`, so the function should return `None` when comparing strings. I'm pretty\
    \ sure your function would return `\"1,2\"` for `compare_one(\"1,2\", \"1,2\"\
    )` and `\"1,2\"` for `compare_one(\"1,2\", \"1,3\")`.\n<|/ c |>\n<| c |>\nYes,\
    \ you're absolutely right. I didn't see that he wanted the result to be a string\
    \ if both were strings.\n<|/ c |>\n<| a |>\nThis should be what you're looking\
    \ for:\n<code>\n<?php", "    if ($a === $b) {\n        return\n    }\n    // if\
    \ they're both ints, just do an intval to compare\n    if (is_int($a) && is_int($b))\
    \ {\n        return $a > $b ? 1 : -1;\n    }\n    // if they're both strings,\
    \ parse them into ints\n    if (is_string($a) && is_string($b)) {\n        $a\
    \ = str_replace(array(',', '.'), array('', ''), $a);\n        $b = str_replace(array(',',\
    \ '.'), array('', ''), $b);\n        $a = intval($a);\n        $b = intval($b);\n\
    \    }\n    // now check the numbers\n    if ($a > $b) {\n        return 1;\n\
    \    } elseif ($a < $b) {\n        return -1;\n    }\n    return 0;\n}\n</code>\n\
    <|/ a tags=arrays,sorting,php |>\n<| a tags=arrays,sorting,php |>\n<code>", " \
    \ if (!is_numeric($a) || !is_numeric($b)) return false;\n  return $a > $b ? $a\
    \ : $b;\n}\n", "    // If the values are numeric, convert to float\n    // Otherwise,\
    \ convert to a string\n    if (is_numeric($a)) {\n        $a = floatval($a);\n\
    \    }\n    if (is_numeric($b)) {\n        $b = floatval($b);\n    }\n\n    //\
    \ Return None if the values are equal\n    if ($a == $b) {\n        return $a;\n\
    \    }\n    if ($a < $b) {\n        return $a;\n    }\n    return $b;\n}\n</code>\n\
    <|/ a tags=php,mysql dscore=0 |>\n<| c |>\nThanks for your answer, but it not\
    \ working in my case. Maybe my explanation is not correct, I will update my question.\n\
    <|/ c |>\n<| c |>\nWhy do you say it's not working? Can you explain why, as it's\
    \ not clear to me? I added some examples of what this does to the answer.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. It didn't work, because the return value\
    \ of $row['value'] is always a string and if I compare it with the string \"2\"\
    , it returns true and if the string \"2.1\" (for example) is passed as a parameter,\
    \ it returns false. Also, if I pass any string and an integer or any other number\
    \ the result is the same.\n<|/ c |>\n<| a dscore=0 tags=php,mysql |>\nI suggest\
    \ you use the function mysql_num_rows which return number of rows affected in\
    \ the query. If this is greater than 0 then you can use the $row variable.\n<code>\n\
    <?php\nmysql_connect($server, $user, $pass);\nmysql_select_db($db);\n$query =\
    \ \"SELECT * FROM `table`\";\n$result = mysql_query($query);\n$num = mysql_num_rows($result);\n\
    \nif ($num > 0) {\n    $row = mysql_fetch_array($result);\n}\n\nmysql_close();",
  "  // If either variable is a string, coerce both into a float\n  if (is_string($a))\
    \ {\n    $a = floatval(str_replace(',', '', $a));\n  }\n  if (is_string($b)) {\n\
    \    $b = floatval(str_replace(',', '', $b));\n  }\n  // If the values are the\
    \ same, return the larger variable\n  if ($a == $b) {\n    return $a;\n  }\n \
    \ // If the values are different\n  if ($a > $b) {\n    return $a;\n  } else {\n\
    \    return $b;\n  }\n}", "    if ($a < $b) {\n        return $a;\n    }\n   \
    \ return $b;\n}\n", "  $a = str_replace(array(\",\", \".\"), array(\"\", \"\"\
    ), $a);\n  $b = str_replace(array(\",\", \".\"), array(\"\", \"\"), $b);\n  $x\
    \ = strcmp($a, $b);\n  if ($x == 0) {\n    return $a === $b ? \"<=>\" : null;\n\
    \  }\n  return $x ? $a : $b;\n}\n", "  if (!is_numeric($a) || !is_numeric($b))\n\
    \    return None;\n\n  if ($a == $b) {\n    return $a;\n  }\n\n  // Compare as\
    \ strings\n  if (strpos($a, ',') !== false) {\n    // Explode out all numbers\n\
    \    $a_array = explode(',', $a);\n    $b_array = explode(',', $b);\n    $result\
    \ = '';\n    // Compare all parts\n    foreach ($a_array as $a_num) {\n      foreach\
    \ ($b_array as $b_num) {\n        if ($a_num == $b_num)\n          return $a_num;\n\
    \      }\n    }\n    return $result;\n  }\n\n  // Compare as integers\n  if (strpos($a,\
    \ '.') !== false) {\n    $a_array = explode('.', $a);\n    $b_array = explode('.',\
    \ $b);\n    $result = 0;\n    // Compare all parts\n    foreach ($a_array as $a_num)\
    \ {\n      foreach ($b_array as $b_num) {\n        if ($a_num == $b_num) {\n \
    \         return $a_num;\n        }\n      }\n    }\n    return $result;\n  }\n\
    \n  // Compare as floats\n  $a_array = explode(',', $a);\n  $b_array = explode(',',\
    \ $b);\n  $result = 0;\n  // Compare all parts\n  foreach ($a_array as $a_num)\
    \ {\n    foreach ($b_array as $b_num) {\n      if ($a_num == $b_num) {\n     \
    \   return $a_num;\n      }\n    }\n  }\n  return $result;\n}", "    // If one\
    \ of the values is missing, return None\n    if ($a === null || $b === null) {\n\
    \        return null;\n    }\n\n    // Make sure the values a and b are strings\n\
    \    $a = is_string($a) ? $a : gettype($a);\n    $b = is_string($b) ? $b : gettype($b);\n\
    \n    // If the values are strings, make sure they are the same\n    // Note:\
    \ If floating point numbers are represented as a string, this function might return\
    \ different values\n    if (is_string($a) && is_string($b)) {\n        return\
    \ $a > $b ? $a : $b;\n    }\n\n    // If the values are integers, convert them\
    \ to floats\n    if (is_int($a) || is_int($b)) {\n        return floatval($a)\
    \ > floatval($b) ? $a : $b;\n    }\n\n    // If the values are floats, convert\
    \ them to integers\n    if (is_float($a) || is_float($b)) {\n        return (int)\
    \ $a > (int) $b ? $a : $b;\n    }\n\n    // If the values are both strings, make\
    \ sure they are equal\n    if (is_string($a) && is_string($b)) {\n        return\
    \ $a == $b;\n    }\n\n    // If the values are both arrays, recursively compare\
    \ them\n    if (is_array($a) && is_array($b)) {\n        return compare_one($a,\
    \ $b);\n    }\n\n    // None of the values matched\n    return null;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nOh my god, I've been working on this for 2 hours!\
    \ Thank you so much! I was so close to solving this but couldn't figure it out.\n\
    <|/ c |>\n<| c |>\nNo problem. I'm glad I was able to help. And thanks for the\
    \ bounty. I appreciate it.\n<|/ c |>\n<| c |>\nI forgot you guys were also trying\
    \ to help out! Thank you so much!\n<|/ c |>\n<| a tags=php,arrays |>\nI made a\
    \ comparison function and I used array_map(). I hope this helps you. I tested\
    \ this with 4 different arrays and it worked.\n<code>", "  $a = is_numeric($a)\
    \ ? floatval($a) : $a;\n  $b = is_numeric($b) ? floatval($b) : $b;\n  // Test\
    \ for exact equality\n  if ($a === $b) {\n    return None;\n  }\n  // Test for\
    \ approximate equality\n  $epsilon = 1.0e-4;\n  if (abs($a - $b) <= $epsilon)\
    \ {\n    return None;\n  }\n  // Test for inexact equality\n  if (abs($a - $b)\
    \ > $epsilon) {\n    $sign = ($a > $b) ? 1 : -1;\n    $a = abs($a);\n    $b =\
    \ abs($b);\n    $r = $a + $b - $epsilon;\n    // Return one of two possible results,\
    \ but only if the difference\n    // is within some small amount (determined by\
    \ $epsilon)\n    return ($r < $epsilon) ? None : (($sign < 0) ? $a : $b);\n  }\n\
    \  // Otherwise the values are equal\n  return None;\n}\n</code>\n<|/ a tags=php,numbers\
    \ |>\n<| a |>\nI believe that this is what you're looking for:\n<code>", "  if(is_numeric($a)\
    \ && is_numeric($b)) {\n    if($a > $b) {\n      return $a;\n    }\n    elseif($a\
    \ < $b) {\n      return $b;\n    }\n  }\n  if(is_numeric($a)) {\n    if(is_string($b)\
    \ && strlen($b) > 1 && $b != \".\" && $b != ',') {\n      return str_replace(array(\"\
    .\", \",\"), array(\"E\", \"E\"), $b);\n    }\n    return $a;\n  }\n  if(is_string($b))\
    \ {\n    return str_replace(array(\"E\", \".\", \",\"), array(\".\", \",\"), $a);\n\
    \  }\n  return null;\n}\n\n$a = \"1,5\";\n$b = \"1.5\";\n$c = \"1\";\n$d = \"\
    1.5E2\";\n$e = \"1.5E-2\";\n$f = \"1.5E+1\";\n$g = \"1.5E-1\";\n$h = \"1.5E-4\"\
    ;\n$i = \"1.5E-45\";\n$j = \"1.5E-45.\";\n$k = \"1.5E-45,\";\n$l = \"1.5E-45,1\"\
    ;\n$m = \"1.5E-45,1\";\n$n = \"1.5E-45,1\";\n$o = \"1.5E-45,1\";\n$p = \"1.5E-45,1\"\
    ;\n$q = \"1.5E-45,1\";\n$r = \"1.5E-45,1\";\n$s = \"1.5E-45,1\";\n$t = \"1.5E-45,1\"\
    ;\n$u = \"1.5E-45,1\";\n$v = \"1.5E-45,1\";\n$w = \"1.5E-45,1\";\n$x = \"1.5E-45,1\"\
    ;\n$y = \"1.5E-45,1\";\n$z = \"1.5E-45,1\";\n\necho \"$a is larger than $b, but\
    \ less than $c<br>\\n\";\necho \"$d is larger than $a, but less than $e<br>\\\
    n\";\necho \"$f is larger than $e, but less than $g<br>\\n\";\necho \"$h is larger\
    \ than $g, but less than $i<br>\\n\";\necho \"$j is larger than $i, but less than\
    \ $k<br>\\n\";\necho \"$l is larger than $k, but less than $m<br>\\n\";\necho\
    \ \"$n is larger than $m, but less than $o<br>\\n\";\necho \"$p is larger than\
    \ $o, but less than $q<br>\\n\";\necho \"$r is larger than $q, but less than $s<br>\\\
    n\";\necho \"$s is larger than $s, but less than $t<br>\\n\";\necho \"$t is larger\
    \ than $s, but less than $u<br>\\n\";\necho \"$v", "  $a = is_string($a) ? explode('.',\
    \ $a) : $a;\n  $b = is_string($b) ? explode('.', $b) : $b;\n  sort($a);\n  sort($b);\n\
    \  if (count($a) > count($b)) {\n    return $a;\n  }\n  return $b;\n}\n", "  if\
    \ (!is_numeric($a)) return $a;\n  if (!is_numeric($b)) return $b;\n  return ($a\
    \ > $b) ? $a : $b;\n}\n", "    if ($a === $b) {\n        return;\n    }\n    $a_is_num\
    \ = is_numeric($a);\n    $b_is_num = is_numeric($b);\n    if ($a_is_num && $b_is_num)\
    \ {\n        $a_num = abs((int)$a);\n        $b_num = abs((int)$b);\n        if\
    \ ($a_num > $b_num) {\n            return $a;\n        }\n        if ($a_num <\
    \ $b_num) {\n            return $b;\n        }\n        $diff = round($a_num -\
    \ $b_num);\n        if ($diff === 0) {\n            return;\n        }\n     \
    \   return $diff;\n    }\n    if ($a_is_num) {\n        return $b;\n    }\n  \
    \  return $a;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nIt looks like\
    \ you might have figured out a solution to this, but for others finding this post,\
    \ the following is a solution that doesn't require the use of the PHP GMP extension.\
    \ The problem was that GMP doesn't allow for negative numbers, and using abs()\
    \ on strings such as \"1,23\" would result in a value of 1. However, this doesn't\
    \ really matter since you can cast the string to a float by removing the comma:\n\
    <code>", "    if (!is_numeric($a) || !is_numeric($b)) {\n        $a = str_replace(['.',\
    \ ','], '', $a);\n        $b = str_replace(['.', ','], '', $b);\n    }\n    if\
    \ ($a === $b) {\n        return None;\n    }\n    if ($a > $b) {\n        return\
    \ $a;\n    }\n    return $b;\n}\n", "  // Remove commas from $b that could be\
    \ mistaken for .\n  $b = preg_replace('/\\./', '', $b);\n  // Strip out any 0s\
    \ from $b that could mistakenly be treated as 0.\n  $b = preg_replace('/0+/',\
    \ '', $b);\n  // Compare $a to $b and return the larger variable if it exists.\n\
    \  if ($a === $b) {\n    return $a;\n  }\n  // If $a < $b, return $a.\n  if ($a\
    \ < $b) {\n    return $a;\n  }\n  // If $a == $b, return $b.\n  if ($a == $b)\
    \ {\n    return $b;\n  }\n  // If $b > $a, return $b.\n  if ($b > $a) {\n    return\
    \ $b;\n  }\n  return None;\n}\n", "    // If the values are of different type,\
    \ return None\n    if (gettype($a) !== gettype($b)) return None;\n    // If the\
    \ values are of the same type, compare the values\n    // and return the larger\
    \ one.\n    // Note: If $a is \"1\" or \"0,1\", $b could be \"0.1\" or \",1\"\n\
    \    return max($a, $b);\n}", "  if (is_numeric($a) && is_numeric($b) && $a ==\
    \ $b) {\n    $a = floatval($a);\n    $b = floatval($b);\n    if ($a > $b) {\n\
    \      return $a;\n    }\n    return $b;\n  }\n  // If strings are passed in,\
    \ convert them to numbers\n  $a = floatval(str_replace(',', '', $a));\n  $b =\
    \ floatval(str_replace(',', '', $b));\n  if ($a == $b) {\n    return $a;\n  }\n\
    \  return $b;\n}\n", "  if (!is_numeric($a) || !is_numeric($b)) {\n    // If they\
    \ aren't both numbers, we can't compare them.\n    return $a === $b ? $a : null;\n\
    \  }\n\n  // If they are both numbers, compare the numbers.\n  if ($a < $b) {\n\
    \    return $a;\n  }\n\n  return $b;\n}\n", "  $a = is_null($a) ? 0 : bcdiv($a,\
    \ 1, 2);\n  $b = is_null($b) ? 0 : bcdiv($b, 1, 2);\n  if ($a == $b) {\n    return\
    \ None;\n  }\n  return $a > $b ? $a : $b;\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) return $a;\n        if ($b > $a) return $b;\n    }\n\
    \    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n            // a and\
    \ b are both numbers\n            if ($a < $b) return $a;\n            if ($b\
    \ < $a) return $b;\n        } else {\n            // a is a string, and b is not\n\
    \            return $a;\n        }\n    } elseif (is_numeric($b)) {\n        return\
    \ $b;\n    }\n    return $a < $b ? $a : $b;\n}\n</code>\n<|/ a dscore=4 tags=max,python,comparison,int,integer\
    \ |>\n<| c |>\nIn case anyone is interested, I used this as a base for my [other\
    \ answer of my own](https://stackoverflow.com/a/48863653/355230) where I wanted\
    \ to find out which input had the largest value.\n<|/ c |>\n<| a dscore=3 |>\n\
    Just to add that there are cases where simply casting to int might not work as\
    \ expected (for example float('inf') will always convert to int(1e300). So you\
    \ should use something like this instead:\n<code>\ndef maxiumn(*args):\n    return\
    \ max(args, key=lambda x: isinstance(x, (int, float)))\n</code>\n<|/ a tags=max,python,comparison,int,integer\
    \ |>\n<| a tags=max,python,comparison,int,integer |>\nThis works perfectly for\
    \ me:\n<code>\nmax(my_list, key=lambda x: x if isinstance(x, int) else None)\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis has the added benefit of being able\
    \ to handle `float`s which aren't `int`.\n<|/ c |>\n<| c |>\nWhat about `max(my_list,\
    \ key=lambda x: x if isinstance(x, (int, float)) else None)`?\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for `float('inf')` or `float('-inf')`. `int` will convert\
    \ it to `1e300`, so that will always be greater.\n<|/ c |>\n<| a dscore=2 |>\n\
    I wanted a function that would return None if any of the arguments were not comparable,\
    \ so I came up with this solution:\n<code>\ndef maxiumn(*args):\n    return max(args,\
    \ key=lambda x: (x in {float, int}))\n</code>\nIt basically checks for both int\
    \ and float and takes the maximum.\n<|/ a tags=max,python,comparison,int,integer\
    \ |>\n<| c |>\nthis works but as mentioned above - int('inf') returns 1e300 and ",
  "    global $is_real, $is_string, $is_int, $is_float, $is_num, $is_bool;\n\n   \
    \ if ( is_string($a) && is_string($b) ) {\n        $a = preg_replace('/,/', '',\
    \ $a);\n        $b = preg_replace('/,/', '', $b);\n        $is_string = true;\n\
    \    }\n    if ( is_string($a) || is_string($b) ) {\n        $is_string = true;\n\
    \    }\n\n    if ( $is_real ) {\n        if ($is_string && $a !== $b) {\n    \
    \        $is_string = false;\n        }\n    } else {\n        if ($is_int &&\
    \ $a !== $b || !$is_int && !$is_string) {\n            $is_real = false;\n   \
    \     }\n    }\n\n    if ($is_int || $is_float || $is_num || $is_bool) {\n   \
    \     if ( $is_real ) {\n            if ( $a === $b ) {\n                return\
    \ $a;\n            }\n        }\n    } else {\n        $is_real = true;\n    }\n\
    \n    if ( $is_bool && is_bool($a) && is_bool($b) ) {\n        if ( $a === $b\
    \ ) {\n            return $a;\n        }\n    }\n\n    if ( $is_bool && is_bool($a)\
    \ ) {\n        if ( $a == 1 ) {\n            return $a;\n        }\n    }\n\n\
    \    if ( $is_bool && is_bool($b) ) {\n        if ( $b == 1 ) {\n            return\
    \ $b;\n        }\n    }\n\n    if ( is_array($a) && is_array($b) ) {\n       \
    \ $max_array = max($a, $b);\n        $max_array2 = max(array_keys($a), array_keys($b));\n\
    \        if ( $max_array === $max_array2 ) {\n            $max_array_key = array_keys($max_array);\n\
    \            if ( count($max_array_key) === 1 ) {\n                return $max_array[$max_array_key[0]];\n\
    \            }\n        }\n    }\n\n    if ( is_array($a) && is_object($b) ) {\n\
    \        $max_array = max($a, $b);\n        if ( $max_array instanceof stdClass\
    \ ) {\n            $max_array2 = max(array_keys($max_array), array_keys($b));\n\
    \            if ( count($max_array2) === 1 ) {\n                return $max_array[$max_array2[0]];\n\
    \            }\n        }\n    }\n\n    if ( $a === $b ) {\n        return $a;\n\
    \    }\n\n    if ( is_object($a) && is_object($b) ) {\n        if ( $a === $b\
    \ ) {\n            return $a;\n        }\n    }\n\n    if ( $is_real ) {\n   \
    \     if ( is_float($a) && is_float($b) ) {\n            if ( abs($a - $b) < 1e-6\
    \ ) {\n                return $a;", "    $aIsString = (strlen($a) > 0);\n    $bIsString\
    \ = (strlen($b) > 0);\n    if ($aIsString && $bIsString) {\n        if (preg_match(\"\
    /[\\.,]/\", $a) && preg_match(\"/[\\.,]/\", $b)) {\n            if (strpos($a,\
    \ \".\") === 0 && strpos($b, \".\") === 0) {\n                // Both floats,\
    \ compare as floats\n                return floatval($a) > floatval($b);\n   \
    \         } else {\n                return false;\n            }\n        } else\
    \ {\n            return false;\n        }\n    } else if ($aIsString) {\n    \
    \    if ($bIsString) {\n            return strcmp($a, $b) > 0;\n        } else\
    \ {\n            return false;\n        }\n    } else if ($bIsString) {\n    \
    \    return strcmp($a, $b) > 0;\n    } else {\n        return intval($a) > intval($b);\n\
    \    }\n}", "  $bigger = 1;\n  if (isset($a) && isset($b)) {\n    if (is_float($a))\
    \ {\n      if (is_float($b)) {\n        $bigger = $a > $b ? $a : $b;\n      }\
    \ else {\n        $bigger = $a > $b ? $b : $a;\n      }\n    } else if (is_int($a))\
    \ {\n      if (is_int($b)) {\n        $bigger = $a > $b ? $a : $b;\n      } else\
    \ {\n        $bigger = $a > $b ? $b : $a;\n      }\n    } else {\n      if ($a\
    \ > $b) {\n        $bigger = $a;\n      } else {\n        $bigger = $b;\n    \
    \  }\n    }\n  }\n  return $bigger;\n}\n</code>\n<|/ a dscore=1 tags=php,if-statement,conditional\
    \ |>\n<| a |>\nIt really depends on what you are trying to do. If you are trying\
    \ to compare two numbers (not two arrays), then the answer above (which is perfectly\
    \ fine) is correct. However, if you are trying to compare arrays, then you may\
    \ want something more like this:\n<code>\n<?php\n\n$array1 = [\n    'key1' =>\
    \ [\n        'key2' => 'value1',\n        'key3' => 'value2',\n    ],\n    'key4'\
    \ => 'value3',\n    'key5' => [\n        'key6' => [\n            'key7' => 'value4',\n\
    \            'key8' => 'value5',\n        ],\n    ],\n];\n\n$array2 = [\n    'key1'\
    \ => [\n        'key2' => 'value1',\n        'key3' => 'value2',\n    ],\n   \
    \ 'key4' => 'value3',\n    'key5' => [\n        'key6' => [\n            'key7'\
    \ => 'value4',\n            'key8' => 'value5',\n        ],\n    ],\n];\n", " \
    \ if (is_numeric($a) && is_numeric($b)) {\n    if ($a == $b) {\n      return $a;\n\
    \    }\n    if ($a > $b) {\n      return $a;\n    }\n    if ($a < $b) {\n    \
    \  return $b;\n    }\n  }\n  if (is_string($a) && is_string($b)) {\n    if (strcmp($a,\
    \ $b) == 0) {\n      return $a;\n    }\n  }\n  return None;\n}\n", "  // Convert\
    \ strings to numbers\n  if (is_string($a) || is_string($b)) {\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n      $a = floatval($a);\n      $b = floatval($b);\n \
    \   }\n  }\n  // If either number is a string, don't compare them\n  if (!is_numeric($a)\
    \ || !is_numeric($b)) {\n    if (is_string($a)) {\n      return $a;\n    } else\
    \ {\n      return $b;\n    }\n  }\n  // Otherwise, if both numbers are integers,\
    \ compare them\n  else if (is_integer($a) && is_integer($b)) {\n    return $a\
    \ > $b ? $a : $b;\n  }\n  // Otherwise, if one number is negative, compare the\
    \ absolute value of the numbers\n  else if ($a < 0) {\n    $a = abs($a);\n   \
    \ $b = abs($b);\n    return $a > $b ? $a : $b;\n  }\n  // Otherwise, if one number\
    \ is positive, compare the absolute value of the numbers\n  else {\n    $a = abs($a);\n\
    \    $b = abs($b);\n    return $a > $b ? $b : $a;\n  }\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        if\
    \ ($a < $b) {\n            return $b;\n        }\n    }\n    if ($a === $b) {\n\
    \        return $a;\n    }\n    return $b;\n}", "    if ($a === $b) {\n      return\
    \ $a;\n    }\n    // If one number is a string, convert to float for comparison\n\
    \    if (is_string($a)) {\n      $a = floatval($a);\n    }\n    if (is_string($b))\
    \ {\n      $b = floatval($b);\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n      if ($a > $b) {\n        return $a;\n      }\n      return $b;\n   \
    \ }\n    return NULL;\n}", "    if ($a == $b) {\n        return $a;\n    } elseif\
    \ ($a === null && $b === null) {\n        return $a;\n    } elseif (is_string($a)\
    \ && is_string($b)) {\n        return strnatcmp($a, $b);\n    }\n\n    if ($a\
    \ === null || $b === null) {\n        return null;\n    }\n\n    if (is_array($a)\
    \ && is_array($b)) {\n        foreach ($a as $k => $v) {\n            if (isset($b[$k])\
    \ && compare_one($a[$k], $b[$k]) === false) {\n                return $a[$k];\n\
    \            }\n        }\n        foreach ($b as $k => $v) {\n            if\
    \ (isset($a[$k]) && compare_one($a[$k], $b[$k]) === false) {\n               \
    \ return $b[$k];\n            }\n        }\n        return null;\n    }\n\n  \
    \  if (is_object($a) && is_object($b)) {\n        foreach (get_object_vars($a)\
    \ as $k => $v) {\n            if (isset($b->$k) && compare_one($a[$k], $b->$k)\
    \ === false) {\n                return $a[$k];\n            }\n        }\n   \
    \     foreach (get_object_vars($b) as $k => $v) {\n            if (isset($a->$k)\
    \ && compare_one($a[$k], $b->$k) === false) {\n                return $b->$k;\n\
    \            }\n        }\n        return null;\n    }\n\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        $diff = $a - $b;\n        if ($diff !== 0.0) {\n\
    \            return $diff;\n        }\n    }\n\n    // Compare two arrays of objects\
    \ by their property values.\n    if (is_array($a) && is_array($b)) {\n       \
    \ foreach (array_keys($a) as $key) {\n            if (isset($b[$key]) && compare_one($a[$key],\
    \ $b[$key]) === false) {\n                return $a[$key];\n            }\n  \
    \      }\n        foreach (array_keys($b) as $key) {\n            if (isset($a[$key])\
    \ && compare_one($a[$key], $b[$key]) === false) {\n                return $b[$key];\n\
    \            }\n        }\n        return null;\n    }\n\n    // Compare two arrays\
    \ of primitive datatypes.\n    if (is_array($a) && is_array($b)) {\n        foreach\
    \ (array_keys($a) as $key) {\n            if (isset($b[$key]) && compare_one($a[$key],\
    \ $b[$key]) === false) {\n                return $a[$key];\n            }\n  \
    \      }\n        foreach (array_keys($b) as $key) {\n            if (isset($a[$key])\
    \ && compare_one($a[$key], $b[$key]", "  // Check types\n  if (is_integer($a)\
    \ && is_int($b)) return $a > $b;\n  if (is_float($a) && is_float($b)) return $a\
    \ > $b;\n  if (is_string($a) && is_string($b)) return strcmp($a, $b) > 0;\n  //\
    \ None of the types were able to successfully compare themselves!\n  return null;\n\
    }", "  // Use a ternary operator\n  $a = $a > $b ? $a : $b;\n  $a = $a < $b ?\
    \ $a : $b;\n  return $a;\n}\n", "    if ($a === $b)\n        return $a;\n    if\
    \ (is_float($a)) {\n        if (is_float($b)) {\n            if ($a === $b) $a\
    \ = 0;\n            return max($a, $b);\n        }\n        if ($a === \",\")\
    \ $a = \".\";\n        return $a;\n    }\n    if (is_float($b)) {\n        if\
    \ ($b !== \".\" && $b !== \",\") $b = \".\";\n        return $b;\n    }\n    if\
    \ ($a === \",\") $a = \".\";\n    return $a;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you for the great answer. I learned something new from it.\n<|/ c |>\n<|\
    \ a tags=comparison,php,sorting,numbers,algorithm |>\nI used the answer of Sarfraz\
    \ Ahmed but found some minor issues:\n<code>", "  // Make sure a is a number or\
    \ string, and b is a real number\n  $a = ($a===null || $a===false) ? 0 : strtolower($a);\n\
    \  $b = ($b===null || $b===false) ? 0 : strtolower($b);\n  // If both values are\
    \ empty or either value is a number, return None\n  if ($a===null || $b===null\
    \ || $a===false || $b===false || $a==='' || $b==='' || $a==='0')\n    return None;\n\
    \  // If only one of the values are numbers, convert the other one to a\n  //\
    \ real number\n  elseif (!is_numeric($b) && !is_numeric($a))\n    return $b;\n\
    \  // If one of the values are strings, convert the other one to a real number\n\
    \  elseif (is_numeric($a) && is_numeric($b)) {\n    // If both numbers are integers,\
    \ compare them numerically\n    if ($a===$b)\n      return $a;\n    // If the\
    \ first number is a float, multiply it by the second's value\n    elseif (is_float($a))\
    \ {\n      return $a*$b;\n      // Otherwise, if the second number is a float,\
    \ multiply the first one by\n      // the second's value\n    } else {\n     \
    \ return $a*$b;\n    }\n  // If both values are floats, compare them numerically\n\
    \  } else if ((is_float($a) && is_float($b)) || (is_float($a) && !is_float($b)))\
    \ {\n    return $a < $b ? $a : $b;\n  // If both values are strings, compare them\
    \ alphabetically\n  } else if (is_string($a) && is_string($b)) {\n    if ($a>$b)\n\
    \      return $a;\n    else\n      return $b;\n  }\n}", "  if (is_float($a) &&\
    \ is_float($b)) {\n    if ($a > $b) {\n      return $a;\n    }\n    if ($a < $b)\
    \ {\n      return $b;\n    }\n    return $a;\n  }\n  else if (is_string($a) &&\
    \ is_string($b)) {\n    if (strtolower($a) > strtolower($b)) {\n      return $a;\n\
    \    }\n    if (strtolower($a) < strtolower($b)) {\n      return $b;\n    }\n\
    \    return $a;\n  }\n  else if (is_int($a) && is_int($b)) {\n    if ($a > $b)\
    \ {\n      return $a;\n    }\n    if ($a < $b) {\n      return $b;\n    }\n  \
    \  return $a;\n  }\n  else {\n    // Assume that it's neither a number, string,\
    \ or float\n    return $a;\n  }\n}", "    if ($a == $b)\n      return None;\n\
    \    elseif (is_string($a) && is_string($b)) {\n      return ($a > $b) ? $a :\
    \ $b;\n    }\n    elseif (is_numeric($a) && is_numeric($b))\n      return max($a,\
    \ $b);\n    else\n      return None;\n  }\n  // Define a function that compares\
    \ real numbers, and return its larger variable.\n  ?><?php\n  // Create two variables,\
    \ $a and $b, of arbitrary numbers and types.\n  $a = 1; $b = 1; $c = 5; $d = \"\
    2,3\";\n  // Call the function compare_one(), passing in each variable.\n  $d\
    \ = compare_one($a, $b);\n  $d = compare_one($c, $d);\n  // Compare the two variables,\
    \ and print the result.\n  echo \"The larger variable is \" . ($d == None ? \"\
    None\" : $d) . \"\\n\";", "    $a = (float)$a;\n    $b = (float)$b;\n    $a =\
    \ (is_numeric($a) && is_numeric($b)) ? max($a, $b) : null;\n    return $a;\n}",
  "    if ($a == $b) return $a;\n    if ($a < $b) return $b;\n    if ($a > $b) return\
    \ $a;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis works really well. Thank you!\
    \ I'm going to look into the other options suggested here. I do have one last\
    \ question: How would I alter the code so that it returns the first non-match\
    \ instead of the last match?\n<|/ c |>\n<| a tags=php,regex,numbers |>\nIf it's\
    \ only integers then you could use something like:\n<code>\n$match = preg_match('/(\\\
    d+)(\\.(\\d+))?/', $str);\n</code>\nThis matches an integer followed by a decimal\
    \ followed optionally by a third integer. If it matches, you get the entire first\
    \ match in the array $match[0], the integer matched in $match[1] and the decimal\
    \ matched in $match[2]. \nThe third match is optional, so if it's not there you\
    \ just need to check $match[1] and $match[2].\n<|/ a dscore=1 |>\n<| a tags=php,regex,numbers\
    \ |>\nI've found that regexes are usually not the most suitable tool for parsing\
    \ strings. The simplest thing is to just loop through all characters in the string\
    \ and compare them one by one. This will probably give you the quickest results:\n\
    <code>", "    if (is_string($b)) {\n        $b = str_replace(',', '.', trim($b));\n\
    \    }\n\n    $a = floatval($a);\n    $b = floatval($b);\n\n    if ($a == $b)\
    \ {\n        return None;\n    }\n\n    if ($a < $b) {\n        return $a;\n \
    \   }\n\n    return $b;\n}\n", "    if ($a === $b) {\n        return $a;\n   \
    \ }\n    if (is_string($a)) {\n        if ($a === $b) {\n            return $a;\n\
    \        }\n        if ($a === '.' && $b === ',') {\n            $a = intval($a);\n\
    \            $b = intval($b);\n            return floatval($a) > floatval($b)\
    \ ? $a : $b;\n        }\n        if ($b === '.' && $a === ',') {\n           \
    \ $a = intval($a);\n            $b = intval($b);\n            return floatval($a)\
    \ < floatval($b) ? $a : $b;\n        }\n    }\n    if (is_string($b)) {\n    \
    \    if ($b === $a) {\n            return $a;\n        }\n        if ($b === '.'\
    \ && $a === ',') {\n            $a = intval($a);\n            $b = intval($b);\n\
    \            return floatval($a) > floatval($b) ? $a : $b;\n        }\n      \
    \  if ($a === '.' && $b === ',') {\n            $a = intval($a);\n           \
    \ $b = intval($b);\n            return floatval($a) < floatval($b) ? $a : $b;\n\
    \        }\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n        if ($b < $a) {\n       \
    \     return $b;\n        }\n    }\n}\n", "  if (is_float($a) && is_float($b))\
    \ {\n    return max($a, $b);\n  }\n  if (is_int($a) && is_int($b)) {\n    return\
    \ max($a, $b);\n  }\n  if (is_string($a) && is_string($b)) {\n    $a = preg_replace('/[^0-9,.]/',\
    \ '', $a);\n    $b = preg_replace('/[^0-9,.]/', '', $b);\n    $comparison = strcmp($a,\
    \ $b);\n    if ($comparison == 0) {\n      return 0;\n    }\n    return $comparison;\n\
    \  }\n  return None;\n}", "  $a = str_replace(\",\", \".\", $a);\n  $b = str_replace(\"\
    ,\", \".\", $b);\n  return $a == $b ? $a : \"\";\n}", "    if ($a === null &&\
    \ $b === null) {\n        return 0;\n    }\n    return is_numeric($a) && is_numeric($b)\n\
    \        ? $a > $b ? 1 : $a < $b ? -1 : 0\n        : is_numeric($a)\n        \
    \    ? strcasecmp($a, $b) > 0 ? 1 : -1\n            : strcasecmp($a, $b) > 0 ?\
    \ -1 : 1\n            ;\n}\n", "  // Ensure that both arguments are strings.\n\
    \  if(gettype($a) !== \"string\" || !gettype($b))\n    return null;\n  // Ensure\
    \ that the strings represent the same number.\n  $a_split = explode('.', $a);\
    \ // Split string into an array where each element is separated by a .\n  $b_split\
    \ = explode('.', $b); // Split string into an array where each element is separated\
    \ by a .\n  // If there are more than two elements returned after splitting, return\
    \ None.\n  if(count($a_split) > 1 && count($b_split) > 1)\n    return null;\n\
    \  // Return largest element if only a single number is represented.\n  if(count($a_split)\
    \ === 1 && count($b_split) === 1)\n    return max($a_split, max($b_split));\n\
    \  // If there are more than one elements returned after splitting, return None.\n\
    \  if(count($a_split) > 1 || count($b_split) > 1)\n    return null;\n  // Return\
    \ largest element if either number is a decimal.\n  if(preg_match('/(\\.[0-9]+)|(,[0-9]+)/',\
    \ strval($a)) || preg_match('/(\\.[0-9]+)|(,[0-9]+)/', strval($b)))\n    return\
    \ max($a, $b);\n  // Return true if both are integers.\n  return (int)$a === (int)$b;\n\
    }", "  // Convert to floats and compare\n  if(floatval($a) == floatval($b))\n\
    \    return floatval($a);\n  if(strpos($a, \".\") > 0 && strpos($b, \",\") > 0)\n\
    \    return floatval($a) > floatval($b);\n  if(strpos($a, \".\") == 0 && strpos($b,\
    \ \",\") == 0)\n    return floatval($a) < floatval($b);\n  if(strpos($a, \".\"\
    ) == 0 && strpos($b, \",\") > 0)\n    return floatval($a) > floatval($b);\n  if(strpos($a,\
    \ \".\") > 0 && strpos($b, \",\") == 0)\n    return floatval($a) < floatval($b);\n\
    \  return None;\n}", "    if ($a === $b) return $a;\n    $a = str_replace('.',\
    \ '', $a);\n    $b = str_replace('.', '', $b);\n    if ($a === $b) return $a;\n\
    \    if ($a == $b) return $a;\n    if ($a < $b) return $a;\n    return $b;\n}\n\
    </code>\nI hope this helps!\n<|/ a dscore=0 tags=php,sorting |>\n<| a dscore=0\
    \ tags=php,sorting |>\nUsing php's built in sort function:\n<code>\n$list = \"\
    1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6\
    \ 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1\
    \ 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6\
    \ 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1\
    \ 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6\
    \ 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1\
    \ 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6\
    \ 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1\
    \ 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6\
    \ 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1\
    \ 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6\
    \ 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 10 1 3 6 ", " \
    \   $a_num = intval($a);\n    $b_num = intval($b);\n    if ($a_num == $b_num)\
    \ {\n        return $a_num;\n    }\n    if ($a_num > $b_num) {\n        return\
    \ $a;\n    }\n    return $b;\n}\n", "    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    if (is_string($a)) {\n        if (is_string($b))\
    \ {\n            return strcmp($a, $b);\n        }\n        return $a;\n    }\n\
    \    if (is_string($b)) {\n        return $b;\n    }\n    return $a;\n}\n", " \
    \ $a = floatval($a);\n  $b = floatval($b);\n  $result = $a > $b ? $a : $b;\n \
    \ if( $result == $b ){\n    return $result;\n  }\n  else {\n    return $result;\n\
    \  }\n}\n", "  if (is_string($a) && is_string($b)) {\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    foreach ($a as $i => $ae) {\n      if ($ae !== $b[$i])\
    \ {\n        return $b[$i];\n      }\n    }\n  }\n\n  if (is_string($a)) {\n \
    \   $a = floatval($a);\n  }\n  if (is_string($b)) {\n    $b = floatval($b);\n\
    \  }\n  return max($a, $b);\n}\n", "  if (is_numeric($a) && is_numeric($b)) {\n\
    \    if ($a == $b) {\n      return $a;\n    } elseif ($a > $b) {\n      return\
    \ $a;\n    } else {\n      return $b;\n    }\n  }\n\n  // If not a number, then\
    \ it must be a string representation\n  // of an integer (or float) number\n \
    \ if (is_numeric($a) || is_numeric($b)) {\n    if (is_numeric($a)) {\n      $a\
    \ = (float) $a;\n    } else {\n      $a = (int) $a;\n    }\n\n    if (is_numeric($b))\
    \ {\n      $b = (float) $b;\n    } else {\n      $b = (int) $b;\n    }\n  }\n\n\
    \  // Otherwise, just compare them\n  return $a > $b ? $a : $b;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 tags=php |>\nI like the answer of and would prefer a more\
    \ general solution where the number of arguments is not fixed but is calculated\
    \ at runtime based on the number of items to compare. Here's my version. \n<code>\n\
    /**\n * compares several values of one type to another type and returns the larger\
    \ value of the two types\n * array $values\n * mixed $largerType\n * mixed $smallerType\n\
    \ */", "  // Allow either value to be passed in.\n  // $a could be either integer\
    \ or float, but $b could be\n  // string like \"2,3\"\n  if ($a === null && $b\
    \ !== null) {\n    // If the first value is null, then the second one must be\
    \ null.\n    // If the first value is null, then the second must be null,\n  \
    \  // else they are equal.\n    if ($b !== null) {\n      return null;\n    }\
    \ else {\n      return $a;\n    }\n  } else if ($a === null && $b === null) {\n\
    \    // If the first value is null, then the second one must be null.\n    //\
    \ If the second value is null, then the first must be null,\n    // else they\
    \ are equal.\n    if ($a !== null) {\n      return null;\n    } else {\n     \
    \ return $a;\n    }\n  }\n  // $a is either an integer or float, $b is a string\n\
    \  list($a_int, $a_float) = $this->_extract_ints($a);\n  list($b_int, $b_float)\
    \ = $this->_extract_ints($b);\n  list($a_string, $b_string) = $this->_extract_strings($a,\
    \ $b);\n  if ($a_int == $b_int) {\n    // If they are both integers, they're equal\
    \ as long as they're equal.\n    return $a_int;\n  } else if ($a_int == $b_float)\
    \ {\n    // If they are both floats, they're equal as long as they're equal.\n\
    \    return $a_int;\n  } else if ($a_int == $b_string) {\n    // If they're both\
    \ strings, they're equal as long as they're equal.\n    return $a_string;\n  }\
    \ else if ($b_int == $a_int) {\n    // If $a is an integer, $b is a string, then\
    \ they're equal as long as\n    // they're equal.\n    return $b_string;\n  }\
    \ else if ($b_int == $a_float) {\n    // If $a is a float, and $b is an integer,\
    \ then they're equal as long as\n    // they're equal.\n    return $b_string;\n\
    \  } else {\n    // If $a is a string, $b is a string, then they're equal as long\
    \ as they\n    // are equal.\n    return $b_string;\n  }\n}\n\n/**\n * Helper\
    \ function to compare two lists of strings.\n *\n * Note: This algorithm is slightly\
    \ different than the one used in the\n * PHP documentation. The one used in the\
    \ PHP documentation (which was actually\n * designed for version 0 of the protocol\
    \ spec) treats two arrays as equal if\n * all the elements in the first array\
    \ are in the second array.\n *\n * @param $a\n *   The first list.\n * @param\
    \ $b\n *   The second list.\n *\n * @return\n *   If both lists are equal, the\
    \ empty string, if one is empty, and\n *   the other is non-empty if one is non-empty;\
    \ otherwise, returns None\n *   if both lists are non-empty.\n */\n", "    if\
    \ (is_int($a) && is_int($b)) {\n        return $a > $b ? 1 : $a < $b ? -1 : 0;\n\
    \    } elseif (is_float($a) && is_float($b)) {\n        return strcmp($a, $b)\
    \ * -1;\n    } elseif (is_string($a) && is_string($b)) {\n        $a_re = preg_replace('/[^0-9\\\
    .\\-]/', '', $a); // Remove non numeric chars\n        $b_re = preg_replace('/[^0-9\\\
    .\\-]/', '', $b); // Remove non numeric chars\n        return strcmp($a_re, $b_re)\
    \ * -1;\n    }\n    return false;\n}\n", "  if (is_int($a) && is_int($b)) return\
    \ $a > $b ? 1 : $a < $b ? -1 : 0;\n  elseif (is_float($a) && is_float($b)) return\
    \ $a > $b ? 1 : $a < $b ? -1 : 0;\n  else return $a > $b ? 1 : $a < $b ? -1 :\
    \ 0;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis answer is correct\
    \ but the accepted answer does a lot more work.\n<|/ c |>\n<| c |>\nI really want\
    \ to upvote this for its brevity. I've implemented this for my code and it works\
    \ great! The only thing is I used the array_filter function, which removes empty\
    \ elements. My PHP version doesn't support empty() but I just used !==null.\n\
    <|/ c |>\n<| c |>\nYeah, the accepted answer does a lot more work than mine. My\
    \ code is more concise, but it's also more work. So I'll just have to go with\
    \ my answer until PHP 7's array_filter function is available on my server.\n<|/\
    \ c |>\n<| a tags=php,sorting,arrays |>\nYou do not need to sort the array, you\
    \ can simply use the min() function like this:\n<code>\n<?php\n$values = array(4,5,4,5,1,4,3);\n\
    $min = min($values);\necho \"Minimum value = \".$min.\"\\n\";", "  if (is_numeric($a)\
    \ && is_numeric($b)) {\n    if ($a < $b) return $a;\n    else if ($a > $b) return\
    \ $b;\n    else return $a;\n  } else {\n    if (is_numeric($a) && is_string($b))\
    \ {\n      if ($a < $b) return $b;\n      else if ($a > $b) return $a;\n     \
    \ else return $b;\n    } else if (is_numeric($a) && is_numeric($b)) {\n      if\
    \ ($a > $b) return $b;\n      else if ($a < $b) return $a;\n      else return\
    \ $b;\n    } else {\n      if (is_string($a) && is_string($b)) {\n        if (strcmp($a,\
    \ $b) < 0) return $a;\n        else if (strcmp($a, $b) > 0) return $b;\n     \
    \   else return $a;\n      } else return $a;\n    }\n  }\n}\n$a = compare_one(1,2);\n\
    $b = compare_one(1,\"2\");\n$c = compare_one(\"1\",2);\n$d = compare_one(\"1\"\
    ,\"2\");\n$e = compare_one(\"1\",1);\n$f = compare_one(\"a\",1);\n$g = compare_one(\"\
    a\",2);\n$h = compare_one(array(1,2,3),array(1,2,3));\n$i = compare_one(1,array(1,2,3));\n\
    $j = compare_one(1,array(\"1\",\"2\",\"3\"));\n$k = compare_one(\"1\",array(1,2,3));\n\
    $l = compare_one(1,array(1,\"2\",3));\n$m = compare_one(\"1\",array(1,\"2\",3));\n\
    $n = compare_one(\"a\",array(1,2,3));\n$o = compare_one(1,array(\"1\",\"2\",\"\
    3\"));\n$p = compare_one(\"a\",array(1,2,3));\n$q = compare_one(array(1,2,3),1);\n\
    $r = compare_one(array(1,2,3),array(\"1\",\"2\",\"3\"));\n$s = compare_one(\"\
    a\",array(1,2,3));\n$t = compare_one(array(1,2,3),1);\n$u = compare_one(array(1,2,3),array(1,\"\
    2\",3));\n$v = compare_one(\"a\",array(1,2,3));\n$w = compare_one(array(1,2,3),array(1,\"\
    2\",3));\n$x = compare_one(1,array(1,2,3));\n$y = compare_one(\"1\",array(1,2,3));\n\
    $z = compare_one(\"a\",array(1,2,3));\n$a = compare_one(\"a\",1);\n$b = compare_one(\"\
    b\",1);\n$c = compare_one(\"a\",1);\n$d = compare_one(\"b\",1);\n$e = compare_one(\"\
    a\",1);\n$f = compare_one(\"b\",1);\n$g = compare_one(\"b\",1);\n$h = compare_one(\"\
    a\",1);\n$i = compare_one", "    if (!is_int($a) || !is_int($b)) {\n        if\
    \ ($a == $b) {\n            return $a;\n        }\n        if (is_string($a))\
    \ {\n            if (is_string($b) && strpos($b, ',') !== false) {\n         \
    \       return floatval($a) > floatval($b);\n            }\n            return\
    \ $a;\n        }\n        if (is_string($b)) {\n            return $b;\n     \
    \   }\n    }\n    return $a > $b;\n}\n</code>\nThis takes care of cases where\
    \ $a or $b is of type string, so it can compare the two variables directly.\n\
    <|/ a dscore=2 tags=string,comparison,php,numeric |>\n<| c |>\nGood work. Btw,\
    \ there's an easy fix for the \"10,\" issue: use `str_replace(',', '.', strval($a))`\
    \ instead of `floatval`.\n<|/ c |>\n<| c |>\n: That will work for cases where\
    \ the comma is the decimal point, but not if the comma is the thousands separator.\
    \ [This answer](http://stackoverflow.com/a/22888254/1438393) describes a better\
    \ solution for that.\n<|/ c |>\n<| c |>\n: Yes, but for cases like `compare_one('1,5',\
    \ '')`, `floatval` would return `1.5`. With `str_replace`, you'd get `1.`\n<|/\
    \ c |>\n<| c |>\n: You're right. I misread your example. Thanks for the tip!\n\
    <|/ c |>\n<| a |>\nUse intval/floatval to convert string to numbers. PHP will\
    \ do type juggling for you, so that numbers will be converted to strings before\
    \ comparision.\n<|/ a dscore=1 tags=string,comparison,php,numeric |>\n<| a tags=string,comparison,php,numeric\
    \ |>\nUse intval/floatval to convert string to numbers. PHP will do type juggling\
    \ for you, so that numbers will be converted to strings before comparision.\n\
    <|/ a dscore=1 |>\n<| a tags=string,comparison,php,numeric |>\nUse intval to convert\
    \ your string to a numeric type, then compare it with your comparison value.\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nFor strings, the easiest solution is probably\
    \ to use the ctype_digit function.\nFor a float you can use ctype_digit to check\
    \ only if the number is float or not. \nFor an int you can compare the value of\
    \ the int and check if it is greater than 0. \nFor the commas, you will need to\
    \ use str_replace(',', '.', strval($a)) instead of floatval($a).\n<|/", "  if\
    \ (!is_numeric($a)) {\n    return $a;\n  }\n  if (!is_numeric($b)) {\n    return\
    \ $b;\n  }\n  $a = number_format($a, 0, '', '');\n  $b = number_format($b, 0,\
    \ '', '');\n  if ($a === $b) {\n    return $a;\n  }\n  if ($a > $b) {\n    return\
    \ $a;\n  }\n  return $b;\n}", "  if ($a == $b) {\n    return;\n  }\n  if (is_float($a)\
    \ || is_float($b)) {\n    if (is_nan($a) || is_nan($b)) {\n      return null;\n\
    \    }\n    $a = str_replace(\",\", \".\", $a); // Ensure that \".\" is used as\
    \ a decimal\n    $b = str_replace(\",\", \".\", $b); // Ensure that \".\" is used\
    \ as a decimal\n    $delta = $a - $b;\n    if ($delta == 0) {\n      return;\n\
    \    }\n    $abs_delta = abs($delta);\n    $sign = $delta / $abs_delta;\n    if\
    \ ($delta < 0) {\n      return $sign * str_repeat(\" \", abs($abs_delta));\n \
    \   }\n    if ($abs_delta < 1) {\n      return $sign * str_repeat(\" \", $abs_delta);\n\
    \    }\n    return;\n  }\n  if (is_int($a) && is_int($b)) {\n    return $a > $b\
    \ ? $a : $b;\n  }\n  if (is_string($a) && is_string($b)) {\n    $a = preg_replace(\"\
    /[^0-9\\.\\-]/\", \"\", $a); // Ensure that only \"0-9.\" is used in the string\n\
    \    $b = preg_replace(\"/[^0-9\\.\\-]/\", \"\", $b); // Ensure that only \"0-9.\"\
    \ is used in the string\n    return strlen($a) > strlen($b) ? $a : $b;\n  }\n\
    \  if (is_string($a)) {\n    $a = preg_replace(\"/[^0-9\\.\\-]/\", \"\", $a);\
    \ // Ensure that only \"0-9.\" is used in the string\n  }\n  if (is_string($b))\
    \ {\n    $b = preg_replace(\"/[^0-9\\.\\-]/\", \"\", $b); // Ensure that only\
    \ \"0-9.\" is used in the string\n  }\n  if ($a == $b) {\n    return;\n  }\n \
    \ return $a;\n}\n", "\tif ($a === $b) {\n\t\treturn None;\n\t}\n\n\tif (is_float($a)\
    \ && !is_float($b)) {\n\t\treturn $a;\n\t}\n\n\tif (is_string($a) && !is_string($b))\
    \ {\n\t\treturn $a;\n\t}\n\n\tif (is_int($a) && !is_int($b)) {\n\t\treturn $a;\n\
    \t}\n\n\tif ($a === null) {\n\t\treturn $b;\n\t}\n\n\tif ($b === null) {\n\t\t\
    return $a;\n\t}\n\n\tif (is_float($a) && is_float($b)) {\n\t\t$a_parts = explode('.',\
    \ $a, 2);\n\t\t$b_parts = explode('.', $b, 2);\n\t\t$diff = abs($a_parts[0] -\
    \ $b_parts[0]);\n\t\tif (!is_nan($a_parts[0]) && !is_nan($b_parts[0]) && $diff\
    \ >= 0 && $diff <= 1) {\n\t\t\treturn $a_parts[0] > $b_parts[0] ? $a : $b;\n\t\
    \t}\n\n\t\tif (!is_nan($a_parts[1]) && !is_nan($b_parts[1])) {\n\t\t\treturn $a_parts[1]\
    \ > $b_parts[1] ? $a : $b;\n\t\t}\n\n\t\treturn None;\n\t}\n\n\tif (is_string($a)\
    \ && is_string($b)) {\n\t\t$a_parts = explode(',', $a, 2);\n\t\t$b_parts = explode(',',\
    \ $b, 2);\n\t\t$diff = abs($a_parts[0] - $b_parts[0]);\n\t\tif (!is_nan($a_parts[0])\
    \ && !is_nan($b_parts[0]) && $diff >= 0 && $diff <= 1) {\n\t\t\treturn $a_parts[0]\
    \ > $b_parts[0] ? $a : $b;\n\t\t}\n\n\t\tif (!is_nan($a_parts[1]) && !is_nan($b_parts[1]))\
    \ {\n\t\t\treturn $a_parts[1] > $b_parts[1] ? $a : $b;\n\t\t}\n\n\t\treturn None;\n\
    \t}\n\n\tif (is_int($a) && is_int($b)) {\n\t\t$a_parts = explode('.', $a, 2);\n\
    \t\t$b_parts = explode('.', $b, 2);\n\t\t$diff = abs($a_parts[0] - $b_parts[0]);\n\
    \t\tif (!is_nan($a_parts[0]) && !is_nan($b_parts[0]) && $diff >= 0 && $diff <=\
    \ 1) {\n\t\t\treturn $a_parts[0] > $b_parts[0] ? $a : $b;\n\t\t}\n\n\t\tif (!is_nan($a_parts[1])\
    \ && !is_nan($b_parts[1])) {\n\t\t\treturn $a_parts[1] > $b_parts[1] ? $a : $b;\n\
    \t\t}\n\n\t\treturn None;\n\t}\n\n\treturn None;\n}\n", "    $a_is_str = is_string($a)\
    \ && $a !== \"\";\n    $b_is_str = is_string($b) && $b !== \"\";\n\n    if ($a_is_str\
    \ && $b_is_str) {\n        $a = str_replace([\".\", \",\"], \"\", $a);\n     \
    \   $b = str_replace([\".\", \",\"], \"\", $b);\n    }\n\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        $diff = $a - $b;\n        return $diff > 0 ? $a\
    \ : $b;\n    }\n\n    return $a_is_str ? $a : $b_is_str ? $b : null;\n}\n", " \
    \   $a_is_real = is_numeric($a) && trim($a) != '0' && strpos($a, '.') === false;\n\
    \    $b_is_real = is_numeric($b) && trim($b) != '0' && strpos($b, '.') === false;\n\
    \n    if ($a_is_real && $b_is_real) {\n        $a_int = intval($a);\n        $b_int\
    \ = intval($b);\n\n        if ($a_int == $b_int) {\n            return $a;\n \
    \       }\n\n        if ($a_int < $b_int) {\n            return $a;\n        }\n\
    \n        return $b;\n    }\n\n    if ($a_is_real) {\n        return $a;\n   \
    \ }\n\n    if ($b_is_real) {\n        return $b;\n    }\n\n    if ($a == $b) {\n\
    \        return $a;\n    }\n\n    return $b;\n}\n</code>\n<|/ a tags=sorting,php,arrays\
    \ dscore=2 |>\n<| a tags=sorting,php,arrays |>\n<code>\n<?php\n", "    // The\
    \ only way this could fail is if the strings are empty or don't parse as numbers.\n\
    \    if (is_float($a) && is_float($b)) {\n        return max((float)$a, (float)$b);\n\
    \    } elseif (is_string($a) && is_string($b)) {\n        $a = preg_replace('/[^0-9\\\
    .-]+/', '', $a); // replace everything that isn't a number or '.'\n        $b\
    \ = preg_replace('/[^0-9\\.-]+/', '', $b); // replace everything that isn't a\
    \ number or '.'\n        $aNum = filter_var($a, FILTER_SANITIZE_NUMBER_FLOAT,\
    \ FILTER_FLAG_ALLOW_FRACTION);\n        $bNum = filter_var($b, FILTER_SANITIZE_NUMBER_FLOAT,\
    \ FILTER_FLAG_ALLOW_FRACTION);\n        $aNum = (is_numeric($aNum)) ? $aNum :\
    \ 0;\n        $bNum = (is_numeric($bNum)) ? $bNum : 0;\n        return ($aNum\
    \ > $bNum) ? $a : $b;\n    } else {\n        return null;\n    }\n}\n</code>\n\
    <|/ a dscore=3 tags=php,math,string |>\n<| a |>\nA simple way to do this would\
    \ be to run a standard comparison function, then use array_diff() to find the\
    \ differences. \n<code>\n$string1 = \"10\";\n$string2 = \"20\";\n$string3 = \"\
    30\";\n$string4 = \"40\";\n", "    $a = trim($a);\n    $b = trim($b);\n\n    if\
    \ (strpos($a, ',') !== false || strpos($b, ',') !== false) {\n        return $a\
    \ == $b;\n    }\n\n    return $a == '.' || $b == '.' ? $a == $b : $a > $b;\n}\n\
    \n$array = [];\n$array[] = '1,4,6,7,9';\n$array[] = '2,3,5,7,9';\n$array[] = '4,3,5,7,9';\n\
    $array[] = '5,3,6,7,9';\n$array[] = '6,3,5,7,9';\n\n$array[] = '2.1,2.4,2.7,3,7.1';\n\
    $array[] = '2.2,2.5,2.9,3.2,3.3';\n$array[] = '2.4,2.5,2.8,3.0,3.3';\n$array[]\
    \ = '2.5,2.6,2.9,3.1,3.3';\n$array[] = '2.6,2.5,2.9,3.2,3.3';\n\n$array[] = '2,3,5,7.9';\n\
    $array[] = '3,4,5,7.9';\n$array[] = '4,5,6,7.9';\n$array[] = '5,6,7,9';\n$array[]\
    \ = '6,5,7,9';\n\n$array[] = '2.1,2.4,2.7,3.1';\n$array[] = '2.2,2.5,2.9,3.2';\n\
    $array[] = '2.4,2.5,2.8,3.3';\n$array[] = '2.5,2.6,2.9,3.4';\n$array[] = '2.6,2.5,2.9,3.5';\n\
    \n$array[] = '2,3,5,7.9';\n$array[] = '2,3,5,7.9';\n$array[] = '2,3,5,7.9';\n\
    $array[] = '2,3,5,7.9';\n$array[] = '2,3,5,7.9';\n", "  if (is_numeric($a) &&\
    \ is_numeric($b) && $a != $b) {\n    $a = number_format($a, 2);\n    $b = number_format($b,\
    \ 2);\n  }\n  if (is_numeric($a) && is_numeric($b)) {\n    $a = bcsub($a, $b,\
    \ 2);\n  }\n  if (is_numeric($a)) {\n    $a = floatval($a);\n  }\n  if (is_numeric($b))\
    \ {\n    $b = floatval($b);\n  }\n  if ($a === $b) {\n    return $a;\n  }\n  if\
    \ (is_numeric($a) && is_numeric($b)) {\n    $a = round($a, 2);\n    $b = round($b,\
    \ 2);\n  }\n  return ($a > $b) ? $a : $b;\n}\n", "  if (is_numeric($a) && is_numeric($b))\
    \ {\n    if ($a > $b) {\n      return $a;\n    }\n    return $b;\n  }\n  elseif\
    \ (is_numeric($a)) {\n    return $a;\n  }\n  elseif (is_numeric($b)) {\n    return\
    \ $b;\n  }\n  elseif (is_string($a)) {\n    $a = str_replace(\".\", \",\", $a);\n\
    \    $b = str_replace(\".\", \",\", $b);\n    $a = floatval($a);\n    $b = floatval($b);\n\
    \    if ($a > $b) {\n      return $a;\n    }\n    return $b;\n  }\n  elseif (is_string($b))\
    \ {\n    $a = str_replace(\".\", \",\", $a);\n    $b = str_replace(\".\", \",\"\
    , $b);\n    $a = floatval($a);\n    $b = floatval($b);\n    if ($a > $b) {\n \
    \     return $a;\n    }\n    return $b;\n  }\n  else {\n    return None;\n  }\n\
    }\n", "  if (!is_numeric($a) || !is_numeric($b)) return None;\n  $ab = $a + $b;\
    \ // convert to a float so we can compare\n  return $ab > $a ? $a : $ab;\n}\n",
  "\tif ($a < $b) {\n\t\treturn $a;\n\t}\n\tif ($a > $b) {\n\t\treturn $b;\n\t}\n\t\
    return $a;\n}\n", "  if (is_string($a) && is_string($b)) {\n    $a = rtrim($a,\
    \ ',');\n    $b = rtrim($b, ',');\n  }\n\n  if (!is_numeric($a) || !is_numeric($b))\
    \ {\n    return $a === $b;\n  }\n\n  // If one operand is a string, it must not\
    \ contain commas\n  // so we know that the two numbers are integers\n  if (is_string($a))\
    \ {\n    $a = str_replace(',', '', $a);\n  }\n\n  if (is_string($b)) {\n    $b\
    \ = str_replace(',', '', $b);\n  }\n\n  // If both operands are integers, we only\
    \ need to check one \n  // for commas, the other will automatically be converted\n\
    \  if (is_numeric($a) && is_numeric($b)) {\n    return ($a >= $b);\n  }\n\n  //\
    \ if both operands are strings, then we know they are \n  // numbers which we\
    \ can compare as floats\n  if (is_string($a) && is_string($b)) {\n    return (floatval($a)\
    \ > floatval($b));\n  }\n\n  // return None if both values are equal\n  if ($a\
    \ === $b) return None;\n  \n  // Return None if one of them is a non-numeric value\n\
    \  return None;\n}\n", "  if((is_float($a) && is_float($b)) || is_int($a) || is_int($b))\
    \ {\n    // a or b are integers or floats\n    $a = intval($a);\n    $b = intval($b);\n\
    \    if($a == $b) {\n      return $a;\n    }\n  }\n  if(is_numeric($a) && is_numeric($b))\
    \ {\n    // both are numeric\n    if($a === $b) {\n      return $a;\n    }\n \
    \   if($a > $b) {\n      return $a;\n    }\n    return $b;\n  }\n  if($a === $b)\
    \ {\n    return $a;\n  }\n  return $b;\n}\n</code>\n<|/ a dscore=1 tags=php |>\n\
    <| c |>\nThe idea is simple. But you should always validate your input. Always\
    \ use `intval()` on both `$a` and `$b` to make your code more robust. `intval('1,2')`\
    \ will return `1`\n<|/ c |>\n<| c |>\n`intval('1,2')` returns `1` because `1,2`\
    \ evaluates to `1` as it is treated as an integer number. `intval('1,2') === intval('1')`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI guess my point was, `intval` will fail\
    \ if the user does `intval('1,2')` where it should fail if the user does `intval('1,2')`\n\
    <|/ c |>\n<| c |>\nYes, it will. I mentioned it on my comment under the question.\n\
    <|/ c |>\n<| c |>\nAh, I was thinking you meant `intval('1,2')` would fail. My\
    \ bad. I guess my point is, the OP should be using `strval()` in that case. Maybe\
    \ `strval(floatval($a))` etc\n<|/ c |>\n<| a dscore=0 |>\nIn your function you\
    \ can use strcmp to compare 2 string \n<code>", "  $a = explode(\",\", $a);\n\
    \  $b = explode(\",\", $b);\n  $a_l = count($a);\n  $b_l = count($b);\n  if ($a_l\
    \ > $b_l) return $b;\n  if ($a_l < $b_l) return $a;\n  sort($a);\n  sort($b);\n\
    \  for ($i = 0; $i < $a_l; $i++) {\n    if ($a[$i] == $b[$i]) continue;\n    return\
    \ $a[$i];\n  }\n}\n", "  if ($a == $b) {\n    return;\n  }\n\n  $a_is_real = is_numeric($a)\
    \ || is_string($a) && trim($a) === $a;\n  $b_is_real = is_numeric($b) || is_string($b)\
    \ && trim($b) === $b;\n\n  if ($a_is_real && $b_is_real) {\n    return $a > $b\
    \ ? $a : $b;\n  }\n\n  if ($a_is_real && !$b_is_real) {\n    return $a;\n  }\n\
    \n  if (!$a_is_real && $b_is_real) {\n    return $b;\n  }\n}\n</code>\n<|/ a tags=php,max,arrays\
    \ |>\n<| a |>\nFor future reference:\n<code>\n<?php", "    $a = str_replace(\"\
    ,\", \".\", $a);\n    $b = str_replace(\",\", \".\", $b);\n    $a2 = str_replace(\"\
    .\", \",\", $a);\n    $b2 = str_replace(\".\", \",\", $b);\n    if ($a == $b)\
    \ {\n        return $a2;\n    }\n    if ($b != \"\") {\n        $x = str_replace(\"\
    ,\", \".\", $b);\n    } else {\n        $x = 0.0;\n    }\n    if ($a2 != \"\"\
    ) {\n        $y = str_replace(\",\", \".\", $a2);\n    } else {\n        $y =\
    \ 0.0;\n    }\n    if ($x != $y) {\n        if ($x > $y) {\n            return\
    \ $b;\n        } else {\n            return $a;\n        }\n    }\n}\n", "  if\
    \ ($a === $b) return $a;\n  if ($a > $b) return $b;\n  return $a;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYes, you are right. I am not looking for a way to compare 2\
    \ numbers. (I'm not a good programmer ;) ) What I'm looking for is a way to find\
    \ out if 2 variables have the same real value.\n<|/ c |>\n<| c |>\nAh. My bad.\
    \ Will modify it shortly.\n<|/ c |>\n<| c |>\nI fixed it with a second function\
    \ that checks for strings.\n<|/ c |>\n<| c |>\nThis is what I've been looking\
    \ for. Thanks :)\n<|/ c |>\n<| c |>\nThis still doesn't work for floats. e.g.\
    \ `compare_one(1.00, 1.00)` should be 1.00, not None. But even your initial version\
    \ returns `None` for floats, too. Did you mean to compare the strings `\"1.00\"\
    ` and `\"1.00\"`?\n<|/ c |>\n<| a dscore=2 |>\nFor comparing floats, use the comparator\
    \ from here: http://www.php.net/manual/en/function.fpt-compact.php\n<|/ a tags=php,string,floating-point,compare\
    \ |>\n<| a dscore=1 tags=php,string,floating-point,compare |>\nPHP has built-in\
    \ functions is_numeric, ctype_digit, and ctype_alnum that will do what you want.\
    \  Here's an example:\n<code>\nif (ctype_digit($a) === ctype_digit($b)) {\n  \
    \  // Do something\n}\n</code>\n<|/ a |>\n<| c |>\n`ctype_digit` doesn't work\
    \ with floats.  I believe this would only work with integers.\n<|/ c |>\n<| c\
    \ |>\nRight, ctype_digit doesn't work with floats.  This only checks for integers.\
    \  ctype_alnum will work for floats.  ctype_alnum is in the ctype extension.\n\
    <|/ c |>\n<| a dscore=1 |>\nFor string comparisons, I believe the only way to\
    \ go is using Regex. Something like this should work (untested, not tested):\n\
    <code>", "    if (!is_numeric($a) || !is_numeric($b)) {\n        if (is_string($a)\
    \ && is_string($b)) {\n            return strcmp($a, $b);\n        }\n       \
    \ if (is_string($a)) {\n            return -1;\n        }\n        if (is_string($b))\
    \ {\n            return 1;\n        }\n    }\n    return max($a, $b) > min($a,\
    \ $b);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
