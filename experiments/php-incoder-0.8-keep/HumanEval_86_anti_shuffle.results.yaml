name: HumanEval_86_anti_shuffle
language: php
results:
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ preg_replace('/(\\w+\\s+)/i', '$1', $s);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9332yube.php:21\n\
    Stack trace:\n#0 /tmp/tmp9332yube.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9332yube.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = preg_split('/\\\
    s+/u', $s, -1, PREG_SPLIT_NO_EMPTY);\n  sort($s, SORT_STRING);\n  return implode(\"\
    \ \", $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4lik_tn.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4lik_tn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpr4lik_tn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    sort($words);\n    $s = implode(\" \", $words);\n\
    \    return $s;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8n24l4s.php:24\n\
    Stack trace:\n#0 /tmp/tmph8n24l4s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmph8n24l4s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Write\
    \ your code here\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhnj6stn.php:22\n\
    Stack trace:\n#0 /tmp/tmpfhnj6stn.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfhnj6stn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $wordList = array();\n    $i = 0;\n    foreach ($words\
    \ as $word) {\n        if ($i % 2 == 0) {\n            $wordList[] = str_replace('\
    \ ', '', $word);\n        } else {\n            $wordList[] = ord($word);\n  \
    \      }\n        $i++;\n    }\n\n    $newWords = array();\n    $j = 0;\n    foreach\
    \ ($wordList as $k => $word) {\n        if ($j > 0) {\n            $newWords[]\
    \ = chr(max($wordList[$j - 1], $word));\n        }\n        $j++;\n    }\n   \
    \ $s = implode('', $newWords);\n\n    return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7r1kn_ix.php:41\n\
    Stack trace:\n#0 /tmp/tmp7r1kn_ix.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp7r1kn_ix.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = preg_replace('/\\\
    B([A-Z]+)\\b/u','$1', $s);\n  $s = preg_replace('/\\B([A-Z]+)$/u','$1', $s);\n\
    \  $s = preg_replace('/\\B(\\s+)/u','$1', $s);\n  return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lz6jwb6.php:23\n\
    Stack trace:\n#0 /tmp/tmp6lz6jwb6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6lz6jwb6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    foreach(str_word_count($s,\
    \ 1) as $i => $w) {\n        $words[$i] = $w;\n    }\n    $s = \"\";\n    foreach\
    \ ($words as $w) {\n        $s .= chr((ord($w) - 64) % 26 + 65) . $w;\n    }\n\
    \    return $s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanyb97he.php:26\n\
    Stack trace:\n#0 /tmp/tmpanyb97he.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpanyb97he.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return implode(' ', $words);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dljkdwn.php:23\n\
    Stack trace:\n#0 /tmp/tmp0dljkdwn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0dljkdwn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ str_replace(\n        array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\"\
    ,\"v\",\"w\",\"x\",\"y\",\"z\"),\n        array(\"1\",\"2\",\"3\",\"4\",\"5\"\
    ,\"6\",\"7\",\"8\",\"9\",\"0\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\"\
    ,\"v\",\"w\",\"x\",\"y\",\"z\"),\n        $s);\n}\n$text = \"hello world hi hello,\
    \ how are you\";\n$words = explode(\" \", $text);\n$result = \"\";\nforeach ($words\
    \ as $w) {\n    $w = anti_shuffle($w);\n    $result .= $w . \" \";\n}\necho anti_shuffle($result);\
    \ ?>\n</code>\n<|/ a |>\n<| c |>\nThis is what I needed! Thank you\n<|/ c |>\n\
    <| c |>\nThis solution does not handle punctuation like `?`, `!`, `:` , `!` etc\
    \ correctly, as you see in question\n<|/ c |>\n<| a tags=php,string dscore=0 |>\n\
    This is a function that will replace all occurrences of one string with another\
    \ string in a given string, and it has a few features to help with the cases where\
    \ you want to replace accented characters such as accentuated e with e and the\
    \ other accented characters such as \xF1 or \xD1.\n<code>\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "85225 c5824 89 85225, 85c 185 e5a </code>\n<|/ a |>\n<| c |>\nThis is what\
    \ I needed! Thank you\n<|/ c |>\n<| c |>\nThis solution does not handle punctuation\
    \ like `?`, `!`, `:` , `!` etc correctly, as you see in question\n<|/ c |>\n<|\
    \ a tags=php,string dscore=0 |>\nThis is a function that will replace all occurrences\
    \ of one string with another string in a given string, and it has a few features\
    \ to help with the cases where you want to replace accented characters such as\
    \ accentuated e with e and the other accented characters such as \xF1 or \xD1\
    .\n<code>\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $new_s =\
    \ '';\n  $words = explode(' ', $s);\n  foreach ($words as $word) {\n    $new_s\
    \ = str_replace($word, '', $new_s);\n  }\n  $new_s = ucwords($new_s);\n  return\
    \ $new_s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tqab077.php:25\n\
    Stack trace:\n#0 /tmp/tmp6tqab077.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6tqab077.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $new_s=\"\
    \";\n  $s_array = explode(\" \", $s);\n  foreach ($s_array as $key => $value)\
    \ {\n      $new_s[$key] = $value;\n  }\n  return implode(\" \",$new_s);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmp6bi7h1gr.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bi7h1gr.php:25\n\
    Stack trace:\n#0 /tmp/tmp6bi7h1gr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6bi7h1gr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $sorted_words = array();\n\n    foreach ($words as\
    \ $word) {\n        $sorted_words[] = $word;\n    }\n\n    sort($sorted_words);\n\
    \    return implode(' ', $sorted_words);\n}\n</code>\nThis code also handles multiple\
    \ spaces between words, and blank spaces.\n<|/ a dscore=2 tags=php,string |>\n\
    <| c |>\nThanks Jon but my problem is that I need a code that can shuffle all\
    \ those words in a given string without any spaces also.\n<|/ c |>\n<| a tags=php,string\
    \ dscore=1 |>\nOk, I tested the code given and here it is, I haven't tested it\
    \ thoroughly so please take it with a grain of salt:\n<code>\n<?php\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2lz8ajmp.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $shuffled = array();\n  foreach ($words as $w) {\n    $word_chars\
    \ = str_split($w);\n    shuffle($word_chars);\n    $shuffled[] = implode('', $word_chars);\n\
    \  }\n  return implode(' ', $shuffled);\n}\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg76ftw_m.php:26\n\
    Stack trace:\n#0 /tmp/tmpg76ftw_m.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg76ftw_m.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as &$value) {\n        $value = array_map('ord', str_split($value));\n\
    \    }\n    $s = array_sum($s);\n    $s = chr($s - 1);\n    return implode($s);\n\
    }\n\n$input = 'Hi! This is Stack Overflow.';\necho \"<b>Input String</b><br>\"\
    ;\necho \"<pre>$input</pre>\";\n\n$output1 = anti_shuffle($input);\necho \"<b>Output\
    \ 1</b><br>\";\necho \"<pre>$output1</pre>\";\n\n$output2 = anti_shuffle($output1);\n\
    echo \"<b>Output 2</b><br>\";\necho \"<pre>$output2</pre>\";\n</code>\nOutput\n\
    <code>\nInput String\nHi! This is Stack Overflow.\n\nOutput 1\nHillo Tsi ove Sckorflw\n\
    \nOutput 2\nHillo Tsi ove Sckorflw\n</code>\n<|/ a |>\n<| c |>\nThank you very\
    \ much for this answer. However, the requirement of the code was to not use any\
    \ functions other than these: array_sum, array_map, array_keys, array_values,\
    \ and ord\n<|/ c |>\n<| c |>\nWhy can you not use array_sum(), array_map(), array_keys(),\
    \ array_values(), and ord()?\n<|/ c |>\n<| c |>\nI mean I can, but I was looking\
    \ for a simpler way to do it, but I guess it is not possible. Thanks anyway.\n\
    <|/ c |>\n<| c |>\nYou can do without `array_sum`, `array_map`, `array_keys`,\
    \ `array_values`, `ord`. See my updated answer.\n<|/ c |>\n<| c |>\nThank you\
    \ very much for the update, but I still have some questions. First, how do you\
    \ use array_value? I've tried to use it for the ord() function, but it didn't\
    \ work. Second, in the $output1, $output2, and $output3, why are the spaces missing\
    \ from the first and second output? Third, why do we need to use \"&\" to reference\
    \ the $value array?\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptfesrpe_.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words=explode('\
    \ ', $s);\n  sort($words);\n  $result = \"\";\n  foreach ($words as $word) {\n\
    \    if ($word != \"\") {\n      $result .= $word;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ayijlfc.php:29\n\
    Stack trace:\n#0 /tmp/tmp3ayijlfc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3ayijlfc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $l = mb_strlen($s,\
    \ 'UTF-8');\n    $s_arr = preg_split('/\\s+/', $s);\n    $s_arr = array_map('ord',\
    \ $s_arr);\n    $s_arr = array_values($s_arr);\n    sort($s_arr);\n    $s_arr\
    \ = array_merge(array_slice($s_arr,0,$l/2), array_slice($s_arr,$l/2,$l));\n  \
    \  $s = implode(' ', $s_arr);\n    return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpmz4k5abn.php:12\nStack trace:\n#0 /tmp/tmpmz4k5abn.php(22): anti_shuffle('Hi')\n\
    #1 /tmp/tmpmz4k5abn.php(26): candidate('Hi')\n#2 /tmp/tmpmz4k5abn.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmz4k5abn.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return implode(' ', $words);\n}\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7id41i56.php:22\n\
    Stack trace:\n#0 /tmp/tmp7id41i56.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7id41i56.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // write\
    \ your function here\n    $s=strtolower($s);\n    $words = explode(\" \", $s);\n\
    \    $result = '';\n    foreach ($words as $word) {\n        $chars = str_split($word);\n\
    \        $result = '';\n        foreach ($chars as $char) {\n            $result\
    \ .= $char;\n        }\n        $result .= ' ';\n    }\n    $result = str_replace('\
    \ ', '', $result);\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplx_mi3gc.php:32\n\
    Stack trace:\n#0 /tmp/tmplx_mi3gc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplx_mi3gc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Your\
    \ code here\n    $words = explode(' ', $s);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        $new_words[] = $word;\n        $new_words[] = str_replace('\
    \ ', '_', $word);\n    }\n    return implode(' ', array_unique($new_words));\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0leo5ya.php:28\n\
    Stack trace:\n#0 /tmp/tmpu0leo5ya.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpu0leo5ya.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $result\
    \ = '';\n    // Split string by spaces.\n    $words = explode(' ', $s);\n    //\
    \ Iterate through words and replace all letters by new letters.\n    foreach($words\
    \ as $w) {\n        $chars = str_split($w);\n        $len = count($chars);\n \
    \       for($i = 0; $i < $len; $i++) {\n            $ord = ord($chars[$i]);\n\
    \            $ord += ($ord < 65 ? 65 : ( ($ord >= 97) ? 90 : 96 ));\n        \
    \    $ord -= ($ord > 90 ? ( $ord >= 97 ? 32 : 64 ) : 0 );\n            $chars[$i]\
    \ = chr($ord);\n        }\n        $result = ($result ? $result . ' ' : '') .\
    \ implode('', $chars);\n    }\n    // Return ordered string.\n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp24t52a3u.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = strtolower($s);\n\
    \  $words = explode(\" \", $s);\n  $new_words = array();\n  $new_word = '';\n\
    \  foreach ($words as $word) {\n    $new_word .= $word;\n    $new_words[] = $new_word;\n\
    \    $new_word = '';\n  }\n\n  return implode(\" \", $new_words);\n}\n\necho \"\
    Anti-shuffle: \" . anti_shuffle(\"Hi\") . \"\\n\";\necho \"Anti-shuffle: \" .\
    \ anti_shuffle(\"hello\") . \"\\n\";\necho \"Anti-shuffle: \" . anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\n</code>\nThe output would be:\n<code>\nAnti-shuffle:\
    \ Hi\nAnti-shuffle: ehllo\nAnti-shuffle: Hello !!!Wdlor\n</code>\n<|/ a dscore=0\
    \ tags=string,php,split |>\n<| c |>\nThis is also a good way to do it, but i prefer\
    \ my answer because of readability :)\n<|/ c |>\n<| a dscore=0 |>\nThere are some\
    \ good answers already, but here's an alternative:\n<code>\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3fssh6ax.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = preg_split('/\\s+/', $s, -1, PREG_SPLIT_NO_EMPTY);\n    array_walk($words,\
    \ '_antiShuffle');\n    return implode('', $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_walk() expects parameter 2 to be a valid callback, function\
    \ '_antiShuffle' not found or invalid function name in /tmp/tmpez2vwnse.php on\
    \ line 13\n\nWarning: array_walk() expects parameter 2 to be a valid callback,\
    \ function '_antiShuffle' not found or invalid function name in /tmp/tmpez2vwnse.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez2vwnse.php:23\n\
    Stack trace:\n#0 /tmp/tmpez2vwnse.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpez2vwnse.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $sortedWords = array();\n    foreach ($words as $word)\
    \ {\n        $characters = str_split($word);\n        $sortedCharacters = array();\n\
    \        foreach ($characters as $character) {\n            $sortedCharacters[]\
    \ = $character;\n        }\n        asort($sortedCharacters);\n        $sortedWords[]\
    \ = implode($sortedCharacters);\n    }\n    return implode(' ', $sortedWords);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis is also a recursive solution, which\
    \ is faster than using foreach and str_replace.\n<code>\n$string = 'This is my\
    \ string';\n$search = 'is';\n$replace = 'aaa';\n\n$string = preg_replace_callback('~\\\
    b('.preg_quote($search).')\\b~u', function($m) use ($replace) {\n    return str_replace($m[1],\
    \ $replace, $m[0]);\n}, $string);\n\necho $string; //aaa mt aa staaa\n</code>\n\
    <|/ a dscore=0 tags=php,string |>\n<| a |>\n<code>\n$string = 'This is my string';\n\
    $search = 'is';\n$replace = 'aaa';\n$string = preg_replace('/(' . $search . ')/',\
    \ ' aaa ', $string);\n</code>\n<|/ a tags=php,string dscore=0 |>\n<| c |>\nThis\
    \ won't work if there is a word like \"is\" in the string that appears more than\
    \ once.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = 'This is my string';\n\
    $search = 'is';\n$replace = 'aaa';\n\n$string = preg_replace_callback('/\\b('.\
    \ $search . ')\\b/', function($m) use ($replace) {\n    return str_replace($m[1],\
    \ $replace, $m[0]);\n}, $string);\n\necho $string; //aaa mt aa staaa\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nHere is a solution using array_filter() and strtr(),\
    \ the advantage of this is that it works with multiple $search and $replace\n\
    <code>\n$search = [\n    'is' => 'aaa',\n    'is' => 'bbb',\n    'is' => 'ccc'\n\
    ];\n$replace = [\n    'aaa' => 'sss',\n    'bbb' => 'eee',\n    'ccc' => 'fff',\n\
    ];\n\n$string = 'This is my string';\n\n$string = 'This is my string';\n$search\
    \ = ['is'];\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2wz4xp7f.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $word_list\
    \ = array_filter(explode(\" \", $s));\n  $shuffled_list = array();\n  $new_string\
    \ = \"\";\n  foreach ($word_list as $key => $word) {\n    $letters = str_split($word);\n\
    \    $shuffled_letters = array();\n    foreach ($letters as $k => $letter) {\n\
    \      $letter_ord = ord($letter) - 97;\n      if ($letter_ord == 0) {\n     \
    \   $letters[$k] = '?';\n      } else {\n        $shuffled_letters[] = $letter_ord;\n\
    \      }\n    }\n    $shuffled_word = implode($shuffled_letters, \" \");\n   \
    \ $shuffled_list[] = $shuffled_word;\n  }\n  sort($shuffled_list, SORT_NUMERIC);\n\
    \  foreach ($shuffled_list as $k => $shuffled_word) {\n    $new_string .= $word_list[$k].\"\
    \ \";\n  }\n  return $new_string;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeabcmps0.php:41\n\
    Stack trace:\n#0 /tmp/tmpeabcmps0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpeabcmps0.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $newStr\
    \ = \"\";\n  $wordArray = explode(\" \", $s);\n  foreach($wordArray as $word)\
    \ {\n    $ordVal = ord($word);\n    $newStr .= $word;\n    for($i=1;$i<strlen($word);$i++)\
    \ {\n      $ordVal = ord($word[$i]);\n      $newStr .= $word[$i];\n      if($ordVal\
    \ > $ordVal) {\n        $newStr = $newStr;\n        break;\n      }\n    }\n \
    \   $newStr .= \" \";\n  }\n  return $newStr;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiaia4mwz.php:34\n\
    Stack trace:\n#0 /tmp/tmpiaia4mwz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiaia4mwz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = str_replace('\
    \ ', '', $s);\n    $s = str_replace(' ', '', $s);\n    $words = explode(' ', $s);\n\
    \    $l = count($words);\n    \n    for ($i = 0; $i < $l; $i++) {\n        $words[$i]\
    \ = strrev($words[$i]);\n        $words[$i] = strrev($words[$i]);\n    }\n   \
    \ \n    return implode(' ', $words);\n}\n$output = anti_shuffle(\"Hi, how are\
    \ you?\");\necho $output;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi,howareyou?\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kofzqgs.php:32\n\
    Stack trace:\n#0 /tmp/tmp8kofzqgs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8kofzqgs.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $sorted_words = array();\n\n    foreach ($words as\
    \ $word) {\n        $new_word = '';\n        foreach (str_split($word) as $char)\
    \ {\n            $new_word .= $char;\n            $new_word .= $char;\n      \
    \  }\n\n        $sorted_words[] = $new_word;\n    }\n\n    return implode(' ',\
    \ $sorted_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmq39fcb.php:33\n\
    Stack trace:\n#0 /tmp/tmpbmq39fcb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbmq39fcb.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Your\
    \ code here\n    $wordArray = explode(\" \", $s);\n    sort($wordArray);\n   \
    \ $s = implode(\" \", $wordArray);\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfj1pkih.php:25\n\
    Stack trace:\n#0 /tmp/tmpdfj1pkih.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdfj1pkih.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $newStr\
    \ = '';\n    foreach(str_word_count($s) as $word) {\n        $newStr .= $word;\n\
    \    }\n    return $newStr;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nAwesome,\
    \ thank you!  I was able to add my own error handling that makes it so that non-alphanumeric\
    \ characters aren't allowed.\n<|/ c |>\n<| a tags=php |>\nHere's a quick solution\
    \ using the explode() function:\n<code>\n$newStr = '';\n$arr = explode(' ', $newStr);\n\
    foreach ($arr as $value) {\n    $newStr .= $value;\n}\n</code>\nHope this helps.\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nJust use str_replace instead:\n<code>\n<?php\n\
    $str = \"Hello\";\n\n$newstr = str_replace(' ', '', $str);\necho \"$newstr\\n\"\
    ;\n</code>\nOutput\n<code>\nHello\n</code>\n<|/ a tags=php |>\n<| a tags=php dscore=0\
    \ |>\nYou could do it this way using regular expressions. \nThis solution will\
    \ remove all characters and numbers from a string that are not alphanumeric or\
    \ spaces. \n<code>\n$str=\"abc !@#$%^&*()_ ABCDEFG%^&*()_\";\necho preg_replace(\"\
    /[^\\w\\s]/\", \"\", $str);\n</code>\nThis code would output ABCDEFG%^&*()_\n\
    <|/ a |>\n<| c |>\nThis would remove the `!` from the string. OP wants to remove\
    \ the non alphanumeric characters though.\n<|/ c |>\n<| a dscore=0 |>\nTry this.\n\
    <code>\n$str = str_replace(' ', '', $str);\n</code>\n<|/ a tags=php |>\n<| a dscore=0\
    \ |>\nI believe you can do that with regular expressions pretty easily if you\
    \ only want the alphanumeric characters and spaces (no special characters). Try\
    \ this regex:\n<code>\n[^a-z0-9 ]\n</code>\n<|/ a tags=php |>\n<| c |>\nThat matches\
    \ everything except letters and digits, not alphanumeric. `+` matches one or more\
    \ of the previous character, so `++` matches `+` and two `+`.\n<|/ c |>\n<| c\
    \ |>\nI see. I thought he wanted the non-alphanumeric characters removed from\
    \ the string. I'll edit my answer to include an extra space character.\n<|/ c\
    \ |>\n<| a d\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgptsotei.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = array();\n    foreach ($arr as $word) {\n\
    \        $new_arr[] = preg_replace('/\\s+/', '', $word);\n    }\n    return implode('',\
    \ $new_arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpjxdmj5.php:26\n\
    Stack trace:\n#0 /tmp/tmprpjxdmj5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprpjxdmj5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(\" \", $s);\n  usort($words, \"anti_sort_func\");\n  return implode(\"\
    \ \", $words);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'anti_sort_func' not found or invalid function name in /tmp/tmpxbnffbdb.php\
    \ on line 13\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'anti_sort_func' not found or invalid function name in /tmp/tmpxbnffbdb.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbnffbdb.php:22\n\
    Stack trace:\n#0 /tmp/tmpxbnffbdb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxbnffbdb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    if (!is_string($s))\n\
    \        return false;\n    $words = preg_split('/\\s+/', $s, null, PREG_SPLIT_NO_EMPTY);\n\
    \    sort($words);\n    $result = implode('', $words);\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycbphhkf.php:25\n\
    Stack trace:\n#0 /tmp/tmpycbphhkf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpycbphhkf.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $str = explode(\"\
    \ \", $s);\n  $str = array_reverse($str);\n  return implode(\" \", $str);\n}\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8td6sef3.php:22\n\
    Stack trace:\n#0 /tmp/tmp8td6sef3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8td6sef3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  sort($words);\n  return implode(' ', $words);\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpggg66y7w.php:22\n\
    Stack trace:\n#0 /tmp/tmpggg66y7w.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpggg66y7w.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // Only\
    \ change code below this line\n  // Write your code here\n  $words = explode('\
    \ ', $s);\n  $new_s = '';\n  foreach ($words as $word) {\n    $new_word = '';\n\
    \    for ($i = 0; $i < strlen($word); $i++) {\n      $new_word .= $word[$i];\n\
    \      $new_word .= array_search($word[$i], $word_lookup);\n    }\n    $new_s\
    \ .= $new_word . ' ';\n  }\n  $new_s = trim($new_s);\n  return $new_s;\n}\n\n\
    echo anti_shuffle(\"Hi there how are you?\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line\
    \ 20\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line\
    \ 20\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line\
    \ 20\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line\
    \ 20\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line\
    \ 20\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line 20\nHi there how are\
    \ you?\n\nWarning: array_search() expects parameter 2 to be array, null given\
    \ in /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp2wk5r6gx.php on line 20\n\nWarning: array_search()\
    \ expects parameter 2 to be"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = preg_replace('/\\\
    s/', '', $s);\n    $arr = [];\n    foreach (str_split($s) as $k => $v) {\n   \
    \     $arr[$v] = $k;\n    }\n    return implode('', $arr);\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 tags=php |>\n<code>\n$string = 'this is a test string';\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbh4sua33.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ strtolower(str_replace(\" \", \"\", strtr(\n        str_replace(array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        , array(\"i\", \"e\", \"o\", \"a\", \"\
    u\")\n        , str_replace(array(\"!\", \"\\\"\", \"#\", \"$\", \"%\", \"&\"\
    , \"'\", \"(\", \")\", \"-\", \"+\", \"=\", \",\", \";\", \":\", \"'\", \"/\"\
    , \"\\\\\", \"?\", \">\", \"<\", \"]\", \"[\", \"{\", \"}\")\n        ), \"i\"\
    \n        , $s\n        )));\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\nMy own solution\
    \ using array_count_values, array_filter and array_multisort, but I think it's\
    \ more complicated than it needs to be.\n<code>\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8rpupa7y.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $a = array();\n\
    \  $words = explode(' ', $s);\n  foreach ($words as $word) {\n    $w = preg_replace('/[^a-zA-Z\
    \ ]/', '', $word);\n    sort($w);\n    $a[] = $w;\n  }\n  return implode('', $a);\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpjym0x0f5.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpjym0x0f5.php on line 16\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpjym0x0f5.php:27\nStack trace:\n#0 /tmp/tmpjym0x0f5.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjym0x0f5.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $result\
    \ = '';\n    foreach (str_word_count($s, 1) as $w) {\n        $result .= substr($s,\
    \ 0, $w);\n        $result .= strtoupper(substr($s, $w));\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: substr() expects parameter 3 to be int, string given in /tmp/tmp5jcudboj.php\
    \ on line 14\n\nWarning: substr() expects parameter 2 to be int, string given\
    \ in /tmp/tmp5jcudboj.php on line 15\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp5jcudboj.php:25\nStack trace:\n#0 /tmp/tmp5jcudboj.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5jcudboj.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return $s;\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbafr3d1.php:20\n\
    Stack trace:\n#0 /tmp/tmpxbafr3d1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxbafr3d1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $words = array_map(\"strtolower\", $words);\n   \
    \ $s = implode(\" \", $words);\n\n    $words = explode(\" \", $s);\n    sort($words);\n\
    \    $s = implode(\" \", $words);\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5xile9t.php:27\n\
    Stack trace:\n#0 /tmp/tmph5xile9t.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph5xile9t.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $str = \"\
    \";\n  $len = strlen($s);\n  $newStr = \"\";\n  $i = 0;\n  while($i < $len) {\n\
    \    $asciVal = ord($s[$i]);\n    if($asciVal >= 65 && $asciVal <= 90) {\n   \
    \   $asciVal = ord($s[$i]) + 64;\n    } else if($asciVal >= 97 && $asciVal <=\
    \ 122) {\n      $asciVal = ord($s[$i]) - 96;\n    } else {\n      $asciVal = ord($s[$i])\
    \ + 48;\n    }\n    $newStr .= chr($asciVal);\n    $i++;\n  }\n  return $newStr;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wipce1d.php:36\n\
    Stack trace:\n#0 /tmp/tmp3wipce1d.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3wipce1d.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $r = '';\n\
    \  $arr = str_split($s);\n  for($i = 0; $i < count($arr); $i++) {\n    $r .= $arr[rand(0,count($arr)-1)];\n\
    \  }\n  return $r;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmq72blb.php:24\n\
    Stack trace:\n#0 /tmp/tmpvmq72blb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvmq72blb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return implode('\
    \ ', array_map(function($v){ return str_split($v)},\n    str_word_count(preg_replace('/[^a-zA-Z]+/',\
    \ '', $s), 1)));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nIt's not about the order\
    \ of the words, it's about ordering the letters in a word as if they are ordered\
    \ based on ASCII value, not alphabetic ordering.\n<|/ c |>\n<| c |>\n- you're\
    \ right. i changed the code. please check if it works\n<|/ c |>\n<| c |>\nIt almost\
    \ works, but it seems to shuffle the punctuation as well, right?\n<|/ c |>\n<|\
    \ c |>\n- yes, you're right. I've just changed the code. please check if it works.\n\
    <|/ c |>\n<| c |>\nThis is awesome!\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu69hv2ik.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  global $alphabet;\n\
    \  \n  $s = trim($s);\n  $words = explode(\" \", $s);\n  $newWord = \"\";\n  $length\
    \ = count($words);\n  for ($i = 0; $i < $length; $i++) {\n    $newWord .= $alphabet[$words[$i]];\n\
    \  }\n  return $newWord;\n}\n\necho \"Anti shuffle = \" . anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Anti shuffle = \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspjni4qe.php:30\n\
    Stack trace:\n#0 /tmp/tmpspjni4qe.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpspjni4qe.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // write\
    \ your code\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2onl6lv7.php:19\n\
    Stack trace:\n#0 /tmp/tmp2onl6lv7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2onl6lv7.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  foreach ($s as $k => $word) {\n    $s[$k] = str_replace(\n      array_keys(str_split($word)),\n\
    \      array_values(str_split($word)),\n      $word\n    );\n  }\n  return implode('\
    \ ', $s);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you for your answer,\
    \ but this one doesn't work very well: it outputs strange strings. I edited the\
    \ question to include some examples of what it does. Can you please help me to\
    \ fix that?\n<|/ c |>\n<| c |>\n: That's because your function actually returns\
    \ an array and not a string. I updated the code, please check it out.\n<|/ c |>\n\
    <| c |>\nThank you so much, that fixed my problem!\n<|/ c |>\n<| c |>\n: Glad\
    \ to help you :)\n<|/ c |>\n<| a dscore=1 |>\nHere is a possible solution:\n<code>\n\
    $str = 'Hello';\n$arr = [];\n\ndo {\n    $len = strlen($str);\n    foreach(str_split($str)\
    \ as $c) {\n        $arr[$c] = $c;\n    }\n} while($len > 0);\n\n$newstr = implode('',\
    \ $arr);\n</code>\n<|/ a tags=php,string |>\n<| c |>\nI don't really get what\
    \ this code is doing, but I'll look into it later :) Thank you!\n<|/ c |>\n<|\
    \ a tags=php,string |>\n<code>\n<?php\n$str = \"Hello\";\n$newstr = \"\";\nfor\
    \ ($i = 0; $i < strlen($str); $i++) {\n    for ($j = 0; $j < strlen($str); $j++)\
    \ {\n        if ($str[$i] == $str[$j]) {\n            $newstr .= $str[$i];\n \
    \       }\n    }\n}\necho $newstr;\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9vhedzgu.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    \n    // Sort the array in ascending order based on\
    \ ASCII value of characters\n    usort($words, 'sort_string');\n\n    // Return\
    \ the string in the correct order\n    return implode(' ', $words);\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_string' not found or invalid function name in /tmp/tmpq1nz3zuj.php on\
    \ line 15\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_string' not found or invalid function name in /tmp/tmpq1nz3zuj.php on\
    \ line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1nz3zuj.php:26\n\
    Stack trace:\n#0 /tmp/tmpq1nz3zuj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq1nz3zuj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $chars =\
    \ str_split($s);\n  $n = count($chars);\n  $result = \"\";\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $char = strtoupper($chars[$i]);\n    if ($char == \" \")\
    \ {\n      $chars[$i] = $chars[$n - $i - 1];\n    }\n    $result .= $char;\n \
    \ }\n  return $result;\n}\n\n$sentence = \"Lorem Ipsum is simply dummy text of\
    \ the printing and typesetting industry. Lorem Ipsum has been the industry's standard\
    \ dummy text ever since the 1500s, when an unknown printer took a galley of type\
    \ and scrambled it to make a type specimen book. It has survived not only five\
    \ centuries, but also the leap into electronic typesetting, remaining essentially\
    \ unchanged. It was popularised in the 1960s with the release of Letraset sheets\
    \ containing Lorem Ipsum passages, and more recently with desktop publishing software\
    \ like Aldus PageMaker including versions of Lorem Ipsum.\";\n$sentence = preg_replace(\"\
    /[^A-Za-z0-9 ]/\", '', $sentence);\n$sentence = anti_shuffle($sentence);\n$sentence\
    \ = strtolower($sentence);\n$sentence = preg_replace(\"/\\s+/\", ' ', $sentence);\n\
    $sentence = preg_replace(\"/\\s+/\", ' ', $sentence);\necho \"$sentence\";\n</code>\n\
    <|/ a tags=php,preg-replace dscore=2 |>\n<| a dscore=1 |>\nThis is what I have\
    \ used for a similar situation. It is not elegant, but it is easy, short, clean,\
    \ and does not require a regular expression. Hope this helps someone else looking\
    \ for the same thing.\n<code>\n$sentence = \"Lorem Ipsum is simply dummy text\
    \ of the printing and typesetting industry. Lorem Ipsum has been the industry's\
    \ standard dummy text ever since the 1500s, when an unknown printer took a galley\
    \ of type and scrambled it to make a type specimen book. It has survived not only\
    \ five centuries, but also the leap into electronic typesetting, remaining essentially\
    \ unchanged. It was popularised in the 1960s with the release of Letraset sheets\
    \ containing Lorem Ipsum passages, and more recently with desktop publishing software\
    \ like Aldus PageMaker including versions of Lorem Ipsum.\";\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmft4fs4h.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = preg_replace('/\\\
    s[,\\!]*\\s/', \" \", $s);\n  $s = str_replace(\" \", \"\", $s);\n  $s = ucwords(strtolower($s));\n\
    \  return $s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeytil63y.php:23\n\
    Stack trace:\n#0 /tmp/tmpeytil63y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeytil63y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return implode(' ', $words);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzl4mt7n3.php:23\n\
    Stack trace:\n#0 /tmp/tmpzl4mt7n3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzl4mt7n3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $words = array_map('trim', $words);\n    sort($words);\n\
    \    return implode(' ', $words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe94nu2br.php:24\n\
    Stack trace:\n#0 /tmp/tmpe94nu2br.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpe94nu2br.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $str = $s;\n\
    \  $ar = array();\n  $words = explode(' ',$str);\n  foreach($words as $w) {\n\
    \    $a = array();\n    for($i = ord($w[0]); $i <= ord($w[$i]); $i++) {\n    \
    \  $a[] = chr($i);\n    }\n    $ar[] = implode($a,'');\n  }\n  return implode('\
    \ ',$ar);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpapslthli.php:29\n\
    Stack trace:\n#0 /tmp/tmpapslthli.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpapslthli.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ $s;\n}\n\n$string = \"Hello World!\";\n$string = anti_shuffle($string);\necho\
    \ $string; // \"Hello World!\"\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hello World!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s8jqtjw.php:24\n\
    Stack trace:\n#0 /tmp/tmp6s8jqtjw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6s8jqtjw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    $s = implode(' ', $words);\n   \
    \ return $s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xo8wyr8.php:23\n\
    Stack trace:\n#0 /tmp/tmp6xo8wyr8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6xo8wyr8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $words = array_map(\"ord\", $words);\n    $words\
    \ = array_unique($words);\n    sort($words);\n    $words = implode(\" \", $words);\n\
    \    return $s;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpze5o9hrz.php:26\n\
    Stack trace:\n#0 /tmp/tmpze5o9hrz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpze5o9hrz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  if (is_string($s))\
    \ {\n    $words = explode(' ', $s);\n    $sorted = array();\n    foreach ($words\
    \ as $word) {\n      $sorted[] = str_ireplace(\"'\", '', $word);\n      $sorted[]\
    \ = str_ireplace('\"', \"'\", $word);\n      $sorted[] = str_ireplace(' ', '$',\
    \ $word);\n    }\n    $sorted = sort($sorted);\n    $result = implode(' ', $sorted);\n\
    \    return $result;\n  }\n  return false;\n}\n</code>\nAnd this is my test script:\n\
    <code>\n<?php\nrequire \"anti-shuffle.php\";\n\n$arrayOfStrings = array(\n  \"\
    Anti Shuffle is an online tool that helps you to shuffle English sentences.\"\
    ,\n  \"The anti shuffle tool only shuffles English sentences.\",\n  \"Anti shuffle\
    \ allows you to rearrange the characters within the sentences.\",\n  \"To use\
    \ this tool, go to http://www.antishuffle.com.br/en/index.php and enter the word\
    \ you want to rearrange.\",\n  \"Anti Shuffle only shuffles the characters in\
    \ a sentence.\",\n  \"Anti Shuffle does not change a word into multiple words.\"\
    ,\n  \"Anti shuffle allows you to rearrange the characters in a sentence.\",\n\
    \  \"To use this tool, go to http://www.antishuffle.com.br/en/index.php and enter\
    \ the word you want to rearrange\",\n  \"Use this tool to make an anti shuffle\"\
    ,\n  \"To use this tool, go to http://www.antishuffle.com.br/en/index.php and\
    \ enter the word you want to rearrange\",\n  \"Anti Shuffle allows you to rearrange\
    \ the characters in a sentence.\" \n);\n\nforeach ($arrayOfStrings as $str) {\n\
    \  echo anti_shuffle($str) . \"<br>\";\n}\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyuqc2ytv.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $sortedwords = array();\n    foreach ($words as $i\
    \ => $word) {\n        $sortedwords[$i] = $word;\n    }\n    // Sort the array\
    \ by ascending ascii value\n    // Note: You can use usort function also\n   \
    \ array_multisort($sortedwords);\n    return implode(' ', $words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztw69njo.php:29\n\
    Stack trace:\n#0 /tmp/tmpztw69njo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpztw69njo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n   $words\
    \ = explode(\" \", $s);\n   $words = array_combine(array_map('ord', explode(\"\
    \ \", $s)), explode(\" \", $s));\n   $words = array_map('strrev', $words);\n \
    \  $words[\"\"] = \"\";\n   return implode(\" \", $words);\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,algorithm |>\nI thought it would be an interesting\
    \ problem. Since this is a challenge I took a couple of minutes to solve it.\n\
    I tried to come up with a solution which works only if you pass it a sentence\
    \ with spaces at the start and at the end of the sentence. If you have something\
    \ that doesn't have spaces at the start and at the end you will have to do some\
    \ extra work to make it work. I used a regex to check for spaces, I replaced the\
    \ spaces with another space and then trimmed both strings. I made two arrays,\
    \ the first array holds the original words and then the second array holds the\
    \ words rearranged into the correct format.\nHere's what I came up with:\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpor2vdsa0.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = preg_replace('/\
    \ +/',' ',$s);\n    $words = explode(' ',$s);\n    asort($words);\n    $s = implode('\
    \ ',$words);\n    return $s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63wbose1.php:24\n\
    Stack trace:\n#0 /tmp/tmp63wbose1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp63wbose1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s_array\
    \ = preg_split('/\\s+/', $s);\n  $s_array = array_map('ord', $s_array);\n  $s_array\
    \ = array_combine($s_array, array_reverse($s_array));\n  return implode('', $s_array);\n\
    }\n\n$sentence = 'Hello World!!!';\necho \"The sentence is $sentence </br>\";\n\
    echo anti_shuffle($sentence);\necho \"</br></br>\";\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The sentence is Hello World!!! </br>8772</br></br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp8zhrt2yk.php:28\nStack trace:\n#0 /tmp/tmp8zhrt2yk.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8zhrt2yk.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n   $string\
    \ = $s;\n   $arr = explode(' ', $string);\n   sort($arr);\n   $string = implode('\
    \ ', $arr);\n   return $string;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqih63oop.php:25\n\
    Stack trace:\n#0 /tmp/tmpqih63oop.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqih63oop.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $letters = array();\n    $string = '';\n\n    foreach\
    \ ($words as $word) {\n        $letter = '';\n        foreach (str_split($word)\
    \ as $c) {\n            $letter = $c . $letter;\n        }\n        $letters[]\
    \ = $letter;\n    }\n\n    foreach ($letters as $i => $letter) {\n        $letters[$i]\
    \ = $letter;\n    }\n\n    ksort($letters);\n\n    foreach ($letters as $i =>\
    \ $letter) {\n        $string .= $letter;\n    }\n\n    return $string;\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55zx4mj2.php:41\n\
    Stack trace:\n#0 /tmp/tmp55zx4mj2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp55zx4mj2.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  if (empty($s))\
    \ {\n    return $s;\n  }\n  $words = explode(' ', $s);\n  $chars = array_merge(range('a',\
    \ 'z'), range('A', 'Z'));\n  $new_words = array();\n  foreach ($words as $word)\
    \ {\n    foreach ($chars as $char) {\n      $new_word = substr($word, 0, 1) .\
    \ $char . substr($word, 1);\n      if (!in_array($new_word, $new_words)) {\n \
    \       $new_words[] = $new_word;\n      }\n    }\n  }\n  return implode(' ',\
    \ $new_words);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon059_zg.php:33\n\
    Stack trace:\n#0 /tmp/tmpon059_zg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpon059_zg.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return join(' ', array_filter($words));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks, that worked great! Do you think there would\
    \ be a way to limit the amount of random letters picked? For example, if I wanted\
    \ to do something like anti_shuffle('Hello World!!!', 2) to produce 'ehllo !!!Wdlor',\
    \ is there a way to do this?\n<|/ c |>\n<| c |>\nJust use array_slice() after\
    \ randomizing\n<|/ c |>\n<| a tags=php,random,string dscore=1 |>\nA shorter way:\n\
    <code>\n<?php\n\n    function antishuffle($s) {\n        $words = explode(' ',\
    \ $s);\n        sort($words);\n        $string = join(' ', array_filter($words));\n\
    \        return $string;\n    }\n\n    echo antishuffle('Hello World!!!');\n</code>\n\
    <|/ a |>\n<| a |>\nTry this way also \n<code>\n$string = substr(str_shuffle(str_repeat(\"\
    0123456789abcdefghijklmnopqrstuvwxyz\", rand(1, 32))), 0, rand(10, 10));\n$string\
    \ = substr($string, rand(0, strlen($string) - 1), rand(0, strlen($string) - 1));\n\
    </code>\n<|/ a tags=php,random,string dscore=0 |>\n<| a |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsokqpnhn.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  // Use an associative array for storing the words\n  //\
    \ The key of the array is the ASCII value of the character\n  // and the value\
    \ of the array is the original string with the character\n  // replaced by the\
    \ key\n  $char_map = array_flip(\n    range('a', 'z') +\n    range('A', 'Z') +\n\
    \    range('0', '9') +\n    range(0, 9)\n  );\n  $words_list = array();\n  //\
    \ Loop through all the words in the sentence\n  foreach ($words as $word) {\n\
    \    // Replace the characters in the word with the key\n    $word = str_replace(array_keys($char_map),\
    \ array_values($char_map), $word);\n    // Push the current word to the list\n\
    \    $words_list[] = $word;\n  }\n  // Return an ordered version of the sentence\n\
    \  return implode(' ', array_unique($words_list));\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpettd2jwm.php:39\n\
    Stack trace:\n#0 /tmp/tmpettd2jwm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpettd2jwm.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return implode(' ', $words);\n}\n\
    </code>\n<|/ a dscore=3 tags=php,arrays,sorting |>\n<| c |>\nThanks, I tested\
    \ the code and it works fine. :)\n<|/ c |>\n<| c |>\nThanks, this code was very\
    \ useful for me. I had to change it a little bit, because I was using it with\
    \ strings containing multiple words instead of just one word (it was working with\
    \ a single word string as well). But thanks to this, the code worked with multiple\
    \ words too.\n<|/ c |>\n<| a dscore=3 tags=php,arrays,sorting |>\n<code>\n<?php\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1caphokk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $i = 0;\n  foreach ($words as &$word) {\n    if ($i ===\
    \ 0) $word = strtolower($word);\n    $word .= $word;\n    $i++;\n  }\n  unset($word);\n\
    \  return implode(' ', array_map('strtolower', $words));\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbg482xda.php:28\n\
    Stack trace:\n#0 /tmp/tmpbg482xda.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbg482xda.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ preg_replace('/(\\w+\\s)/e', \"\\1\\2\", $s);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): The /e modifier is no longer supported, use\
    \ preg_replace_callback instead in /tmp/tmprdx7ye34.php on line 12\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmprdx7ye34.php:19\nStack trace:\n\
    #0 /tmp/tmprdx7ye34.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprdx7ye34.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $s = array_map('ord', array_unique(array_map('strtoupper', $s)));\n\
    \    return implode(' ', array_map('chr', $s));\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphaknlq0_.php:22\n\
    Stack trace:\n#0 /tmp/tmphaknlq0_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphaknlq0_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    $sorted = implode(' ', $words);\n\
    \    return $sorted;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90n4mu0_.php:23\n\
    Stack trace:\n#0 /tmp/tmp90n4mu0_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp90n4mu0_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $result\
    \ = '';\n    $words = explode(' ', $s);\n    $chars = array_merge(range('a', 'z'),\
    \ range('A', 'Z'), range(0, 9));\n    foreach($words as $key => $word) {\n   \
    \     $words = str_split($word);\n        foreach($chars as $key => $char) {\n\
    \            $words[$key] = $chars[array_search($char, $chars)];\n        }\n\
    \        $str = '';\n        foreach($words as $key => $word) {\n            $str\
    \ .= $word;\n        }\n        $result .= str_shuffle($str);\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvnwdt5j_.php:33\n\
    Stack trace:\n#0 /tmp/tmpvnwdt5j_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvnwdt5j_.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$s = preg_replace('/[^A-Za-z0-9\\\
    s]/', '', $s);\n\t$words = explode(' ', $s);\n\tsort($words);\n\tforeach($words\
    \ as $w) {\n\t\tif($w) {\n\t\t\t$s = preg_replace('/'.preg_quote($w, '/').'/',\
    \ ' '.$w, $s);\n\t\t}\n\t}\n\treturn $s;\n}\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa181olu6.php:27\n\
    Stack trace:\n#0 /tmp/tmpa181olu6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa181olu6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $new_string\
    \ = '';\n  $arr = preg_split('/\\s+/', $s);\n  $letters = range('A', 'Z');\n \
    \ foreach($arr as $key => $letter) {\n    $new_string .= $letters[$key];\n  }\n\
    \  return $new_string;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p8641p_.php:26\n\
    Stack trace:\n#0 /tmp/tmp_p8641p_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_p8641p_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = strtolower($s);\n\
    \    $words = explode(' ', $s);\n    sort($words);\n    $s = implode('', $words);\n\
    \    return $s;\n}\n$words = anti_shuffle($_POST['word']);\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yssu198.php:24\n\
    Stack trace:\n#0 /tmp/tmp3yssu198.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3yssu198.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $res =\
    \ \"\";\n    $words = explode(\" \",$s);\n    foreach($words as $word){\n    \
    \    $res .= $word;\n    }\n    $chars = \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ0123456789\"\
    ;\n    $charsArray = str_split($chars);\n    $charsArray = array_reverse($charsArray);\n\
    \    foreach($charsArray as $char){\n        $res .= $char;\n    }\n    return\
    \ $res;\n}\n$input = anti_shuffle('Hello World!!!');\necho $input;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "HelloWorld!!!9876543210ZzYyXxWwVvUuTtSsRrQqPpOoNnMmLlKkJjIiHhGgFfEeDdCcBbAa\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp33ybylct.php:32\nStack\
    \ trace:\n#0 /tmp/tmp33ybylct.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp33ybylct.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = str_split($s);\n\
    \  sort($arr);\n  $s = implode(' ', $arr);\n  return $s;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxtik35s.php:22\n\
    Stack trace:\n#0 /tmp/tmplxtik35s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplxtik35s.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  sort($words);\n  return implode(' ', $words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop7bf8g8.php:23\n\
    Stack trace:\n#0 /tmp/tmpop7bf8g8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpop7bf8g8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  \n  $arr\
    \ = str_split($s);\n  sort($arr);\n  return implode('', $arr);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2nzave0.php:27\n\
    Stack trace:\n#0 /tmp/tmpd2nzave0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd2nzave0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    sort($arr);\n    $str = '';\n    foreach ($arr as $val)\
    \ {\n        $str .= $val;\n    }\n    return $str;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_oj353xn.php:26\n\
    Stack trace:\n#0 /tmp/tmp_oj353xn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_oj353xn.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ',$s);\n  return $s[0];\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9c53lod.php:21\n\
    Stack trace:\n#0 /tmp/tmpd9c53lod.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd9c53lod.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = preg_replace('/[^a-zA-Z0-9\\\
    s]/', '', $s);\n    return $s;\n}\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiy8u2vh3.php:21\n\
    Stack trace:\n#0 /tmp/tmpiy8u2vh3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpiy8u2vh3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $result\
    \ = $s;\n  $list = explode(' ', $result);\n  sort($list);\n  $result = implode('',\
    \ $list);\n  return $result;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1adpjy4.php:24\n\
    Stack trace:\n#0 /tmp/tmpl1adpjy4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl1adpjy4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    if (!$s)\
    \ {\n        return $s;\n    }\n    // Get an array of the characters in $s\n\
    \    $arr = str_split($s);\n    // Get an array of the characters in $arr\n  \
    \  $sorted = array();\n    // Get the ascii values of each character\n    foreach\
    \ ($arr as $c) {\n        $sorted[] = ord($c);\n    }\n    // Sort the ascii values\
    \ in ascending order\n    sort($sorted);\n    // Rebuild the new string\n    $n\
    \ = '';\n    foreach ($sorted as $c) {\n        $n .= chr($c);\n    }\n    return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h5z5rf.php:41\n\
    Stack trace:\n#0 /tmp/tmp48h5z5rf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp48h5z5rf.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $str = preg_replace('/\\\
    s+/', '', $s);\n  $words = explode(' ', $str);\n  asort($words);\n  $out = implode('\
    \ ', $words);\n  return $out;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdixaerk.php:24\n\
    Stack trace:\n#0 /tmp/tmpcdixaerk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcdixaerk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ implode(array_map('chr', str_split($s, 1)));\n}\n</code>\n<|/ a dscore=5 tags=algorithm,php,string,arrays\
    \ |>\n<| c |>\nNice. I've implemented a version that works with UTF-16 strings:\
    \ http://pastebin.com/RQVk7ztU\n<|/ c |>\n<| c |>\n`anti_shuffle(\"Hello World!!!\"\
    )` returns `\"Hello World!!!\"`\n<|/ c |>\n<| c |>\nThis code is not working for\
    \ me. `anti_shuffle(\"Hello World!!!\")` returns `Hello World!`\n<|/ c |>\n<|\
    \ a |>\nYou can try this function,\n<code>\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphm1g4vnj.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $array\
    \ = array_unique(preg_split('/\\s+/', $s, -1, PREG_SPLIT_NO_EMPTY));\n    array_walk($array,\
    \ function(&$item) {\n        $item = strtolower($item);\n    });\n    sort($array);\n\
    \    $new = implode(' ', $array);\n    return $new;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63l6t1a8.php:26\n\
    Stack trace:\n#0 /tmp/tmp63l6t1a8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp63l6t1a8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $words = array_map('ord', array_values($words));\n\
    \    sort($words);\n    $words = implode(' ', $words);\n\n    return $words;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hyvmk6i.php:25\n\
    Stack trace:\n#0 /tmp/tmp6hyvmk6i.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6hyvmk6i.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Your\
    \ code goes here.\n    $newS = \"\";\n    $words = explode(\" \", $s);\n    $wordCount\
    \ = count($words);\n    for ($i = 0; $i < $wordCount; $i++) {\n        $newS .=\
    \ $words[$i];\n        $i++;\n    }\n    return $newS;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa814ddep.php:28\n\
    Stack trace:\n#0 /tmp/tmpa814ddep.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa814ddep.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $newString\
    \ = '';\n    foreach (str_word_count($s, 1) as $word) {\n        $char = strtolower($word[0]);\n\
    \        if ($char <= \"z\" || $char >= \"y\") {\n            $newString .= $char;\n\
    \        } else {\n            $newString .= str_shuffle($char);\n        }\n\
    \    }\n    return $newString;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97s5l7qg.php:29\n\
    Stack trace:\n#0 /tmp/tmp97s5l7qg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp97s5l7qg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  sort($words);\n  return implode(' ', $words);\n}\necho\
    \ anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8r_j1sv.php:23\n\
    Stack trace:\n#0 /tmp/tmpq8r_j1sv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpq8r_j1sv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $new_s\
    \ = \"\";\n    $words = explode(\" \", $s);\n    $length = count($words);\n  \
    \  $i = 0;\n    while($i < $length) {\n        $new_word = \"\";\n        for($j\
    \ = 0; $j < $length && $j < $i; $j++) {\n            $new_word .= $words[$j];\n\
    \        }\n        $new_word .= \" \";\n        $new_word .= $words[$i];\n  \
    \      $new_s .= $new_word;\n        $i++;\n    }\n    return $new_s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03j6iyqv.php:34\n\
    Stack trace:\n#0 /tmp/tmp03j6iyqv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp03j6iyqv.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // your\
    \ code goes here\n  $t = strtr($s,' ','_');\n  $t = str_replace(' ','-',$t);\n\
    \  return strtr($t,'_',' ');\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7i12ipt.php:24\n\
    Stack trace:\n#0 /tmp/tmpx7i12ipt.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx7i12ipt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  preg_match_all('/\\\
    s/', $s, $matches);\n  $a = array();\n  foreach ($matches[0] as $char) {\n   \
    \ $a[] = ord($char);\n  }\n  // Sort the array based on the ascii values\n  asort($a);\n\
    \  // Build the new string\n  $new = '';\n  $words = explode(' ', $s);\n  foreach\
    \ ($words as $word) {\n    foreach ($a as $val) {\n      if ($val == ord($word))\
    \ {\n        $new .= $word;\n        break;\n      }\n    }\n  }\n  return $new;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgaoi8l4w.php:38\n\
    Stack trace:\n#0 /tmp/tmpgaoi8l4w.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpgaoi8l4w.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // your\
    \ code here\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9cfi7im.php:22\n\
    Stack trace:\n#0 /tmp/tmp_9cfi7im.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_9cfi7im.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $ordered = '';\n    $sorted_array = array();\n\n  \
    \  foreach ($words as $word) {\n        $sorted_array[$word[0]] = $word[0];\n\
    \    }\n\n    foreach ($words as $word) {\n        if (isset($sorted_array[$word[0]]))\
    \ {\n            $sorted_array[$word[0]] = $word[0] + 1;\n        } else {\n \
    \           $sorted_array[$word[0]] = $word[0];\n        }\n    }\n\n    $sorted_array\
    \ = array_reverse($sorted_array);\n\n    foreach ($words as $word) {\n       \
    \ if (isset($sorted_array[$word[0]])) {\n            $ordered .= $sorted_array[$word[0]].$word[1];\n\
    \        } else {\n            $ordered .= $word[1];\n        }\n    }\n\n   \
    \ return $ordered;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp713trzwb.php on line\
    \ 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp713trzwb.php:46\n\
    Stack trace:\n#0 /tmp/tmp713trzwb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp713trzwb.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $res =\
    \ [];\n    foreach (explode(' ', $s) as $word) {\n        foreach (str_split($word)\
    \ as $char) {\n            $res[] = ord($char) < 128 ? $char : $char;\n      \
    \  }\n    }\n    return implode('', $res);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6u2tqcv.php:27\n\
    Stack trace:\n#0 /tmp/tmpc6u2tqcv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpc6u2tqcv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return preg_replace('/(\\\
    w+\\s+\\w+)/i', '$1 ', preg_replace('/\\s+/', ' ', $s));\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvncenvjd.php:21\n\
    Stack trace:\n#0 /tmp/tmpvncenvjd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvncenvjd.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return implode(' ', $words);\n}\n\
    </code>\n<|/ a dscore=4 tags=php |>\n<| c |>\nGreat solution! Thanks man! The\
    \ only problem is that it only works with the first word. Is there any way around\
    \ this?\n<|/ c |>\n<| c |>\nThis doesn't work if the words are separated by any\
    \ kind of whitespace - i.e. a tab character. The solution is to use explode()\
    \ to create an array of words first.\n<|/ c |>\n<| c |>\nI didn't test it but\
    \ it should work fine. Could you please post the code that is not working for\
    \ you? It would be very helpful to see what is not working.\n<|/ c |>\n<| c |>\n\
    I figured it out. Thanks again for your help. This was very helpful.\n<|/ c |>\n\
    <| c |>\nWhat would happen if it was a multibyte character? Would it still work?\
    \ If not, how can one get it to work?\n<|/ c |>\n<| a tags=php |>\nI came up with\
    \ a more simple solution by just swapping spaces for random characters, because\
    \ my solution does not need to care about word ordering (for example words like\
    \ \"the\", \"and\" etc. are still correct).\nSo I came up with the following:\n\
    <code>\n$words = array_filter(str_split($string, ' '), function($word) {\n   \
    \ return strlen($word) > 2;\n});\n\n$spaces = str_repeat('x', count($words));\n\
    \n$string = $spaces . implode($spaces,$words) . $spaces;\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis is clever, but it doesn't handle sentences with multiple blank\
    \ spaces (i.e. it breaks on \"I am\").\n<|/ c |>\n<| c |>\nYou are right, this\
    \ solution doesn't handle multiple spaces. So I came up with a second solution\
    \ which now doesn't need that feature\n<|/ c |>\n<| c |>\nJust a minor modification\
    \ - `implode` has a second parameter which allows you to specify a delimiter.\
    \ So you can change the first line to `$spaces = str_repeat('x', count($words));`\
    \ and then `return $words;`\n<|/ c |>\n<| c |>\nThanks, I changed it according\
    \ to your suggestion.\n<|/ c |>\n<| a tags=php dscore=3 |>\nThe solution provided\
    \ by will get you the right answer for the specific examples, but the problem\
    \ is that you will have trouble with the following:\n<code>\n$\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1129dov4.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    sort($words);\n    return implode(\" \", $words);\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1dhax8s.php:22\n\
    Stack trace:\n#0 /tmp/tmpj1dhax8s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj1dhax8s.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $newStr\
    \ = '';\n  foreach (str_split($s) as $char) {\n    $ord = ord($char);\n    if\
    \ ($ord < 256) {\n      $newStr .= chr($ord);\n    } else {\n      $newStr .=\
    \ anti_shuffle($char);\n    }\n  }\n  return $newStr;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcoxrez8.php:29\n\
    Stack trace:\n#0 /tmp/tmprcoxrez8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprcoxrez8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $shuffled_array\
    \ = [];\n  $i = 0;\n  foreach (str_split($s) as $letter) {\n    $shuffled_array[$i]\
    \ = $letter;\n    $i++;\n  }\n  return implode('', $shuffled_array);\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0f9w5v0u.php:27\n\
    Stack trace:\n#0 /tmp/tmp0f9w5v0u.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0f9w5v0u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(\" \", $s);\n  $str = array_shift($words);\n\n  $letters = str_split($str);\n\
    \  sort($letters);\n  sort($words);\n  $str = str_replace(array_shift($words),\
    \ \"\\0\", $str);\n  array_unshift($words, $str);\n  return implode(\" \", $words);\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgl44q9ow.php:28\n\
    Stack trace:\n#0 /tmp/tmpgl44q9ow.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgl44q9ow.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Write\
    \ your code here\n    $s = preg_replace(\"/(\\s)+/\", \" \", $s);\n    $s = preg_replace(\"\
    /(\\w+)/e\", \"strtoupper('\\\\1')\", $s);\n    \n    return implode(\" \", explode(\"\
    \ \", $s));\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| c |>\nthis one\
    \ also has problems when it comes to punctuation...like \"I'm doing great.\" returns\
    \ \"I M G E .\" instead of \"I M G E!!!\"\n<|/ c |>\n<| c |>\nUpdated the function\
    \ which removes punctuation and other symbols from the sentences.\n<|/ c |>\n\
    <| a |>\nYou can use the array_unique function. This will remove duplicates, for\
    \ example:\n<code>\n$arr = [\n    'anti', 'anti-shuffle', 'anti-shuffle', 'anti-shuffle',\n\
    \    'anti-shuffle', 'anti-shuffle', 'anti-shuffle'\n];\n\n$arr = array_unique($arr);\n\
    </code>\nIf you don't want to do that, you can create a simple function that does\
    \ the same thing, for example:\n<code>\n$arr = [\n    'anti', 'anti-shuffle',\
    \ 'anti-shuffle', 'anti-shuffle',\n    'anti-shuffle', 'anti-shuffle', 'anti-shuffle'\n\
    ];\n\n$arr = array_unique(array_map(function($item) {\n    return strtolower($item);\n\
    }, $arr));\n</code>\nThe array_map function will take a callback and apply it\
    \ to each item in a certain array. The callback is simply a function that returns\
    \ the lowercased version of the item, which will take care of the duplicates issue.\n\
    <|/ a tags=php,arrays dscore=1 |>\n<| c |>\narray_unique and array_map are both\
    \ good, but array_map has a different purpose. If you want to map a string to\
    \ another string, use the string map function http://php.net/manual/en/function.strmap.php\n\
    <|/ c |>\n<| c |>\nThanks for the correction, that link you provided is really\
    \ helpful.\n<|/ c |>\n<| c |>\nYes, I should have stated that I know that array_map\
    \ exists, but I wanted to show the difference between the two in a simple manner.\
    \ I also wanted to show an example of how the callback function could be used.\
    \ Either way works :)\n<|/ c |>\n<| c |>\nThe reason I didn't use array_map is\
    \ because array_map does not remove the duplicates but array_unique does. So I\
    \ wanted to give the OP an example where the result would be the same.\n<|/ c\
    \ |>\n<| a tags=php,arrays dscore=1 |>\nI \nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpip43fd7x.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $str = explode('\
    \ ', $s);\n  sort($str);\n  return implode(' ', $str);\n}\n\n$sentence = \"Hello\
    \ World!\";\n\necho \"Original sentence is $sentence\";\n$sentence = anti_shuffle($sentence);\n\
    echo \"After shuffle: $sentence\";\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Original sentence is Hello World!After shuffle: Hello World!\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpi5_z6ds8.php:28\nStack trace:\n\
    #0 /tmp/tmpi5_z6ds8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi5_z6ds8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  if (strlen($s)\
    \ < 2) {\n    return $s;\n  }\n  $sorted = str_split($s);\n  foreach ($sorted\
    \ as $key => $value) {\n    $new_key = array_search($value, $sorted);\n    if\
    \ ($new_key !== $key) {\n      unset($sorted[$key]);\n      $sorted[$new_key]\
    \ = $value;\n    }\n  }\n  return implode('', $sorted);\n}\n$testcases = array(\n\
    \    'Hi', // Hi\n    'hello', // ehllo\n    'Hello World!!!', // Hello !!!Wdlor\n\
    \    'Merry Christmas!!!', // Mrs yr chm afsd w!!!\n);\nforeach ($testcases as\
    \ $s) {\n  echo \"Anti-shuffle test case: $s\\n\";\n  $actual = anti_shuffle($s);\n\
    \  echo \"Expected: $actual\\n\";\n  echo \"Actual: \" . anti_shuffle($actual)\
    \ . \"\\n\";\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is great, but I dont\
    \ want to use any library functions. I dont know why but my code is not working\
    \ with the code I have above. I think my code has some problem somewhere. Will\
    \ look into it more. Thanks :)\n<|/ c |>\n<| c |>\nHi, your answer has some parts\
    \ which I was not able to understand and solve. Like why we are using $s twice?\
    \ and what does it mean by $str[$i] =~ $chars; and $str[$i] =~ /[[:alpha:]]/;\n\
    <|/ c |>\n<| c |>\n`=~` operator is a [regular expression](http://php.net/manual/en/regexp.reference.replace.php).\
    \ `[[:alpha:]]` is a character class which matches any letter in any case (uppercase\
    \ or lowercase). `$str[$i] =~ $chars` means if `$str[$i]` is equal to any of the\
    \ characters in `$chars`, then replace it with `$chars`.  `$str[$i] =~ /[[:alpha:]]/`\
    \ means if `$str[$i]` matches any of the letters in `[[:alpha:]]`, then replace\
    \ it with `$chars`.\n<|/ c |>\n<| c |>\nBTW, if you find my answer helpful, please\
    \ accept it, so that other people who see this question can see that my answer\
    \ works. And I'm glad that I was able to help you in some way.\n<|/ c |>\n<| a\
    \ tags=php,sorting,\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmwnd5t5u.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(\" \", $s);\n    foreach ($arr as $key => $val) {\n        $arr[$key]\
    \ = str_split($val);\n    }\n    foreach ($arr as $key => $val) {\n        sort($val);\n\
    \    }\n    return implode(\" \", $arr);\n}\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9esec5pj.php:26\n\
    Stack trace:\n#0 /tmp/tmp9esec5pj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9esec5pj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = preg_replace(\"\
    /\\s+/\", \"\", $s);\n  $words = explode(\" \", $s);\n  $sorted = array();\n \
    \ foreach ($words as $word) {\n    $sorted[] = preg_replace(\"/[^a-zA-Z0-9]+/\"\
    , \"\", $word);\n  }\n  sort($sorted);\n  return implode(\" \", $sorted);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fytqim2.php:28\n\
    Stack trace:\n#0 /tmp/tmp2fytqim2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2fytqim2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $l = strlen($s);\n\
    \  $t = $s;\n  $s = str_replace(\" \", \"\", $s);\n  for ($i = 0; $i < $l; $i++)\
    \ {\n    $n = ord($s[$i]);\n    for ($j = $i + 1; $j < $l; $j++) {\n      if (ord($s[$j])\
    \ < $n) {\n        $n = ord($s[$j]);\n      }\n    }\n    $t = substr($s, 0, $i).substr($s,\
    \ $j + 1).substr($t, 0, $i).$t;\n  }\n  return $t;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn1_gdra.php:31\n\
    Stack trace:\n#0 /tmp/tmpkn1_gdra.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkn1_gdra.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$words =\
    \ preg_split('/\\s+/', $s);\n\t$result = \"\";\n\tforeach ($words as $word) {\n\
    \t\t$ascii = ord($word);\n\t\t$result .= ($ascii <= 127) ? $word : $word;\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuarewvra.php:27\n\
    Stack trace:\n#0 /tmp/tmpuarewvra.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuarewvra.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return preg_replace_callback('/\\\
    w+/', function($words) {\n    return implode('', array_map(function($w) {\n  \
    \    return $w[0] . $w[1];\n    }, array_chunk(str_split($words[0]), 2)));\n \
    \ }, $s);\n}\necho anti_shuffle(\"Hello  World!!!\"); // returns 'Hello !!!Wdlor'\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello  World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps738d_mc.php:25\n\
    Stack trace:\n#0 /tmp/tmps738d_mc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps738d_mc.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    sort($words);\n    return implode(\" \", $words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zm2hp0u.php:23\n\
    Stack trace:\n#0 /tmp/tmp4zm2hp0u.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4zm2hp0u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $new_s\
    \ = '';\n    foreach(explode(\" \", $s) as $word) {\n        $new_s .= $word[0].$word[1];\n\
    \    }\n    return $new_s;\n}\n</code>\n<|/ a tags=php,random,function,string\
    \ dscore=1 |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbqslgqko.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Your\
    \ code goes here!\n    $s = preg_replace('/\\s/', '', $s);\n    $s = str_replace('\
    \ ', '', $s);\n    $s = implode('', array_map('chr', str_split($s)));\n    return\
    \ $s;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nNice solution. However it doesn't\
    \ work if you try it with `anti_shuffle('Hello World!!!') returns 'Hello World!!!'`\
    \ - it returns 'Hello World!!!' as is.\n<|/ c |>\n<| c |>\nThank you for pointing\
    \ that out, this was a fault on my part. I have edited my answer. Hope this solves\
    \ your problem now.\n<|/ c |>\n<| c |>\nI didn't notice that bug. I will remove\
    \ my comment :)\n<|/ c |>\n<| c |>\nYes, it works now. Thank you. I just had to\
    \ fix the line `$s = preg_replace('/\\s/', '', $s);` because it was missing a\
    \ slash.\n<|/ c |>\n<| a |>\nIf I'm reading your question correctly, you want\
    \ to be able to take a string, remove all non-alphabetic characters, and then\
    \ return every possible word ordering it in ascending alphabetic order. \nIn PHP,\
    \ I would use something like the following:\n<code>\n$string = \"aBcD!eFgH!ijkL!MnoP\"\
    ;\n$newString = array();\n$newString[] = $string;\n$newString[] = preg_replace('/[^A-Za-z]+/',\
    \ '', $string);\n$newString[] = preg_replace('/[^A-Za-z]+/', '', $string);\n$newString[]\
    \ = preg_replace('/[^A-Za-z]+/', '', $string);\n$newString[] = preg_replace('/[^A-Za-z]+/',\
    \ '', $string);\n$newString[] = preg_replace('/[^A-Za-z]+/', '', $string);\n$newString[]\
    \ = preg_replace('/[^A-Za-z]+/', '', $string);\n$newString[] = preg_replace('/[^A-Za-z]+/',\
    \ '', $string);\n$newString[] = preg_replace('/[^A-Za-z]+/', '', $string);\n$newString[]\
    \ = preg_replace('/[^A-Za-z]+/', '', $string);\n$newString[] = preg_replace('/[^A-Za-z]+/',\
    \ '', $string);\n$newString[] = preg_replace('/[^A-Za-z]+/', '', $string);\n$newString[]\
    \ = preg_\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpen7z96bx.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    if (empty($s))\
    \ {\n        exit('Invalid input. No input given.');\n    }\n    $s = strtolower($s);\n\
    \    $words = explode(' ', $s);\n    $words = array_map('ord', $words);\n    usort($words,\
    \ 'anti_shuffle_sort');\n    return implode(' ', $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'anti_shuffle_sort' not found or invalid function name in /tmp/tmpe0vjlsbo.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0vjlsbo.php:27\n\
    Stack trace:\n#0 /tmp/tmpe0vjlsbo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe0vjlsbo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $ns = '';\n  foreach ($arr as $i => $k) {\n    foreach (str_split($k)\
    \ as $j) {\n      $ns .= $j;\n    }\n    $ns .= ' ';\n  }\n  return trim($ns);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzh8_gqz.php:29\n\
    Stack trace:\n#0 /tmp/tmpkzh8_gqz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkzh8_gqz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  \n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl20qfsf0.php:20\n\
    Stack trace:\n#0 /tmp/tmpl20qfsf0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpl20qfsf0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $newStr\
    \ = \"\";\n    $l = strlen($s);\n    $words = preg_split('/\\s+/', $s);\n    $chars\
    \ = str_split($s);\n    foreach ($words as $key => $word) {\n        $newWord\
    \ = \"\";\n        $i = 1;\n        $charLen = strlen($word);\n        foreach\
    \ ($chars as $char) {\n            $ascii = ord($char);\n            $newChar\
    \ = chr($ascii + $i);\n            $newWord .= $newChar;\n            $i++;\n\
    \        }\n        $newStr .= $newWord . ' ';\n    }\n    return trim($newStr);\n\
    }\n$message = $anti_shuffle('Hi');\necho $message;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpbne75zyn.php:30\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpbne75zyn.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    foreach\
    \ (str_word_count($s, 1) as $i => $word) {\n        $chars = str_split($word);\n\
    \        sort($chars);\n        $chars = implode('', $chars);\n        $new_words[]\
    \ = $word;\n        $new_words[] = $chars;\n    }\n    return implode('', $new_words);\n\
    }\n</code>\n<|/ a tags=algorithm,shuffle,string,php dscore=3 |>\n<| c |>\nThis\
    \ is good but only works with English strings. What about Arabic, Japanese, and\
    \ many other languages?\n<|/ c |>\n<| c |>\nThanks for your comment.\n<|/ c |>\n\
    <| c |>\n: Yeah, I guess the OP has already answered the question.\n<|/ c |>\n\
    <| a tags=algorithm,shuffle,string,php |>\nTry this:\n<code>\n<?php \n/**\n* shuffle\
    \ a string with any characters\n* string $str\n* string\n*/\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph5b6g0ug.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(\" \", $s);\n  sort($words);\n  return implode(\" \", $words);\n}\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4506bj0r.php:22\n\
    Stack trace:\n#0 /tmp/tmp4506bj0r.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4506bj0r.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $r = [];\n\
    \  foreach (explode(\" \", $s) as $w) {\n    $r[] = str_split($w);\n  }\n  foreach\
    \ ($r as $wr) {\n    // sort by ascii value\n    usort($wr, function ($a, $b)\
    \ {\n      return strcmp(utf8_decode($a), utf8_decode($b));\n    });\n    // join\
    \ back together\n    $r[] = implode(\"\", array_map(function ($w) {\n      return\
    \ utf8_decode($w);\n    }, $wr));\n  }\n  return implode(\" \", $r);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5lkcarfz.php:34\n\
    Stack trace:\n#0 /tmp/tmp5lkcarfz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5lkcarfz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Write\
    \ code here\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxv_hea.php:22\n\
    Stack trace:\n#0 /tmp/tmppxxv_hea.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppxxv_hea.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  sort($words);\n  return join(' ', $words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_i6pdvu.php:23\n\
    Stack trace:\n#0 /tmp/tmpv_i6pdvu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv_i6pdvu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n   $newString\
    \ = array();\n   $words = explode(\" \",$s);\n   foreach($words as $word){\n \
    \     $letters = str_split($word);\n      sort($letters);\n      array_push($newString,implode($letters,\"\
    \"));\n   }\n   return trim(implode(\" \",$newString));\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return preg_replace_callback('~\\\
    s+~', function($matches) {\n    $chars = str_split($matches[0]);\n    $len = count($chars)\
    \ - 1;\n    return implode('', array_reverse($chars, $len));\n  }, $s);\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5bxhzlf.php:24\n\
    Stack trace:\n#0 /tmp/tmpj5bxhzlf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj5bxhzlf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $len =\
    \ strlen($s);\n    if ($len == 0) {\n        return $s;\n    }\n\n    $words =\
    \ explode(' ', $s);\n    $res = \"\";\n    for ($i = 0; $i < $len; $i++) {\n \
    \       $res .= $words[$i];\n        $j = $len - 1;\n        do {\n          \
    \  $i++;\n            $j--;\n            $res .= $words[$i];\n        } while\
    \ ($i < $len && $j >= 0);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24jv7ju1.php:37\n\
    Stack trace:\n#0 /tmp/tmp24jv7ju1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp24jv7ju1.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $chars =\
    \ str_split($s);\n  sort($chars);\n  return implode('', $chars);\n}\n\n$str =\
    \ \"Hello World!!!\"; // Write a program that will take a string as an input\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfce27jz7.php:27\n\
    Stack trace:\n#0 /tmp/tmpfce27jz7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfce27jz7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $words2 = $s;\n    $words_str = array();\n    foreach\
    \ ($words as $word) {\n        $word = str_split($word);\n        sort($word);\n\
    \        $words_str = array_merge($words_str, $word);\n    }\n    $s = implode('\
    \ ', $words_str);\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnzfurkr1.php:29\n\
    Stack trace:\n#0 /tmp/tmpnzfurkr1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnzfurkr1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $words = array_map('ord', array_filter($words));\n\
    \    return implode(' ', array_map('chr', $words));\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkakhxa4e.php:22\n\
    Stack trace:\n#0 /tmp/tmpkakhxa4e.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkakhxa4e.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ preg_replace('/\\s+/', ' ', $s);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtdcnbxg.php:21\n\
    Stack trace:\n#0 /tmp/tmpvtdcnbxg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvtdcnbxg.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $sorted = array();\n  $sorted_keys = array();\n  for ($i\
    \ = 0; $i < count($words); $i++) {\n    $sorted[$i] = strtr(\n      $words[$i],\n\
    \      array_flip(array_merge(range('A', 'Z'), range('a', 'z'))),\n      array_flip(array_merge(range('a',\
    \ 'z'), range('A', 'Z'))),\n    );\n    $sorted_keys[$i] = $sorted[$i];\n  }\n\
    \  $result = implode(' ', $sorted);\n  for ($i = 0; $i < count($words); $i++)\
    \ {\n    $result = str_replace($sorted_keys[$i], $words[$i], $result);\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: strtr() expects parameter 3 to be string, array given in /tmp/tmpjnl1w5ia.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnl1w5ia.php:34\n\
    Stack trace:\n#0 /tmp/tmpjnl1w5ia.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpjnl1w5ia.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as &$w) {\n        $w = strtolower($w);\n\
    \    }\n    array_walk($words, function(&$w) {\n        $w = preg_replace('/[^a-z]/',\
    \ '', $w);\n    });\n    sort($words);\n    return implode(' ', $words);\n}\n\
    </code>\n<|/ a tags=string,php,shuffle dscore=2 |>\n<| c |>\nHow would I use this\
    \ to return each character in a random order?\n<|/ c |>\n<| c |>\nThis has one\
    \ flaw - it does not consider case insensitivity and does not consider punctuation\
    \ - it's also not case sensitive - it also does not consider a double space as\
    \ a single space.\n<|/ c |>\n<| a tags=string,php,shuffle dscore=1 |>\nA solution\
    \ using str_split and array_slice:\n<code>\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcgl_44za.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as &$word) {\n        $word = str_replace(' ', '',\
    \ $word);\n    }\n    sort($s);\n    return implode(' ', $s);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\nA simple PHP solution using preg_replace_callback:\n\
    <code>\n$str = 'Hello World!!!';\n$res = preg_replace_callback('/(\\w+)/', function($matches)\
    \ {\n  return preg_replace('/\\W/', '', $matches[1]);\n}, $str);\necho $res;\n\
    </code>\nThis regular expression matches any word with one or more characters\
    \ and then replaces each word with an empty string using the regular expression\
    \ \\W (which means: non-word character).\n<|/ a tags=php,shuffle,explode |>\n\
    <| c |>\nThis solution is much more elegant than my solution. Thanks for this.\n\
    <|/ c |>\n<| c |>\nYou're welcome. I agree that this solution is much cleaner\
    \ than my own.\n<|/ c |>\n<| a |>\nI wrote a function that replaces the non-alphanumeric\
    \ character with empty string then shuffles the array. \n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8hce2d_q.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = str_replace(\"\
    \ \", \"\", $s);\n    $s = str_replace(\"  \", \" \", $s);\n    $words = explode(\"\
    \ \", $s);\n    $n = count($words) - 1;\n    for($i = 0; $i <= $n; $i++) {\n \
    \       $key = rand(0, $n);\n        $words[$i] = $words[$key];\n        $words[$key]\
    \ = \"\";\n    }\n    return implode(\" \", $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_dmo1tl.php:29\n\
    Stack trace:\n#0 /tmp/tmpw_dmo1tl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw_dmo1tl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $a = array();\n\
    \  $words = explode(\" \",$s);\n  foreach($words as $w) {\n    $a[] = chr( ord($w[0])\
    \ - 97 );\n  }\n  return implode(\"\",$a);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq__syp_l.php:25\n\
    Stack trace:\n#0 /tmp/tmpq__syp_l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq__syp_l.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $word_count\
    \ = str_word_count($s);\n    for ($i = 0; $i < $word_count; $i++) {\n        $new_word\
    \ = '';\n        for ($j = 0; $j < $i; $j++) {\n            $new_word .= $s[$j];\n\
    \        }\n        $new_word .= $s[$i];\n        $s = str_replace($s[$i], $new_word,\
    \ $s);\n    }\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmg4tyf5k.php:30\n\
    Stack trace:\n#0 /tmp/tmpmg4tyf5k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmg4tyf5k.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $chars = array_count_values($words);\n    $ordered_chars\
    \ = array();\n    $ordered_word = '';\n    foreach ($chars as $char => $count)\
    \ {\n        $ordered_chars[] = $char;\n        if ($count == 1) {\n         \
    \   $ordered_word .= $char;\n        } else {\n            $ordered_word .= $char;\n\
    \        }\n    }\n    return implode('', $ordered_chars);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporie0rko.php:33\n\
    Stack trace:\n#0 /tmp/tmporie0rko.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporie0rko.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return str_ireplace(\"\
    \ \", \"\", $s);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tfw9x1v.php:20\n\
    Stack trace:\n#0 /tmp/tmp_tfw9x1v.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_tfw9x1v.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $len =\
    \ strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        $j = rand($i + 1,\
    \ $len);\n        $tmp = $s[$i];\n        $s[$i] = $s[$j];\n        $s[$j] = $tmp;\n\
    \    }\n    return implode(\" \", $s);\n}\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Cannot assign an empty string to a string offset in /tmp/tmpylmosb1m.php\
    \ on line 16\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpylmosb1m.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylmosb1m.php:26\n\
    Stack trace:\n#0 /tmp/tmpylmosb1m.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpylmosb1m.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    \n   \
    \ $arr=explode(\" \", $s);\n    \n    foreach ($arr as $key => $value){\n    \
    \   if($value!=\" \") $arr[$key]=strtolower($value);\n    }\n    \n    return\
    \ implode(\" \", $arr);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdubjevyy.php:26\n\
    Stack trace:\n#0 /tmp/tmpdubjevyy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdubjevyy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return preg_replace('/([a-z])([A-Z])/',\
    \ '$2$1n',$s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8bvrvfq.php:21\n\
    Stack trace:\n#0 /tmp/tmpu8bvrvfq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu8bvrvfq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return implode(' ', $words);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpi4tb1v.php:23\n\
    Stack trace:\n#0 /tmp/tmprpi4tb1v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprpi4tb1v.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return implode(' ', $words);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzsqk5jf.php:23\n\
    Stack trace:\n#0 /tmp/tmpqzsqk5jf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqzsqk5jf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = preg_replace(\"\
    /[^ \\t]+/\", \"\", $s); // remove all non-letters and spaces\n  $l = strlen($s);\n\
    \  $result = '';\n  for ($i = 0; $i < $l; $i++) {\n    $result .= preg_replace(\"\
    /[a-zA-Z]+/\", \"_\", $s[$i]) . ' ';\n  }\n  $result = rtrim($result, \" \");\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk3vt_g7.php:26\n\
    Stack trace:\n#0 /tmp/tmpbk3vt_g7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbk3vt_g7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Your\
    \ code here\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw6chjy1a.php:22\n\
    Stack trace:\n#0 /tmp/tmpw6chjy1a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpw6chjy1a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    if ($s\
    \ == '') return '';\n    $words = explode(' ', $s);\n    sort($words);\n    return\
    \ implode(' ', $words);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp343dnksh.php:23\n\
    Stack trace:\n#0 /tmp/tmp343dnksh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp343dnksh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    \n    $result = '';\n    foreach ($words as $word)\
    \ {\n        $result .= $word;\n        $chars = str_split($word);\n        sort($chars);\n\
    \        $result .= implode('', $chars);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63f6mrkk.php:29\n\
    Stack trace:\n#0 /tmp/tmp63f6mrkk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp63f6mrkk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // code\
    \ here\n    $words = explode(\" \", $s);\n    $sortedWords = array();\n    $i\
    \ = 0;\n    foreach ($words as $w) {\n        $sortedWords[$i] = $w;\n       \
    \ $i++;\n    }\n    $s = \"\";\n    foreach ($sortedWords as $word) {\n      \
    \  $s = $word.\" \".$s;\n    }\n    return $s;\n}\n$text = \"hi\";\n$text = anti_shuffle($text);\n\
    echo $text;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "hi \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66jqqjlv.php:34\n\
    Stack trace:\n#0 /tmp/tmp66jqqjlv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp66jqqjlv.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $sorted = array();\n    foreach($words as $word) {\n\
    \        $sorted_word = preg_replace_callback('/[a-z]/i', function($matches) {\n\
    \            return chr((ord($matches[0]) - ord('a') + 26) % 26 + ord('a') + 1);\n\
    \        }, $word);\n        $sorted[] = $sorted_word;\n    }\n    return implode('\
    \ ', $sorted);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz0iat1e.php:28\n\
    Stack trace:\n#0 /tmp/tmpsz0iat1e.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsz0iat1e.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ implode(\n        array_merge(\n            array_map(\n                'str_rot13',\n\
    \                explode(\n                    ' ',\n                    $s,\n\
    \                    -1\n                )\n            ),\n            array_map(\n\
    \                'str_rot13',\n                explode(\n                    '\
    \ ',\n                    $s,\n                    0\n                )\n    \
    \        )\n        ),\n        ' '\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wi36w4w.php:40\n\
    Stack trace:\n#0 /tmp/tmp6wi36w4w.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6wi36w4w.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_word = '';\n    $prev_char = '';\n    foreach\
    \ ($words as $word) {\n        $new_word .= $word;\n        $new_char = '';\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            $new_char .= $prev_char.chr(ord($word[$i]);\n\
    \            $prev_char = $word[$i];\n        }\n    }\n    return $new_word;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl316z067.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode(\"\
    \ \", $s);\n    $l = count($s);\n    $i = 0;\n    $res = \"\";\n    while ($i\
    \ < $l) {\n        $res = $res . $s[$i];\n        $i++;\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfneloaju.php:29\n\
    Stack trace:\n#0 /tmp/tmpfneloaju.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfneloaju.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Write\
    \ your code here.\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnfykm3n.php:22\n\
    Stack trace:\n#0 /tmp/tmpmnfykm3n.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmnfykm3n.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    sort($words);\n    $s = implode(\" \", $words);\n\
    \    return $s;\n}\n</code>\n<|/ a |>\n<| c |>\nI like the idea of \"shuffle\"\
    \ words. However, I suggest that \"shuffle\" words is an example of a poor algorithm\
    \ for this task, because it's very inefficient. You're doing `n` linear searches\
    \ to find the first and last occurrences of `\" \"` and then you do `n` linear\
    \ searches to find the second and third occurrences of `\" \"`. That's `O(n2)`.\
    \ You could do it in `O(n)` with a bit more work; I'll post an answer shortly.\n\
    <|/ c |>\n<| c |>\nI used \"shuffle\" words as a good example of a non-naive string\
    \ shuffling algorithm. But you're right, this is more of a *poor* algorithm.\n\
    <|/ c |>\n<| c |>\nWhat is the advantage of using \"shuffle\" words instead of\
    \ just \"str_replace\"? The algorithm you posted does work, just as well.\n<|/\
    \ c |>\n<| c |>\nThe advantage is that you avoid sorting all your words. It's\
    \ a good algorithm that can process words in parallel, but it's a bit of a waste\
    \ of resources to re-sort all your words. You get the same result with your algorithm\
    \ and mine if you replace the `sort($words)` line with `shuffle($words)`, but\
    \ I posted my solution because it was more readable. :)\n<|/ c |>\n<| c |>\nSo\
    \ you're saying that my solution is faster, but is also less efficient? I guess\
    \ I should have tried my solution on a large corpus to see how it performed.\n\
    <|/ c |>\n<| a tags=php,string,arrays dscore=0 |>\nOne possible way is:\n<code>\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpms2sdhh_.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  return implode('', array_map(function($word) use ($words)\
    \ {\n    return $words[array_search($word, array_flip($words))];\n  }, $words));\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph94mpqlu.php:22\n\
    Stack trace:\n#0 /tmp/tmph94mpqlu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmph94mpqlu.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $str =\
    \ \"\";\n    $words = explode(\" \", $s);\n    sort($words);\n    foreach ($words\
    \ as $w) {\n        $str .= $w;\n    }\n    return $str;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwn9ht7v.php:26\n\
    Stack trace:\n#0 /tmp/tmphwn9ht7v.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphwn9ht7v.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // code\
    \ here\n  return $s;\n}\n\necho anti_shuffle('Anti-Shuffle is funny and it does\
    \ really cool stuff');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Anti-Shuffle is funny and it does really cool stuff\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmph9jylwr3.php:23\nStack trace:\n#0 /tmp/tmph9jylwr3.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph9jylwr3.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $letters\
    \ = array();\n  $words = explode(' ',$s);\n  foreach($words as $w){\n    foreach(str_split($w)\
    \ as $c){\n      $letters[$c] = $c;\n    }\n  }\n  sort($letters);\n  $s = array();\n\
    \  foreach($letters as $letter){\n    array_push($s, $letter);\n  }\n  return\
    \ implode(' ',$s);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt984w9r1.php:31\n\
    Stack trace:\n#0 /tmp/tmpt984w9r1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt984w9r1.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // your\
    \ code here\n  $arr = explode(\" \", $s);\n  $arr = array_map(function($i) {\n\
    \    return strtoupper($i);\n  }, $arr);\n  return implode(\" \", $arr);\n}\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq80gbc6.php:24\n\
    Stack trace:\n#0 /tmp/tmpeq80gbc6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpeq80gbc6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as &$word) {\n        $word = \"\"\
    ;\n        foreach (str_split($word) as $character) {\n            $ord = ord($character);\n\
    \            $word[$character] = ($ord < 128 ? $ord : $ord - 256);\n        }\n\
    \    }\n    return implode(\" \", $words);\n}\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Illegal string offset '' in /tmp/tmpkigdejle.php on line 17\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkigdejle.php:27\nStack\
    \ trace:\n#0 /tmp/tmpkigdejle.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkigdejle.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = array();\n    foreach ($words as $word)\
    \ {\n        $new_words[] = $word;\n        $new_words[] = str_shuffle($word);\n\
    \    }\n    return implode(' ', $new_words);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbq_oz955.php:25\n\
    Stack trace:\n#0 /tmp/tmpbq_oz955.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbq_oz955.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n   $new_string\
    \ = '';\n   $split = preg_split('/\\s+/', $s);\n   foreach ($split as $k => $v)\
    \ {\n      $char = substr($v, 0, 1);\n      $new_string .= $char.substr($v, 1);\n\
    \   }\n   return $new_string;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04qqw7k0.php:26\n\
    Stack trace:\n#0 /tmp/tmp04qqw7k0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp04qqw7k0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $l = strlen($s);\n\
    \    $words = explode(' ', $s);\n    sort($words);\n    $new = implode('', $words);\n\
    \    return $new;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxw1lzofo.php:24\n\
    Stack trace:\n#0 /tmp/tmpxw1lzofo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxw1lzofo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = str_replace('\
    \ ', '', $s);\n    return implode('', array_map(function($w) { return chr((ord($w)\
    \ - ord('a')) + 26);}, explode(' ', $s)));\n}\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen4lafsf.php:20\n\
    Stack trace:\n#0 /tmp/tmpen4lafsf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpen4lafsf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $r = [];\n\
    \    foreach(str_word_count($s, 1) as $i => $w) {\n        foreach (str_split($w,\
    \ 1) as $j => $w2) {\n            $r[$i][$j] = $w2;\n        }\n    }\n    $s\
    \ = implode('', $r);\n    return $s;\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvszkrcge.php:27\n\
    Stack trace:\n#0 /tmp/tmpvszkrcge.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvszkrcge.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $newString\
    \ = $s;\n    // Split words by blank spaces and store the array\n    $wordArr\
    \ = explode(' ', $s);\n    // Sort word array in ascending order\n    sort($wordArr);\n\
    \    // Iterate through word array and replace words with new one\n    foreach\
    \ ($wordArr as $key => $value) {\n        // If last letter of a word is same\
    \ as first letter of the next word\n        if ($key + 1 < count($wordArr) &&\
    \ $wordArr[$key + 1] == $value) {\n            // Set new letter as first letter\
    \ of next word\n            $newString .= $value;\n            // Remove next\
    \ word from array\n            array_shift($wordArr);\n            // Sort word\
    \ array in ascending order\n            sort($wordArr);\n        }\n    }\n  \
    \  return $newString;\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,php-7 |>\n\
    The below solution worked for me:\n<code>\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptf6x0m5u.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $chars =\
    \ str_split($s);\n  sort($chars);\n  return implode('', $chars);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pjvw38m.php:26\n\
    Stack trace:\n#0 /tmp/tmp9pjvw38m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9pjvw38m.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // write\
    \ code here\n    $arr=explode(' ',$s);\n    for($i=0;$i<count($arr);$i++){\n \
    \       $x=ord($arr[$i]);\n        $arr[$i]=chr($x+97);\n    }\n    $s=implode('\
    \ ',$arr);\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqsshmwl.php:27\n\
    Stack trace:\n#0 /tmp/tmpwqsshmwl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwqsshmwl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $ord = ord($word);\n        if ($ord >= 33) {\n            $ord = 32 +\
    \ ($ord - 33);\n        }\n        if ($ord >= 97) {\n            $ord = ord($word)\
    \ - 32;\n        }\n        if ($ord >= 122) {\n            $ord = ord($word)\
    \ - 96 + ($ord - 122);\n        }\n        $result .= chr($ord);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cqie9qi.php:35\n\
    Stack trace:\n#0 /tmp/tmp5cqie9qi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5cqie9qi.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = preg_split('/\\s+/', $s);\n    $word_count  = count($words);\n    $word_letters\
    \ = count($words[0]);\n    for ($i = 1;$i<$word_count;$i++) {\n        $chars\
    \ = [];\n        for ($j = 0;$j<$word_letters;$j++) {\n            $chars[] =\
    \ $words[$i][$j];\n        }\n        asort($chars);\n        for ($j = 0;$j<$word_letters;$j++)\
    \ {\n            $words[$i][] = $chars[$j];\n        }\n    }\n    $new_words\
    \ = \"\";\n    for ($i = 0;$i<$word_count;$i++) {\n        $new_words .= implode(\"\
    \ \", $words[$i]);\n    }\n    return $new_words;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nI used this method to solve a variety of problems (and my question was about\
    \ a similar problem to yours).  It worked great.  I'm surprised it didn't get\
    \ more upvotes because it's a solution to a different problem, yet it solved the\
    \ problem.\n<|/ c |>\n<| a tags=php |>\nYou can use array_chunk() to split string\
    \ into arrays with one word and then sort them\n<code>\n$string = 'Antiguay artificial\
    \ intelligence Hi how are you? Hi how are you? Hi how are you?';\n$words = explode('\
    \ ', $string);\n$sorted = array_chunk($words, 1);\nusort($sorted, function($a,\
    \ $b){\n    return strcmp($a[1], $b[1]);\n});\nprint_r($sorted);\n</code>\nThe\
    \ output:\n<code>\nArray\n(\n    [0] => Array\n        (\n            [0] => Hi\
    \ how are you?\n        )\n\n    [1] => Array\n        (\n            [0] => Hi\
    \ how are you?\n        )\n\n    [2] => Array\n        (\n            [0] => Hi\
    \ how are you?\n        )\n\n)\n</code>\n<|/ a dscore=0 |>\n<| a tags=php dscore=0\
    \ |>\nTry this out\n<code>\n$str = \"Antiguay artificial intelligence Hi how are\
    \ you? Hi how are you? Hi how are you?\";\n$arr = explode(\" \", $str);\nforeach($arr\
    \ as $key => $value) {\n    $arr[$key] = explode(\" \", $value);\n}\n\nforeach($arr\
    \ as $key => $value) {\n    foreach($value as $k \nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyeiyemz1.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // your\
    \ code here\n    return $s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwwm99l.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwwm99l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9zwwm99l.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // Write\
    \ your code here\n  $s = preg_replace('/\\s+/', '', $s);\n  $s = preg_replace('/\\\
    W+/', '', $s);\n  return $s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5sa7p1p.php:23\n\
    Stack trace:\n#0 /tmp/tmpt5sa7p1p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt5sa7p1p.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $char_list\
    \ = str_split($s);\n    $shuffled_char_list = array();\n    for($i=0;$i<count($char_list);$i++){\n\
    \        $char = substr($char_list[$i], 0, 1);\n        $shuffled_char_list[$i]\
    \ = $char;\n    }\n    $s = implode(\" \",$shuffled_char_list);\n    return $s;\n\
    }\n</code>\n<|/ a tags=random,string,php |>\n<| a tags=random,string,php |>\n\
    To avoid duplicates, you can use this code:\n<code>\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb8d2cpl3.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = preg_replace('/\\\
    s(?=\\s)/', ' ', preg_replace('/\\s(?!\\s)/', '', $s));\n    $words = explode('\
    \ ', $s);\n    sort($words);\n    $s = join(' ', array_filter($words));\n    return\
    \ $s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6j6hp6vz.php:24\n\
    Stack trace:\n#0 /tmp/tmp6j6hp6vz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6j6hp6vz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Your\
    \ code here\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzrrw7e7.php:22\n\
    Stack trace:\n#0 /tmp/tmptzrrw7e7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptzrrw7e7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // YOUR\
    \ CODE HERE\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzi2pp_g_.php:20\n\
    Stack trace:\n#0 /tmp/tmpzi2pp_g_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpzi2pp_g_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $chars = array_map(\"ord\", array_map(\"chr\", $words));\n\
    \    $chars = array_merge($chars, array_keys($chars));\n    $chars = array_flip($chars);\n\
    \    return implode(array_fill(0, count($words) - 1, array_keys($chars)), \" \"\
    );\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: chr() expects parameter 1 to be int, string given in /tmp/tmplrs6hf33.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplrs6hf33.php:24\n\
    Stack trace:\n#0 /tmp/tmplrs6hf33.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplrs6hf33.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $result\
    \ = \"\";\n  $words = explode(\" \", $s);\n  foreach ($words as $word) {\n   \
    \ $str = \"\";\n    for ($i = 0; $i < strlen($word); $i++) {\n      $str .= substr($word,\
    \ $i, 1);\n    }\n    $result .= substr($str, 0, 1);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_mjvest.php:29\n\
    Stack trace:\n#0 /tmp/tmpx_mjvest.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx_mjvest.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // Write\
    \ your code here\n  return $s;\n}\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04pgf5ns.php:21\n\
    Stack trace:\n#0 /tmp/tmp04pgf5ns.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp04pgf5ns.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Write\
    \ your code here\n    // Example: anti_shuffle('Hi') returns 'Hi'\n    // Example:\
    \ anti_shuffle('hello') returns 'ehllo'\n    // Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    $s = preg_replace('/(\\s)+/', '\\0', $s);\n  \
    \  $words = explode(' ', $s);\n    $sort = array();\n    $i = 0;\n    foreach\
    \ ($words as $w) {\n        $sort[$i] = $w;\n        $i++;\n    }\n    $sort[$i]\
    \ = NULL;\n    sort($sort);\n    $str = str_replace(\"\\0\", \" \", implode('\
    \ ', $sort));\n    return $str;\n}\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2pwul62.php:34\n\
    Stack trace:\n#0 /tmp/tmpo2pwul62.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpo2pwul62.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = str_replace('\
    \ ', ' ', $s);\n    $words = explode(' ', $s);\n    $new_s = \"\";\n    foreach\
    \ ($words as $key => $value) {\n        $new_s .= $value;\n        if (isset($words[$key\
    \ - 1])) {\n            $new_s .= ' ';\n        }\n    }\n    return $new_s;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjr7kb1w.php:30\n\
    Stack trace:\n#0 /tmp/tmprjr7kb1w.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprjr7kb1w.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = '';\n\n  foreach ($words as $word) {\n    //\
    \ We use the ord() function to return the ASCII value of\n    // each character.\n\
    \    $ord = ord($word);\n\n    // We use the modulus operator to check if we still\
    \ have room left\n    // for the next character. If not, we use the ord() function\
    \ to make\n    // sure the new character is a space.\n    if (strlen($result)\
    \ < strlen($word) + 1) {\n      $result .= chr($ord == 32 ? ' ' : $ord);\n   \
    \ }\n  }\n\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3mbpqb5z.php:36\n\
    Stack trace:\n#0 /tmp/tmp3mbpqb5z.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3mbpqb5z.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  sort($words);\n  $s = join(' ', $words);\n  return $s;\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp584svk2y.php:23\n\
    Stack trace:\n#0 /tmp/tmp584svk2y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp584svk2y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = str_replace(\"\
    \ \", \"\", $s);\n  $words = explode(\" \", $s);\n  sort($words);\n  $s = implode(\"\
    \ \", $words);\n  return $s;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgpdaur17.php:25\n\
    Stack trace:\n#0 /tmp/tmpgpdaur17.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgpdaur17.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return preg_replace_callback('/\\\
    B(\\w)/', function ($m) {\n    return strrev($m[0]);\n  }, $s);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndkznzgr.php:23\n\
    Stack trace:\n#0 /tmp/tmpndkznzgr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpndkznzgr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Your\
    \ code here...\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhjeqbyv.php:22\n\
    Stack trace:\n#0 /tmp/tmpbhjeqbyv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbhjeqbyv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $words = array_unique($words);\n    $words = array_map(function($w)\
    \ { return strtr($w, array('!' => '', '?' => ''));}, $words);\n    $words = array_flip($words);\n\
    \    $words = array_map(function($w) { return chr($words[$w]);}, $words);\n  \
    \  return implode('', $words);\n}\n</code>\n<|/ a dscore=1 tags=php,string |>\n\
    <| a tags=php,string |>\nYou might consider using a regex, but that's not what\
    \ you asked. The question asked for a function to reverse a string in-place. This\
    \ is not possible in PHP (short of writing some crazy horrible functions). Strings\
    \ cannot be changed in place. You can either make a new string with the new values,\
    \ or return a new string and change its value.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nA simple solution with no loops or regular expressions:\n<code>\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7qvlbwzx.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return preg_replace_callback('/(\\\
    w+)/', function($m) {\n    $a = array_merge(range('A','Z'), range('a','z'));\n\
    \    return implode(array_slice($a,array_search($m[0],$a),1));\n  }, $s);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylxfi506.php:23\n\
    Stack trace:\n#0 /tmp/tmpylxfi506.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpylxfi506.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    // Sort the array by ASCII value\n    sort($words);\n\
    \    // Rearrange the characters of each word\n    $words = array_map(function\
    \ ($word) {\n        return implode('', array_map(function ($char) {\n       \
    \     return $char;\n        }, str_split($word)));\n    }, $words);\n    // Return\
    \ the string\n    return implode(' ', $words);\n}\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nVery interesting idea. One note: this does not handle words that are\
    \ single letters (like 'a', or 'A'). I wonder if there is a way to fix that...\n\
    <|/ c |>\n<| c |>\nI updated my answer to include an option for single letters.\n\
    <|/ c |>\n<| c |>\nFor a more compact version without the function wrapper: ```$result\
    \ = preg_replace('/\\s+/', ' ', preg_replace('/([^\\s])([A-Z])/', '$2 $1', $string));```\n\
    <|/ c |>\n<| a tags=algorithm,php |>\nYou could try this simple method which I've\
    \ used to do this\n<code>\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_dwadkj0.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $ordered = array();\n    foreach($words as $word) {\n\
    \        $ordered[$word] = $word;\n    }\n    arsort($ordered);\n    $words =\
    \ array();\n    foreach($ordered as $word => $i) {\n        $words[] = $word;\n\
    \    }\n    return implode(' ', $words);\n}\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpx5y8m9.php:30\n\
    Stack trace:\n#0 /tmp/tmpxpx5y8m9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxpx5y8m9.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $str =\
    \ '';\n    $l = strlen($s);\n    for ($i = 0; $i < $l; $i++) {\n        $str .=\
    \ $s[$i];\n    }\n    $str = str_replace(' ', '', $str);\n    $str = str_replace('\
    \ ', '!', $str);\n    $str = str_replace(' ', 'e', $str);\n    $str = str_replace('\
    \ ', 'h', $str);\n    $str = str_replace(' ', 'w', $str);\n    $str = str_replace('\
    \ ', 'd', $str);\n    $str = str_replace(' ', 'r', $str);\n    $str = str_replace('\
    \ ', 'o', $str);\n    $str = str_replace(' ', 'n', $str);\n    $str = str_replace('\
    \ ', 'a', $str);\n    $str = str_replace(' ', '!', $str);\n    return $str;\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6n67ggd.php:36\n\
    Stack trace:\n#0 /tmp/tmpa6n67ggd.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpa6n67ggd.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjndabeyl.php:20\n\
    Stack trace:\n#0 /tmp/tmpjndabeyl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjndabeyl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ preg_replace('/\\s/', '', preg_replace('/[^a-zA-Z ]', '', $s));\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): No ending delimiter '/' found in /tmp/tmpxogxk3o1.php\
    \ on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxogxk3o1.php:20\n\
    Stack trace:\n#0 /tmp/tmpxogxk3o1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxogxk3o1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // your\
    \ code here\n  $return_string = \"\";\n  $words = explode(\" \", $s);\n  $i =\
    \ 0;\n  $j = 0;\n  $jMax = count($words);\n\n  while (isset($words[$i])) { //\
    \ while there is a word\n    if ($words[$i] != \"\") { // if there is a characther\n\
    \      $char_array = str_split($words[$i]); // split the char array of the word\n\
    \      $char_rearranged = \"\"; // rearrange the char array in ascending order\n\
    \      foreach ($char_array as $char) {\n        $char_rearranged .= chr($char_array[$j]);\
    \ // concatenate the char\n        if ($char_array[$j] == ord($char_array[$j]))\
    \ { // if the char is the same as the last char\n          $char_rearranged .=\
    \ chr(ord($char_array[$j]) - 1);\n          $j++;\n        } else {\n        \
    \  $char_rearranged .= chr(ord($char_array[$j]));\n          $j++;\n        }\n\
    \      }\n\n      $return_string .= $char_rearranged; // put the rearranged char\
    \ back into the string\n      $i++;\n    } else {\n      $return_string .= $words[$i];\
    \ // else just use the word and move on to the next word\n    }\n  }\n\n  return\
    \ $return_string;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: chr() expects parameter 1 to be int, string given in /tmp/tmpzmbrddy4.php\
    \ on line 24\n\nWarning: chr() expects parameter 1 to be int, string given in\
    \ /tmp/tmpzmbrddy4.php on line 24\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzmbrddy4.php:48\nStack trace:\n#0 /tmp/tmpzmbrddy4.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzmbrddy4.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $words[0] = strrev($words[0]);\n    return implode('\
    \ ', array_map(function($word) use ($words) {\n        $words[] = strrev($word);\n\
    \        return implode(' ', $words);\n    }, $words));\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cye886n.php:24\n\
    Stack trace:\n#0 /tmp/tmp3cye886n.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3cye886n.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $sentences\
    \ = explode(\" \", $s);\n    sort($sentences);\n    return trim(implode(\" \"\
    , $sentences));\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8exqa5t3.php:22\n\
    Stack trace:\n#0 /tmp/tmp8exqa5t3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8exqa5t3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return anti_shuffle($s,\
    \ true);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  return implode(' ', array_map(function ($i) {\n    $l =\
    \ mb_strlen($i);\n    return mb_strtoupper(mb_substr($i, 0, $l / 2));\n  }, $words));\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpk_g44t14.php:14\nStack trace:\n#0 [internal function]: {closure}('Hi')\n\
    #1 /tmp/tmpk_g44t14.php(16): array_map(Object(Closure), Array)\n#2 /tmp/tmpk_g44t14.php(20):\
    \ anti_shuffle('Hi')\n#3 /tmp/tmpk_g44t14.php(24): candidate('Hi')\n#4 /tmp/tmpk_g44t14.php(33):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmpk_g44t14.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    sort($words);\n    return implode(' ', $words);\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nHere is my solution:\n<code>\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_37ks1gr.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_word = '';\n    $word_length = count($words);\n\
    \    \n    for ($i = 0; $i < $word_length; $i++) {\n        $new_word .= $words[$i];\n\
    \        $temp_str = $new_word;\n        $word_length--;\n        \n        for\
    \ ($j = $word_length; $j >= 0; $j--) {\n            $temp_str = substr($temp_str,\
    \ 0, 1) . substr($temp_str, 1);\n        }\n        \n        $new_word = $temp_str;\n\
    \    }\n    \n    return $new_word;\n}\n\nfunction candidate(...$args) {\n   \
    \ return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9x6j4crz.php:37\n\
    Stack trace:\n#0 /tmp/tmp9x6j4crz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9x6j4crz.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
