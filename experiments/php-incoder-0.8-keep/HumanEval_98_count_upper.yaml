name: HumanEval_98_count_upper
language: php
prompt: "<?php\n// Given a string s, count the number of uppercase vowels in even\
  \ indices.\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg')\
  \ returns 0\n// count_upper('dBBE') returns 0\nfunction count_upper($s) {\n"
tests: "function candidate(...$args) {\n    return count_upper(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"aBCdEf\") !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"abcdefg\") !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"dBBE\") !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"B\") !== 0) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"U\") !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"EEEE\") !== 2) { throw new Exception(\"Test failed!\"); }\n\
  }\n\ntest();"
completions: ["    $count = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n   \
    \     $count += strcasecmp(substr($s, $i, 2), substr($s, $i + 1, 2));\n    }\n\
    \    return $count;\n}\n", "  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++)\n\
    \    if ($s[$i] >= 'a' && $s[$i] <= 'z')\n      $count += ($s[$i] <= 'z' ? 1 :\
    \ -1);\n  return $count;\n}", "\t$upper = 0;\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++)\n\t\tif (strtoupper($s[$i]) === $s[$i])\n\t\t\t$upper++;\n\treturn $upper;\n\
    }\n", "  // Keep an array; we can't use $count['a']++ because $count is referenced\
    \ by reference.\n  $count = array();\n  for ($i = 0; $i < strlen($s); $i++) {\n\
    \    $char = strtoupper($s[$i]);\n    $count[$char]++;\n  }\n  return $count;\n\
    }\n", "    $len = strlen($s);\n    $upper = 0;\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (preg_match('/[A-Z]/', $s[$i], $matches) && $i % 2 == 0) {\n \
    \           $upper += 1;\n        }\n    }\n    return $upper;\n}\n", "    $counter\
    \ = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i += 2) {\n     \
    \   if ($s[$i] === 'a' && $s[$i+1] === 'e') {\n            $counter++;\n     \
    \   }\n    }\n    return $counter;\n}\n", "    $count = 0;\n    for ($i = 0; $i\
    \ < strlen($s); ++$i) {\n        $count += strpos($s, 'A', $i) + strpos($s, 'E',\
    \ $i) + strpos($s, 'I', $i) + strpos($s, 'O', $i) + strpos($s, 'U', $i);\n   \
    \ }\n    return $count;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=2 |>\nHere\
    \ is another solution that I tested with different inputs and it's much faster.\n\
    <code>", "    $vowels = \"aeiouAEIOU\";\n    $count = 0;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (preg_match('/'.preg_quote($vowels, '/').'/i',\
    \ $s[$i])) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
  "    $vowels = 'aeiou';\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        if (!(is_int($i) && $i % 2 == 0)) {\n            if (strpos($vowels,\
    \ substr($s, $i, 1)) !== FALSE) {\n                $count++;\n            }\n\
    \        }\n    }\n    return $count;\n}", "    return array_sum(array_map('ord',\
    \ str_split($s))) / 2;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, it works\
    \ perfect.\nBut I still have problem with 'ord' function. Do you know any alternative\
    \ way to get the same result ?\n<|/ c |>\n<| c |>\nThanks for your comment and\
    \ help.\nIt was perfect for me:\n<?php", "  foreach (preg_split('//', $s) as $i=>$c)\
    \ {\n    // Even indices\n    if ($i%2 == 0) $total += strspn($c, 'AEIOUaeiou',\
    \ 1);\n    // Odd indices\n    else $total += strspn($c, 'AEIOUaeiou', 2);\n \
    \ }\n  return $total;\n}\n$s = $argv[1]; $t = time();\necho \"Number of uppercase\
    \ vowels in $s \".\n     \"is \".count_upper($s).\" on \".\n     round(time()-$t).\"\
    \ seconds\\n\";", "    $len = strlen($s);\n    $c = 0;\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        if (isUpper($s[$i])) {\n            $c++;\n        }\n\
    \        if ($i % 2 == 0) {\n            $c++;\n        }\n    }\n    return $c;\n\
    }\n</code>\n<|/ a tags=php,function dscore=0 |>\n<| a tags=php,function |>\nThis\
    \ one counts upper case letters even if they aren't even indices :\n<code>\n<?php\n",
  "  return preg_match_all('/./u', \"aa\".$s.\"ee\", $matches) ? $matches[0] : 0;\n\
    }\n$str = preg_replace('/./u', \"\", $str);\n$vowels = \"aeiouAEIOU\";\n$count\
    \ = count_upper($str);\n$count = 0;\nfor ($i=0; $i<strlen($str); $i++) {\n  if\
    \ ($str[$i] <> $vowels[$i%$vowel_count]) {\n    $count++;\n  }\n}\necho $count;",
  "  return preg_match_all('/(?<![a-z])[AEIOU]/', $s, $matches) ?\n      count($matches[0])\
    \ : -1;\n}\n</code>\nYou can then use preg_replace_callback to apply the function\
    \ above to all strings in an array:\n<code>\n$texts = array('abBCdeEf', 'aBcDf');\n\
    $count = array_map(function($s) {\n    return preg_replace_callback('/(?<![a-z])[AEIOU]/',\
    \ function($m) {\n      return count_upper($m[0]);\n    }, $s);\n}, $texts);\n\
    </code>\nThe result is an array containing the number of uppercase vowels in each\
    \ string.\nDemo on 3v4l.org\n<|/ a dscore=2 |>\n<| c |>\nVery nice, didn't know\
    \ about `preg_replace_callback`.\n<|/ c |>\n<| c |>\nThanks! I've just updated\
    \ the answer with a more efficient solution, using `preg_replace_callback`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    $n = 0;\n    $i = 0;\n    while ($i\
    \ < strlen($s)) {\n        if (strtoupper($s[$i]) === 'E') {\n            $n +=\
    \ 1;\n        }\n        $i += 2;\n    }\n    return $n;\n}\n</code>\n<|/ a tags=php,string,arrays,count\
    \ |>\n<| a dscore=0 tags=php,string,arrays,count |>\nHere's a solution that works\
    \ for both upper and lower case:\n<code>\n$string = \"Hello World\";\n$vowels\
    \ = \"aeiou\";\n$counter = preg_match_all('/[aeiou]/i', $string, $match);\necho\
    \ count($match[0]);\n</code>\nThe preg_match_all function will get all the matches\
    \ within the string. Here we set the regular expression to match each vowel. Within\
    \ the square brackets, we specify a case insensitive match and for the vowels,\
    \ we use the i modifier which causes it to match case-insensitively. Then we get\
    \ the return value (count($match[0])) and we echo it out.\n<|/ a |>\n<| a dscore=0\
    \ |>\nYou can use array_count_values() with array_filter():\n<code>\n$vowels =\
    \ str_split('aeiou');\n\n$string = 'Hello World';\n\n$result = array_count_values(array_filter($vowels,\
    \ function ($value) use ($string) {\n    return strpos($string, $value) !== FALSE;\n\
    }));\n\necho count($result);\n</code>\nThe advantage of using array_count_values()\
    \ is that it also counts non-letters and spaces within the string.\nDemo\n<|/\
    \ a tags=php,string,arrays,count |>\n<| a dscore=0 |>\nHere is my one line solution:\n\
    <code>\necho array_count_values(\n    str_split(\"aeiouAEIOU\")\n)['aeiou'];\n\
    </code>\n<|/ a tags=php,string,arrays,count |>\n<| a tags=php,string,arrays,count\
    \ |>\nI believe that this will be faster as it doesn't use loops.\n<code>\n$string\
    \ = \"Hello World\";\n$vowels = \"aeiouAEIOU\";\n\n$count = preg_match_all('/'.implode('|',\
    \ $vowels).'/i', $string, $matches);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$string = \"Hello World\";\n$vowels = \"aeiouAEIOU\";\n\n$count\
    \ = preg_match_all('/'.implode('|', $vowels).'/i', $string, $matches);\n</code>\n\
    <|/ a tags=php,string,arrays,count |>\n<| c |>\nPlease add some ", "  $c = 1;\n\
    \  for ($i = 0; $i < strlen($s); $i++) {\n    $c += strtoupper($s[$i]) === \"\
    A\";\n  }\n  return $c;\n}\n", "  $u = 0;\n  for ($i=0; $i<strlen($s); $i++) {\n\
    \    if ($s[$i] == \"A\" || $s[$i] == \"a\") {\n      $u++;\n    }\n  }\n  return\
    \ $u;\n}\n", "  for ($i = 0, $count = 0, 0 ; $i < strlen($s) ; $i++) {\n    if\
    \ (strtoupper($s[$i]) === 'E') {\n      $count++;\n    }\n    if ($count % 2 ===\
    \ 1) {\n      if (strtoupper($s[$i]) === 'I') {\n        $count++;\n      }\n\
    \    }\n  }\n  return $count;\n}\n</code>\nDemo\n<|/ a tags=php,regex dscore=0\
    \ |>\n<| c |>\ni need some thing like this but in php not javascript\n<|/ c |>\n\
    <| c |>\nPlease provide some examples of input strings you're expecting for the\
    \ answer.\n<|/ c |>\n<| c |>\ni need count the string upercase vowels , example\
    \ i have string 'abcdefg' , i need like 'abcd' count the upercase vowels so i\
    \ will get count 1 like 'ab' count the upercase vowels so i will get count 2 like\
    \ 'a' count the upercase vowels so i will get count 1 like 'a' count the upercase\
    \ vowels so i will get count 3 like 'a' count the upercase vowels so i will get\
    \ count 4 like 'a'\n<|/ c |>\n<| c |>\nI suggest you edit your question to include\
    \ some examples of input and output strings.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\
    $input = \"abcdefg\";\n$chars = str_split($input);\n$charCount = count($chars);\n\
    \n$vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n$vowelCount = count($vowels);\n\n\
    for($i=0;$i<$charCount;$i++)\n{\n    if(in_array($chars[$i], $vowels))\n    {\n\
    \        $vowelCount--;\n    }\n    else\n    {\n        $charCount--;\n    }\n\
    }\n\necho \"char count: \" . $charCount;\necho \"<br><br>\";\necho \"vowel count:\
    \ \" . $vowelCount;\necho \"<br><br>\";\necho \"char count after removing the\
    \ vowels: \" . $charCount;\n</code>\n<|/ a dscore=0 tags=php,regex |>\n<| c |>\n\
    i need some thing like this but in php not javascript\n<|/ c |>\n<| c |>\nThat\
    \ is what I was trying to explain to you. I've given you a PHP solution\n<|/ c\
    \ |>\n<| c |>\ni need some thing like this but in php not javascript\n<|/ c |>\n\
    <| a |>\nA more efficient ", "  return preg_match_all('/./us', $s) ? 1 : 0;\n}",
  "    $count = 0; $len = strlen($s);\n    for ($i = 0; $i < $len; $i += 2) {\n  \
    \      if (ctype_upper($s[$i])) {\n            $count++;\n        }\n    }\n \
    \   return $count;\n}\n", "    $even = (int) ($s[0] / 2);\n    $odd = $s[0] %\
    \ 2;\n    return $even + $odd;\n}", "\t$c = 0;\n\tforeach (str_split($s) as $c)\
    \ {\n\t\tif (preg_match('/[AEIOUYaeiouy]/i', $c)) {\n\t\t\t++$c;\n\t\t}\n\t}\n\
    \treturn $c;\n}", "    $n = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n\
    \        $n += substr_count(strtoupper($s[$i]), $s[$i + 1]);\n    }\n    return\
    \ $n;\n}", "    $upperCount = 0;\n    $len = strlen($s);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($s[$i] == 'A' || $s[$i] == 'a') {\n           \
    \ $upperCount++;\n        } else if ($s[$i] == 'B' || $s[$i] == 'b') {\n     \
    \       $upperCount++;\n        } else if ($s[$i] == 'C' || $s[$i] == 'c') {\n\
    \            $upperCount++;\n        } else if ($s[$i] == 'D' || $s[$i] == 'd')\
    \ {\n            $upperCount++;\n        } else if ($s[$i] == 'E' || $s[$i] ==\
    \ 'e') {\n            $upperCount++;\n        } else if ($s[$i] == 'F' || $s[$i]\
    \ == 'f') {\n            $upperCount++;\n        } else if ($s[$i] == 'G' || $s[$i]\
    \ == 'g') {\n            $upperCount++;\n        } else if ($s[$i] == 'H' || $s[$i]\
    \ == 'h') {\n            $upperCount++;\n        } else if ($s[$i] == 'I' || $s[$i]\
    \ == 'i') {\n            $upperCount++;\n        } else if ($s[$i] == 'J' || $s[$i]\
    \ == 'j') {\n            $upperCount++;\n        } else if ($s[$i] == 'K' || $s[$i]\
    \ == 'k') {\n            $upperCount++;\n        } else if ($s[$i] == 'L' || $s[$i]\
    \ == 'l') {\n            $upperCount++;\n        } else if ($s[$i] == 'M' || $s[$i]\
    \ == 'm') {\n            $upperCount++;\n        } else if ($s[$i] == 'N' || $s[$i]\
    \ == 'n') {\n            $upperCount++;\n        } else if ($s[$i] == 'O' || $s[$i]\
    \ == 'o') {\n            $upperCount++;\n        } else if ($s[$i] == 'P' || $s[$i]\
    \ == 'p') {\n            $upperCount++;\n        } else if ($s[$i] == 'Q' || $s[$i]\
    \ == 'q') {\n            $upperCount++;\n        } else if ($s[$i] == 'R' || $s[$i]\
    \ == 'r') {\n            $upperCount++;\n        } else if ($s[$i] == 'S' || $s[$i]\
    \ == 's') {\n            $upperCount++;\n        } else if ($s[$i] == 'T' || $s[$i]\
    \ == 't') {\n            $upperCount++;\n        } else if ($s[$i] == 'U' || $s[$i]\
    \ == 'u') {\n            $upperCount++;\n        } else if ($s[$i] == 'V' || $s[$i]\
    \ == 'v') {\n            $upperCount++;\n        } else if ($s[$i] == 'W' || $s[$i]\
    \ == 'w') {\n            $upperCount++;\n        } else if ($s[$i]", "    if (empty($s))\
    \ {\n        return 0;\n    }\n    $vowels = \"aeiou\";\n    $count = 0;\n   \
    \ $i = 0;\n    while ($i < strlen($s)) {\n        $s = substr($s, $i);\n     \
    \   if ($s[strlen($s) - 1] == $vowels[$count]) {\n            $count++;\n    \
    \    }\n        $i++;\n    }\n    return $count;\n}", "    $len = strlen($s);\n\
    \    $vowels = array('a', 'e', 'i', 'o', 'u');\n\n    $evens = array();\n    for\
    \ ($i = 0; $i < $len; $i += 2) {\n        if (isset($vowels[$s[$i]])) {\n    \
    \        $evens[] = $s[$i];\n        }\n    }\n\n    return count($evens);\n}",
  "    $count = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        $c = $s[$i];\n        if ($c >= 'A' && $c <= 'Z') {\n            $count\
    \ += 1;\n        }\n        if (($c >= 'a' && $c <= 'z') || ($c >= 'A' && $c <=\
    \ 'Z')) {\n            $count += 0;\n        }\n    }\n    return $count;\n}",
  "    // Count the number of uppercase vowels.\n    $count = 0;\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i += 2) {\n        if (ctype_upper($s[$i]) && ctype_upper($s[$i\
    \ + 1])) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
  "  $n = 0;\n  for ($i = 0; $i < strlen($s); $i += 2) {\n    if (ctype_upper($s[$i\
    \ + 1])) {\n      $n++;\n    }\n  }\n  return $n;\n}\n", "  $count = count($s);\n\
    \  for ($i=0; $i<$count; $i++) {\n    if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n\
    \      $c = 0;\n      for ($j=0; $j<$i; $j++) {\n        $c = $c + is_upper($s[$j]);\n\
    \      }\n      if ($c == 0) {\n        $count--;\n      }\n    }\n  }\n  return\
    \ $count;\n}", "    $count = 0; // Initialize count as 0.\n    for ($i = 0; $i\
    \ < strlen($s); $i++)\n        // If current char is uppercase, increment count.\n\
    \        if (strtoupper($s[$i]) === 'A')\n            $count++;\n    return $count;\n\
    }\n", "    $counts = array();\n    foreach (str_split($s) as $char) {\n      \
    \  $counts[strtoupper($char)] = 0;\n    }\n    for ($i = 0, $j = count($counts);\
    \ $i < $j; ++$i) {\n        if ($i % 2 == 0) {\n            if ($counts[$i]++\
    \ == 0) {\n                $counts[$i] = 0;\n            }\n        }\n    }\n\
    \    return $counts[count($counts) - 1];\n}\n", "    $vowels = ['a','e','i','o','u'];\n\
    \    foreach ($vowels as $v) {\n        $t = preg_replace('/[^' . $v . ']/', '',\
    \ $s);\n        $n = substr_count($t, 'a');\n        if ($n % 2 == 0)\n      \
    \      return $n;\n    }\n    return 0;\n}", "    $upper = 0;\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($s[$i] >= 'A' && $s[$i] <= 'Z')\
    \ {\n            $upper++;\n        }\n    }\n    return $upper;\n}\n", "    $vowels\
    \ = \"aeiou\";\n    $length = strlen($s);\n    $vowel_count = array();\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        $c1 = $s[$i];\n        $c2 = $s[$i+1];\n\
    \        // Only count if the next character is not uppercase.\n        if (!ctype_upper($c1))\
    \ {\n            continue;\n        }\n        // Only count if the next character\
    \ is not uppercase.\n        if (!ctype_upper($c2)) {\n            continue;\n\
    \        }\n        // Only count if the previous character is not uppercase.\n\
    \        if (!ctype_lower($c1)) {\n            continue;\n        }\n        //\
    \ Only count if the previous character is not uppercase.\n        if (!ctype_lower($c2))\
    \ {\n            continue;\n        }\n        if (in_array($c1, $vowels) && in_array($c2,\
    \ $vowels)) {\n            $vowel_count[] = $c1;\n            $vowel_count[] =\
    \ $c2;\n        }\n    }\n    return count($vowel_count);\n}\n", "  $count = -1;\n\
    \  for ($i = 0, $len = strlen($s); $i < $len; ++$i) {\n    $char = strtoupper($s[$i]);\n\
    \    if ($char !== $char) {\n      $count++;\n    }\n  }\n  return $count;\n}",
  "    $count_upper = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isUpper($s[$i]))\
    \ {\n            $count_upper++;\n            if ($count_upper % 2 == 0) {\n \
    \               continue;\n            }\n        }\n    }\n    return $count_upper;\n\
    }\n", "  $upper = 0;\n  for ($i = 0; $i < strlen($s); ++$i) {\n    $upper += ($s[$i]\
    \ >= 'a' && $s[$i] <= 'z') || ($s[$i] >= 'A' && $s[$i] <= 'Z');\n  }\n  return\
    \ $upper;\n}\n", "  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n   \
    \ if (ctype_upper($s[$i])) {\n      $count += 1;\n    }\n  }\n  return $count;\n\
    }\n", "    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if\
    \ ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n            $count++;\n        } else if\
    \ ($s[$i] >= 'a' && $s[$i] <= 'z') {\n            $count++;\n        } else if\
    \ ($s[$i] >= '0' && $s[$i] <= '9') {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n", "  $a = array();\n  for ($i = 0; $i < strlen($s); $i++)\n\
    \    $a[ord(substr($s, $i, 1))] = 1;\n\n  return count(array_filter(array_keys($a),\
    \ 'is_even'));\n}\n", "    $sum = 0;\n    for($i = 0; $i < strlen($s); ++$i) {\n\
    \        if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n            ++$sum;\n        }\n\
    \        if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n            ++$sum;\n        }\n\
    \        if ($s[$i] >= '0' && $s[$i] <= '9') {\n            ++$sum;\n        }\n\
    \    }\n    return $sum;\n}\n", "  if (empty($s)) { return 0; }\n  $even = array();\n\
    \  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (ord($s[$i]) >=\
    \ ord('A') && ord($s[$i]) <= ord('Z')) {\n      $even[$i%2] += 1;\n      $count++;\n\
    \    }\n  }\n  return $count;\n}\n", "\t$uppers = 0;\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\tif ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n\t\t\t$uppers++;\n\t\t}\n\
    \t}\n\treturn $uppers;\n}\n", "  $count = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    // If it's uppercase and even...\n    if (strtoupper($s[$i]) ===\
    \ \"A\" && $i % 2 === 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\
    </code>\n<|/ a tags=php dscore=2 |>\n<| c |>\nThis is correct, but I would recommend\
    \ using [strlen()](http://php.net/strlen) as opposed to `strlen()`\n<|/ c |>\n\
    <| a |>\nAs I understand it, you need the number of vowels in each word of a string,\
    \ right?\nWell, here it goes...\n<code>\n$vowels = array(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\", \"y\");\n$count = 0;\nforeach($strings as $str) {\n    $count\
    \ = count(preg_grep(\"/[aeiouy]+/\", $str));\n}\n</code>\nJust as an idea. :)\n\
    <|/ a tags=php dscore=1 |>\n<| a dscore=1 |>\nThis should do the trick:\n<code>\n\
    <?php\n$strings = array(\"a boys name is\", \"A name is\", \"Name is\", \"a name\
    \ is\", \"name\");\n$vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n\
    $vowelsCount = 0;\nforeach($strings as $string) {\n  foreach(str_split($string)\
    \ as $char) {\n    if(in_array($char, $vowels)) {\n      $vowelsCount++;\n   \
    \ }\n  }\n}\necho $vowelsCount;", "    $vowels = array('a','e','i','o','u');\n\
    \    $upper = 0;\n    for($i=0; $i<strlen($s); $i++) {\n        if($s[$i] == \
    \ strtoupper($s[$i])) {\n            $upper++;\n        }\n    }\n    \n    for($i=0;\
    \ $i<strlen($s); $i++) {\n        if($vowels[$i] == strtoupper($s[$i])) {\n  \
    \          $upper++;\n        }\n    }\n    return $upper;\n}\n", "  $n = strlen($s);\n\
    \  for ($i = 0; $i < $n; $i += 2) {\n    if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n\
    \      $n++;\n    }\n  }\n  return $n;\n}\n", "    // Convert input to a string\n\
    \    $s = strtoupper($s);\n\n    $vowels = \"AEIOU\";\n\n    $evens = array_filter($vowels,\
    \ function ($vowel) {\n        return substr($s, 0, 1) === $vowel;\n    });\n\n\
    \    return count($evens);\n}", "\t$upper = 0;\n\t$len = strlen($s);\n\tfor ($i\
    \ = 0; $i < $len; ++$i) {\n\t\t$upper = ($upper + ord($s[$i])) >= 0x41 ? 0 : $upper;\n\
    \t}\n\treturn $upper;\n}", "  $n = count($s);\n  $counter = 0;\n  for ($i = 0;\
    \ $i < $n; ++$i) {\n    // If an even index has uppercase letters, add one.\n\
    \    if ($s[i] >= 'A' && $s[i] <= 'Z') {\n      $counter += 1;\n    }\n  }\n \
    \ return $counter;\n}\n", "    $len = strlen($s);\n    $count = 0;\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $char = substr($s, $i, 1);\n        if ($char\
    \ !== 'a' && $char !== 'A' && $char !== 'e' && $char !== 'E' && $char !== 'i'\
    \ && $char !== 'I' && $char !== 'o' && $char !== 'O' && $char !== 'u' && $char\
    \ !== 'U') {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI like how your solution is pretty simple and very\
    \ straightforward. However - I'm getting a parse error (unexpected T_FUNCTION)\n\
    <|/ c |>\n<| c |>\nDid you copy my code exactly? `count_upper` is a function.\
    \ It's not supposed to be inside `<?php`.\n<|/ c |>\n<| c |>\nI'm still getting\
    \ the error. I tried pasting the code verbatim in my file as well - same error.\
    \ I edited my original post to reflect the exact code. Would you mind having a\
    \ look? Thanks again!\n<|/ c |>\n<| c |>\nOkay, I edited my answer to fix some\
    \ errors. Your code was very close to working. `?>` should be just before the\
    \ `<?php`\n<|/ c |>\n<| a tags=php |>\nYou can use preg_match_all to match all\
    \ patterns.\nThe pattern:\n<code>\n/(?<vowel>a|A|e|E|i|I|o|O|u|U)[a-z]/\n</code>\n\
    This will find all a|A|e|E|i|I|o|O|u|U and [a-z] inside the string.\nThis expression\
    \ will match:\n<code>\n$string = 'aBCdEf';\n$pattern = '/(?<vowel>a|A|e|E|i|I|o|O|u|U)[a-z]/';\n\
    preg_match_all($pattern, $string, $matches);\necho $matches['vowel'][0];\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThat looks promising, but how would I get the value\
    \ into the variable $count_vowel?\n<|/ c |>\n<| c |>\n`echo $matches['vowel'][0];`\
    \ will output `BCDEF`\n<|/ c |>\n<| c |>\nI'm still getting a parse error (unexpected\
    \ T_FUNCTION). I'm editing the original post to reflect the exact code.\n<|/ c\
    \ |>\n<| a ", "    $len = strlen($s);\n    $count_upper = 0;\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n        \
    \    $count_upper++;\n        }\n    }\n\n    return $count_upper;\n}\n", "  $upper\
    \ = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (strtoupper($s[$i]) ===\
    \ 'A') {\n      $upper++;\n    }\n  }\n  return $upper;\n}\n", "    $count = 0;\n\
    \    for($i = 0; $i < strlen($s); $i++) {\n        if(ctype_upper($s[$i])) $count++;\n\
    \    }\n    return $count;\n}\n", "    $vowels = \"aeiouAEIOU\";\n    $i = 0;\n\
    \    foreach(str_split($s) as $c) {\n        if ($c === $vowels[$i]) $i++;\n \
    \       else return 0;\n    }\n    return $i;\n}", "  $count_upper = 0;\n  for\
    \ ($i = 0; $i < strlen($s); $i++) {\n    if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n\
    \      $count_upper++;\n      if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n        $count_upper++;\n\
    \      }\n    }\n  }\n  return $count_upper;\n}", "  $uppers = array_fill(0, strlen($s),\
    \ '');\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (!isset($uppers[$i / 2]))\
    \ {\n      $uppers[$i / 2] = 'a' <= $s[$i] ? $s[$i] . 1 : 0;\n    }\n  }\n  return\
    \ count(array_filter($uppers, 'is_numeric', ARRAY_FILTER_USE_BOTH));\n}\n", " \
    \   $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ord($s[$i])\
    \ >= 65 && ord($s[$i]) <= 90) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\n", "  $t = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n\
    \    if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90) {\n      $t .= strtolower($s[$i]);\n\
    \    } else if (ord($s[$i]) >= 97 && ord($s[$i]) <= 122) {\n      $t .= strtoupper($s[$i]);\n\
    \    }\n  }\n  return substr_count($t, 'AEIOUYaeiouy');\n}\n", "    return preg_match_all('/[A-Z]/',\
    \ $s, $matches) ? count($matches[0]) : 0;\n}\n", "    $count = intval(preg_replace('/[^aeiouAEIOU]/',\
    \ '', $s));\n    if ($count > 0) {\n        $count += intval(preg_replace('/[^aeiouAEIOU]/i',\
    \ '', $s)) - intval(preg_replace('/[^AEIOU]/', '', $s));\n    }\n    return $count;\n\
    }\n", "    $counts = array();\n    for ($i=0; $i<strlen($s); $i++) {\n       \
    \ $c = $s[$i];\n        if ($c == 'A' || $c == 'E' || $c == 'I' || $c == 'O' ||\
    \ $c == 'U') {\n            $counts[$i]++;\n        }\n    }\n    return $counts;\n\
    }\n", "    if (empty($s)) {\n        return 0;\n    }\n    $counts = array();\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i])) {\n\
    \            $counts[$i] = 1;\n        }\n    }\n    $num_upper = count($counts)\
    \ - 1;\n    return $num_upper;\n}", "  $s = 0;\n  $len = strlen($s);\n  for ($i\
    \ = 0; $i < $len; $i++)\n    if ($s[$i] >= 'a' && $s[$i] <= 'z')\n      $s +=\
    \ ($s[$i] <= 'z' ? 1 : 0);\n  return $s;\n}\n", "    $upper = 0;\n    for ($i=0;\
    \ $i<strlen($s); $i++) {\n        if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n    \
    \        $upper++;\n        }\n    }\n    return $upper;\n}\n", "    $a = 0;\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (!isUpper($s[$i])) {\n\
    \            return 0;\n        }\n        if (($i % 2) == 0) {\n            $a++;\n\
    \        }\n    }\n    return $a;\n}\n", "  $count = preg_match_all('/[AEIOUaeiou]/i',\
    \ $s);\n  return $count;\n}\n", "    $count = 0;\n    $length = strlen($s);\n\
    \    for ($i = 0; $i < $length; ++$i) {\n        if ($s[$i] >= 'A' && $s[$i] <=\
    \ 'Z') {\n            $count += $s[$i] === 'A' ? 1 : 0;\n        }\n    }\n  \
    \  return $count;\n}\n</code>\n<code>", "    $len = strlen($s);\n    $vowels =\
    \ 'aeiou';\n    $i = 0;\n    while ($i < $len) {\n        $isUp = ctype_upper($s[$i]);\n\
    \        if (isset($vowels[$s[$i]])) {\n            $isUp = false;\n         \
    \   break;\n        }\n        $i += 1;\n    }\n    return $i;\n}\n", "    $vowels\
    \ = 'aeiou';\n    $even = 1;\n    $total = 0;\n    for ($i = 0; $i <= strlen($s);\
    \ $i++) {\n        $letter = substr($s, $i, 1);\n        $total += ($letter ==\
    \ $vowels[$i%strlen($vowels)]) * $even;\n        $even *= 2;\n    }\n    return\
    \ $total;\n}\n", "  $vowels = ['A','E','I','O','U'];\n  $vowel_count = 0;\n  for($i=0;$i<strlen($s);$i++)\
    \ {\n    $char = substr($s,$i,1);\n    $vowel_count = $vowel_count + isset($vowels[$char])\
    \ ? $vowels[$char] : 0;\n  }\n  return $vowel_count;\n}\n\n$text = '\"Hello, World!\"\
    ';\n$count = count_upper($text);\necho $count;", "    $even_indexes = array_filter($s,\
    \ function ($i) { return $i % 2 == 0; });\n    return count($even_indexes) / 2;\n\
    }", "    $num_upper = 0;\n    for ($i = 0; $i < strlen($s); ++$i) {\n        if\
    \ (preg_match('/[A-Z]/', $s[$i])) {\n            $num_upper++;\n        }\n  \
    \  }\n    return $num_upper;\n}\n", "    $n = preg_match_all('/[A-Z]/', $s, $matches);\n\
    \    return $matches[0][$n];\n}\n", "  $count = intval(preg_replace('/[^aeiou]/',\
    \ '', $s));\n  return ($count > 0) ? $count : 0;\n}", "    $upper = array();\n\
    \    for($i=0; $i<strlen($s); $i++) {\n        if(preg_match('/^\\p{Lu}+$/u',\
    \ $s[$i])) {\n            $upper[$i] = (isset($upper[$i])? $upper[$i]+1 : 1);\n\
    \        }\n    }\n    return $upper;\n}\n$upper = count_upper($input);\n$odds\
    \ = array_filter(array_map($upper, function($value){return $value%2;}));\n$evens\
    \ = array_diff($upper, $odds);\n$evenCount = 0;\nforeach($evens as $even) {\n\
    \    $evenCount += $even;\n}\necho $evenCount;", "  $count = 0;\n  for ($i = 0;\
    \ $i < strlen($s); ++$i) {\n    if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n      if\
    \ ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n        ++$count;\n      }\n    }\n  }\n\
    \  return $count;\n}\n", "  for ($i = 0, $j = 0; $i < strlen($s); $i++, $j++)\
    \ {\n    $j = ($j + $i % 2) ^ ord($s[$i]) - ord('A');\n    if ($j > 0 && $j %\
    \ 2 == 0)\n      $j++;\n  }\n  return $j;\n}", "    $count = 0;\n    $vowels =\
    \ \"aeiouAEIOU\";\n    for($i = 0; $i < strlen($s); $i++) {\n        $c = substr($s,\
    \ $i, 1);\n        $c eq $vowels[($i % strlen($vowels)) & 1] ? $count++ : $count\
    \ = 0;\n    }\n    return $count;\n}\n", "    $vowels = 'AEIOUaeiou';\n    $count\
    \ = 0;\n    $len = strlen($s);\n    for($i = 0; $i < $len; ++$i) {\n        if($s[$i]\
    \ >= 'A' && $s[$i] <= 'Z') {\n            $count += $vowels{$s[$i]};\n       \
    \ }\n    }\n    return $count;\n}\n", "    if ($s[0] == 'a') { $vowels[] = 'A';\
    \ }\n    if ($s[0] == 'e') { $vowels[] = 'E'; }\n    if ($s[0] == 'i') { $vowels[]\
    \ = 'I'; }\n    if ($s[0] == 'o') { $vowels[] = 'O'; }\n    if ($s[0] == 'u')\
    \ { $vowels[] = 'U'; }\n    $count = 0; $index = 0;\n    while ($index < strlen($s))\
    \ {\n        if ($s[$index] == 'a') { $vowels[] = 'A'; }\n        if ($s[$index]\
    \ == 'e') { $vowels[] = 'E'; }\n        if ($s[$index] == 'i') { $vowels[] = 'I';\
    \ }\n        if ($s[$index] == 'o') { $vowels[] = 'O'; }\n        if ($s[$index]\
    \ == 'u') { $vowels[] = 'U'; }\n        $index++;\n    }\n    for ($index = 0;\
    \ $index < count($vowels); $index++) {\n        $count += substr_count($s, $vowels[$index]);\n\
    \    }\n    return $count;\n}", "  return preg_match_all('/[AEIOUaeiou]/', $s,\
    \ $match) ? $match[0] : 0;\n}\n", "    $ret = 0;\n    for ($i = 0; $i < strlen($s);\
    \ ++$i) {\n        $ret = max($ret, strpos($s, $s[$i]) ^ 1);\n    }\n    return\
    \ $ret;\n}\n\n$str = \"aBcDdEf\";\necho count_upper($str); // output: 2", "  $vowels\
    \ = array('A','E','I','O','U');\n  $evenIndices = array_filter($vowels, function\
    \ ($v) use ($s) { return ($v & 1); });\n  return count(array_intersect($evenIndices,\
    \ str_split($s)));\n}\n", "  for ($i = 0; $i < strlen($s); $i++) {\n    if ($s[$i]\
    \ >= 'a' && $s[$i] <= 'z') {\n      if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n  \
    \      $count++;\n      }\n    }\n  }\n  return $count;\n}", "    $count = 0;\n\
    \    $vowels = array('a','e','i','o','u');\n    for($i = 0; $i < strlen($s); $i++)\
    \ {\n        if (preg_match('/' . $vowels[$i] . '/i', $s[$i])) {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}\n</code>\n<|/ a dscore=2\
    \ tags=php,count,string |>\n<| c |>\nI dont think it solves the problem. what\
    \ if there where more than 1 upper case char?\n<|/ c |>\n<| c |>\nThe answer says\
    \ \"Given a string s, count the number of uppercase vowels in even indices.\"\
    \ This counts the number of vowels *in* the string. I'm not entirely sure what\
    \ he wants to do with that information.\n<|/ c |>\n<| a tags=php,count,string\
    \ |>\nThe solution using preg_match_all and array_filter functions:\n<code>",
  "    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i]))\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "  preg_match_all('/^(.)\\\
    1*$/', $s, $matches, PREG_OFFSET_CAPTURE);\n  return count(array_filter($matches[0][1],\
    \ function ($i) { return $i[1] % 2 == 0; }));\n}\n", "  $count = 0;\n  for ($i\
    \ = 0; $i < strlen($s); ++$i) {\n    if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n \
    \     if ($i % 2 == 1) {\n        $count += 1;\n      }\n    }\n  }\n  return\
    \ $count;\n}\n", "    $even = [];\n    $i = 0;\n    $len = strlen($s);\n    for\
    \ ($i=0; $i<$len; $i++) {\n        $char = substr($s, $i, 1);\n        if ((ord($char)\
    \ >= 65) && (ord($char) <= 90)) {\n            $even[$i] = 1;\n        }\n   \
    \ }\n    return count(array_filter($even, function($v){return !$v;}));\n}\n",
  "\t$upper = preg_match_all('/([a-z])/', $s, $match);\n\treturn $upper;\n}\n", " \
    \   $counter = 0;\n    for ($i=0; $i<strlen($s); $i++){\n        if ($s[$i] >=\
    \ 'A' && $s[$i] <= 'Z') {\n            if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n\
    \                $counter++;\n            }\n        }\n    }\n    return $counter;\n\
    }\n", "    $count = strlen($s);\n    if ($count % 2 != 0) return $count;\n   \
    \ $count2 = strlen($s);\n    for ($i=0; $i<$count; $i+=2) {\n        if ($s[$i]\
    \ == \"B\" && $s[$i+1] == \"A\") {\n            $count2--;\n        }\n    }\n\
    \    return $count2;\n}\n", "    // Only need to consider even indices\n    $n\
    \ = count($s);\n    $even_count = 1;\n    for ($i = 0; $i < $n; $i += 2) {\n \
    \       // Only count uppercase vowels at even indices\n        if (strtolower($s[$i])\
    \ === 'a' || strtolower($s[$i]) === 'e' || strtolower($s[$i]) === 'i' || strtolower($s[$i])\
    \ === 'o' || strtolower($s[$i]) === 'u')\n            $even_count++;\n    }\n\
    \    return $even_count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere\
    \ is a version using the same logic as your original code - but using strtoupper()\
    \ rather than the complicated if-else logic. \n<code>\n$string = 'aabbccddeeffgghhiijklmnop';\n\
    $upperCount = substr_count(strtoupper($string), 'AaEeIiOoUu') + $upperCount;\n\
    echo \"There are \".$upperCount.\" uppercase vowels in '\".$string.\"'.\\n\";\n\
    </code>\n<|/ a tags=uppercase,php |>\n<| a tags=uppercase,php |>\n<code>\n$myString\
    \ = 'Hello World';\n$array = str_split($myString);\n$result = 0;\nfor($i=0;$i<count($array);$i+=2){\n\
    \    if(strtoupper($array[$i])=='A' && strtoupper($array[$i+1])=='a'){\n     \
    \   $result++;\n    }\n}\necho $result;\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\n$string = 'Hello World';\n$array = str_split($string);\n$result = 0;\n\
    for($i=0;$i<count($array);$i+=2){\n    if(strtoupper($array[$i])=='A' && strtoupper($array[$i+1])=='a'){\n\
    \        $result++;\n    }\n}\necho $result;\n</code>\n<|/ a tags=uppercase,php\
    \ dscore=0 |>\n<| a dscore=0 |>\nYou can use this short PHP code.\n<code>\n<?php\n\
    $string = 'Hello World';\n$array = str_split($string);\n$result = 0;\nfor($i=0;$i<count($array);$i+=2){\n\
    \    if(strtoupper($array[$i])=='A' && strtoupper($array[$i+1])=='a'){\n     \
    \   $result++;\n    }\n}\necho $result;", "    return preg_match_all('/([aeiou])\\\
    1/', $s, $matches) ? $matches[1] : '0';\n}\n", "  $even_indices = [];\n  $len\
    \ = strlen($s);\n  for ($i = 0; $i < $len; $i += 2) {\n    $even_indices[] = $i;\n\
    \  }\n  return count(array_count_values($even_indices));\n}", "    $c = array_count_values(str_split($s));\n\
    \    $c[''] = $c[''] = $c[''];\n    return array_sum(array_filter($c, function($n)\
    \ { return !$n % 2; }));\n}", "    $c = strlen($s);\n    $upper = 0;\n    for\
    \ ($i = 0; $i < $c; ++$i) {\n        if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n \
    \           ++$upper;\n        }\n    }\n    return $upper;\n}\n\n$s = 'munro';\n\
    \necho count_upper($s);\n", "  $r = preg_match_all('/(\\w)([aeiou])(\\w)/', $s,\
    \ $matches);\n  return count($matches[0][3]);\n}", "  if ($s === '')\n    return\
    \ 0;\n\n  $count = 0;\n  for ($i = 0, $len = strlen($s); $i < $len; ++$i) {\n\
    \    $char = strtoupper($s[$i]);\n    if ($char === $char)\n      $count++;\n\
    \    else\n      break;\n  }\n  return $count;\n}", "    $uppers = str_split($s);\n\
    \    $upper_count = 0;\n    $uppers_even = [];\n\n    foreach ($uppers as $upper)\
    \ {\n        if (ctype_upper($upper)) {\n            $upper_count++;\n       \
    \ }\n\n        if (($upper_count % 2) == 0) {\n            $uppers_even[] = $upper;\n\
    \        }\n    }\n\n    return count(array_intersect($uppers_even, $uppers));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nNice. I'm sure it works, but I prefer to avoid\
    \ writing PHP extensions. I wrote a solution that works quickly and has nice syntax,\
    \ and I think I'll stick with that.\n<|/ c |>\n<| c |>\nFair enough. I only tried\
    \ it with PHP 5.2 and it only works with strings with even number of characters.\
    \ I may look into it later and fix it if I come up with anything else.\n<|/ c\
    \ |>\n<| c |>\nI checked your solution, it's very clean and easy to understand\
    \ - but I wonder how much faster it would be than `count_if()`?\n<|/ c |>\n<|\
    \ c |>\nOk, I checked the code of count_if(), and it's pretty damn fast. I'll\
    \ edit my answer to show it.\n<|/ c |>\n<| a dscore=2 |>\nThis is an old question\
    \ but I recently had the same problem and came up with a solution that doesn't\
    \ involve writing new functions or messing with regular expressions.\nThe trick\
    \ is to use a reference variable. \n<code>\n$num = 0;\n$num_even = 0;\n$num_odd\
    \ = 0;\n$str_arr = str_split($str);\n$str2 = $str_arr;\nforeach ($str_arr as $key\
    \ => $val) {\n    if ($key % 2 == 0) {\n        $num_even++;\n    } else {\n \
    \       $num_odd++;\n    }\n    $str2 [$key] = $val;\n}\n$num = count($str2);\n\
    </code>\n<|/ a tags=php |>\n<| c |>\n`$str2 = $str_arr` is unnecessary. `$str_arr`\
    \ itself is an array.\n<|/ c |>\n<| c |>\nI understand that the function would\
    \ return an integer value when used in an equation, but what does this mean? Why\
    \ does it work?\n<|/ c |>\n<| a |>\nYou can use the str_split() function to split\
    \ your string into array by spaces.\nExample:\n<code>\n$str = 'Hello World!';\n\
    $str = str_split($str);\n$str_even = $str[count($str)-1];\necho $str_even;\n</code>\n\
    <|/ a dscore", "    $count = 0;\n    $length = strlen($s);\n    $vowels = 'aeiouAEIOU';\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $letter = $s[$i];\n        if\
    \ ($letter === $vowels[$i % 6]) $count++;\n    }\n    return $count;\n}\n", " \
    \   $c = 0;\n    $len = strlen($s);\n    $vowels = 'aeiou';\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if (strncmp($vowels, $s[$i], 1)) {\n           \
    \ $c++;\n        }\n    }\n    return $c;\n}\n", "    $counter = 0;\n    for($i\
    \ = 0; $i < strlen($s); $i++) {\n        if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n\
    \            if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n                $counter++;\n\
    \            }\n        }\n    }\n    return $counter;\n}", "    $count = 0;\n\
    \    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        $char =\
    \ strtolower($s[$i]);\n        if ($char !== $char && !is_numeric($char) && $char\
    \ >= 'A' && $char <= 'Z') {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\n", "    $count = 0;\n    for ($i=0; $i<strlen($s); $i++){\n    \
    \    if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n            if ($s[$i] % 2 == 0) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }", "  global $upperCount;\n  $upperCount = 0;\n  $len = strlen($s);\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    $c = strtoupper($s[$i]);\n    if ($c{0} == 'A'\
    \ && ($i & 1)) {\n      $upperCount++;\n    }\n  }\n  return $upperCount;\n}",
  "    $upper = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (ctype_upper($s[$i]))\
    \ $upper++;\n    }\n    return $upper;\n}\n", "  $count = 0;\n  for ($i = 0; $i\
    \ < strlen($s); $i += 2) {\n    if (strtoupper($s[$i]) === 'A') {\n      $count++;\n\
    \    }\n  }\n\n  return $count;\n}", "    if (preg_match('/a/', $s)) {\n     \
    \   return preg_match_all('/[AEIOUaeiou]/', $s)[0];\n    } else {\n        return\
    \ preg_match_all('/[AEIOUaeiou]/', '', $s);\n    }\n}", "    $count = 0;\n   \
    \ for($i = 0; $i < strlen($s); $i++){\n        if(strcasecmp(substr($s, $i, 1),\
    \ 'a') == 0){\n            $count++;\n        }\n    }\n    return $count;\n}\n",
  "  global $count;\n  return $count = 0;\n}\n", "    $count = preg_match_all('~^([a-z]+)~i',\
    \ $s, $matches);\n    return $count;\n}\n", "    $upper = 0; // number of uppercase\
    \ letters\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] >= 'A'\
    \ && $s[$i] <= 'Z') {\n            $upper++;\n        }\n    }\n    return $upper;\n\
    }\n", "    $count = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $char = strtolower($s[$i]);\n        if ($char === 'a') {\n     \
    \       $count++;\n            if ($count % 2 == 0) {\n                $count\
    \ += ($len - $i) % 2;\n            }\n        } else if ($char === 'e') {\n  \
    \          $count++;\n        } else if ($char === 'i') {\n            $count++;\n\
    \        } else if ($char === 'o') {\n            $count++;\n        } else if\
    \ ($char === 'u') {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    return preg_match_all('/[a-z]*[AEIOU]/i', $s, $matches) ? count($matches[0])\
    \ : 0;\n}\n", "\t$count = 0;\n\tfor ($i = 0; $i < strlen($s); ++$i) {\n\t\tif\
    \ ($s[$i] >= 'a' && $s[$i] <= 'z') {\n\t\t\t++$count;\n\t\t}\n\t}\n\treturn $count;\n\
    }", "    $i = 1;\n    $count = count($s) - 1;\n    while($i <= $count) {\n   \
    \     if(ctype_upper($s[$i])) $i++;\n        else $i -= 2;\n    }\n    return\
    \ $i;\n}", "  return preg_match_all('/([a-zA-Z])/u', $s, $matches, PREG_OFFSET_CAPTURE)\
    \ ?\n         array_sum((array_map(function($a) { return $a[1] % 2 ? 0 : 1;},\
    \ $matches[0])) : $s;\n}\n</code>\n<|/ a tags=php,function dscore=2 |>\n<| c |>\n\
    I love how you put this out and said \"don't do that\" but then didn't explain\
    \ WHY you shouldn't do that. I will definitely use this in the future and make\
    \ my code better not only for me but for anyone else who looks at the answer.\n\
    <|/ c |>\n<| c |>\nWell, I didn't say \"don't do that\" but rather \"don't do\
    \ that *because* I didn't know of a way to do this in PHP\". I'm glad it's helped\
    \ though.\n<|/ c |>\n<| c |>\n- I like this one because it shows how to do it\
    \ in PHP, even though there are other solutions posted. I don't understand why\
    \ someone would downvote this without giving an explanation.\n<|/ c |>\n<| c |>\n\
    This code does not work for the string \"AABBCCCC\". This code outputs 6, when\
    \ it should be 6.\n<|/ c |>\n<| c |>\n- It works for me. Maybe your PHP version\
    \ is outdated or something?\n<|/ c |>\n<| a dscore=1 |>\n<code>\necho preg_replace('/./u',\
    \ 'u$0', preg_match_all('/([a-zA-Z])/u', $s, $matches));\n</code>\n<|/ a tags=php,function\
    \ |>\n<| c |>\nThis outputs u$0 for every string. I'm sure this works, however\
    \ I'm not able to see why it doesn't output just the u$0 part.\n<|/ c |>\n<| c\
    \ |>\nI added an explanation to the answer\n<|/ c |>\n<| a |>\nFor anyone who\
    \ might be interested, I went ahead and wrote my own function. Here is what I\
    \ came up with:\n<code>", "    $a = array();\n    $cnt = $uppers = 0;\n    for($i=0;\
    \ $i<strlen($s); $i++) {\n        $a = ord($s[$i]);\n        if(($a >= 65) &&\
    \ ($a <= 90)) {\n            if(($i>0) && is_upper($s[$i-1]) && is_upper($s[$i]))\
    \ {\n                $uppers++;\n            }\n            $cnt++;\n        }\n\
    \    }\n    return $uppers;\n}\n", "  $u = 0;\n  $l = 0;\n  foreach (str_split($s)\
    \ as $c) {\n    if (ctype_upper($c)) {\n      $u++;\n    }\n    else {\n     \
    \ if ($u % 2 === 0) {\n        $l++;\n      }\n    }\n  }\n  return $l;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much. This definitely helped me get to the\
    \ answer. I ended up getting it working with a few small tweaks. I'll add my final\
    \ code as an answer.\n<|/ c |>\n<| a dscore=0 |>\nThe PHP count function is actually\
    \ pretty simple.\n<code>\n$vowels = 'aeiou';\n$string = 'This string contains\
    \ vowels: a, i, o, u, ae';\necho count($string);\n\n$string = 'This string does\
    \ not contain vowels: a, i, o, u, ae';\necho count($string);\n</code>\n<|/ a tags=php\
    \ |>\n<| a tags=php dscore=0 |>\nI wanted to get this to the bottom of all the\
    \ answers. Thank you all for your help.\nThis code gets the job done:\n<code>\n\
    <?php", "  $a = array_count_values(str_split(strtoupper($s)));\n  return $a['E']\
    \ + $a['I'] + $a['O'];\n}\n\n$count_upper = count_upper($string);\necho $count_upper;\n\
    </code>\n<|/ a |>\n<| c |>\nThanks, that works perfectly!\n<|/ c |>\n<| c |>\n\
    You're welcome! Happy to help. Don't forget to accept the answer if it solved\
    \ your problem.\n<|/ c |>\n<| c |>\nI have accepted your answer and would like\
    \ to thank you again! I am working on a problem in PHP and I have encountered\
    \ another problem. Perhaps you would be willing to look at it too? :)\n<|/ c |>\n\
    <| c |>\nSure, let me take a look.\n<|/ c |>\n<| c |>\nOk no problem, I will post\
    \ a new question if you don't mind.\n<|/ c |>\n<| a dscore=1 tags=regex,php |>\n\
    I guess it would be more efficient to just count the vowels:\n<code>", "    $upper\
    \ = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (ctype_upper($s[$i])\
    \ && ctype_upper($s[$i + 1])) {\n            $upper++;\n        }\n    }\n   \
    \ return $upper;\n}", "    $cnt = $cntenum = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n            $cnt +=\
    \ 1;\n            if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n                $cntenum++;\n\
    \            }\n        }\n    }\n    return $cnt - $cntenum;\n}\n", "  $even\
    \ = 0;\n  for ($i = 0; $i < strlen($s); $i += 2) {\n    if (ctype_upper($s[$i]))\
    \ {\n      $even++;\n    }\n  }\n  return $even;\n}\n", "  $count = 0;\n  for\
    \ ($i = 0, $len = strlen($s); $i < $len; $i++) {\n    if ($s[$i] >= 'A' && $s[$i]\
    \ <= 'Z') {\n      $count += ($s[$i] - 'A') % 2;\n    }\n  }\n  return $count;\n\
    }\n", "    $vowels = \"aeiouAEIOU\";\n    $upper = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (!strstr($vowels, $s[$i])) {\n            $upper++;\n  \
    \      }\n    }\n    return $upper;\n}\n", "  preg_match('/[A-Z]+/', $s, $matches);\n\
    \  return count(array_filter($matches[0], 'strlen'));\n}\n", "    return $s =~\
    \ tr/[A-Z]/D;\n}\n", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++){\n\
    \        $sum += substr($s, $i, 1){0} === 'U' ? 1 : 0;\n    }\n    return $sum;\n\
    }", "  $count = 0;\n  $len = strlen($s);\n  for ($i = 0; $i < $len; $i += 2) {\n\
    \    if (strtoupper($s[$i]) === $s[$i + 1]) {\n      $count++;\n    }\n  }\n \
    \ return $count;\n}\n", "    $count_even = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $c = substr($s, $i, 1);\n        if (ctype_upper($c)) {\n \
    \           $count_even++;\n        }\n    }\n    return $count_even / 2;\n}\n",
  "    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i]\
    \ == 'A' || $s[$i] == 'E' || $s[$i] == 'I' || $s[$i] == 'O' || $s[$i] == 'U')\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\n", "    $len\
    \ = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        if ($s[$i] >= 'a'\
    \ && $s[$i] <= 'z') {\n            if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n   \
    \             $vowel_count++;\n            }\n        }\n    }\n    return $vowel_count;\n\
    }\n", "  for ($i = strlen($s)-1; $i >= 0; $i--) {\n    $v = ord($s[$i]);\n   \
    \ if ($v == 0x65 || $v == 0x61 || $v == 0x6E || $v == 0x6F) {\n      $n++; //\
    \ odd indices are vowels\n    } else {\n      return 0;\n    }\n  }\n  return\
    \ $n; // odd indices are vowels\n}\n", "    $count = 0; // Initialize to zero\n\
    \    for($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if($c\
    \ == \"A\" || $c == \"E\" || $c == \"I\" || $c == \"O\" || $c == \"U\") {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}", "  for ($i = 0;\
    \ $i < strlen($s); $i += 2) {\n    if (ord($s[$i + 1]) >= 65 && ord($s[$i + 1])\
    \ <= 90) {\n      return ord($s[$i]) - 64;\n    }\n  }\n  return -1;\n}\n", " \
    \ $count = 0;\n  for ($i = 0; $i < strlen($s); $i += 2) {\n    $c = strtoupper($s[$i]);\n\
    \    if ($c !== $s[$i + 1]) ++$count;\n  }\n  return $count;\n}", "  if ($s ==\
    \ '') {\n    return 0;\n  }\n  $vowels = 'aeiouAEIOU';\n  $vowels_length = strlen($vowels);\n\
    \  $vowels_index = -1;\n  $vowels_count_lower = -1;\n  $vowels_count_upper = -1;\n\
    \  $vowels_count_other = -1;\n  $result = -1;\n  $len = strlen($s);\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    $c = $s[$i];\n    if (ctype_upper($c)) {\n    \
    \  if ($i >= $vowels_index && strncmp($vowels, $s, $i) == 0) {\n        $vowels_index\
    \ = $i;\n        if ($c >= 'a' && $c <= 'z') {\n          $vowels_count_lower++;\n\
    \        }\n        if ($c >= 'A' && $c <= 'Z') {\n          $vowels_count_upper++;\n\
    \        }\n      }\n    } else {\n      if ($i >= $vowels_index && strncmp($vowels,\
    \ $s, $i) == 0) {\n        $vowels_index = $i;\n        if ($c >= 'A' && $c <=\
    \ 'Z') {\n          $vowels_count_other++;\n        }\n      }\n    }\n  }\n \
    \ if ($vowels_index >= 0) {\n    if ($vowels_count_lower == 0) {\n      $result\
    \ = $len - $vowels_index;\n    }\n    if ($vowels_count_upper == 0) {\n      $result\
    \ -= $vowels_index;\n    }\n    if ($vowels_count_other == 0) {\n      $result\
    \ += $vowels_index;\n    }\n    if ($result == -1) {\n      $result = $vowels_index\
    \ + 1;\n    }\n  }\n  return $result;\n}", "    $count = 0; // Initializes our\
    \ count\n    for ($i = 0; $i < strlen($s); $i++) \n    {\n        if (ord($s[$i])\
    \ >= 65 && ord($s[$i]) <= 90) \n        {\n            $count += 1;\n        }\n\
    \    }\n    return $count;\n}", "    $upper = array();\n    $s = strtolower($s);\n\
    \    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        $upper[$i]\
    \ = strpos($s, 'A', $i);\n    }\n    return $upper;\n}\n", "  $count = 0;\n  for\
    \ ($i = 0; $i < strlen($s); $i++)\n    if ($s[$i] >= 'A' && $s[$i] <= 'Z') $count++;\n\
    \  return $count;\n}\n", "  $count = preg_match_all('/\\B/u', $s, $match);\n \
    \ return $count;\n}", "    $sum = 0;\n    $len = strlen($s);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n        \
    \    $sum += 1;\n        }\n    }\n    return $sum % 2;\n}", "    $count = 0;\n\
    \    for($i=0; $i<strlen($s); $i++) {\n        $c = $s[$i];\n        if($c>=65\
    \ && $c<=90)\n            $count++;\n    }\n    return $count;\n}\n", "    $a\
    \ = array();\n    $a[] = count_chars(0, 'a', $s);\n    $a[] = count_chars(0, 'e',\
    \ $s);\n    $a[] = count_chars(0, 'o', $s);\n    $a[] = count_chars(0, 'u', $s);\n\
    \    $a = array_filter($a);\n    $a = array_sum($a);\n    return $a;\n}\n", " \
    \   $even = 0;\n    $upper = 0;\n    for ($i = 0; $i < strlen($s); ++$i) {\n \
    \       $c = $s[$i];\n        if (islower($c)) {\n            $even += 2 if $s[$i]\
    \ >= 'A' && $s[$i] <= 'E';\n            $upper += 2 if $s[$i] >= 'a' && $s[$i]\
    \ <= 'e';\n        } else {\n            $even += 1 if ($s[$i] >= 'A' && $s[$i]\
    \ <= 'Z');\n            $upper += 1 if ($s[$i] >= 'a' && $s[$i] <= 'z');\n   \
    \     }\n    }\n    return $even ? $even : $upper;\n}\n", "  global $vowels;\n\
    \  if($vowels == null) {\n      $vowels = array('A','E','I','O','U','a','e','i','o','u');\n\
    \  }\n  return strlen($s)-strlen(preg_replace(\"/[^aeiouAEIOU]/\", '', $s)) +\
    \ strlen($s)-strlen(preg_replace(\"/[aeiouAEIOU]/\", '', $s)); \n}", "    $uppers\
    \ = preg_grep('/[AEIOUaeiou]/i', $s);\n    return count($uppers);\n}", "  // Write\
    \ your code here.\n}", "\t$vowels = ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o',\
    \ 'u'];\n\t$count = count(preg_grep('/[AEIOUaeiou]/i', $s));\n\treturn $count\
    \ == count($vowels) ? $count : 0;\n}", "  $uv = array();\n  for ($i = 0; $i <\
    \ strlen($s); $i++) {\n    if (ctype_upper($s[$i]) && isset($uv[$i >> 1])) {\n\
    \      $uv[$i >> 1]++;\n    }\n  }\n  return count($uv);\n}\n", "  $t = 0;\n \
    \ for ($i = 0; $i < strlen($s); $i++) {\n    $t += strtoupper($s[$i]) === \"A\"\
    \ ? 1 : 0;\n  }\n  return $t;\n}", "    return substr_count($s, 'A');\n}\n", " \
    \   $vowels = 'aeiou';\n    $upper = 0;\n\n    for ($i=0; $i<strlen($s); $i++)\
    \ {\n        $c = $s[$i];\n\n        // Even index\n        if ($i%2 == 0 && $c==$s[$i-1])\
    \ {\n            $upper++;\n        }\n        // Odd index\n        else {\n\
    \            if (strpos($vowels, $c) !== false) {\n                $upper++;\n\
    \            }\n        }\n    }\n\n    return $upper;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis is a great answer, but I did have to make a few changes. First,\
    \ `$upper=0` should be moved outside of the function because we want to always\
    \ return 0 and not a negative number (this was a typo that was obvious once you\
    \ pointed it out). Second, I used strpos() to find the position of every vowel\
    \ in the string instead of checking if it's the first letter or not, which wasn't\
    \ working because I needed to compare it to the last letter of the string. Finally,\
    \ I didn't return anything, I just added `return 0;` at the end of the function.\n\
    <|/ c |>\n<| c |>\nAh, I see you changed the code. I did not change `$upper=0`\
    \ because it does not affect the final output. Also, `strpos` returns `FALSE`\
    \ if not found which you also did not return correctly. My code returns 0 when\
    \ not found, but you are correct in that it returns `0` when there are zero letters.\
    \ I guess I forgot to mention that I used `===` instead of `==`. That would have\
    \ been my first thought when I saw your comment and had to change my code to `==`.\n\
    <|/ c |>\n<| c |>\nAh, I just tried this out and it still works perfectly. I'm\
    \ still learning PHP, so I'm not too familiar with the '===' operator and I just\
    \ used '==' like you said because I wanted to compare the value to the position\
    \ of each vowel and strpos returns a boolean value, so I thought that would work\
    \ just fine. Thanks!\n<|/ c |>\n<| c |>\nIf you don't use the strict comparison\
    \ operator (===) you will get false positives when the case of the letters match\
    \ and the letters are in different cases. If you use the strict comparison operator\
    \ (===) then you will get false negatives when there are no matches. Just an FYI\
    \ for anybody else who might be confused.\n<|/ c |>\n<| a dscore=0 |>\nTry this\
    \ one out:\n<code>\n<?php\n\n$str = \"The quick brown fox jumped over the lazy\
    \ dog\";\n", "  $even = 0;\n  $upper = 0;\n  for ($i=0; $i<strlen($s); $i++) {\n\
    \    if (substr($s,$i,1) == strtoupper(substr($s,$i,1))) {\n      $upper++;\n\
    \    } else {\n      if ($even == 0)\n        $even = 1;\n      else\n       \
    \ $even = 0;\n    }\n  }\n  return $upper;\n}", "\t$n = 0;\n\tfor($i = 0; $i <\
    \ strlen($s); $i++) {\n\t\t$char = substr($s, $i, 1);\n\t\tif($char == strtoupper($char))\
    \ {\n\t\t\t$n++;\n\t\t}\n\t}\n\treturn $n;\n}\n", "  // Your code here\n  $vowels\
    \ = 'AEIOU';\n  return substr_count($s, 'AEIOU', 0, 0) + (substr_count($s, 'AEIOU',\
    \ 2, 0) +\n    substr_count($s, 'AEIOU', 0, 2));\n}", "    $upper = 0;\n    for($i=0;\
    \ $i<strlen($s); $i++)\n        if($s[$i] >= 'A' && $s[$i] <= 'Z')\n         \
    \   $upper += 1;\n    return $upper;\n}\n", "  return strlen(preg_grep('/[aeiou]/i',\
    \ $s)) - 1;\n}", "  if (strlen($s) === 0) {\n    return 0;\n  }\n  $upper = 0;\n\
    \  for ($i = 0; $i < strlen($s); $i += 2) {\n    if (ctype_upper($s[$i]) && ctype_upper($s[$i\
    \ + 1])) {\n      $upper++;\n    }\n  }\n  return $upper;\n}", "  preg_match_all('/([a-z](?=[a-z]{2}|$))/ix',\
    \ $s, $vowels);\n  return count($vowels[0]) % 2 ? 0 : 1;\n}\n", "  $n = strlen($s);\n\
    \  for ($i = 0; $i < $n; $i++)\n    if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90)\n\
    \      $n++;\n  return $n % 2 ? 0 : 1;\n}", "    if (strlen($s) == 0) {\n    \
    \    return 0;\n    }\n    $vowel_positions = preg_match_all('/[aeiouy]/i', $s,\
    \ $vowel_positions, PREG_OFFSET_CAPTURE);\n    if ($vowel_positions == 0) {\n\
    \        return 0;\n    }\n    $count = count($vowel_positions[0]);\n    $i =\
    \ 0;\n    while ($i < $count) {\n        if ($vowel_positions[0][$i][0] % 2 ==\
    \ 0) {\n            $i++;\n            continue;\n        }\n        $i++;\n \
    \       break;\n    }\n    return $i;\n}", "    $upper = 0;\n    for ($i = 0;\
    \ $i < strlen($s); $i++) {\n        if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n  \
    \          $upper++;\n        } else if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n \
    \           $upper++;\n        } else if ($s[$i] >= '0' && $s[$i] <= '9') {\n\
    \            $upper++;\n        }\n    }\n    return $upper;\n}\n", "    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] >= 'A' &&\
    \ $s[$i] <= 'Z') {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\n", "    $vowels = 'aeiouAEIOU';\n    $count = count($s) - 1;\n    foreach (str_split($s)\
    \ as $i => $char) {\n        if ($char === $vowels[$i%5]) {\n            $count--;\n\
    \        }\n    }\n    return $count;\n}\n\n$text = \"WELCOME TO MORGAN, KITTENSHIP,\
    \ PULLING AND GROWING\";\n\n$text = preg_replace('/(?<=\\w)MORGAN|KITTENSHIP|PULLING|GROWING/',\
    \ '', $text);\n$text = preg_replace('/(\\w)[^AEIOU]*/', '', $text);\n\necho count_upper($text);",
  "    // Count all uppercase vowels.\n    $count = 0; // Initialize count to 0.\n\
    \    foreach (str_split($s) as $char) {\n        if (strtolower($char) === 'a'\
    \ || strtolower($char) === 'e' || strtolower($char) === 'i' || strtolower($char)\
    \ === 'o' || strtolower($char) === 'u')\n            $count++;\n    }\n    return\
    \ $count;\n}", "    $count = 0;\n    for($i=0; $i<strlen($s); $i++) {\n      \
    \  // if it's a vowel\n        if($s[$i] == \"a\" || $s[$i] == \"e\" || $s[$i]\
    \ == \"i\" || $s[$i] == \"o\" || $s[$i] == \"u\") {\n            $count++;\n \
    \       // if it's not (an odd index)\n        } else {\n            $count =\
    \ 0;\n        }\n    }\n    return $count;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\nA simple and effective solution, without looping through string twice.\n\
    <code>", "  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (ord($s[$i])\
    \ >= 65 && ord($s[$i]) <= 90)\n      $count += 1;\n  }\n  return $count;\n}\n\
    </code>\n<|/ a dscore=0 tags=php |>\n<| c |>\nThis is exactly what I was looking\
    \ for. Thank you so much!\n<|/ c |>\n<| a |>\n<code>", "  $u = \"\";\n  for ($i=0;\
    \ $i<strlen($s); $i++) {\n    if ($s[i] >= 'A' && $s[i] <= 'Z') {\n      if (($i\
    \ + 1) % 2 == 0) {\n        $u .= strtoupper($s[$i]);\n      }\n    }\n  }\n \
    \ return strlen($u);\n}\n\necho \"Count of uppercase vowels in 'aBCdEf' is \"\
    .count_upper('aBCdEf').\"\\n\";\n", "  return preg_match_all('/([A-Z])/', $s,\
    \ $matches);\n}\n\n$counts = count_upper($input_string);\n\necho \"Input string:\
    \ $input_string\\n\";\necho \"Even indices has $counts[0] uppercase vowels\\n\"\
    ;\necho \"Odd indices has $counts[1] uppercase vowels\\n\";", "\t$vowels = array('a','e','i','o','u');\n\
    \t$count = count($s);\n\t$i = 0;\n\twhile($i < $count) {\n\t\tif($s[$i]  == 'a'\
    \ || $s[$i] == 'e' || $s[$i] == 'i' || $s[$i] == 'o' || $s[$i] == 'u') {\n\t\t\
    \t$count = $count + (strpos($vowels,$s[$i]) !== false);\n\t\t}\n\t\t$i++;\n\t\
    }\n\treturn $count;\n}\n", "  $count = 0;\n  for ($i=0; $i<strlen($s); $i++) {\n\
    \    if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90) $count++;\n  }\n  return $count;\n\
    }", "  $count = 0; // Number of uppercase chars.\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if (!is_upper($s[$i])) {\n      continue;\n    }\n    if ($s[$i]\
    \ === 'A' || $s[$i] === 'a') {\n      $count++;\n    }\n  }\n  return $count;\n\
    }", "    // Initialize count at zero\n    $num_upper = 0;\n    // If string is\
    \ not empty \n    if(strlen($s) > 0){\n        // Loop through string in even\
    \ indices\n        for($i = 0; $i < strlen($s); $i += 2){\n            // Count\
    \ uppercase letters\n            if(is_upper($s[$i])){\n                $num_upper++;\n\
    \            }\n        }\n    }\n    return $num_upper;\n}", "    $count = strlen($s);\n\
    \    $upper = substr($s, 0, 1);\n    for ($i = 1; $i < $count; $i++) {\n     \
    \   $upper = strtoupper($upper);\n        if ($upper !== $s[$i]) {\n         \
    \   return $i + 1;\n        }\n    }\n    return 0;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis seems the best answer, but how do you compare the strings and return\
    \ false if any string is not an upper case vowel?\n<|/ c |>\n<| c |>\nHi Richard,\
    \ I've edited my answer which should take care of this. However, my solution doesn't\
    \ require that you write any loops to achieve it.\n<|/ c |>\n<| a tags=string,php,function\
    \ dscore=0 |>\nI know this is old but I just wanted to post a recursive function\
    \ that would take a string and test each character and see if it matches to an\
    \ uppercase vowel or not. Hopefully it will help someone as I did just this morning\
    \ and found a recursive solution after a little bit of trial and error.\n<code>",
  "    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $isupper =\
    \ ctype_upper($s[$i]);\n        if ($isupper) {\n            $count++;\n     \
    \   }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; ++$i) {\n        $code = ord($s[$i]);\n        if\
    \ ($code >= 65 && $code <= 90) ++$count;\n    }\n    return $count;\n}", "  $upper\
    \ = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (strtoupper($s[$i]) ===\
    \ 'E') {\n      $upper++;\n    }\n  }\n  return $upper;\n}\n", "  return preg_match_all(\"\
    /[AEIOUY]/\",$s,$matches)? count($matches[0]) : 0 ;\n}", "    if (strlen($s) <=\
    \ 0) {\n        return 0;\n    }\n\n    $counter = 0;\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (isUpper($s[$i])) {\n       \
    \     $counter++;\n        }\n    }\n\n    return $counter;\n}\n</code>\n<|/ a\
    \ tags=php |>\n<| c |>\nThe \"even indices\" comment is not correct.  If `a`,\
    \ `b`, and `c` have even indices, and `d`, `e`, and `f` have odd indices, then\
    \ the count of uppercase vowels in the string `aBcDeFg` would be 2, because `a`,\
    \ `b`, and `c` have even indices and `d`, `e`, and `f` have odd indices.\n<|/\
    \ c |>\n<| c |>\nThanks for noticing that, I updated the answer accordingly.\n\
    <|/ c |>\n<| a |>\nThe solution of your problem will also work for \"abBBcDd\"\
    \ but it will return \"1\" as \"B\" and \"D\" have odd indices. So the solution\
    \ would be to use a $i counter as mentioned in the first comment.\n<code>\n<?php\n\
    $a=\"abBBcDd\";\n", "  return preg_match_all('~^(?:([bcdfghjklmnpqrstvwxyz])(?![aeiou])([aeiou]))+$~',\
    \ $s, $matches) ? $matches[1][0] : 0;\n}\n", "\t$count = 0; // number of uppercase\
    \ vowels\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\tif (isset($s[$i]) && $s[$i]\
    \ >= 'A' && $s[$i] <= 'Z') {\n\t\t\tif ($s[$i] >= 'a' && $s[$i] <= 'z') {\n\t\t\
    \t\t$count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}", "  $upper = FALSE;\n\
    \  for($i = 0; $i < strlen($s); $i++)\n    $upper = $upper || (ctype_upper($s[$i]));\n\
    \  return $upper;\n}", "  return preg_match_all('/\\P{Lu}++/', $s, $matches);\n\
    }", "    $n = str_len($s);\n    $vowels = \"aeiouAEIOU\";\n    $vowels_count =\
    \ str_count($vowels, 'u');\n    $vowels_count = $vowels_count % 2 ? $vowels_count\
    \ + 1 : 0;\n    return $n % 2 && $vowels_count ? $vowels_count : 0;\n}\n", " \
    \ // Count number of vowels in even positions.\n  return preg_match('/(?=([^aeiou]{3})*[^aeiou]{3})/',\
    \ $s) ?\n    preg_match_all('/[aeiou]{3}/', $s) : 0;\n}\n", "    $count = 0;\n\
    \    foreach (str_split($s) as $i => $c) {\n        if ($c == 'A' || $c == 'E'\
    \ || $c == 'I' || $c == 'O' || $c == 'U')\n            $count++;\n    }\n    return\
    \ $count;\n}", "  $upper = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if\
    \ (isset($s[$i]) && is_string($s[$i]) && strtoupper($s[$i]) == 'A') {\n      $upper++;\n\
    \    }\n  }\n  return $upper;\n}\n", "    $count = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (!(strpos($s, 'a', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'e', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'i', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'o', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'u', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'A', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'E', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'I', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'O', $i) === false)) {\n            $count++;\n\
    \        }\n        if (!(strpos($s, 'U', $i) === false)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n", "    $u = 0;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $u += (ord(substr($s, $i, 1)) >= 65 && ord(substr($s,\
    \ $i, 1)) < 90 ? 1 : 0);\n    }\n    return $u;\n}", "  $a = preg_split(\"/[^AEIOUaeiou]/\"\
    ,$s);\n  $num_vowels = count($a);\n  for($i=0;$i<$num_vowels;$i++) {\n    if ($a[$i]\
    \ === \"a\" || $a[$i] === \"e\" || $a[$i] === \"i\" || $a[$i] === \"o\" || $a[$i]\
    \ === \"u\") {\n      $num_vowels++;\n    }\n  }\n  return $num_vowels;\n}", " \
    \   $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $count +=\
    \ preg_match('/[AEIOUaeiou]/', $s[$i]);\n    }\n    return $count;\n}", "  $upper\
    \ = 0;\n  for ($i = 0; $i < strlen($s); $i += 2) {\n    if (strtoupper($s[$i])\
    \ === $s[$i + 1]) {\n      $upper++;\n    }\n  }\n  return $upper;\n}", "  preg_match_all('/[AEIOU]/i',\
    \ $s, $matches);\n  return count($matches[0]);\n}\n\n$n = count_upper(\"aaabBcD\"\
    );\necho \"Count: \" . $n . \"\\n\";", "\t$count_upper = 0;\n\tfor ($i=0; $i <\
    \ strlen($s); $i++) {\n\t\tif (preg_match('/[AEIOUYaeiouy]/i', $s[$i])) {\n\t\t\
    \t$count_upper++;\n\t\t}\n\t}\n\treturn $count_upper;\n}\n", "  $vowels = 'aeiou';\n\
    \  $count = 0;\n  foreach (preg_split('//', $s) as $i => $letter) {\n    if ($letter\
    \ === $vowels[$i%5]) {\n      $count++;\n    }\n  }\n  return $count;\n}\n</code>\n\
    <|/ a tags=php |>\n<| a dscore=2 |>\nYou can try this also,\n<code>", "    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (ctype_upper($s[$i])\
    \ && ctype_upper($s[$i + 1])) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}", "  if ($s !== '')\n    return preg_match_all('/./u', 'aBCdEf',\
    \ $matches) ? count($matches[0]) : 0;\n\n  return 0;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
