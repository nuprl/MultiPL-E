name: HumanEval_62_derivative
language: php
results:
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = array_map(function ($x)\
    \ {\n    return ($xs[1]);\n  }, array_slice($xs, 1));\n  return array_map(function\
    \ ($x) {\n    return ($x[0] * $d);\n  }, array_slice($xs, 0));\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcq0uzlw.php:23\n\
    Stack trace:\n#0 /tmp/tmprcq0uzlw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprcq0uzlw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!$xs || count($xs) ===\
    \ 0) {\n    return [];\n  }\n  $d = array_pop($xs);\n  if (!$d) {\n    return\
    \ [];\n  }\n  $d2 = array_pop($xs);\n  if (!$d2) {\n    return [];\n  }\n  $xs[]\
    \ = $d;\n  return array_map(function ($d2) use ($xs) {\n    return $d * ($d2+$xs[count($xs)-1]);\n\
    \  }, $xs);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,function,algorithm dscore=0\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5c91whfj.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $dydxs = array();\n  $ys =\
    \ $xs[0];\n  for ($i = 1; $i < count($xs); $i++) {\n    $ys += $xs[$i] * $i;\n\
    \    $dydxs[] = $ys;\n  }\n  return $dydxs;\n}\nfunction candidate(...$args) {\n\
    \    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fyeqokf.php:23\n\
    Stack trace:\n#0 /tmp/tmp4fyeqokf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4fyeqokf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = [];\n  for ($i = 0, $len\
    \ = count($xs) - 1; $i < $len; ++$i) {\n    $ys[$i] = array_shift($xs) * $xs[$i];\n\
    \  }\n  return $ys;\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ulcipv3.php:21\n\
    Stack trace:\n#0 /tmp/tmp8ulcipv3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8ulcipv3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if (!$n)\
    \ {\n    return [];\n  }\n  return array_fill(0, $n, array_fill(0, $n, 0));\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tt5paun.php:22\n\
    Stack trace:\n#0 /tmp/tmp8tt5paun.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8tt5paun.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $dx = array_fill(0, count($xs)-1,\
    \ 0);\n  for ($i = 0; $i < count($xs) - 1; $i++) {\n    $dx[$i] = $xs[$i+1] -\
    \ $xs[$i];\n  }\n  return $dx;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vctzrgw.php:22\n\
    Stack trace:\n#0 /tmp/tmp9vctzrgw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9vctzrgw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $f = array_shift($xs);\n  $d\
    \ = array_shift($xs);\n  while ($xs) {\n    $d = $d * $f + array_shift($xs);\n\
    \  }\n  return $d;\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws28qjoq.php:22\n\
    Stack trace:\n#0 /tmp/tmpws28qjoq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpws28qjoq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = 0;\n  $ds = $xs[0];\n\
    \  for ($i = 1; $i < count($xs); $i++) {\n    $d += $xs[$i] * $ds;\n    $ds =\
    \ $d;\n  }\n  return $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa1iugu7.php:24\n\
    Stack trace:\n#0 /tmp/tmpoa1iugu7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpoa1iugu7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (count($xs) < 2) {\n   \
    \ return array($xs[0]);\n  }\n  $d = $xs[1];\n  for ($i = 0; $i < count($xs);\
    \ $i++) {\n    $d *= $xs[$i];\n  }\n  return array(1 / ($d + $xs[0]));\n}\n\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrqr4nl3.php:25\n\
    Stack trace:\n#0 /tmp/tmptrqr4nl3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptrqr4nl3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ds = array_map(function($x)\
    \ {\n    return $x * $x;\n  }, $xs);\n  return $ds;\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqmbdam3.php:20\n\
    Stack trace:\n#0 /tmp/tmptqmbdam3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptqmbdam3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = array_map(function ($x)\
    \ {\n    return $x * $x;\n  }, $xs);\n  return array_map(function ($x, $i) {\n\
    \    return $x - $ys[$i];\n  }, $xs, array_fill(0, count($ys), 0));\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6r4fdhr.php:23\n\
    Stack trace:\n#0 /tmp/tmpk6r4fdhr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpk6r4fdhr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $derivative = 0;\n  foreach($xs\
    \ as $x) {\n    $derivative = $x * $derivative;\n  }\n  return $derivative;\n\
    }\n\n$xs = [5, 1, 3, 1];\n$ys = [10, 2, 5, 9];\n\n$dx = derivative($xs);\n$dy\
    \ = derivative($ys);\n\n$error = ($ys[0] - $dx * $xs[0]) + ($ys[1] - $dx * $xs[1])\
    \ + ($ys[2] - $dx * $xs[2]);\n\necho 'The error is: ' . $error . \"\\n\";\n\n\
    $error = sqrt(pow(derivative([3, 1, 2, 4, 5]), 2) +\n               pow(derivative([1,\
    \ 2, 3]), 2));\necho \"The error is: \" . $error . \"\\n\";\n</code>\n<|/ a |>\n\
    <| c |>\nWhat does it return? `$dy` should be `[8,6,12]`\n<|/ c |>\n<| c |>\n\
    `$dy` should be `[8, 6, 12]`.  See my edit. :)\n<|/ c |>\n<| c |>\nI see it. But\
    \ `derivative([8, 6, 12])` should be `[1, 4, 12]`?\n<|/ c |>\n<| c |>\nNotice\
    \ how I edited my answer a little.  I missed the `sqrt` in `derivative($ys)`.\
    \  The `sqrt` was causing the error and hence my initial response.  It's a good\
    \ point that this is just an approximation algorithm and not a good solution to\
    \ the problem.  Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI have changed\
    \ my code to reflect the new expected result.  I agree with you about the approximation\
    \ algorithm.  My point is that this solution is not going to work because of the\
    \ inaccuracies in calculating derivatives.\n<|/ c |>\n<| a tags=algorithm,math\
    \ |>\nIt looks like the algorithm you're looking for is known as the \"Newton-Raphson\
    \ method\". I don't know any specific implementation in any language, but searching\
    \ for something like \"Newton-Raphson method implementation\" should turn up some\
    \ implementations. As a starting point, the Wikipedia page has a good description\
    \ about the algorithm.\n<|/ a dscore=3 |>\n<| a dscore=2 tags=algorithm,math |>\n\
    The error you're getting is most likely due to the fact that in every iteration\
    \ the derivative function of the derivative of your polynomial increases. That\
    \ means you get bigger and bigger values for every iteration. \nWhen you evaluate\
    \ f(a + b*x + c*x*x + d*x*x*x) you get f(a+b*x+c*x*x+d*\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgyuc722j.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Initialize result to be\
    \ an empty array.\n  $r = array_fill(0, count($xs) - 1, 0);\n\n  // Calculate\
    \ derivative.\n  for ($i = count($xs) - 1; $i >= 0; --$i) {\n    $r[$i] = $xs[$i]\
    \ - $xs[$i - 1];\n  }\n\n  return $r;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    The `derivative` function does nothing more than `return array_reverse(array_merge(array_slice($xs,\
    \ 1), [$xs[0]]));`.\n<|/ c |>\n<| a |>\nThe simplest solution:\n<code>\n<?php\n\
    \    $a = array(3, 1, 2, 4, 5);\n    $b = array();\n    foreach($a as $key =>\
    \ $value)\n    {\n        $b[$key] = $value - $a[0];\n    }\n    var_dump($b);\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy1ujzk96.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_reduce(\n    \
    \  array_slice($xs, 1),\n      function($acc, $x) {\n        return array_reduce(\n\
    \            range(1, count($acc)),\n            function($acc, $i) {\n      \
    \        return $acc * pow($x, $i);\n            },\n            $acc);\n    \
    \  },\n      array_shift($xs));\n}\n</code>\n<|/ a tags=php,function,php-7,arrays\
    \ |>\n<| c |>\nThanks for answer. I know about this function and already used\
    \ it but i need to do it in PHP 7 and i dont know how can i use it in PHP 7.\n\
    <|/ c |>\n<| c |>\nIf i get it right here you used a polynom that has 1 parameter\
    \ and its coefficient is defined like in this example: y^2 x^3 + 3x where y is\
    \ the constant and x is every number from 1-10. My polynom is a polynomial like\
    \ this:\n\nx^5 x^3 + x^2 x + 1\n<|/ c |>\n<| c |>\nHmmm, i dont really understand\
    \ how can i use your function to get my polynomial in this format:\nx^5 x^3 +\
    \ x^2 x + 1\n<|/ c |>\n<| a tags=php,function,php-7,arrays |>\nI see you already\
    \ got an answer but for those who also want a PHP version that works on PHP 7\
    \ and maybe others, you can use this function:\n<code>\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsxd1o9bp.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // initialize and fill in ys\
    \ with zeros\n  $ys = array_fill(0, count($xs), 0);\n  // first term of result\
    \ is 1\n  $ys[1] = 1;\n  // next two are first and second terms\n  $ys[2] = $ys[1];\n\
    \  foreach ($xs as $x => $coef)\n    $ys[$x + 2] = $ys[$x + 1] * $x + $ys[$x +\
    \ 1];\n  return $ys;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvci1am49.php:26\n\
    Stack trace:\n#0 /tmp/tmpvci1am49.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvci1am49.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if (!$n)\
    \ {\n    return [];\n  }\n  $f = array_shift($xs);\n  $d = [$f];\n  for ($i =\
    \ 0; $i < $n; ++$i) {\n    $x = array_shift($xs);\n    $d[] = $x * $d[$i];\n \
    \ }\n  return $d;\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ynxp1g6.php:27\n\
    Stack trace:\n#0 /tmp/tmp7ynxp1g6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7ynxp1g6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Get degree of this polynomial.\n\
    \  // Get number of coefficients in this polynomial\n  // Get length of xs array.\n\
    \  $d = count($xs) - 1;\n  // Get number of coefficients in derivative polynomial.\n\
    \  // If degree < 0 then return []\n  // If coefficient of degree < 0 then return\
    \ []\n  // If coefficient of degree > number of coefficients return []\n  if ($d\
    \ < 0) {\n    return [];\n  }\n  $deg = count($xs[$d]) - 1;\n  $coeffs = $d *\
    \ [$d];\n  $coeffs = array_pad($coeffs, $deg + 1, 0);\n  // multiply xs[d] coefficient\
    \ by degree\n  for ($i = 0; $i < $deg; $i++) {\n    $coeffs[$i] += $xs[$d][$i]\
    \ * $deg;\n  }\n  return $coeffs;\n}\n</code>\n<|/ a tags=php,polynomials dscore=1\
    \ |>\n<| c |>\nYou might want to explain a bit about the algorithm rather than\
    \ just posting a block of code.\n<|/ c |>\n<| a |>\nI've written the code in R\
    \ and used rpy2 to convert it to PHP. \n<code>\nfunction candidate(...$args) {\n\
    \    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfdvxamjs.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ < 2) {\n    return null;\n  }\n\n  // This code will fail for an empty vector.\n\
    \  $dxs = array_fill(0, $n, 1);\n  for ($i = 1; $i < $n; ++$i) {\n    $dxs[$i\
    \ - 1] = $xs[$i];\n    $dxs[$i] = $xs[$i] - $xs[$i - 1];\n  }\n  return $dxs;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args) {\n\
    \    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxsh8pfjg.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (empty($xs)) {\n     \
    \   return null;\n    }\n    $n = count($xs);\n    if ($n === 0) {\n        return\
    \ null;\n    }\n    $derivate = array();\n    foreach ($xs as $x) {\n        $derivate[]\
    \ = $x * self::derivative($xs);\n    }\n    return $derivate;\n}\n\n/**\n * Calculate\
    \ the average of two numbers.\n * @param $x\n * @param $y\n * @return int|float\n\
    \ */\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use \"self\" when no class scope is active in /tmp/tmpezzbs7oi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ <= 2) {\n    return array(1);\n  }\n  $f = $xs[0];\n  for ($i = 1; $i < $n;\
    \ ++$i) {\n    $f *= $xs[$i];\n  }\n  return array($f / $n);\n}\n\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf12gqsz3.php:27\n\
    Stack trace:\n#0 /tmp/tmpf12gqsz3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpf12gqsz3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = $xs[1];\n  for ($i = 0;\
    \ $i < count($xs); $i++) {\n    $d *= ($xs[$i + 1] - $xs[$i]);\n  }\n  return\
    \ $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ycn2x87.php:22\n\
    Stack trace:\n#0 /tmp/tmp5ycn2x87.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5ycn2x87.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Return array of derivatives\
    \ of xs.\n  // If x or xs is empty, return empty array.\n  // >>> derivative([1,\
    \ 2, 3])\n  // [2, 6]\n  // >>> derivative([1, 2, 3])\n  // [2, 6]\n  // >>> derivative([])\n\
    \  // []\n  if (!$xs) return [];\n  $d = [];\n  for($x = count($xs) - 1; $x >\
    \ 0; $x --) {\n    $d[$x] = $d[$x - 1] * $xs[$x];\n  }\n  return $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxwa6ojl.php:31\n\
    Stack trace:\n#0 /tmp/tmpbxwa6ojl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbxwa6ojl.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!is_array($xs)) return\
    \ false;\n\n  if (count($xs) === 1) return array(1);\n  return array_map(function($x,\
    \ $i) { return $x * $xs[$i]; }, $xs, array_fill(0, count($xs) - 1, 1));\n}\n\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xpg_pqc.php:21\n\
    Stack trace:\n#0 /tmp/tmp9xpg_pqc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9xpg_pqc.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $f = $xs;\n  list($first) =\
    \ $xs;\n  for ($i = count($xs) - 2; $i >= 0; $i -= 2) {\n    $f += [$xs[$i] *\
    \ $xs[$i + 1]];\n  }\n  return $f;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu66c020w.php:23\n\
    Stack trace:\n#0 /tmp/tmpu66c020w.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu66c020w.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Initialize result\n  $r\
    \ = array(1);\n  // Loop over all coefficients\n  for ($n = 0; $n < count($xs);\
    \ $n++) {\n    // Multiply coefficient by x^(n+1) and sum all\n    $r[] = $r[$n\
    \ - 1] * pow($xs[$n], $n + 1);\n  }\n  // Return derivative\n  return $r;\n}\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj21jfbi6.php:25\n\
    Stack trace:\n#0 /tmp/tmpj21jfbi6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj21jfbi6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    // Return derivative of a\
    \ polynomial in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    //\
    \ [1, 4, 12, 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    $d = new\
    \ stdclass();\n    $d->c = 0;\n    $d->x = 0;\n    $d->y = 0;\n    $d->n = 0;\n\
    \    $d->m = count($xs);\n    \n    for($i = 0; $i < $d->m; $i++) {\n        $d->y\
    \ += $xs[$i] * $i;\n        $d->c += $xs[$i];\n        $d->n++;\n    }\n    $d->y\
    \ = $d->y / $d->c;\n    \n    // If degree is odd, add one to the power of x because\
    \ polynomials are differentiated wrt to x \n    if ($d->n % 2 == 1)\n        $d->x++;\n\
    \    \n    return $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptfalks75.php:41\n\
    Stack trace:\n#0 /tmp/tmptfalks75.php(48): test()\n#1 {main}\n  thrown in /tmp/tmptfalks75.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $f = array_shift($xs);\n  $d\
    \ = array_shift($xs);\n\n  $d0 = $d * $f;\n  $d = $d0 - $f * $d;\n\n  return [round($d),\
    \ $d];\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbw7r3va7.php:24\n\
    Stack trace:\n#0 /tmp/tmpbw7r3va7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbw7r3va7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $dxs = array_fill(0, count($xs),\
    \ 0);\n  $dxs[1] = 1;\n  for ($x = 2; $x < count($xs); $x++) {\n    $dxs[$x -\
    \ 1] = $dxs[$x] + $xs[$x] * $dxs[$x - 2];\n  }\n  return $dxs;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmd8phomq.php:23\n\
    Stack trace:\n#0 /tmp/tmpmd8phomq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmd8phomq.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $result = array();\n    $a\
    \ = count($xs);\n    for ($i = 0; $i < $a; $i++) {\n        $result[$i] = $xs[$i];\n\
    \        for ($j = ($i - 1); $j >= 0; $j--) {\n            $result[$i] -= $result[$j]\
    \ * $xs[$j];\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgp8q6v99.php:26\n\
    Stack trace:\n#0 /tmp/tmpgp8q6v99.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgp8q6v99.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  foreach ($xs\
    \ as $x) {\n    $result[] = $x;\n  }\n  $result[] = 1;\n  return array_map(function\
    \ ($x) {\n    return $x * $result[0];\n  }, $xs);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php |>\nFor a more robust solution, you can use:\n<code>\n$xs\
    \ = [1, 2, 3, 4];\n$ys = [1, 3, 2, 4];\n\n$result = array();\nforeach ($xs as\
    \ $i => $x) {\n    $result[] = ($ys[$i] - $ys[$i - 1]) / ($x - $xs[$i - 1]);\n\
    }\n\nvar_dump($result);\n</code>\nThis should give you:\n<code>\narray (size=4)\n\
    \  0 => float 0\n  1 => float 0.6666666666666667\n  2 => float 0.3333333333333333\n\
    \  3 => float 0\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere is how to\
    \ calculate derivatives correctly with PHP\n<code>\n$xs = [1, 2, 3, 4, 5];\n$ys\
    \ = [1, 3, 2, 4, 5];\n\n$result = array();\nforeach ($xs as $i => $x) {\n    $result[]\
    \ = round($ys[$i] / $x, 6);\n}\n\nvar_dump($result);\n</code>\nResult:\n<code>\n\
    array (size=4)\n  0 => float 0\n  1 => float 0.666667\n  2 => float 0.33333\n\
    \  3 => float 0\n</code>\n<|/ a tags=php |>\n<| c |>\nIt's not the correct solution.\
    \ The question is about calculating the derivative of a polynomial in reverse.\n\
    <|/ c |>\n<| c |>\nI thought that was what the OP meant. Maybe you're right. I\
    \ added a line to show how to get the original array values back.\n<|/ c |>\n\
    <| c |>\nYeah, I'm wrong. I deleted my comment :)\n<|/ c |>\n<| a tags=php |>\n\
    I realise this is an old post but I was looking for the same thing and found a\
    \ great library that does this. \nhttp://php-derivative.sourceforge.net/\nThe\
    \ library is extremely versatile and allows you to create polynomials using arrays,\
    \ strings or numbers.\nYou can find the example here (scroll to the bottom): http://www.phpderivative.org/examples/example3.php\n\
    <code>\n$y = new Poly();\n$y->addTerms(new Poly(array('a' => 1, 'b' => 2)));\n\
    $y->addTerms(new Poly(array('a' => 3, 'b' => \nfunction candidate(...$args) {\n\
    \    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6_wb5sag.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function($x)\
    \ {\n    return $x * $x;\n  }, array_slice($xs, 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmb67_t5.php:20\n\
    Stack trace:\n#0 /tmp/tmpqmb67_t5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqmb67_t5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $ys = [1 ];\n    for ($i\
    \ = 2; $i < count($xs); $i++) {\n        $ys = array_merge($ys, array_fill(0,\
    \ $i, $xs[$i - 1] * $ys[$i - 1]));\n    }\n    return $ys;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5r6q73g4.php:22\n\
    Stack trace:\n#0 /tmp/tmp5r6q73g4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5r6q73g4.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function ($x)\
    \ {\n    return $x * $x;\n  }, array_slice($xs, 1));\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04ty3fbp.php:19\n\
    Stack trace:\n#0 /tmp/tmp04ty3fbp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp04ty3fbp.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $nn = count($xs);\n  if ($nn\
    \ < 2) {\n    return array_fill(0, $nn, 0);\n  }\n  $dd = [];\n  for ($i = 0;\
    \ $i < $nn; ++$i) {\n    $dd[$i] = $xs[$i];\n    for ($j = $i + 1; $j < $nn; ++$j)\
    \ {\n      $dd[$i] -= $xs[$j] * $dd[$j];\n    }\n  }\n  return $dd;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ncdivy0.php:29\n\
    Stack trace:\n#0 /tmp/tmp8ncdivy0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8ncdivy0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (!count($xs)) return $xs;\n\
    \    // return pow($xs[0], count($xs) - 1) * (pow(array_pop($xs), 1) ** count($xs));\n\
    \    $x = array_pop($xs);\n    $y = array_shift($xs);\n    return array_map(function\
    \ ($a) use ($x, $y) {\n        return $a * ($x * ($y * $y));\n    }, range(1,\
    \ count($xs)));\n}\n</code>\n<|/ a dscore=3 tags=math,php,algorithm,curve-fitting\
    \ |>\n<| c |>\nHow does it \"work well\" for you? Have you tried my function?\
    \ How is it different from your function?\n<|/ c |>\n<| c |>\nI didnt test it\
    \ myself, but i think its better than my function, im going to try it.\n<|/ c\
    \ |>\n<| c |>\ni tried it, and i got these results:\n\nFor my function: 0.0000000000\
    \ \nFor yours: 0.00100000000000000004\n<|/ c |>\n<| c |>\nThen you are probably\
    \ doing something wrong. I just tried both functions on random numbers and I get\
    \ the same results. Are you sure you are not using any kind of rounding or rounding\
    \ errors? Are you testing it with some random numbers? Can you give me a concrete\
    \ example where it fails?\n<|/ c |>\n<| c |>\nI tested with random numbers, my\
    \ function is giving the same result, yours is giving different results.\n<|/\
    \ c |>\n<| a dscore=2 |>\nI wrote some code in Python to calculate this formula\
    \ for you:\n<code>\ndef formula(x, a, b, c, d):\n    return (-b + math.sqrt((b\
    \ * b) - (4.0 * b * c + d * d))) / (2.0 * c)\n</code>\nThe first two arguments\
    \ are the x and y coordinates. I used random coordinates to test it out, and found\
    \ the results similar to the ones above. I found this formula on Wikipedia on\
    \ curve-fitting, where you can also find more information about these formulas\
    \ in their own section.\nHere's my Python code (I'm using Python 3.8.5, so if\
    \ you're using something else, you might have to replace 'math' with its module\
    \ name):\n<code>\nimport random\n\ndef formula(x, a, b, c, d):\n    return (-b\
    \ + math.sqrt((b * b) - (4.0 * b * c + d * d))) / (2.0 * c)\n\ndef random():\n\
    \    return random.uniform(-10, 10), random.uniform(-10, 10)\n\ndef func(x, a,\
    \ b, c, d):\n    return formula(x, a, b, c, d)\n\nfor i in range(20):\n    x,\
    \ y = random()\n    a, b, c, d = func(x, y, a, b, c)\n    print(x, y)\n</code>\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpny6uaj_s.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = $xs[0];\n  for ($i = 1;\
    \ $i < count($xs); $i++) {\n    $d *= $xs[$i];\n  }\n  return $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbbwt5m4.php:22\n\
    Stack trace:\n#0 /tmp/tmprbbwt5m4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprbbwt5m4.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  for ($i =\
    \ 0, $size = count($xs) - 1; $i < $size; $i++) {\n    $result[$i] = $xs[$i] +\
    \ $xs[$i + 1] * $xs[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnzsdd_3x.php:22\n\
    Stack trace:\n#0 /tmp/tmpnzsdd_3x.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnzsdd_3x.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs) - 1;\n  return\
    \ array_map(function ($x) use ($n) {\n    return $xs[$n];\n  }, array_slice($xs,\
    \ 0, $n + 1));\n}\n</code>\n<|/ a tags=math,php |>\n<| c |>\nGreat solution. Thank\
    \ you!\n<|/ c |>\n<| c |>\nAh, very nice solution. Thank you!\n<|/ c |>\n<| a\
    \ |>\nI wrote a function for this. It calculates derivative of a polynomial using\
    \ recursion without loops or external arrays, just using recursion. \n<code>\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1mcvv0f9.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function($x)\
    \ {\n    return ($x * $x) / array_reduce($xs, function($acc, $v) {\n      return\
    \ $acc + $v * $v;\n    }, 0);\n  }, array_fill(0, count($xs) + 1, 0));\n}\n</code>\n\
    Note that for these functions to work, you must have access to anonymous functions,\
    \ which may not be possible if you're running a PHP version older than 5.3.\n\
    <|/ a |>\n<| a |>\nA simple one-line solution in PHP:\n<code>\n$array = range(1,\
    \ 5);\n$array[] = array_sum($array) / count($array);\n</code>\n<|/ a tags=math,php,arrays\
    \ dscore=4 |>\n<| c |>\nThe array will be empty after the sum.\n<|/ c |>\n<| c\
    \ |>\nJust a warning, this solution is O(n\xB2)\n<|/ c |>\n<| a |>\n<code>\n$array\
    \ = array(1, 2, 3, 5, 8);\n$array[] = array_sum($array) / count($array);\n</code>\n\
    <|/ a tags=math,php,arrays dscore=4 |>\n<| a dscore=4 |>\nYou can write your own\
    \ function that does the same. Something like that:\n<code>\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphg4b1ivo.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $x = array_shift($xs);\n  return\
    \ array_map(function ($ys) use ($x) {\n    return array_sum($ys * array_repeat($x,\
    \ count($ys)));\n  }, $xs);\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_repeat()\
    \ in /tmp/tmp7aqy4jta.php:12\nStack trace:\n#0 [internal function]: {closure}(1)\n\
    #1 /tmp/tmp7aqy4jta.php(13): array_map(Object(Closure), Array)\n#2 /tmp/tmp7aqy4jta.php(17):\
    \ derivative(Array)\n#3 /tmp/tmp7aqy4jta.php(21): candidate(Array)\n#4 /tmp/tmp7aqy4jta.php(28):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmp7aqy4jta.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (empty($xs)) {\n     \
    \   return array();\n    }\n\n    return $xs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcyuqmajb.php:22\n\
    Stack trace:\n#0 /tmp/tmpcyuqmajb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcyuqmajb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ds = [];\n  foreach ($xs as\
    \ $x) {\n    $ds[] = $x * $x;\n  }\n  return $ds;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpay3cl89d.php:22\n\
    Stack trace:\n#0 /tmp/tmpay3cl89d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpay3cl89d.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (empty($xs)) return [];\n\
    \  $result = [];\n  $prev = $xs[0];\n  for ($i = 1; $i < count($xs); $i++) {\n\
    \    $result[] = $prev * ($xs[$i] - $xs[$i - 1]);\n    $prev = $xs[$i];\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw07xyfwr.php:25\n\
    Stack trace:\n#0 /tmp/tmpw07xyfwr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw07xyfwr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $deriv = [];\n  $x = $xs[0];\n\
    \  for ($i = 1; $i < count($xs); $i++) {\n    $x = $x * $xs[$i];\n    $deriv[$i]\
    \ = $x;\n  }\n  return $deriv;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbndw5lk8.php:24\n\
    Stack trace:\n#0 /tmp/tmpbndw5lk8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbndw5lk8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!isset($xs[0])) return\
    \ null;\n  if (isset($xs[0])) return $xs[0];\n  if (count($xs) === 1) return null;\n\
    \  return array_sum($xs);\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80l0rlsn.php:21\n\
    Stack trace:\n#0 /tmp/tmp80l0rlsn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp80l0rlsn.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  $dxs =\
    \ array_fill(0, $n - 1, 0);\n  $dxs[$n - 1] = 0;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $dxs[$i] = $dxs[$i - 1] * $xs[$i] + $xs[$i - 1];\n  }\n  return $dxs;\n\
    }\n</code>\n<|/ a tags=php,math,polynomials dscore=5 |>\n<| c |>\n+1 for providing\
    \ the correct formula rather than the wrong formula. Also, good idea about the\
    \ array sizes.\n<|/ c |>\n<| c |>\nI added a comment at the top of the script\
    \ explaining the usage of xs[] and dxs[]\n<|/ c |>\n<| c |>\nVery neat solution.\
    \ Just to add one more thing. Be careful when evaluating a polynomial expression\
    \ this way. You may want to check if the degree of the polynomial is equal to\
    \ degree of input array. For instance if you want to evaluate `1^2+2^3+3^5` expression\
    \ make sure you add all the coefficients as separate elements to your array before\
    \ evaluating like `[1, 5, 25]`. Otherwise you will get wrong result.\n<|/ c |>\n\
    <| c |>\nGreat solution. Just a minor clarification: You should be aware that\
    \ PHP's [`pow()`](http://www.php.net/manual/en/function.pow.php) function uses\
    \ [**exponential notation**](http://www.mathsisfun.com/calculus/exponentiation.html),\
    \ so to evaluate `x^y`, you should actually use `pow(pow(x, y), 1)` instead of\
    \ `pow(x,y)`.\n<|/ c |>\n<| c |>\nOne problem here is that pow() returns a float,\
    \ so if you're trying to calculate something like `pow($x, $y) - $y` where $y\
    \ is a decimal number then the result of $x ^ $y will also be a float.\n<|/ c\
    \ |>\n<| a dscore=4 |>\nThe first formula is the way polynomial evaluation is\
    \ done in Computer Science.\nThe second formula is one approach to the problem.\
    \ Basically, the second formula is more of a calculus approach than a programming\
    \ approach.\nWikipedia has a nice article on Differential equations.\n<|/ a tags=php,math,polynomials\
    \ |>\n<| a tags=php,math,polynomials |>\nThe easiest way is to first convert the\
    \ input to coefficients and evaluate the polynomial in reverse order. The example\
    \ below takes input as string, converts it into array and evaluates the polynomial\
    \ equation.\n<code>\n<?php\nclass Polynomial {\n    private $coefficients = array();\n\
    \n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpajzrec9r.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    // Your code here\n    if\
    \ (count($xs) > 1) {\n        return derivative(array_slice($xs, 1)) * $xs[0];\n\
    \    }\n    return array_pop($xs);\n}\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm26a42tn.php:21\n\
    Stack trace:\n#0 /tmp/tmpm26a42tn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpm26a42tn.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!is_array($xs)) return\
    \ array(0);\n  $d = array();\n  for ($i = 0, $c = count($xs); $i < $c; $i++) {\n\
    \    $d[$i] = $xs[$i];\n    for ($j = 1; $j <= $i; $j++) $d[$i] -= $xs[$j] * $d[$j];\n\
    \  }\n  return $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd_a7n87.php:24\n\
    Stack trace:\n#0 /tmp/tmpfd_a7n87.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfd_a7n87.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function ($x)\
    \ {\n    return array_sum(array_map(function ($y) {\n      return pow($x, $y);\n\
    \    }, range(1, count($xs) - 1)));\n  }, $xs);\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This one works too, but I think it is too complicated and therefore not that easy\
    \ to understand. I would prefer a shorter one. But thank you anyway!\n<|/ c |>\n\
    <| a tags=php,math |>\nA simple way to find roots for polynomials is to use Newton's\
    \ method or secant method.\n<code>\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0sx4pq7c.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = 1;\n  for ($i = count($xs)\
    \ - 1;; --$i) {\n    $xs[$i] += $d;\n    $d *= $xs[$i];\n    if (!$i) {\n    \
    \  break;\n    }\n  }\n  return $d;\n}\n</code>\n<|/ a |>\n<| c |>\nI really appreciate\
    \ your help. Thank you, this is what I was looking for.\n<|/ c |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdue89_8g.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ === 0) {\n    return [];\n  }\n  $d = [1 / ($xs[$n - 1] + $xs[0])];\n  for ($i\
    \ = 2; $i <= $n; ++$i) {\n    $d[$i] = $d[$i - 1] * $xs[$i] - $d[$i - 2] * $xs[$i\
    \ - 2];\n  }\n  return $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vurt6_d.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vurt6_d.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5vurt6_d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // return derivative of polynomial\
    \ with 0 coefficients\n  if (count($xs) == 0) {\n    return array(0);\n  }\n \
    \ // return the derivative\n  return array(\n    $xs[1],\n    $xs[2] + ($xs[0]\
    \ * $xs[2])\n  );\n}\n</code>\n<|/ a |>\n<| c |>\nOh, yes indeed. I made a mistake\
    \ in my answer :) It would be more efficient to use an array to store the coefficients\
    \ instead of a string.\n<|/ c |>\n<| c |>\nThank you very much. I tested your\
    \ code, but with your example `echo derivative([2, 3, 4, 5, 6, 7, 8]);` I get\
    \ this output `0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000`.\
    \ So I guess it's not working as expected. I'm sorry for the inconvenience, I\
    \ edited my question and added my php code in the question.\n<|/ c |>\n<| c |>\n\
    I tested your code, and I get the expected output with `echo derivative([2, 3,\
    \ 5, 7]);`. The output is `1.000000 2.000000 5.000000 7.000000`. What exactly\
    \ did you test? Please test it again and show me your exact input.\n<|/ c |>\n\
    <| c |>\nOh, I made a mistake. My fault. You're right, your code works perfectly.\
    \ I just tested it with my real datas and it worked. Thank you very much!\n<|/\
    \ c |>\n<| c |>\nYou're welcome. Please accept my answer if you think it solves\
    \ your problem :)\n<|/ c |>\n<| a |>\nHere's a PHP implementation that does not\
    \ require a loop and is relatively fast. It also handles polynomials with an even\
    \ number of terms.\n<code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn0ipqx_i.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (count($xs) <= 1) return\
    \ [];\n  $xs[0] *= $xs[1];\n  $xs[0] += $xs[2];\n  return array_slice($xs, 1,\
    \ count($xs) - 1);\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkc12979l.php:20\n\
    Stack trace:\n#0 /tmp/tmpkc12979l.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkc12979l.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = [];\n  for ($x = count($xs)\
    \ - 1; $x >= 0; $x--) {\n    $xpow = $xs[$x];\n    $ys[$x]   = $ys[$x-1] + $xpow;\n\
    \  }\n  return $ys;\n}\n\n/**\n * Returns a factorial of a number.\n * >>> factorial(1)\n\
    \ * 1\n * >>> factorial(2)\n * 2\n * >>> factorial(5)\n * 120\n * >>> factorial(10)\n\
    \ * 1040\n * >>> factorial(20)\n * 479001600\n * >>> factorial(30)\n * 265252859812\n\
    \ * >>> factorial(40)\n * 140737488355328\n * >>> factorial(50)\n * 549755813888032\n\
    \ * >>> factorial(60)\n * 14073748835532800\n * >>> factorial(100)\n * 17179869184008601600\n\
    \ * >>> factorial(200)\n * 78813283317280000000000000000000000000000000000000000\n\
    \ * >>> factorial(300)\n * 15728640089637291200\n * >>> factorial(800)\n * 150000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(1000)\n * 11771463712000000000000000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(2000)\n * 666200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(3000)\n * 400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(10000)\n * 33000000000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(100000)\n * 3300000000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(1000000)\n * 330000000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(10000000)\n * 33000000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(100000000)\n * 3300000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(1000000000)\n * 330000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(10000000000)\n * 33000000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(100000000000)\n * 3300000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(1000000000000)\n * 330000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(10000000000000)\n * 33000000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(100000000000000)\n * 3300000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(1000000000000000)\n * 330000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(10000000000000000)\n * 33000000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(100000000000000000)\n * 3300000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(1000000000000000000)\n * 330000000000000000000000000000000000000000000000000\n\
    \ * >>> factorial(10000000000000000000)\n * 33000000000000000000000000000000000000000000000000\n\
    \ * >>> \nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 18 in /tmp/tmprnqmg9oh.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  foreach ($xs\
    \ as $x) {\n    $result[] = $x;\n    $result[] = array_reduce($result, function\
    \ ($acc, $value) {\n      return $acc + $value * $x;\n    });\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74kp7g_g.php:24\n\
    Stack trace:\n#0 /tmp/tmp74kp7g_g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp74kp7g_g.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return [\n      array_reduce($xs,\
    \ 0, function ($acc, $x) {\n        return $acc + ($x * $x);\n      }),\n    \
    \  array_reduce($xs, 1, function ($acc, $x) {\n        return $acc + ($x * $x\
    \ * ($x - 1));\n      })\n  ];\n}\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reduce() expects parameter 2 to be a valid callback, no\
    \ array or string given in /tmp/tmpgl4uethk.php on line 13\n\nWarning: array_reduce()\
    \ expects parameter 2 to be a valid callback, no array or string given in /tmp/tmpgl4uethk.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgl4uethk.php:24\n\
    Stack trace:\n#0 /tmp/tmpgl4uethk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgl4uethk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = $xs[0];\n  for($i = 1,\
    \ $len = count($xs) - 1, $x = $xs[$i]; $i < $len; $i++) {\n    $ys = $x * $ys\
    \ + $xs[$i];\n  }\n  return $ys;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xwbl3hg.php:22\n\
    Stack trace:\n#0 /tmp/tmp5xwbl3hg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5xwbl3hg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    return array_map(function($x)\
    \ {\n        return $x * $x;\n    }, $xs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tq4yomn.php:20\n\
    Stack trace:\n#0 /tmp/tmp0tq4yomn.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp0tq4yomn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $fx = array_shift($xs);\n \
    \ return array_map(function ($x) { return $fx * $x; }, $xs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpmpquve.php:19\n\
    Stack trace:\n#0 /tmp/tmprpmpquve.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprpmpquve.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  for ($i =\
    \ count($xs) - 1; $i >= 0; $i--) {\n    $result[$i] = $xs[$i] * $xs[$i];\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nthanks for the\
    \ answer. I forgot to mention that the polynomial is unknown, i.e. there could\
    \ be n number of coefficients and each of them should be used as an independent\
    \ variable. Also, there could be n number of independent variables. Please let\
    \ me know if you can think of any way around this.\n<|/ c |>\n<| c |>\n: You could\
    \ store all values in a multidimensional array. Multidimensional arrays are more\
    \ or less a standard data structure in PHP. Maybe try something like `array(\"\
    x\" => array(1, 2, 3, ...), \"y\" => array(1, 2, 3, 4, ...))`\n<|/ c |>\n<| c\
    \ |>\nI tried that but the problem is that I have to find coefficients using the\
    \ equation. For example, my polynomial looks like this (10*x^2 + 20*x) and when\
    \ using the equation 10*x^2 + 20*x, I should find coefficients 2 and 3. But when\
    \ I use your solution, I can find only 1.\n<|/ c |>\n<| c |>\n: I understood what\
    \ you're saying. You have to solve the polynomial for a single `x` and then multiply\
    \ this single value to the coefficients of your polynomial. Something like `(x^2\
    \ + x)*(10*x^2 + 20*x) = (10*x^2 + 20*x)` but since you only have one value, there's\
    \ no way to get a second value. That's why you only get the first coefficient.\n\
    <|/ c |>\n<| c |>\n: I added another solution for you.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n\n$xs = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n\n\
    $d = 0;\n$a = 1;\n$x= 1;\nforeach($xs as $x1)\n{\n    $d = $d + $a*$x;\n    $a\
    \ = $a*$x1;\n    $x = $x*$x1;\n}\n\n$result = $d;\n\necho '<pre>';\nprint_r($xs);\n\
    echo '</pre>';\necho '<pre>';\nprint_r($result);\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6d6mvf4o.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = [1 => 0];\n  foreach ($xs\
    \ as $x) {\n    list($n,) = $x;\n    for ($i = 0; $i < $n; $i++) {\n      $d =\
    \ array_merge($d, array_fill(0, $n, 0));\n    }\n  }\n  return array_map(function($n)\
    \ {\n    return array_sum($n);\n  }, $d);\n}\n\n/**\n * Evaluate an expression\
    \ using the coefficients stored in $xs.\n * $xs is the list of variables in an\
    \ expression.\n * Returns an array of doubles representing the expression evaluation.\n\
    \ */\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, int given in /tmp/tmpeda_x8lb.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeda_x8lb.php:32\n\
    Stack trace:\n#0 /tmp/tmpeda_x8lb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpeda_x8lb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (empty($xs)) {\n    return\
    \ array();\n  }\n  $result = array();\n  for ($i = 0, $len = count($xs); $i <\
    \ $len; ++$i) {\n    $result[] = ($xs[$i] - $xs[$i - 1]) / ($xs[$i] - $xs[i -\
    \ 1]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant i - assumed 'i' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpf3ft0sux.php on line 15\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpf3ft0sux.php on line 15\n\nWarning:\
    \ Use of undefined constant i - assumed 'i' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpf3ft0sux.php on line 15\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpf3ft0sux.php on line 15\n\nWarning: Use of undefined\
    \ constant i - assumed 'i' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpf3ft0sux.php on line 15\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpf3ft0sux.php on line 15\n\nWarning: Use of undefined constant i -\
    \ assumed 'i' (this will throw an Error in a future version of PHP) in /tmp/tmpf3ft0sux.php\
    \ on line 15\n\nWarning: A non-numeric value encountered in /tmp/tmpf3ft0sux.php\
    \ on line 15\n\nWarning: Use of undefined constant i - assumed 'i' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpf3ft0sux.php on line 15\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpf3ft0sux.php on line 15\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf3ft0sux.php:25\nStack\
    \ trace:\n#0 /tmp/tmpf3ft0sux.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf3ft0sux.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ == 0) {\n    return null;\n  }\n\n  $d = $xs[1];\n  for ($i = 1; $i < $n - 1;\
    \ $i++) {\n    $d *= $xs[$i];\n  }\n  $d *= $xs[$n - 1];\n\n  return $d;\n}\n\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuntx58l.php:29\n\
    Stack trace:\n#0 /tmp/tmpiuntx58l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiuntx58l.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = $xs;\n  for ($i = count($xs)\
    \ - 1; $i >= 0; $i--)\n    $d .= ($xs[$i] / $xs[$i + 1] - $d[count($d) - 1]);\n\
    \  return $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpwn1wh_i7.php on line 12\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpwn1wh_i7.php on line 12\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpwn1wh_i7.php on line 12\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmpwn1wh_i7.php on line\
    \ 12\n\nWarning: A non-numeric value encountered in /tmp/tmpwn1wh_i7.php on line\
    \ 12\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpwn1wh_i7.php on line 12\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpwn1wh_i7.php on line 12\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpwn1wh_i7.php\
    \ on line 12\n\nWarning: A non-numeric value encountered in /tmp/tmpwn1wh_i7.php\
    \ on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwn1wh_i7.php:21\n\
    Stack trace:\n#0 /tmp/tmpwn1wh_i7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwn1wh_i7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (count($xs) === 0) return\
    \ null;\n    $d = $xs[0];\n    for ($i = 1; $i < count($xs); $i++) {\n       \
    \ $d *= $xs[$i];\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n\
    \    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnw13107a.php:23\n\
    Stack trace:\n#0 /tmp/tmpnw13107a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnw13107a.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = $xs[0];\n  for ($i = 1,\
    \ $n = count($xs); $i < $n; ++$i) {\n    $d *= ($xs[$i] - $xs[$i - 1]);\n  }\n\
    \  return $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmpwqvav.php:22\n\
    Stack trace:\n#0 /tmp/tmpvmpwqvav.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvmpwqvav.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $x = array_shift($xs);\n\n\
    \  // If it has only one point (point-at-zero case) then we return it directly\n\
    \  // and do not evaluate the derivative.\n  if ($x == 0) {\n    return $xs;\n\
    \  }\n\n  // First we calculate the higher order derivative.\n  // >>> derivative([-2,\
    \ 3, 1])\n  // [-2, '3 * 2^(-1) + 2', '3 * 2^(-1) - 1']\n  $ds = array_map(function\
    \ ($x) {\n    // If the first order derivative is undefined then we return undefined.\n\
    \    // >>> derivative([-2, 0])\n    // '2 * 2^(-1) - 1'\n    return $x === 0\
    \ ? '' : \"$x * $x \";\n  }, array_slice($xs, 1));\n  $ds[0] .= '- 1';\n\n  //\
    \ Now we iterate from the higher order derivative to the lower order derivative.\n\
    \  // >>> derivative([-2, '3 * 2^(-1) + 2', '3 * 2^(-1) - 1])\n  // ['-1', '-3\
    \ * (2 * 2^(-1) - 1) + 3', '-3 * (2 * 2^(-1) - 1)']\n  // >>> derivative(['-1',\
    \ '-3 * (2 * 2^(-1) - 1) + 3', '-3 * (2 * 2^(-1) - 1)'])\n  // ['-1', '-3 * ((2\
    \ * 2^(-1) - 1) / 3) + 3', '-3 * ((2 * 2^(-1) - 1) / 3)']\n  $ds = array_map(function\
    \ ($d) { return $d === '' ? '0' : ($d . '/ ' . str_replace(')', ') * ' . $d);\
    \ }, $ds);\n\n  // And now we evaluate each order.\n  // >>> derivative(['-1',\
    \ '-3 * ((2 * 2^(-1) - 1) / 3) + 3', '-3 * ((2 * 2^(-1) - 1) / 3)'])\n  // ['-1',\
    \ '-3 * (3 / 7) + 3', '-3 * (3 / 7)']\n  $ds = array_map(function ($d) { return\
    \ $d === '' ? $d : ($d . ' + ' . str_repeat($d, strlen($d) - 1) . ') / ' . str_replace(')',\
    \ ') * ' . $d; }, $ds);\n\n  return $xs[0] . ' + ' . implode(' + ', $ds);\n}\n\
    \nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1kwl7_x_.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs = array_map(function ($x)\
    \ { return $x * 1; }, $xs);\n  $product = array_shift($xs);\n  $d = array_shift($xs);\n\
    \  return array_map(function ($x) { return $product / $x; }, $xs);\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\nFor me the function derivative is actually the inverse\
    \ function.\n<code>\n<?php\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjlagum4o.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    return array_map(\n     \
    \   function ($x) {\n            return pow($x, 2);\n        },\n        $xs\n\
    \    );\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcanr8bct.php:23\n\
    Stack trace:\n#0 /tmp/tmpcanr8bct.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcanr8bct.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = $xs[0];\n  for ($i = 1;\
    \ $i < count($xs); $i++) {\n    $d *= $xs[$i];\n  }\n  return $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fjh9mhy.php:22\n\
    Stack trace:\n#0 /tmp/tmp7fjh9mhy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7fjh9mhy.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $x = array_shift($xs);\n  return\
    \ array_reduce($xs, function($result, $x) {\n    return array_map(function($r)\
    \ use ($x) {\n        return $r * $x;\n      }, $result);\n  }, array_fill(0,\
    \ count($xs) - 1, $x));\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5rowegz.php:23\n\
    Stack trace:\n#0 /tmp/tmpy5rowegz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy5rowegz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = [];\n  $y = 0;\n  foreach\
    \ ($xs as $x) { $y += $x * $x; $ys[] = $y; }\n  return $ys;\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptejyv4s7.php:20\n\
    Stack trace:\n#0 /tmp/tmptejyv4s7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptejyv4s7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_reduce($xs, function\
    \ ($acc, $x) {\n    return [$acc * $x];\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpq1vuhzvi.php:11\n\
    Stack trace:\n#0 [internal function]: {closure}(Array, 1)\n#1 /tmp/tmpq1vuhzvi.php(12):\
    \ array_reduce(Array, Object(Closure))\n#2 /tmp/tmpq1vuhzvi.php(16): derivative(Array)\n\
    #3 /tmp/tmpq1vuhzvi.php(20): candidate(Array)\n#4 /tmp/tmpq1vuhzvi.php(27): test()\n\
    #5 {main}\n  thrown in /tmp/tmpq1vuhzvi.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function($x)\
    \ {\n    return $x * $x; // x * x\n  }, $xs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8ieukn8.php:20\n\
    Stack trace:\n#0 /tmp/tmp_8ieukn8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_8ieukn8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $xs = array_map(function($x)\
    \ { return $x * 1; }, $xs);\n    $result = array();\n    array_walk($xs, function(&$x,\
    \ $k) {\n        $result[$k] = $x;\n    });\n    return array_shift($result);\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3pv94z_.php:23\n\
    Stack trace:\n#0 /tmp/tmpp3pv94z_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpp3pv94z_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function ($x)\
    \ {\n    return $x * $xs;\n  }, range(1, count($xs) + 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r5v0zbo.php:20\n\
    Stack trace:\n#0 /tmp/tmp9r5v0zbo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9r5v0zbo.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Return 0 if the array is\
    \ empty.\n  if (!isset($xs[0])) return 0;\n  // Return derivative of this polynomial\
    \ in the same form.\n  return $xs[0];\n}\nfunction candidate(...$args) {\n   \
    \ return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo3c_hgxo.php:20\n\
    Stack trace:\n#0 /tmp/tmpo3c_hgxo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpo3c_hgxo.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $x = array_shift($xs);\n  $d\
    \ = array_shift($xs);\n  return array_map(function($y) use($x, $d) {\n    return\
    \ $y / $x * $d + $y;\n  }, $xs);\n}\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxo1oiuq.php:21\n\
    Stack trace:\n#0 /tmp/tmpbxo1oiuq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbxo1oiuq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ < 2) {\n    return array(0);\n  }\n  $d = array();\n  for ($i = 0; $i < $n -\
    \ 1; $i++) {\n    $d[$i] = 0;\n    for ($j = $i + 1; $j < $n; $j++) {\n      $d[$i]\
    \ += $xs[$j] * ($xs[$j + 1] - $xs[$i]);\n    }\n  }\n  return $d;\n}\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qr1yiwu.php:28\n\
    Stack trace:\n#0 /tmp/tmp6qr1yiwu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6qr1yiwu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (!is_array($xs)) $xs =\
    \ array($xs);\n\n    if (count($xs) === 0) {\n        $derivative = array();\n\
    \    } else {\n        $derivative = array_shift($xs) * array_shift($xs);\n  \
    \      foreach ($xs as $x) $derivative .= $x * $derivative;\n    }\n\n    return\
    \ $derivative;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmq25d_1y.php:27\n\
    Stack trace:\n#0 /tmp/tmpmq25d_1y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmq25d_1y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (empty($xs)) {\n    return\
    \ [];\n  }\n  return array_slice($xs, -1) + [$xs[count($xs) - 1]];\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdcj3yic.php:21\n\
    Stack trace:\n#0 /tmp/tmpmdcj3yic.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmdcj3yic.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Initialize derivative.\n\
    \  $dxs = array();\n  // Check coefficients count.\n  if (count($xs) < 3) {\n\
    \    return $dxs;\n  }\n  // Save a copy of xs.\n  $xs_copy = $xs;\n  // For each\
    \ element of xs.\n  for ($i = 0; $i < count($xs) - 1; $i++) {\n    // Calculate\
    \ derivative element.\n    $dxs[$i] = $xs_copy[$i] + ($xs_copy[$i + 1] - $xs_copy[$i])\
    \ / $i;\n  }\n  // Return derivative.\n  return $dxs;\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpnap99kof.php on line 21\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpnap99kof.php:31\nStack trace:\n\
    #0 /tmp/tmpnap99kof.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnap99kof.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = $xs[0];\n  for ($i = 1;\
    \ $i < count($xs); $i++) {\n    $d *= $xs[$i];\n  }\n  return $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekj_yfpi.php:22\n\
    Stack trace:\n#0 /tmp/tmpekj_yfpi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpekj_yfpi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Find highest order with\
    \ roots.\n  $orders = array_map(function ($x) {\n    return round(max($x));\n\
    \  }, array_values($xs));\n\n  // Evaluate polynominal from highest order to lowest\
    \ order.\n  $poly = array_shift($orders);\n  $poly = eval('return (' . $poly .\
    \ ');');\n\n  // Create array of derivatives.\n  foreach ($orders as $order) {\n\
    \    $x = $order - 1;\n    $derivatives[$order] = $x * $poly;\n  }\n\n  return\
    \ $derivatives;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpu1mbaepe.php on line 12\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpu1mbaepe.php on line 12\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmpu1mbaepe.php\
    \ on line 12\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpu1mbaepe.php on line 12\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpu1mbaepe.php on line 12\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpu1mbaepe.php:33\nStack trace:\n\
    #0 /tmp/tmpu1mbaepe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpu1mbaepe.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Get number of coefficients.\n\
    \  $n = count($xs);\n  // Return zero for empty polynomial.\n  if ($n < 1) return\
    \ array();\n  // Return vector of derivatives of empty polynomial.\n  return array(1\
    \ => $xs[0]);\n  // Get number of terms.\n  $m = floor($n / 2);\n  // Initialize\
    \ array of derivatives of last power of polynomial.\n  $d = array();\n  // Initialize\
    \ current power of polynomial.\n  $p = 1;\n  // Evaluate x(n) in terms of current\
    \ power and accumulate derivatives.\n  for ($i = 0; $i <= $n; $i++) {\n    //\
    \ For first derivative, use x(n) evaluated at current power.\n    if ($i == 0)\
    \ {\n      $d[$i] = $xs[$i];\n    // For other derivatives, use derivative of\
    \ x(n) evaluated at current power.\n    } else {\n      $d[$i] = $p * $xs[$i];\n\
    \    }\n    // Update current power of polynomial.\n    $p = $p * $xs[$i];\n \
    \ }\n  // Return vector of derivatives of polynomial.\n  return $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsrmcxf9.php:43\n\
    Stack trace:\n#0 /tmp/tmphsrmcxf9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmphsrmcxf9.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (count($xs) < 2) return\
    \ array();\n    $f = array_shift($xs);\n    $fx = array_shift($xs);\n    $n =\
    \ count($xs);\n    $d = 0;\n    for($i = 0; $i < $n; $i++) {\n        $d += $fx\
    \ * pow($xs, $i);\n    }\n    return array($d);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2_c119e.php:26\n\
    Stack trace:\n#0 /tmp/tmpu2_c119e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu2_c119e.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map('self::_derivative',\
    \ self::_flattenArray($xs));\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use \"self\" when no class scope is active in /tmp/tmpbq90af5x.php\
    \ on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  list($x, $y) = each($xs);\n\
    \  if ($y == 0) {\n    return 0;\n  }\n  return array(1, $y, $x * ($y - 1));\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplykkark1.php:22\n\
    Stack trace:\n#0 /tmp/tmplykkark1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplykkark1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = $xs[0];\n  for ($i = 1;\
    \ $i < count($xs); $i++) {\n    $d *= $xs[$i];\n  }\n  return $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixtedkbb.php:22\n\
    Stack trace:\n#0 /tmp/tmpixtedkbb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpixtedkbb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = [];\n  for ($i = 0, $l\
    \ = count($xs); $i < $l; $i++) {\n    $d[$i] = $i;\n  }\n  for ($i = 0, $l = count($xs)\
    \ - 1; $i < $l; $i++) {\n    $d[$i] -= 1;\n  }\n  $d = array_reverse($d);\n  $d\
    \ = array_map(function ($value) use ($xs) {\n    return $value * $xs[$value];\n\
    \  }, $d);\n  return $d;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nI don't think\
    \ this works correctly when the input is a string.  You end up with an array like\
    \ `[\"1\", \"1\", \"1\", \"1\", \"1\"]`.\n<|/ c |>\n<| c |>\nYou are absolutely\
    \ right. But I guess that would not be the case if OP does not have a string like\
    \ \"12345\" but an array of strings like [\"1\", \"2\", \"3\", \"4\", \"5\"].\
    \ He should decide whether he wants to treat \"12345\" as a string like \"12345\"\
    \ or a string like an array of characters. I think that he should decide whether\
    \ he wants to treat \"12345\" as a string or as an array of characters. And then\
    \ he should consider whether \"12345\" is a string or a character array. I don't\
    \ know what is the best way to handle this.\n<|/ c |>\n<| c |>\nI like your answer\
    \ because it's simple. My solution was just using math instead of recursion, but\
    \ I'm still glad to have found this solution in SO. :)\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5zgk1c67.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if ($xs < 0 || count($xs) <\
    \ 1) return null;\n  $s = array_shift($xs);\n  $product = array_shift($xs);\n\
    \  $product = array_shift($xs);\n  if (!$product) $product = 1;\n\n  return array($product);\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7lky4bp.php:24\n\
    Stack trace:\n#0 /tmp/tmps7lky4bp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps7lky4bp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if ($xs[0] == 0) {\n    return\
    \ [];\n  }\n\n  $d = [];\n  for ($i = 0, $size = count($xs) - 1; $i < $size; $i++)\
    \ {\n    $d[$i] = $xs[$i] * $xs[$i + 1];\n  }\n  return $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8nb8m93.php:26\n\
    Stack trace:\n#0 /tmp/tmpk8nb8m93.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpk8nb8m93.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $x = array_pop($xs);\n  return\
    \ $x? $xs * derivative($xs) : $xs;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmphi1puod4.php:11\n\
    Stack trace:\n#0 /tmp/tmphi1puod4.php(11): derivative(Array)\n#1 /tmp/tmphi1puod4.php(11):\
    \ derivative(Array)\n#2 /tmp/tmphi1puod4.php(11): derivative(Array)\n#3 /tmp/tmphi1puod4.php(11):\
    \ derivative(Array)\n#4 /tmp/tmphi1puod4.php(15): derivative(Array)\n#5 /tmp/tmphi1puod4.php(19):\
    \ candidate(Array)\n#6 /tmp/tmphi1puod4.php(26): test()\n#7 {main}\n  thrown in\
    \ /tmp/tmphi1puod4.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  foreach ($xs\
    \ as $x) {\n    $result[] = $x;\n    $result[] = $x * $x; // dx^0\n    $result[]\
    \ = array_sum($result); // dx^1\n  }\n  return $result;\n}\n</code>\n<|/ a tags=math,php,polynomial-math,algorithm\
    \ |>\n<| c |>\nPlease provide some explanations.\n<|/ c |>\n<| c |>\nIt's not\
    \ clear what your code is trying to do. Explain what it does in plain English.\
    \ Explain what this code does and how it does it.\n<|/ c |>\n<| a dscore=1 tags=math,php,polynomial-math,algorithm\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpusydigzl.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    return array_map(function\
    \ ($x) { return $x * $x; }, $xs);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYour\
    \ code works for 1 dimensional array, But it won't work for multidimensional array\n\
    <|/ c |>\n<| c |>\nHow would you like to handle multi-dimensional arrays?\n<|/\
    \ c |>\n<| c |>\nYour code gives me `[4, 6, 12, 24, 48, 100]` for your example\
    \ data\n<|/ c |>\n<| c |>\nI have edited my answer with a solution that handles\
    \ multi-dimensional arrays as well.\n<|/ c |>\n<| a dscore=0 |>\nAnother way of\
    \ doing it would be to take the array and perform a for loop with the number of\
    \ elements. Then you could take each element and multiply it by itself and that\
    \ element is the answer. This would work if you wanted to find the derivative\
    \ of a polynomial equation. \nThe code would look like this:\n<code>\n<?php\n\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxmkfwxvb.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (count($xs) < 3) return\
    \ array();\n  $p = $xs[0];\n  $d = 1;\n  for ($i = 1; $i < count($xs) - 1; $i++)\
    \ {\n    $d *= $xs[$i];\n    $d -= $p;\n    $p = $d;\n  }\n  return array($p);\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ob8k9v1.php:26\n\
    Stack trace:\n#0 /tmp/tmp4ob8k9v1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4ob8k9v1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs_size = count($xs);\n  $derivatives\
    \ = array();\n  $derivatives[$xs_size-1] = 1;\n  for($x = $xs_size-2; $x >= 0;\
    \ $x--) {\n    $derivatives[$x] *= $xs[$x+1];\n  }\n  return $derivatives;\n}\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_65mobmp.php:23\n\
    Stack trace:\n#0 /tmp/tmp_65mobmp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_65mobmp.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ds = [];\n  for ($i = 0; $i\
    \ < count($xs); $i++) {\n    $ds[] = $xs[$i] * $xs[$i - 1];\n  }\n  return $ds;\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_iw3u66q.php:22\n\
    Stack trace:\n#0 /tmp/tmp_iw3u66q.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_iw3u66q.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = [];\n  for ($i = 1; $i\
    \ < count($xs); $i++) {\n    $d[$i] = $xs[$i - 1] * $xs[$i];\n  }\n  return $d;\n\
    }\n</code>\nAnd this is the final solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2zz7h2vs.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $derivative = array();\n  for\
    \ ($i = 0; $i < count($xs); $i++) {\n    $derivative[$i] = $xs[$i];\n  }\n  for\
    \ ($i = 1; $i < count($xs) - 1; $i++) {\n    $derivative[$i] = $xs[$i] + $derivative[$i\
    \ - 1] * $xs[$i];\n  }\n  return $derivative;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90w9jhst.php:25\n\
    Stack trace:\n#0 /tmp/tmp90w9jhst.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp90w9jhst.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  foreach ($xs\
    \ as $x) {\n    $result[] = $x * $xs;\n  }\n  return $result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI believe this is the solution I'm looking for. Thank you so\
    \ much! I've been struggling with this for days. I appreciate the help very much!\n\
    <|/ c |>\n<| c |>\nYou're welcome. If this answer solved your problem please accept\
    \ it.\n<|/ c |>\n<| c |>\nI have one more question for you. Do you think it's\
    \ possible to solve this problem without using recursion? I'm very new to PHP\
    \ and I haven't learned recursions yet. I know it's possible but I'm having trouble\
    \ visualizing how to do it. If it's not too much trouble, could you help me understand\
    \ how it would be done? Thanks so much!\n<|/ c |>\n<| c |>\nYou will need to use\
    \ a stack for this problem. Google it for a solution. You could use recursion\
    \ for this but it will not be the fastest solution.\n<|/ c |>\n<| a |>\nA solution\
    \ without recursion:\n<code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu8c711o6.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs = array_reverse($xs);\n\
    \  foreach ($xs as $x) {\n    $xs[] = $x * $x;\n  }\n  return array_sum($xs) *\
    \ -1;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptihiqcyp.php:22\n\
    Stack trace:\n#0 /tmp/tmptihiqcyp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptihiqcyp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ds = array_fill(0, count($xs),\
    \ 0);\n  for ($i = 1; $i < count($xs); $i++) {\n    $ds[$i - 1] = $xs[$i] * $xs[$i\
    \ - 1];\n  }\n  return $ds;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxnoobrp.php:22\n\
    Stack trace:\n#0 /tmp/tmpsxnoobrp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsxnoobrp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $derivative = [];\n  $length\
    \ = count($xs);\n  for ($i = 0; $i < $length; $i++) {\n    $derivative[] = (isset($xs[$i\
    \ + 1]) ? $xs[$i + 1] : 0) - $xs[$i];\n  }\n  return $derivative;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjsy68qu.php:23\n\
    Stack trace:\n#0 /tmp/tmpdjsy68qu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdjsy68qu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs = array_slice($xs, 1);\n\
    \  $y = array_shift($xs);\n  $d = array_shift($xs);\n  return array_map(function($x)\
    \ {\n    return $x * $y;\n  }, $xs);\n}\n\n\nfunction candidate(...$args) {\n\
    \    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67yvmldn.php:24\n\
    Stack trace:\n#0 /tmp/tmp67yvmldn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp67yvmldn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $deriv = [];\n  foreach ($xs\
    \ as $x) {\n    $deriv[] = 1 + $x * $x;\n  }\n  return $deriv;\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9iy6sqr.php:21\n\
    Stack trace:\n#0 /tmp/tmph9iy6sqr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph9iy6sqr.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ < 2) {\n    return $xs;\n  }\n\n  $d = [];\n  for ($i = 0; $i < $n - 1; $i++)\
    \ {\n    $x = $xs[$i];\n    for ($j = $i + 1; $j < $n; $j++) {\n      $xx = $xs[$j]\
    \ * $x;\n      $d[] = $xx;\n    }\n  }\n  return $d;\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9grmgxha.php:30\n\
    Stack trace:\n#0 /tmp/tmp9grmgxha.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9grmgxha.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  for ($i =\
    \ 0; $i < count($xs); $i++) {\n    $result[$i] = $xs[$i];\n  }\n  $result[0] =\
    \ 1;\n  for ($i = 1; $i < count($xs); $i++) {\n    $result[$i] = $result[$i -\
    \ 1] * $xs[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n \
    \   return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3v1ekuy.php:25\n\
    Stack trace:\n#0 /tmp/tmpl3v1ekuy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl3v1ekuy.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(\n    function\
    \ ($x) {\n      return $x * $x;\n    },\n    array_slice($xs, 1)\n  );\n}\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx56ad9ch.php:22\n\
    Stack trace:\n#0 /tmp/tmpx56ad9ch.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpx56ad9ch.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ < 2) {\n    return array();\n  }\n  $ys = array(1);\n  $x = array_shift($xs);\n\
    \  for ($i = 0; $i < $n; ++$i) {\n    $y = $x * $xs[$i];\n    array_push($ys,\
    \ $y);\n    $x = $y;\n  }\n  return $ys;\n}\nfunction candidate(...$args) {\n\
    \    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdax9nj7.php:28\n\
    Stack trace:\n#0 /tmp/tmppdax9nj7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppdax9nj7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    // Your code here.\n}\n\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzsx6vdt.php:18\n\
    Stack trace:\n#0 /tmp/tmpqzsx6vdt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqzsx6vdt.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [0, 1];\n  for ($i\
    \ = 0, $len = count($xs); $i < $len; $i++) {\n    $result[0] += $xs[$i] * $result[1];\n\
    \    $result[1] = 0;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyx0emvs2.php:23\n\
    Stack trace:\n#0 /tmp/tmpyx0emvs2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyx0emvs2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    return array_map(function\
    \ ($x) {\n        return array_sum(array_map(__FUNCTION__, [$x]));\n    }, $xs);\n\
    }\n</code>\n<|/ a dscore=1 tags=php,arrays,polynomials,math |>\n<| a tags=php,arrays,polynomials,math\
    \ |>\nI made this recursive function using array_reduce, and it is working properly.\n\
    <code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5zt9ebly.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // xs is an array of coefficients\n\
    \  // return an array of coefficients representing derivative\n  return array_map(function($c){return\
    \ $c * $c;}, $xs);\n}\n\n$xs = [1, 2, 3, 4, 5];\n\necho derivative($xs);\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsv6o74j.php:24\n\
    Stack trace:\n#0 /tmp/tmpbsv6o74j.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbsv6o74j.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $xs = $xs[0];\n    if ($xs\
    \ < 1) {\n        return [];\n    }\n    if ($xs <= 3) {\n        return [$xs];\n\
    \    }\n\n    $d = ($xs[0] + $xs[1] * $xs[2]) / 3;\n\n    if ($xs[2] > 0) {\n\
    \        $d[$xs[2]] = 3 * $d[$xs[2]];\n    }\n    if ($xs[1] > 0) {\n        $d[$xs[1]]\
    \ = 3 * $d[$xs[1]];\n    }\n\n    return $d;\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThank you very much! I appreciate it\n<|/ c |>\n<| c |>\nThis works great\
    \ in Ruby, but I have some issues in PHP.  I wrote a function that works perfectly\
    \ in Ruby, but fails in PHP.  I'll post it below.  Any idea what the issue is?\
    \  Thanks!\n<|/ c |>\n<| c |>\nI don't have PHP installed right now, but I think\
    \ you are getting wrong results. Try `var_dump($xs);` before `$xs = $xs[0];`,\
    \ to see why you get wrong results. My guess is that `$xs` is empty and you are\
    \ trying to get first element from empty array.\n<|/ c |>\n<| c |>\nI got it.\
    \  I put my answer at the bottom of my post.  Thanks so much!\n<|/ c |>\n<| c\
    \ |>\nThanks, you save my day\n<|/ c |>\n<| a tags=polynomials,php,math |>\nThe\
    \ previous answers didn't work for me in PHP (5.3.10).\nThe solution that works\
    \ is this:\n<code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvo9jm197.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = array_map(function ($x)\
    \ {\n    return $x * $x;\n  }, $xs);\n  return array_sum($ys);\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s03lrws.php:21\n\
    Stack trace:\n#0 /tmp/tmp2s03lrws.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2s03lrws.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function ($x)\
    \ {\n    return $x * $x * ($xs - 1);\n  }, $xs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdze626xk.php:20\n\
    Stack trace:\n#0 /tmp/tmpdze626xk.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdze626xk.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $deriv = [];\n  for ($i = 0;\
    \ $i < count($xs); $i++) $deriv[] = $xs[$i] * $i;\n  return $deriv;\n}\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqu0kbetm.php:19\n\
    Stack trace:\n#0 /tmp/tmpqu0kbetm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqu0kbetm.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    return $xs;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3xpf_wp.php:18\n\
    Stack trace:\n#0 /tmp/tmpu3xpf_wp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpu3xpf_wp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_slice($xs, 0,\
    \ -1)\n    + array_reduce(array_slice($xs, -1), function($acc, $term) {\n    \
    \  return array_map(function($coeff) {\n        return $coeff * $term;\n     \
    \ }, $acc);\n    }, [ 1 ]);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you,\
    \ but I'm having trouble understanding how this would integrate into my existing\
    \ code. Can you help explain the code a bit more? Thank you.\n<|/ c |>\n<| c |>\n\
    I've expanded my answer, hopefully that makes it clearer.\n<|/ c |>\n<| c |>\n\
    Thank you, it is really helpful! Just a quick question - is it possible to have\
    \ something like a loop counter inside the recursive method?\n<|/ c |>\n<| c |>\n\
    You certainly could if you really wanted to, but I'd just be more comfortable\
    \ with doing it in a loop if you can. If you really want a counter, I'd pass it\
    \ to the function as a parameter: `$x = 1; doDerivative($xs, $x++);` If you really\
    \ need recursion for whatever reason, I'd also just use a loop and call `doDerivative`\
    \ inside the loop.\n<|/ c |>\n<| c |>\nI see. Thank you again for your help.\n\
    <|/ c |>\n<| a dscore=0 tags=recursion,php |>\nIt seems that you are looking for\
    \ recursive functions:\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyshvspm9.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = array();\n  for ($x\
    \ = 1; $x <= count($xs); $x++) {\n    $result[] = ($xs[$x-1] + ($x * $xs[$x]));\n\
    \  }\n  return $result;\n}\n</code>\nHope this helps!\n<|/ a |>\n<| c |>\nThanks\
    \ for the help! I see you've used recursion and I appreciate that, but my question\
    \ was more along the lines of how can I achieve the same result without using\
    \ recursion. How would you do this without recursion?\n<|/ c |>\n<| c |>\nThanks\
    \ for that code, I understand it but I'm having trouble understanding how it works\
    \ when it loops back through the values. For example how would it know that 4\
    \ is greater than 3? I assume it loops through the function until it reaches the\
    \ highest value. How does it know that 4 is greater than 3 before it starts looping?\n\
    <|/ c |>\n<| c |>\nWhen it loops back through all the values it calculates the\
    \ derivative for each value.  The highest value is calculated at `6`.  The highest\
    \ derivative is calculated at `12`.  So the loop will go through each value up\
    \ to the highest and calculate the derivative for each value.  As soon as `x =\
    \ 6` it will calculate 12.  Then it will go on and do it for `x = 3` then `x =\
    \ 2` then `x = 3`.  So each time it loops back through and calculates the derivative\
    \ for the highest value it will calculate it for a new value.  The code you posted\
    \ does this because when you get to the highest value it calculates it for the\
    \ new highest.\n<|/ c |>\n<| a |>\nThe question is a little ambiguous, but I'm\
    \ assuming you want the derivative of a polynomial with one variable. An algorithm\
    \ to calculate the derivative is as follows:\n\nFor every element in the polynomial,\
    \ calculate the value at that element.\nCalculate the first derivative, and add\
    \ it to the previous element (which now represents the value at that element).\n\
    Calculate the second derivative, and add it to the previous element (which now\
    \ represents the value at that element).\nGo to step 2.\n\nThe algorithm is based\
    \ on the observation that you can calculate the derivative of a polynomial by\
    \ following the derivative, multiplying it by itself, plus the first derivative,\
    \ and then adding the first derivative to the second derivative.\nThe code below\
    \ implements this. It takes an input array of doubles, and outputs the array of\
    \ doubles representing the derivative.\n<code>\ndef derivative(a):\n    i = 0\n\
    \    ans = [0]\n    for x in a:\n        ans.append(0)\n        i += x\n     \
    \   ans[i] += ((i+1) * x)\n        ans[i+2] += ((i+2)* x * x)\n    return ans\n\
    </code>\n<|/ a tags=python,php,\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjm07chwx.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $n = count($xs);\n    if\
    \ (!$n) {\n        return $xs;\n    }\n    $d = $xs[0];\n    for ($i = 1; $i <\
    \ $n; ++$i) {\n        $d *= $xs[$i];\n    }\n    return $d;\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqvrzwmh.php:25\n\
    Stack trace:\n#0 /tmp/tmpqqvrzwmh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqqvrzwmh.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  $xs = [$xs];\n\
    \  for ($i = 0; $i < count($xs) - 1; $i++) {\n    $result[] = $xs[$i] * $xs[$i\
    \ - 1];\n  }\n  return array_reverse($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9ou6vnl.php:23\n\
    Stack trace:\n#0 /tmp/tmpv9ou6vnl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpv9ou6vnl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // return empty array if it's\
    \ not an array\n  if (!is_array($xs)) return array();\n\n  // if there's only\
    \ one point, return an array of one element\n  if (count($xs) === 1) return array($xs[0]);\n\
    \n  // find first derivative (positive sign)\n  $d = $xs[1] - $xs[0];\n\n  //\
    \ calculate derivative for all other points\n  $ds = $xs[2] - $d;\n\n  // calculate\
    \ new first derivative\n  $d0 = $d * $xs[0];\n\n  // create and return new array\
    \ of derivatives\n  return array($d0 + ($ds / $d));\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1b5nt3b.php:34\n\
    Stack trace:\n#0 /tmp/tmpm1b5nt3b.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpm1b5nt3b.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // $xs must be an array of\
    \ integers and length 2\n  if ($xs.length != 2) {\n    throw new Exception(\"\
    derivative only accepts one argument\");\n  }\n\n  // Calculate the value of the\
    \ polynomial at zero.\n  $value = 1;\n  for ($i = 0; $i < $xs[0]; $i++) {\n  \
    \  $value *= $xs[1];\n  }\n  $value = $value;\n\n  // Calculate the value of the\
    \ polynomial at the first element of $xs.\n  for ($i = 0; $i < $xs[1]; $i++) {\n\
    \    $value *= $xs[0];\n  }\n\n  return array($xs[0] - $value, $xs[1] - $value,\
    \ $value - 1);\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmp01txw8zy.php on line 11\n\
    \nFatal error: Uncaught Exception: derivative only accepts one argument in /tmp/tmp01txw8zy.php:12\n\
    Stack trace:\n#0 /tmp/tmp01txw8zy.php(30): derivative(Array)\n#1 /tmp/tmp01txw8zy.php(34):\
    \ candidate(Array)\n#2 /tmp/tmp01txw8zy.php(41): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp01txw8zy.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (!$xs) {\n        $xs\
    \ = [0];\n    }\n\n    $d = array_shift($xs);\n    $x = array_shift($xs);\n  \
    \  $d = array_shift($xs);\n\n    return $d * pow($x, $xs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9k3hpq_.php:26\n\
    Stack trace:\n#0 /tmp/tmpv9k3hpq_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv9k3hpq_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  $dxs =\
    \ [];\n  for ($i = 0; $i < $n - 1; $i++) {\n    $dxs[] = $xs[$i] * $xs[$i + 1];\n\
    \  }\n  return $dxs;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgqff8jh.php:23\n\
    Stack trace:\n#0 /tmp/tmpkgqff8jh.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkgqff8jh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs_size = count($xs);\n  if\
    \ ($xs_size < 2) { return [0]; }\n  $deriv = [];\n  for ($i = 0; $i < $xs_size;\
    \ ++$i) {\n    $deriv[] = $xs[$i] * derivative($xs);\n  }\n  return $deriv;\n\
    }\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpr1ezg67o.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = [];\n  for ($i = 1; $i\
    \ < count($xs); $i++) {\n    $ys[$i] = $xs[$i];\n  }\n  array_unshift($ys, 1);\n\
    \  return $ys;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2sb9u0uo.php:23\n\
    Stack trace:\n#0 /tmp/tmp2sb9u0uo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2sb9u0uo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = 0;\n  for ($x = 0; $x\
    \ < count($xs); $x++) {\n    $d += $xs[$x];\n  }\n  return [1 - ($d / $this->n);];\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpatmqxs93.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $res = array();\n  $xs = array_reverse($xs);\n\
    \  $last = count($xs) - 1;\n  for ($i = $last; $i >= 0; $i--) {\n    $res[$i]\
    \ = $xs[$i] * $xs[$i + 1];\n  }\n  return $res;\n}\n</code>\nAnd finally the polynomial\
    \ class:\n<code>\nclass Polynomial {\n  private $xs;\n  private $deg;\n  private\
    \ $coef = array();\n\n  public function __construct($xs) {\n    $this->xs = $xs;\n\
    \    $this->deg = count($xs);\n    $this->coef = array(0 => 1);\n    for ($i =\
    \ 0; $i < $this->deg; $i++) {\n      $this->coef[$i] = $this->xs[$i];\n    }\n\
    \  }\n\n  public function add($other) {\n    $res = new Polynomial();\n    $res->deg\
    \ = count($this->xs);\n    for ($i = 0; $i < $res->deg; $i++) {\n      $res->coef[$i]\
    \ = $this->coef[$i] + $other->coef[$i];\n    }\n    return $res;\n  }\n\n  public\
    \ function power($x) {\n    $res = new Polynomial();\n    $res->deg = count($this->xs);\n\
    \    for ($i = 0; $i < $res->deg; $i++) {\n      $res->coef[$i] = $this->coef[$i]\
    \ * $x;\n    }\n    return $res;\n  }\n\n  public function derivative() {\n  \
    \  return derivative($this->xs);\n  }\n\n}\n</code>\n<|/ a |>\n<| c |>\nHow would\
    \ you implement it with the new polynomial class? I'm very interested in it.\n\
    <|/ c |>\n<| c |>\nI've extended the answer.\n<|/ c |>\n<| c |>\nSorry for the\
    \ super late reply, but I got stuck on this. I'm just trying to understand it,\
    \ but could you provide me with the steps for creating the polynomials so I could\
    \ better understand? I'm so confused on how to use that function.\n<|/ c |>\n\
    <| c |>\nI've added some code to the answer. Also I've refactored the `Polynomial`\
    \ class so it would be easier to use.\n<|/ c |>\n<| a |>\nMy solution:\n<code>\n\
    class Polynomial {\n    private $coef = array();\n\n    public function __construct($coef)\
    \ {\n        $this->coef = $coef;\n    }\n\n    public function add($other) {\n\
    \        $new = new self($this->coef);\n        $new->coef = array_merge($this->coef,\
    \ $other->coef);\n        return $new\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxkhqivw6.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!count($xs)) return array();\
    \ // []\n  $xs = array_reverse($xs); // [x0, x1, x2]\n  $d = $xs[0]; // derivative\
    \ of x1 with respect to x1\n  for ($i = 1; $i < count($xs); $i++) {\n    $d *=\
    \ $xs[$i]; // d^nx1\n  }\n  $d = $d / $xs[0]; // normalize derivative to 1\n \
    \ return array_reverse($d); // [x1/dx1, x2/dx1, x3/dx1]\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis answer was useful, but I had to add the `array_reverse()`\
    \ after `$xs = array_reverse($xs);`, otherwise it gave an error.\n<|/ c |>\n<|\
    \ c |>\nNicely explained. Greatly appreciated.\n<|/ c |>\n<| c |>\nNice and concise\
    \ solution! Thanks!\n<|/ c |>\n<| c |>\nI think there might be a better way to\
    \ calculate this. What if I had a polynomial `y = x^2 + x^3 + x^4` and I wanted\
    \ to calculate the derivative of this polynomial by only using `x^3`? How would\
    \ I go about doing this?\n<|/ c |>\n<| c |>\n`derivative([3, 1, 2, 4, 5])` returns\
    \ `[1, 4, 12, 20]`\n<|/ c |>\n<| a |>\nIf you have your coefficients in an array\
    \ you can do this:\n<code>\n<?php\n$coefficients=array( 2, 1, 2, 0, -2);\n$firstDerivative=array_sum(array_reverse($coefficients))\
    \ / array_shift($coefficients);\necho $firstDerivative;\n</code>\nIf you had a\
    \ polynomial like (6*x^2+4*x+2)/x it would be like this:\n<code>\n<?php\n$coefficients=array(1,2,3,4,5,6,7);\n\
    $firstDerivative=array_sum(array_reverse($coefficients)) / array_shift($coefficients);\n\
    echo $firstDerivative;\n</code>\n<|/ a tags=php,math dscore=5 |>\n<| c |>\nNicely\
    \ explained. Greatly appreciated.\n<|/ c |>\n<| c |>\nNice! This is elegant :)\n\
    <|/ c |>\n<| c |>\nVery nice, simple, understandable, and I wish I had seen this\
    \ solution sooner.\n<|/ c |>\n<| c |>\nThis is good when the degree of the polynomial\
    \ is small and you can use a simple formula. However in some cases I needed to\
    \ calculate the derivatives of polynomials with more than 1000 coefficients and\
    \ this solution was too slow.\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptb9jj_ix.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    // Check arguments.\n   \
    \ if (count($xs) < 1) return array(0);\n    $deriv = array(1);\n    foreach ($xs\
    \ as $x) {\n        $deriv[] = $x;\n    }\n    array_pop($deriv);\n    return\
    \ $deriv;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0l4s1llu.php:25\n\
    Stack trace:\n#0 /tmp/tmp0l4s1llu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0l4s1llu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $d = array_shift($xs);\n\
    \    $d2 = array_shift($xs);\n    return array_map(function ($x) use ($d, $d2)\
    \ {\n        return $x * $d2 / $d;\n    }, $xs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9o08g7t.php:22\n\
    Stack trace:\n#0 /tmp/tmpg9o08g7t.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg9o08g7t.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (empty($xs)) {\n    return\
    \ null;\n  }\n  $result = [];\n  $prev = $xs[0];\n  for ($i = 1; $i < count($xs);\
    \ $i++) {\n    $product = $prev;\n    $prev = $xs[$i];\n    $result[] = $product\
    \ / ($prev);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnk85_2rv.php:28\n\
    Stack trace:\n#0 /tmp/tmpnk85_2rv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnk85_2rv.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (empty($xs)) {\n    return\
    \ array();\n  }\n  $d = array();\n  for ($i = 0; $i < count($xs); $i++) {\n  \
    \  // $d[$i] = x[$i] * $xs[$i];\n    $d[$i] = $xs[$i] * $xs[$i];\n  }\n  return\
    \ $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4ipk__3.php:26\n\
    Stack trace:\n#0 /tmp/tmpo4ipk__3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo4ipk__3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = [];\n  for ($x = 1; $x\
    \ < count($xs); $x++) {\n    $ys[$x] = $xs[$x];\n  }\n  for ($x = count($xs) -\
    \ 2; $x >= 0; $x--) {\n    $ys[$x] = $ys[$x+1] * $xs[$x] + $ys[$x];\n  }\n  return\
    \ $ys;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizahoiz7.php:25\n\
    Stack trace:\n#0 /tmp/tmpizahoiz7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpizahoiz7.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $y = [];\n    $xs = array_map('floatval',\
    \ $xs);\n    for ($i = 1; $i < count($xs); $i++) {\n        $y[$i] = $xs[$i -\
    \ 1];\n        for ($j = 1; $j < $i; $j++) {\n            $y[$i] *= $xs[$j];\n\
    \        }\n    }\n    return $y;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsudave8.php:26\n\
    Stack trace:\n#0 /tmp/tmpcsudave8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcsudave8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    return array_map(function($x)\
    \ {\n        return $x * array_shift($xs);\n    }, $xs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmp64gdfhrb.php on line 11\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmp64gdfhrb.php on line 11\n\nWarning: array_shift()\
    \ expects parameter 1 to be array, null given in /tmp/tmp64gdfhrb.php on line\
    \ 11\n\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmp64gdfhrb.php on line 11\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmp64gdfhrb.php on line 11\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp64gdfhrb.php:20\nStack trace:\n\
    #0 /tmp/tmp64gdfhrb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp64gdfhrb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!$xs) {\n    return null;\n\
    \  }\n  $result = array();\n  for ($c = count($xs) - 1; $c >= 0; --$c) {\n   \
    \ $result[$c] = $xs[$c];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38xqax7m.php:25\n\
    Stack trace:\n#0 /tmp/tmp38xqax7m.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp38xqax7m.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $result = [];\n    foreach\
    \ ($xs as $i => $x) {\n        if (isset($result[$i])) {\n            $result[$i]\
    \ *= $x;\n        } else {\n            $result[$i] = $x;\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nFor a pure\
    \ PHP version, see Boris. If you're using an older version of PHP, it can be implemented\
    \ using array_reduce().\nFor a version that uses array_map() with some clever\
    \ recursion, see:\n<code>\n$derivative = function($xs) {\n    if (empty($xs))\
    \ {\n        return [];\n    }\n    $x = array_shift($xs);\n    $result = array_reduce($xs,\
    \ function($acc, $x) use ($acc) {\n        $acc[] = $acc[0] / $x;\n        $acc[0]\
    \ = $x;\n        return $acc;\n    }, array_fill(0, count($xs) - 1, 1));\n   \
    \ return array_merge([$x], $result);\n};\n</code>\n<|/ a tags=math,php,function\
    \ |>\n<| c |>\nFor a pure PHP version, see Boris. If you're using an older version\
    \ of PHP, it can be implemented using array_reduce(). See my answer.\n<|/ c |>\n\
    <| c |>\nYou do realize that `array_reduce` isn't even PHP 5.3 compatible? Not\
    \ even in it's [development branch](http://php.net/array_reduce).\n<|/ c |>\n\
    <| c |>\nYes, but since `array_reduce` doesn't exist in PHP < 5.3, you either\
    \ have to use a loop (which I've done in my answer) or rewrite array_reduce yourself,\
    \ which I did in my answer.\n<|/ c |>\n<| c |>\nSorry, I misunderstood what you\
    \ meant by \"pure PHP version\". I'd suggest to update your answer with this new\
    \ information.\n<|/ c |>\n<| a tags=math,php,function |>\nI made this for fun\
    \ and thought it would be interesting to see if it can be done in one line.\n\
    The function returns a new array with the first element being the value of $x\
    \ and the rest of the elements being the partial derivatives.\nIt also assumes\
    \ that the input is an array of integers representing the coefficients of the\
    \ polynomial.\n<code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1_dsxd3n.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $x = array_shift($xs);\n  $d\
    \ = [array_shift($xs)];\n\n  while ($x > 0) {\n    $y = $x - 1;\n    foreach ($xs\
    \ as $k => $v) {\n      $d[$k] += $v * pow($y, $k);\n    }\n    $x = floor($x\
    \ / 2);\n  }\n  return $d;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for your\
    \ answer! The code works fine but I can't understand how it works. Could you explain\
    \ it to me please?\n<|/ c |>\n<| c |>\nYou're welcome. I've added some explanations,\
    \ hope it helps. :) Btw, your question has already been answered here: https://stackoverflow.com/questions/2065272/how-to-calculate-derivative-in-php\n\
    <|/ c |>\n<| a dscore=0 tags=php |>\nI solved it this way:\n<code>\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3vhnvcd4.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = 0;\n  foreach ($xs as\
    \ $x) {\n    $n++;\n  }\n\n  $x0 = array_shift($xs);\n  $d = [1 / ($n * $x0)];\n\
    \  foreach ($xs as $x) {\n    $d[] = $x * $d[n];\n  }\n\n  return $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmp4rawou78.php on line 18\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmp4rawou78.php on line 18\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmp4rawou78.php on line 18\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmp4rawou78.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4rawou78.php:29\n\
    Stack trace:\n#0 /tmp/tmp4rawou78.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4rawou78.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function($x)\
    \ {\n    return $x * $x;\n  }, $xs);\n}\n\nfunction candidate(...$args) {\n  \
    \  return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ixb5rg.php:20\n\
    Stack trace:\n#0 /tmp/tmp97ixb5rg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp97ixb5rg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Write your code here.\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvy5ano2p.php:18\n\
    Stack trace:\n#0 /tmp/tmpvy5ano2p.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvy5ano2p.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_reduce($xs, function\
    \ ($acc, $x) {\n    return [$acc[1], $acc[0] * $x + $acc[2]];\n  }, [1]);\n}\n\
    \nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1skbn5s.php:20\n\
    Stack trace:\n#0 /tmp/tmpm1skbn5s.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpm1skbn5s.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (count($xs) < 2) {\n \
    \       return $xs;\n    }\n\n    $x = array_shift($xs);\n\n    $ys = $xs;\n\n\
    \    for ($i = 0; $i < count($xs) - 1; $i++) {\n        $y = $ys[$i];\n      \
    \  $ys[$i] = $x * $y + $ys[$i + 1];\n        $ys[$i + 1] = $y;\n    }\n\n    return\
    \ $ys;\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwssxaep7.php:31\n\
    Stack trace:\n#0 /tmp/tmpwssxaep7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwssxaep7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs = array_values($xs);\n\
    \  $n = count($xs);\n  if ($n === 0) {\n    return array(0);\n  }\n  $d = $xs[0];\n\
    \  for ($i = 1; $i < $n; $i++) {\n    $d *= $xs[$i];\n  }\n  return $d;\n}\n\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0jfut_50.php:27\n\
    Stack trace:\n#0 /tmp/tmp0jfut_50.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0jfut_50.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs_length = count($xs);\n\
    \  $result = [];\n  for($i = 0; $i < $xs_length; $i++) {\n    $result[] = $xs[$i]\
    \ * pow($i, $xs_length);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhdbn4i5.php:23\n\
    Stack trace:\n#0 /tmp/tmpvhdbn4i5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvhdbn4i5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  $dys =\
    \ array_fill(0, $n - 1, 1);\n  for ($i = 2; $i < $n; $i++) {\n    $dys = array_merge($dys,\
    \ array_fill(0, $i - 1, $xs[$i] * $dys[$i - 1]));\n  }\n  return $dys;\n}\n\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayr_twwe.php:23\n\
    Stack trace:\n#0 /tmp/tmpayr_twwe.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpayr_twwe.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs = array_map(function ($x)\
    \ { return $x * $x; }, $xs);\n  $d = [];\n  for ($i = 0; $i < count($xs) - 1;\
    \ ++$i) {\n    $d[] = $xs[$i] * $xs[$i + 1];\n  }\n  return $d;\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptalk1cae.php:22\n\
    Stack trace:\n#0 /tmp/tmptalk1cae.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptalk1cae.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = [];\n  foreach ($xs as\
    \ $x) {\n    $ys[] = $x * $x; // $x*x is independent from x\n  }\n  return $ys;\n\
    }\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xclp_mh.php:21\n\
    Stack trace:\n#0 /tmp/tmp8xclp_mh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8xclp_mh.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function ($x)\
    \ {\n    return $x * $x;\n  }, range(1, count($xs) - 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5pcb7ec.php:20\n\
    Stack trace:\n#0 /tmp/tmps5pcb7ec.php(27): test()\n#1 {main}\n  thrown in /tmp/tmps5pcb7ec.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function ($x)\
    \ use ($xs) {\n    return array_map(function ($y) use ($x) {\n      return pow($y,\
    \ $x);\n    }, $xs);\n  }, range(0, count($xs) - 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovjpziqq.php:22\n\
    Stack trace:\n#0 /tmp/tmpovjpziqq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpovjpziqq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $results = [];\n  for ($i =\
    \ 0; $i < count($xs); $i++) {\n    $results[] = ($xs[$i] - $xs[$i - 1]) / $xs[$i];\n\
    \  }\n  return $results;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf330jxy8.php:22\n\
    Stack trace:\n#0 /tmp/tmpf330jxy8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpf330jxy8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = [];\n  foreach ($xs\
    \ as $x) {\n    $result[] = $x;\n    $result[] = 1;\n  }\n  return array_map(function\
    \ ($x) {\n    return array_sum($x);\n  }, array_chunk($result, 2));\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl22gfl29.php:25\n\
    Stack trace:\n#0 /tmp/tmpl22gfl29.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl22gfl29.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function($x)\
    \ {\n    return ($xs[$x])\n        ? $xs[$x] * derivative($xs)\n        : 1;\n\
    \  }, range(0, count($xs) - 1));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,php\
    \ |>\nI did this recently, just wanted to share:\n<code>\n$xs = [\n    3.171,\n\
    \    7.709,\n    14.799,\n    31.488,\n    52.814,\n    98.036,\n    153.739,\n\
    \    297.154,\n    455.665,\n    617.798,\n    833.725,\n    1088.322,\n    1554.789,\n\
    \    2061.347,\n    2555.164,\n    3211.610,\n    4068.296,\n];\n\n$ys = [\n \
    \   4.628,\n    10.435,\n    21.105,\n    28.903,\n    37.552,\n    43.173,\n\
    \    50.662,\n    57.435,\n    65.138,\n    74.777,\n    83.127,\n    92.014,\n\
    \    101.702,\n    112.415,\n    121.104,\n    131.705,\n    141.326,\n    150.921,\n\
    \    159.610,\n    169.309,\n    178.901,\n    188.553,\n    198.196,\n    208.817,\n\
    \    217.501,\n    224.187,\n    233.062,\n];\n\n$polynomial = \"3 + 7*x + 14*x**2\
    \ - 7*x**3 + 15*x**4 - 2*x**5 + 23*x**6 - 4*x**7 + 27*x**8 - 8*x**9 + 33*x**10\
    \ + 40*x**11 + 42*x**12 + 42*x**13 + 42*x**14 - 8*x**15 + 33*x**16 - 7*x**17 +\
    \ 19*x**18 - 3*x**19 + 5*x**20 - 7*x**21 + 6*x**22 - 5*x**23 - 7*x**24 - 3*x**25\
    \ - 7*x**26 - 3*x**27 - 2*x**28 + 5*x**29 + 2*x**30 - 7*x**31 - 3*x**32 - 2*x**33\
    \ - 4*x**34 - 5*x**35 - 7*x**36 - 3*x**37 - 7*x**38 - \nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpww4x425d.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(\n      function($x)\
    \ {\n        return $x * $x;\n      },\n      array_slice($xs, 1)\n  );\n}\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1v2oi45e.php:22\n\
    Stack trace:\n#0 /tmp/tmp1v2oi45e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1v2oi45e.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ === 0) {\n    return array();\n  }\n\n  $x = array_shift($xs);\n  $d = array($x);\n\
    \n  for ($i = 1; $i < $n; ++$i) {\n    $x = array_shift($xs);\n    $d[] = $x *\
    \ $i;\n  }\n\n  return $d;\n}\n\n$xs = array(1, 5, 8);\n$y = derivative($xs);\n\
    echo json_encode($y); // [4, 8, 16]\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[1,5,16]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj35p8si.php:34\n\
    Stack trace:\n#0 /tmp/tmpqj35p8si.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqj35p8si.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!is_array($xs)) $xs = array($xs);\n\
    \  if (count($xs) < 2) return array();\n  $d = 1;\n  for ($c = count($xs); $c--\
    \ > 1; ) {\n    $d *= $xs[--$c];\n  }\n  $r = array();\n  for ($c = count($xs)\
    \ - 1; $c--; ) {\n    $r[$c] = $d * ($xs[$c] - 1);\n  }\n  return $r;\n}\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmn3ihl4.php:27\n\
    Stack trace:\n#0 /tmp/tmpqmn3ihl4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqmn3ihl4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = [];\n  foreach ($xs as\
    \ $x) {\n    $d[] = $x;\n  }\n  $d[] = 1;\n  return array_map(\n    function ($x)\
    \ {\n      return $x * $x * ($x - 1);\n    }, $d);\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9dml8ixz.php:25\n\
    Stack trace:\n#0 /tmp/tmp9dml8ixz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9dml8ixz.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = array();\n  $xs[]\
    \ = 1;\n  $n = count($xs);\n  for ($i = 0; $i < $n - 1; $i++) {\n    $result[$i]\
    \ = $xs[$i] * $result[$i + 1];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9g__cbs6.php:24\n\
    Stack trace:\n#0 /tmp/tmp9g__cbs6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9g__cbs6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = 0;\n  foreach ($xs as\
    \ $x) {\n    $d += $x * $x;\n  }\n  return [$d];\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_uxqffx.php:22\n\
    Stack trace:\n#0 /tmp/tmpa_uxqffx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpa_uxqffx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ < 1) return array(); // don't divide by zero\n  $d = array(1);\n  for ($i =\
    \ 0; $i < $n - 1; $i++) {\n    $xx = $xs[$i];\n    $d[$i] = $xx;\n    for ($j\
    \ = $i + 1; $j < $n; $j++) $d[$j] -= $xx * $xs[$j];\n  }\n  return $d;\n}\n\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jexusas.php:26\n\
    Stack trace:\n#0 /tmp/tmp6jexusas.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6jexusas.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!is_array($xs) || empty($xs))\n\
    \    return [];\n\n  // Return derivative of polynomial in the same form.\n  //\
    \ >>> derivative([3, 1, 2, 4, 5])\n  // [1, 4, 12, 20]\n  // >>> derivative([1,\
    \ 2, 3])\n  // [2, 6]\n  array_walk($xs, create_function('&$val', '$val *= $xs[0]'));\n\
    \  $ds = [];\n  foreach ($xs as $x) {\n    $ds[] = $x;\n    $ds[] = $x * $xs[2];\n\
    \  }\n  return $ds;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi7lafqnj.php(18) : runtime-created\
    \ function on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!is_array($xs)) die('xs\
    \ must be an array');\n  // return derivative(xs) is like doing [derivative(2),\
    \ derivative(3), ...].\n  return array_map(function ($x) {\n    return $x * array_shift($xs);\n\
    \  }, $xs);\n}\n</code>\n<|/ a |>\n<| c |>\nI really like the idea of using array_map,\
    \ however it fails to take into account the fact that you need to take the second\
    \ derivative of the second derivative.\n<|/ c |>\n<| a tags=math,algorithm,polynomials,php\
    \ |>\nFor a more generic solution:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_br7c3ab.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  // use\
    \ Horner's rule to calculate derivative\n  $dx = array_fill(0, $n, 0);\n  for\
    \ ($i = 0; $i < $n - 1; $i++) {\n    $dx[$i + 1] = $xs[$i] + (($xs[$i + 1] + $dx[$i])\
    \ * $xs[$i]);\n  }\n  return $dx;\n}\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps6om5vpl.php:23\n\
    Stack trace:\n#0 /tmp/tmps6om5vpl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmps6om5vpl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs_length = count($xs);\n\
    \  if (!$xs_length) return [];\n  $ys = [];\n  for ($x = 1; $x <= $xs_length;\
    \ $x++) {\n    $y = $xs[$x - 1] * $x;\n    for ($i = 1; $i < $xs_length; $i++)\
    \ {\n      $ys = array_merge($ys, array_slice($ys, $i, 1));\n      $y += $xs[$i]\
    \ * $i;\n    }\n  }\n  return $ys;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvswaf4r7.php:28\n\
    Stack trace:\n#0 /tmp/tmpvswaf4r7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvswaf4r7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_reduce($xs, function\
    \ ($xs, $x) {\n    return $xs .= $x * $x;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8k9i2k9p.php:20\n\
    Stack trace:\n#0 /tmp/tmp8k9i2k9p.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8k9i2k9p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $dx = array_fill(0, count($xs),\
    \ 0);\n  for ($i = 0, $n = count($xs) - 1; $i < $n; $i++) {\n    $dx[$i] = $xs[$i]\
    \ + ($xs[$i + 1] * $xs[$i]);\n  }\n  return $dx;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks for the answer! I wonder if there is a way to do this using arrays?\n\
    <|/ c |>\n<| c |>\nYou can do it in an array too, but it is way more complicated.\
    \ You need to use recursion to keep track of previous sum.\n<|/ c |>\n<| c |>\n\
    Thanks for the help and explanation, I've never heard of recursion before, could\
    \ you please explain a bit further what would be the best way to do it with an\
    \ array?\n<|/ c |>\n<| c |>\nI've added an example on how to do it with an array\
    \ now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$x = 3;\n$f = $x * $x;\n$g = $f *\
    \ $x;\n\nvar_dump($x);\nvar_dump($f);\nvar_dump($g);\n</code>\nResult:\n<code>\n\
    $x = 3;\n\n$f = $x * $x;\n\n$x = 3 * 3;\n\n$g = $f * $x;\n\n$x = 3 * 3 * 3;\n\n\
    $f = 15\n\n$g = 15 * 15;\n\n$x = 15 * 15 * 15\n</code>\nSo what you can do is\
    \ store the previous value and current value in a variable and when the value\
    \ changes you know what the previous value was.\n<|/ a tags=php,math |>\n<| a\
    \ dscore=0 |>\nYou can store the previous value in a variable. \n<code>\n<?php\n\
    $x = 1;\n$y = 1;\n\nif($x != $y){\n    $prevX = $x;\n    $prevY = $y;\n}\n\n$x\
    \ = 2;\n\nif($x != $y){\n    $prevX = $x;\n    $prevY = $y;\n}\n</code>\n<|/ a\
    \ tags=php,math |>\n<| a dscore=0 tags=php,math |>\nYou can try this also. \n\
    <code>\n<?php \n    $a = 10;\n    $b = 5;\n    $c = 1;\n    $sum = $a + $b;\n\
    \    $count = 1;\n    while($sum > 0)\n    {\n        $sum = $sum - $c;\n    \
    \    $count++;\n        if($count > 1)\n        {\n            echo $a . \"<br>\"\
    ;\n            $a++;\n            $b++;\n            $c++;\n        }\n      \
    \  else\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps_88gsdr.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function($x)\
    \ {\n    return $x * $xs[0];\n  }, $xs);\n}\n</code>\nNow for polynomials we can\
    \ just add them together. Here's a function to do that:\n<code>\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5anwb7ph.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $xs = array_reverse($xs);\n\
    \  $result = [];\n  $xs[0] = 1;\n  foreach ($xs as $x) {\n    $result[] = $x *\
    \ $result[-1];\n  }\n  return array_reverse($result);\n}\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdd__mkp.php:23\n\
    Stack trace:\n#0 /tmp/tmpqdd__mkp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpqdd__mkp.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = $xs[0];\n  for ($i = 1;\
    \ $i < count($xs); $i++) {\n    $d *= $xs[$i];\n  }\n  return $d;\n}\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqmeiw8e.php:21\n\
    Stack trace:\n#0 /tmp/tmpvqmeiw8e.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvqmeiw8e.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $dx = $ys = $y = 0;\n  $n =\
    \ count($xs);\n  for ($i = 0; $i < $n; ++$i) {\n    $x      = $xs[$i];\n    $dx\
    \    += $x * $y;\n    $y      = $xs[$n+$i];\n    $ys    += $y * $x;\n  }\n  return\
    \ [abs($dx), abs($ys)];\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6az3a0h8.php:26\n\
    Stack trace:\n#0 /tmp/tmp6az3a0h8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6az3a0h8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    if (empty($xs)) return [];\n\
    \    $r = $xs[0];\n    for ($i = 1; $i < count($xs); $i++) {\n        $r += $xs[$i]\
    \ * $i;\n    }\n    return [$r];\n}\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0x6tvd2.php:22\n\
    Stack trace:\n#0 /tmp/tmpt0x6tvd2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt0x6tvd2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = [];\n  foreach ($xs as\
    \ $x) $d[] = 1; // multiply by 1\n  foreach ($xs as $i => $x) $d[$i] *= $x; //\
    \ multiply by x\n  return $d;\n}\n\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvr5lc6zl.php:21\n\
    Stack trace:\n#0 /tmp/tmpvr5lc6zl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvr5lc6zl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs);\n  if ($n\
    \ === 0) {\n    throw new Exception('Number of terms must be greater than zero.');\n\
    \  }\n\n  // Initialize and result array\n  $f = array();\n  $f[0] = 1.0;\n  $f[1]\
    \ = 1.0;\n\n  // Calculate all terms using forward differencing\n  for ($i = 2;\
    \ $i <= $n; $i++) {\n    $f[$i] = $f[$i - 1] * $xs[$i];\n  }\n\n  // Calculate\
    \ and return the derivative\n  return $f;\n}\n</code>\nNow we can do some testing:\n\
    <code>\n<?php\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnvx29nil.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = $xs[0];\n  for ($i\
    \ = 1; $i < count($xs); $i++) {\n    $result *= $xs[$i];\n  }\n  return $result;\n\
    }\n</code>\nNow we can get the derivatives of a polynomial simply by calling derivative\
    \ function and pass it the list we got from our equation. In our case, we can\
    \ just pass the list [3, 1, 2, 4, 5] to it and it returns the list [1, 4, 12,\
    \ 20].\n<|/ a tags=python,algorithm,php |>\n<| c |>\nThanks, I think this is the\
    \ best way to do it with python and php right? I actually need the algorithm to\
    \ be in python and php since my client needs both of them and he wants to know\
    \ what he should implement in both since they both have different languages.\n\
    <|/ c |>\n<| c |>\nYes, you can use python for both python and php if you want.\n\
    <|/ c |>\n<| c |>\nAnd also please mark the answer as correct if it helps you.\
    \ Cheers.\n<|/ c |>\n<| c |>\nHi, please can you explain me how can you get your\
    \ polynomial function? For example your example is 3x1+2x2+4x5 and you get the\
    \ derivative using an algorithm and you get the polynomial function but this one\
    \ I cannot. Thanks\n<|/ c |>\n<| c |>\nThe polynomial function is simply the sum\
    \ over all terms\n<|/ c |>\n<| a |>\nI got this one from my friend who knows python\
    \ :) Hope it'll help!\n<code>\ndef poly_diff(p, order):\n    \"\"\"\n    Computes\
    \ the derivative of a polynomial in the specified order.\n    \"\"\"\n    # Compute\
    \ coefficients\n    poly = np.poly1d(p)\n    coef = poly.all_coeffs()\n\n    #\
    \ Compute differentiation\n    deriv = np.zeros(poly.order-1)\n    for n in range(poly.order-1):\n\
    \        deriv[n] = coef[n+1] - coef[n]\n\n    # Normalize differentiation\n \
    \   deriv /= poly.all_coeffs()\n\n    # Return polynomial\n    return poly*deriv\n\
    </code>\n<|/ a dscore=2 tags=python,algorithm,php |>\n<| c |>\nThanks for your\
    \ help but I need to do this algorithm and I cant use libraries except for math.\
    \ I need to implement this algorithm. :(\n<|/ c |>\n<| a dscore=0 |>\nThis can\
    \ be solved in python using sympy. Here is sample code that solves your example.\n\
    <code>\nimport sympy as sy\nimport numpy as np\n\nx1 = sy.symbols('x1')\nx2 =\
    \ sy.symbols('x2')\nx3 = sy.symbols('\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqevd22m9.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $dx = 0;\n  foreach ($xs as\
    \ $x) $dx = $dx * $x + $xs[$x];\n  return $dx;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_igbs09w.php:20\n\
    Stack trace:\n#0 /tmp/tmp_igbs09w.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_igbs09w.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $x = array_shift($xs);\n  if\
    \ (count($xs) == 0) {\n    return array(1);\n  }\n  return array_map(function\
    \ ($ys) use ($x) {\n    return $ys * $x;\n  }, derivative(array_slice($xs, 1)));\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwgvgegg.php:24\n\
    Stack trace:\n#0 /tmp/tmpiwgvgegg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpiwgvgegg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs) - 1;\n  $x\
    \ = array_pop($xs);\n\n  return array_reduce($xs, function($acc, $x) {\n    return\
    \ $acc + ($x * $x) * ($n--);\n  }, 1);\n}\nfunction candidate(...$args) {\n  \
    \  return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrqzy__x.php:22\n\
    Stack trace:\n#0 /tmp/tmpsrqzy__x.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsrqzy__x.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $d = 0;\n    foreach ($xs\
    \ as $x) {\n        $d *= $x;\n    }\n    return $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9241nt4.php:22\n\
    Stack trace:\n#0 /tmp/tmpd9241nt4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd9241nt4.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    $ys = array_map('pow', array_slice($xs,\
    \ 1), array_fill(0, count($xs), 1));\n    return array_map(\n        function\
    \ ($x) {\n            return $x * array_sum(array_slice($ys, array_search($x,\
    \ $xs) - 1));\n        },\n        $xs\n    );\n}\n</code>\n<|/ a |>\n<| c |>\n\
    this answer is incomplete. the main problem is not the coefficients and exponents,\
    \ but the fact that one can't just derive the polynomial from the coefficients\n\
    <|/ c |>\n<| c |>\n: That's a fair point. I'll edit to include this information.\
    \ The solution is still not trivial, but it's better than my proposed solution\
    \ above.\n<|/ c |>\n<| c |>\n: I've added an example function and some tests for\
    \ your convenience.\n<|/ c |>\n<| c |>\nyour first code was incorrect - it outputs\
    \ the wrong result for derivative([3, 1, 2, 4, 5])\n<|/ c |>\n<| a tags=polynomials,php,math\
    \ dscore=4 |>\nSince nobody has posted a solution yet I'll post my own\n<code>\n\
    function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpokqnl3tr.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = array();\n  $ys[] = 1;\n\
    \  for ($i = 2; $i < count($xs); $i++) {\n    $ys[] = $ys[count($ys) - 1] * $xs[$i];\n\
    \  }\n  return $ys;\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlmsf1f8.php:22\n\
    Stack trace:\n#0 /tmp/tmpvlmsf1f8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvlmsf1f8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Return derivative of xs.\n\
    \  // >>> derivative([3, 1, 2, 4, 5])\n  // [1, 4, 12, 20]\n  // >>> derivative([1,\
    \ 2, 3])\n  // [2, 6]\n  if (empty($xs)) {\n    return [];\n  }\n  $d = array_shift($xs);\n\
    \  $r = $d;\n  foreach ($xs as $x) {\n    $r += $x * $d;\n    $d *= $x;\n  }\n\
    \  return $r;\n}\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgjbma_2.php:31\n\
    Stack trace:\n#0 /tmp/tmpvgjbma_2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvgjbma_2.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = [];\n  for ($i = count($xs);\
    \ $i--;) {\n    $d[] = $xs[$i] * $xs[$i];\n  }\n  return $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps823c_9.php:22\n\
    Stack trace:\n#0 /tmp/tmpps823c_9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpps823c_9.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = 0;\n  for ($i = 1, $n\
    \ = count($xs); $i < $n; $i++) {\n    $d += $xs[$i] * $xs[$i - 1];\n  }\n  return\
    \ $d;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nru832m.php:22\n\
    Stack trace:\n#0 /tmp/tmp0nru832m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0nru832m.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (empty($xs)) return array();\n\
    \n  $d = array();\n  $d[0] = 1;\n  for ($i = 1, $j = count($xs); $j < count($xs);\
    \ $j++) {\n    $d[$j] *= $xs[$j];\n  }\n\n  return array_map(function ($x) {\n\
    \    return $d[0] * $x;\n  }, $d);\n}\n\n$result = array_map(function ($x, $y)\
    \ {\n  return $x * $y;\n}, $a, $b);\n</code>\nI hope it helps.\n<|/ a dscore=0\
    \ tags=php,multidimensional-array,arrays |>\n<| c |>\nI think you should use `array_map`\
    \ instead of `array_walk` because you're doing the calculation on every element\
    \ while `array_walk` would be doing the calculation only once.\n<|/ c |>\n<| c\
    \ |>\nThanks I didn't know that! I'll fix that.\n<|/ c |>\n<| a |>\nYou can try\
    \ this :\n<code>\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5c8k7f6w.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = array();\n  $x = $xs[0];\n\
    \  $y = 1;\n  for ($i = 1; $i < count($xs); $i++) {\n    $x *= $xs[$i];\n    $y\
    \ += $x;\n    $ys[$i] = $y;\n  }\n  return $ys;\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3uvm6x93.php:26\n\
    Stack trace:\n#0 /tmp/tmp3uvm6x93.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3uvm6x93.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  // Return derivatives of the\
    \ polynomial in the same form.\n  // >>> derivative([3, 1, 2, 4, 5])\n  // [1,\
    \ 4, 12, 20]\n  // >>> derivative([1, 2, 3])\n  // [2, 6]\n  if (count($xs) ===\
    \ 0) return array(0);\n  return array_map(function ($x) { return $x * $x; }, $xs);\n\
    }\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kio6lb9.php:24\n\
    Stack trace:\n#0 /tmp/tmp6kio6lb9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6kio6lb9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $ys = array_shift($xs);\n \
    \ return array_map(function ($x) { return $x * $ys; }, $xs);\n}\n</code>\n<|/\
    \ a tags=math,php dscore=1 |>\n<| a dscore=0 tags=math,php |>\nThis is a solution\
    \ using array_map and array_sum. Not sure if it is the most efficient, but I guess\
    \ it is clear and concise.\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk_mi_m_4.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function ($x)\
    \ { return $x * $x; }, array_slice($xs, 1));\n}\n</code>\n<|/ a tags=php,math\
    \ dscore=3 |>\n<| c |>\nThis code was very helpful. I needed a function to calculate\
    \ the square root of any number. So I used the iterative method and took care\
    \ of the `0`s, as well as taking the `1`s out of the square root by dividing it\
    \ by it. I then replaced the `pow` functions with `sqrt`. This also allows me\
    \ to input any positive `integer` value and it returns the same result. The function\
    \ `squareroot` is what I used to get my `square` function to work and is what\
    \ I used in my answer. Thank you for the help!\n<|/ c |>\n<| a |>\nHere you go\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5v5tfysp.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $d = array_shift($xs);\n  return\
    \ $d * derivative($xs);\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  if (!is_array($xs)) return\
    \ null;\n  $n = count($xs);\n  if ($n==0) return null;\n  $d = 0;\n  for ($i=1;\
    \ $i<$n; $i++) {\n    $d += ($xs[$i] - $xs[$i-1])*$xs[$i];\n  }\n  return [$d];\n\
    }\nfunction candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12,\
    \ 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjoksxq0k.php:24\n\
    Stack trace:\n#0 /tmp/tmpjoksxq0k.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjoksxq0k.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $result = array();\n  foreach\
    \ ($xs as $x) {\n    $result[] = $x * $x;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppoav5g2f.php:22\n\
    Stack trace:\n#0 /tmp/tmppoav5g2f.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppoav5g2f.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  return array_map(function($x)\
    \ {\n    return [$x];\n  }, range(0, count($xs) - 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbahza6q4.php:20\n\
    Stack trace:\n#0 /tmp/tmpbahza6q4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbahza6q4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n    return array_map(function($x)\
    \ {\n        return $x * $x;\n    }, $xs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34hlg51g.php:20\n\
    Stack trace:\n#0 /tmp/tmp34hlg51g.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp34hlg51g.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  array_unshift($xs, 0);\n  return\
    \ $xs;\n}\n\nfunction candidate(...$args) {\n    return derivative(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1,\
    \ 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyprhgpa.php:19\n\
    Stack trace:\n#0 /tmp/tmpyyprhgpa.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyyprhgpa.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $n = count($xs) - 1;\n  if\
    \ ($n < 1) {\n    return array();\n  }\n\n  $xs = array_reverse($xs);\n  $d =\
    \ array();\n  $x = $xs[0];\n  for ($i = 0; $i <= $n; $i++) {\n    if ($i == $n)\
    \ {\n      $d[] = $x;\n    }\n\n    $x *= $xs[$i];\n  }\n\n  return $d;\n}\nfunction\
    \ candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2,\
    \ 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3djlarn.php:33\n\
    Stack trace:\n#0 /tmp/tmpe3djlarn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpe3djlarn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same\
    \ form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1,\
    \ 2, 3])\n// [2, 6]\nfunction derivative($xs) {\n  $y = $xs[1];\n  $xs = array_slice($xs,\
    \ 2);\n  $d = $xs[0] + $xs[1] * $y + $xs[2] * pow($y, 2);\n  for ($i = 3; $i <\
    \ count($xs); $i++) {\n    $d += ($xs[$i - 1] * $xs[$i]) * pow(pow($y, 2) - pow($xs[$i\
    \ - 1], 2), 3);\n  }\n  return [$d];\n}\nfunction candidate(...$args) {\n    return\
    \ derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4))\
    \ !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybotg49d.php:23\n\
    Stack trace:\n#0 /tmp/tmpybotg49d.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpybotg49d.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
