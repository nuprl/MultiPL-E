name: HumanEval_35_max_element
language: php
prompt: "<?php\n// Return maximum element in the list.\n// >>> max_element([1, 2,\
  \ 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\n\
  function max_element($l) {\n"
tests: "function candidate(...$args) {\n    return max_element(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))\
  \ !== 124) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $max_value = PHP_INT_MAX;\n  foreach ($l as $item) {\n    if ($item\
    \ > $max_value) {\n      $max_value = $item;\n    }\n  }\n  return $max_value;\n\
    }", "    $rmax = NULL;\n    foreach ($l as $e) {\n        if (is_null($rmax) ||\
    \ $e > $rmax) {\n            $rmax = $e;\n        }\n    }\n    return $rmax;\n\
    }\n</code>\n<|/ a |>\n<| c |>\n+1 for using array_map to do the heavy lifting\
    \ of searching for the max element. Also I did not know about the array_filter\
    \ function which simplifies the logic significantly and probably will speed things\
    \ up also.\n<|/ c |>\n<| c |>\nThank you for introducing me to `array_filter`.\
    \  I hadn't known about that before.  One thing that should be noted is that this\
    \ will only work for numerical arrays.\n<|/ c |>\n<| c |>\n: You're right. This\
    \ solution won't work for non numeric arrays. I forgot that.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\n<code>\n$max  = max($myarray);\n$index = array_search($max, $myarray);\n\
    $key   = $myarray[$index];\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis answer is\
    \ really good, but I suggest that you use $myarray[0] as the key since $myarray[0]\
    \ is always a value and $myarray[0] is always going to be the key for $max. Otherwise\
    \ it will throw off the index and throw off your $key.\n<|/ c |>\n<| a |>\n<code>\n\
    $myarray = array(1,2,3,4,5);\n\n$max  = max($myarray);\n$index = array_search($max,\
    \ $myarray);\n\nif($index>=0){\n    $key=$myarray[$index];\n}else{\n    $key=$max;\n\
    }\n</code>\n<|/ a dscore=4 tags=algorithm,php |>\n<| a tags=algorithm,php dscore=2\
    \ |>\n<code>\n$max  = max($myarray);\n$index = array_search($max, $myarray);\n\
    $key   = $myarray[$index];\n</code>\n<|/ a |>\n<| c |>\nThe first line can be\
    \ written as $max = max($myarray);\n<|/ c |>\n<| a dscore=2 |>\n<code>", "   \
    \ $n = array_shift($l);\n    $max = array_shift($l);\n    foreach ($l as $n) {\n\
    \        if ($n > $max) {\n            $max = $n;\n        }\n    }\n    return\
    \ $max;\n}\n", "\treturn array_reduce($l, function($a, $b) {\n\t\treturn max($a,\
    \ $b);\n\t});\n}\n", "    if (count($l) === 0) {\n        return null;\n    }\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n\n/**\n * Return\
    \ the minimum element of the list.\n * \n * Usage: min(['a', 'b', 'c', 'd']);\n\
    \ * >>> min()\n * 'a'\n * >>> min([3, 1, 2, 4, 5, 'foo']);\n * 1\n * \n * @param\
    \ $l\n * @return null\n */", "    $max = reset($l);\n    reset($l);\n    foreach\
    \ ($l as $value) {\n        if ($value < $max) {\n            $max = $value;\n\
    \        }\n    }\n\n    return $max;\n}\n", "    return $l[count($l) - 1];\n}",
  "  $l = array_reverse($l);\n  reset($l);\n  return key($l);\n}\n", "    if (is_array($l))\
    \ {\n        return $l[array_search(max($l), $l)];\n    }\n\n    return $l;\n\
    }\n</code>\n<|/ a tags=php dscore=2 |>\n<| c |>\nI did not downvote you, but I\
    \ believe you are missing one thing: a recursive call. Something like this might\
    \ be a good idea: max($l, max_element($l))\n<|/ c |>\n<| c |>\nI like your solution.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nI'm assuming you downvoted the recursive\
    \ solution, because it's not quite as simple as your previous answer (which is\
    \ correct in that it is recursive, but not in that it's not the most elegant way\
    \ of doing it).\n<|/ c |>\n<| c |>\nI used a recursive solution because it was\
    \ the fastest and didn't involve any additional looping constructs.  You could\
    \ also use a for loop, and as long as you're not looping on a large array, you\
    \ probably won't notice a difference.\n<|/ c |>\n<| c |>\nWell, you know what\
    \ they say: if you have to choose between a recursive function and looping, then\
    \ it's probably the recursive one. But your solution is both simple and elegant,\
    \ and it also doesn't involve a looping construct, which is my main objection\
    \ to the recursive solution. And you're correct in that looping can be avoided\
    \ if done correctly.\n<|/ c |>\n<| a tags=php dscore=1 |>\n<code>", "\treset($l);\n\
    \twhile (list($i, $v) = each($l)) {\n\t\t$max = max($i, $v);\n\t\tif ($max !==\
    \ $i) {\n\t\t\tunset($l[$i], $l[$max]);\n\t\t\t$l[$i] = $max;\n\t\t}\n\t}\n\t\
    $l = array_values($l);\n\treturn current($l);\n}\n", "    if (!count($l)) {\n\
    \        return false;\n    }\n    return max($l);\n}\n", "    foreach ($l as\
    \ $element) {\n        if ($element == max($l)) {\n            return $element;\n\
    \        }\n    }\n}\n\n$l = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n\
    echo max_element($l);", "  $lMax = PHP_INT_MAX;\n  foreach ($l as $item) {\n \
    \   $lMax = $item > $lMax ? $item : $lMax;\n  }\n  return $lMax;\n}\n", "  //\
    \ We are building a tree.\n  $tree = [];\n  $max = null;\n  foreach ($l as $e)\
    \ {\n    $e = abs($e);\n    if (isset($tree[$e])) {\n      $tree[$e]['value']\
    \ += 1;\n    } else {\n      $tree[$e] = ['value' => 1, 'value0' => $e];\n   \
    \ }\n    if ($tree[$e]['value'] > $max) {\n      $max = $tree[$e]['value'];\n\
    \    }\n  }\n  foreach ($tree as &$e) {\n    $e['value'] = $e['value0'];\n   \
    \ $e['children'] = max_element($e['value']);\n  }\n  return $max;\n}\n", "   \
    \ $result = $l[0];\n    foreach ($l as $item) {\n        if ($item > $result)\
    \ {\n            $result = $item;\n        }\n    }\n    return $result;\n}",
  "    foreach ($l as $v) {\n        if ($v == max($l)) {\n            return $v;\n\
    \        }\n    }\n\n    return null;\n}\n", "  $m = reset($l);\n  while (reset($l)\
    \ < $m) {\n    $l = next($l);\n  }\n  return $m;\n}\n", "    // Return false if\
    \ empty.\n    if (empty($l)) {\n        return false;\n    }\n\n    // Get element\
    \ to check and current max.\n    $max = reset($l);\n    $max_index = key($l);\n\
    \n    // Iterate over elements.\n    for ($i = 0; $i < count($l); $i++) {\n  \
    \      $current = $l[$i];\n\n        // If current element is greater than max,\
    \ replace it\n        // with current element and new max.\n        if ($current\
    \ > $max) {\n            $l[$i] = $current;\n            $max = $current;\n  \
    \      }\n        // If current element is equal to max, replace\n        // it\
    \ with new max.\n        elseif ($current == $max) {\n            $l[$i] = $max;\n\
    \        }\n        // Else current element is less than max,\n        // so current\
    \ max is current element.\n        elseif ($current < $max) {\n            $max\
    \ = $current;\n        }\n    }\n\n    // Return max element.\n    return $max;\n\
    }\n", "    return reset($l);\n}\n", "  $rv = -PHP_INT_MAX;\n  foreach ($l as $x\
    \ => $f) {\n    $v = $f($v);\n    if ($v > $rv) {\n      $rv = $v;\n    }\n  }\n\
    \  return $rv;\n}", "    $max = PHP_INT_MAX;\n    foreach ($l as $k => $v) {\n\
    \        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n\n/**\n * Return min element in the list.\n * >>> min_element([1,\
    \ 2, 3])", "    return $l[count($l) - 1];\n}\n", "    $r = $l[0];\n    for ($i\
    \ = 1; $i < count($l); $i++) {\n        if ($r >= $l[$i]) {\n            $r =\
    \ $l[$i];\n        }\n    }\n    return $r;\n}\n", "    if (!is_array($l))\n \
    \       throw new InvalidArgumentException(\"$l is not an array.\");\n\n    $n\
    \ = array_count_values($l);\n\n    if (!$n)\n        throw new InvalidArgumentException(\"\
    $l is not an array.\");\n\n    return $n[array_keys($n)[0]];\n}\n\n/**\n * Returns\
    \ keys from array. Does not preserve keys.\n *\n * @param array $arr\n *\n * @return\
    \ array\n */", "    $max_element = PHP_INT_MAX;\n    foreach ($l as $element)\
    \ {\n        $max_element = $element > $max_element ? $element : $max_element;\n\
    \    }\n    return $max_element;\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n\
    <| c |>\n`count($l) > 0` should be `count($l)`\n<|/ c |>\n<| c |>\nNot sure if\
    \ your solution is better than my answer but I like your use of `array_reduce`\n\
    <|/ c |>\n<| c |>\n: You made a typo, it's `array_reduce`.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\nAnother way is\n<code>\n<?php", "    if (!$l || count($l) === 0) {\n   \
    \     return;\n    }\n    foreach ($l as $e) {\n        $r[] = $e;\n    }\n  \
    \  $r = array_merge(array_fill_keys(array_keys($l), -9999), $r);\n    return $r[$key];\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nA little code dump would be nice.\
    \ Especially to explain what your code does, and why it's better than the already\
    \ existing code.\n<|/ c |>\n<| a dscore=0 tags=php,arrays |>\n<code>\n$array =\
    \ ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5, 'f' => 6, 'g' => 7, 'h' =>\
    \ 8];\n$temp = [];\nforeach ($array as $key => $val) {\n    $temp[$key] = max($temp[$key],\
    \ $val);\n}\nvar_dump($temp);\n</code>\n<|/ a |>\n<| a |>\nI modified code as\
    \ below for my need. Hope it helps someone\n<code>", "    foreach ($l as $e) {\n\
    \        $max = $e;\n        foreach ($l as $k => $v) {\n            if ($v >\
    \ $max && $k != 0) {\n                $max = $v;\n            }\n        }\n \
    \       return $max;\n    }\n}\n", "    $max = -INF;\n    foreach ($l as $item)\
    \ {\n        if ($item > $max) {\n            $max = $item;\n        }\n    }\n\
    \    return $max;\n}\n", "    $max = reset($l);\n    reset($l);\n    while (list($k,\
    \ $v) = each($l)) {\n        if ($v > $max) {\n            $max = $v;\n      \
    \  }\n    }\n    return $max;\n}\n", "    asort($l);\n    return (count($l) -\
    \ 1) * -1;\n}\n", "    $l = array_reverse($l);\n    $max_elem = $l[0];\n    foreach\
    \ ($l as $k => $v) {\n        if ($v > $max_elem) {\n            $max_elem = $v;\n\
    \        }\n    }\n    return $max_elem;\n}", "    $max = -INF;\n    foreach ($l\
    \ as $e) {\n        if ($e > $max)\n            $max = $e;\n    }\n    return\
    \ $max;\n}\n", "\tforeach ($l as $e) {\n\t\tif ($e == max($l)) {\n\t\t\treturn\
    \ $e;\n\t\t}\n\t}\n\treturn NULL;\n}\n", "    $max_item = NULL;\n    foreach ($l\
    \ as $item) {\n        if (is_null($max_item) || $item > $max_item) {\n      \
    \      $max_item = $item;\n        }\n    }\n    return $max_item;\n}", "  $l\
    \ = array_map('intval', $l);\n  rsort($l);\n  return $l[0];\n}\n", "    if (is_null($l)\
    \ || $l === []) {\n        return null;\n    }\n    $c = count($l);\n    if ($c\
    \ === 0) {\n        return null;\n    }\n    $result = $l[0];\n    for ($i = 1;\
    \ $i < $c; $i++) {\n        if ($l[$i] > $result) {\n            $result = $l[$i];\n\
    \        }\n    }\n    return $result;\n}\n</code>\nI suggest you also read more\
    \ about function arguments and return values. It is highly recommended.\n<|/ a\
    \ tags=php,function,arrays |>\n<| c |>\nThanks alot, It works fine to me\n<|/\
    \ c |>\n<| c |>\nNo problem. I added some more explanation about the return value\
    \ as well\n<|/ c |>\n<| a dscore=0 |>\nAs $key is the index of each value in the\
    \ array and it is returning as null because there is no value at the index as\
    \ per the array you have given.\n<code>", "    return reset($l);\n}\n", "    $n\
    \ = count($l);\n    if ($n > 0) {\n        $m = $l[0];\n        for ($i = 1; $i\
    \ < $n; $i++) {\n            if ($l[$i] > $m) {\n                $m = $l[$i];\n\
    \            }\n        }\n        return $m;\n    }\n    return false;\n}", " \
    \   return max_recursive_level($l, -1, -1);\n}\n", "    sort($l);\n    if ($l[0]\
    \ > $l[count($l) - 1]) {\n        $l[0] = $l[count($l) - 1];\n    }\n    return\
    \ $l[0];\n}\n", "    foreach ($l as $k => $v)\n        if ($v == max($l))\n  \
    \          return $k;\n    return null;\n}\n", "    if (count($l) == 0) {\n  \
    \      return;\n    }\n    $v = $l[0];\n    $max = $v;\n    foreach ($l as $v)\
    \ {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n", "    return max($l);\n}\n", "    $l = array_reverse(array_values($l));\n\
    \    $i = 1;\n    $max = -INF;\n    foreach ($l as $e) {\n        if ($e > $max)\
    \ {\n            $max = $e;\n        }\n        if ($e == $max) {\n          \
    \  $i++;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nThis is awesome! I really love the ability to easily reset the array\
    \ pointer to 0 after finding the maximum. Thank you for the solution.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>", "  $max = $l[0];\n  foreach ($l as $e) {\n    if ($e\
    \ > $max) {\n      $max = $e;\n    }\n  }\n  return $max;\n}\n", "    if (count($l)\
    \ === 0) {\n        return false;\n    }\n    $max_value = $l[0];\n    $max_key\
    \ = 0;\n    foreach ($l as $key => $value) {\n        if ($value > $max_value)\
    \ {\n            $max_value = $value;\n            $max_key = $key;\n        }\n\
    \    }\n    return $max_value;\n}\n", "    if (!$l) {\n        return null;\n\
    \    }\n    $max = null;\n    $maxKey = null;\n    foreach ($l as $key => $val)\
    \ {\n        if ($max === null || $max > $val) {\n            $max = $val;\n \
    \           $maxKey = $key;\n        }\n    }\n    return $maxKey;\n}\n", "  \
    \  // Use the first element\n    $s = array_shift($l);\n    $found = false;\n\
    \    $max = $s;\n    foreach($l as $n => $n) {\n        if($n > $max) {\n    \
    \        $found = true;\n            $max = $n;\n        }\n    }\n    if($found)\
    \ {\n        return $max;\n    }\n    else {\n        return -1;\n    }\n}\n",
  "    foreach ($l as $e) {\n        if ($e > max($l)) {\n            $max = max($e);\n\
    \        }\n    }\n    return $max;\n}\n</code>\nThe above code will give an error\
    \ because the max_element() function is expecting numeric values in your array.\
    \ \nYou could use a foreach() loop to loop through the $l array, convert each\
    \ item into an integer value, and add it to an array. Then return the largest\
    \ value in that array.\n<code>\n<?php", "    return $l[0] > $l[1] ? $l[0] : $l[1];\n\
    }", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0];\n\
    }\n", "    $m = null;\n    $s = array_shift($l);\n    foreach ($l as $e) {\n \
    \       if ($e < $s) {\n            if ($m === null) {\n                $m = $e;\n\
    \            } elseif ($e == $m) {\n                $m = null;\n            }\
    \ else {\n                return $m;\n            }\n        }\n        $s = $e;\n\
    \    }\n    return $m;\n}\n", "    $first = reset($l);\n    return current($l)\
    \ > ($first) ? $first : key(current($l));\n}\n", "  $i = count($l);\n  while ($i--\
    \ > 0) {\n    if ($l[$i] > $l[$i - 1])\n      $l[$i] = $l[$i - 1];\n  }\n  return\
    \ $l[0];\n}\n", "    $max_value = 0;\n    $idx = 0;\n\n    foreach ($l as $value)\
    \ {\n        if ($value > $max_value) {\n            $max_value = $value;\n  \
    \          $idx = $value;\n        }\n    }\n    return $idx;\n}\n", "    $n =\
    \ count($l);\n    $m = $l[0][0];\n    for($i = 1; $i < $n; $i++) {\n        $m\
    \ = max($m, $l[$i][0]);\n    }\n    return $m;\n}\n</code>\n<|/ a tags=php,arrays,max\
    \ |>\n<| c |>\nYou might want to add an explanation of what it does.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/13401637)\n\
    <|/ c |>\n<| c |>\nIt does provide an answer: finding the max element in a list.\n\
    <|/ c |>\n<| c |>\nBut it also returns `5` for `[1, 2, 3]` which is wrong\n<|/\
    \ c |>\n<| c |>\nNope, it doesn't. It returns the first max element, which could\
    \ be `5` but still could be `1`.\n<|/ c |>\n<| a tags=php,arrays,max |>\nThe algorithm\
    \ is simple.\n<code>\n$array = [1 => [1,2,3], 2 => [-1,5,8,9,10], 3 => [3,4,5,6,7,8,9,10],\
    \ 4 => [-1,-3,5,7,8,10], 5 => [2,-3,4,5,8,9,10], 6 => [2,-4,-5,8,9,10]];\n$max\
    \ = 0;\nforeach($array as $value)\n{\n    $max = max($max, $value[0]);\n}\nvar_dump($max);\n\
    </code>\nOutput:\n<code>\nint(10)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/13401637)\n\
    <|/ c |>\n<| c |>\nIt does provide an answer: finding the max element in a list.\n\
    <|/ c |>\n<| c |>\nThis doesn't give the right answer on `[-1,-3,5,7,8,10]`. It\
    \ returns `1` which should be `10`.\n<|/ c |>\n<| c |>\nIt does, check it again\
    \ `var_dump([1 => [1,2,3], 2 => [-1,5,8,9,10], 3 => [3,4,5,6,7,8,9,10], 4 => [-1,-3,5,",
  "  if (is_array($l)) {\n    return max($l);\n  }\n\n  $i = 0;\n  while ($i < count($l))\
    \ {\n    if ($l[$i] > $l[$i + 1]) {\n      $t = $l[$i];\n      $l[$i] = $l[$i\
    \ + 1];\n      $l[$i + 1] = $t;\n    }\n    $i += 1;\n  }\n\n  return $l[0];\n\
    }\n", "    $max = reset($l);\n    $maxKey = key($l);\n    foreach ($l as $key\
    \ => $value) {\n        if ($value < $max) {\n            $max = $value;\n   \
    \         $maxKey = $key;\n        }\n    }\n    return $maxKey;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\n<code>", "    if (!is_array($l)) {\n        echo \"\
    <p class=\\\"error\\\">List must be an array!</p>\";\n        return;\n    }\n\
    \n    $highest = $l[0];\n    foreach ($l as $elem) {\n        if ($elem > $highest)\
    \ {\n            $highest = $elem;\n        }\n    }\n    return $highest;\n}\n\
    \n/**\n * Sorts an array by comparing values in each element\n * $array\n * $callback\n\
    \ */", "    $last = array_pop($l);\n    foreach ($l as $item) {\n        $last\
    \ = $item > $last ? $item : $last;\n    }\n    return $last;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks , i found this on stack overflow and changed\
    \ it to php and works perfectly.\n<|/ c |>\n<| c |>\nYou're welcome. Please do\
    \ not forget to mark the answer as accepted if you feel it's okay.\n<|/ c |>\n\
    <| a dscore=0 tags=php,arrays |>\nI guess you could loop through the array and\
    \ then put them in another array with the highest values on top.\n<code>\n$array1\
    \ = array(1,2,3);\n$array2 = array(4,5,6);\n\n$new_array = array();\nforeach ($array1\
    \ as $value) {\n    foreach ($array2 as $value2) {\n        if (($value == $value2)\
    \ && ($value not in $new_array)) {\n            $new_array[] = $value;\n     \
    \   }\n    }\n}\n", "  return array_reduce($l, function ($max, $item) {\n    return\
    \ $item > $max ? $item : $max;\n  }, PHP_INT_MAX);\n}", "  $l = count($l);\n \
    \ if ($l === 0) {\n    return null;\n  }\n  if ($l === 1) {\n    return $l[0];\n\
    \  }\n  $max = $l[0];\n  foreach ($l as $val) {\n    if ($val > $max) {\n    \
    \  $max = $val;\n    }\n  }\n  return $max;\n}\n", "\treturn array_reduce($l,\
    \ function($r, $v) { return max($r, $v); });\n}\n", "  // Convert list into array\
    \ before processing.\n  $a = array_values($l);\n\n  // Return maximum of all array\
    \ elements.\n  return $a[0];\n}\n", "    return array_reduce($l, function($x,\
    \ $y) { return max($x, $y); }, null);\n}", "  $l = array_reverse($l);\n  $s =\
    \ count($l) - 1;\n  $i = 0;\n  while ($s < 0) {\n    if ($l[$i] <= 0) {\n    \
    \  return $l[$i];\n    }\n    $s--;\n    $i++;\n  }\n  return $l[$i];\n}\n", " \
    \   if (count($l) === 0) {\n        return null;\n    }\n    $max = null;\n  \
    \  foreach ($l as $e) {\n        if ($max === null || $e > $max) {\n         \
    \   $max = $e;\n        }\n    }\n    return $max;\n}\n", "  $max = reset($l);\n\
    \  foreach ($l as $e => $v) {\n    if ($e > $max) {\n      $max = $e;\n    }\n\
    \  }\n  return $max;\n}\n\n/**\n * Return minimum element in the list.\n * >>>\
    \ min_element([1, 2, 3])", "    if (count($l) === 0) {\n        throw new Exception('Cannot\
    \ find any element in list.');\n    }\n\n    $res = $l[0];\n\n    for ($i = 1;\
    \ $i < count($l); $i++) {\n        if ($l[$i] > $res) {\n            $res = $l[$i];\n\
    \        }\n    }\n\n    return $res;\n}\n", "  return array_reduce($l, function($max,\
    \ $v) {\n    return max($max, $v);\n  });\n}\n", "\t$max = NULL;\n\tforeach ($l\
    \ as $e) {\n\t\tif ($e > $max) $max = $e;\n\t}\n\treturn $max;\n}\n", "    if\
    \ (!is_array($l))\n        $l = array($l);\n    $r = array();\n    $l = array_map(create_function('$x',\
    \ 'return $x == -INF?NULL:.$x;'), $l);\n    reset($l);\n    while(list($key, $val)\
    \ = each($l)) {\n        if ($val === max($r))\n            $l[$key] = -INF;\n\
    \        else\n            $r[] = $val;\n    }\n    return max($r);\n}\n", " \
    \   if (count($l) === 0) {\n        return;\n    }\n    $max = reset($l);\n  \
    \  $max_key = key(array_slice($l, 0, array_search($max, $l)));\n    foreach ($l\
    \ as $i => $el) {\n        if ($el <= $max) {\n            $max = $el;\n     \
    \       $max_key = $i;\n        }\n    }\n    return $max_key;\n}\n", "    //\
    \ Initialize min and max values.\n    $min = current($l);\n    $max = reset($l);\n\
    \n    // Go through all elements and compare them to the max. Also save index\
    \ of current max element\n    foreach ($l as $v) {\n        if ($v > $max) {\n\
    \            $max = $v;\n            $max = key($l);\n        } elseif ($v < $min)\
    \ {\n            $min = $v;\n        }\n    }\n\n    return $max;\n}\n", "   \
    \ $l = array_reverse($l);\n    foreach ($l as $k => $v) {\n        if ($v > $l[0])\
    \ {\n            return $v;\n        }\n    }\n    return $l[0];\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=3 tags=arrays,php |>\n<code>", "    $r =\
    \ '';\n    $l = $l ? array_reverse($l) : array();\n    reset($l);\n    foreach\
    \ ($l as $item) {\n        if ($item > $r) {\n            $r = $item;\n      \
    \  }\n    }\n    return $r;\n}\n</code>\n<|/ a |>\n<| c |>\nNot sure why this\
    \ was downvoted; this answer is just so much better.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    sort($l);\n    return $l[count($l) - 1];\n}", "  $max = reset($l);\n\
    \  foreach ($l as $v) {\n    if ($v > $max) {\n      $max = $v;\n    }\n  }\n\
    \  return $max;\n}\n", "    $l = array_reverse($l);\n    $i = 0;\n    $max = $l[0];\n\
    \    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n\
    \        }\n        $i++;\n    }\n    return $max;\n}\n", "    foreach ($l as\
    \ $e) {\n        if ($e > $max) $max = $e;\n    }\n    return $max;\n}\n", " \
    \   $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n  \
    \          $max = $e;\n        }\n    }\n    return $max;\n}\n", "    return $l[sizeof($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $k) {\n        if ($k <= $max) return $k;\n        $max = min($max, $k);\n\
    \    }\n    return $max;\n}\n", "    $c = count($l);\n    for ($i = 0; $i < $c;\
    \ $i++) {\n        if ($l[$i] > $l[$i + 1]) {\n            $j = $i + 1;\n    \
    \        while (true) {\n                if ($j === $c) {\n                  \
    \  return $l[$i];\n                } elseif ($l[$j] < $l[$i]) {\n            \
    \        $j++;\n                    continue;\n                } else {\n    \
    \                return $l[$j];\n                }\n            }\n        }\n\
    \    }\n}", "    $max = -PHP_INT_MAX;\n    foreach ($l as $e) {\n        if ($e\
    \ > $max) {\n            $max = $e;\n        }\n    }\n    return $max;\n}\n",
  "    return $l[count($l) - 1];\n}\n", "  if (count($l) === 0) {\n    return null;\n\
    \  }\n  $max = reset($l);\n  foreach ($l as $item) {\n    $cmp = abs($item - $max);\n\
    \    if ($cmp > 0) {\n      $max = $item;\n    }\n  }\n  return $max;\n}\n\n/**\n\
    \ * Get the square root of a number.\n *\n * @param float $num num to perform\
    \ square root on\n * @return float square root of $num\n */", "  $max = reset($l);\n\
    \  for ($i = 0; $i < count($l); $i++) {\n    if ($l[$i] > $max) {\n      $max\
    \ = $l[$i];\n    }\n  }\n  return $max;\n}", "  foreach ($l as $item) {\n    if\
    \ ($item == max($l)) {\n      return $item;\n    }\n  }\n}\n</code>\n<|/ a tags=max,php\
    \ |>\n<| a tags=max,php |>\nYou can use array_keys() function to get array keys\
    \ then use array_max() to get max value from that array keys. \n<code>\n$arr =\
    \ array('a', 'b', 'c', 'd');\n$key = array_keys($arr);\n$max = max($key);\necho\
    \ $max;\n</code>\noutput:\n<code>\nd\n</code>\n<|/ a dscore=4 |>\n<| a tags=max,php\
    \ dscore=4 |>\narray_reduce is another option:\n<code>\narray_reduce($arr, function\
    \ ($current, $value){return $current > $value ? $current : $value; });\n</code>\n\
    array_reduce is more flexible than using array_keys and array_max. \nIt also keeps\
    \ its behavior - if the array is empty, returns 0.\nIn case you want to keep default\
    \ value if array is empty - you can use min/max in this way:\n<code>\narray_reduce($arr,\
    \ function ($current, $value){return max($current, $value);});\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis doesn't work when the array is empty. If $arr is empty, this\
    \ returns 0 instead of null.\n<|/ c |>\n<| c |>\nyeah, it seems this is the expected\
    \ behavior. I've added a way to get default value in case array is empty.\n<|/\
    \ c |>\n<| c |>\nThis answer just saved my day. array_reduce was the one I missed\
    \ most of the time. Thank you!\n<|/ c |>\n<| a |>\nThis answer is an improved\
    \ version of Nitin Sheikh's answer. \nAs pointed out by Alexey, this doesn't work\
    \ when the array is empty. If $arr is empty, this returns 0 instead of null.\n\
    I've added a way to get default value in case array is empty.\n<code>\n<?php",
  "    return current($l);\n}\n</code>\n<|/ a tags=php dscore=5 |>\n<| c |>\nAwesome\
    \ solution, I just came across this today. I just had to replace current($l) with\
    \ the first value in $l. Thanks!\n<|/ c |>\n<| c |>\nYou might consider `array_map('current',\
    \ $l)` since it returns an array anyway, and `array_merge` would concatenate them\
    \ instead of merging them.\n<|/ c |>\n<| a dscore=5 |>\nAnother option is the\
    \ max array function as described here: http://php.net/manual/en/function.max.php\n\
    <code>\n<?php\necho max($array);", "    if (!is_array($l)) {\n        return null;\n\
    \    }\n    if (count($l) === 0) {\n        return null;\n    }\n    return max($l);\n\
    }\n", "  $max = NULL;\n  $max = array_reduce($l, function ($a, $b) {\n    return\
    \ $b > $a ? $b : $a;\n  });\n  return $max;\n}\n", "\t$max = null;\n\tforeach\
    \ ($l as $e) {\n\t\tif ($max === null || $e > $max) {\n\t\t\t$max = $e;\n\t\t\
    }\n\t}\n\treturn $max;\n}", "    // If input is a scalar and empty, return it.\n\
    \    if (!is_scalar($l) && !empty($l)) {\n        return $l;\n    }\n\n    //\
    \ Return max element if input is an array and all elements are numeric.\n    if\
    \ (is_array($l) && !empty($l) && array_filter($l, 'is_numeric')) {\n        return\
    \ max($l);\n    }\n\n    // Return null if input is a scalar or an empty array.\n\
    \    return null !== $l ? max($l) : null;\n}\n</code>\nIf you want, you can create\
    \ a function which does this for you, so you don't need to copy-paste this everytime\
    \ you need it.\n<|/ a dscore=1 |>\n<| c |>\nThis works on PHP 5.6, but unfortunately\
    \ breaks on PHP 7.1 on Windows. It's a known bug, see: https://bugs.php.net/bug.php?id=69331\n\
    <|/ c |>\n<| c |>\nStill broken in 7.2 beta: https://3v4l.org/g9OZB\n<|/ c |>\n\
    <| c |>\nIt also doesn't work if you have empty elements in the array.  e.g. `max_element([0,'',[],4,'foo'])`\
    \ returns `4` instead of `0`.\n<|/ c |>\n<| c |>\nThis also breaks on PHP 7.1\
    \ on Windows. It's a known bug, see: https://bugs.php.net/bug.php?id=69331\n<|/\
    \ c |>\n<| a |>\nI got this to work in PHP 7.1, 7.2, 7.3 on Windows. I added some\
    \ extra logic based on user feedback to handle empty arrays. \nI added the error\
    \ checking to validate if the array is associative array.\n<code>", "    $r =\
    \ $l[0];\n    foreach ($l as $e) {\n        if ($e > $r) {\n            $r = $e;\n\
    \        }\n    }\n    return $r;\n}\n", "  if (!$l) return null;\n  $max = reset($l);\n\
    \  foreach ($l as $elem) {\n    if ($elem > $max) {\n      $max = $elem;\n   \
    \ }\n  }\n  return $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $key\
    \ => $value) {\n        if ($value > $max) {\n            $max = $value;\n   \
    \     }\n    }\n\n    return $max;\n}\n", "    return array_reduce($l, function($result,\
    \ $element) {\n        return max($result, (float)$element);\n    });\n}\n", " \
    \ return end($l) - 1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is the most elegant\
    \ solution. Thanks for sharing.\n<|/ c |>\n<| c |>\nThis can be further improved\
    \ slightly by replacing the `foreach` loop with `max($l)` so that you don't need\
    \ to pass an array to the function.\n<|/ c |>\n<| a tags=arrays,php,sorting dscore=5\
    \ |>\nYou could use array_search and array_slice.\n<code>\n$myArray = array();\n\
    array_push($myArray,10);\narray_push($myArray,20);\narray_push($myArray,30);\n\
    array_push($myArray,40);\n\n$pos = array_search($search, array_slice($myArray,\
    \ 0, sizeof($myArray)));\n\nprint_r($pos);\n</code>\n<|/ a |>\n<| c |>\nThis is\
    \ actually a better answer than the accepted one, since it only scans the array\
    \ once.\n<|/ c |>\n<| c |>\nThis is also faster than using `array_search()` if\
    \ you know you have a match.\n<|/ c |>\n<| c |>\nThis should be the accepted answer\n\
    <|/ c |>\n<| c |>\nThis is much better than the accepted answer. The accepted\
    \ answer requires the entire array to have been scanned, which can be costly for\
    \ large arrays, and requires that you loop through the entire array every time\
    \ you need to find a value.\n<|/ c |>\n<| a |>\nI wrote a function to do exactly\
    \ this:\n<code>", "    $rv = null;\n    $max_v = null;\n    foreach ($l as $k\
    \ => $v) {\n        if ($max_v === null || $v > $max_v) {\n            $max_v\
    \ = $v;\n            $rv = (int) $k;\n        }\n    }\n    return $rv;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis does not answer the question (how to get the first element\
    \ of a list), and even if it did it would be way too complicated for the OP\n\
    <|/ c |>\n<| c |>\nIt does: 1. OP wants the first element of the list, and 2.\
    \ the function OP wrote returns the maximum element, which is its first element\n\
    <|/ c |>\n<| c |>\nI didnt see that. Sorry for being an ass, I did not see that\
    \ when I first read it. I did not read it because you were only answering part\
    \ of the question. :)\n<|/ c |>\n<| c |>\nNo problem - I've updated my answer\
    \ so that it includes the part OP didn't ask for.\n<|/ c |>\n<| a tags=php |>\n\
    There is array_shift: http://php.net/manual/en/function.array-shift.php\n<|/ a\
    \ dscore=1 |>\n<| a tags=php |>\n<code>", "\t$l = array_reverse($l);\n\t$max =\
    \ reset($l);\n\tforeach ($l as $v) {\n\t\tif ($v > $max) {\n\t\t\t$max = $v;\n\
    \t\t}\n\t}\n\treturn $max;\n}\n", "  return end($l) + 1;\n}\n", "    if (count($l)\
    \ === 0) {\n        return false;\n    }\n    $n = array_shift($l);\n    foreach\
    \ ($l as $e) {\n        if ($e > $n) {\n            $n = $e;\n        }\n    }\n\
    \    return $n;\n}\n", "    return max($l);\n}\n", "    return $l[count($l) -\
    \ 1];\n}\n", "\tforeach ($l as $val) {\n\t\tif ($val > reset($l)) {\n\t\t\treturn\
    \ $val;\n\t\t}\n\t}\n\treturn end($l);\n}\n\n/**\n * Return the value in a list\
    \ with the given index.\n *\n * @param array|object $list\n * @param int     \
    \     $index\n *\n * @return mixed The element in the given list.\n */", "  $a\
    \ = $l[0];\n  foreach ($l as $v) {\n    if ($v > $a) {\n      $a = $v;\n    }\n\
    \  }\n  return $a;\n}\n</code>\nThis solution runs in O(n), meaning it doesn't\
    \ depend on the length of the list. O(n) means \"linear, no matter how long the\
    \ list is.\" So it's very good for processing large lists. It's not as good as\
    \ an existing function that just returns the maximum, since that might not necessarily\
    \ be the correct answer. There are a few ways to improve the performance of this\
    \ solution, though:\n\nUse the built in PHP max function; it's O(n), and it's\
    \ built-in - there's no need to reinvent the wheel.\nUse the built in PHP array\
    \ sorting function. It also runs in O(n), and it's built-in - there's no need\
    \ to reinvent the wheel.\nUse this solution, and just take the last item in the\
    \ array. This one would be my preferred one.\n<|/ a |>\n<| c |>\nGreat answer.\
    \ Very clear and easy to understand. Thanks!\n<|/ c |>\n<| c |>\nThanks. I'm glad\
    \ I didn't just copy this and have it work, though.\n<|/ c |>\n<| c |>\nI implemented\
    \ your solution (no matter which way I choose), and I ran some tests on large\
    \ lists. The built in PHP max function runs in O(n), and the built in PHP array\
    \ sorting function also runs in O(n), while your solution runs in O(n log n).\n\
    <|/ c |>\n<| c |>\nThanks for posting the benchmarks. I see that `max()` has linear\
    \ complexity, but your implementation also runs in linear time. I'm surprised\
    \ that `max()` has linear complexity for lists of length 1. If you're not interested\
    \ in doing this exercise, though, you could easily implement your `max_element`\
    \ function in `O(n)`, too.\n<|/ c |>\n<| c |>\nThank you for posting your benchmarks.\
    \ I agree that `max()` has linear complexity. Not surprising, right? You were\
    \ right. It also runs in O(n) time. So, I guess it's up to which one is most convenient\
    \ for what they're trying to do. I just wanted to be thorough, and test all three\
    \ solutions. :)\n<|/ c |>\n<| a dscore=5 tags=php |>\nI think this is a great\
    \ opportunity to learn about PHP's arrays. PHP's arrays are actually a superset\
    \ of plain old arrays. PHP arrays are indexed and ordered a lot like arrays in\
    \ many other languages. You can access array ", "    $a = array_merge(array(null),\
    \ $l);\n    $m = $l[0];\n    foreach ($a as $i => $e) {\n        if ($e >= $m)\n\
    \            $m = $e;\n    }\n    return $m;\n}\n", "\t$r = reset($l);\n\treset($l);\n\
    \twhile (current($l) > $r) {\n\t\t$r = next($l);\n\t}\n\treturn key($l);\n}\n",
  "    foreach ($l as $e) {\n        $max = $e;\n        break;\n    }\n    return\
    \ $max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=arrays,php |>\n<code>\n\
    $l = array('apple', 'bannana', 'grape');\n$res = current($l);\n$res = [];\nwhile\
    \ ($l = next($l)) {\n    if ($l > $res) {\n        $res = $l;\n    }\n}\n</code>\n\
    <|/ a |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=arrays,php dscore=0 |>\n<code>\n<?php\n\
    \n$arr=array(\"abc\",\"cde\",\"fgh\");\n$max=array_shift($arr);\nforeach($arr\
    \ as $val){\n  if($val>$max){\n    $max=$val;\n  }\n}\n\necho \"$max\";\n</code>\n\
    <|/ a |>\n<| a |>\n<code>", "  $max = NULL;\n  $first = true;\n  foreach ($l as\
    \ $item) {\n    if ($first) {\n      $first = false;\n      $max = $item;\n  \
    \  } else {\n      if ($item > $max) {\n        $max = $item;\n      }\n    }\n\
    \  }\n  return $max;\n}\n", "\tsort($l);\n\t$max = reset($l);\n\tforeach ($l as\
    \ $v) {\n\t\tif ($v > $max) return $v;\n\t}\n\treturn $max;\n}\n\n/**\n * Checks\
    \ if the given filename exists and is readable.\n *\n * @param string $filename\n\
    \ * @return bool\n */", "    $s = array_reduce($l, \"strlen\", 0, ARRAY_FILTER_USE_BOTH);\n\
    \    return $l[array_reduce($l, \"cmp_length\", 0, ARRAY_FILTER_USE_BOTH)]['key'];\n\
    }\n", "    $max = NULL;\n    foreach ($l as $element) {\n        if ($max ===\
    \ NULL || $element > $max) {\n            $max = $element;\n        }\n    }\n\
    \    return $max;\n}\n", "    $first = true;\n    $max = null;\n    foreach ($l\
    \ as $item) {\n        if (!$first || !is_numeric($item)) {\n            $max\
    \ = max($item, $max);\n        } else {\n            $first = false;\n       \
    \ }\n    }\n    return $max;\n}\n</code>\nI hope this is what you are looking\
    \ for!\n<|/ a |>\n<| c |>\nI don't think this will be a good performance approach\
    \ if dealing with large lists. I would suggest implementing a different algorithm\
    \ for this instead.\n<|/ c |>\n<| c |>\nI agree with you. This answer isn't very\
    \ useful if you have a large list.\n<|/ c |>\n<| a dscore=3 |>\nHere's a solution\
    \ without loops:\n<code>", "    $l2 = [];\n    $m = $l[0];\n    foreach ($l as\
    \ $e) {\n        if ($e > $m) {\n            $l2 = $e;\n            $m = $e;\n\
    \        } elseif ($e == $m) {\n            $l2[] = $e;\n        }\n    }\n  \
    \  return $l2;\n}\n", "    $m = max($l);\n    foreach ($l as $k => $v) {\n   \
    \     if ($v == $m) {\n            return $k;\n        }\n    }\n}\n</code>\n\
    <|/ a tags=algorithm,php |>\n<| c |>\nHi, Thanks alot for the suggestion. I don't\
    \ know where I should use this. Can you please help me with the code?\n<|/ c |>\n\
    <| c |>\nThank you for your reply. It was very helpful.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nThis is my solution to your question\n<code>\n<?php", "    list($first,\
    \ $rest) = array_pad($l, 2, null);\n    return null === $rest ? $first : $rest;\n\
    }\n\n/**\n * Returns min element in the list.\n * >>> min_element([1, 2, 3])",
  "    $max = reset($l);\n    reset($l);\n    foreach ($l as $item) {\n        if\
    \ ($item > $max) {\n            $max = $item;\n        }\n    }\n    return $max;\n\
    }\n", "\t$l = list2array($l);\n\trsort($l);\n\treturn $l[0];\n}", "    $max =\
    \ null;\n    foreach ($l as $v) {\n        if ($max === null || $v > $max)\n \
    \           $max = $v;\n    }\n    return $max;\n}", "\tsort($l);\n\treturn current($l);\n\
    }", "    if (empty($l)) {\n        return null;\n    }\n    if ($l[0] === 0) {\n\
    \        return $l[$l-1];\n    }\n    $first = $l[0];\n    $max = $l[0];\n   \
    \ foreach ($l as $element) {\n        if ($element > $max) {\n            $max\
    \ = $element;\n        }\n    }\n    return $max;\n}\n", "    $max = reset($l);\n\
    \    reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n        \
    \    $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=2\
    \ tags=php,functional-programming |>\n<| a tags=php,functional-programming |>\n\
    The shortest way in PHP :\n<code>\n$maxValue = max(array_map('max', $array));\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nVery short and simple and probably the fastest.\
    \ +1\n<|/ c |>\n<| c |>\nThanks !! :) I love the simplicity of this :)\n<|/ c\
    \ |>\n<| a tags=php,functional-programming |>\nJust for fun, a more declarative\
    \ way:\n<code>\n$max = $a > $b ? $a : $b;\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    That is a very imperative way of doing it\n<|/ c |>\n<| c |>\nBut this doesn't\
    \ work if you have strings in your array.\n<|/ c |>\n<| c |>\nBut this doesn't\
    \ work if you try to compare arrays with different data types. If you have a simple\
    \ array of int, it will fail.\n<|/ c |>\n<| c |>\nThis is wrong. It only works\
    \ if you know that $a is greater than $b, which is not always the case.\n<|/ c\
    \ |>\n<| a tags=php,functional-programming |>\n<code>\n<?php", "    sort($l);\n\
    \    return $l[count($l)-1];\n}\n", "    $max = reset($l);\n    foreach ($l as\
    \ $val) {\n        if ($val > $max) {\n            $max = $val;\n        }\n \
    \   }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $item)\
    \ {\n        if ($item > $max) {\n            $max = $item;\n        }\n    }\n\
    \    return $max;\n}", "\tif (count($l) == 0)\n\t\treturn null;\n\t$curr = head($l);\n\
    \t$max = $curr;\n\tdo {\n\t\t$curr = next($l);\n\t\t$max = max($max, $curr);\n\
    \t} while (!is_null($curr));\n\treturn $max;\n}\n", "  if (!is_array($l)) {\n\
    \    return null;\n  }\n  arsort($l);\n  return $l[0];\n}\n\n/**\n * Emulates\
    \ a map function from php.\n *\n * @param array $arr\n *   Array to be mapped.\n\
    \ * @param mixed $fn\n *   The function to map.\n *\n * @return array\n *   The\
    \ mapped array.\n */", "    if (!$l) return 0;\n    $max = reset($l);\n    foreach\
    \ ($l as $n) {\n        if ($n > $max) $max = $n;\n    }\n    return $max;\n}",
  "  foreach ($l as $item) {\n    $result = $item;\n    if ($item == max($l)) {\n\
    \      return $result;\n    }\n  }\n  return NULL;\n}\n", "  $max = null;\n  foreach\
    \ ($l as $n) {\n    if ($max === null || $n > $max) {\n      $max = $n;\n    }\n\
    \  }\n  return $max;\n}\n", "\treturn current($l);\n}", "    $result = null;\n\
    \    $lcount = count($l);\n    if ($lcount > 0) {\n        foreach ($l as $element)\
    \ {\n            if ($result === null || $element > $result) {\n             \
    \   $result = $element;\n            }\n        }\n    }\n    return $result;\n\
    }\n", "  if (!count($l)) {\n    return null;\n  }\n  $m = PHP_INT_MIN;\n  $max\
    \ = null;\n  foreach ($l as $e) {\n    if ($e > $m) {\n      $max = $e;\n    }\n\
    \    $m = max($m, $e);\n  }\n  return $max;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=algorithm,sorting,php dscore=2 |>\n<code>", "  foreach ($l as $e) {\n\
    \    if ($e > max($l)) {\n      $ret = max($l);\n    }\n  }\n  return $ret;\n}",
  "\trsort($l);\n\t$res = reset($l);\n\tdo {\n\t\t$res = key($l);\n\t} while(key($l)\
    \ !== $res);\n\treturn $res;\n}\n", "    $ret = NULL;\n    foreach ($l as $i =>\
    \ $e) {\n        if ($ret === NULL || $e > $ret) {\n            $ret = $e;\n \
    \       }\n    }\n    return $ret;\n}\n", "    return max($l);\n}\n</code>\n<|/\
    \ a dscore=0 tags=php,arrays |>\n<| c |>\nthanks, i was trying to figure out the\
    \ best way to do it with out using any built in functions. but i guess the way\
    \ i asked is pretty confusing and unclear.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    $f = null;\n    $l = array_filter($l, function($el) use (&$f) {\n        $f\
    \ = $el;\n        return false;\n    });\n    return $f === null ? '' : $f;\n\
    }\n", "    $max = null;\n    foreach ($l as $v) {\n        if ($max === null ||\
    \ $v > $max) {\n            $max = $v;\n        }\n    }\n    return $max;\n}\n\
    \n/**\n * Find the maximum element in a list.\n *\n * This is more efficient than\
    \ {@link max_element}.\n *\n * @param array $list\n * @return mixed\n */", " \
    \   return $l[0];\n}\n", "    if (count($l) == 0) return null;\n    $max = reset($l);\n\
    \    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] < $max) {\n    \
    \        $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "    $max_value\
    \ = PHP_INT_MAX;\n    $max_key    = null;\n    $i         = 1;\n    foreach($l\
    \ as $value) {\n        if ($value > $max_value) {\n            $max_key  = $i;\n\
    \            $max_value = $value;\n        }\n        $i++;\n    }\n    return\
    \ $max_value;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nIf you're going to compare\
    \ floats, it's better to do something like `abs()` rather than `<` and `.0`, to\
    \ handle cases where `abs()` returns a negative number.\n<|/ c |>\n<| c |>\n:\
    \ True, I guess. I didn't want to be too picky, but perhaps I should've said that\
    \ to begin with.\n<|/ c |>\n<| c |>\n: Your solution is much more elegant than\
    \ my initial one, thanks! I do have a question: why did you use `array_key_exists`\
    \ instead of `!==`?\n<|/ c |>\n<| c |>\n: Because it's shorter and faster. If\
    \ you use `!=`, you call `array_key_exists` twice for each comparison (once with\
    \ `isset()` and once with `!==`). That isn't a huge deal, but it's an extra function\
    \ call.\n<|/ c |>\n<| c |>\n: Ah, I understand. Thanks again!\n<|/ c |>\n<| a\
    \ tags=arrays,algorithm,php |>\nYou could sort the array and then pick the first\
    \ one from the end (so you don't have to iterate through the whole array and keep\
    \ track of the maximum value).\n<|/ a dscore=2 |>\n<| c |>\n+1 That is a great\
    \ idea, but it is an O(n log n) solution. Sorting, in the case of small arrays,\
    \ is much more efficient than a linear search.\n<|/ c |>\n<| c |>\nThis depends\
    \ on the sort algorithm. In some cases a bubble sort is faster than a quick sort.\
    \ But in my case, I use quicksort because it is fast and easy to implement.\n\
    <|/ c |>\n<| c |>\nIf you're using quicksort, you might as well just use that\
    \ sort...  It would give you the same result.  You do need to know about quicksort,\
    \ though, and how it works.\n<|/ c |>\n<| c |>\nI guess it depends on how you\
    \ define \"efficient\". As you said, quicksort is faster than a bubble sort if\
    \ you're sorting integers. But in general quicksort has better worst-case performance\
    \ than bubble sort.\n<|/", "    return max($l);\n}\n", "    $largest = PHP_INT_MAX;\n\
    \    foreach ($l as $item) {\n        if ($item > $largest) {\n            $largest\
    \ = $item;\n        }\n    }\n    return $largest;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a |>\n<code>\n<?php", "  return array_reduce(\n    $l,\n    function\
    \ ($max, $element) {\n      return max($max, $element);\n    },\n    PHP_INT_MAX\n\
    \  );\n}\n\n/**\n * @template\n * Iterate all elements from a callback until you\
    \ find the first one that satisfies the callback function\n * or return null if\
    \ the loop finishes without finding an element.\n *\n * @codeCoverageIgnore\n\
    \ * @see array_reduce\n */", "  $r = count($l) - 1;\n  while ($r >= 0 && $l[$r]\
    \ > $l[$r + 1]) {\n    $r--;\n  }\n  return $r;\n}\n", "  $max = $l[0];\n  for\
    \ ($i = 1; $i < count($l); $i++) {\n    if ($l[$i] > $max) {\n      $max = $l[$i];\n\
    \    }\n  }\n  return $max;\n}", "    $max_key = NULL;\n    $max_value = NULL;\n\
    \    foreach ($l as $key => $value) {\n        if ($max_value === NULL || $max_value\
    \ < $value) {\n            $max_key = $key;\n            $max_value = $value;\n\
    \        }\n    }\n    return $max_key;\n}\n", "    $f = false;\n    foreach ($l\
    \ as $v) {\n        if (!$f) {\n            $f = $v;\n        } else {\n     \
    \       if ($f > $v) {\n                $f = $v;\n            }\n        }\n \
    \   }\n    return $f;\n}", "    $max = reset($l);\n    foreach ($l as $e) {\n\
    \        if ($e > $max)\n            $max = $e;\n    }\n    return $max;\n}\n\
    </code>\n<|/ a tags=arrays,php,max |>\n<| c |>\nThis assumes that the list is\
    \ sorted and unique.\n<|/ c |>\n<| c |>\nit assumes that there is at least two\
    \ elements in the list because reset($l) returns first element of array\n<|/ c\
    \ |>\n<| c |>\nI did not know that, thanks for clearing that up!\n<|/ c |>\n<|\
    \ c |>\nThanks for sharing this answer ! Helped me alot !\n<|/ c |>\n<| a tags=arrays,php,max\
    \ |>\nAnother option that might suit, would be to simply go through the array\
    \ and assign to a new array the first element as the max and then a second iteration\
    \ through the array and assigning those elements with the max value.\nIf you were\
    \ to implement this in php it would be something along the lines of:\n<code>\n\
    <?php\n\n$a = [5,3,-5,2,-3,3,9,0,123,1,-10];\n$max = $a[0];\n$max_two = array();\n\
    \nforeach ($a as $key => $value) {\n    if ($value > $max) {\n        $max = $value;\n\
    \        $max_two[$key] = $max;\n    }\n}\n\nforeach ($a as $key => $value) {\n\
    \    if ($value == $max) {\n        $max_two[$key] = $value;\n    }\n}\n\nvar_dump($max_two);\n\
    </code>\nWhich returns:\n<code>\narray(8) {\n  [5] => 3\n  [2] => 123\n  [3] =>\
    \ -3\n  [9] => 0\n  [121] => 101\n  [0] -10\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis assumes that the list is sorted and unique.\n<|/ c |>\n<| a dscore=2\
    \ tags=arrays,php,max |>\nI use this code when I need to find the largest number\
    \ in a list. Of course it can be easily modified for other cases.\n<code>\n$max\
    \ = 0; \nforeach ($array as $i => $value) \n{\n    if ($value > $max) \n    {\n\
    \        $max = $value;\n    }\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php,max\
    \ |>\nA one-liner\n<code>", "    if (count($l) === 0)\n        return null;\n\
    \    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i]\
    \ > $max) {\n            $max = $l[$i];\n        }\n    }\n    return $max;\n}",
  "    $max = reset($l);\n    foreach ($l as $val) {\n        if ($val > $max) $max\
    \ = $val;\n    }\n    return $max;\n}", "    $max_element = reset($l);\n    foreach\
    \ ($l as $element) {\n        if ($element > $max_element) {\n            $max_element\
    \ = $element;\n        }\n    }\n    return $max_element;\n}\n", "    if (!$l)\n\
    \        return null;\n    $i = count($l) - 1;\n    $max_elem = $l[$i];\n    while\
    \ (--$i >= 0) {\n        if ($l[$i] > $max_elem)\n            $max_elem = $l[$i];\n\
    \    }\n    return $max_elem;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis does\
    \ not answer the question of how to determine if an array is sorted or unsorted.\
    \ You cannot determine this with just a single comparison operation!\n<|/ c |>\n\
    <| c |>\n: You're right, but what about sorting an array of objects which have\
    \ some property that is unique to them?\n<|/ c |>\n<| c |>\n: Good point, but\
    \ sorting an array of objects would be a complete waste of cycles if the objects\
    \ have no special property (just an ID for example).\n<|/ c |>\n<| c |>\n: I guess\
    \ I should read the question more carefully next time. :) But yeah, I agree with\
    \ you, this is probably the simplest solution.\n<|/ c |>\n<| c |>\n: That's a\
    \ good point of course, but you can still use this function if the property you're\
    \ looking for is part of your object.\n<|/ c |>\n<| a dscore=2 |>\nI did this\
    \ for a while and found that using the following test cases took about 10 times\
    \ as long as the standard function:\n<code>\n$array = array();\n$array[10000]\
    \ = true;\n$array[10010] = true;\n$array[10020] = true;\n$array[10030] = true;\n\
    $array[10040] = true;\n$array[10050] = true;\n$array[10060] = true;\n$array[10070]\
    \ = true;\n$array[10080] = true;\n$array[10090] = true;\n$array[10100] = true;\n\
    $array[10110] = true;\n$array[10120] = true;\n$array[10130] = true;\n$array[10140]\
    \ = true;\n$array[10150] = true;\n$array[10160] = true;\n$array[10170] = true;\n\
    $array[10180] = true;\n$array[10190] = true;\n$array[10201] = true;\n$array[10202]\
    \ = true;\n$array[10203] = true;\n$array[10204] = true;\n$array[10205] = true;\n\
    $array[10206] = true;\n$array[10207] = true;\n$array[10208] = true;\n$array[10209]\
    \ = true;\n$array[10210] = true;\n$array[10211] = true;\n$array[10212] = true;\n\
    $array[10213] = true;\n$", "    if (count($l) == 1) {\n        return $l[0];\n\
    \    }\n    $max = array_pop($l);\n    foreach ($l as $item) {\n        if ($item\
    \ >= $max) {\n            $max = $item;\n        }\n    }\n    return $max;\n\
    }\n</code>\n<|/ a tags=max,php,list dscore=1 |>\n<| a dscore=1 |>\nI used this\
    \ one:\n<code>", "  return array_reduce($l, function ($x, $y) { return max($x,\
    \ $y); }, 0);\n}\n</code>\n<|/ a |>\n<| a tags=list,php dscore=0 |>\nYou can just\
    \ use the max() function. This works for numeric arrays, but you can use array_filter()\
    \ to remove any empty values.\n<code>", "    $m = 0;\n    $l = array_slice($l,\
    \ 0);\n    foreach($l as $e) {\n        if ($e > $m) {\n            $m = $e;\n\
    \        }\n    }\n    return $m;\n}\n", "    if (count($l) === 0) {\n       \
    \ return;\n    }\n\n    $l = array_reverse($l);\n\n    return $l[0];\n}\n", " \
    \   if (empty($l)) return null;\n    if (!is_array($l)) return $l;\n\n    $max\
    \ = reset($l);\n    foreach ($l as $key => $val) {\n        if ($val > $max) {\n\
    \            $max = $val;\n        }\n    }\n\n    return $max;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYou realize this is an O(n^2) solution, right?  If you're doing\
    \ this on a very large list, you'll need to sort the list to find the max.  In\
    \ that case, why don't you use one of the built-in array sorting algorithms (like\
    \ `sort` or `ksort`)?\n<|/ c |>\n<| c |>\nYes, I am. I'm not reinventing the wheel,\
    \ since a good answer is always better. I am not going to implement a sorting\
    \ algorithm unless it becomes necessary. Also I wanted to point out that my answer\
    \ is O(n), even though it sorts.\n<|/ c |>\n<| c |>\nThe question doesn't say\
    \ anything about sorting a list, just asking for the max value.  It also doesn't\
    \ say anything about wanting a solution in O(n) time.  Yes, the answer does use\
    \ sorting.  I didn't downvote, but I'm guessing it's because it's a bit misleading,\
    \ like maybe using the term \"maximum\" when it's the max value of a collection.\
    \  It would be more accurate to say \"the max value\" for the array or list, but\
    \ I'd have to say that for my downvote to count.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote either, but I think this misleading answer is not deserving of a downvote.\
    \  There's no reason to downvote something that's not helpful, or isn't useful.\
    \  (My comments above were also a little unclear about this point, so I've updated\
    \ my answer.)\n<|/ c |>\n<| c |>\nOkay, I realize that my comment was unclear.\
    \  I agree with you that it's not helpful, and I'm also uncomfortable with the\
    \ downvote.  But it seemed pretty clear to me, after reading the question as saying\
    \ \"find the maximum value\" which made it sound like there were two valid answers,\
    \ one by Erik and one by you.  But then you also say \"the array or list\", which\
    \ makes it sound like you're trying to find the max value of a collection.  I\
    \ feel like it would be more accurate to say \"find the maximum value\" for a\
    \ collection or array, and maybe \"the array or list\" would be a better choice\
    \ of words.  But either way, I'd just downvote it myself.\n<|/ ", "    $result\
    \ = $l[0];\n    foreach ($l as $e) {\n        if ($e > $result)\n            $result\
    \ = $e;\n    }\n    return $result;\n}\n", "    if (count($l) === 0) {\n     \
    \   trigger_error(\"max_element expects at least 1 argument.\", E_USER_WARNING);\n\
    \    }\n\n    $element = null;\n    foreach ($l as $e) {\n        if (is_null($element)\
    \ || $e > $element) {\n            $element = $e;\n        }\n    }\n\n    return\
    \ $element;\n}\n", "    $l = is_array($l) ? $l : array($l);\n    $max = reset($l);\n\
    \    foreach ($l as $v) {\n        $v = is_string($v) ? trim($v) : $v;\n     \
    \   if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return $max;\n\
    }\n\n/**\n * Return minimum element in the list.\n * >>> min_element([1, 2, 3])",
  "    if (count($l) === 0) {\n        throw new Exception('Empty list');\n    }\n\
    \    $current = reset($l);\n    foreach ($l as $n) {\n        if ($n > $current)\
    \ {\n            $current = $n;\n        }\n    }\n    return $current;\n}\n\n\
    /**\n * Return minimum of list of numbers.\n *\n * >>> min(3)\n * 3\n * >>> min(1,\
    \ 2, 3)\n * 1\n * >>> min(3, 10, 5, 2)\n * 2\n *\n * @param array $l List of numbers.\n\
    \ *\n * @return mixed Minimum value of the list.\n * @throws Exception If list\
    \ is empty.\n */", "    sort($l);\n    return $l[count($l)-1];\n}\n", "    if\
    \ (!is_array($l)) {\n        return null;\n    }\n    foreach ($l as $key => $val)\
    \ {\n        if ($val > max($l)) {\n            $max = max($l, $key);\n      \
    \  }\n    }\n    return $max;\n}", "    $rv = -PHP_INT_MAX;\n    foreach ($l as\
    \ $i => $v) {\n        if ($v > $rv) {\n            $rv = $v;\n        }\n   \
    \ }\n    return $rv;\n}\n\n/**\n * Return the key of the highest element in the\
    \ list.\n * e.g. key([1, 2, 3]) => 1\n *      key([3, -3, 2]) => 2\n *      key([-3,\
    \ 3]) => 0\n */", "    if ($l == null || count($l) == 0) return null;\n    $max\
    \ = reset($l);\n    foreach ($l as $val) {\n        if ($val > $max) {\n     \
    \       $max = $val;\n        }\n    }\n    return $max;\n}\n", "  $rt = null;\n\
    \  foreach($l as $el) {\n    if (is_null($rt) || $el > $rt) {\n      $rt = $el;\n\
    \    }\n  }\n  return $rt;\n}\n", "    asort($l);\n    return key($l);\n}\n</code>\n\
    I assume you do not have access to any sorting functions. You can implement it\
    \ yourself, by comparing only the first element:\n<code>\n<?php", "  $n = count($l);\n\
    \  if ($n < 1) {\n    return;\n  }\n  $max = reset($l);\n  for ($i = 1; $i < $n;\
    \ $i++) {\n    $val = reset($l);\n    if ($val > $max) {\n      $max = $val;\n\
    \    }\n    $l = array_slice($l, 1);\n  }\n  return $max;\n}\n\n/**\n * Returns\
    \ the index of the maximum element in the list.\n *\n * @see max_element()\n *\
    \ @param array $l List of numbers.\n * @return int Index of the maximum element.\n\
    \ */", "  if (count($l) == 0) {\n    return null;\n  }\n\n  foreach ($l as $item)\
    \ {\n    $v = $item;\n    foreach ($l as $moreItem) {\n      if ($moreItem ==\
    \ $v) {\n        $v = null;\n        break;\n      }\n    }\n\n    if ($v != null)\
    \ {\n      return $v;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Return the number\
    \ of items in a PHP array/object\n *\n * Example:\n * >>> count_items([\"a\",\
    \ \"b\", \"c\"])\n * 3\n * >>> count_items([\"a\", \"b\", \"c\", \"d\"])\n * 4\n\
    \ * >>> count_items([1, 2, \"a\"])\n * 2\n * >>> count_items([1, 2, 3, 4])\n *\
    \ 6\n *\n * @param array|object $l An array or object to count the items of\n\
    \ * @return int The number of items in $l\n */", "\tforeach ($l as $item) {\n\t\
    \tif ($item == max($l)) return $item;\n\t}\n\treturn NULL;\n}", "    sort($l);\n\
    \    return array_pop($l);\n}\n", "    $mv = $l = array_change_key_case($l, CASE_LOWER);\n\
    \    $n = count($l);\n    for ($i = $n - 1; $i > 0; $i--) {\n        $e = $l[$i];\n\
    \        if ($e > $mv)\n            $mv = $e;\n    }\n    return $mv;\n}", " \
    \   sort($l);\n    return $l[count($l) - 1];\n}\n", "  $max = NULL;\n\n  // Return\
    \ NULL if list is empty.\n  if (!is_array($l)) {\n    return $max;\n  }\n\n  //\
    \ Return NULL if the list is empty.\n  if (count($l) === 0) {\n    return $max;\n\
    \  }\n\n  // Iterate through every value in the array and compare it to the current\
    \ max\n  // value.\n  foreach ($l as $key => $value) {\n    if ($max === NULL\
    \ || $value > $max) {\n      $max = $value;\n    }\n  }\n\n  return $max;\n}",
  "    return ($l[sizeof($l)-1] > $l[0]) ? $l[sizeof($l)-1] : $l[0];\n}", "    $m\
    \ = null;\n    reset($l);\n    while (list($i, $v) = each($l)) {\n        if ($v\
    \ > $m) {\n            $m = $v;\n        }\n    }\n    return $m;\n}\n", "   \
    \ return $l[count($l) - 1];\n}\n", "    if (count($l) === 0) {\n        return\
    \ false;\n    }\n    $max = $l[0];\n    foreach ($l as $e) {\n        if ($e >\
    \ $max) {\n            $max = $e;\n        }\n    }\n    return $max;\n}\n", " \
    \   $l = array_flip($l);\n    return current($l);\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=5 tags=php |>\n<code>\n<?php\n", "    if (count($l) < 1) return\
    \ false;\n    $first = current($l);\n    $rc = false;\n    foreach($l as $e) {\n\
    \        if ($e > $first) {\n            $first = $e;\n        } else {\n    \
    \        $rc = true;\n        }\n    }\n    return $first ? $first : $rc;\n}\n",
  "    if (!is_array($l))\n        throw new Exception('First argument must be an\
    \ array.');\n    if (empty($l))\n        return null;\n    $i = count($l);\n \
    \   while ($i > 0 && $l[$i - 1] >= $l[$i - 1])\n        --$i;\n    return $i ?\
    \ $l[$i - 1] : null;\n}\n", "    if ($l == null) {\n        return;\n    }\n \
    \   $v = $l[0];\n    foreach ($l as $k) {\n        if ($v > $k) {\n          \
    \  $v = $k;\n        }\n    }\n    return $v;\n}", "\t$l = array_reverse($l);\n\
    \tfor ($i = 0, $c = count($l); $i < $c; ++$i) {\n\t\tif ($l[$i] > $l[$i - 1])\
    \ {\n\t\t\t$t = $l[$i - 1];\n\t\t\t$l[$i - 1] = $l[$i];\n\t\t\t$l[$i] = $t;\n\t\
    \t}\n\t}\n\treturn $l[0];\n}\n", "  $r = $l[0];\n  for ($i = 1; $i < count($l);\
    \ $i++) {\n    if ($r > $l[$i]) {\n      $r = $l[$i];\n    }\n  }\n  return $r;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI wrote a quick javascript solution, but\
    \ I don't think it can be done in PHP without resorting to a language other than\
    \ PHP. http://pastebin.com/Q1i3ZB3j\n<|/ c |>\n<| c |>\nI appreciate all the effort\
    \ you've put into your answers, however, I feel that your answer is way off-topic\
    \ because you just have some code without explaining how it works. The goal of\
    \ Stack Overflow is to create a repository of knowledge, which means we help people\
    \ to understand the solution, instead of just pasting codes.\n<|/ c |>\n<| c |>\n\
    I don't think this is an off-topic answer. My solution clearly explains how it\
    \ works, not just the code.\n<|/ c |>\n<| c |>\nYou don't need to explain your\
    \ solution. Though it could be helpful for other visitors, it is not what StackOverflow\
    \ was designed for. Answering your own question is not only encouraged but it\
    \ is the only way to help other visitors who face the same problem in the future.\
    \ Your answer is simply wrong, that's all.\n<|/ c |>\n<| c |>\nI agree with. I\
    \ was just looking for a way to do this in PHP since I'm already familiar with\
    \ PHP. The answer I posted is pretty much what I was looking for. Also, thanks\
    \ for your feedback!\n<|/ c |>\n<| a |>\nYou can find the maximum of any array\
    \ using PHP's max() function.\n<code>\n<?php\n$myArray = array(1, 2, 3, 4, 5);\
    \ // myArray[0] will be the max\n", "    $n = count($l);\n    for ($i=$n-1; $i>0;\
    \ $i--) {\n        $a = $l[$i];\n        if (($a < $l[$i-1]) || ($a != $l[$i-1]\
    \ && $a > $l[$i])) return $a;\n    }\n    return $l[0];\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nCan you give an example of how this would work?\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\npublic function sort_numerically_descend($data){\n    $return\
    \ = array();\n    foreach($data as $key => $value){\n        if(!is_numeric($value))\
    \ {\n            continue;\n        }\n        $return[$key] = $value;\n    }\n\
    \n    natsort($return);\n    $return = array_reverse($return);\n    return $return;\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$arr\
    \ = array(\n    '100'=> 'a',\n    '80'=> 'c',\n    '1'=> 'b',\n    '15'=> 'f'\n\
    );\n\nasort($arr);\nksort($arr);\nprint_r($arr);\n</code>\nOutputs:\n<code>\n\
    Array\n(\n    [15] => f\n    [1] => b\n    100 => a\n    80 => c\n)\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n<?php", "    $max = reset($l);\n\
    \    foreach ($l as $item) {\n        if ($item > $max) $max = $item;\n    }\n\
    \    return $max;\n}\n", "    return current($l);\n}\n\n/**\n * Echo a list\n\
    \ *\n * @param  list  $l   List to echo\n * @return void\n */", "  if (count($l)\
    \ === 0) return null;\n\n  $last = array_pop($l);\n  $max = $last;\n  foreach\
    \ ($l as $e) {\n    $a = $e < $max ? $e : $max;\n    $max = $a < $last ? $a :\
    \ $last;\n  }\n  return $max;\n}\n", "  // Return max of the list\n  if (is_array($l)\
    \ && count($l)) {\n    return $l[count($l) - 1];\n  }\n}", "  foreach ($l as $key\
    \ => $value) {\n    if ($value > max($value)) {\n      $max = max($value);\n \
    \     unset($l[$key]);\n    }\n  }\n  return $max;\n}", "    // If the list is\
    \ empty, return null.\n    if (empty($l)) {\n        throw new \\Exception('Empty\
    \ list.');\n    }\n\n    // If the list is empty, return null.\n    if (count($l)\
    \ == 0) {\n        return null;\n    }\n\n    // Initialize max to null.\n   \
    \ $max = null;\n\n    // Get the first element.\n    $first = array_shift($l);\n\
    \n    // If first is null, return null.\n    if ($first === null) {\n        return\
    \ null;\n    }\n\n    // If first is null, return null.\n    if ($first == null)\
    \ {\n        return null;\n    }\n\n    // If $first is null, recursively invoke\
    \ the max_element() method with\n    // the rest of the list.\n    if ($first\
    \ === null) {\n        return max_element($l);\n    }\n\n    // If first is greater\
    \ than $max, return $first.\n    if ($first > $max) {\n        $max = $first;\n\
    \    }\n\n    // Invoke max_element() recursively with the remaining elements\
    \ in the list.\n    return max_element($l);\n}", "  $r = false;\n  foreach ($l\
    \ as $e) {\n    if ($r < $e) {\n      $r = $e;\n    }\n  }\n  return $r;\n}\n",
  "  $f = max($l);\n  $l = array_filter($l, function($v) use ($f) { return $v > $f;\
    \ });\n  return $f === end($l) ? NULL : end($l);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nNice solution, no idea why this got downvoted - but thanks :)\n\
    <|/ c |>\n<| c |>\nI wasn't going to downvote. Nice solution too !\n<|/ c |>\n\
    <| c |>\n: Thanks for the upvote. Had no idea `array_filter` would accept a function\
    \ this way.\n<|/ c |>\n<| a dscore=4 |>\nI think this is a bad idea, but to answer\
    \ your question anyway...\n<code>\n$array = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10];\n\n$i = 1;\nforeach ($array as $key => $val) {\n    if ($val > $array[0])\
    \ {\n        $array[$key] = $array[0];\n        $array[0] = $val;\n        unset($array[0]);\n\
    \    }\n    if ($val == $array[0]) {\n        $i++;\n    }\n}\n</code>\n<|/ a\
    \ tags=php,sorting,arrays |>\n<| c |>\nWhat is \"bad idea\"? It sorts exactly\
    \ as you want.\n<|/ c |>\n<| c |>\nNo, this solution won't work if the array contains\
    \ duplicate elements (see your array example).\n<|/ c |>\n<| c |>\nYou're right.\
    \ Fixed it\n<|/ c |>\n<| c |>\nI dont think this is correct. Check this out: `$array\
    \ = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 5]; var_dump($array);` It will give\
    \ `int(5)`.\n<|/ c |>\n<| c |>\nHmm. I haven't had a chance to test this yet.\
    \ I'll do so shortly and let you know what I find.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "    // Sort the list first.\n    sort($l);\n    // Return the\
    \ last element\n    return $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n\
    \    return array_search(max($l), $l);\n}\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| c |>\nThat only works if the array has two or more elements, it will\
    \ break if the array has less than two elements. If the array is empty this returns\
    \ the empty string.\n<|/ c |>\n<| a dscore=0 |>\nTo get the largest number in\
    \ an array, you can use this function:\n<code>", "  if (empty($l)) {\n    throw\
    \ new Exception(\"Empty array\");\n  }\n\n  if (count($l) === 1) {\n    return\
    \ $l[0];\n  }\n\n  $max = $l[0];\n  $max = max($max);\n\n  foreach ($l as $el)\
    \ {\n    if ($el > $max) {\n      $max = $el;\n    }\n  }\n  return $max;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
